
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08010c2c  08010c2c  00020c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d3c  08010d3c  00030164  2**0
                  CONTENTS
  4 .ARM          00000008  08010d3c  08010d3c  00020d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d44  08010d44  00030164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d44  08010d44  00020d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d48  08010d48  00020d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08010d4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006eb4  20000164  08010eb0  00030164  2**2
                  ALLOC
 10 ._user_heap_stack 0000c000  20007018  08010eb0  00037018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cf5e  00000000  00000000  00030194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006137  00000000  00000000  0005d0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002190  00000000  00000000  00063230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ef8  00000000  00000000  000653c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009ebb  00000000  00000000  000672b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c731  00000000  00000000  00071173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1b5e  00000000  00000000  0009d8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018f402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f8c  00000000  00000000  0018f454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000164 	.word	0x20000164
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010c14 	.word	0x08010c14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000168 	.word	0x20000168
 800020c:	08010c14 	.word	0x08010c14

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f002 ff02 	bl	8003320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f82e 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fd1e 	bl	8000f60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fcc6 	bl	8000eb4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000528:	f000 f89a 	bl	8000660 <MX_ADC1_Init>
  MX_ADC2_Init();
 800052c:	f000 f924 	bl	8000778 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000530:	f000 f9ac 	bl	800088c <MX_CAN1_Init>
  MX_TIM1_Init();
 8000534:	f000 fa22 	bl	800097c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000538:	f000 fac0 	bl	8000abc <MX_TIM2_Init>
  MX_TIM3_Init();
 800053c:	f000 fb34 	bl	8000ba8 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000540:	f000 fc16 	bl	8000d70 <MX_TIM8_Init>
  MX_I2C1_Init();
 8000544:	f000 f9ec 	bl	8000920 <MX_I2C1_Init>
  MX_CRC_Init();
 8000548:	f000 f9d6 	bl	80008f8 <MX_CRC_Init>
  MX_TIM6_Init();
 800054c:	f000 fba4 	bl	8000c98 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000550:	f000 fbd8 	bl	8000d04 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000554:	f00c fd90 	bl	800d078 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of setupTask */
  setupTaskHandle = osThreadNew(StartSetupTask, NULL, &setupTask_attributes);
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <main+0x5c>)
 800055a:	2100      	movs	r1, #0
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <main+0x60>)
 800055e:	f00c fdd5 	bl	800d10c <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <main+0x64>)
 8000566:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000568:	f00c fdaa 	bl	800d0c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	e7fe      	b.n	800056c <main+0x58>
 800056e:	bf00      	nop
 8000570:	08010c98 	.word	0x08010c98
 8000574:	08001199 	.word	0x08001199
 8000578:	20000684 	.word	0x20000684

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2234      	movs	r2, #52	; 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f010 f9d4 	bl	8010938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <SystemClock_Config+0xdc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a2b      	ldr	r2, [pc, #172]	; (8000658 <SystemClock_Config+0xdc>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <SystemClock_Config+0xdc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4b26      	ldr	r3, [pc, #152]	; (800065c <SystemClock_Config+0xe0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a25      	ldr	r2, [pc, #148]	; (800065c <SystemClock_Config+0xe0>)
 80005c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <SystemClock_Config+0xe0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005f0:	23b4      	movs	r3, #180	; 0xb4
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005f8:	2308      	movs	r3, #8
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4618      	mov	r0, r3
 8000606:	f006 ff99 	bl	800753c <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000610:	f000 fe50 	bl	80012b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000614:	f006 f89c 	bl	8006750 <HAL_PWREx_EnableOverDrive>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800061e:	f000 fe49 	bl	80012b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000638:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	2105      	movs	r1, #5
 8000640:	4618      	mov	r0, r3
 8000642:	f006 f8d5 	bl	80067f0 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800064c:	f000 fe32 	bl	80012b4 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	; 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000672:	4b3d      	ldr	r3, [pc, #244]	; (8000768 <MX_ADC1_Init+0x108>)
 8000674:	4a3d      	ldr	r2, [pc, #244]	; (800076c <MX_ADC1_Init+0x10c>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000678:	4b3b      	ldr	r3, [pc, #236]	; (8000768 <MX_ADC1_Init+0x108>)
 800067a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800067e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000680:	4b39      	ldr	r3, [pc, #228]	; (8000768 <MX_ADC1_Init+0x108>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000686:	4b38      	ldr	r3, [pc, #224]	; (8000768 <MX_ADC1_Init+0x108>)
 8000688:	2201      	movs	r2, #1
 800068a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800068c:	4b36      	ldr	r3, [pc, #216]	; (8000768 <MX_ADC1_Init+0x108>)
 800068e:	2201      	movs	r2, #1
 8000690:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4b35      	ldr	r3, [pc, #212]	; (8000768 <MX_ADC1_Init+0x108>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069a:	4b33      	ldr	r3, [pc, #204]	; (8000768 <MX_ADC1_Init+0x108>)
 800069c:	2200      	movs	r2, #0
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a0:	4b31      	ldr	r3, [pc, #196]	; (8000768 <MX_ADC1_Init+0x108>)
 80006a2:	4a33      	ldr	r2, [pc, #204]	; (8000770 <MX_ADC1_Init+0x110>)
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a6:	4b30      	ldr	r3, [pc, #192]	; (8000768 <MX_ADC1_Init+0x108>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80006ac:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <MX_ADC1_Init+0x108>)
 80006ae:	2205      	movs	r2, #5
 80006b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <MX_ADC1_Init+0x108>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <MX_ADC1_Init+0x108>)
 80006bc:	2201      	movs	r2, #1
 80006be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	4829      	ldr	r0, [pc, #164]	; (8000768 <MX_ADC1_Init+0x108>)
 80006c2:	f002 fe93 	bl	80033ec <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006cc:	f000 fdf2 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006d0:	2305      	movs	r3, #5
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006d8:	2307      	movs	r3, #7
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4821      	ldr	r0, [pc, #132]	; (8000768 <MX_ADC1_Init+0x108>)
 80006e2:	f002 fff5 	bl	80036d0 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006ec:	f000 fde2 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006f0:	2306      	movs	r3, #6
 80006f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	481a      	ldr	r0, [pc, #104]	; (8000768 <MX_ADC1_Init+0x108>)
 80006fe:	f002 ffe7 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000708:	f000 fdd4 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800070c:	2307      	movs	r3, #7
 800070e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000710:	2303      	movs	r3, #3
 8000712:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	4619      	mov	r1, r3
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <MX_ADC1_Init+0x108>)
 800071a:	f002 ffd9 	bl	80036d0 <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000724:	f000 fdc6 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000728:	230e      	movs	r3, #14
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <MX_ADC1_Init+0x108>)
 8000736:	f002 ffcb 	bl	80036d0 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000740:	f000 fdb8 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_ADC1_Init+0x114>)
 8000746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000748:	2305      	movs	r3, #5
 800074a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_ADC1_Init+0x108>)
 8000752:	f002 ffbd 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800075c:	f000 fdaa 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000180 	.word	0x20000180
 800076c:	40012000 	.word	0x40012000
 8000770:	0f000001 	.word	0x0f000001
 8000774:	10000012 	.word	0x10000012

08000778 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800078a:	4b3d      	ldr	r3, [pc, #244]	; (8000880 <MX_ADC2_Init+0x108>)
 800078c:	4a3d      	ldr	r2, [pc, #244]	; (8000884 <MX_ADC2_Init+0x10c>)
 800078e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000790:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <MX_ADC2_Init+0x108>)
 8000792:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000796:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000798:	4b39      	ldr	r3, [pc, #228]	; (8000880 <MX_ADC2_Init+0x108>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800079e:	4b38      	ldr	r3, [pc, #224]	; (8000880 <MX_ADC2_Init+0x108>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007a4:	4b36      	ldr	r3, [pc, #216]	; (8000880 <MX_ADC2_Init+0x108>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <MX_ADC2_Init+0x108>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b2:	4b33      	ldr	r3, [pc, #204]	; (8000880 <MX_ADC2_Init+0x108>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b8:	4b31      	ldr	r3, [pc, #196]	; (8000880 <MX_ADC2_Init+0x108>)
 80007ba:	4a33      	ldr	r2, [pc, #204]	; (8000888 <MX_ADC2_Init+0x110>)
 80007bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007be:	4b30      	ldr	r3, [pc, #192]	; (8000880 <MX_ADC2_Init+0x108>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 80007c4:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <MX_ADC2_Init+0x108>)
 80007c6:	2205      	movs	r2, #5
 80007c8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_ADC2_Init+0x108>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_ADC2_Init+0x108>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007d8:	4829      	ldr	r0, [pc, #164]	; (8000880 <MX_ADC2_Init+0x108>)
 80007da:	f002 fe07 	bl	80033ec <HAL_ADC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80007e4:	f000 fd66 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007f0:	2307      	movs	r3, #7
 80007f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	4619      	mov	r1, r3
 80007f8:	4821      	ldr	r0, [pc, #132]	; (8000880 <MX_ADC2_Init+0x108>)
 80007fa:	f002 ff69 	bl	80036d0 <HAL_ADC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000804:	f000 fd56 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000808:	2301      	movs	r3, #1
 800080a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	481a      	ldr	r0, [pc, #104]	; (8000880 <MX_ADC2_Init+0x108>)
 8000816:	f002 ff5b 	bl	80036d0 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000820:	f000 fd48 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000824:	2302      	movs	r3, #2
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000828:	2303      	movs	r3, #3
 800082a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	4813      	ldr	r0, [pc, #76]	; (8000880 <MX_ADC2_Init+0x108>)
 8000832:	f002 ff4d 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800083c:	f000 fd3a 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000840:	2303      	movs	r3, #3
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_ADC2_Init+0x108>)
 800084e:	f002 ff3f 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000858:	f000 fd2c 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800085c:	2304      	movs	r3, #4
 800085e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000860:	2305      	movs	r3, #5
 8000862:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_ADC2_Init+0x108>)
 800086a:	f002 ff31 	bl	80036d0 <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8000874:	f000 fd1e 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200001c8 	.word	0x200001c8
 8000884:	40012100 	.word	0x40012100
 8000888:	0f000001 	.word	0x0f000001

0800088c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_CAN1_Init+0x64>)
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <MX_CAN1_Init+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_CAN1_Init+0x64>)
 8000898:	2205      	movs	r2, #5
 800089a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_CAN1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_CAN1_Init+0x64>)
 80008a4:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80008a8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_CAN1_Init+0x64>)
 80008ac:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80008b0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_CAN1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <MX_CAN1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_CAN1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_CAN1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_CAN1_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_CAN1_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_CAN1_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_CAN1_Init+0x64>)
 80008de:	f003 f9a7 	bl	8003c30 <HAL_CAN_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008e8:	f000 fce4 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200002d0 	.word	0x200002d0
 80008f4:	40006400 	.word	0x40006400

080008f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_CRC_Init+0x20>)
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <MX_CRC_Init+0x24>)
 8000900:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_CRC_Init+0x20>)
 8000904:	f003 fda0 	bl	8004448 <HAL_CRC_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800090e:	f000 fcd1 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200002f8 	.word	0x200002f8
 800091c:	40023000 	.word	0x40023000

08000920 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_I2C1_Init+0x50>)
 8000926:	4a13      	ldr	r2, [pc, #76]	; (8000974 <MX_I2C1_Init+0x54>)
 8000928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_I2C1_Init+0x50>)
 800092c:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_I2C1_Init+0x58>)
 800092e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_I2C1_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_I2C1_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_I2C1_Init+0x50>)
 800093e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000942:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_I2C1_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_I2C1_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_I2C1_Init+0x50>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_I2C1_Init+0x50>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_I2C1_Init+0x50>)
 800095e:	f004 fadd 	bl	8004f1c <HAL_I2C_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000968:	f000 fca4 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000300 	.word	0x20000300
 8000974:	40005400 	.word	0x40005400
 8000978:	00061a80 	.word	0x00061a80

0800097c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b096      	sub	sp, #88	; 0x58
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
 80009aa:	615a      	str	r2, [r3, #20]
 80009ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2220      	movs	r2, #32
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f00f ffbf 	bl	8010938 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ba:	4b3e      	ldr	r3, [pc, #248]	; (8000ab4 <MX_TIM1_Init+0x138>)
 80009bc:	4a3e      	ldr	r2, [pc, #248]	; (8000ab8 <MX_TIM1_Init+0x13c>)
 80009be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1799;
 80009c0:	4b3c      	ldr	r3, [pc, #240]	; (8000ab4 <MX_TIM1_Init+0x138>)
 80009c2:	f240 7207 	movw	r2, #1799	; 0x707
 80009c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <MX_TIM1_Init+0x138>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80009ce:	4b39      	ldr	r3, [pc, #228]	; (8000ab4 <MX_TIM1_Init+0x138>)
 80009d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <MX_TIM1_Init+0x138>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009dc:	4b35      	ldr	r3, [pc, #212]	; (8000ab4 <MX_TIM1_Init+0x138>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <MX_TIM1_Init+0x138>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009e8:	4832      	ldr	r0, [pc, #200]	; (8000ab4 <MX_TIM1_Init+0x138>)
 80009ea:	f007 f845 	bl	8007a78 <HAL_TIM_Base_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f000 fc5e 	bl	80012b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a02:	4619      	mov	r1, r3
 8000a04:	482b      	ldr	r0, [pc, #172]	; (8000ab4 <MX_TIM1_Init+0x138>)
 8000a06:	f007 fe1b 	bl	8008640 <HAL_TIM_ConfigClockSource>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a10:	f000 fc50 	bl	80012b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a14:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <MX_TIM1_Init+0x138>)
 8000a16:	f007 f8ef 	bl	8007bf8 <HAL_TIM_PWM_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a20:	f000 fc48 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a30:	4619      	mov	r1, r3
 8000a32:	4820      	ldr	r0, [pc, #128]	; (8000ab4 <MX_TIM1_Init+0x138>)
 8000a34:	f008 fd80 	bl	8009538 <HAL_TIMEx_MasterConfigSynchronization>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a3e:	f000 fc39 	bl	80012b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a42:	2360      	movs	r3, #96	; 0x60
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	220c      	movs	r2, #12
 8000a60:	4619      	mov	r1, r3
 8000a62:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <MX_TIM1_Init+0x138>)
 8000a64:	f007 fd2a 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000a6e:	f000 fc21 	bl	80012b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <MX_TIM1_Init+0x138>)
 8000a96:	f008 fdcb 	bl	8009630 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000aa0:	f000 fc08 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <MX_TIM1_Init+0x138>)
 8000aa6:	f002 f9ed 	bl	8002e84 <HAL_TIM_MspPostInit>

}
 8000aaa:	bf00      	nop
 8000aac:	3758      	adds	r7, #88	; 0x58
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000354 	.word	0x20000354
 8000ab8:	40010000 	.word	0x40010000

08000abc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	615a      	str	r2, [r3, #20]
 8000aea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <MX_TIM2_Init+0xe8>)
 8000aee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <MX_TIM2_Init+0xe8>)
 8000af6:	f240 3283 	movw	r2, #899	; 0x383
 8000afa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <MX_TIM2_Init+0xe8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <MX_TIM2_Init+0xe8>)
 8000b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_TIM2_Init+0xe8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_TIM2_Init+0xe8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b16:	4823      	ldr	r0, [pc, #140]	; (8000ba4 <MX_TIM2_Init+0xe8>)
 8000b18:	f006 ffae 	bl	8007a78 <HAL_TIM_Base_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b22:	f000 fbc7 	bl	80012b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b30:	4619      	mov	r1, r3
 8000b32:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <MX_TIM2_Init+0xe8>)
 8000b34:	f007 fd84 	bl	8008640 <HAL_TIM_ConfigClockSource>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b3e:	f000 fbb9 	bl	80012b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b42:	4818      	ldr	r0, [pc, #96]	; (8000ba4 <MX_TIM2_Init+0xe8>)
 8000b44:	f007 f858 	bl	8007bf8 <HAL_TIM_PWM_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b4e:	f000 fbb1 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4810      	ldr	r0, [pc, #64]	; (8000ba4 <MX_TIM2_Init+0xe8>)
 8000b62:	f008 fce9 	bl	8009538 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b6c:	f000 fba2 	bl	80012b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b70:	2360      	movs	r3, #96	; 0x60
 8000b72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2208      	movs	r2, #8
 8000b84:	4619      	mov	r1, r3
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <MX_TIM2_Init+0xe8>)
 8000b88:	f007 fc98 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b92:	f000 fb8f 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b96:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <MX_TIM2_Init+0xe8>)
 8000b98:	f002 f974 	bl	8002e84 <HAL_TIM_MspPostInit>

}
 8000b9c:	bf00      	nop
 8000b9e:	3738      	adds	r7, #56	; 0x38
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2000039c 	.word	0x2000039c

08000ba8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbc:	f107 0320 	add.w	r3, r7, #32
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bd8:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <MX_TIM3_Init+0xe8>)
 8000bda:	4a2e      	ldr	r2, [pc, #184]	; (8000c94 <MX_TIM3_Init+0xec>)
 8000bdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 8000bde:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <MX_TIM3_Init+0xe8>)
 8000be0:	f240 3283 	movw	r2, #899	; 0x383
 8000be4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <MX_TIM3_Init+0xe8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <MX_TIM3_Init+0xe8>)
 8000bee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf4:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <MX_TIM3_Init+0xe8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfa:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <MX_TIM3_Init+0xe8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c00:	4823      	ldr	r0, [pc, #140]	; (8000c90 <MX_TIM3_Init+0xe8>)
 8000c02:	f006 ff39 	bl	8007a78 <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c0c:	f000 fb52 	bl	80012b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	481c      	ldr	r0, [pc, #112]	; (8000c90 <MX_TIM3_Init+0xe8>)
 8000c1e:	f007 fd0f 	bl	8008640 <HAL_TIM_ConfigClockSource>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c28:	f000 fb44 	bl	80012b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c2c:	4818      	ldr	r0, [pc, #96]	; (8000c90 <MX_TIM3_Init+0xe8>)
 8000c2e:	f006 ffe3 	bl	8007bf8 <HAL_TIM_PWM_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c38:	f000 fb3c 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c44:	f107 0320 	add.w	r3, r7, #32
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4811      	ldr	r0, [pc, #68]	; (8000c90 <MX_TIM3_Init+0xe8>)
 8000c4c:	f008 fc74 	bl	8009538 <HAL_TIMEx_MasterConfigSynchronization>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c56:	f000 fb2d 	bl	80012b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c5a:	2360      	movs	r3, #96	; 0x60
 8000c5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	220c      	movs	r2, #12
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <MX_TIM3_Init+0xe8>)
 8000c72:	f007 fc23 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c7c:	f000 fb1a 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <MX_TIM3_Init+0xe8>)
 8000c82:	f002 f8ff 	bl	8002e84 <HAL_TIM_MspPostInit>

}
 8000c86:	bf00      	nop
 8000c88:	3738      	adds	r7, #56	; 0x38
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200003e4 	.word	0x200003e4
 8000c94:	40000400 	.word	0x40000400

08000c98 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000ca8:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <MX_TIM6_Init+0x68>)
 8000caa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000cae:	2259      	movs	r2, #89	; 0x59
 8000cb0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xfffe;
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000cba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000cbe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000cc8:	f006 fed6 	bl	8007a78 <HAL_TIM_Base_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000cd2:	f000 faef 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <MX_TIM6_Init+0x64>)
 8000ce4:	f008 fc28 	bl	8009538 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000cee:	f000 fae1 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000042c 	.word	0x2000042c
 8000d00:	40001000 	.word	0x40001000

08000d04 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d14:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <MX_TIM7_Init+0x68>)
 8000d16:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d1a:	2259      	movs	r2, #89	; 0x59
 8000d1c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d2a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d34:	f006 fea0 	bl	8007a78 <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000d3e:	f000 fab9 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_TIM7_Init+0x64>)
 8000d50:	f008 fbf2 	bl	8009538 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000d5a:	f000 faab 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000474 	.word	0x20000474
 8000d6c:	40001400 	.word	0x40001400

08000d70 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b096      	sub	sp, #88	; 0x58
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2220      	movs	r2, #32
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f00f fdc5 	bl	8010938 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dae:	4b3f      	ldr	r3, [pc, #252]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000db0:	4a3f      	ldr	r2, [pc, #252]	; (8000eb0 <MX_TIM8_Init+0x140>)
 8000db2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1799;
 8000db4:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000db6:	f240 7207 	movw	r2, #1799	; 0x707
 8000dba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000dc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dca:	4b38      	ldr	r3, [pc, #224]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dd0:	4b36      	ldr	r3, [pc, #216]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b35      	ldr	r3, [pc, #212]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000ddc:	4833      	ldr	r0, [pc, #204]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000dde:	f006 fe4b 	bl	8007a78 <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000de8:	f000 fa64 	bl	80012b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000df2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000df6:	4619      	mov	r1, r3
 8000df8:	482c      	ldr	r0, [pc, #176]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000dfa:	f007 fc21 	bl	8008640 <HAL_TIM_ConfigClockSource>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000e04:	f000 fa56 	bl	80012b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e08:	4828      	ldr	r0, [pc, #160]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000e0a:	f006 fef5 	bl	8007bf8 <HAL_TIM_PWM_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000e14:	f000 fa4e 	bl	80012b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e24:	4619      	mov	r1, r3
 8000e26:	4821      	ldr	r0, [pc, #132]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000e28:	f008 fb86 	bl	8009538 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000e32:	f000 fa3f 	bl	80012b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e36:	2360      	movs	r3, #96	; 0x60
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	2204      	movs	r2, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4814      	ldr	r0, [pc, #80]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000e5c:	f007 fb2e 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000e66:	f000 fa25 	bl	80012b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4807      	ldr	r0, [pc, #28]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000e8e:	f008 fbcf 	bl	8009630 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8000e98:	f000 fa0c 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e9c:	4803      	ldr	r0, [pc, #12]	; (8000eac <MX_TIM8_Init+0x13c>)
 8000e9e:	f001 fff1 	bl	8002e84 <HAL_TIM_MspPostInit>

}
 8000ea2:	bf00      	nop
 8000ea4:	3758      	adds	r7, #88	; 0x58
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200004bc 	.word	0x200004bc
 8000eb0:	40010400 	.word	0x40010400

08000eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <MX_DMA_Init+0xa8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a26      	ldr	r2, [pc, #152]	; (8000f5c <MX_DMA_Init+0xa8>)
 8000ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <MX_DMA_Init+0xa8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_DMA_Init+0xa8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <MX_DMA_Init+0xa8>)
 8000ee0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_DMA_Init+0xa8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	200c      	movs	r0, #12
 8000ef8:	f003 fa7c 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000efc:	200c      	movs	r0, #12
 8000efe:	f003 fa95 	bl	800442c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2105      	movs	r1, #5
 8000f06:	200d      	movs	r0, #13
 8000f08:	f003 fa74 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f0c:	200d      	movs	r0, #13
 8000f0e:	f003 fa8d 	bl	800442c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2105      	movs	r1, #5
 8000f16:	2038      	movs	r0, #56	; 0x38
 8000f18:	f003 fa6c 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f1c:	2038      	movs	r0, #56	; 0x38
 8000f1e:	f003 fa85 	bl	800442c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2105      	movs	r1, #5
 8000f26:	203a      	movs	r0, #58	; 0x3a
 8000f28:	f003 fa64 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f2c:	203a      	movs	r0, #58	; 0x3a
 8000f2e:	f003 fa7d 	bl	800442c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2105      	movs	r1, #5
 8000f36:	203b      	movs	r0, #59	; 0x3b
 8000f38:	f003 fa5c 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f3c:	203b      	movs	r0, #59	; 0x3b
 8000f3e:	f003 fa75 	bl	800442c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2105      	movs	r1, #5
 8000f46:	203c      	movs	r0, #60	; 0x3c
 8000f48:	f003 fa54 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000f4c:	203c      	movs	r0, #60	; 0x3c
 8000f4e:	f003 fa6d 	bl	800442c <HAL_NVIC_EnableIRQ>

}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800

08000f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	; 0x38
 8000f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
 8000f7a:	4b80      	ldr	r3, [pc, #512]	; (800117c <MX_GPIO_Init+0x21c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a7f      	ldr	r2, [pc, #508]	; (800117c <MX_GPIO_Init+0x21c>)
 8000f80:	f043 0310 	orr.w	r3, r3, #16
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b7d      	ldr	r3, [pc, #500]	; (800117c <MX_GPIO_Init+0x21c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0310 	and.w	r3, r3, #16
 8000f8e:	623b      	str	r3, [r7, #32]
 8000f90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	4b79      	ldr	r3, [pc, #484]	; (800117c <MX_GPIO_Init+0x21c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a78      	ldr	r2, [pc, #480]	; (800117c <MX_GPIO_Init+0x21c>)
 8000f9c:	f043 0320 	orr.w	r3, r3, #32
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b76      	ldr	r3, [pc, #472]	; (800117c <MX_GPIO_Init+0x21c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0320 	and.w	r3, r3, #32
 8000faa:	61fb      	str	r3, [r7, #28]
 8000fac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	4b72      	ldr	r3, [pc, #456]	; (800117c <MX_GPIO_Init+0x21c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a71      	ldr	r2, [pc, #452]	; (800117c <MX_GPIO_Init+0x21c>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b6f      	ldr	r3, [pc, #444]	; (800117c <MX_GPIO_Init+0x21c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	4b6b      	ldr	r3, [pc, #428]	; (800117c <MX_GPIO_Init+0x21c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a6a      	ldr	r2, [pc, #424]	; (800117c <MX_GPIO_Init+0x21c>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b68      	ldr	r3, [pc, #416]	; (800117c <MX_GPIO_Init+0x21c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b64      	ldr	r3, [pc, #400]	; (800117c <MX_GPIO_Init+0x21c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a63      	ldr	r2, [pc, #396]	; (800117c <MX_GPIO_Init+0x21c>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b61      	ldr	r3, [pc, #388]	; (800117c <MX_GPIO_Init+0x21c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b5d      	ldr	r3, [pc, #372]	; (800117c <MX_GPIO_Init+0x21c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a5c      	ldr	r2, [pc, #368]	; (800117c <MX_GPIO_Init+0x21c>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b5a      	ldr	r3, [pc, #360]	; (800117c <MX_GPIO_Init+0x21c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b56      	ldr	r3, [pc, #344]	; (800117c <MX_GPIO_Init+0x21c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a55      	ldr	r2, [pc, #340]	; (800117c <MX_GPIO_Init+0x21c>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b53      	ldr	r3, [pc, #332]	; (800117c <MX_GPIO_Init+0x21c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b4f      	ldr	r3, [pc, #316]	; (800117c <MX_GPIO_Init+0x21c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a4e      	ldr	r2, [pc, #312]	; (800117c <MX_GPIO_Init+0x21c>)
 8001044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b4c      	ldr	r3, [pc, #304]	; (800117c <MX_GPIO_Init+0x21c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	213c      	movs	r1, #60	; 0x3c
 800105a:	4849      	ldr	r0, [pc, #292]	; (8001180 <MX_GPIO_Init+0x220>)
 800105c:	f003 ff2c 	bl	8004eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001066:	4847      	ldr	r0, [pc, #284]	; (8001184 <MX_GPIO_Init+0x224>)
 8001068:	f003 ff26 	bl	8004eb8 <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001072:	4845      	ldr	r0, [pc, #276]	; (8001188 <MX_GPIO_Init+0x228>)
 8001074:	f003 ff20 	bl	8004eb8 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEL1_Pin SEL0_Pin FAULTRST_Pin SEN_Pin */
  GPIO_InitStruct.Pin = SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin;
 8001078:	233c      	movs	r3, #60	; 0x3c
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800107c:	2311      	movs	r3, #17
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	4619      	mov	r1, r3
 800108e:	483c      	ldr	r0, [pc, #240]	; (8001180 <MX_GPIO_Init+0x220>)
 8001090:	f003 fd66 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 8001094:	230f      	movs	r3, #15
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001098:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	4838      	ldr	r0, [pc, #224]	; (800118c <MX_GPIO_Init+0x22c>)
 80010aa:	f003 fd59 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 80010ae:	f24f 0330 	movw	r3, #61488	; 0xf030
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010b4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4832      	ldr	r0, [pc, #200]	; (8001190 <MX_GPIO_Init+0x230>)
 80010c6:	f003 fd4b 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 80010ca:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010d0:	2311      	movs	r3, #17
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	4828      	ldr	r0, [pc, #160]	; (8001184 <MX_GPIO_Init+0x224>)
 80010e4:	f003 fd3c 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 80010e8:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010ee:	2311      	movs	r3, #17
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	4821      	ldr	r0, [pc, #132]	; (8001188 <MX_GPIO_Init+0x228>)
 8001102:	f003 fd2d 	bl	8004b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 8001106:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800110c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	481d      	ldr	r0, [pc, #116]	; (8001194 <MX_GPIO_Init+0x234>)
 800111e:	f003 fd1f 	bl	8004b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2105      	movs	r1, #5
 8001126:	2006      	movs	r0, #6
 8001128:	f003 f964 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800112c:	2006      	movs	r0, #6
 800112e:	f003 f97d 	bl	800442c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2105      	movs	r1, #5
 8001136:	2007      	movs	r0, #7
 8001138:	f003 f95c 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800113c:	2007      	movs	r0, #7
 800113e:	f003 f975 	bl	800442c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2105      	movs	r1, #5
 8001146:	2008      	movs	r0, #8
 8001148:	f003 f954 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800114c:	2008      	movs	r0, #8
 800114e:	f003 f96d 	bl	800442c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2105      	movs	r1, #5
 8001156:	2009      	movs	r0, #9
 8001158:	f003 f94c 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800115c:	2009      	movs	r0, #9
 800115e:	f003 f965 	bl	800442c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2105      	movs	r1, #5
 8001166:	200a      	movs	r0, #10
 8001168:	f003 f944 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800116c:	200a      	movs	r0, #10
 800116e:	f003 f95d 	bl	800442c <HAL_NVIC_EnableIRQ>

}
 8001172:	bf00      	nop
 8001174:	3738      	adds	r7, #56	; 0x38
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40021000 	.word	0x40021000
 8001184:	40020c00 	.word	0x40020c00
 8001188:	40021800 	.word	0x40021800
 800118c:	40021400 	.word	0x40021400
 8001190:	40020400 	.word	0x40020400
 8001194:	40020800 	.word	0x40020800

08001198 <StartSetupTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSetupTask */
void StartSetupTask(void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80011a0:	f00e fe14 	bl	800fdcc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  osThreadId_t selfId = osThreadGetId();
 80011a4:	f00c f844 	bl	800d230 <osThreadGetId>
 80011a8:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	PDM_Init(&hcan1, &hi2c1);
 80011aa:	4904      	ldr	r1, [pc, #16]	; (80011bc <StartSetupTask+0x24>)
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <StartSetupTask+0x28>)
 80011ae:	f000 f887 	bl	80012c0 <PDM_Init>

    osThreadSuspend(selfId);
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f00c f847 	bl	800d246 <osThreadSuspend>
	PDM_Init(&hcan1, &hi2c1);
 80011b8:	e7f7      	b.n	80011aa <StartSetupTask+0x12>
 80011ba:	bf00      	nop
 80011bc:	20000300 	.word	0x20000300
 80011c0:	200002d0 	.word	0x200002d0

080011c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a33      	ldr	r2, [pc, #204]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011d6:	f002 f8c5 	bl	8003364 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  __PDM_INCREMENT_FUSE_TIMER(htim);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a31      	ldr	r2, [pc, #196]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d14f      	bne.n	8001284 <HAL_TIM_PeriodElapsedCallback+0xc0>
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a2c      	ldr	r2, [pc, #176]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80011f6:	6053      	str	r3, [r2, #4]
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	3301      	adds	r3, #1
 80011fe:	4a2a      	ldr	r2, [pc, #168]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001200:	6093      	str	r3, [r2, #8]
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	3301      	adds	r3, #1
 8001208:	4a27      	ldr	r2, [pc, #156]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800120a:	60d3      	str	r3, [r2, #12]
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	3301      	adds	r3, #1
 8001212:	4a25      	ldr	r2, [pc, #148]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001214:	6113      	str	r3, [r2, #16]
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800121e:	6153      	str	r3, [r2, #20]
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	3301      	adds	r3, #1
 8001226:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	3301      	adds	r3, #1
 8001230:	4a1d      	ldr	r2, [pc, #116]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001232:	61d3      	str	r3, [r2, #28]
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	3301      	adds	r3, #1
 800123a:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800123c:	6213      	str	r3, [r2, #32]
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	3301      	adds	r3, #1
 8001244:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001246:	6253      	str	r3, [r2, #36]	; 0x24
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124c:	3301      	adds	r3, #1
 800124e:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001250:	6293      	str	r3, [r2, #40]	; 0x28
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	3301      	adds	r3, #1
 8001258:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800125a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	3301      	adds	r3, #1
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126a:	3301      	adds	r3, #1
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800126e:	6353      	str	r3, [r2, #52]	; 0x34
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001274:	3301      	adds	r3, #1
 8001276:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001278:	6393      	str	r3, [r2, #56]	; 0x38
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800127c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127e:	3301      	adds	r3, #1
 8001280:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001282:	63d3      	str	r3, [r2, #60]	; 0x3c

  __PDM_READINGS_TIMER(htim, readingSemaphore);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d104      	bne.n	8001298 <HAL_TIM_PeriodElapsedCallback+0xd4>
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f00b fff8 	bl	800d288 <osSemaphoreRelease>
  /* USER CODE END Callback 1 */
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40014000 	.word	0x40014000
 80012a4:	40001400 	.word	0x40001400
 80012a8:	2000095c 	.word	0x2000095c
 80012ac:	40001000 	.word	0x40001000
 80012b0:	20000688 	.word	0x20000688

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b8:	b672      	cpsid	i
}
 80012ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012bc:	e7fe      	b.n	80012bc <Error_Handler+0x8>
	...

080012c0 <PDM_Init>:

//Initialize PDM
//Loads from EEPROM
//Initializes PWM
void PDM_Init(CAN_HandleTypeDef *hcan, I2C_HandleTypeDef *hi2c)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	//Sets all outputs to zero
	Output_Reset_State();
 80012ca:	f000 f969 	bl	80015a0 <Output_Reset_State>

	//Weak function for data overwriting during initialization
	PDM_Hard_Code_Config();
 80012ce:	f000 f859 	bl	8001384 <PDM_Hard_Code_Config>
	//Loads both normal output and PWM output parameters
//	Output_Cfg_Load_From_EEPROM(hi2c);
//	PWM_Output_Cfg_Load_From_EEPROM(hi2c);

	//Initializes each PWM able output
	PDM_PWM_Init(hcan, &pwmOutStruct[0], 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	491b      	ldr	r1, [pc, #108]	; (8001344 <PDM_Init+0x84>)
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fbe4 	bl	8001aa4 <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[1], 1);
 80012dc:	2201      	movs	r2, #1
 80012de:	491a      	ldr	r1, [pc, #104]	; (8001348 <PDM_Init+0x88>)
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 fbdf 	bl	8001aa4 <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[2], 2);
 80012e6:	2202      	movs	r2, #2
 80012e8:	4918      	ldr	r1, [pc, #96]	; (800134c <PDM_Init+0x8c>)
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fbda 	bl	8001aa4 <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[3], 3);
 80012f0:	2203      	movs	r2, #3
 80012f2:	4917      	ldr	r1, [pc, #92]	; (8001350 <PDM_Init+0x90>)
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 fbd5 	bl	8001aa4 <PDM_PWM_Init>

	//Checks input pin levels
	PDM_Input_Process();
 80012fa:	f000 f9e7 	bl	80016cc <PDM_Input_Process>


	//Initializes CAN ID buffer
	__PDM_ID_BUFFER_INIT();
 80012fe:	2300      	movs	r3, #0
 8001300:	81fb      	strh	r3, [r7, #14]
 8001302:	e009      	b.n	8001318 <PDM_Init+0x58>
 8001304:	89fb      	ldrh	r3, [r7, #14]
 8001306:	89fa      	ldrh	r2, [r7, #14]
 8001308:	0052      	lsls	r2, r2, #1
 800130a:	b291      	uxth	r1, r2
 800130c:	4a11      	ldr	r2, [pc, #68]	; (8001354 <PDM_Init+0x94>)
 800130e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001312:	89fb      	ldrh	r3, [r7, #14]
 8001314:	3301      	adds	r3, #1
 8001316:	81fb      	strh	r3, [r7, #14]
 8001318:	89fb      	ldrh	r3, [r7, #14]
 800131a:	2b1d      	cmp	r3, #29
 800131c:	d9f2      	bls.n	8001304 <PDM_Init+0x44>

	//Sets outputs based on input levels
	PDM_Output_Process();
 800131e:	f000 fad5 	bl	80018cc <PDM_Output_Process>

	//Initializes timers and ADC conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcBuffer[5], 5);
 8001322:	2205      	movs	r2, #5
 8001324:	490c      	ldr	r1, [pc, #48]	; (8001358 <PDM_Init+0x98>)
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <PDM_Init+0x9c>)
 8001328:	f002 f8a4 	bl	8003474 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &adcBuffer[0], 5);
 800132c:	2205      	movs	r2, #5
 800132e:	490c      	ldr	r1, [pc, #48]	; (8001360 <PDM_Init+0xa0>)
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <PDM_Init+0xa4>)
 8001332:	f002 f89f 	bl	8003474 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim7);
 8001336:	480c      	ldr	r0, [pc, #48]	; (8001368 <PDM_Init+0xa8>)
 8001338:	f006 fbee 	bl	8007b18 <HAL_TIM_Base_Start_IT>

	return;
 800133c:	bf00      	nop
}
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200008dc 	.word	0x200008dc
 8001348:	200008fc 	.word	0x200008fc
 800134c:	2000091c 	.word	0x2000091c
 8001350:	2000093c 	.word	0x2000093c
 8001354:	20000764 	.word	0x20000764
 8001358:	200007aa 	.word	0x200007aa
 800135c:	20000180 	.word	0x20000180
 8001360:	200007a0 	.word	0x200007a0
 8001364:	200001c8 	.word	0x200001c8
 8001368:	20000474 	.word	0x20000474

0800136c <PDM_USB_Process>:

void PDM_USB_Process(uint8_t *Data, uint16_t Size)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
	return;
 8001378:	bf00      	nop
}
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <PDM_Hard_Code_Config>:
	return;
}

//Use for configuration without or with partial EEPROM data
__weak void PDM_Hard_Code_Config()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
	//Output 1 - Bomba de Combustível
	outputStruct[0].outEnable[0] = Output_Enabled;
 800138a:	4b81      	ldr	r3, [pc, #516]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800138c:	2201      	movs	r2, #1
 800138e:	741a      	strb	r2, [r3, #16]
	outputStruct[0].inputEnable[0] = 0x0011;
 8001390:	4b7f      	ldr	r3, [pc, #508]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001392:	2211      	movs	r2, #17
 8001394:	805a      	strh	r2, [r3, #2]
	outputStruct[0].inputLevels[0] = 0x0000;
 8001396:	4b7e      	ldr	r3, [pc, #504]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001398:	2200      	movs	r2, #0
 800139a:	80da      	strh	r2, [r3, #6]
	pwmOutStruct[0].pwmFrequency = PWM_FREQ_10000HZ;
 800139c:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 800139e:	2208      	movs	r2, #8
 80013a0:	805a      	strh	r2, [r3, #2]
	pwmOutStruct[0].outputType = OutType_Preset;
 80013a2:	4b7c      	ldr	r3, [pc, #496]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	711a      	strb	r2, [r3, #4]
	pwmOutStruct[0].presetEnable[0] = 0x0011;
 80013a8:	4b7a      	ldr	r3, [pc, #488]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 80013aa:	2211      	movs	r2, #17
 80013ac:	80da      	strh	r2, [r3, #6]
	pwmOutStruct[0].presetInputs[0] = 0x0000;
 80013ae:	4b79      	ldr	r3, [pc, #484]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	815a      	strh	r2, [r3, #10]
	pwmOutStruct[0].presetDutyCycle[0] = 1000;
 80013b4:	4b77      	ldr	r3, [pc, #476]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 80013b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ba:	81da      	strh	r2, [r3, #14]

	//Output 2 - Ventoinha Esquerda
	outputStruct[1].outEnable[0] = Output_Enabled;
 80013bc:	4b74      	ldr	r3, [pc, #464]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	outputStruct[1].inputEnable[0] = 0x001E;
 80013c4:	4b72      	ldr	r3, [pc, #456]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80013c6:	221e      	movs	r2, #30
 80013c8:	829a      	strh	r2, [r3, #20]
	outputStruct[1].inputLevels[0] = 0x0002;
 80013ca:	4b71      	ldr	r3, [pc, #452]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80013cc:	2202      	movs	r2, #2
 80013ce:	831a      	strh	r2, [r3, #24]
	pwmOutStruct[1].pwmFrequency = PWM_FREQ_10000HZ;
 80013d0:	4b70      	ldr	r3, [pc, #448]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 80013d2:	2208      	movs	r2, #8
 80013d4:	845a      	strh	r2, [r3, #34]	; 0x22
	pwmOutStruct[1].outputType = OutType_Preset;
 80013d6:	4b6f      	ldr	r3, [pc, #444]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pwmOutStruct[1].presetEnable[0] = 0x001E;
 80013de:	4b6d      	ldr	r3, [pc, #436]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 80013e0:	221e      	movs	r2, #30
 80013e2:	84da      	strh	r2, [r3, #38]	; 0x26
	pwmOutStruct[1].presetInputs[0] = 0x0002;
 80013e4:	4b6b      	ldr	r3, [pc, #428]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 80013e6:	2202      	movs	r2, #2
 80013e8:	855a      	strh	r2, [r3, #42]	; 0x2a
	pwmOutStruct[1].presetDutyCycle[0] = 1000;
 80013ea:	4b6a      	ldr	r3, [pc, #424]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 80013ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f0:	85da      	strh	r2, [r3, #46]	; 0x2e

	//Output 3 - Ventoinha Direita
	outputStruct[2].outEnable[0] = Output_Enabled;
 80013f2:	4b67      	ldr	r3, [pc, #412]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	outputStruct[2].inputEnable[0] = 0x001E;
 80013fa:	4b65      	ldr	r3, [pc, #404]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80013fc:	221e      	movs	r2, #30
 80013fe:	84da      	strh	r2, [r3, #38]	; 0x26
	outputStruct[2].inputLevels[0] = 0x0002;
 8001400:	4b63      	ldr	r3, [pc, #396]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001402:	2202      	movs	r2, #2
 8001404:	855a      	strh	r2, [r3, #42]	; 0x2a
	pwmOutStruct[2].pwmFrequency = PWM_FREQ_10000HZ;
 8001406:	4b63      	ldr	r3, [pc, #396]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 8001408:	2208      	movs	r2, #8
 800140a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pwmOutStruct[2].outputType = OutType_Preset;
 800140e:	4b61      	ldr	r3, [pc, #388]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	pwmOutStruct[2].presetEnable[0] = 0x001E;
 8001416:	4b5f      	ldr	r3, [pc, #380]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 8001418:	221e      	movs	r2, #30
 800141a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	pwmOutStruct[2].presetInputs[0] = 0x0002;
 800141e:	4b5d      	ldr	r3, [pc, #372]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 8001420:	2202      	movs	r2, #2
 8001422:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	pwmOutStruct[2].presetDutyCycle[0] = 1000;
 8001426:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <PDM_Hard_Code_Config+0x210>)
 8001428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800142c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
//	pwmOutStruct[3].pwmFrequency = PWM_FREQ_10000HZ;
//	pwmOutStruct[3].outputType = OutType_Preset;
//	pwmOutStruct[3].presetEnable[0] = 0x001E;
//	pwmOutStruct[3].presetInputs[0] = 0x0002;
//	pwmOutStruct[3].presetDutyCycle[0] = 1000;
	outputStruct[3].outEnable[0] = Output_Enabled;
 8001430:	4b57      	ldr	r3, [pc, #348]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	outputStruct[3].inputEnable[0] = 0x0010;
 8001438:	4b55      	ldr	r3, [pc, #340]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800143a:	2210      	movs	r2, #16
 800143c:	871a      	strh	r2, [r3, #56]	; 0x38
	outputStruct[3].inputLevels[0] = 0x0000;
 800143e:	4b54      	ldr	r3, [pc, #336]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001440:	2200      	movs	r2, #0
 8001442:	879a      	strh	r2, [r3, #60]	; 0x3c

	//Output 5 - FT -> desabilitada
//	outputStruct[4].outEnable[0] = Output_Enabled;
	outputStruct[4].outEnable[0] = Output_Disabled;
 8001444:	4b52      	ldr	r3, [pc, #328]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	outputStruct[4].inputEnable[0] = 0x0010;
 800144c:	4b50      	ldr	r3, [pc, #320]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800144e:	2210      	movs	r2, #16
 8001450:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	outputStruct[4].inputLevels[0] = 0x0000;
 8001454:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001456:	2200      	movs	r2, #0
 8001458:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	//Output 6 - Velocidade de Roda FL e FR
//	outputStruct[5].outEnable[0] = Output_Enabled;
	outputStruct[5].outEnable[0] = Output_Disabled;
 800145c:	4b4c      	ldr	r3, [pc, #304]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800145e:	2200      	movs	r2, #0
 8001460:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	outputStruct[5].inputEnable[0] = 0x0018;
 8001464:	4b4a      	ldr	r3, [pc, #296]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001466:	2218      	movs	r2, #24
 8001468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	outputStruct[5].inputLevels[0] = 0x0000;
 800146c:	4b48      	ldr	r3, [pc, #288]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800146e:	2200      	movs	r2, #0
 8001470:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	//Output 7 - Velocidade de Roda RL e RR
	outputStruct[6].outEnable[0] = Output_Enabled;
 8001474:	4b46      	ldr	r3, [pc, #280]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001476:	2201      	movs	r2, #1
 8001478:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	outputStruct[6].inputEnable[0] = 0x0018;
 800147c:	4b44      	ldr	r3, [pc, #272]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800147e:	2218      	movs	r2, #24
 8001480:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	outputStruct[6].inputLevels[0] = 0x0000;
 8001484:	4b42      	ldr	r3, [pc, #264]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001486:	2200      	movs	r2, #0
 8001488:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

	//Output 8 - Buck DRS
	outputStruct[7].outEnable[0] = Output_Enabled;
 800148c:	4b40      	ldr	r3, [pc, #256]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800148e:	2201      	movs	r2, #1
 8001490:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	outputStruct[7].inputEnable[0] = 0x0008;
 8001494:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001496:	2208      	movs	r2, #8
 8001498:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	outputStruct[7].inputLevels[0] = 0x0000;
 800149c:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84

	//Output 9 - ETM e CMP
	outputStruct[8].outEnable[0] = Output_Enabled;
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	outputStruct[8].inputEnable[0] = 0x0010;
 80014ac:	4b38      	ldr	r3, [pc, #224]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80014ae:	2210      	movs	r2, #16
 80014b0:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	outputStruct[8].inputLevels[0] = 0x0000;
 80014b4:	4b36      	ldr	r3, [pc, #216]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96

	//Output 10 - P. de Óleo e P. do Shifter
	outputStruct[9].outEnable[0] = Output_Enabled;
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	outputStruct[9].inputEnable[0] = 0x0010;
 80014c4:	4b32      	ldr	r3, [pc, #200]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80014c6:	2210      	movs	r2, #16
 80014c8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	outputStruct[9].inputLevels[0] = 0x0000;
 80014cc:	4b30      	ldr	r3, [pc, #192]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	//Output 11 - Solenoides e P. de Combustível
	outputStruct[10].outEnable[0] = Output_Enabled;
 80014d4:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	outputStruct[10].inputEnable[0] = 0x0010;
 80014dc:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80014de:	2210      	movs	r2, #16
 80014e0:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	outputStruct[10].inputLevels[0] = 0x0000;
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

	//Output 12 - Relay de Partida
	outputStruct[11].outEnable[0] = Output_Enabled;
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	outputStruct[11].inputEnable[0] = 0;//0x001A;
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	outputStruct[11].inputLevels[0] = 0;//0x0008;
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc

	//Output 13 - Buck DAq e Brake Light
	outputStruct[12].outEnable[0] = Output_Enabled;
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001506:	2201      	movs	r2, #1
 8001508:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	outputStruct[12].inputEnable[0] = 0x0008;
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800150e:	2208      	movs	r2, #8
 8001510:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	outputStruct[12].inputLevels[0] = 0x0000;
 8001514:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001516:	2200      	movs	r2, #0
 8001518:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde

	//Output 14 - Bobina
	outputStruct[13].outEnable[0] = Output_Enabled;
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800151e:	2201      	movs	r2, #1
 8001520:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	outputStruct[13].inputEnable[0] = 0x0010;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001526:	2210      	movs	r2, #16
 8001528:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	outputStruct[13].inputLevels[0] = 0x0000;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800152e:	2200      	movs	r2, #0
 8001530:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0

	//Output 15 - Bico Injetor
	outputStruct[14].outEnable[0] = Output_Enabled;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001536:	2201      	movs	r2, #1
 8001538:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	outputStruct[14].inputEnable[0] = 0x0010;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800153e:	2210      	movs	r2, #16
 8001540:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
	outputStruct[14].inputLevels[0] = 0x0000;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001546:	2200      	movs	r2, #0
 8001548:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

	//Output 16 - WBO2
	outputStruct[15].outEnable[0] = Output_Enabled;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800154e:	2201      	movs	r2, #1
 8001550:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
	outputStruct[15].inputEnable[0] = 0x0010;
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 8001556:	2210      	movs	r2, #16
 8001558:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
	outputStruct[15].inputLevels[0] = 0x0000;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <PDM_Hard_Code_Config+0x20c>)
 800155e:	2200      	movs	r2, #0
 8001560:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114

	canConfig.baudRate = CAN_1000kbps;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <PDM_Hard_Code_Config+0x214>)
 8001566:	2204      	movs	r2, #4
 8001568:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 0; i < 16; i++)
 800156a:	2300      	movs	r3, #0
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	e006      	b.n	800157e <PDM_Hard_Code_Config+0x1fa>
		dataFreqBuffer[i] = Data_Freq_50Hz;
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <PDM_Hard_Code_Config+0x218>)
 8001574:	2107      	movs	r1, #7
 8001576:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 16; i++)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	3301      	adds	r3, #1
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b0f      	cmp	r3, #15
 8001582:	d9f5      	bls.n	8001570 <PDM_Hard_Code_Config+0x1ec>

	return;
 8001584:	bf00      	nop
}
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	200007bc 	.word	0x200007bc
 8001594:	200008dc 	.word	0x200008dc
 8001598:	2000068c 	.word	0x2000068c
 800159c:	20000708 	.word	0x20000708

080015a0 <Output_Reset_State>:

static void Output_Reset_State()
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAULTRST_GPIO_Port, FAULTRST_Pin, GPIO_PIN_SET);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2110      	movs	r1, #16
 80015aa:	4840      	ldr	r0, [pc, #256]	; (80016ac <Output_Reset_State+0x10c>)
 80015ac:	f003 fc84 	bl	8004eb8 <HAL_GPIO_WritePin>

	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	71fb      	strb	r3, [r7, #7]
 80015b4:	e00e      	b.n	80015d4 <Output_Reset_State+0x34>
		memset(&outputStruct[i], '\0', sizeof(Output_Control_Struct));
 80015b6:	79fa      	ldrb	r2, [r7, #7]
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4413      	add	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4a3b      	ldr	r2, [pc, #236]	; (80016b0 <Output_Reset_State+0x110>)
 80015c2:	4413      	add	r3, r2
 80015c4:	2212      	movs	r2, #18
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f00f f9b5 	bl	8010938 <memset>
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	3301      	adds	r3, #1
 80015d2:	71fb      	strb	r3, [r7, #7]
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b0f      	cmp	r3, #15
 80015d8:	d9ed      	bls.n	80015b6 <Output_Reset_State+0x16>

	//Starts PWM timers
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80015da:	210c      	movs	r1, #12
 80015dc:	4835      	ldr	r0, [pc, #212]	; (80016b4 <Output_Reset_State+0x114>)
 80015de:	f006 fb65 	bl	8007cac <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80015e2:	2104      	movs	r1, #4
 80015e4:	4834      	ldr	r0, [pc, #208]	; (80016b8 <Output_Reset_State+0x118>)
 80015e6:	f007 fd0f 	bl	8009008 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80015ea:	2108      	movs	r1, #8
 80015ec:	4833      	ldr	r0, [pc, #204]	; (80016bc <Output_Reset_State+0x11c>)
 80015ee:	f006 fb5d 	bl	8007cac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80015f2:	210c      	movs	r1, #12
 80015f4:	4832      	ldr	r0, [pc, #200]	; (80016c0 <Output_Reset_State+0x120>)
 80015f6:	f006 fb59 	bl	8007cac <HAL_TIM_PWM_Start>

	//Zeroes all the PWM outputs duty cycles
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80015fa:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <Output_Reset_State+0x114>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001602:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <Output_Reset_State+0x118>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <Output_Reset_State+0x11c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2200      	movs	r2, #0
 8001610:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001612:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <Output_Reset_State+0x120>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2200      	movs	r2, #0
 8001618:	641a      	str	r2, [r3, #64]	; 0x40

	//Sets all normal outputs to zero
	HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001620:	4828      	ldr	r0, [pc, #160]	; (80016c4 <Output_Reset_State+0x124>)
 8001622:	f003 fc49 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	4825      	ldr	r0, [pc, #148]	; (80016c4 <Output_Reset_State+0x124>)
 800162e:	f003 fc43 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001638:	4822      	ldr	r0, [pc, #136]	; (80016c4 <Output_Reset_State+0x124>)
 800163a:	f003 fc3d 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001644:	481f      	ldr	r0, [pc, #124]	; (80016c4 <Output_Reset_State+0x124>)
 8001646:	f003 fc37 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001650:	481c      	ldr	r0, [pc, #112]	; (80016c4 <Output_Reset_State+0x124>)
 8001652:	f003 fc31 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800165c:	4819      	ldr	r0, [pc, #100]	; (80016c4 <Output_Reset_State+0x124>)
 800165e:	f003 fc2b 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001668:	4816      	ldr	r0, [pc, #88]	; (80016c4 <Output_Reset_State+0x124>)
 800166a:	f003 fc25 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001674:	4813      	ldr	r0, [pc, #76]	; (80016c4 <Output_Reset_State+0x124>)
 8001676:	f003 fc1f 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2108      	movs	r1, #8
 800167e:	4812      	ldr	r0, [pc, #72]	; (80016c8 <Output_Reset_State+0x128>)
 8001680:	f003 fc1a 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2104      	movs	r1, #4
 8001688:	480f      	ldr	r0, [pc, #60]	; (80016c8 <Output_Reset_State+0x128>)
 800168a:	f003 fc15 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2120      	movs	r1, #32
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <Output_Reset_State+0x128>)
 8001694:	f003 fc10 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2110      	movs	r1, #16
 800169c:	480a      	ldr	r0, [pc, #40]	; (80016c8 <Output_Reset_State+0x128>)
 800169e:	f003 fc0b 	bl	8004eb8 <HAL_GPIO_WritePin>

	return;
 80016a2:	bf00      	nop
}
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	200007bc 	.word	0x200007bc
 80016b4:	200003e4 	.word	0x200003e4
 80016b8:	200004bc 	.word	0x200004bc
 80016bc:	2000039c 	.word	0x2000039c
 80016c0:	20000354 	.word	0x20000354
 80016c4:	40020c00 	.word	0x40020c00
 80016c8:	40021800 	.word	0x40021800

080016cc <PDM_Input_Process>:

#include <pdm.h>

//Process input pin levels
void PDM_Input_Process()
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	inputLevels = 0x0000;
 80016d0:	4b7a      	ldr	r3, [pc, #488]	; (80018bc <PDM_Input_Process+0x1f0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	801a      	strh	r2, [r3, #0]

	inputLevels  =  HAL_GPIO_ReadPin(INPUT1_GPIO_Port, INPUT1_Pin);
 80016d6:	2101      	movs	r1, #1
 80016d8:	4879      	ldr	r0, [pc, #484]	; (80018c0 <PDM_Input_Process+0x1f4>)
 80016da:	f003 fbd5 	bl	8004e88 <HAL_GPIO_ReadPin>
 80016de:	4603      	mov	r3, r0
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b76      	ldr	r3, [pc, #472]	; (80018bc <PDM_Input_Process+0x1f0>)
 80016e4:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT2_GPIO_Port, INPUT2_Pin) << 1);
 80016e6:	2102      	movs	r1, #2
 80016e8:	4875      	ldr	r0, [pc, #468]	; (80018c0 <PDM_Input_Process+0x1f4>)
 80016ea:	f003 fbcd 	bl	8004e88 <HAL_GPIO_ReadPin>
 80016ee:	4603      	mov	r3, r0
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	4b71      	ldr	r3, [pc, #452]	; (80018bc <PDM_Input_Process+0x1f0>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b6e      	ldr	r3, [pc, #440]	; (80018bc <PDM_Input_Process+0x1f0>)
 8001702:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT3_GPIO_Port, INPUT3_Pin) << 2);
 8001704:	2104      	movs	r1, #4
 8001706:	486e      	ldr	r0, [pc, #440]	; (80018c0 <PDM_Input_Process+0x1f4>)
 8001708:	f003 fbbe 	bl	8004e88 <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	b21a      	sxth	r2, r3
 8001712:	4b6a      	ldr	r3, [pc, #424]	; (80018bc <PDM_Input_Process+0x1f0>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	b21b      	sxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b21b      	sxth	r3, r3
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b67      	ldr	r3, [pc, #412]	; (80018bc <PDM_Input_Process+0x1f0>)
 8001720:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT4_GPIO_Port, INPUT4_Pin) << 3);
 8001722:	2108      	movs	r1, #8
 8001724:	4866      	ldr	r0, [pc, #408]	; (80018c0 <PDM_Input_Process+0x1f4>)
 8001726:	f003 fbaf 	bl	8004e88 <HAL_GPIO_ReadPin>
 800172a:	4603      	mov	r3, r0
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	b21a      	sxth	r2, r3
 8001730:	4b62      	ldr	r3, [pc, #392]	; (80018bc <PDM_Input_Process+0x1f0>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	b21b      	sxth	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	b21b      	sxth	r3, r3
 800173a:	b29a      	uxth	r2, r3
 800173c:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <PDM_Input_Process+0x1f0>)
 800173e:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT5_GPIO_Port, INPUT5_Pin) << 4);
 8001740:	2110      	movs	r1, #16
 8001742:	4860      	ldr	r0, [pc, #384]	; (80018c4 <PDM_Input_Process+0x1f8>)
 8001744:	f003 fba0 	bl	8004e88 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b5b      	ldr	r3, [pc, #364]	; (80018bc <PDM_Input_Process+0x1f0>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b21b      	sxth	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	b21b      	sxth	r3, r3
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b58      	ldr	r3, [pc, #352]	; (80018bc <PDM_Input_Process+0x1f0>)
 800175c:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT6_GPIO_Port, INPUT6_Pin) << 5);
 800175e:	2120      	movs	r1, #32
 8001760:	4858      	ldr	r0, [pc, #352]	; (80018c4 <PDM_Input_Process+0x1f8>)
 8001762:	f003 fb91 	bl	8004e88 <HAL_GPIO_ReadPin>
 8001766:	4603      	mov	r3, r0
 8001768:	015b      	lsls	r3, r3, #5
 800176a:	b21a      	sxth	r2, r3
 800176c:	4b53      	ldr	r3, [pc, #332]	; (80018bc <PDM_Input_Process+0x1f0>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	b21b      	sxth	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	b21b      	sxth	r3, r3
 8001776:	b29a      	uxth	r2, r3
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <PDM_Input_Process+0x1f0>)
 800177a:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT7_GPIO_Port, INPUT7_Pin) << 6);
 800177c:	2140      	movs	r1, #64	; 0x40
 800177e:	4852      	ldr	r0, [pc, #328]	; (80018c8 <PDM_Input_Process+0x1fc>)
 8001780:	f003 fb82 	bl	8004e88 <HAL_GPIO_ReadPin>
 8001784:	4603      	mov	r3, r0
 8001786:	019b      	lsls	r3, r3, #6
 8001788:	b21a      	sxth	r2, r3
 800178a:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <PDM_Input_Process+0x1f0>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b21b      	sxth	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b21b      	sxth	r3, r3
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b49      	ldr	r3, [pc, #292]	; (80018bc <PDM_Input_Process+0x1f0>)
 8001798:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT8_GPIO_Port, INPUT8_Pin) << 7);
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	484a      	ldr	r0, [pc, #296]	; (80018c8 <PDM_Input_Process+0x1fc>)
 800179e:	f003 fb73 	bl	8004e88 <HAL_GPIO_ReadPin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	01db      	lsls	r3, r3, #7
 80017a6:	b21a      	sxth	r2, r3
 80017a8:	4b44      	ldr	r3, [pc, #272]	; (80018bc <PDM_Input_Process+0x1f0>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4b41      	ldr	r3, [pc, #260]	; (80018bc <PDM_Input_Process+0x1f0>)
 80017b6:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT9_GPIO_Port, INPUT9_Pin) << 8);
 80017b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017bc:	4842      	ldr	r0, [pc, #264]	; (80018c8 <PDM_Input_Process+0x1fc>)
 80017be:	f003 fb63 	bl	8004e88 <HAL_GPIO_ReadPin>
 80017c2:	4603      	mov	r3, r0
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <PDM_Input_Process+0x1f0>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b39      	ldr	r3, [pc, #228]	; (80018bc <PDM_Input_Process+0x1f0>)
 80017d6:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT10_GPIO_Port, INPUT10_Pin) << 9);
 80017d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017dc:	483a      	ldr	r0, [pc, #232]	; (80018c8 <PDM_Input_Process+0x1fc>)
 80017de:	f003 fb53 	bl	8004e88 <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	025b      	lsls	r3, r3, #9
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	4b34      	ldr	r3, [pc, #208]	; (80018bc <PDM_Input_Process+0x1f0>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4b31      	ldr	r3, [pc, #196]	; (80018bc <PDM_Input_Process+0x1f0>)
 80017f6:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT11_GPIO_Port, INPUT11_Pin) << 10);
 80017f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017fc:	4832      	ldr	r0, [pc, #200]	; (80018c8 <PDM_Input_Process+0x1fc>)
 80017fe:	f003 fb43 	bl	8004e88 <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	029b      	lsls	r3, r3, #10
 8001806:	b21a      	sxth	r2, r3
 8001808:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <PDM_Input_Process+0x1f0>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	b21b      	sxth	r3, r3
 800180e:	4313      	orrs	r3, r2
 8001810:	b21b      	sxth	r3, r3
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <PDM_Input_Process+0x1f0>)
 8001816:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT12_GPIO_Port, INPUT12_Pin) << 11);
 8001818:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800181c:	482a      	ldr	r0, [pc, #168]	; (80018c8 <PDM_Input_Process+0x1fc>)
 800181e:	f003 fb33 	bl	8004e88 <HAL_GPIO_ReadPin>
 8001822:	4603      	mov	r3, r0
 8001824:	02db      	lsls	r3, r3, #11
 8001826:	b21a      	sxth	r2, r3
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <PDM_Input_Process+0x1f0>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b21b      	sxth	r3, r3
 800182e:	4313      	orrs	r3, r2
 8001830:	b21b      	sxth	r3, r3
 8001832:	b29a      	uxth	r2, r3
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <PDM_Input_Process+0x1f0>)
 8001836:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT13_GPIO_Port, INPUT13_Pin) << 12);
 8001838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183c:	4821      	ldr	r0, [pc, #132]	; (80018c4 <PDM_Input_Process+0x1f8>)
 800183e:	f003 fb23 	bl	8004e88 <HAL_GPIO_ReadPin>
 8001842:	4603      	mov	r3, r0
 8001844:	031b      	lsls	r3, r3, #12
 8001846:	b21a      	sxth	r2, r3
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <PDM_Input_Process+0x1f0>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b21b      	sxth	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	b21b      	sxth	r3, r3
 8001852:	b29a      	uxth	r2, r3
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <PDM_Input_Process+0x1f0>)
 8001856:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT14_GPIO_Port, INPUT14_Pin) << 13);
 8001858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185c:	4819      	ldr	r0, [pc, #100]	; (80018c4 <PDM_Input_Process+0x1f8>)
 800185e:	f003 fb13 	bl	8004e88 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	035b      	lsls	r3, r3, #13
 8001866:	b21a      	sxth	r2, r3
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <PDM_Input_Process+0x1f0>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b21b      	sxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	b21b      	sxth	r3, r3
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <PDM_Input_Process+0x1f0>)
 8001876:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT15_GPIO_Port, INPUT15_Pin) << 14);
 8001878:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800187c:	4811      	ldr	r0, [pc, #68]	; (80018c4 <PDM_Input_Process+0x1f8>)
 800187e:	f003 fb03 	bl	8004e88 <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	039b      	lsls	r3, r3, #14
 8001886:	b21a      	sxth	r2, r3
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <PDM_Input_Process+0x1f0>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	b21b      	sxth	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	b21b      	sxth	r3, r3
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <PDM_Input_Process+0x1f0>)
 8001896:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT16_GPIO_Port, INPUT16_Pin) << 15);
 8001898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189c:	4809      	ldr	r0, [pc, #36]	; (80018c4 <PDM_Input_Process+0x1f8>)
 800189e:	f003 faf3 	bl	8004e88 <HAL_GPIO_ReadPin>
 80018a2:	4603      	mov	r3, r0
 80018a4:	03db      	lsls	r3, r3, #15
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <PDM_Input_Process+0x1f0>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	4b01      	ldr	r3, [pc, #4]	; (80018bc <PDM_Input_Process+0x1f0>)
 80018b6:	801a      	strh	r2, [r3, #0]

	return;
 80018b8:	bf00      	nop
}
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200007b8 	.word	0x200007b8
 80018c0:	40021400 	.word	0x40021400
 80018c4:	40020400 	.word	0x40020400
 80018c8:	40020800 	.word	0x40020800

080018cc <PDM_Output_Process>:

//Process output pin levels
void PDM_Output_Process()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
	GPIO_PinState output_levels[NBR_OF_OUTPUTS];

	//Process input conditions and safety flags for each output
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	75fb      	strb	r3, [r7, #23]
 80018d6:	e063      	b.n	80019a0 <PDM_Output_Process+0xd4>
	{
		if((((flagDriverSafety >> i) & 0x01) == 0)
 80018d8:	4b69      	ldr	r3, [pc, #420]	; (8001a80 <PDM_Output_Process+0x1b4>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	7dfb      	ldrb	r3, [r7, #23]
 80018e0:	fa42 f303 	asr.w	r3, r2, r3
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d150      	bne.n	800198e <PDM_Output_Process+0xc2>
				&& (__PDM_INPUT_CONDITION_COMPARE(outputStruct[i].inputEnable[0], outputStruct[i].inputLevels[0], outputStruct[i].outEnable[0])
 80018ec:	7dfa      	ldrb	r2, [r7, #23]
 80018ee:	4965      	ldr	r1, [pc, #404]	; (8001a84 <PDM_Output_Process+0x1b8>)
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4413      	add	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	440b      	add	r3, r1
 80018fa:	3306      	adds	r3, #6
 80018fc:	881a      	ldrh	r2, [r3, #0]
 80018fe:	4b62      	ldr	r3, [pc, #392]	; (8001a88 <PDM_Output_Process+0x1bc>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	4053      	eors	r3, r2
 8001904:	b299      	uxth	r1, r3
 8001906:	7dfa      	ldrb	r2, [r7, #23]
 8001908:	485e      	ldr	r0, [pc, #376]	; (8001a84 <PDM_Output_Process+0x1b8>)
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4403      	add	r3, r0
 8001914:	3302      	adds	r3, #2
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	400b      	ands	r3, r1
 800191a:	b29b      	uxth	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10a      	bne.n	8001936 <PDM_Output_Process+0x6a>
 8001920:	7dfa      	ldrb	r2, [r7, #23]
 8001922:	4958      	ldr	r1, [pc, #352]	; (8001a84 <PDM_Output_Process+0x1b8>)
 8001924:	4613      	mov	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4413      	add	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	440b      	add	r3, r1
 800192e:	3310      	adds	r3, #16
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d024      	beq.n	8001980 <PDM_Output_Process+0xb4>
				||  __PDM_INPUT_CONDITION_COMPARE(outputStruct[i].inputEnable[1], outputStruct[i].inputLevels[1], outputStruct[i].outEnable[1])))
 8001936:	7dfa      	ldrb	r2, [r7, #23]
 8001938:	4952      	ldr	r1, [pc, #328]	; (8001a84 <PDM_Output_Process+0x1b8>)
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	440b      	add	r3, r1
 8001944:	3308      	adds	r3, #8
 8001946:	881a      	ldrh	r2, [r3, #0]
 8001948:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <PDM_Output_Process+0x1bc>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	4053      	eors	r3, r2
 800194e:	b299      	uxth	r1, r3
 8001950:	7dfa      	ldrb	r2, [r7, #23]
 8001952:	484c      	ldr	r0, [pc, #304]	; (8001a84 <PDM_Output_Process+0x1b8>)
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4413      	add	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4403      	add	r3, r0
 800195e:	3304      	adds	r3, #4
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	400b      	ands	r3, r1
 8001964:	b29b      	uxth	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d111      	bne.n	800198e <PDM_Output_Process+0xc2>
 800196a:	7dfa      	ldrb	r2, [r7, #23]
 800196c:	4945      	ldr	r1, [pc, #276]	; (8001a84 <PDM_Output_Process+0x1b8>)
 800196e:	4613      	mov	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	440b      	add	r3, r1
 8001978:	3311      	adds	r3, #17
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d106      	bne.n	800198e <PDM_Output_Process+0xc2>
			output_levels[i] = GPIO_PIN_SET;
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	3318      	adds	r3, #24
 8001984:	443b      	add	r3, r7
 8001986:	2201      	movs	r2, #1
 8001988:	f803 2c14 	strb.w	r2, [r3, #-20]
 800198c:	e005      	b.n	800199a <PDM_Output_Process+0xce>
		else
			output_levels[i] = GPIO_PIN_RESET;
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	3318      	adds	r3, #24
 8001992:	443b      	add	r3, r7
 8001994:	2200      	movs	r2, #0
 8001996:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	3301      	adds	r3, #1
 800199e:	75fb      	strb	r3, [r7, #23]
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	d998      	bls.n	80018d8 <PDM_Output_Process+0xc>
	}

	HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, output_levels[4]);
 80019a6:	7a3b      	ldrb	r3, [r7, #8]
 80019a8:	461a      	mov	r2, r3
 80019aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ae:	4837      	ldr	r0, [pc, #220]	; (8001a8c <PDM_Output_Process+0x1c0>)
 80019b0:	f003 fa82 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, output_levels[5]);
 80019b4:	7a7b      	ldrb	r3, [r7, #9]
 80019b6:	461a      	mov	r2, r3
 80019b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019bc:	4833      	ldr	r0, [pc, #204]	; (8001a8c <PDM_Output_Process+0x1c0>)
 80019be:	f003 fa7b 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, output_levels[6]);
 80019c2:	7abb      	ldrb	r3, [r7, #10]
 80019c4:	461a      	mov	r2, r3
 80019c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ca:	4830      	ldr	r0, [pc, #192]	; (8001a8c <PDM_Output_Process+0x1c0>)
 80019cc:	f003 fa74 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, output_levels[7]);
 80019d0:	7afb      	ldrb	r3, [r7, #11]
 80019d2:	461a      	mov	r2, r3
 80019d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d8:	482c      	ldr	r0, [pc, #176]	; (8001a8c <PDM_Output_Process+0x1c0>)
 80019da:	f003 fa6d 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, output_levels[8]);
 80019de:	7b3b      	ldrb	r3, [r7, #12]
 80019e0:	461a      	mov	r2, r3
 80019e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e6:	4829      	ldr	r0, [pc, #164]	; (8001a8c <PDM_Output_Process+0x1c0>)
 80019e8:	f003 fa66 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, output_levels[9]);
 80019ec:	7b7b      	ldrb	r3, [r7, #13]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f4:	4825      	ldr	r0, [pc, #148]	; (8001a8c <PDM_Output_Process+0x1c0>)
 80019f6:	f003 fa5f 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, output_levels[10]);
 80019fa:	7bbb      	ldrb	r3, [r7, #14]
 80019fc:	461a      	mov	r2, r3
 80019fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a02:	4822      	ldr	r0, [pc, #136]	; (8001a8c <PDM_Output_Process+0x1c0>)
 8001a04:	f003 fa58 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, output_levels[11]);
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a10:	481e      	ldr	r0, [pc, #120]	; (8001a8c <PDM_Output_Process+0x1c0>)
 8001a12:	f003 fa51 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, output_levels[12]);
 8001a16:	7c3b      	ldrb	r3, [r7, #16]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2108      	movs	r1, #8
 8001a1c:	481c      	ldr	r0, [pc, #112]	; (8001a90 <PDM_Output_Process+0x1c4>)
 8001a1e:	f003 fa4b 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, output_levels[13]);
 8001a22:	7c7b      	ldrb	r3, [r7, #17]
 8001a24:	461a      	mov	r2, r3
 8001a26:	2104      	movs	r1, #4
 8001a28:	4819      	ldr	r0, [pc, #100]	; (8001a90 <PDM_Output_Process+0x1c4>)
 8001a2a:	f003 fa45 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, output_levels[14]);
 8001a2e:	7cbb      	ldrb	r3, [r7, #18]
 8001a30:	461a      	mov	r2, r3
 8001a32:	2120      	movs	r1, #32
 8001a34:	4816      	ldr	r0, [pc, #88]	; (8001a90 <PDM_Output_Process+0x1c4>)
 8001a36:	f003 fa3f 	bl	8004eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, output_levels[15]);
 8001a3a:	7cfb      	ldrb	r3, [r7, #19]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2110      	movs	r1, #16
 8001a40:	4813      	ldr	r0, [pc, #76]	; (8001a90 <PDM_Output_Process+0x1c4>)
 8001a42:	f003 fa39 	bl	8004eb8 <HAL_GPIO_WritePin>
	PDM_PWM_Output_Process(&pwmOutStruct[0], 0, output_levels[0]);
 8001a46:	793b      	ldrb	r3, [r7, #4]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4811      	ldr	r0, [pc, #68]	; (8001a94 <PDM_Output_Process+0x1c8>)
 8001a4e:	f000 f8cf 	bl	8001bf0 <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[1], 1, output_levels[1]);
 8001a52:	797b      	ldrb	r3, [r7, #5]
 8001a54:	461a      	mov	r2, r3
 8001a56:	2101      	movs	r1, #1
 8001a58:	480f      	ldr	r0, [pc, #60]	; (8001a98 <PDM_Output_Process+0x1cc>)
 8001a5a:	f000 f8c9 	bl	8001bf0 <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[2], 2, output_levels[2]);
 8001a5e:	79bb      	ldrb	r3, [r7, #6]
 8001a60:	461a      	mov	r2, r3
 8001a62:	2102      	movs	r1, #2
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <PDM_Output_Process+0x1d0>)
 8001a66:	f000 f8c3 	bl	8001bf0 <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[3], 3, output_levels[3]);
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2103      	movs	r1, #3
 8001a70:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <PDM_Output_Process+0x1d4>)
 8001a72:	f000 f8bd 	bl	8001bf0 <PDM_PWM_Output_Process>

	return;
 8001a76:	bf00      	nop
}
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200007b4 	.word	0x200007b4
 8001a84:	200007bc 	.word	0x200007bc
 8001a88:	200007b8 	.word	0x200007b8
 8001a8c:	40020c00 	.word	0x40020c00
 8001a90:	40021800 	.word	0x40021800
 8001a94:	200008dc 	.word	0x200008dc
 8001a98:	200008fc 	.word	0x200008fc
 8001a9c:	2000091c 	.word	0x2000091c
 8001aa0:	2000093c 	.word	0x2000093c

08001aa4 <PDM_PWM_Init>:
static HAL_StatusTypeDef PWM_SoftStart(PWM_Control_Struct *pwm_struct);
static uint16_t PWM_Map_Duty_Cycle_Set(PDM_PWM_Map_Struct* pwm_map_struct);

//Initializes PWM output and sets its CAN bus filter
void PDM_PWM_Init(CAN_HandleTypeDef *hcan, PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef* htim;
	uint16_t timChannel = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	827b      	strh	r3, [r7, #18]
	uint16_t prescaler = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	823b      	strh	r3, [r7, #16]

	//Sets the verify bit of the PWM output to sign if PWM is enabled
	dataIdBuffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] |= (pwmPinStatus >> pwm_out_number) & 0x01;
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	331a      	adds	r3, #26
 8001abe:	4a44      	ldr	r2, [pc, #272]	; (8001bd0 <PDM_PWM_Init+0x12c>)
 8001ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <PDM_PWM_Init+0x130>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	4619      	mov	r1, r3
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	fa41 f303 	asr.w	r3, r1, r3
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	4313      	orrs	r3, r2
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	331a      	adds	r3, #26
 8001ae2:	b291      	uxth	r1, r2
 8001ae4:	4a3a      	ldr	r2, [pc, #232]	; (8001bd0 <PDM_PWM_Init+0x12c>)
 8001ae6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d869      	bhi.n	8001bc4 <PDM_PWM_Init+0x120>
 8001af0:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <PDM_PWM_Init+0x54>)
 8001af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af6:	bf00      	nop
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001b13 	.word	0x08001b13
 8001b00:	08001b1d 	.word	0x08001b1d
 8001b04:	08001b27 	.word	0x08001b27
 8001b08:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <PDM_PWM_Init+0x134>)
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	230c      	movs	r3, #12
 8001b0e:	827b      	strh	r3, [r7, #18]
 8001b10:	e00d      	b.n	8001b2e <PDM_PWM_Init+0x8a>
 8001b12:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <PDM_PWM_Init+0x138>)
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	2304      	movs	r3, #4
 8001b18:	827b      	strh	r3, [r7, #18]
 8001b1a:	e008      	b.n	8001b2e <PDM_PWM_Init+0x8a>
 8001b1c:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <PDM_PWM_Init+0x13c>)
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	2308      	movs	r3, #8
 8001b22:	827b      	strh	r3, [r7, #18]
 8001b24:	e003      	b.n	8001b2e <PDM_PWM_Init+0x8a>
 8001b26:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <PDM_PWM_Init+0x140>)
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	230c      	movs	r3, #12
 8001b2c:	827b      	strh	r3, [r7, #18]
 8001b2e:	bf00      	nop

	if(pwm_struct->pwmFrequency == 0)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	885b      	ldrh	r3, [r3, #2]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d103      	bne.n	8001b40 <PDM_PWM_Init+0x9c>
		pwm_struct->pwmFrequency = PWM_FREQ_100HZ;
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f240 3283 	movw	r2, #899	; 0x383
 8001b3e:	805a      	strh	r2, [r3, #2]

	//Sets the PWM frequency
	if((htim->Instance == TIM1) || (htim->Instance == TIM8))
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a28      	ldr	r2, [pc, #160]	; (8001be8 <PDM_PWM_Init+0x144>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d004      	beq.n	8001b54 <PDM_PWM_Init+0xb0>
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a27      	ldr	r2, [pc, #156]	; (8001bec <PDM_PWM_Init+0x148>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d106      	bne.n	8001b62 <PDM_PWM_Init+0xbe>
		prescaler = (pwm_struct->pwmFrequency * 2) + 1;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	885b      	ldrh	r3, [r3, #2]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	823b      	strh	r3, [r7, #16]
 8001b60:	e002      	b.n	8001b68 <PDM_PWM_Init+0xc4>
	else
		prescaler = pwm_struct->pwmFrequency;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	885b      	ldrh	r3, [r3, #2]
 8001b66:	823b      	strh	r3, [r7, #16]

	__HAL_TIM_SET_PRESCALER(htim, prescaler);
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	8a3a      	ldrh	r2, [r7, #16]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28

	//Zero the duty cycle
	pwm_struct->dutyCycle = 0;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2200      	movs	r2, #0
 8001b74:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(htim, timChannel, 0);
 8001b76:	8a7b      	ldrh	r3, [r7, #18]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d104      	bne.n	8001b86 <PDM_PWM_Init+0xe2>
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2200      	movs	r2, #0
 8001b82:	635a      	str	r2, [r3, #52]	; 0x34
 8001b84:	e013      	b.n	8001bae <PDM_PWM_Init+0x10a>
 8001b86:	8a7b      	ldrh	r3, [r7, #18]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d104      	bne.n	8001b96 <PDM_PWM_Init+0xf2>
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2300      	movs	r3, #0
 8001b92:	6393      	str	r3, [r2, #56]	; 0x38
 8001b94:	e00b      	b.n	8001bae <PDM_PWM_Init+0x10a>
 8001b96:	8a7b      	ldrh	r3, [r7, #18]
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d104      	bne.n	8001ba6 <PDM_PWM_Init+0x102>
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001ba4:	e003      	b.n	8001bae <PDM_PWM_Init+0x10a>
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	2300      	movs	r3, #0
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40

	//Deallocates all pointers
	PWM_DeAlloc(pwm_struct);
 8001bae:	68b8      	ldr	r0, [r7, #8]
 8001bb0:	f000 f93e 	bl	8001e30 <PWM_DeAlloc>

	//Deallocates all pointers if there is any allocation problem
	if(pwm_struct->outputType == OutType_Error)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	791b      	ldrb	r3, [r3, #4]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d105      	bne.n	8001bc8 <PDM_PWM_Init+0x124>
		PWM_DeAlloc(pwm_struct);
 8001bbc:	68b8      	ldr	r0, [r7, #8]
 8001bbe:	f000 f937 	bl	8001e30 <PWM_DeAlloc>

	return;
 8001bc2:	e001      	b.n	8001bc8 <PDM_PWM_Init+0x124>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8001bc4:	bf00      	nop
 8001bc6:	e000      	b.n	8001bca <PDM_PWM_Init+0x126>
	return;
 8001bc8:	bf00      	nop
}
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000764 	.word	0x20000764
 8001bd4:	200007b6 	.word	0x200007b6
 8001bd8:	200003e4 	.word	0x200003e4
 8001bdc:	200004bc 	.word	0x200004bc
 8001be0:	2000039c 	.word	0x2000039c
 8001be4:	20000354 	.word	0x20000354
 8001be8:	40010000 	.word	0x40010000
 8001bec:	40010400 	.word	0x40010400

08001bf0 <PDM_PWM_Output_Process>:

//Process input conditions and command variables and sets the PWM output duty cycle
void PDM_PWM_Output_Process(PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number, GPIO_PinState output_level)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	70bb      	strb	r3, [r7, #2]
	uint8_t softStart = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
	uint16_t timChannel;
	TIM_HandleTypeDef* htim;

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	f200 80ff 	bhi.w	8001e0a <PDM_PWM_Output_Process+0x21a>
 8001c0c:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <PDM_PWM_Output_Process+0x24>)
 8001c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c12:	bf00      	nop
 8001c14:	08001c25 	.word	0x08001c25
 8001c18:	08001c2f 	.word	0x08001c2f
 8001c1c:	08001c39 	.word	0x08001c39
 8001c20:	08001c43 	.word	0x08001c43
 8001c24:	4b7b      	ldr	r3, [pc, #492]	; (8001e14 <PDM_PWM_Output_Process+0x224>)
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	230c      	movs	r3, #12
 8001c2a:	81bb      	strh	r3, [r7, #12]
 8001c2c:	e00d      	b.n	8001c4a <PDM_PWM_Output_Process+0x5a>
 8001c2e:	4b7a      	ldr	r3, [pc, #488]	; (8001e18 <PDM_PWM_Output_Process+0x228>)
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	2304      	movs	r3, #4
 8001c34:	81bb      	strh	r3, [r7, #12]
 8001c36:	e008      	b.n	8001c4a <PDM_PWM_Output_Process+0x5a>
 8001c38:	4b78      	ldr	r3, [pc, #480]	; (8001e1c <PDM_PWM_Output_Process+0x22c>)
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	81bb      	strh	r3, [r7, #12]
 8001c40:	e003      	b.n	8001c4a <PDM_PWM_Output_Process+0x5a>
 8001c42:	4b77      	ldr	r3, [pc, #476]	; (8001e20 <PDM_PWM_Output_Process+0x230>)
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	230c      	movs	r3, #12
 8001c48:	81bb      	strh	r3, [r7, #12]
 8001c4a:	bf00      	nop

	if((output_level == GPIO_PIN_SET)
 8001c4c:	78bb      	ldrb	r3, [r7, #2]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d15c      	bne.n	8001d0c <PDM_PWM_Output_Process+0x11c>
			&& (((flagDriverSafety >> pwm_out_number) & 0x01) == 0)
 8001c52:	4b74      	ldr	r3, [pc, #464]	; (8001e24 <PDM_PWM_Output_Process+0x234>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	fa42 f303 	asr.w	r3, r2, r3
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d152      	bne.n	8001d0c <PDM_PWM_Output_Process+0x11c>
			&& (pwm_struct->outputType != OutType_Error))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	791b      	ldrb	r3, [r3, #4]
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d04e      	beq.n	8001d0c <PDM_PWM_Output_Process+0x11c>
	{
		if((pwm_struct->softStart == SoftStart_Enabled) && (pwm_struct->softStartStruct != NULL) && (pwm_struct->dutyCycle == 0))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	795b      	ldrb	r3, [r3, #5]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d109      	bne.n	8001c8a <PDM_PWM_Output_Process+0x9a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <PDM_PWM_Output_Process+0x9a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <PDM_PWM_Output_Process+0x9a>
			softStart = 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]

		//Sets duty cycle to 100% if the output is set as standard
		if(pwm_struct->outputType == OutType_Standard)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	791b      	ldrb	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d104      	bne.n	8001c9c <PDM_PWM_Output_Process+0xac>
			pwm_struct->dutyCycle = 1000;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c98:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8001c9a:	e03a      	b.n	8001d12 <PDM_PWM_Output_Process+0x122>

		//Checks if the inputs match the first PWM preset
		else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct->presetEnable[0], pwm_struct->presetInputs[0], Output_Enabled))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	895a      	ldrh	r2, [r3, #10]
 8001ca0:	4b61      	ldr	r3, [pc, #388]	; (8001e28 <PDM_PWM_Output_Process+0x238>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	4053      	eors	r3, r2
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	88db      	ldrh	r3, [r3, #6]
 8001cac:	4013      	ands	r3, r2
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d104      	bne.n	8001cbe <PDM_PWM_Output_Process+0xce>
			pwm_struct->dutyCycle = pwm_struct->presetDutyCycle[0];
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	89da      	ldrh	r2, [r3, #14]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8001cbc:	e029      	b.n	8001d12 <PDM_PWM_Output_Process+0x122>

		//Checks if the inputs match the second PWM preset
		else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct->presetEnable[1], pwm_struct->presetInputs[1], Output_Enabled))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	899a      	ldrh	r2, [r3, #12]
 8001cc2:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <PDM_PWM_Output_Process+0x238>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	4053      	eors	r3, r2
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	891b      	ldrh	r3, [r3, #8]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d104      	bne.n	8001ce0 <PDM_PWM_Output_Process+0xf0>
			pwm_struct->dutyCycle = pwm_struct->presetDutyCycle[1];
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	8a1a      	ldrh	r2, [r3, #16]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8001cde:	e018      	b.n	8001d12 <PDM_PWM_Output_Process+0x122>

		//Sets duty cycle based on the 3D map if enabled
		else if((pwm_struct->outputType == OutType_Map) && (pwm_struct->pwmMapStruct != NULL))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	791b      	ldrb	r3, [r3, #4]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d10d      	bne.n	8001d04 <PDM_PWM_Output_Process+0x114>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <PDM_PWM_Output_Process+0x114>
			pwm_struct->dutyCycle = PWM_Map_Duty_Cycle_Set(pwm_struct->pwmMapStruct);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f981 	bl	8001ffc <PWM_Map_Duty_Cycle_Set>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8001d02:	e006      	b.n	8001d12 <PDM_PWM_Output_Process+0x122>

		else
			pwm_struct->dutyCycle = 0;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8001d0a:	e002      	b.n	8001d12 <PDM_PWM_Output_Process+0x122>
	}

	else
		pwm_struct->dutyCycle = 0;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	801a      	strh	r2, [r3, #0]

	if(softStart == 0)
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d123      	bne.n	8001d60 <PDM_PWM_Output_Process+0x170>
		__HAL_TIM_SET_COMPARE(htim, timChannel, pwm_struct->dutyCycle);
 8001d18:	89bb      	ldrh	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d105      	bne.n	8001d2a <PDM_PWM_Output_Process+0x13a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	881a      	ldrh	r2, [r3, #0]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	635a      	str	r2, [r3, #52]	; 0x34
 8001d28:	e066      	b.n	8001df8 <PDM_PWM_Output_Process+0x208>
 8001d2a:	89bb      	ldrh	r3, [r7, #12]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d106      	bne.n	8001d3e <PDM_PWM_Output_Process+0x14e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	8819      	ldrh	r1, [r3, #0]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	6393      	str	r3, [r2, #56]	; 0x38
 8001d3c:	e05c      	b.n	8001df8 <PDM_PWM_Output_Process+0x208>
 8001d3e:	89bb      	ldrh	r3, [r7, #12]
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d106      	bne.n	8001d52 <PDM_PWM_Output_Process+0x162>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	8819      	ldrh	r1, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001d50:	e052      	b.n	8001df8 <PDM_PWM_Output_Process+0x208>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	8819      	ldrh	r1, [r3, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	e04b      	b.n	8001df8 <PDM_PWM_Output_Process+0x208>

	else
	{
		if(PWM_SoftStart(pwm_struct) == HAL_OK)
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f8fb 	bl	8001f5c <PWM_SoftStart>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d122      	bne.n	8001db2 <PDM_PWM_Output_Process+0x1c2>
		{
			if(pwm_out_number == 1)
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d10f      	bne.n	8001d92 <PDM_PWM_Output_Process+0x1a2>
			{
				HAL_TIMEx_PWMN_Stop(htim, timChannel);
 8001d72:	89bb      	ldrh	r3, [r7, #12]
 8001d74:	4619      	mov	r1, r3
 8001d76:	68b8      	ldr	r0, [r7, #8]
 8001d78:	f007 fa00 	bl	800917c <HAL_TIMEx_PWMN_Stop>
				HAL_TIMEx_PWMN_Start_DMA(htim, timChannel, (uint32_t*) pwm_struct->softStartStruct->dutyCycleBuffer, pwm_struct->softStartStruct->dutyCycles);
 8001d7c:	89b9      	ldrh	r1, [r7, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	68b8      	ldr	r0, [r7, #8]
 8001d8c:	f007 fa54 	bl	8009238 <HAL_TIMEx_PWMN_Start_DMA>
 8001d90:	e032      	b.n	8001df8 <PDM_PWM_Output_Process+0x208>
			}

			else
			{
				HAL_TIM_PWM_Stop(htim, timChannel);
 8001d92:	89bb      	ldrh	r3, [r7, #12]
 8001d94:	4619      	mov	r1, r3
 8001d96:	68b8      	ldr	r0, [r7, #8]
 8001d98:	f006 f850 	bl	8007e3c <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start_DMA(htim, timChannel, (uint32_t*) pwm_struct->softStartStruct->dutyCycleBuffer, pwm_struct->softStartStruct->dutyCycles);
 8001d9c:	89b9      	ldrh	r1, [r7, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	68b8      	ldr	r0, [r7, #8]
 8001dac:	f006 f8b6 	bl	8007f1c <HAL_TIM_PWM_Start_DMA>
 8001db0:	e022      	b.n	8001df8 <PDM_PWM_Output_Process+0x208>
			}
		}

		else
			__HAL_TIM_SET_COMPARE(htim, timChannel, pwm_struct->dutyCycle);
 8001db2:	89bb      	ldrh	r3, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d105      	bne.n	8001dc4 <PDM_PWM_Output_Process+0x1d4>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	881a      	ldrh	r2, [r3, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001dc2:	e019      	b.n	8001df8 <PDM_PWM_Output_Process+0x208>
 8001dc4:	89bb      	ldrh	r3, [r7, #12]
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d106      	bne.n	8001dd8 <PDM_PWM_Output_Process+0x1e8>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	8819      	ldrh	r1, [r3, #0]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	6393      	str	r3, [r2, #56]	; 0x38
 8001dd6:	e00f      	b.n	8001df8 <PDM_PWM_Output_Process+0x208>
 8001dd8:	89bb      	ldrh	r3, [r7, #12]
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d106      	bne.n	8001dec <PDM_PWM_Output_Process+0x1fc>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	8819      	ldrh	r1, [r3, #0]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	460b      	mov	r3, r1
 8001de8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001dea:	e005      	b.n	8001df8 <PDM_PWM_Output_Process+0x208>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	8819      	ldrh	r1, [r3, #0]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	460b      	mov	r3, r1
 8001df6:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//Stores output duty cycle inside the data buffer to be sent via CAN/USB
	dataBuffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] = pwm_struct->dutyCycle;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	881a      	ldrh	r2, [r3, #0]
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	331a      	adds	r3, #26
 8001e00:	b211      	sxth	r1, r2
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <PDM_PWM_Output_Process+0x23c>)
 8001e04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return;
 8001e08:	e000      	b.n	8001e0c <PDM_PWM_Output_Process+0x21c>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8001e0a:	bf00      	nop
}
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200003e4 	.word	0x200003e4
 8001e18:	200004bc 	.word	0x200004bc
 8001e1c:	2000039c 	.word	0x2000039c
 8001e20:	20000354 	.word	0x20000354
 8001e24:	200007b4 	.word	0x200007b4
 8001e28:	200007b8 	.word	0x200007b8
 8001e2c:	20000728 	.word	0x20000728

08001e30 <PWM_DeAlloc>:

static void PWM_DeAlloc(PWM_Control_Struct *pwm_struct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	if(pwm_struct->softStartStruct != NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d019      	beq.n	8001e74 <PWM_DeAlloc+0x44>
	{

		if(pwm_struct->softStartStruct->dutyCycleBuffer != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <PWM_DeAlloc+0x2e>
		{
			free(pwm_struct->softStartStruct->dutyCycleBuffer);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f00e fd5b 	bl	801090c <free>
			pwm_struct->softStartStruct->dutyCycleBuffer = NULL;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	605a      	str	r2, [r3, #4]
		}

		free(pwm_struct->softStartStruct);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f00e fd52 	bl	801090c <free>
		pwm_struct->softStartStruct = NULL;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
		pwm_struct->softStart = SoftStart_Disabled;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	715a      	strb	r2, [r3, #5]
	}

	if(pwm_struct->pwmMapStruct != NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d05b      	beq.n	8001f34 <PWM_DeAlloc+0x104>
	{
		if(pwm_struct->pwmMapStruct->commandVarStep[0] != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d009      	beq.n	8001e9a <PWM_DeAlloc+0x6a>
		{
			free(pwm_struct->pwmMapStruct->commandVarStep[0]);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00e fd3d 	bl	801090c <free>
			pwm_struct->pwmMapStruct->commandVarStep[0] = NULL;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
		}

		if(pwm_struct->pwmMapStruct->commandVarStep[1] != NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d009      	beq.n	8001eb8 <PWM_DeAlloc+0x88>
		{
			free(pwm_struct->pwmMapStruct->commandVarStep[1]);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f00e fd2e 	bl	801090c <free>
			pwm_struct->pwmMapStruct->commandVarStep[1] = NULL;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
		}

		for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]
 8001ebc:	e01d      	b.n	8001efa <PWM_DeAlloc+0xca>
		{
			if(pwm_struct->pwmMapStruct->dutyCycleMap[i] != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d011      	beq.n	8001ef4 <PWM_DeAlloc+0xc4>
			{
				free(pwm_struct->pwmMapStruct->dutyCycleMap[i]);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f00e fd14 	bl	801090c <free>
				pwm_struct->pwmMapStruct->dutyCycleMap[i] = NULL;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d3db      	bcc.n	8001ebe <PWM_DeAlloc+0x8e>
			}
		}

		if(pwm_struct->pwmMapStruct->dutyCycleMap != NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <PWM_DeAlloc+0xf4>
		{
			free(pwm_struct->pwmMapStruct->dutyCycleMap);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f00e fcf8 	bl	801090c <free>
			pwm_struct->pwmMapStruct->dutyCycleMap = NULL;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
		}

		free(pwm_struct->pwmMapStruct);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f00e fcef 	bl	801090c <free>
		pwm_struct->pwmMapStruct = NULL;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
	}

	if((pwm_struct->presetEnable[0] != 0)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	88db      	ldrh	r3, [r3, #6]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d103      	bne.n	8001f44 <PWM_DeAlloc+0x114>
			|| (pwm_struct->presetEnable[1] != 0))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	891b      	ldrh	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <PWM_DeAlloc+0x11c>
		pwm_struct->outputType = OutType_Preset;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	711a      	strb	r2, [r3, #4]
 8001f4a:	e002      	b.n	8001f52 <PWM_DeAlloc+0x122>

	else
		pwm_struct->outputType = OutType_Standard;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	711a      	strb	r2, [r3, #4]

	return;
 8001f52:	bf00      	nop
}
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <PWM_SoftStart>:

//Sets the PWM soft start buffer
static HAL_StatusTypeDef PWM_SoftStart(PWM_Control_Struct *pwm_struct)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]

	pwm_struct->softStartStruct->dutyCycles = (pwm_struct->softStartStruct->slope * pwm_struct->dutyCycle) / 1000;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	8812      	ldrh	r2, [r2, #0]
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <PWM_SoftStart+0x9c>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	099a      	lsrs	r2, r3, #6
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	b292      	uxth	r2, r2
 8001f84:	801a      	strh	r2, [r3, #0]

	pwm_struct->softStartStruct->dutyCycleBuffer = malloc(pwm_struct->softStartStruct->dutyCycles * sizeof(uint16_t));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	005a      	lsls	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69dc      	ldr	r4, [r3, #28]
 8001f92:	4610      	mov	r0, r2
 8001f94:	f00e fcb2 	bl	80108fc <malloc>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	6063      	str	r3, [r4, #4]

	if(pwm_struct->softStartStruct->dutyCycleBuffer != NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d020      	beq.n	8001fe8 <PWM_SoftStart+0x8c>
	{
		for(uint16_t i = 0; i < pwm_struct->softStartStruct->dutyCycles; i++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	81bb      	strh	r3, [r7, #12]
 8001faa:	e014      	b.n	8001fd6 <PWM_SoftStart+0x7a>
			pwm_struct->softStartStruct->dutyCycleBuffer[i] = __PDM_LINEAR_INTERPOLATION(i, 0, pwm_struct->softStartStruct->dutyCycles,
 8001fac:	89bb      	ldrh	r3, [r7, #12]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	8812      	ldrh	r2, [r2, #0]
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	69d2      	ldr	r2, [r2, #28]
 8001fba:	8812      	ldrh	r2, [r2, #0]
 8001fbc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	89bb      	ldrh	r3, [r7, #12]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	b28a      	uxth	r2, r1
 8001fce:	801a      	strh	r2, [r3, #0]
		for(uint16_t i = 0; i < pwm_struct->softStartStruct->dutyCycles; i++)
 8001fd0:	89bb      	ldrh	r3, [r7, #12]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	81bb      	strh	r3, [r7, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	89ba      	ldrh	r2, [r7, #12]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d3e4      	bcc.n	8001fac <PWM_SoftStart+0x50>
																							0, pwm_struct->dutyCycle);

		retVal = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	e001      	b.n	8001fec <PWM_SoftStart+0x90>
	}

	else
		retVal = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]

	return retVal;
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	10624dd3 	.word	0x10624dd3

08001ffc <PWM_Map_Duty_Cycle_Set>:

//Sets PWM output duty cycle using its command variables
static uint16_t PWM_Map_Duty_Cycle_Set(PDM_PWM_Map_Struct* pwm_map_struct)
{
 8001ffc:	b4b0      	push	{r4, r5, r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	uint16_t retVal = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	81fb      	strh	r3, [r7, #14]

	//Checks if both command variables out of the column and line limits and attributes the map's closest corner value
	if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002016:	429a      	cmp	r2, r3
 8002018:	dc0e      	bgt.n	8002038 <PWM_Map_Duty_Cycle_Set+0x3c>
		&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002028:	429a      	cmp	r2, r3
 800202a:	dc05      	bgt.n	8002038 <PWM_Map_Duty_Cycle_Set+0x3c>

		retVal = pwm_map_struct->dutyCycleMap[0][0];
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	81fb      	strh	r3, [r7, #14]
 8002036:	e37e      	b.n	8002736 <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1])
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68d9      	ldr	r1, [r3, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	791b      	ldrb	r3, [r3, #4]
 8002046:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800204a:	3b01      	subs	r3, #1
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	440b      	add	r3, r1
 8002050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002054:	429a      	cmp	r2, r3
 8002056:	db15      	blt.n	8002084 <PWM_Map_Duty_Cycle_Set+0x88>
			 && (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002066:	429a      	cmp	r2, r3
 8002068:	dc0c      	bgt.n	8002084 <PWM_Map_Duty_Cycle_Set+0x88>

		retVal = pwm_map_struct->dutyCycleMap[pwm_map_struct->mapLengths[0] - 1][0];
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	791b      	ldrb	r3, [r3, #4]
 8002072:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002076:	3b01      	subs	r3, #1
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	81fb      	strh	r3, [r7, #14]
 8002082:	e358      	b.n	8002736 <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002092:	429a      	cmp	r2, r3
 8002094:	dc1c      	bgt.n	80020d0 <PWM_Map_Duty_Cycle_Set+0xd4>
			 && (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1]))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6919      	ldr	r1, [r3, #16]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	795b      	ldrb	r3, [r3, #5]
 80020a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80020a8:	3b01      	subs	r3, #1
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	440b      	add	r3, r1
 80020ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	db0c      	blt.n	80020d0 <PWM_Map_Duty_Cycle_Set+0xd4>

		retVal = pwm_map_struct->dutyCycleMap[0][pwm_map_struct->mapLengths[1] - 1];
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	795b      	ldrb	r3, [r3, #5]
 80020c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80020c4:	3b01      	subs	r3, #1
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	81fb      	strh	r3, [r7, #14]
 80020ce:	e332      	b.n	8002736 <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1])
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68d9      	ldr	r1, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	791b      	ldrb	r3, [r3, #4]
 80020de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80020e2:	3b01      	subs	r3, #1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	440b      	add	r3, r1
 80020e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	db23      	blt.n	8002138 <PWM_Map_Duty_Cycle_Set+0x13c>
			 && (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1]))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6919      	ldr	r1, [r3, #16]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	795b      	ldrb	r3, [r3, #5]
 80020fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002102:	3b01      	subs	r3, #1
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	440b      	add	r3, r1
 8002108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800210c:	429a      	cmp	r2, r3
 800210e:	db13      	blt.n	8002138 <PWM_Map_Duty_Cycle_Set+0x13c>

		retVal = pwm_map_struct->dutyCycleMap[pwm_map_struct->mapLengths[0] - 1][pwm_map_struct->mapLengths[1] - 1];
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	791b      	ldrb	r3, [r3, #4]
 8002118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800211c:	3b01      	subs	r3, #1
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	795b      	ldrb	r3, [r3, #5]
 8002128:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800212c:	3b01      	subs	r3, #1
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	81fb      	strh	r3, [r7, #14]
 8002136:	e2fe      	b.n	8002736 <PWM_Map_Duty_Cycle_Set+0x73a>

	//Check if the command variable point is outside the lines (y limits) of the 3D map or there is only 1 variable input
	else if((pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0])
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002146:	429a      	cmp	r2, r3
 8002148:	dd14      	ble.n	8002174 <PWM_Map_Duty_Cycle_Set+0x178>
			|| (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1])
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6919      	ldr	r1, [r3, #16]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	795b      	ldrb	r3, [r3, #5]
 8002158:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800215c:	3b01      	subs	r3, #1
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	440b      	add	r3, r1
 8002162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002166:	429a      	cmp	r2, r3
 8002168:	da04      	bge.n	8002174 <PWM_Map_Duty_Cycle_Set+0x178>
			|| (pwm_map_struct->mapLengths[1] == 1))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	795b      	ldrb	r3, [r3, #5]
 800216e:	2b01      	cmp	r3, #1
 8002170:	f040 80c4 	bne.w	80022fc <PWM_Map_Duty_Cycle_Set+0x300>
	{
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002174:	2300      	movs	r3, #0
 8002176:	737b      	strb	r3, [r7, #13]
 8002178:	e0b8      	b.n	80022ec <PWM_Map_Duty_Cycle_Set+0x2f0>
		{
			//Checks if the command variable point is inside the x, x + 1 column
			if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][x])
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68d9      	ldr	r1, [r3, #12]
 8002184:	7b7b      	ldrb	r3, [r7, #13]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	440b      	add	r3, r1
 800218a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800218e:	429a      	cmp	r2, r3
 8002190:	f2c0 80a9 	blt.w	80022e6 <PWM_Map_Duty_Cycle_Set+0x2ea>
				&& (pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][x + 1]))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68d9      	ldr	r1, [r3, #12]
 800219e:	7b7b      	ldrb	r3, [r7, #13]
 80021a0:	3301      	adds	r3, #1
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	440b      	add	r3, r1
 80021a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	f300 809b 	bgt.w	80022e6 <PWM_Map_Duty_Cycle_Set+0x2ea>
			{
				//Checks if the command variable point is above or below the lines (y limits) of the 3D map then sets duty cycle via linear interpolation
				if((pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]) || (pwm_map_struct->mapLengths[1] == 1))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021be:	429a      	cmp	r2, r3
 80021c0:	dd03      	ble.n	80021ca <PWM_Map_Duty_Cycle_Set+0x1ce>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	795b      	ldrb	r3, [r3, #5]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d13c      	bne.n	8002244 <PWM_Map_Duty_Cycle_Set+0x248>
				{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80021d0:	4619      	mov	r1, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	7b7b      	ldrb	r3, [r7, #13]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e0:	1acb      	subs	r3, r1, r3
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6951      	ldr	r1, [r2, #20]
 80021e6:	7b7a      	ldrb	r2, [r7, #13]
 80021e8:	3201      	adds	r2, #1
 80021ea:	0092      	lsls	r2, r2, #2
 80021ec:	440a      	add	r2, r1
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	8812      	ldrh	r2, [r2, #0]
 80021f2:	4610      	mov	r0, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6951      	ldr	r1, [r2, #20]
 80021f8:	7b7a      	ldrb	r2, [r7, #13]
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	440a      	add	r2, r1
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	8812      	ldrh	r2, [r2, #0]
 8002202:	1a82      	subs	r2, r0, r2
 8002204:	fb03 f202 	mul.w	r2, r3, r2
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68d9      	ldr	r1, [r3, #12]
 800220c:	7b7b      	ldrb	r3, [r7, #13]
 800220e:	3301      	adds	r3, #1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	440b      	add	r3, r1
 8002214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002218:	4618      	mov	r0, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68d9      	ldr	r1, [r3, #12]
 800221e:	7b7b      	ldrb	r3, [r7, #13]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	440b      	add	r3, r1
 8002224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002228:	1ac3      	subs	r3, r0, r3
 800222a:	fb92 f3f3 	sdiv	r3, r2, r3
 800222e:	b29a      	uxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6959      	ldr	r1, [r3, #20]
 8002234:	7b7b      	ldrb	r3, [r7, #13]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	4413      	add	r3, r2
 8002240:	81fb      	strh	r3, [r7, #14]
 8002242:	e050      	b.n	80022e6 <PWM_Map_Duty_Cycle_Set+0x2ea>
																  	   pwm_map_struct->commandVarStep[0][x],
																	   pwm_map_struct->commandVarStep[0][x + 1],
																	   pwm_map_struct->dutyCycleMap[x][0],
																	   pwm_map_struct->dutyCycleMap[x + 1][0]);
				}else{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800224a:	4619      	mov	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	7b7b      	ldrb	r3, [r7, #13]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800225a:	1aca      	subs	r2, r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6959      	ldr	r1, [r3, #20]
 8002260:	7b7b      	ldrb	r3, [r7, #13]
 8002262:	3301      	adds	r3, #1
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	6819      	ldr	r1, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	795b      	ldrb	r3, [r3, #5]
 800226e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002272:	3b01      	subs	r3, #1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	440b      	add	r3, r1
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6959      	ldr	r1, [r3, #20]
 8002280:	7b7b      	ldrb	r3, [r7, #13]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	6819      	ldr	r1, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	795b      	ldrb	r3, [r3, #5]
 800228c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002290:	3b01      	subs	r3, #1
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	440b      	add	r3, r1
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	1ac3      	subs	r3, r0, r3
 800229a:	fb03 f202 	mul.w	r2, r3, r2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68d9      	ldr	r1, [r3, #12]
 80022a2:	7b7b      	ldrb	r3, [r7, #13]
 80022a4:	3301      	adds	r3, #1
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	440b      	add	r3, r1
 80022aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ae:	4618      	mov	r0, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68d9      	ldr	r1, [r3, #12]
 80022b4:	7b7b      	ldrb	r3, [r7, #13]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	440b      	add	r3, r1
 80022ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022be:	1ac3      	subs	r3, r0, r3
 80022c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6959      	ldr	r1, [r3, #20]
 80022ca:	7b7b      	ldrb	r3, [r7, #13]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	795b      	ldrb	r3, [r3, #5]
 80022d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80022da:	3b01      	subs	r3, #1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	440b      	add	r3, r1
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	81fb      	strh	r3, [r7, #14]
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 80022e6:	7b7b      	ldrb	r3, [r7, #13]
 80022e8:	3301      	adds	r3, #1
 80022ea:	737b      	strb	r3, [r7, #13]
 80022ec:	7b7a      	ldrb	r2, [r7, #13]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	791b      	ldrb	r3, [r3, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	429a      	cmp	r2, r3
 80022f6:	f6ff af40 	blt.w	800217a <PWM_Map_Duty_Cycle_Set+0x17e>
 80022fa:	e21c      	b.n	8002736 <PWM_Map_Duty_Cycle_Set+0x73a>
			}
		}
	}

	//Check if the command variable point is outside the columns (x limits) of the 3D map
	else if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230a:	429a      	cmp	r2, r3
 800230c:	dd10      	ble.n	8002330 <PWM_Map_Duty_Cycle_Set+0x334>
			|| (pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1]))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68d9      	ldr	r1, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	791b      	ldrb	r3, [r3, #4]
 800231c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002320:	3b01      	subs	r3, #1
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	440b      	add	r3, r1
 8002326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800232a:	429a      	cmp	r2, r3
 800232c:	f2c0 80c0 	blt.w	80024b0 <PWM_Map_Duty_Cycle_Set+0x4b4>
	{
		for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002330:	2300      	movs	r3, #0
 8002332:	733b      	strb	r3, [r7, #12]
 8002334:	e0b4      	b.n	80024a0 <PWM_Map_Duty_Cycle_Set+0x4a4>
		{
			//Checks if the command variable point is inside the y, y + 1 line
			if((pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][y])
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6919      	ldr	r1, [r3, #16]
 8002340:	7b3b      	ldrb	r3, [r7, #12]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	440b      	add	r3, r1
 8002346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234a:	429a      	cmp	r2, r3
 800234c:	f2c0 80a5 	blt.w	800249a <PWM_Map_Duty_Cycle_Set+0x49e>
				&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][y + 1]))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6919      	ldr	r1, [r3, #16]
 800235a:	7b3b      	ldrb	r3, [r7, #12]
 800235c:	3301      	adds	r3, #1
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	440b      	add	r3, r1
 8002362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002366:	429a      	cmp	r2, r3
 8002368:	f300 8097 	bgt.w	800249a <PWM_Map_Duty_Cycle_Set+0x49e>
			{
				//Checks if the command variable point is to the left or to the right of the 3D map then sets duty cycle via linear interpolation
				if(pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800237a:	429a      	cmp	r2, r3
 800237c:	dc3c      	bgt.n	80023f8 <PWM_Map_Duty_Cycle_Set+0x3fc>
				{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[1],
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002384:	4619      	mov	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	7b3b      	ldrb	r3, [r7, #12]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002394:	1acb      	subs	r3, r1, r3
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6952      	ldr	r2, [r2, #20]
 800239a:	6811      	ldr	r1, [r2, #0]
 800239c:	7b3a      	ldrb	r2, [r7, #12]
 800239e:	3201      	adds	r2, #1
 80023a0:	0052      	lsls	r2, r2, #1
 80023a2:	440a      	add	r2, r1
 80023a4:	8812      	ldrh	r2, [r2, #0]
 80023a6:	4610      	mov	r0, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6952      	ldr	r2, [r2, #20]
 80023ac:	6811      	ldr	r1, [r2, #0]
 80023ae:	7b3a      	ldrb	r2, [r7, #12]
 80023b0:	0052      	lsls	r2, r2, #1
 80023b2:	440a      	add	r2, r1
 80023b4:	8812      	ldrh	r2, [r2, #0]
 80023b6:	1a82      	subs	r2, r0, r2
 80023b8:	fb03 f202 	mul.w	r2, r3, r2
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6919      	ldr	r1, [r3, #16]
 80023c0:	7b3b      	ldrb	r3, [r7, #12]
 80023c2:	3301      	adds	r3, #1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	440b      	add	r3, r1
 80023c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023cc:	4618      	mov	r0, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6919      	ldr	r1, [r3, #16]
 80023d2:	7b3b      	ldrb	r3, [r7, #12]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	440b      	add	r3, r1
 80023d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023dc:	1ac3      	subs	r3, r0, r3
 80023de:	fb92 f3f3 	sdiv	r3, r2, r3
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	6819      	ldr	r1, [r3, #0]
 80023ea:	7b3b      	ldrb	r3, [r7, #12]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	440b      	add	r3, r1
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	81fb      	strh	r3, [r7, #14]
 80023f6:	e050      	b.n	800249a <PWM_Map_Duty_Cycle_Set+0x49e>
																  	   pwm_map_struct->commandVarStep[1][y],
																	   pwm_map_struct->commandVarStep[1][y + 1],
																	   pwm_map_struct->dutyCycleMap[0][y],
																	   pwm_map_struct->dutyCycleMap[0][y + 1]);
				}else{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[1],
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80023fe:	4619      	mov	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	7b3b      	ldrb	r3, [r7, #12]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240e:	1aca      	subs	r2, r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6959      	ldr	r1, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	791b      	ldrb	r3, [r3, #4]
 8002418:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800241c:	3b01      	subs	r3, #1
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	7b3b      	ldrb	r3, [r7, #12]
 8002426:	3301      	adds	r3, #1
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	440b      	add	r3, r1
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6959      	ldr	r1, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	791b      	ldrb	r3, [r3, #4]
 8002438:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800243c:	3b01      	subs	r3, #1
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	7b3b      	ldrb	r3, [r7, #12]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	440b      	add	r3, r1
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	1ac3      	subs	r3, r0, r3
 800244e:	fb03 f202 	mul.w	r2, r3, r2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6919      	ldr	r1, [r3, #16]
 8002456:	7b3b      	ldrb	r3, [r7, #12]
 8002458:	3301      	adds	r3, #1
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	440b      	add	r3, r1
 800245e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002462:	4618      	mov	r0, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6919      	ldr	r1, [r3, #16]
 8002468:	7b3b      	ldrb	r3, [r7, #12]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	440b      	add	r3, r1
 800246e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002472:	1ac3      	subs	r3, r0, r3
 8002474:	fb92 f3f3 	sdiv	r3, r2, r3
 8002478:	b29a      	uxth	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6959      	ldr	r1, [r3, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	791b      	ldrb	r3, [r3, #4]
 8002482:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002486:	3b01      	subs	r3, #1
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	7b3b      	ldrb	r3, [r7, #12]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	440b      	add	r3, r1
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	4413      	add	r3, r2
 8002498:	81fb      	strh	r3, [r7, #14]
		for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 800249a:	7b3b      	ldrb	r3, [r7, #12]
 800249c:	3301      	adds	r3, #1
 800249e:	733b      	strb	r3, [r7, #12]
 80024a0:	7b3a      	ldrb	r2, [r7, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	795b      	ldrb	r3, [r3, #5]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	429a      	cmp	r2, r3
 80024aa:	f6ff af44 	blt.w	8002336 <PWM_Map_Duty_Cycle_Set+0x33a>
 80024ae:	e142      	b.n	8002736 <PWM_Map_Duty_Cycle_Set+0x73a>
	}

	//Since the command variable point is inside the map's boundary, sets duty cycle via bilinear interpolation
	else
	{
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	72fb      	strb	r3, [r7, #11]
 80024b4:	e138      	b.n	8002728 <PWM_Map_Duty_Cycle_Set+0x72c>
		{
			//Checks if the command variable point is inside the x, x + 1 column
			if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][x])
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68d9      	ldr	r1, [r3, #12]
 80024c0:	7afb      	ldrb	r3, [r7, #11]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	440b      	add	r3, r1
 80024c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	f2c0 8129 	blt.w	8002722 <PWM_Map_Duty_Cycle_Set+0x726>
				&& (pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][x + 1]))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68d9      	ldr	r1, [r3, #12]
 80024da:	7afb      	ldrb	r3, [r7, #11]
 80024dc:	3301      	adds	r3, #1
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	440b      	add	r3, r1
 80024e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	f300 811b 	bgt.w	8002722 <PWM_Map_Duty_Cycle_Set+0x726>
			{
				for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	72bb      	strb	r3, [r7, #10]
 80024f0:	e110      	b.n	8002714 <PWM_Map_Duty_Cycle_Set+0x718>
				{
					//Checks if the command variable point is inside the y, y + 1 line
					if((pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][y])
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6919      	ldr	r1, [r3, #16]
 80024fc:	7abb      	ldrb	r3, [r7, #10]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	440b      	add	r3, r1
 8002502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002506:	429a      	cmp	r2, r3
 8002508:	f2c0 8101 	blt.w	800270e <PWM_Map_Duty_Cycle_Set+0x712>
						&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][y + 1]))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6919      	ldr	r1, [r3, #16]
 8002516:	7abb      	ldrb	r3, [r7, #10]
 8002518:	3301      	adds	r3, #1
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	440b      	add	r3, r1
 800251e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002522:	429a      	cmp	r2, r3
 8002524:	f300 80f3 	bgt.w	800270e <PWM_Map_Duty_Cycle_Set+0x712>
					{
						retVal = __PDM_BILINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800252e:	4619      	mov	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	7abb      	ldrb	r3, [r7, #10]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800253e:	1acb      	subs	r3, r1, r3
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002546:	4610      	mov	r0, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68d1      	ldr	r1, [r2, #12]
 800254c:	7afa      	ldrb	r2, [r7, #11]
 800254e:	0052      	lsls	r2, r2, #1
 8002550:	440a      	add	r2, r1
 8002552:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002556:	1a82      	subs	r2, r0, r2
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	6948      	ldr	r0, [r1, #20]
 800255c:	7af9      	ldrb	r1, [r7, #11]
 800255e:	3101      	adds	r1, #1
 8002560:	0089      	lsls	r1, r1, #2
 8002562:	4401      	add	r1, r0
 8002564:	6808      	ldr	r0, [r1, #0]
 8002566:	7ab9      	ldrb	r1, [r7, #10]
 8002568:	3101      	adds	r1, #1
 800256a:	0049      	lsls	r1, r1, #1
 800256c:	4401      	add	r1, r0
 800256e:	8809      	ldrh	r1, [r1, #0]
 8002570:	460c      	mov	r4, r1
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	6948      	ldr	r0, [r1, #20]
 8002576:	7af9      	ldrb	r1, [r7, #11]
 8002578:	0089      	lsls	r1, r1, #2
 800257a:	4401      	add	r1, r0
 800257c:	6808      	ldr	r0, [r1, #0]
 800257e:	7ab9      	ldrb	r1, [r7, #10]
 8002580:	3101      	adds	r1, #1
 8002582:	0049      	lsls	r1, r1, #1
 8002584:	4401      	add	r1, r0
 8002586:	8809      	ldrh	r1, [r1, #0]
 8002588:	1a61      	subs	r1, r4, r1
 800258a:	fb02 f101 	mul.w	r1, r2, r1
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68d0      	ldr	r0, [r2, #12]
 8002592:	7afa      	ldrb	r2, [r7, #11]
 8002594:	3201      	adds	r2, #1
 8002596:	0052      	lsls	r2, r2, #1
 8002598:	4402      	add	r2, r0
 800259a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800259e:	4614      	mov	r4, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68d0      	ldr	r0, [r2, #12]
 80025a4:	7afa      	ldrb	r2, [r7, #11]
 80025a6:	0052      	lsls	r2, r2, #1
 80025a8:	4402      	add	r2, r0
 80025aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025ae:	1aa2      	subs	r2, r4, r2
 80025b0:	fb91 f2f2 	sdiv	r2, r1, r2
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	6948      	ldr	r0, [r1, #20]
 80025b8:	7af9      	ldrb	r1, [r7, #11]
 80025ba:	0089      	lsls	r1, r1, #2
 80025bc:	4401      	add	r1, r0
 80025be:	6808      	ldr	r0, [r1, #0]
 80025c0:	7ab9      	ldrb	r1, [r7, #10]
 80025c2:	3101      	adds	r1, #1
 80025c4:	0049      	lsls	r1, r1, #1
 80025c6:	4401      	add	r1, r0
 80025c8:	8809      	ldrh	r1, [r1, #0]
 80025ca:	4411      	add	r1, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80025d2:	4614      	mov	r4, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68d0      	ldr	r0, [r2, #12]
 80025d8:	7afa      	ldrb	r2, [r7, #11]
 80025da:	0052      	lsls	r2, r2, #1
 80025dc:	4402      	add	r2, r0
 80025de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025e2:	1aa2      	subs	r2, r4, r2
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	6944      	ldr	r4, [r0, #20]
 80025e8:	7af8      	ldrb	r0, [r7, #11]
 80025ea:	3001      	adds	r0, #1
 80025ec:	0080      	lsls	r0, r0, #2
 80025ee:	4420      	add	r0, r4
 80025f0:	6804      	ldr	r4, [r0, #0]
 80025f2:	7ab8      	ldrb	r0, [r7, #10]
 80025f4:	0040      	lsls	r0, r0, #1
 80025f6:	4420      	add	r0, r4
 80025f8:	8800      	ldrh	r0, [r0, #0]
 80025fa:	4605      	mov	r5, r0
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	6944      	ldr	r4, [r0, #20]
 8002600:	7af8      	ldrb	r0, [r7, #11]
 8002602:	0080      	lsls	r0, r0, #2
 8002604:	4420      	add	r0, r4
 8002606:	6804      	ldr	r4, [r0, #0]
 8002608:	7ab8      	ldrb	r0, [r7, #10]
 800260a:	0040      	lsls	r0, r0, #1
 800260c:	4420      	add	r0, r4
 800260e:	8800      	ldrh	r0, [r0, #0]
 8002610:	1a28      	subs	r0, r5, r0
 8002612:	fb02 f000 	mul.w	r0, r2, r0
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68d4      	ldr	r4, [r2, #12]
 800261a:	7afa      	ldrb	r2, [r7, #11]
 800261c:	3201      	adds	r2, #1
 800261e:	0052      	lsls	r2, r2, #1
 8002620:	4422      	add	r2, r4
 8002622:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002626:	4615      	mov	r5, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	68d4      	ldr	r4, [r2, #12]
 800262c:	7afa      	ldrb	r2, [r7, #11]
 800262e:	0052      	lsls	r2, r2, #1
 8002630:	4422      	add	r2, r4
 8002632:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002636:	1aaa      	subs	r2, r5, r2
 8002638:	fb90 f2f2 	sdiv	r2, r0, r2
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	6944      	ldr	r4, [r0, #20]
 8002640:	7af8      	ldrb	r0, [r7, #11]
 8002642:	0080      	lsls	r0, r0, #2
 8002644:	4420      	add	r0, r4
 8002646:	6804      	ldr	r4, [r0, #0]
 8002648:	7ab8      	ldrb	r0, [r7, #10]
 800264a:	0040      	lsls	r0, r0, #1
 800264c:	4420      	add	r0, r4
 800264e:	8800      	ldrh	r0, [r0, #0]
 8002650:	4402      	add	r2, r0
 8002652:	1a8a      	subs	r2, r1, r2
 8002654:	fb03 f202 	mul.w	r2, r3, r2
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6919      	ldr	r1, [r3, #16]
 800265c:	7abb      	ldrb	r3, [r7, #10]
 800265e:	3301      	adds	r3, #1
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	440b      	add	r3, r1
 8002664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002668:	4618      	mov	r0, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6919      	ldr	r1, [r3, #16]
 800266e:	7abb      	ldrb	r3, [r7, #10]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	440b      	add	r3, r1
 8002674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002678:	1ac3      	subs	r3, r0, r3
 800267a:	fb92 f3f3 	sdiv	r3, r2, r3
 800267e:	b29a      	uxth	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002686:	4618      	mov	r0, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68d9      	ldr	r1, [r3, #12]
 800268c:	7afb      	ldrb	r3, [r7, #11]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	440b      	add	r3, r1
 8002692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002696:	1ac3      	subs	r3, r0, r3
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	6948      	ldr	r0, [r1, #20]
 800269c:	7af9      	ldrb	r1, [r7, #11]
 800269e:	3101      	adds	r1, #1
 80026a0:	0089      	lsls	r1, r1, #2
 80026a2:	4401      	add	r1, r0
 80026a4:	6808      	ldr	r0, [r1, #0]
 80026a6:	7ab9      	ldrb	r1, [r7, #10]
 80026a8:	0049      	lsls	r1, r1, #1
 80026aa:	4401      	add	r1, r0
 80026ac:	8809      	ldrh	r1, [r1, #0]
 80026ae:	460c      	mov	r4, r1
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	6948      	ldr	r0, [r1, #20]
 80026b4:	7af9      	ldrb	r1, [r7, #11]
 80026b6:	0089      	lsls	r1, r1, #2
 80026b8:	4401      	add	r1, r0
 80026ba:	6808      	ldr	r0, [r1, #0]
 80026bc:	7ab9      	ldrb	r1, [r7, #10]
 80026be:	0049      	lsls	r1, r1, #1
 80026c0:	4401      	add	r1, r0
 80026c2:	8809      	ldrh	r1, [r1, #0]
 80026c4:	1a61      	subs	r1, r4, r1
 80026c6:	fb03 f101 	mul.w	r1, r3, r1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68d8      	ldr	r0, [r3, #12]
 80026ce:	7afb      	ldrb	r3, [r7, #11]
 80026d0:	3301      	adds	r3, #1
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4403      	add	r3, r0
 80026d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026da:	461c      	mov	r4, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68d8      	ldr	r0, [r3, #12]
 80026e0:	7afb      	ldrb	r3, [r7, #11]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4403      	add	r3, r0
 80026e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ea:	1ae3      	subs	r3, r4, r3
 80026ec:	fb91 f3f3 	sdiv	r3, r1, r3
 80026f0:	b299      	uxth	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6958      	ldr	r0, [r3, #20]
 80026f6:	7afb      	ldrb	r3, [r7, #11]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4403      	add	r3, r0
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	7abb      	ldrb	r3, [r7, #10]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4403      	add	r3, r0
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	440b      	add	r3, r1
 8002708:	b29b      	uxth	r3, r3
 800270a:	4413      	add	r3, r2
 800270c:	81fb      	strh	r3, [r7, #14]
				for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 800270e:	7abb      	ldrb	r3, [r7, #10]
 8002710:	3301      	adds	r3, #1
 8002712:	72bb      	strb	r3, [r7, #10]
 8002714:	7aba      	ldrb	r2, [r7, #10]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	795b      	ldrb	r3, [r3, #5]
 800271a:	3b01      	subs	r3, #1
 800271c:	429a      	cmp	r2, r3
 800271e:	f6ff aee8 	blt.w	80024f2 <PWM_Map_Duty_Cycle_Set+0x4f6>
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002722:	7afb      	ldrb	r3, [r7, #11]
 8002724:	3301      	adds	r3, #1
 8002726:	72fb      	strb	r3, [r7, #11]
 8002728:	7afa      	ldrb	r2, [r7, #11]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	791b      	ldrb	r3, [r3, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	429a      	cmp	r2, r3
 8002732:	f6ff aec0 	blt.w	80024b6 <PWM_Map_Duty_Cycle_Set+0x4ba>
				}
			}
		}
	}

	return retVal;
 8002736:	89fb      	ldrh	r3, [r7, #14]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bcb0      	pop	{r4, r5, r7}
 8002740:	4770      	bx	lr

08002742 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "pdm.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]


	return;
 800274a:	bf00      	nop
}
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	80fb      	strh	r3, [r7, #6]

	return;
 8002760:	bf00      	nop
}
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_MspInit+0x54>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	4a11      	ldr	r2, [pc, #68]	; (80027c0 <HAL_MspInit+0x54>)
 800277c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002780:	6453      	str	r3, [r2, #68]	; 0x44
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_MspInit+0x54>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_MspInit+0x54>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <HAL_MspInit+0x54>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279c:	6413      	str	r3, [r2, #64]	; 0x40
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <HAL_MspInit+0x54>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	210f      	movs	r1, #15
 80027ae:	f06f 0001 	mvn.w	r0, #1
 80027b2:	f001 fe1f 	bl	80043f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800

080027c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	; 0x30
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 031c 	add.w	r3, r7, #28
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a6b      	ldr	r2, [pc, #428]	; (8002990 <HAL_ADC_MspInit+0x1cc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d172      	bne.n	80028cc <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4a69      	ldr	r2, [pc, #420]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 80027f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f4:	6453      	str	r3, [r2, #68]	; 0x44
 80027f6:	4b67      	ldr	r3, [pc, #412]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	4b63      	ldr	r3, [pc, #396]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a62      	ldr	r2, [pc, #392]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b60      	ldr	r3, [pc, #384]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	4b5c      	ldr	r3, [pc, #368]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a5b      	ldr	r2, [pc, #364]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b59      	ldr	r3, [pc, #356]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 800283a:	23e0      	movs	r3, #224	; 0xe0
 800283c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800283e:	2303      	movs	r3, #3
 8002840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	4852      	ldr	r0, [pc, #328]	; (8002998 <HAL_ADC_MspInit+0x1d4>)
 800284e:	f002 f987 	bl	8004b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ANALOG9_Pin;
 8002852:	2310      	movs	r3, #16
 8002854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002856:	2303      	movs	r3, #3
 8002858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 800285e:	f107 031c 	add.w	r3, r7, #28
 8002862:	4619      	mov	r1, r3
 8002864:	484d      	ldr	r0, [pc, #308]	; (800299c <HAL_ADC_MspInit+0x1d8>)
 8002866:	f002 f97b 	bl	8004b60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800286a:	4b4d      	ldr	r3, [pc, #308]	; (80029a0 <HAL_ADC_MspInit+0x1dc>)
 800286c:	4a4d      	ldr	r2, [pc, #308]	; (80029a4 <HAL_ADC_MspInit+0x1e0>)
 800286e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_ADC_MspInit+0x1dc>)
 8002872:	2200      	movs	r2, #0
 8002874:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002876:	4b4a      	ldr	r3, [pc, #296]	; (80029a0 <HAL_ADC_MspInit+0x1dc>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800287c:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <HAL_ADC_MspInit+0x1dc>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_ADC_MspInit+0x1dc>)
 8002884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002888:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800288a:	4b45      	ldr	r3, [pc, #276]	; (80029a0 <HAL_ADC_MspInit+0x1dc>)
 800288c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002890:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002892:	4b43      	ldr	r3, [pc, #268]	; (80029a0 <HAL_ADC_MspInit+0x1dc>)
 8002894:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002898:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800289a:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_ADC_MspInit+0x1dc>)
 800289c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028a2:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <HAL_ADC_MspInit+0x1dc>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028a8:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <HAL_ADC_MspInit+0x1dc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028ae:	483c      	ldr	r0, [pc, #240]	; (80029a0 <HAL_ADC_MspInit+0x1dc>)
 80028b0:	f001 fde6 	bl	8004480 <HAL_DMA_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80028ba:	f7fe fcfb 	bl	80012b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a37      	ldr	r2, [pc, #220]	; (80029a0 <HAL_ADC_MspInit+0x1dc>)
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38
 80028c4:	4a36      	ldr	r2, [pc, #216]	; (80029a0 <HAL_ADC_MspInit+0x1dc>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80028ca:	e05d      	b.n	8002988 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a35      	ldr	r2, [pc, #212]	; (80029a8 <HAL_ADC_MspInit+0x1e4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d158      	bne.n	8002988 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a2d      	ldr	r2, [pc, #180]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 80028e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	4b27      	ldr	r3, [pc, #156]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a26      	ldr	r2, [pc, #152]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <HAL_ADC_MspInit+0x1d0>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin
 800290e:	231f      	movs	r3, #31
 8002910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002912:	2303      	movs	r3, #3
 8002914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291a:	f107 031c 	add.w	r3, r7, #28
 800291e:	4619      	mov	r1, r3
 8002920:	481d      	ldr	r0, [pc, #116]	; (8002998 <HAL_ADC_MspInit+0x1d4>)
 8002922:	f002 f91d 	bl	8004b60 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_ADC_MspInit+0x1e8>)
 8002928:	4a21      	ldr	r2, [pc, #132]	; (80029b0 <HAL_ADC_MspInit+0x1ec>)
 800292a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800292c:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <HAL_ADC_MspInit+0x1e8>)
 800292e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002932:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <HAL_ADC_MspInit+0x1e8>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800293a:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <HAL_ADC_MspInit+0x1e8>)
 800293c:	2200      	movs	r2, #0
 800293e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <HAL_ADC_MspInit+0x1e8>)
 8002942:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002946:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002948:	4b18      	ldr	r3, [pc, #96]	; (80029ac <HAL_ADC_MspInit+0x1e8>)
 800294a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800294e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <HAL_ADC_MspInit+0x1e8>)
 8002952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002956:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <HAL_ADC_MspInit+0x1e8>)
 800295a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800295e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_ADC_MspInit+0x1e8>)
 8002962:	2200      	movs	r2, #0
 8002964:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_ADC_MspInit+0x1e8>)
 8002968:	2200      	movs	r2, #0
 800296a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800296c:	480f      	ldr	r0, [pc, #60]	; (80029ac <HAL_ADC_MspInit+0x1e8>)
 800296e:	f001 fd87 	bl	8004480 <HAL_DMA_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8002978:	f7fe fc9c 	bl	80012b4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <HAL_ADC_MspInit+0x1e8>)
 8002980:	639a      	str	r2, [r3, #56]	; 0x38
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <HAL_ADC_MspInit+0x1e8>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002988:	bf00      	nop
 800298a:	3730      	adds	r7, #48	; 0x30
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40012000 	.word	0x40012000
 8002994:	40023800 	.word	0x40023800
 8002998:	40020000 	.word	0x40020000
 800299c:	40020800 	.word	0x40020800
 80029a0:	20000210 	.word	0x20000210
 80029a4:	40026410 	.word	0x40026410
 80029a8:	40012100 	.word	0x40012100
 80029ac:	20000270 	.word	0x20000270
 80029b0:	40026440 	.word	0x40026440

080029b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <HAL_CAN_MspInit+0x94>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d134      	bne.n	8002a40 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <HAL_CAN_MspInit+0x98>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_CAN_MspInit+0x98>)
 80029e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_CAN_MspInit+0x98>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_CAN_MspInit+0x98>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <HAL_CAN_MspInit+0x98>)
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_CAN_MspInit+0x98>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a20:	2309      	movs	r3, #9
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4809      	ldr	r0, [pc, #36]	; (8002a50 <HAL_CAN_MspInit+0x9c>)
 8002a2c:	f002 f898 	bl	8004b60 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2105      	movs	r1, #5
 8002a34:	2014      	movs	r0, #20
 8002a36:	f001 fcdd 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002a3a:	2014      	movs	r0, #20
 8002a3c:	f001 fcf6 	bl	800442c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a40:	bf00      	nop
 8002a42:	3728      	adds	r7, #40	; 0x28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40006400 	.word	0x40006400
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020400 	.word	0x40020400

08002a54 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0b      	ldr	r2, [pc, #44]	; (8002a90 <HAL_CRC_MspInit+0x3c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d10d      	bne.n	8002a82 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_CRC_MspInit+0x40>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_CRC_MspInit+0x40>)
 8002a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_CRC_MspInit+0x40>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023000 	.word	0x40023000
 8002a94:	40023800 	.word	0x40023800

08002a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a19      	ldr	r2, [pc, #100]	; (8002b1c <HAL_I2C_MspInit+0x84>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d12b      	bne.n	8002b12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <HAL_I2C_MspInit+0x88>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <HAL_I2C_MspInit+0x88>)
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <HAL_I2C_MspInit+0x88>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ad6:	23c0      	movs	r3, #192	; 0xc0
 8002ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ada:	2312      	movs	r3, #18
 8002adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	480c      	ldr	r0, [pc, #48]	; (8002b24 <HAL_I2C_MspInit+0x8c>)
 8002af2:	f002 f835 	bl	8004b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_I2C_MspInit+0x88>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <HAL_I2C_MspInit+0x88>)
 8002b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b04:	6413      	str	r3, [r2, #64]	; 0x40
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_I2C_MspInit+0x88>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b12:	bf00      	nop
 8002b14:	3728      	adds	r7, #40	; 0x28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40005400 	.word	0x40005400
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40020400 	.word	0x40020400

08002b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a9c      	ldr	r2, [pc, #624]	; (8002da8 <HAL_TIM_Base_MspInit+0x280>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d15a      	bne.n	8002bf0 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	4b9b      	ldr	r3, [pc, #620]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	4a9a      	ldr	r2, [pc, #616]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4a:	4b98      	ldr	r3, [pc, #608]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8002b56:	4b96      	ldr	r3, [pc, #600]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002b58:	4a96      	ldr	r2, [pc, #600]	; (8002db4 <HAL_TIM_Base_MspInit+0x28c>)
 8002b5a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8002b5c:	4b94      	ldr	r3, [pc, #592]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002b5e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002b62:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b64:	4b92      	ldr	r3, [pc, #584]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b6a:	4b91      	ldr	r3, [pc, #580]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8002b70:	4b8f      	ldr	r3, [pc, #572]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b76:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b78:	4b8d      	ldr	r3, [pc, #564]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002b7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b7e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b80:	4b8b      	ldr	r3, [pc, #556]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b86:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8002b88:	4b89      	ldr	r3, [pc, #548]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8002b8e:	4b88      	ldr	r3, [pc, #544]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b94:	4b86      	ldr	r3, [pc, #536]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8002b9a:	4885      	ldr	r0, [pc, #532]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002b9c:	f001 fc70 	bl	8004480 <HAL_DMA_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002ba6:	f7fe fb85 	bl	80012b4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a80      	ldr	r2, [pc, #512]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
 8002bb0:	4a7f      	ldr	r2, [pc, #508]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a7d      	ldr	r2, [pc, #500]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38
 8002bbc:	4a7c      	ldr	r2, [pc, #496]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a7a      	ldr	r2, [pc, #488]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc8:	4a79      	ldr	r2, [pc, #484]	; (8002db0 <HAL_TIM_Base_MspInit+0x288>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 15, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	210f      	movs	r1, #15
 8002bd2:	2018      	movs	r0, #24
 8002bd4:	f001 fc0e 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002bd8:	2018      	movs	r0, #24
 8002bda:	f001 fc27 	bl	800442c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2105      	movs	r1, #5
 8002be2:	2019      	movs	r0, #25
 8002be4:	f001 fc06 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002be8:	2019      	movs	r0, #25
 8002bea:	f001 fc1f 	bl	800442c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002bee:	e13c      	b.n	8002e6a <HAL_TIM_Base_MspInit+0x342>
  else if(htim_base->Instance==TIM2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf8:	d14c      	bne.n	8002c94 <HAL_TIM_Base_MspInit+0x16c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	4b6b      	ldr	r3, [pc, #428]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4a6a      	ldr	r2, [pc, #424]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0a:	4b68      	ldr	r3, [pc, #416]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8002c16:	4b68      	ldr	r3, [pc, #416]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c18:	4a68      	ldr	r2, [pc, #416]	; (8002dbc <HAL_TIM_Base_MspInit+0x294>)
 8002c1a:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8002c1c:	4b66      	ldr	r3, [pc, #408]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c1e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002c22:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c24:	4b64      	ldr	r3, [pc, #400]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c2a:	4b63      	ldr	r3, [pc, #396]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002c30:	4b61      	ldr	r3, [pc, #388]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c36:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c38:	4b5f      	ldr	r3, [pc, #380]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c3e:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c40:	4b5d      	ldr	r3, [pc, #372]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c46:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 8002c48:	4b5b      	ldr	r3, [pc, #364]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002c4e:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c54:	4b58      	ldr	r3, [pc, #352]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8002c5a:	4857      	ldr	r0, [pc, #348]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c5c:	f001 fc10 	bl	8004480 <HAL_DMA_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_TIM_Base_MspInit+0x142>
      Error_Handler();
 8002c66:	f7fe fb25 	bl	80012b4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a52      	ldr	r2, [pc, #328]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c6e:	621a      	str	r2, [r3, #32]
 8002c70:	4a51      	ldr	r2, [pc, #324]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4f      	ldr	r2, [pc, #316]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c7c:	4a4e      	ldr	r2, [pc, #312]	; (8002db8 <HAL_TIM_Base_MspInit+0x290>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002c82:	2200      	movs	r2, #0
 8002c84:	2105      	movs	r1, #5
 8002c86:	201c      	movs	r0, #28
 8002c88:	f001 fbb4 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c8c:	201c      	movs	r0, #28
 8002c8e:	f001 fbcd 	bl	800442c <HAL_NVIC_EnableIRQ>
}
 8002c92:	e0ea      	b.n	8002e6a <HAL_TIM_Base_MspInit+0x342>
  else if(htim_base->Instance==TIM3)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a49      	ldr	r2, [pc, #292]	; (8002dc0 <HAL_TIM_Base_MspInit+0x298>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d14c      	bne.n	8002d38 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	4b42      	ldr	r3, [pc, #264]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a41      	ldr	r2, [pc, #260]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
 8002cae:	4b3f      	ldr	r3, [pc, #252]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8002cba:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002cbc:	4a42      	ldr	r2, [pc, #264]	; (8002dc8 <HAL_TIM_Base_MspInit+0x2a0>)
 8002cbe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8002cc0:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002cc2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002cc6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cc8:	4b3e      	ldr	r3, [pc, #248]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cce:	4b3d      	ldr	r3, [pc, #244]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cda:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cdc:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002cde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ce4:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cea:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8002cec:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002cf2:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cf8:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002cfe:	4831      	ldr	r0, [pc, #196]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002d00:	f001 fbbe 	bl	8004480 <HAL_DMA_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_TIM_Base_MspInit+0x1e6>
      Error_Handler();
 8002d0a:	f7fe fad3 	bl	80012b4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a2c      	ldr	r2, [pc, #176]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
 8002d14:	4a2b      	ldr	r2, [pc, #172]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002d1e:	621a      	str	r2, [r3, #32]
 8002d20:	4a28      	ldr	r2, [pc, #160]	; (8002dc4 <HAL_TIM_Base_MspInit+0x29c>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2105      	movs	r1, #5
 8002d2a:	201d      	movs	r0, #29
 8002d2c:	f001 fb62 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d30:	201d      	movs	r0, #29
 8002d32:	f001 fb7b 	bl	800442c <HAL_NVIC_EnableIRQ>
}
 8002d36:	e098      	b.n	8002e6a <HAL_TIM_Base_MspInit+0x342>
  else if(htim_base->Instance==TIM6)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a23      	ldr	r2, [pc, #140]	; (8002dcc <HAL_TIM_Base_MspInit+0x2a4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d116      	bne.n	8002d70 <HAL_TIM_Base_MspInit+0x248>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002d4c:	f043 0310 	orr.w	r3, r3, #16
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2105      	movs	r1, #5
 8002d62:	2036      	movs	r0, #54	; 0x36
 8002d64:	f001 fb46 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d68:	2036      	movs	r0, #54	; 0x36
 8002d6a:	f001 fb5f 	bl	800442c <HAL_NVIC_EnableIRQ>
}
 8002d6e:	e07c      	b.n	8002e6a <HAL_TIM_Base_MspInit+0x342>
  else if(htim_base->Instance==TIM7)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <HAL_TIM_Base_MspInit+0x2a8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d12c      	bne.n	8002dd4 <HAL_TIM_Base_MspInit+0x2ac>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002d84:	f043 0320 	orr.w	r3, r3, #32
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_TIM_Base_MspInit+0x284>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002d96:	2200      	movs	r2, #0
 8002d98:	2105      	movs	r1, #5
 8002d9a:	2037      	movs	r0, #55	; 0x37
 8002d9c:	f001 fb2a 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002da0:	2037      	movs	r0, #55	; 0x37
 8002da2:	f001 fb43 	bl	800442c <HAL_NVIC_EnableIRQ>
}
 8002da6:	e060      	b.n	8002e6a <HAL_TIM_Base_MspInit+0x342>
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40023800 	.word	0x40023800
 8002db0:	20000504 	.word	0x20000504
 8002db4:	40026470 	.word	0x40026470
 8002db8:	20000564 	.word	0x20000564
 8002dbc:	40026028 	.word	0x40026028
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	200005c4 	.word	0x200005c4
 8002dc8:	40026040 	.word	0x40026040
 8002dcc:	40001000 	.word	0x40001000
 8002dd0:	40001400 	.word	0x40001400
  else if(htim_base->Instance==TIM8)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <HAL_TIM_Base_MspInit+0x34c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d145      	bne.n	8002e6a <HAL_TIM_Base_MspInit+0x342>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <HAL_TIM_Base_MspInit+0x350>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <HAL_TIM_Base_MspInit+0x350>)
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	6453      	str	r3, [r2, #68]	; 0x44
 8002dee:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <HAL_TIM_Base_MspInit+0x350>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch2.Instance = DMA2_Stream3;
 8002dfa:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_TIM_Base_MspInit+0x354>)
 8002dfc:	4a20      	ldr	r2, [pc, #128]	; (8002e80 <HAL_TIM_Base_MspInit+0x358>)
 8002dfe:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Channel = DMA_CHANNEL_7;
 8002e00:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <HAL_TIM_Base_MspInit+0x354>)
 8002e02:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002e06:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e08:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <HAL_TIM_Base_MspInit+0x354>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_TIM_Base_MspInit+0x354>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_TIM_Base_MspInit+0x354>)
 8002e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e1a:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_TIM_Base_MspInit+0x354>)
 8002e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e22:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_TIM_Base_MspInit+0x354>)
 8002e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e2a:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_TIM_Base_MspInit+0x354>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_TIM_Base_MspInit+0x354>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_TIM_Base_MspInit+0x354>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8002e3e:	480f      	ldr	r0, [pc, #60]	; (8002e7c <HAL_TIM_Base_MspInit+0x354>)
 8002e40:	f001 fb1e 	bl	8004480 <HAL_DMA_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_TIM_Base_MspInit+0x326>
      Error_Handler();
 8002e4a:	f7fe fa33 	bl	80012b4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <HAL_TIM_Base_MspInit+0x354>)
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
 8002e54:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <HAL_TIM_Base_MspInit+0x354>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2105      	movs	r1, #5
 8002e5e:	202c      	movs	r0, #44	; 0x2c
 8002e60:	f001 fac8 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002e64:	202c      	movs	r0, #44	; 0x2c
 8002e66:	f001 fae1 	bl	800442c <HAL_NVIC_EnableIRQ>
}
 8002e6a:	bf00      	nop
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40010400 	.word	0x40010400
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	20000624 	.word	0x20000624
 8002e80:	40026458 	.word	0x40026458

08002e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08c      	sub	sp, #48	; 0x30
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 031c 	add.w	r3, r7, #28
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a49      	ldr	r2, [pc, #292]	; (8002fc8 <HAL_TIM_MspPostInit+0x144>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d11f      	bne.n	8002ee6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	4b48      	ldr	r3, [pc, #288]	; (8002fcc <HAL_TIM_MspPostInit+0x148>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a47      	ldr	r2, [pc, #284]	; (8002fcc <HAL_TIM_MspPostInit+0x148>)
 8002eb0:	f043 0310 	orr.w	r3, r3, #16
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b45      	ldr	r3, [pc, #276]	; (8002fcc <HAL_TIM_MspPostInit+0x148>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 8002ec2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ec8:	2312      	movs	r3, #18
 8002eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 8002ed8:	f107 031c 	add.w	r3, r7, #28
 8002edc:	4619      	mov	r1, r3
 8002ede:	483c      	ldr	r0, [pc, #240]	; (8002fd0 <HAL_TIM_MspPostInit+0x14c>)
 8002ee0:	f001 fe3e 	bl	8004b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002ee4:	e06b      	b.n	8002fbe <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d11f      	bne.n	8002f30 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <HAL_TIM_MspPostInit+0x148>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	4a34      	ldr	r2, [pc, #208]	; (8002fcc <HAL_TIM_MspPostInit+0x148>)
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	6313      	str	r3, [r2, #48]	; 0x30
 8002f00:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <HAL_TIM_MspPostInit+0x148>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 8002f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f12:	2312      	movs	r3, #18
 8002f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 8002f22:	f107 031c 	add.w	r3, r7, #28
 8002f26:	4619      	mov	r1, r3
 8002f28:	482a      	ldr	r0, [pc, #168]	; (8002fd4 <HAL_TIM_MspPostInit+0x150>)
 8002f2a:	f001 fe19 	bl	8004b60 <HAL_GPIO_Init>
}
 8002f2e:	e046      	b.n	8002fbe <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a28      	ldr	r2, [pc, #160]	; (8002fd8 <HAL_TIM_MspPostInit+0x154>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d11e      	bne.n	8002f78 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	4b23      	ldr	r3, [pc, #140]	; (8002fcc <HAL_TIM_MspPostInit+0x148>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	4a22      	ldr	r2, [pc, #136]	; (8002fcc <HAL_TIM_MspPostInit+0x148>)
 8002f44:	f043 0302 	orr.w	r3, r3, #2
 8002f48:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <HAL_TIM_MspPostInit+0x148>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 8002f56:	2302      	movs	r3, #2
 8002f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f5a:	2312      	movs	r3, #18
 8002f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f62:	2300      	movs	r3, #0
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f66:	2302      	movs	r3, #2
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 8002f6a:	f107 031c 	add.w	r3, r7, #28
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4818      	ldr	r0, [pc, #96]	; (8002fd4 <HAL_TIM_MspPostInit+0x150>)
 8002f72:	f001 fdf5 	bl	8004b60 <HAL_GPIO_Init>
}
 8002f76:	e022      	b.n	8002fbe <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <HAL_TIM_MspPostInit+0x158>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d11d      	bne.n	8002fbe <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_TIM_MspPostInit+0x148>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4a10      	ldr	r2, [pc, #64]	; (8002fcc <HAL_TIM_MspPostInit+0x148>)
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	6313      	str	r3, [r2, #48]	; 0x30
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <HAL_TIM_MspPostInit+0x148>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fa2:	2312      	movs	r3, #18
 8002fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002faa:	2300      	movs	r3, #0
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 8002fb2:	f107 031c 	add.w	r3, r7, #28
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <HAL_TIM_MspPostInit+0x150>)
 8002fba:	f001 fdd1 	bl	8004b60 <HAL_GPIO_Init>
}
 8002fbe:	bf00      	nop
 8002fc0:	3730      	adds	r7, #48	; 0x30
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08c      	sub	sp, #48	; 0x30
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	2018      	movs	r0, #24
 8002ff6:	f001 f9fd 	bl	80043f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002ffa:	2018      	movs	r0, #24
 8002ffc:	f001 fa16 	bl	800442c <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <HAL_InitTick+0xa4>)
 8003006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003008:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <HAL_InitTick+0xa4>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	6453      	str	r3, [r2, #68]	; 0x44
 8003010:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_InitTick+0xa4>)
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800301c:	f107 0210 	add.w	r2, r7, #16
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f003 fcfc 	bl	8006a24 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800302c:	f003 fce6 	bl	80069fc <HAL_RCC_GetPCLK2Freq>
 8003030:	4603      	mov	r3, r0
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	4a13      	ldr	r2, [pc, #76]	; (8003088 <HAL_InitTick+0xa8>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	0c9b      	lsrs	r3, r3, #18
 8003040:	3b01      	subs	r3, #1
 8003042:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_InitTick+0xac>)
 8003046:	4a12      	ldr	r2, [pc, #72]	; (8003090 <HAL_InitTick+0xb0>)
 8003048:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <HAL_InitTick+0xac>)
 800304c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003050:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8003052:	4a0e      	ldr	r2, [pc, #56]	; (800308c <HAL_InitTick+0xac>)
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <HAL_InitTick+0xac>)
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_InitTick+0xac>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8003064:	4809      	ldr	r0, [pc, #36]	; (800308c <HAL_InitTick+0xac>)
 8003066:	f004 fd07 	bl	8007a78 <HAL_TIM_Base_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8003070:	4806      	ldr	r0, [pc, #24]	; (800308c <HAL_InitTick+0xac>)
 8003072:	f004 fd51 	bl	8007b18 <HAL_TIM_Base_Start_IT>
 8003076:	4603      	mov	r3, r0
 8003078:	e000      	b.n	800307c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
}
 800307c:	4618      	mov	r0, r3
 800307e:	3730      	adds	r7, #48	; 0x30
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	431bde83 	.word	0x431bde83
 800308c:	2000099c 	.word	0x2000099c
 8003090:	40014000 	.word	0x40014000

08003094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003098:	e7fe      	b.n	8003098 <NMI_Handler+0x4>

0800309a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800309a:	b480      	push	{r7}
 800309c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800309e:	e7fe      	b.n	800309e <HardFault_Handler+0x4>

080030a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <MemManage_Handler+0x4>

080030a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030aa:	e7fe      	b.n	80030aa <BusFault_Handler+0x4>

080030ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <UsageFault_Handler+0x4>

080030b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT1_Pin);
 80030c4:	2001      	movs	r0, #1
 80030c6:	f001 ff11 	bl	8004eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}

080030ce <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT2_Pin);
 80030d2:	2002      	movs	r0, #2
 80030d4:	f001 ff0a 	bl	8004eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80030d8:	bf00      	nop
 80030da:	bd80      	pop	{r7, pc}

080030dc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT3_Pin);
 80030e0:	2004      	movs	r0, #4
 80030e2:	f001 ff03 	bl	8004eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}

080030ea <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT4_Pin);
 80030ee:	2008      	movs	r0, #8
 80030f0:	f001 fefc 	bl	8004eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT5_Pin);
 80030fc:	2010      	movs	r0, #16
 80030fe:	f001 fef5 	bl	8004eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <DMA1_Stream1_IRQHandler+0x10>)
 800310e:	f001 fabd 	bl	800468c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000564 	.word	0x20000564

0800311c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <DMA1_Stream2_IRQHandler+0x10>)
 8003122:	f001 fab3 	bl	800468c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	200005c4 	.word	0x200005c4

08003130 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <CAN1_RX0_IRQHandler+0x10>)
 8003136:	f000 fe76 	bl	8003e26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200002d0 	.word	0x200002d0

08003144 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003148:	4803      	ldr	r0, [pc, #12]	; (8003158 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800314a:	f005 f8af 	bl	80082ac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800314e:	4803      	ldr	r0, [pc, #12]	; (800315c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003150:	f005 f8ac 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000354 	.word	0x20000354
 800315c:	2000099c 	.word	0x2000099c

08003160 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003166:	f005 f8a1 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000354 	.word	0x20000354

08003174 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <TIM2_IRQHandler+0x10>)
 800317a:	f005 f897 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	2000039c 	.word	0x2000039c

08003188 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <TIM3_IRQHandler+0x10>)
 800318e:	f005 f88d 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	200003e4 	.word	0x200003e4

0800319c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <TIM8_UP_TIM13_IRQHandler+0x10>)
 80031a2:	f005 f883 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	200004bc 	.word	0x200004bc

080031b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <TIM6_DAC_IRQHandler+0x10>)
 80031b6:	f005 f879 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	2000042c 	.word	0x2000042c

080031c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <TIM7_IRQHandler+0x10>)
 80031ca:	f005 f86f 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000474 	.word	0x20000474

080031d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031dc:	4802      	ldr	r0, [pc, #8]	; (80031e8 <DMA2_Stream0_IRQHandler+0x10>)
 80031de:	f001 fa55 	bl	800468c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000210 	.word	0x20000210

080031ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80031f0:	4802      	ldr	r0, [pc, #8]	; (80031fc <DMA2_Stream2_IRQHandler+0x10>)
 80031f2:	f001 fa4b 	bl	800468c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000270 	.word	0x20000270

08003200 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8003204:	4802      	ldr	r0, [pc, #8]	; (8003210 <DMA2_Stream3_IRQHandler+0x10>)
 8003206:	f001 fa41 	bl	800468c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000624 	.word	0x20000624

08003214 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8003218:	4802      	ldr	r0, [pc, #8]	; (8003224 <DMA2_Stream4_IRQHandler+0x10>)
 800321a:	f001 fa37 	bl	800468c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000504 	.word	0x20000504

08003228 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800322c:	4802      	ldr	r0, [pc, #8]	; (8003238 <OTG_FS_IRQHandler+0x10>)
 800322e:	f002 f910 	bl	8005452 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200068dc 	.word	0x200068dc

0800323c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003244:	4a14      	ldr	r2, [pc, #80]	; (8003298 <_sbrk+0x5c>)
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <_sbrk+0x60>)
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <_sbrk+0x64>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <_sbrk+0x64>)
 800325a:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <_sbrk+0x68>)
 800325c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <_sbrk+0x64>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	429a      	cmp	r2, r3
 800326a:	d207      	bcs.n	800327c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800326c:	f00d fb1a 	bl	80108a4 <__errno>
 8003270:	4603      	mov	r3, r0
 8003272:	220c      	movs	r2, #12
 8003274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295
 800327a:	e009      	b.n	8003290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800327c:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <_sbrk+0x64>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <_sbrk+0x64>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	4a05      	ldr	r2, [pc, #20]	; (80032a0 <_sbrk+0x64>)
 800328c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800328e:	68fb      	ldr	r3, [r7, #12]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20020000 	.word	0x20020000
 800329c:	00004000 	.word	0x00004000
 80032a0:	200009e4 	.word	0x200009e4
 80032a4:	20007018 	.word	0x20007018

080032a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032ac:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <SystemInit+0x20>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <SystemInit+0x20>)
 80032b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032bc:	bf00      	nop
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032d0:	480d      	ldr	r0, [pc, #52]	; (8003308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032d2:	490e      	ldr	r1, [pc, #56]	; (800330c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032d4:	4a0e      	ldr	r2, [pc, #56]	; (8003310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d8:	e002      	b.n	80032e0 <LoopCopyDataInit>

080032da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032de:	3304      	adds	r3, #4

080032e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e4:	d3f9      	bcc.n	80032da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e6:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032e8:	4c0b      	ldr	r4, [pc, #44]	; (8003318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032ec:	e001      	b.n	80032f2 <LoopFillZerobss>

080032ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f0:	3204      	adds	r2, #4

080032f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f4:	d3fb      	bcc.n	80032ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032f6:	f7ff ffd7 	bl	80032a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032fa:	f00d fad9 	bl	80108b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032fe:	f7fd f909 	bl	8000514 <main>
  bx  lr    
 8003302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800330c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8003310:	08010d4c 	.word	0x08010d4c
  ldr r2, =_sbss
 8003314:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8003318:	20007018 	.word	0x20007018

0800331c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800331c:	e7fe      	b.n	800331c <ADC_IRQHandler>
	...

08003320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <HAL_Init+0x40>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <HAL_Init+0x40>)
 800332a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800332e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_Init+0x40>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <HAL_Init+0x40>)
 8003336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_Init+0x40>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a07      	ldr	r2, [pc, #28]	; (8003360 <HAL_Init+0x40>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003348:	2003      	movs	r0, #3
 800334a:	f001 f848 	bl	80043de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800334e:	200f      	movs	r0, #15
 8003350:	f7ff fe46 	bl	8002fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003354:	f7ff fa0a 	bl	800276c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40023c00 	.word	0x40023c00

08003364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_IncTick+0x20>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_IncTick+0x24>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4413      	add	r3, r2
 8003374:	4a04      	ldr	r2, [pc, #16]	; (8003388 <HAL_IncTick+0x24>)
 8003376:	6013      	str	r3, [r2, #0]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000008 	.word	0x20000008
 8003388:	200009e8 	.word	0x200009e8

0800338c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return uwTick;
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <HAL_GetTick+0x14>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	200009e8 	.word	0x200009e8

080033a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ac:	f7ff ffee 	bl	800338c <HAL_GetTick>
 80033b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d005      	beq.n	80033ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_Delay+0x44>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033ca:	bf00      	nop
 80033cc:	f7ff ffde 	bl	800338c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d8f7      	bhi.n	80033cc <HAL_Delay+0x28>
  {
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000008 	.word	0x20000008

080033ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e033      	b.n	800346a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff f9da 	bl	80027c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	d118      	bne.n	800345c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003432:	f023 0302 	bic.w	r3, r3, #2
 8003436:	f043 0202 	orr.w	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fa78 	bl	8003934 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f023 0303 	bic.w	r3, r3, #3
 8003452:	f043 0201 	orr.w	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
 800345a:	e001      	b.n	8003460 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_ADC_Start_DMA+0x1e>
 800348e:	2302      	movs	r3, #2
 8003490:	e0e9      	b.n	8003666 <HAL_ADC_Start_DMA+0x1f2>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d018      	beq.n	80034da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034b8:	4b6d      	ldr	r3, [pc, #436]	; (8003670 <HAL_ADC_Start_DMA+0x1fc>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6d      	ldr	r2, [pc, #436]	; (8003674 <HAL_ADC_Start_DMA+0x200>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	0c9a      	lsrs	r2, r3, #18
 80034c4:	4613      	mov	r3, r2
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4413      	add	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034cc:	e002      	b.n	80034d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f9      	bne.n	80034ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e8:	d107      	bne.n	80034fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	f040 80a1 	bne.w	800364c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003534:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003548:	d106      	bne.n	8003558 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	f023 0206 	bic.w	r2, r3, #6
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
 8003556:	e002      	b.n	800355e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003566:	4b44      	ldr	r3, [pc, #272]	; (8003678 <HAL_ADC_Start_DMA+0x204>)
 8003568:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	4a43      	ldr	r2, [pc, #268]	; (800367c <HAL_ADC_Start_DMA+0x208>)
 8003570:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	4a42      	ldr	r2, [pc, #264]	; (8003680 <HAL_ADC_Start_DMA+0x20c>)
 8003578:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	4a41      	ldr	r2, [pc, #260]	; (8003684 <HAL_ADC_Start_DMA+0x210>)
 8003580:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800358a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800359a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	334c      	adds	r3, #76	; 0x4c
 80035b6:	4619      	mov	r1, r3
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f001 f80e 	bl	80045dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d12a      	bne.n	8003622 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a2d      	ldr	r2, [pc, #180]	; (8003688 <HAL_ADC_Start_DMA+0x214>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d015      	beq.n	8003602 <HAL_ADC_Start_DMA+0x18e>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a2c      	ldr	r2, [pc, #176]	; (800368c <HAL_ADC_Start_DMA+0x218>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d105      	bne.n	80035ec <HAL_ADC_Start_DMA+0x178>
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_ADC_Start_DMA+0x204>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a27      	ldr	r2, [pc, #156]	; (8003690 <HAL_ADC_Start_DMA+0x21c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d136      	bne.n	8003664 <HAL_ADC_Start_DMA+0x1f0>
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <HAL_ADC_Start_DMA+0x204>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d130      	bne.n	8003664 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d129      	bne.n	8003664 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	e020      	b.n	8003664 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a18      	ldr	r2, [pc, #96]	; (8003688 <HAL_ADC_Start_DMA+0x214>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d11b      	bne.n	8003664 <HAL_ADC_Start_DMA+0x1f0>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d114      	bne.n	8003664 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	e00b      	b.n	8003664 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f043 0210 	orr.w	r2, r3, #16
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	f043 0201 	orr.w	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000000 	.word	0x20000000
 8003674:	431bde83 	.word	0x431bde83
 8003678:	40012300 	.word	0x40012300
 800367c:	08003b2d 	.word	0x08003b2d
 8003680:	08003be7 	.word	0x08003be7
 8003684:	08003c03 	.word	0x08003c03
 8003688:	40012000 	.word	0x40012000
 800368c:	40012100 	.word	0x40012100
 8003690:	40012200 	.word	0x40012200

08003694 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x1c>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e113      	b.n	8003914 <HAL_ADC_ConfigChannel+0x244>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b09      	cmp	r3, #9
 80036fa:	d925      	bls.n	8003748 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68d9      	ldr	r1, [r3, #12]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	3b1e      	subs	r3, #30
 8003712:	2207      	movs	r2, #7
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43da      	mvns	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	400a      	ands	r2, r1
 8003720:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68d9      	ldr	r1, [r3, #12]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	b29b      	uxth	r3, r3
 8003732:	4618      	mov	r0, r3
 8003734:	4603      	mov	r3, r0
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4403      	add	r3, r0
 800373a:	3b1e      	subs	r3, #30
 800373c:	409a      	lsls	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	e022      	b.n	800378e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6919      	ldr	r1, [r3, #16]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	2207      	movs	r2, #7
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	400a      	ands	r2, r1
 800376a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6919      	ldr	r1, [r3, #16]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	4618      	mov	r0, r3
 800377e:	4603      	mov	r3, r0
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4403      	add	r3, r0
 8003784:	409a      	lsls	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b06      	cmp	r3, #6
 8003794:	d824      	bhi.n	80037e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	3b05      	subs	r3, #5
 80037a8:	221f      	movs	r2, #31
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43da      	mvns	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	400a      	ands	r2, r1
 80037b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	4618      	mov	r0, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	3b05      	subs	r3, #5
 80037d2:	fa00 f203 	lsl.w	r2, r0, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	635a      	str	r2, [r3, #52]	; 0x34
 80037de:	e04c      	b.n	800387a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	d824      	bhi.n	8003832 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	3b23      	subs	r3, #35	; 0x23
 80037fa:	221f      	movs	r2, #31
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43da      	mvns	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	400a      	ands	r2, r1
 8003808:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	4618      	mov	r0, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	3b23      	subs	r3, #35	; 0x23
 8003824:	fa00 f203 	lsl.w	r2, r0, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
 8003830:	e023      	b.n	800387a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	3b41      	subs	r3, #65	; 0x41
 8003844:	221f      	movs	r2, #31
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	400a      	ands	r2, r1
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	b29b      	uxth	r3, r3
 8003860:	4618      	mov	r0, r3
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	3b41      	subs	r3, #65	; 0x41
 800386e:	fa00 f203 	lsl.w	r2, r0, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800387a:	4b29      	ldr	r3, [pc, #164]	; (8003920 <HAL_ADC_ConfigChannel+0x250>)
 800387c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a28      	ldr	r2, [pc, #160]	; (8003924 <HAL_ADC_ConfigChannel+0x254>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d10f      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x1d8>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b12      	cmp	r3, #18
 800388e:	d10b      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <HAL_ADC_ConfigChannel+0x254>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d12b      	bne.n	800390a <HAL_ADC_ConfigChannel+0x23a>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1c      	ldr	r2, [pc, #112]	; (8003928 <HAL_ADC_ConfigChannel+0x258>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <HAL_ADC_ConfigChannel+0x1f4>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b11      	cmp	r3, #17
 80038c2:	d122      	bne.n	800390a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a11      	ldr	r2, [pc, #68]	; (8003928 <HAL_ADC_ConfigChannel+0x258>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d111      	bne.n	800390a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <HAL_ADC_ConfigChannel+0x25c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a11      	ldr	r2, [pc, #68]	; (8003930 <HAL_ADC_ConfigChannel+0x260>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	0c9a      	lsrs	r2, r3, #18
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038fc:	e002      	b.n	8003904 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	3b01      	subs	r3, #1
 8003902:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f9      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40012300 	.word	0x40012300
 8003924:	40012000 	.word	0x40012000
 8003928:	10000012 	.word	0x10000012
 800392c:	20000000 	.word	0x20000000
 8003930:	431bde83 	.word	0x431bde83

08003934 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800393c:	4b79      	ldr	r3, [pc, #484]	; (8003b24 <ADC_Init+0x1f0>)
 800393e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	431a      	orrs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	021a      	lsls	r2, r3, #8
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800398c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6899      	ldr	r1, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	4a58      	ldr	r2, [pc, #352]	; (8003b28 <ADC_Init+0x1f4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d022      	beq.n	8003a12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6899      	ldr	r1, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6899      	ldr	r1, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	e00f      	b.n	8003a32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0202 	bic.w	r2, r2, #2
 8003a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6899      	ldr	r1, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	7e1b      	ldrb	r3, [r3, #24]
 8003a4c:	005a      	lsls	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01b      	beq.n	8003a98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	035a      	lsls	r2, r3, #13
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	e007      	b.n	8003aa8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	051a      	lsls	r2, r3, #20
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6899      	ldr	r1, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003aea:	025a      	lsls	r2, r3, #9
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6899      	ldr	r1, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	029a      	lsls	r2, r3, #10
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	609a      	str	r2, [r3, #8]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	40012300 	.word	0x40012300
 8003b28:	0f000001 	.word	0x0f000001

08003b2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d13c      	bne.n	8003bc0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d12b      	bne.n	8003bb8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d127      	bne.n	8003bb8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d006      	beq.n	8003b84 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d119      	bne.n	8003bb8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0220 	bic.w	r2, r2, #32
 8003b92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d105      	bne.n	8003bb8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f043 0201 	orr.w	r2, r3, #1
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f7ff fd6b 	bl	8003694 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bbe:	e00e      	b.n	8003bde <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff fd75 	bl	80036bc <HAL_ADC_ErrorCallback>
}
 8003bd2:	e004      	b.n	8003bde <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
}
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f7ff fd57 	bl	80036a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2240      	movs	r2, #64	; 0x40
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	f043 0204 	orr.w	r2, r3, #4
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7ff fd4a 	bl	80036bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0ed      	b.n	8003e1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d102      	bne.n	8003c54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fe feb0 	bl	80029b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c64:	f7ff fb92 	bl	800338c <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c6a:	e012      	b.n	8003c92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c6c:	f7ff fb8e 	bl	800338c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b0a      	cmp	r3, #10
 8003c78:	d90b      	bls.n	8003c92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2205      	movs	r2, #5
 8003c8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0c5      	b.n	8003e1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0e5      	beq.n	8003c6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0202 	bic.w	r2, r2, #2
 8003cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cb0:	f7ff fb6c 	bl	800338c <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cb6:	e012      	b.n	8003cde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003cb8:	f7ff fb68 	bl	800338c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b0a      	cmp	r3, #10
 8003cc4:	d90b      	bls.n	8003cde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2205      	movs	r2, #5
 8003cd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e09f      	b.n	8003e1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e5      	bne.n	8003cb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7e1b      	ldrb	r3, [r3, #24]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d108      	bne.n	8003d06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e007      	b.n	8003d16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7e5b      	ldrb	r3, [r3, #25]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d108      	bne.n	8003d30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e007      	b.n	8003d40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	7e9b      	ldrb	r3, [r3, #26]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d108      	bne.n	8003d5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0220 	orr.w	r2, r2, #32
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e007      	b.n	8003d6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0220 	bic.w	r2, r2, #32
 8003d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	7edb      	ldrb	r3, [r3, #27]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d108      	bne.n	8003d84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0210 	bic.w	r2, r2, #16
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e007      	b.n	8003d94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0210 	orr.w	r2, r2, #16
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	7f1b      	ldrb	r3, [r3, #28]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d108      	bne.n	8003dae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0208 	orr.w	r2, r2, #8
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e007      	b.n	8003dbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0208 	bic.w	r2, r2, #8
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	7f5b      	ldrb	r3, [r3, #29]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d108      	bne.n	8003dd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0204 	orr.w	r2, r2, #4
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e007      	b.n	8003de8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0204 	bic.w	r2, r2, #4
 8003de6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	ea42 0103 	orr.w	r1, r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	1e5a      	subs	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b08a      	sub	sp, #40	; 0x28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d07c      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d023      	beq.n	8003ebe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f983 	bl	8004194 <HAL_CAN_TxMailbox0CompleteCallback>
 8003e8e:	e016      	b.n	8003ebe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e00c      	b.n	8003ebe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb6:	e002      	b.n	8003ebe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f989 	bl	80041d0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d024      	beq.n	8003f12 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ed0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f963 	bl	80041a8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003ee2:	e016      	b.n	8003f12 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef6:	e00c      	b.n	8003f12 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d004      	beq.n	8003f0c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0a:	e002      	b.n	8003f12 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f969 	bl	80041e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d024      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f943 	bl	80041bc <HAL_CAN_TxMailbox2CompleteCallback>
 8003f36:	e016      	b.n	8003f66 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d004      	beq.n	8003f4c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4a:	e00c      	b.n	8003f66 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d004      	beq.n	8003f60 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5e:	e002      	b.n	8003f66 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f949 	bl	80041f8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00c      	beq.n	8003f8a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2210      	movs	r2, #16
 8003f88:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00b      	beq.n	8003fac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d006      	beq.n	8003fac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2208      	movs	r2, #8
 8003fa4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f930 	bl	800420c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7fe fbbc 	bl	8002742 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00c      	beq.n	8003fee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2210      	movs	r2, #16
 8003fec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00b      	beq.n	8004010 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d006      	beq.n	8004010 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2208      	movs	r2, #8
 8004008:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f912 	bl	8004234 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f8f9 	bl	8004220 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	d006      	beq.n	8004050 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2210      	movs	r2, #16
 8004048:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8fc 	bl	8004248 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00b      	beq.n	8004072 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d006      	beq.n	8004072 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2208      	movs	r2, #8
 800406a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f8f5 	bl	800425c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d07b      	beq.n	8004174 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d072      	beq.n	800416c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	f043 0302 	orr.w	r3, r3, #2
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	f043 0304 	orr.w	r3, r3, #4
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d043      	beq.n	800416c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d03e      	beq.n	800416c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040f4:	2b60      	cmp	r3, #96	; 0x60
 80040f6:	d02b      	beq.n	8004150 <HAL_CAN_IRQHandler+0x32a>
 80040f8:	2b60      	cmp	r3, #96	; 0x60
 80040fa:	d82e      	bhi.n	800415a <HAL_CAN_IRQHandler+0x334>
 80040fc:	2b50      	cmp	r3, #80	; 0x50
 80040fe:	d022      	beq.n	8004146 <HAL_CAN_IRQHandler+0x320>
 8004100:	2b50      	cmp	r3, #80	; 0x50
 8004102:	d82a      	bhi.n	800415a <HAL_CAN_IRQHandler+0x334>
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	d019      	beq.n	800413c <HAL_CAN_IRQHandler+0x316>
 8004108:	2b40      	cmp	r3, #64	; 0x40
 800410a:	d826      	bhi.n	800415a <HAL_CAN_IRQHandler+0x334>
 800410c:	2b30      	cmp	r3, #48	; 0x30
 800410e:	d010      	beq.n	8004132 <HAL_CAN_IRQHandler+0x30c>
 8004110:	2b30      	cmp	r3, #48	; 0x30
 8004112:	d822      	bhi.n	800415a <HAL_CAN_IRQHandler+0x334>
 8004114:	2b10      	cmp	r3, #16
 8004116:	d002      	beq.n	800411e <HAL_CAN_IRQHandler+0x2f8>
 8004118:	2b20      	cmp	r3, #32
 800411a:	d005      	beq.n	8004128 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800411c:	e01d      	b.n	800415a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	f043 0308 	orr.w	r3, r3, #8
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004126:	e019      	b.n	800415c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	f043 0310 	orr.w	r3, r3, #16
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004130:	e014      	b.n	800415c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	f043 0320 	orr.w	r3, r3, #32
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800413a:	e00f      	b.n	800415c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004144:	e00a      	b.n	800415c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800414e:	e005      	b.n	800415c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004158:	e000      	b.n	800415c <HAL_CAN_IRQHandler+0x336>
            break;
 800415a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800416a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2204      	movs	r2, #4
 8004172:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f872 	bl	8004270 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800418c:	bf00      	nop
 800418e:	3728      	adds	r7, #40	; 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042a0:	4013      	ands	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042b6:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <__NVIC_SetPriorityGrouping+0x44>)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	60d3      	str	r3, [r2, #12]
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <__NVIC_GetPriorityGrouping+0x18>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	0a1b      	lsrs	r3, r3, #8
 80042d6:	f003 0307 	and.w	r3, r3, #7
}
 80042da:	4618      	mov	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	e000ed00 	.word	0xe000ed00

080042e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	db0b      	blt.n	8004312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	f003 021f 	and.w	r2, r3, #31
 8004300:	4907      	ldr	r1, [pc, #28]	; (8004320 <__NVIC_EnableIRQ+0x38>)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	2001      	movs	r0, #1
 800430a:	fa00 f202 	lsl.w	r2, r0, r2
 800430e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	e000e100 	.word	0xe000e100

08004324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	6039      	str	r1, [r7, #0]
 800432e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004334:	2b00      	cmp	r3, #0
 8004336:	db0a      	blt.n	800434e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	490c      	ldr	r1, [pc, #48]	; (8004370 <__NVIC_SetPriority+0x4c>)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	0112      	lsls	r2, r2, #4
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	440b      	add	r3, r1
 8004348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800434c:	e00a      	b.n	8004364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4908      	ldr	r1, [pc, #32]	; (8004374 <__NVIC_SetPriority+0x50>)
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	3b04      	subs	r3, #4
 800435c:	0112      	lsls	r2, r2, #4
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	440b      	add	r3, r1
 8004362:	761a      	strb	r2, [r3, #24]
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	e000e100 	.word	0xe000e100
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	; 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f1c3 0307 	rsb	r3, r3, #7
 8004392:	2b04      	cmp	r3, #4
 8004394:	bf28      	it	cs
 8004396:	2304      	movcs	r3, #4
 8004398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3304      	adds	r3, #4
 800439e:	2b06      	cmp	r3, #6
 80043a0:	d902      	bls.n	80043a8 <NVIC_EncodePriority+0x30>
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3b03      	subs	r3, #3
 80043a6:	e000      	b.n	80043aa <NVIC_EncodePriority+0x32>
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ac:	f04f 32ff 	mov.w	r2, #4294967295
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43da      	mvns	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	401a      	ands	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043c0:	f04f 31ff 	mov.w	r1, #4294967295
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	43d9      	mvns	r1, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d0:	4313      	orrs	r3, r2
         );
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3724      	adds	r7, #36	; 0x24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff ff4c 	bl	8004284 <__NVIC_SetPriorityGrouping>
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004406:	f7ff ff61 	bl	80042cc <__NVIC_GetPriorityGrouping>
 800440a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	6978      	ldr	r0, [r7, #20]
 8004412:	f7ff ffb1 	bl	8004378 <NVIC_EncodePriority>
 8004416:	4602      	mov	r2, r0
 8004418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff ff80 	bl	8004324 <__NVIC_SetPriority>
}
 8004424:	bf00      	nop
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff ff54 	bl	80042e8 <__NVIC_EnableIRQ>
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e00e      	b.n	8004478 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	795b      	ldrb	r3, [r3, #5]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fe faf2 	bl	8002a54 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800448c:	f7fe ff7e 	bl	800338c <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e099      	b.n	80045d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0201 	bic.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044bc:	e00f      	b.n	80044de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044be:	f7fe ff65 	bl	800338c <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b05      	cmp	r3, #5
 80044ca:	d908      	bls.n	80044de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2203      	movs	r2, #3
 80044d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e078      	b.n	80045d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e8      	bne.n	80044be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4b38      	ldr	r3, [pc, #224]	; (80045d8 <HAL_DMA_Init+0x158>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800450a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004516:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004522:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	2b04      	cmp	r3, #4
 8004536:	d107      	bne.n	8004548 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	4313      	orrs	r3, r2
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0307 	bic.w	r3, r3, #7
 800455e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2b04      	cmp	r3, #4
 8004570:	d117      	bne.n	80045a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00e      	beq.n	80045a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fa6f 	bl	8004a68 <DMA_CheckFifoParam>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2240      	movs	r2, #64	; 0x40
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800459e:	2301      	movs	r3, #1
 80045a0:	e016      	b.n	80045d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fa26 	bl	80049fc <DMA_CalcBaseAndBitshift>
 80045b0:	4603      	mov	r3, r0
 80045b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b8:	223f      	movs	r2, #63	; 0x3f
 80045ba:	409a      	lsls	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	f010803f 	.word	0xf010803f

080045dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_DMA_Start_IT+0x26>
 80045fe:	2302      	movs	r3, #2
 8004600:	e040      	b.n	8004684 <HAL_DMA_Start_IT+0xa8>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d12f      	bne.n	8004676 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2202      	movs	r2, #2
 800461a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f9b8 	bl	80049a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	223f      	movs	r2, #63	; 0x3f
 8004636:	409a      	lsls	r2, r3
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0216 	orr.w	r2, r2, #22
 800464a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d007      	beq.n	8004664 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0208 	orr.w	r2, r2, #8
 8004662:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	e005      	b.n	8004682 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800467e:	2302      	movs	r3, #2
 8004680:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004682:	7dfb      	ldrb	r3, [r7, #23]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004698:	4b8e      	ldr	r3, [pc, #568]	; (80048d4 <HAL_DMA_IRQHandler+0x248>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a8e      	ldr	r2, [pc, #568]	; (80048d8 <HAL_DMA_IRQHandler+0x24c>)
 800469e:	fba2 2303 	umull	r2, r3, r2, r3
 80046a2:	0a9b      	lsrs	r3, r3, #10
 80046a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b6:	2208      	movs	r2, #8
 80046b8:	409a      	lsls	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4013      	ands	r3, r2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01a      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d013      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0204 	bic.w	r2, r2, #4
 80046de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e4:	2208      	movs	r2, #8
 80046e6:	409a      	lsls	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f0:	f043 0201 	orr.w	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fc:	2201      	movs	r2, #1
 80046fe:	409a      	lsls	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d012      	beq.n	800472e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471a:	2201      	movs	r2, #1
 800471c:	409a      	lsls	r2, r3
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	f043 0202 	orr.w	r2, r3, #2
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004732:	2204      	movs	r2, #4
 8004734:	409a      	lsls	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d012      	beq.n	8004764 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004750:	2204      	movs	r2, #4
 8004752:	409a      	lsls	r2, r3
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	f043 0204 	orr.w	r2, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004768:	2210      	movs	r2, #16
 800476a:	409a      	lsls	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4013      	ands	r3, r2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d043      	beq.n	80047fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d03c      	beq.n	80047fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004786:	2210      	movs	r2, #16
 8004788:	409a      	lsls	r2, r3
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d018      	beq.n	80047ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d108      	bne.n	80047bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d024      	beq.n	80047fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	4798      	blx	r3
 80047ba:	e01f      	b.n	80047fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01b      	beq.n	80047fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	4798      	blx	r3
 80047cc:	e016      	b.n	80047fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d107      	bne.n	80047ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0208 	bic.w	r2, r2, #8
 80047ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004800:	2220      	movs	r2, #32
 8004802:	409a      	lsls	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4013      	ands	r3, r2
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 808f 	beq.w	800492c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8087 	beq.w	800492c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	2220      	movs	r2, #32
 8004824:	409a      	lsls	r2, r3
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b05      	cmp	r3, #5
 8004834:	d136      	bne.n	80048a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0216 	bic.w	r2, r2, #22
 8004844:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695a      	ldr	r2, [r3, #20]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004854:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <HAL_DMA_IRQHandler+0x1da>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0208 	bic.w	r2, r2, #8
 8004874:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487a:	223f      	movs	r2, #63	; 0x3f
 800487c:	409a      	lsls	r2, r3
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004896:	2b00      	cmp	r3, #0
 8004898:	d07e      	beq.n	8004998 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
        }
        return;
 80048a2:	e079      	b.n	8004998 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d01d      	beq.n	80048ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10d      	bne.n	80048dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d031      	beq.n	800492c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	4798      	blx	r3
 80048d0:	e02c      	b.n	800492c <HAL_DMA_IRQHandler+0x2a0>
 80048d2:	bf00      	nop
 80048d4:	20000000 	.word	0x20000000
 80048d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d023      	beq.n	800492c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4798      	blx	r3
 80048ec:	e01e      	b.n	800492c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10f      	bne.n	800491c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0210 	bic.w	r2, r2, #16
 800490a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	2b00      	cmp	r3, #0
 8004932:	d032      	beq.n	800499a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d022      	beq.n	8004986 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2205      	movs	r2, #5
 8004944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0201 	bic.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	3301      	adds	r3, #1
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	429a      	cmp	r2, r3
 8004962:	d307      	bcc.n	8004974 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f2      	bne.n	8004958 <HAL_DMA_IRQHandler+0x2cc>
 8004972:	e000      	b.n	8004976 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004974:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
 8004996:	e000      	b.n	800499a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004998:	bf00      	nop
    }
  }
}
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d108      	bne.n	80049e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049de:	e007      	b.n	80049f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	60da      	str	r2, [r3, #12]
}
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	3b10      	subs	r3, #16
 8004a0c:	4a14      	ldr	r2, [pc, #80]	; (8004a60 <DMA_CalcBaseAndBitshift+0x64>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	091b      	lsrs	r3, r3, #4
 8004a14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a16:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <DMA_CalcBaseAndBitshift+0x68>)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d909      	bls.n	8004a3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	1d1a      	adds	r2, r3, #4
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	659a      	str	r2, [r3, #88]	; 0x58
 8004a3c:	e007      	b.n	8004a4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a46:	f023 0303 	bic.w	r3, r3, #3
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	aaaaaaab 	.word	0xaaaaaaab
 8004a64:	08010cd4 	.word	0x08010cd4

08004a68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d11f      	bne.n	8004ac2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d856      	bhi.n	8004b36 <DMA_CheckFifoParam+0xce>
 8004a88:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <DMA_CheckFifoParam+0x28>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004aa1 	.word	0x08004aa1
 8004a94:	08004ab3 	.word	0x08004ab3
 8004a98:	08004aa1 	.word	0x08004aa1
 8004a9c:	08004b37 	.word	0x08004b37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d046      	beq.n	8004b3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab0:	e043      	b.n	8004b3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aba:	d140      	bne.n	8004b3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac0:	e03d      	b.n	8004b3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aca:	d121      	bne.n	8004b10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d837      	bhi.n	8004b42 <DMA_CheckFifoParam+0xda>
 8004ad2:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <DMA_CheckFifoParam+0x70>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004aef 	.word	0x08004aef
 8004ae0:	08004ae9 	.word	0x08004ae9
 8004ae4:	08004b01 	.word	0x08004b01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
      break;
 8004aec:	e030      	b.n	8004b50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d025      	beq.n	8004b46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004afe:	e022      	b.n	8004b46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b08:	d11f      	bne.n	8004b4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b0e:	e01c      	b.n	8004b4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d903      	bls.n	8004b1e <DMA_CheckFifoParam+0xb6>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d003      	beq.n	8004b24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b1c:	e018      	b.n	8004b50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
      break;
 8004b22:	e015      	b.n	8004b50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00e      	beq.n	8004b4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	73fb      	strb	r3, [r7, #15]
      break;
 8004b34:	e00b      	b.n	8004b4e <DMA_CheckFifoParam+0xe6>
      break;
 8004b36:	bf00      	nop
 8004b38:	e00a      	b.n	8004b50 <DMA_CheckFifoParam+0xe8>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e008      	b.n	8004b50 <DMA_CheckFifoParam+0xe8>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e006      	b.n	8004b50 <DMA_CheckFifoParam+0xe8>
      break;
 8004b42:	bf00      	nop
 8004b44:	e004      	b.n	8004b50 <DMA_CheckFifoParam+0xe8>
      break;
 8004b46:	bf00      	nop
 8004b48:	e002      	b.n	8004b50 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b4a:	bf00      	nop
 8004b4c:	e000      	b.n	8004b50 <DMA_CheckFifoParam+0xe8>
      break;
 8004b4e:	bf00      	nop
    }
  } 
  
  return status; 
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop

08004b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	; 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	e165      	b.n	8004e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	f040 8154 	bne.w	8004e42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d005      	beq.n	8004bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d130      	bne.n	8004c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004be8:	2201      	movs	r2, #1
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	091b      	lsrs	r3, r3, #4
 8004bfe:	f003 0201 	and.w	r2, r3, #1
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d017      	beq.n	8004c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	2203      	movs	r2, #3
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	43db      	mvns	r3, r3
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	4013      	ands	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d123      	bne.n	8004ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	08da      	lsrs	r2, r3, #3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3208      	adds	r2, #8
 8004c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	220f      	movs	r2, #15
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	08da      	lsrs	r2, r3, #3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3208      	adds	r2, #8
 8004c9e:	69b9      	ldr	r1, [r7, #24]
 8004ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	2203      	movs	r2, #3
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f003 0203 	and.w	r2, r3, #3
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80ae 	beq.w	8004e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	4b5d      	ldr	r3, [pc, #372]	; (8004e60 <HAL_GPIO_Init+0x300>)
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	4a5c      	ldr	r2, [pc, #368]	; (8004e60 <HAL_GPIO_Init+0x300>)
 8004cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8004cf6:	4b5a      	ldr	r3, [pc, #360]	; (8004e60 <HAL_GPIO_Init+0x300>)
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d02:	4a58      	ldr	r2, [pc, #352]	; (8004e64 <HAL_GPIO_Init+0x304>)
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	089b      	lsrs	r3, r3, #2
 8004d08:	3302      	adds	r3, #2
 8004d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	220f      	movs	r2, #15
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4013      	ands	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a4f      	ldr	r2, [pc, #316]	; (8004e68 <HAL_GPIO_Init+0x308>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d025      	beq.n	8004d7a <HAL_GPIO_Init+0x21a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a4e      	ldr	r2, [pc, #312]	; (8004e6c <HAL_GPIO_Init+0x30c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d01f      	beq.n	8004d76 <HAL_GPIO_Init+0x216>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a4d      	ldr	r2, [pc, #308]	; (8004e70 <HAL_GPIO_Init+0x310>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d019      	beq.n	8004d72 <HAL_GPIO_Init+0x212>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a4c      	ldr	r2, [pc, #304]	; (8004e74 <HAL_GPIO_Init+0x314>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <HAL_GPIO_Init+0x20e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a4b      	ldr	r2, [pc, #300]	; (8004e78 <HAL_GPIO_Init+0x318>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00d      	beq.n	8004d6a <HAL_GPIO_Init+0x20a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a4a      	ldr	r2, [pc, #296]	; (8004e7c <HAL_GPIO_Init+0x31c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d007      	beq.n	8004d66 <HAL_GPIO_Init+0x206>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a49      	ldr	r2, [pc, #292]	; (8004e80 <HAL_GPIO_Init+0x320>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d101      	bne.n	8004d62 <HAL_GPIO_Init+0x202>
 8004d5e:	2306      	movs	r3, #6
 8004d60:	e00c      	b.n	8004d7c <HAL_GPIO_Init+0x21c>
 8004d62:	2307      	movs	r3, #7
 8004d64:	e00a      	b.n	8004d7c <HAL_GPIO_Init+0x21c>
 8004d66:	2305      	movs	r3, #5
 8004d68:	e008      	b.n	8004d7c <HAL_GPIO_Init+0x21c>
 8004d6a:	2304      	movs	r3, #4
 8004d6c:	e006      	b.n	8004d7c <HAL_GPIO_Init+0x21c>
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e004      	b.n	8004d7c <HAL_GPIO_Init+0x21c>
 8004d72:	2302      	movs	r3, #2
 8004d74:	e002      	b.n	8004d7c <HAL_GPIO_Init+0x21c>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <HAL_GPIO_Init+0x21c>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	f002 0203 	and.w	r2, r2, #3
 8004d82:	0092      	lsls	r2, r2, #2
 8004d84:	4093      	lsls	r3, r2
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d8c:	4935      	ldr	r1, [pc, #212]	; (8004e64 <HAL_GPIO_Init+0x304>)
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	089b      	lsrs	r3, r3, #2
 8004d92:	3302      	adds	r3, #2
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d9a:	4b3a      	ldr	r3, [pc, #232]	; (8004e84 <HAL_GPIO_Init+0x324>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	43db      	mvns	r3, r3
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	4013      	ands	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004dbe:	4a31      	ldr	r2, [pc, #196]	; (8004e84 <HAL_GPIO_Init+0x324>)
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004dc4:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <HAL_GPIO_Init+0x324>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004de8:	4a26      	ldr	r2, [pc, #152]	; (8004e84 <HAL_GPIO_Init+0x324>)
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004dee:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <HAL_GPIO_Init+0x324>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	43db      	mvns	r3, r3
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e12:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <HAL_GPIO_Init+0x324>)
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e18:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <HAL_GPIO_Init+0x324>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e3c:	4a11      	ldr	r2, [pc, #68]	; (8004e84 <HAL_GPIO_Init+0x324>)
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	3301      	adds	r3, #1
 8004e46:	61fb      	str	r3, [r7, #28]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	2b0f      	cmp	r3, #15
 8004e4c:	f67f ae96 	bls.w	8004b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	3724      	adds	r7, #36	; 0x24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800
 8004e64:	40013800 	.word	0x40013800
 8004e68:	40020000 	.word	0x40020000
 8004e6c:	40020400 	.word	0x40020400
 8004e70:	40020800 	.word	0x40020800
 8004e74:	40020c00 	.word	0x40020c00
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40021400 	.word	0x40021400
 8004e80:	40021800 	.word	0x40021800
 8004e84:	40013c00 	.word	0x40013c00

08004e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	887b      	ldrh	r3, [r7, #2]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
 8004ea4:	e001      	b.n	8004eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ec8:	787b      	ldrb	r3, [r7, #1]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ece:	887a      	ldrh	r2, [r7, #2]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ed4:	e003      	b.n	8004ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ed6:	887b      	ldrh	r3, [r7, #2]
 8004ed8:	041a      	lsls	r2, r3, #16
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	619a      	str	r2, [r3, #24]
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ef6:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ef8:	695a      	ldr	r2, [r3, #20]
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d006      	beq.n	8004f10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f02:	4a05      	ldr	r2, [pc, #20]	; (8004f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f08:	88fb      	ldrh	r3, [r7, #6]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fd fc23 	bl	8002756 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40013c00 	.word	0x40013c00

08004f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e12b      	b.n	8005186 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fd fda8 	bl	8002a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2224      	movs	r2, #36	; 0x24
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0201 	bic.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f80:	f001 fd28 	bl	80069d4 <HAL_RCC_GetPCLK1Freq>
 8004f84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4a81      	ldr	r2, [pc, #516]	; (8005190 <HAL_I2C_Init+0x274>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d807      	bhi.n	8004fa0 <HAL_I2C_Init+0x84>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a80      	ldr	r2, [pc, #512]	; (8005194 <HAL_I2C_Init+0x278>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	bf94      	ite	ls
 8004f98:	2301      	movls	r3, #1
 8004f9a:	2300      	movhi	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	e006      	b.n	8004fae <HAL_I2C_Init+0x92>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4a7d      	ldr	r2, [pc, #500]	; (8005198 <HAL_I2C_Init+0x27c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	bf94      	ite	ls
 8004fa8:	2301      	movls	r3, #1
 8004faa:	2300      	movhi	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e0e7      	b.n	8005186 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4a78      	ldr	r2, [pc, #480]	; (800519c <HAL_I2C_Init+0x280>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	0c9b      	lsrs	r3, r3, #18
 8004fc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a6a      	ldr	r2, [pc, #424]	; (8005190 <HAL_I2C_Init+0x274>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d802      	bhi.n	8004ff0 <HAL_I2C_Init+0xd4>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	3301      	adds	r3, #1
 8004fee:	e009      	b.n	8005004 <HAL_I2C_Init+0xe8>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	4a69      	ldr	r2, [pc, #420]	; (80051a0 <HAL_I2C_Init+0x284>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	099b      	lsrs	r3, r3, #6
 8005002:	3301      	adds	r3, #1
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	430b      	orrs	r3, r1
 800500a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005016:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	495c      	ldr	r1, [pc, #368]	; (8005190 <HAL_I2C_Init+0x274>)
 8005020:	428b      	cmp	r3, r1
 8005022:	d819      	bhi.n	8005058 <HAL_I2C_Init+0x13c>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1e59      	subs	r1, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005032:	1c59      	adds	r1, r3, #1
 8005034:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005038:	400b      	ands	r3, r1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_I2C_Init+0x138>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1e59      	subs	r1, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fbb1 f3f3 	udiv	r3, r1, r3
 800504c:	3301      	adds	r3, #1
 800504e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005052:	e051      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 8005054:	2304      	movs	r3, #4
 8005056:	e04f      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d111      	bne.n	8005084 <HAL_I2C_Init+0x168>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1e58      	subs	r0, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6859      	ldr	r1, [r3, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	440b      	add	r3, r1
 800506e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005072:	3301      	adds	r3, #1
 8005074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005078:	2b00      	cmp	r3, #0
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	e012      	b.n	80050aa <HAL_I2C_Init+0x18e>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	1e58      	subs	r0, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6859      	ldr	r1, [r3, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	0099      	lsls	r1, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	fbb0 f3f3 	udiv	r3, r0, r3
 800509a:	3301      	adds	r3, #1
 800509c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf0c      	ite	eq
 80050a4:	2301      	moveq	r3, #1
 80050a6:	2300      	movne	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_I2C_Init+0x196>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e022      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10e      	bne.n	80050d8 <HAL_I2C_Init+0x1bc>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1e58      	subs	r0, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	440b      	add	r3, r1
 80050c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80050cc:	3301      	adds	r3, #1
 80050ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d6:	e00f      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1e58      	subs	r0, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6859      	ldr	r1, [r3, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	0099      	lsls	r1, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ee:	3301      	adds	r3, #1
 80050f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	6809      	ldr	r1, [r1, #0]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005126:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6911      	ldr	r1, [r2, #16]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68d2      	ldr	r2, [r2, #12]
 8005132:	4311      	orrs	r1, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	430b      	orrs	r3, r1
 800513a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	000186a0 	.word	0x000186a0
 8005194:	001e847f 	.word	0x001e847f
 8005198:	003d08ff 	.word	0x003d08ff
 800519c:	431bde83 	.word	0x431bde83
 80051a0:	10624dd3 	.word	0x10624dd3

080051a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a6:	b08f      	sub	sp, #60	; 0x3c
 80051a8:	af0a      	add	r7, sp, #40	; 0x28
 80051aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e116      	b.n	80053e4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d106      	bne.n	80051d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f00b f825 	bl	8010220 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2203      	movs	r2, #3
 80051da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d102      	bne.n	80051f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f004 fc46 	bl	8009a86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	687e      	ldr	r6, [r7, #4]
 8005202:	466d      	mov	r5, sp
 8005204:	f106 0410 	add.w	r4, r6, #16
 8005208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800520a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800520c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800520e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005210:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005214:	e885 0003 	stmia.w	r5, {r0, r1}
 8005218:	1d33      	adds	r3, r6, #4
 800521a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800521c:	6838      	ldr	r0, [r7, #0]
 800521e:	f004 fb1d 	bl	800985c <USB_CoreInit>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d005      	beq.n	8005234 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0d7      	b.n	80053e4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2100      	movs	r1, #0
 800523a:	4618      	mov	r0, r3
 800523c:	f004 fc34 	bl	8009aa8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]
 8005244:	e04a      	b.n	80052dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005246:	7bfa      	ldrb	r2, [r7, #15]
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	333d      	adds	r3, #61	; 0x3d
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800525a:	7bfa      	ldrb	r2, [r7, #15]
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	440b      	add	r3, r1
 8005268:	333c      	adds	r3, #60	; 0x3c
 800526a:	7bfa      	ldrb	r2, [r7, #15]
 800526c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800526e:	7bfa      	ldrb	r2, [r7, #15]
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	b298      	uxth	r0, r3
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	3344      	adds	r3, #68	; 0x44
 8005282:	4602      	mov	r2, r0
 8005284:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005286:	7bfa      	ldrb	r2, [r7, #15]
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	3340      	adds	r3, #64	; 0x40
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800529a:	7bfa      	ldrb	r2, [r7, #15]
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	3348      	adds	r3, #72	; 0x48
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052ae:	7bfa      	ldrb	r2, [r7, #15]
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	334c      	adds	r3, #76	; 0x4c
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052c2:	7bfa      	ldrb	r2, [r7, #15]
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	3354      	adds	r3, #84	; 0x54
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	3301      	adds	r3, #1
 80052da:	73fb      	strb	r3, [r7, #15]
 80052dc:	7bfa      	ldrb	r2, [r7, #15]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d3af      	bcc.n	8005246 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
 80052ea:	e044      	b.n	8005376 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052ec:	7bfa      	ldrb	r2, [r7, #15]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80052fe:	2200      	movs	r2, #0
 8005300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005302:	7bfa      	ldrb	r2, [r7, #15]
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	440b      	add	r3, r1
 8005310:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005314:	7bfa      	ldrb	r2, [r7, #15]
 8005316:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005318:	7bfa      	ldrb	r2, [r7, #15]
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800532e:	7bfa      	ldrb	r2, [r7, #15]
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005344:	7bfa      	ldrb	r2, [r7, #15]
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	4613      	mov	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	4413      	add	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	440b      	add	r3, r1
 8005352:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800535a:	7bfa      	ldrb	r2, [r7, #15]
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	440b      	add	r3, r1
 8005368:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	3301      	adds	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
 8005376:	7bfa      	ldrb	r2, [r7, #15]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	429a      	cmp	r2, r3
 800537e:	d3b5      	bcc.n	80052ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	603b      	str	r3, [r7, #0]
 8005386:	687e      	ldr	r6, [r7, #4]
 8005388:	466d      	mov	r5, sp
 800538a:	f106 0410 	add.w	r4, r6, #16
 800538e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005396:	e894 0003 	ldmia.w	r4, {r0, r1}
 800539a:	e885 0003 	stmia.w	r5, {r0, r1}
 800539e:	1d33      	adds	r3, r6, #4
 80053a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053a2:	6838      	ldr	r0, [r7, #0]
 80053a4:	f004 fbcc 	bl	8009b40 <USB_DevInit>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e014      	b.n	80053e4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d102      	bne.n	80053d8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f001 f98c 	bl	80066f0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f005 fd0e 	bl	800adfe <USB_DevDisconnect>

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_PCD_Start+0x1c>
 8005404:	2302      	movs	r3, #2
 8005406:	e020      	b.n	800544a <HAL_PCD_Start+0x5e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	2b01      	cmp	r3, #1
 8005416:	d109      	bne.n	800542c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800541c:	2b01      	cmp	r3, #1
 800541e:	d005      	beq.n	800542c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f004 fb17 	bl	8009a64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f005 fcbe 	bl	800adbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005452:	b590      	push	{r4, r7, lr}
 8005454:	b08d      	sub	sp, #52	; 0x34
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f005 fd7c 	bl	800af66 <USB_GetMode>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	f040 84b7 	bne.w	8005de4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f005 fce0 	bl	800ae40 <USB_ReadInterrupts>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 84ad 	beq.w	8005de2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	0a1b      	lsrs	r3, r3, #8
 8005492:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f005 fccd 	bl	800ae40 <USB_ReadInterrupts>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d107      	bne.n	80054c0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f002 0202 	and.w	r2, r2, #2
 80054be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f005 fcbb 	bl	800ae40 <USB_ReadInterrupts>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d161      	bne.n	8005598 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0210 	bic.w	r2, r2, #16
 80054e2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	f003 020f 	and.w	r2, r3, #15
 80054f0:	4613      	mov	r3, r2
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	4413      	add	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4413      	add	r3, r2
 8005500:	3304      	adds	r3, #4
 8005502:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	0c5b      	lsrs	r3, r3, #17
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	2b02      	cmp	r3, #2
 800550e:	d124      	bne.n	800555a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005516:	4013      	ands	r3, r2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d035      	beq.n	8005588 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	091b      	lsrs	r3, r3, #4
 8005524:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800552a:	b29b      	uxth	r3, r3
 800552c:	461a      	mov	r2, r3
 800552e:	6a38      	ldr	r0, [r7, #32]
 8005530:	f005 faf2 	bl	800ab18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005540:	441a      	add	r2, r3
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005552:	441a      	add	r2, r3
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	621a      	str	r2, [r3, #32]
 8005558:	e016      	b.n	8005588 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	0c5b      	lsrs	r3, r3, #17
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	2b06      	cmp	r3, #6
 8005564:	d110      	bne.n	8005588 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800556c:	2208      	movs	r2, #8
 800556e:	4619      	mov	r1, r3
 8005570:	6a38      	ldr	r0, [r7, #32]
 8005572:	f005 fad1 	bl	800ab18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	6a1a      	ldr	r2, [r3, #32]
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005582:	441a      	add	r2, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0210 	orr.w	r2, r2, #16
 8005596:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4618      	mov	r0, r3
 800559e:	f005 fc4f 	bl	800ae40 <USB_ReadInterrupts>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055ac:	f040 80a7 	bne.w	80056fe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f005 fc54 	bl	800ae66 <USB_ReadDevAllOutEpInterrupt>
 80055be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80055c0:	e099      	b.n	80056f6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 808e 	beq.w	80056ea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	4611      	mov	r1, r2
 80055d8:	4618      	mov	r0, r3
 80055da:	f005 fc78 	bl	800aece <USB_ReadDevOutEPInterrupt>
 80055de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00c      	beq.n	8005604 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	461a      	mov	r2, r3
 80055f8:	2301      	movs	r3, #1
 80055fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80055fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fef0 	bl	80063e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00c      	beq.n	8005628 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	461a      	mov	r2, r3
 800561c:	2308      	movs	r3, #8
 800561e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 ffc6 	bl	80065b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b00      	cmp	r3, #0
 8005630:	d008      	beq.n	8005644 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563e:	461a      	mov	r2, r3
 8005640:	2310      	movs	r3, #16
 8005642:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d030      	beq.n	80056b0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005656:	2b80      	cmp	r3, #128	; 0x80
 8005658:	d109      	bne.n	800566e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005668:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800566c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800566e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005670:	4613      	mov	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	4413      	add	r3, r2
 8005680:	3304      	adds	r3, #4
 8005682:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	78db      	ldrb	r3, [r3, #3]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d108      	bne.n	800569e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2200      	movs	r2, #0
 8005690:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	b2db      	uxtb	r3, r3
 8005696:	4619      	mov	r1, r3
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f00a fef5 	bl	8010488 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	461a      	mov	r2, r3
 80056ac:	2302      	movs	r3, #2
 80056ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d008      	beq.n	80056cc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c6:	461a      	mov	r2, r3
 80056c8:	2320      	movs	r3, #32
 80056ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	461a      	mov	r2, r3
 80056e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	3301      	adds	r3, #1
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f47f af62 	bne.w	80055c2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f005 fb9c 	bl	800ae40 <USB_ReadInterrupts>
 8005708:	4603      	mov	r3, r0
 800570a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800570e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005712:	f040 80db 	bne.w	80058cc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f005 fbbd 	bl	800ae9a <USB_ReadDevAllInEpInterrupt>
 8005720:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005726:	e0cd      	b.n	80058c4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 80c2 	beq.w	80058b8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	4611      	mov	r1, r2
 800573e:	4618      	mov	r0, r3
 8005740:	f005 fbe3 	bl	800af0a <USB_ReadDevInEPInterrupt>
 8005744:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d057      	beq.n	8005800 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	2201      	movs	r2, #1
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	43db      	mvns	r3, r3
 800576a:	69f9      	ldr	r1, [r7, #28]
 800576c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005770:	4013      	ands	r3, r2
 8005772:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	461a      	mov	r2, r3
 8005782:	2301      	movs	r3, #1
 8005784:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d132      	bne.n	80057f4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005792:	4613      	mov	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	334c      	adds	r3, #76	; 0x4c
 800579e:	6819      	ldr	r1, [r3, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4403      	add	r3, r0
 80057ae:	3348      	adds	r3, #72	; 0x48
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4419      	add	r1, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b8:	4613      	mov	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	4413      	add	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4403      	add	r3, r0
 80057c2:	334c      	adds	r3, #76	; 0x4c
 80057c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d113      	bne.n	80057f4 <HAL_PCD_IRQHandler+0x3a2>
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d0:	4613      	mov	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	3354      	adds	r3, #84	; 0x54
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d108      	bne.n	80057f4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057ec:	461a      	mov	r2, r3
 80057ee:	2101      	movs	r1, #1
 80057f0:	f005 fbea 	bl	800afc8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f00a fdbf 	bl	801037e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005816:	461a      	mov	r2, r3
 8005818:	2308      	movs	r3, #8
 800581a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	2b00      	cmp	r3, #0
 8005824:	d008      	beq.n	8005838 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005832:	461a      	mov	r2, r3
 8005834:	2310      	movs	r3, #16
 8005836:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584e:	461a      	mov	r2, r3
 8005850:	2340      	movs	r3, #64	; 0x40
 8005852:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d023      	beq.n	80058a6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800585e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005860:	6a38      	ldr	r0, [r7, #32]
 8005862:	f004 facb 	bl	8009dfc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005868:	4613      	mov	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	3338      	adds	r3, #56	; 0x38
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4413      	add	r3, r2
 8005876:	3304      	adds	r3, #4
 8005878:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	78db      	ldrb	r3, [r3, #3]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d108      	bne.n	8005894 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2200      	movs	r2, #0
 8005886:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	b2db      	uxtb	r3, r3
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f00a fe0c 	bl	80104ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	461a      	mov	r2, r3
 80058a2:	2302      	movs	r3, #2
 80058a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80058b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fd08 	bl	80062c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	3301      	adds	r3, #1
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	085b      	lsrs	r3, r3, #1
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f47f af2e 	bne.w	8005728 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f005 fab5 	bl	800ae40 <USB_ReadInterrupts>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e0:	d122      	bne.n	8005928 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d108      	bne.n	8005912 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005908:	2100      	movs	r1, #0
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 ff14 	bl	8006738 <HAL_PCDEx_LPM_Callback>
 8005910:	e002      	b.n	8005918 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f00a fdaa 	bl	801046c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695a      	ldr	r2, [r3, #20]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f005 fa87 	bl	800ae40 <USB_ReadInterrupts>
 8005932:	4603      	mov	r3, r0
 8005934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593c:	d112      	bne.n	8005964 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b01      	cmp	r3, #1
 800594c:	d102      	bne.n	8005954 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f00a fd66 	bl	8010420 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695a      	ldr	r2, [r3, #20]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005962:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f005 fa69 	bl	800ae40 <USB_ReadInterrupts>
 800596e:	4603      	mov	r3, r0
 8005970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005978:	d121      	bne.n	80059be <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695a      	ldr	r2, [r3, #20]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005988:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d111      	bne.n	80059b8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a2:	089b      	lsrs	r3, r3, #2
 80059a4:	f003 020f 	and.w	r2, r3, #15
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80059ae:	2101      	movs	r1, #1
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fec1 	bl	8006738 <HAL_PCDEx_LPM_Callback>
 80059b6:	e002      	b.n	80059be <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f00a fd31 	bl	8010420 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f005 fa3c 	bl	800ae40 <USB_ReadInterrupts>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d2:	f040 80b7 	bne.w	8005b44 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059e4:	f023 0301 	bic.w	r3, r3, #1
 80059e8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2110      	movs	r1, #16
 80059f0:	4618      	mov	r0, r3
 80059f2:	f004 fa03 	bl	8009dfc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059f6:	2300      	movs	r3, #0
 80059f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059fa:	e046      	b.n	8005a8a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80059fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a0e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a42:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a54:	0151      	lsls	r1, r2, #5
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	440a      	add	r2, r1
 8005a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a82:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a86:	3301      	adds	r3, #1
 8005a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d3b3      	bcc.n	80059fc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aa2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005aa6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d016      	beq.n	8005ade <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ac0:	f043 030b 	orr.w	r3, r3, #11
 8005ac4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ad6:	f043 030b 	orr.w	r3, r3, #11
 8005ada:	6453      	str	r3, [r2, #68]	; 0x44
 8005adc:	e015      	b.n	8005b0a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005af0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005af4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b04:	f043 030b 	orr.w	r3, r3, #11
 8005b08:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b18:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b1c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f005 fa4a 	bl	800afc8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695a      	ldr	r2, [r3, #20]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f005 f979 	bl	800ae40 <USB_ReadInterrupts>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b58:	d124      	bne.n	8005ba4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f005 fa0f 	bl	800af82 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f004 f9c4 	bl	8009ef6 <USB_GetDevSpeed>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	461a      	mov	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681c      	ldr	r4, [r3, #0]
 8005b7a:	f000 ff1f 	bl	80069bc <HAL_RCC_GetHCLKFreq>
 8005b7e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f003 fec9 	bl	8009920 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f00a fc1d 	bl	80103ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695a      	ldr	r2, [r3, #20]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f005 f949 	bl	800ae40 <USB_ReadInterrupts>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	f003 0308 	and.w	r3, r3, #8
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d10a      	bne.n	8005bce <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f00a fbfa 	bl	80103b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	695a      	ldr	r2, [r3, #20]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f002 0208 	and.w	r2, r2, #8
 8005bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f005 f934 	bl	800ae40 <USB_ReadInterrupts>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bde:	2b80      	cmp	r3, #128	; 0x80
 8005be0:	d122      	bne.n	8005c28 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bee:	2301      	movs	r3, #1
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf2:	e014      	b.n	8005c1e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d105      	bne.n	8005c18 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fb27 	bl	8006266 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d3e5      	bcc.n	8005bf4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f005 f907 	bl	800ae40 <USB_ReadInterrupts>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c3c:	d13b      	bne.n	8005cb6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c3e:	2301      	movs	r3, #1
 8005c40:	627b      	str	r3, [r7, #36]	; 0x24
 8005c42:	e02b      	b.n	8005c9c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	3340      	adds	r3, #64	; 0x40
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d115      	bne.n	8005c96 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005c6a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	da12      	bge.n	8005c96 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c74:	4613      	mov	r3, r2
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	333f      	adds	r3, #63	; 0x3f
 8005c80:	2201      	movs	r2, #1
 8005c82:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fae8 	bl	8006266 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	3301      	adds	r3, #1
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d3ce      	bcc.n	8005c44 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695a      	ldr	r2, [r3, #20]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f005 f8c0 	bl	800ae40 <USB_ReadInterrupts>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cca:	d155      	bne.n	8005d78 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ccc:	2301      	movs	r3, #1
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd0:	e045      	b.n	8005d5e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d12e      	bne.n	8005d58 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005cfa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	da2b      	bge.n	8005d58 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005d0c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d121      	bne.n	8005d58 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10a      	bne.n	8005d58 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d54:	6053      	str	r3, [r2, #4]
            break;
 8005d56:	e007      	b.n	8005d68 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d3b4      	bcc.n	8005cd2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695a      	ldr	r2, [r3, #20]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005d76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f005 f85f 	bl	800ae40 <USB_ReadInterrupts>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8c:	d10a      	bne.n	8005da4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f00a fb9e 	bl	80104d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695a      	ldr	r2, [r3, #20]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f005 f849 	bl	800ae40 <USB_ReadInterrupts>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d115      	bne.n	8005de4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f00a fb8e 	bl	80104ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6859      	ldr	r1, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	605a      	str	r2, [r3, #4]
 8005de0:	e000      	b.n	8005de4 <HAL_PCD_IRQHandler+0x992>
      return;
 8005de2:	bf00      	nop
    }
  }
}
 8005de4:	3734      	adds	r7, #52	; 0x34
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd90      	pop	{r4, r7, pc}

08005dea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	460b      	mov	r3, r1
 8005df4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_PCD_SetAddress+0x1a>
 8005e00:	2302      	movs	r3, #2
 8005e02:	e013      	b.n	8005e2c <HAL_PCD_SetAddress+0x42>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	78fa      	ldrb	r2, [r7, #3]
 8005e10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	78fa      	ldrb	r2, [r7, #3]
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f004 ffa7 	bl	800ad70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	4611      	mov	r1, r2
 8005e40:	461a      	mov	r2, r3
 8005e42:	4603      	mov	r3, r0
 8005e44:	70fb      	strb	r3, [r7, #3]
 8005e46:	460b      	mov	r3, r1
 8005e48:	803b      	strh	r3, [r7, #0]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	da0f      	bge.n	8005e7a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	f003 020f 	and.w	r2, r3, #15
 8005e60:	4613      	mov	r3, r2
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	3338      	adds	r3, #56	; 0x38
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	3304      	adds	r3, #4
 8005e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	705a      	strb	r2, [r3, #1]
 8005e78:	e00f      	b.n	8005e9a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	f003 020f 	and.w	r2, r3, #15
 8005e80:	4613      	mov	r3, r2
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	4413      	add	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4413      	add	r3, r2
 8005e90:	3304      	adds	r3, #4
 8005e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e9a:	78fb      	ldrb	r3, [r7, #3]
 8005e9c:	f003 030f 	and.w	r3, r3, #15
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005ea6:	883a      	ldrh	r2, [r7, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	78ba      	ldrb	r2, [r7, #2]
 8005eb0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d004      	beq.n	8005ec4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005ec4:	78bb      	ldrb	r3, [r7, #2]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d102      	bne.n	8005ed0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_PCD_EP_Open+0xaa>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e00e      	b.n	8005efc <HAL_PCD_EP_Open+0xc8>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68f9      	ldr	r1, [r7, #12]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f004 f827 	bl	8009f40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005efa:	7afb      	ldrb	r3, [r7, #11]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	da0f      	bge.n	8005f38 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	f003 020f 	and.w	r2, r3, #15
 8005f1e:	4613      	mov	r3, r2
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	4413      	add	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	3338      	adds	r3, #56	; 0x38
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	705a      	strb	r2, [r3, #1]
 8005f36:	e00f      	b.n	8005f58 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	f003 020f 	and.w	r2, r3, #15
 8005f3e:	4613      	mov	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	4413      	add	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3304      	adds	r3, #4
 8005f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d101      	bne.n	8005f72 <HAL_PCD_EP_Close+0x6e>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e00e      	b.n	8005f90 <HAL_PCD_EP_Close+0x8c>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68f9      	ldr	r1, [r7, #12]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f004 f865 	bl	800a050 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	607a      	str	r2, [r7, #4]
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fa8:	7afb      	ldrb	r3, [r7, #11]
 8005faa:	f003 020f 	and.w	r2, r3, #15
 8005fae:	4613      	mov	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fda:	7afb      	ldrb	r3, [r7, #11]
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d102      	bne.n	8005ff4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ff4:	7afb      	ldrb	r3, [r7, #11]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	461a      	mov	r2, r3
 800600a:	6979      	ldr	r1, [r7, #20]
 800600c:	f004 fb44 	bl	800a698 <USB_EP0StartXfer>
 8006010:	e008      	b.n	8006024 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	461a      	mov	r2, r3
 800601e:	6979      	ldr	r1, [r7, #20]
 8006020:	f004 f8f2 	bl	800a208 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	460b      	mov	r3, r1
 8006038:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800603a:	78fb      	ldrb	r3, [r7, #3]
 800603c:	f003 020f 	and.w	r2, r3, #15
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	4613      	mov	r3, r2
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	440b      	add	r3, r1
 800604c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006050:	681b      	ldr	r3, [r3, #0]
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b086      	sub	sp, #24
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
 800606a:	460b      	mov	r3, r1
 800606c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800606e:	7afb      	ldrb	r3, [r7, #11]
 8006070:	f003 020f 	and.w	r2, r3, #15
 8006074:	4613      	mov	r3, r2
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	3338      	adds	r3, #56	; 0x38
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4413      	add	r3, r2
 8006082:	3304      	adds	r3, #4
 8006084:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2200      	movs	r2, #0
 8006096:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2201      	movs	r2, #1
 800609c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800609e:	7afb      	ldrb	r3, [r7, #11]
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d102      	bne.n	80060b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060b8:	7afb      	ldrb	r3, [r7, #11]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	6979      	ldr	r1, [r7, #20]
 80060d0:	f004 fae2 	bl	800a698 <USB_EP0StartXfer>
 80060d4:	e008      	b.n	80060e8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	6979      	ldr	r1, [r7, #20]
 80060e4:	f004 f890 	bl	800a208 <USB_EPStartXfer>
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	f003 020f 	and.w	r2, r3, #15
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d901      	bls.n	8006110 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e050      	b.n	80061b2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006114:	2b00      	cmp	r3, #0
 8006116:	da0f      	bge.n	8006138 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	f003 020f 	and.w	r2, r3, #15
 800611e:	4613      	mov	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	3338      	adds	r3, #56	; 0x38
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4413      	add	r3, r2
 800612c:	3304      	adds	r3, #4
 800612e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2201      	movs	r2, #1
 8006134:	705a      	strb	r2, [r3, #1]
 8006136:	e00d      	b.n	8006154 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	4613      	mov	r3, r2
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	4413      	add	r3, r2
 800614a:	3304      	adds	r3, #4
 800614c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800615a:	78fb      	ldrb	r3, [r7, #3]
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	b2da      	uxtb	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_PCD_EP_SetStall+0x82>
 8006170:	2302      	movs	r3, #2
 8006172:	e01e      	b.n	80061b2 <HAL_PCD_EP_SetStall+0xc0>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68f9      	ldr	r1, [r7, #12]
 8006182:	4618      	mov	r0, r3
 8006184:	f004 fd20 	bl	800abc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	b2d9      	uxtb	r1, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061a2:	461a      	mov	r2, r3
 80061a4:	f004 ff10 	bl	800afc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	f003 020f 	and.w	r2, r3, #15
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d901      	bls.n	80061d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e042      	b.n	800625e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	da0f      	bge.n	8006200 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	f003 020f 	and.w	r2, r3, #15
 80061e6:	4613      	mov	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	3338      	adds	r3, #56	; 0x38
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	4413      	add	r3, r2
 80061f4:	3304      	adds	r3, #4
 80061f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2201      	movs	r2, #1
 80061fc:	705a      	strb	r2, [r3, #1]
 80061fe:	e00f      	b.n	8006220 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	f003 020f 	and.w	r2, r3, #15
 8006206:	4613      	mov	r3, r2
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	4413      	add	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	4413      	add	r3, r2
 8006216:	3304      	adds	r3, #4
 8006218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	b2da      	uxtb	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_PCD_EP_ClrStall+0x86>
 800623c:	2302      	movs	r3, #2
 800623e:	e00e      	b.n	800625e <HAL_PCD_EP_ClrStall+0xa4>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68f9      	ldr	r1, [r7, #12]
 800624e:	4618      	mov	r0, r3
 8006250:	f004 fd28 	bl	800aca4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	460b      	mov	r3, r1
 8006270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006276:	2b00      	cmp	r3, #0
 8006278:	da0c      	bge.n	8006294 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800627a:	78fb      	ldrb	r3, [r7, #3]
 800627c:	f003 020f 	and.w	r2, r3, #15
 8006280:	4613      	mov	r3, r2
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	4413      	add	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	3338      	adds	r3, #56	; 0x38
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	4413      	add	r3, r2
 800628e:	3304      	adds	r3, #4
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e00c      	b.n	80062ae <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006294:	78fb      	ldrb	r3, [r7, #3]
 8006296:	f003 020f 	and.w	r2, r3, #15
 800629a:	4613      	mov	r3, r2
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	4413      	add	r3, r2
 80062aa:	3304      	adds	r3, #4
 80062ac:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68f9      	ldr	r1, [r7, #12]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f004 fb47 	bl	800a948 <USB_EPStopXfer>
 80062ba:	4603      	mov	r3, r0
 80062bc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80062be:	7afb      	ldrb	r3, [r7, #11]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	4613      	mov	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	3338      	adds	r3, #56	; 0x38
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	4413      	add	r3, r2
 80062ec:	3304      	adds	r3, #4
 80062ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a1a      	ldr	r2, [r3, #32]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d901      	bls.n	8006300 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e06c      	b.n	80063da <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	699a      	ldr	r2, [r3, #24]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	429a      	cmp	r2, r3
 8006314:	d902      	bls.n	800631c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	3303      	adds	r3, #3
 8006320:	089b      	lsrs	r3, r3, #2
 8006322:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006324:	e02b      	b.n	800637e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	429a      	cmp	r2, r3
 800633a:	d902      	bls.n	8006342 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	3303      	adds	r3, #3
 8006346:	089b      	lsrs	r3, r3, #2
 8006348:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6919      	ldr	r1, [r3, #16]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800635a:	b2db      	uxtb	r3, r3
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	4603      	mov	r3, r0
 8006360:	6978      	ldr	r0, [r7, #20]
 8006362:	f004 fb9b 	bl	800aa9c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	441a      	add	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a1a      	ldr	r2, [r3, #32]
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	441a      	add	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	b29b      	uxth	r3, r3
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	429a      	cmp	r2, r3
 8006392:	d809      	bhi.n	80063a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a1a      	ldr	r2, [r3, #32]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800639c:	429a      	cmp	r2, r3
 800639e:	d203      	bcs.n	80063a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1be      	bne.n	8006326 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	699a      	ldr	r2, [r3, #24]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d811      	bhi.n	80063d8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	2201      	movs	r2, #1
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	6939      	ldr	r1, [r7, #16]
 80063d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d4:	4013      	ands	r3, r2
 80063d6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3720      	adds	r7, #32
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	333c      	adds	r3, #60	; 0x3c
 80063fc:	3304      	adds	r3, #4
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d17b      	bne.n	8006512 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b00      	cmp	r3, #0
 8006422:	d015      	beq.n	8006450 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	4a61      	ldr	r2, [pc, #388]	; (80065ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	f240 80b9 	bls.w	80065a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80b3 	beq.w	80065a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006446:	461a      	mov	r2, r3
 8006448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800644c:	6093      	str	r3, [r2, #8]
 800644e:	e0a7      	b.n	80065a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d009      	beq.n	800646e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006466:	461a      	mov	r2, r3
 8006468:	2320      	movs	r3, #32
 800646a:	6093      	str	r3, [r2, #8]
 800646c:	e098      	b.n	80065a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006474:	2b00      	cmp	r3, #0
 8006476:	f040 8093 	bne.w	80065a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	4a4b      	ldr	r2, [pc, #300]	; (80065ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d90f      	bls.n	80064a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	461a      	mov	r2, r3
 800649a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800649e:	6093      	str	r3, [r2, #8]
 80064a0:	e07e      	b.n	80065a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	4613      	mov	r3, r2
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	4413      	add	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	4413      	add	r3, r2
 80064b4:	3304      	adds	r3, #4
 80064b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	0159      	lsls	r1, r3, #5
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	440b      	add	r3, r1
 80064c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d114      	bne.n	8006504 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d109      	bne.n	80064f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064ec:	461a      	mov	r2, r3
 80064ee:	2101      	movs	r1, #1
 80064f0:	f004 fd6a 	bl	800afc8 <USB_EP0_OutStart>
 80064f4:	e006      	b.n	8006504 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	441a      	add	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	b2db      	uxtb	r3, r3
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f009 ff1c 	bl	8010348 <HAL_PCD_DataOutStageCallback>
 8006510:	e046      	b.n	80065a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4a26      	ldr	r2, [pc, #152]	; (80065b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d124      	bne.n	8006564 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00a      	beq.n	800653a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006530:	461a      	mov	r2, r3
 8006532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006536:	6093      	str	r3, [r2, #8]
 8006538:	e032      	b.n	80065a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006550:	461a      	mov	r2, r3
 8006552:	2320      	movs	r3, #32
 8006554:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f009 fef3 	bl	8010348 <HAL_PCD_DataOutStageCallback>
 8006562:	e01d      	b.n	80065a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d114      	bne.n	8006594 <PCD_EP_OutXfrComplete_int+0x1b0>
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	4613      	mov	r3, r2
 8006570:	00db      	lsls	r3, r3, #3
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	440b      	add	r3, r1
 8006578:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d108      	bne.n	8006594 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800658c:	461a      	mov	r2, r3
 800658e:	2100      	movs	r1, #0
 8006590:	f004 fd1a 	bl	800afc8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	b2db      	uxtb	r3, r3
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f009 fed4 	bl	8010348 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3720      	adds	r7, #32
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	4f54300a 	.word	0x4f54300a
 80065b0:	4f54310a 	.word	0x4f54310a

080065b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	333c      	adds	r3, #60	; 0x3c
 80065cc:	3304      	adds	r3, #4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4a15      	ldr	r2, [pc, #84]	; (800663c <PCD_EP_OutSetupPacket_int+0x88>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d90e      	bls.n	8006608 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d009      	beq.n	8006608 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006600:	461a      	mov	r2, r3
 8006602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006606:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f009 fe8b 	bl	8010324 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a0a      	ldr	r2, [pc, #40]	; (800663c <PCD_EP_OutSetupPacket_int+0x88>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d90c      	bls.n	8006630 <PCD_EP_OutSetupPacket_int+0x7c>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d108      	bne.n	8006630 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006628:	461a      	mov	r2, r3
 800662a:	2101      	movs	r1, #1
 800662c:	f004 fccc 	bl	800afc8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	4f54300a 	.word	0x4f54300a

08006640 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
 800664c:	4613      	mov	r3, r2
 800664e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d107      	bne.n	800666e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800665e:	883b      	ldrh	r3, [r7, #0]
 8006660:	0419      	lsls	r1, r3, #16
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	430a      	orrs	r2, r1
 800666a:	629a      	str	r2, [r3, #40]	; 0x28
 800666c:	e028      	b.n	80066c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	0c1b      	lsrs	r3, r3, #16
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	4413      	add	r3, r2
 800667a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800667c:	2300      	movs	r3, #0
 800667e:	73fb      	strb	r3, [r7, #15]
 8006680:	e00d      	b.n	800669e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	3340      	adds	r3, #64	; 0x40
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	0c1b      	lsrs	r3, r3, #16
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	4413      	add	r3, r2
 8006696:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	3301      	adds	r3, #1
 800669c:	73fb      	strb	r3, [r7, #15]
 800669e:	7bfa      	ldrb	r2, [r7, #15]
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d3ec      	bcc.n	8006682 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80066a8:	883b      	ldrh	r3, [r7, #0]
 80066aa:	0418      	lsls	r0, r3, #16
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	4302      	orrs	r2, r0
 80066b8:	3340      	adds	r3, #64	; 0x40
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	460b      	mov	r3, r1
 80066d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	887a      	ldrh	r2, [r7, #2]
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006722:	f043 0303 	orr.w	r3, r3, #3
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800675a:	2300      	movs	r3, #0
 800675c:	603b      	str	r3, [r7, #0]
 800675e:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	4a1f      	ldr	r2, [pc, #124]	; (80067e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006768:	6413      	str	r3, [r2, #64]	; 0x40
 800676a:	4b1d      	ldr	r3, [pc, #116]	; (80067e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006776:	4b1b      	ldr	r3, [pc, #108]	; (80067e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800677c:	f7fc fe06 	bl	800338c <HAL_GetTick>
 8006780:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006782:	e009      	b.n	8006798 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006784:	f7fc fe02 	bl	800338c <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006792:	d901      	bls.n	8006798 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e01f      	b.n	80067d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006798:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a4:	d1ee      	bne.n	8006784 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80067a6:	4b11      	ldr	r3, [pc, #68]	; (80067ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067ac:	f7fc fdee 	bl	800338c <HAL_GetTick>
 80067b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067b2:	e009      	b.n	80067c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067b4:	f7fc fdea 	bl	800338c <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067c2:	d901      	bls.n	80067c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e007      	b.n	80067d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067c8:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067d4:	d1ee      	bne.n	80067b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40023800 	.word	0x40023800
 80067e4:	420e0040 	.word	0x420e0040
 80067e8:	40007000 	.word	0x40007000
 80067ec:	420e0044 	.word	0x420e0044

080067f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e0cc      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006804:	4b68      	ldr	r3, [pc, #416]	; (80069a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d90c      	bls.n	800682c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006812:	4b65      	ldr	r3, [pc, #404]	; (80069a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800681a:	4b63      	ldr	r3, [pc, #396]	; (80069a8 <HAL_RCC_ClockConfig+0x1b8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	429a      	cmp	r2, r3
 8006826:	d001      	beq.n	800682c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e0b8      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d020      	beq.n	800687a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006844:	4b59      	ldr	r3, [pc, #356]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	4a58      	ldr	r2, [pc, #352]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800684e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800685c:	4b53      	ldr	r3, [pc, #332]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4a52      	ldr	r2, [pc, #328]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006868:	4b50      	ldr	r3, [pc, #320]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	494d      	ldr	r1, [pc, #308]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006876:	4313      	orrs	r3, r2
 8006878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d044      	beq.n	8006910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d107      	bne.n	800689e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800688e:	4b47      	ldr	r3, [pc, #284]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d119      	bne.n	80068ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e07f      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d003      	beq.n	80068ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d107      	bne.n	80068be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ae:	4b3f      	ldr	r3, [pc, #252]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e06f      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068be:	4b3b      	ldr	r3, [pc, #236]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e067      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068ce:	4b37      	ldr	r3, [pc, #220]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f023 0203 	bic.w	r2, r3, #3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	4934      	ldr	r1, [pc, #208]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068e0:	f7fc fd54 	bl	800338c <HAL_GetTick>
 80068e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e6:	e00a      	b.n	80068fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068e8:	f7fc fd50 	bl	800338c <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e04f      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068fe:	4b2b      	ldr	r3, [pc, #172]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 020c 	and.w	r2, r3, #12
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	429a      	cmp	r2, r3
 800690e:	d1eb      	bne.n	80068e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006910:	4b25      	ldr	r3, [pc, #148]	; (80069a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d20c      	bcs.n	8006938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800691e:	4b22      	ldr	r3, [pc, #136]	; (80069a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	b2d2      	uxtb	r2, r2
 8006924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006926:	4b20      	ldr	r3, [pc, #128]	; (80069a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	d001      	beq.n	8006938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e032      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006944:	4b19      	ldr	r3, [pc, #100]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	4916      	ldr	r1, [pc, #88]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	4313      	orrs	r3, r2
 8006954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b00      	cmp	r3, #0
 8006960:	d009      	beq.n	8006976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006962:	4b12      	ldr	r3, [pc, #72]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	490e      	ldr	r1, [pc, #56]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006972:	4313      	orrs	r3, r2
 8006974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006976:	f000 fbb1 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 800697a:	4602      	mov	r2, r0
 800697c:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	091b      	lsrs	r3, r3, #4
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	490a      	ldr	r1, [pc, #40]	; (80069b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006988:	5ccb      	ldrb	r3, [r1, r3]
 800698a:	fa22 f303 	lsr.w	r3, r2, r3
 800698e:	4a09      	ldr	r2, [pc, #36]	; (80069b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006992:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4618      	mov	r0, r3
 8006998:	f7fc fb22 	bl	8002fe0 <HAL_InitTick>

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	40023c00 	.word	0x40023c00
 80069ac:	40023800 	.word	0x40023800
 80069b0:	08010cbc 	.word	0x08010cbc
 80069b4:	20000000 	.word	0x20000000
 80069b8:	20000004 	.word	0x20000004

080069bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069c0:	4b03      	ldr	r3, [pc, #12]	; (80069d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80069c2:	681b      	ldr	r3, [r3, #0]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	20000000 	.word	0x20000000

080069d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069d8:	f7ff fff0 	bl	80069bc <HAL_RCC_GetHCLKFreq>
 80069dc:	4602      	mov	r2, r0
 80069de:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	0a9b      	lsrs	r3, r3, #10
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	4903      	ldr	r1, [pc, #12]	; (80069f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ea:	5ccb      	ldrb	r3, [r1, r3]
 80069ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	40023800 	.word	0x40023800
 80069f8:	08010ccc 	.word	0x08010ccc

080069fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a00:	f7ff ffdc 	bl	80069bc <HAL_RCC_GetHCLKFreq>
 8006a04:	4602      	mov	r2, r0
 8006a06:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	0b5b      	lsrs	r3, r3, #13
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	4903      	ldr	r1, [pc, #12]	; (8006a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a12:	5ccb      	ldrb	r3, [r1, r3]
 8006a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	08010ccc 	.word	0x08010ccc

08006a24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	220f      	movs	r2, #15
 8006a32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a34:	4b12      	ldr	r3, [pc, #72]	; (8006a80 <HAL_RCC_GetClockConfig+0x5c>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 0203 	and.w	r2, r3, #3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a40:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <HAL_RCC_GetClockConfig+0x5c>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <HAL_RCC_GetClockConfig+0x5c>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a58:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <HAL_RCC_GetClockConfig+0x5c>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	08db      	lsrs	r3, r3, #3
 8006a5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a66:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <HAL_RCC_GetClockConfig+0x60>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 020f 	and.w	r2, r3, #15
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	601a      	str	r2, [r3, #0]
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40023800 	.word	0x40023800
 8006a84:	40023c00 	.word	0x40023c00

08006a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08c      	sub	sp, #48	; 0x30
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d010      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006ac0:	4b6f      	ldr	r3, [pc, #444]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ac6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	496c      	ldr	r1, [pc, #432]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d010      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006aee:	4b64      	ldr	r3, [pc, #400]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006af4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afc:	4960      	ldr	r1, [pc, #384]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d017      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b1c:	4b58      	ldr	r3, [pc, #352]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	4955      	ldr	r1, [pc, #340]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b3a:	d101      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0308 	and.w	r3, r3, #8
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d017      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006b58:	4b49      	ldr	r3, [pc, #292]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b66:	4946      	ldr	r1, [pc, #280]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b76:	d101      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006b84:	2301      	movs	r3, #1
 8006b86:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 808a 	beq.w	8006caa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]
 8006b9a:	4b39      	ldr	r3, [pc, #228]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	4a38      	ldr	r2, [pc, #224]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ba6:	4b36      	ldr	r3, [pc, #216]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bae:	60bb      	str	r3, [r7, #8]
 8006bb0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006bb2:	4b34      	ldr	r3, [pc, #208]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a33      	ldr	r2, [pc, #204]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bbe:	f7fc fbe5 	bl	800338c <HAL_GetTick>
 8006bc2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006bc6:	f7fc fbe1 	bl	800338c <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e278      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bd8:	4b2a      	ldr	r3, [pc, #168]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0f0      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006be4:	4b26      	ldr	r3, [pc, #152]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bec:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d02f      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d028      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c02:	4b1f      	ldr	r3, [pc, #124]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c0c:	4b1e      	ldr	r3, [pc, #120]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c12:	4b1d      	ldr	r3, [pc, #116]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c18:	4a19      	ldr	r2, [pc, #100]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c1e:	4b18      	ldr	r3, [pc, #96]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d114      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c2a:	f7fc fbaf 	bl	800338c <HAL_GetTick>
 8006c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c30:	e00a      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c32:	f7fc fbab 	bl	800338c <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e240      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c48:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0ee      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c60:	d114      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006c62:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c76:	4902      	ldr	r1, [pc, #8]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	608b      	str	r3, [r1, #8]
 8006c7c:	e00c      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006c7e:	bf00      	nop
 8006c80:	40023800 	.word	0x40023800
 8006c84:	40007000 	.word	0x40007000
 8006c88:	42470e40 	.word	0x42470e40
 8006c8c:	4b4a      	ldr	r3, [pc, #296]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	4a49      	ldr	r2, [pc, #292]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c96:	6093      	str	r3, [r2, #8]
 8006c98:	4b47      	ldr	r3, [pc, #284]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ca4:	4944      	ldr	r1, [pc, #272]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0310 	and.w	r3, r3, #16
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006cbc:	4b3f      	ldr	r3, [pc, #252]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006cbe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006ccc:	4b3a      	ldr	r3, [pc, #232]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cda:	4937      	ldr	r1, [pc, #220]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cee:	4b32      	ldr	r3, [pc, #200]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cf4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfc:	492e      	ldr	r1, [pc, #184]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d011      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d10:	4b29      	ldr	r3, [pc, #164]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d16:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1e:	4926      	ldr	r1, [pc, #152]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d2e:	d101      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006d30:	2301      	movs	r3, #1
 8006d32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006d40:	4b1d      	ldr	r3, [pc, #116]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4e:	491a      	ldr	r1, [pc, #104]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d011      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006d62:	4b15      	ldr	r3, [pc, #84]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d68:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d70:	4911      	ldr	r1, [pc, #68]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d80:	d101      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006d82:	2301      	movs	r3, #1
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d005      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d94:	f040 80ff 	bne.w	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d98:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d9e:	f7fc faf5 	bl	800338c <HAL_GetTick>
 8006da2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006da4:	e00e      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006da6:	f7fc faf1 	bl	800338c <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d907      	bls.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e188      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	424711e0 	.word	0x424711e0
 8006dc0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006dc4:	4b7e      	ldr	r3, [pc, #504]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1ea      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d009      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d028      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d124      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006df8:	4b71      	ldr	r3, [pc, #452]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dfe:	0c1b      	lsrs	r3, r3, #16
 8006e00:	f003 0303 	and.w	r3, r3, #3
 8006e04:	3301      	adds	r3, #1
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e0a:	4b6d      	ldr	r3, [pc, #436]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e10:	0e1b      	lsrs	r3, r3, #24
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	019b      	lsls	r3, r3, #6
 8006e22:	431a      	orrs	r2, r3
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	085b      	lsrs	r3, r3, #1
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	061b      	lsls	r3, r3, #24
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	071b      	lsls	r3, r3, #28
 8006e3a:	4961      	ldr	r1, [pc, #388]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d004      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e56:	d00a      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d035      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e6c:	d130      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006e6e:	4b54      	ldr	r3, [pc, #336]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e74:	0c1b      	lsrs	r3, r3, #16
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e80:	4b4f      	ldr	r3, [pc, #316]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e86:	0f1b      	lsrs	r3, r3, #28
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	019b      	lsls	r3, r3, #6
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	085b      	lsrs	r3, r3, #1
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	041b      	lsls	r3, r3, #16
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	061b      	lsls	r3, r3, #24
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	071b      	lsls	r3, r3, #28
 8006eb0:	4943      	ldr	r1, [pc, #268]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006eb8:	4b41      	ldr	r3, [pc, #260]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ebe:	f023 021f 	bic.w	r2, r3, #31
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	493d      	ldr	r1, [pc, #244]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d029      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee4:	d124      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006ee6:	4b36      	ldr	r3, [pc, #216]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eec:	0c1b      	lsrs	r3, r3, #16
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ef8:	4b31      	ldr	r3, [pc, #196]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006efe:	0f1b      	lsrs	r3, r3, #28
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	019b      	lsls	r3, r3, #6
 8006f10:	431a      	orrs	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	085b      	lsrs	r3, r3, #1
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	041b      	lsls	r3, r3, #16
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	061b      	lsls	r3, r3, #24
 8006f22:	431a      	orrs	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	071b      	lsls	r3, r3, #28
 8006f28:	4925      	ldr	r1, [pc, #148]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d016      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	019b      	lsls	r3, r3, #6
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	041b      	lsls	r3, r3, #16
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	061b      	lsls	r3, r3, #24
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	071b      	lsls	r3, r3, #28
 8006f62:	4917      	ldr	r1, [pc, #92]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f6a:	4b16      	ldr	r3, [pc, #88]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f70:	f7fc fa0c 	bl	800338c <HAL_GetTick>
 8006f74:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f76:	e008      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f78:	f7fc fa08 	bl	800338c <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d901      	bls.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e09f      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f8a:	4b0d      	ldr	r3, [pc, #52]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0f0      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	f040 8095 	bne.w	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006f9e:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fa4:	f7fc f9f2 	bl	800338c <HAL_GetTick>
 8006fa8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006faa:	e00f      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006fac:	f7fc f9ee 	bl	800338c <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d908      	bls.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e085      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006fbe:	bf00      	nop
 8006fc0:	40023800 	.word	0x40023800
 8006fc4:	42470068 	.word	0x42470068
 8006fc8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fcc:	4b41      	ldr	r3, [pc, #260]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd8:	d0e8      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0304 	and.w	r3, r3, #4
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d009      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d02b      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d127      	bne.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007002:	4b34      	ldr	r3, [pc, #208]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007008:	0c1b      	lsrs	r3, r3, #16
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	3301      	adds	r3, #1
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699a      	ldr	r2, [r3, #24]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	019b      	lsls	r3, r3, #6
 800701e:	431a      	orrs	r2, r3
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	3b01      	subs	r3, #1
 8007026:	041b      	lsls	r3, r3, #16
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	061b      	lsls	r3, r3, #24
 8007030:	4928      	ldr	r1, [pc, #160]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007032:	4313      	orrs	r3, r2
 8007034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007038:	4b26      	ldr	r3, [pc, #152]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800703a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800703e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	3b01      	subs	r3, #1
 8007048:	021b      	lsls	r3, r3, #8
 800704a:	4922      	ldr	r1, [pc, #136]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800705a:	2b00      	cmp	r3, #0
 800705c:	d01d      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007066:	d118      	bne.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007068:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800706a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706e:	0e1b      	lsrs	r3, r3, #24
 8007070:	f003 030f 	and.w	r3, r3, #15
 8007074:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	019b      	lsls	r3, r3, #6
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	3b01      	subs	r3, #1
 800708a:	041b      	lsls	r3, r3, #16
 800708c:	431a      	orrs	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	061b      	lsls	r3, r3, #24
 8007092:	4910      	ldr	r1, [pc, #64]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007094:	4313      	orrs	r3, r2
 8007096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800709a:	4b0f      	ldr	r3, [pc, #60]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800709c:	2201      	movs	r2, #1
 800709e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070a0:	f7fc f974 	bl	800338c <HAL_GetTick>
 80070a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80070a8:	f7fc f970 	bl	800338c <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e007      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070ba:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070c6:	d1ef      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3730      	adds	r7, #48	; 0x30
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	40023800 	.word	0x40023800
 80070d8:	42470070 	.word	0x42470070

080070dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070e0:	b0ae      	sub	sp, #184	; 0xb8
 80070e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007102:	4bcb      	ldr	r3, [pc, #812]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 030c 	and.w	r3, r3, #12
 800710a:	2b0c      	cmp	r3, #12
 800710c:	f200 8206 	bhi.w	800751c <HAL_RCC_GetSysClockFreq+0x440>
 8007110:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007116:	bf00      	nop
 8007118:	0800714d 	.word	0x0800714d
 800711c:	0800751d 	.word	0x0800751d
 8007120:	0800751d 	.word	0x0800751d
 8007124:	0800751d 	.word	0x0800751d
 8007128:	08007155 	.word	0x08007155
 800712c:	0800751d 	.word	0x0800751d
 8007130:	0800751d 	.word	0x0800751d
 8007134:	0800751d 	.word	0x0800751d
 8007138:	0800715d 	.word	0x0800715d
 800713c:	0800751d 	.word	0x0800751d
 8007140:	0800751d 	.word	0x0800751d
 8007144:	0800751d 	.word	0x0800751d
 8007148:	0800734d 	.word	0x0800734d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800714c:	4bb9      	ldr	r3, [pc, #740]	; (8007434 <HAL_RCC_GetSysClockFreq+0x358>)
 800714e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007152:	e1e7      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007154:	4bb8      	ldr	r3, [pc, #736]	; (8007438 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800715a:	e1e3      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800715c:	4bb4      	ldr	r3, [pc, #720]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007164:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007168:	4bb1      	ldr	r3, [pc, #708]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d071      	beq.n	8007258 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007174:	4bae      	ldr	r3, [pc, #696]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	099b      	lsrs	r3, r3, #6
 800717a:	2200      	movs	r2, #0
 800717c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007180:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007190:	2300      	movs	r3, #0
 8007192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800719a:	4622      	mov	r2, r4
 800719c:	462b      	mov	r3, r5
 800719e:	f04f 0000 	mov.w	r0, #0
 80071a2:	f04f 0100 	mov.w	r1, #0
 80071a6:	0159      	lsls	r1, r3, #5
 80071a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071ac:	0150      	lsls	r0, r2, #5
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4621      	mov	r1, r4
 80071b4:	1a51      	subs	r1, r2, r1
 80071b6:	6439      	str	r1, [r7, #64]	; 0x40
 80071b8:	4629      	mov	r1, r5
 80071ba:	eb63 0301 	sbc.w	r3, r3, r1
 80071be:	647b      	str	r3, [r7, #68]	; 0x44
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	f04f 0300 	mov.w	r3, #0
 80071c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80071cc:	4649      	mov	r1, r9
 80071ce:	018b      	lsls	r3, r1, #6
 80071d0:	4641      	mov	r1, r8
 80071d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071d6:	4641      	mov	r1, r8
 80071d8:	018a      	lsls	r2, r1, #6
 80071da:	4641      	mov	r1, r8
 80071dc:	1a51      	subs	r1, r2, r1
 80071de:	63b9      	str	r1, [r7, #56]	; 0x38
 80071e0:	4649      	mov	r1, r9
 80071e2:	eb63 0301 	sbc.w	r3, r3, r1
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80071f4:	4649      	mov	r1, r9
 80071f6:	00cb      	lsls	r3, r1, #3
 80071f8:	4641      	mov	r1, r8
 80071fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071fe:	4641      	mov	r1, r8
 8007200:	00ca      	lsls	r2, r1, #3
 8007202:	4610      	mov	r0, r2
 8007204:	4619      	mov	r1, r3
 8007206:	4603      	mov	r3, r0
 8007208:	4622      	mov	r2, r4
 800720a:	189b      	adds	r3, r3, r2
 800720c:	633b      	str	r3, [r7, #48]	; 0x30
 800720e:	462b      	mov	r3, r5
 8007210:	460a      	mov	r2, r1
 8007212:	eb42 0303 	adc.w	r3, r2, r3
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007224:	4629      	mov	r1, r5
 8007226:	024b      	lsls	r3, r1, #9
 8007228:	4621      	mov	r1, r4
 800722a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800722e:	4621      	mov	r1, r4
 8007230:	024a      	lsls	r2, r1, #9
 8007232:	4610      	mov	r0, r2
 8007234:	4619      	mov	r1, r3
 8007236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800723a:	2200      	movs	r2, #0
 800723c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007240:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007244:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007248:	f7f8 ffe2 	bl	8000210 <__aeabi_uldivmod>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4613      	mov	r3, r2
 8007252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007256:	e067      	b.n	8007328 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007258:	4b75      	ldr	r3, [pc, #468]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	099b      	lsrs	r3, r3, #6
 800725e:	2200      	movs	r2, #0
 8007260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007264:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007268:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800726c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007270:	67bb      	str	r3, [r7, #120]	; 0x78
 8007272:	2300      	movs	r3, #0
 8007274:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007276:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800727a:	4622      	mov	r2, r4
 800727c:	462b      	mov	r3, r5
 800727e:	f04f 0000 	mov.w	r0, #0
 8007282:	f04f 0100 	mov.w	r1, #0
 8007286:	0159      	lsls	r1, r3, #5
 8007288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800728c:	0150      	lsls	r0, r2, #5
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4621      	mov	r1, r4
 8007294:	1a51      	subs	r1, r2, r1
 8007296:	62b9      	str	r1, [r7, #40]	; 0x28
 8007298:	4629      	mov	r1, r5
 800729a:	eb63 0301 	sbc.w	r3, r3, r1
 800729e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	f04f 0300 	mov.w	r3, #0
 80072a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80072ac:	4649      	mov	r1, r9
 80072ae:	018b      	lsls	r3, r1, #6
 80072b0:	4641      	mov	r1, r8
 80072b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072b6:	4641      	mov	r1, r8
 80072b8:	018a      	lsls	r2, r1, #6
 80072ba:	4641      	mov	r1, r8
 80072bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80072c0:	4649      	mov	r1, r9
 80072c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072da:	4692      	mov	sl, r2
 80072dc:	469b      	mov	fp, r3
 80072de:	4623      	mov	r3, r4
 80072e0:	eb1a 0303 	adds.w	r3, sl, r3
 80072e4:	623b      	str	r3, [r7, #32]
 80072e6:	462b      	mov	r3, r5
 80072e8:	eb4b 0303 	adc.w	r3, fp, r3
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
 80072ee:	f04f 0200 	mov.w	r2, #0
 80072f2:	f04f 0300 	mov.w	r3, #0
 80072f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80072fa:	4629      	mov	r1, r5
 80072fc:	028b      	lsls	r3, r1, #10
 80072fe:	4621      	mov	r1, r4
 8007300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007304:	4621      	mov	r1, r4
 8007306:	028a      	lsls	r2, r1, #10
 8007308:	4610      	mov	r0, r2
 800730a:	4619      	mov	r1, r3
 800730c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007310:	2200      	movs	r2, #0
 8007312:	673b      	str	r3, [r7, #112]	; 0x70
 8007314:	677a      	str	r2, [r7, #116]	; 0x74
 8007316:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800731a:	f7f8 ff79 	bl	8000210 <__aeabi_uldivmod>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4613      	mov	r3, r2
 8007324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007328:	4b41      	ldr	r3, [pc, #260]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	0c1b      	lsrs	r3, r3, #16
 800732e:	f003 0303 	and.w	r3, r3, #3
 8007332:	3301      	adds	r3, #1
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800733a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800733e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007342:	fbb2 f3f3 	udiv	r3, r2, r3
 8007346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800734a:	e0eb      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800734c:	4b38      	ldr	r3, [pc, #224]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007358:	4b35      	ldr	r3, [pc, #212]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d06b      	beq.n	800743c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007364:	4b32      	ldr	r3, [pc, #200]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	099b      	lsrs	r3, r3, #6
 800736a:	2200      	movs	r2, #0
 800736c:	66bb      	str	r3, [r7, #104]	; 0x68
 800736e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007376:	663b      	str	r3, [r7, #96]	; 0x60
 8007378:	2300      	movs	r3, #0
 800737a:	667b      	str	r3, [r7, #100]	; 0x64
 800737c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007380:	4622      	mov	r2, r4
 8007382:	462b      	mov	r3, r5
 8007384:	f04f 0000 	mov.w	r0, #0
 8007388:	f04f 0100 	mov.w	r1, #0
 800738c:	0159      	lsls	r1, r3, #5
 800738e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007392:	0150      	lsls	r0, r2, #5
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	4621      	mov	r1, r4
 800739a:	1a51      	subs	r1, r2, r1
 800739c:	61b9      	str	r1, [r7, #24]
 800739e:	4629      	mov	r1, r5
 80073a0:	eb63 0301 	sbc.w	r3, r3, r1
 80073a4:	61fb      	str	r3, [r7, #28]
 80073a6:	f04f 0200 	mov.w	r2, #0
 80073aa:	f04f 0300 	mov.w	r3, #0
 80073ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80073b2:	4659      	mov	r1, fp
 80073b4:	018b      	lsls	r3, r1, #6
 80073b6:	4651      	mov	r1, sl
 80073b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073bc:	4651      	mov	r1, sl
 80073be:	018a      	lsls	r2, r1, #6
 80073c0:	4651      	mov	r1, sl
 80073c2:	ebb2 0801 	subs.w	r8, r2, r1
 80073c6:	4659      	mov	r1, fp
 80073c8:	eb63 0901 	sbc.w	r9, r3, r1
 80073cc:	f04f 0200 	mov.w	r2, #0
 80073d0:	f04f 0300 	mov.w	r3, #0
 80073d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073e0:	4690      	mov	r8, r2
 80073e2:	4699      	mov	r9, r3
 80073e4:	4623      	mov	r3, r4
 80073e6:	eb18 0303 	adds.w	r3, r8, r3
 80073ea:	613b      	str	r3, [r7, #16]
 80073ec:	462b      	mov	r3, r5
 80073ee:	eb49 0303 	adc.w	r3, r9, r3
 80073f2:	617b      	str	r3, [r7, #20]
 80073f4:	f04f 0200 	mov.w	r2, #0
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007400:	4629      	mov	r1, r5
 8007402:	024b      	lsls	r3, r1, #9
 8007404:	4621      	mov	r1, r4
 8007406:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800740a:	4621      	mov	r1, r4
 800740c:	024a      	lsls	r2, r1, #9
 800740e:	4610      	mov	r0, r2
 8007410:	4619      	mov	r1, r3
 8007412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007416:	2200      	movs	r2, #0
 8007418:	65bb      	str	r3, [r7, #88]	; 0x58
 800741a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800741c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007420:	f7f8 fef6 	bl	8000210 <__aeabi_uldivmod>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4613      	mov	r3, r2
 800742a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800742e:	e065      	b.n	80074fc <HAL_RCC_GetSysClockFreq+0x420>
 8007430:	40023800 	.word	0x40023800
 8007434:	00f42400 	.word	0x00f42400
 8007438:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800743c:	4b3d      	ldr	r3, [pc, #244]	; (8007534 <HAL_RCC_GetSysClockFreq+0x458>)
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	099b      	lsrs	r3, r3, #6
 8007442:	2200      	movs	r2, #0
 8007444:	4618      	mov	r0, r3
 8007446:	4611      	mov	r1, r2
 8007448:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800744c:	653b      	str	r3, [r7, #80]	; 0x50
 800744e:	2300      	movs	r3, #0
 8007450:	657b      	str	r3, [r7, #84]	; 0x54
 8007452:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007456:	4642      	mov	r2, r8
 8007458:	464b      	mov	r3, r9
 800745a:	f04f 0000 	mov.w	r0, #0
 800745e:	f04f 0100 	mov.w	r1, #0
 8007462:	0159      	lsls	r1, r3, #5
 8007464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007468:	0150      	lsls	r0, r2, #5
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	4641      	mov	r1, r8
 8007470:	1a51      	subs	r1, r2, r1
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	4649      	mov	r1, r9
 8007476:	eb63 0301 	sbc.w	r3, r3, r1
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	f04f 0200 	mov.w	r2, #0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007488:	4659      	mov	r1, fp
 800748a:	018b      	lsls	r3, r1, #6
 800748c:	4651      	mov	r1, sl
 800748e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007492:	4651      	mov	r1, sl
 8007494:	018a      	lsls	r2, r1, #6
 8007496:	4651      	mov	r1, sl
 8007498:	1a54      	subs	r4, r2, r1
 800749a:	4659      	mov	r1, fp
 800749c:	eb63 0501 	sbc.w	r5, r3, r1
 80074a0:	f04f 0200 	mov.w	r2, #0
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	00eb      	lsls	r3, r5, #3
 80074aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074ae:	00e2      	lsls	r2, r4, #3
 80074b0:	4614      	mov	r4, r2
 80074b2:	461d      	mov	r5, r3
 80074b4:	4643      	mov	r3, r8
 80074b6:	18e3      	adds	r3, r4, r3
 80074b8:	603b      	str	r3, [r7, #0]
 80074ba:	464b      	mov	r3, r9
 80074bc:	eb45 0303 	adc.w	r3, r5, r3
 80074c0:	607b      	str	r3, [r7, #4]
 80074c2:	f04f 0200 	mov.w	r2, #0
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074ce:	4629      	mov	r1, r5
 80074d0:	028b      	lsls	r3, r1, #10
 80074d2:	4621      	mov	r1, r4
 80074d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074d8:	4621      	mov	r1, r4
 80074da:	028a      	lsls	r2, r1, #10
 80074dc:	4610      	mov	r0, r2
 80074de:	4619      	mov	r1, r3
 80074e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074e4:	2200      	movs	r2, #0
 80074e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80074e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80074ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074ee:	f7f8 fe8f 	bl	8000210 <__aeabi_uldivmod>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4613      	mov	r3, r2
 80074f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80074fc:	4b0d      	ldr	r3, [pc, #52]	; (8007534 <HAL_RCC_GetSysClockFreq+0x458>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	0f1b      	lsrs	r3, r3, #28
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800750a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800750e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007512:	fbb2 f3f3 	udiv	r3, r2, r3
 8007516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800751a:	e003      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800751c:	4b06      	ldr	r3, [pc, #24]	; (8007538 <HAL_RCC_GetSysClockFreq+0x45c>)
 800751e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007522:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007524:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007528:	4618      	mov	r0, r3
 800752a:	37b8      	adds	r7, #184	; 0xb8
 800752c:	46bd      	mov	sp, r7
 800752e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007532:	bf00      	nop
 8007534:	40023800 	.word	0x40023800
 8007538:	00f42400 	.word	0x00f42400

0800753c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e28d      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 8083 	beq.w	8007662 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800755c:	4b94      	ldr	r3, [pc, #592]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f003 030c 	and.w	r3, r3, #12
 8007564:	2b04      	cmp	r3, #4
 8007566:	d019      	beq.n	800759c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007568:	4b91      	ldr	r3, [pc, #580]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007570:	2b08      	cmp	r3, #8
 8007572:	d106      	bne.n	8007582 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007574:	4b8e      	ldr	r3, [pc, #568]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800757c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007580:	d00c      	beq.n	800759c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007582:	4b8b      	ldr	r3, [pc, #556]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800758a:	2b0c      	cmp	r3, #12
 800758c:	d112      	bne.n	80075b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800758e:	4b88      	ldr	r3, [pc, #544]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800759a:	d10b      	bne.n	80075b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800759c:	4b84      	ldr	r3, [pc, #528]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d05b      	beq.n	8007660 <HAL_RCC_OscConfig+0x124>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d157      	bne.n	8007660 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e25a      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075bc:	d106      	bne.n	80075cc <HAL_RCC_OscConfig+0x90>
 80075be:	4b7c      	ldr	r3, [pc, #496]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a7b      	ldr	r2, [pc, #492]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 80075c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	e01d      	b.n	8007608 <HAL_RCC_OscConfig+0xcc>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075d4:	d10c      	bne.n	80075f0 <HAL_RCC_OscConfig+0xb4>
 80075d6:	4b76      	ldr	r3, [pc, #472]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a75      	ldr	r2, [pc, #468]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 80075dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	4b73      	ldr	r3, [pc, #460]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a72      	ldr	r2, [pc, #456]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 80075e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	e00b      	b.n	8007608 <HAL_RCC_OscConfig+0xcc>
 80075f0:	4b6f      	ldr	r3, [pc, #444]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a6e      	ldr	r2, [pc, #440]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 80075f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	4b6c      	ldr	r3, [pc, #432]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a6b      	ldr	r2, [pc, #428]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 8007602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d013      	beq.n	8007638 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007610:	f7fb febc 	bl	800338c <HAL_GetTick>
 8007614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007616:	e008      	b.n	800762a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007618:	f7fb feb8 	bl	800338c <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b64      	cmp	r3, #100	; 0x64
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e21f      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800762a:	4b61      	ldr	r3, [pc, #388]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0f0      	beq.n	8007618 <HAL_RCC_OscConfig+0xdc>
 8007636:	e014      	b.n	8007662 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007638:	f7fb fea8 	bl	800338c <HAL_GetTick>
 800763c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800763e:	e008      	b.n	8007652 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007640:	f7fb fea4 	bl	800338c <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b64      	cmp	r3, #100	; 0x64
 800764c:	d901      	bls.n	8007652 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e20b      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007652:	4b57      	ldr	r3, [pc, #348]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1f0      	bne.n	8007640 <HAL_RCC_OscConfig+0x104>
 800765e:	e000      	b.n	8007662 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d06f      	beq.n	800774e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800766e:	4b50      	ldr	r3, [pc, #320]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f003 030c 	and.w	r3, r3, #12
 8007676:	2b00      	cmp	r3, #0
 8007678:	d017      	beq.n	80076aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800767a:	4b4d      	ldr	r3, [pc, #308]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007682:	2b08      	cmp	r3, #8
 8007684:	d105      	bne.n	8007692 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007686:	4b4a      	ldr	r3, [pc, #296]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007692:	4b47      	ldr	r3, [pc, #284]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800769a:	2b0c      	cmp	r3, #12
 800769c:	d11c      	bne.n	80076d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800769e:	4b44      	ldr	r3, [pc, #272]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d116      	bne.n	80076d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076aa:	4b41      	ldr	r3, [pc, #260]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d005      	beq.n	80076c2 <HAL_RCC_OscConfig+0x186>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d001      	beq.n	80076c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e1d3      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076c2:	4b3b      	ldr	r3, [pc, #236]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	4937      	ldr	r1, [pc, #220]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076d6:	e03a      	b.n	800774e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d020      	beq.n	8007722 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076e0:	4b34      	ldr	r3, [pc, #208]	; (80077b4 <HAL_RCC_OscConfig+0x278>)
 80076e2:	2201      	movs	r2, #1
 80076e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e6:	f7fb fe51 	bl	800338c <HAL_GetTick>
 80076ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ec:	e008      	b.n	8007700 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076ee:	f7fb fe4d 	bl	800338c <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d901      	bls.n	8007700 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e1b4      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007700:	4b2b      	ldr	r3, [pc, #172]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0f0      	beq.n	80076ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800770c:	4b28      	ldr	r3, [pc, #160]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	4925      	ldr	r1, [pc, #148]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 800771c:	4313      	orrs	r3, r2
 800771e:	600b      	str	r3, [r1, #0]
 8007720:	e015      	b.n	800774e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007722:	4b24      	ldr	r3, [pc, #144]	; (80077b4 <HAL_RCC_OscConfig+0x278>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007728:	f7fb fe30 	bl	800338c <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007730:	f7fb fe2c 	bl	800338c <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e193      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007742:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f0      	bne.n	8007730 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d036      	beq.n	80077c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d016      	beq.n	8007790 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007762:	4b15      	ldr	r3, [pc, #84]	; (80077b8 <HAL_RCC_OscConfig+0x27c>)
 8007764:	2201      	movs	r2, #1
 8007766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007768:	f7fb fe10 	bl	800338c <HAL_GetTick>
 800776c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800776e:	e008      	b.n	8007782 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007770:	f7fb fe0c 	bl	800338c <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e173      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <HAL_RCC_OscConfig+0x274>)
 8007784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0f0      	beq.n	8007770 <HAL_RCC_OscConfig+0x234>
 800778e:	e01b      	b.n	80077c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007790:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <HAL_RCC_OscConfig+0x27c>)
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007796:	f7fb fdf9 	bl	800338c <HAL_GetTick>
 800779a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800779c:	e00e      	b.n	80077bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800779e:	f7fb fdf5 	bl	800338c <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d907      	bls.n	80077bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e15c      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
 80077b0:	40023800 	.word	0x40023800
 80077b4:	42470000 	.word	0x42470000
 80077b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077bc:	4b8a      	ldr	r3, [pc, #552]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 80077be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1ea      	bne.n	800779e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0304 	and.w	r3, r3, #4
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 8097 	beq.w	8007904 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077d6:	2300      	movs	r3, #0
 80077d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077da:	4b83      	ldr	r3, [pc, #524]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10f      	bne.n	8007806 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077e6:	2300      	movs	r3, #0
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	4b7f      	ldr	r3, [pc, #508]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	4a7e      	ldr	r2, [pc, #504]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 80077f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f4:	6413      	str	r3, [r2, #64]	; 0x40
 80077f6:	4b7c      	ldr	r3, [pc, #496]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fe:	60bb      	str	r3, [r7, #8]
 8007800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007802:	2301      	movs	r3, #1
 8007804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007806:	4b79      	ldr	r3, [pc, #484]	; (80079ec <HAL_RCC_OscConfig+0x4b0>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780e:	2b00      	cmp	r3, #0
 8007810:	d118      	bne.n	8007844 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007812:	4b76      	ldr	r3, [pc, #472]	; (80079ec <HAL_RCC_OscConfig+0x4b0>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a75      	ldr	r2, [pc, #468]	; (80079ec <HAL_RCC_OscConfig+0x4b0>)
 8007818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800781c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800781e:	f7fb fdb5 	bl	800338c <HAL_GetTick>
 8007822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007824:	e008      	b.n	8007838 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007826:	f7fb fdb1 	bl	800338c <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	2b02      	cmp	r3, #2
 8007832:	d901      	bls.n	8007838 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e118      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007838:	4b6c      	ldr	r3, [pc, #432]	; (80079ec <HAL_RCC_OscConfig+0x4b0>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007840:	2b00      	cmp	r3, #0
 8007842:	d0f0      	beq.n	8007826 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d106      	bne.n	800785a <HAL_RCC_OscConfig+0x31e>
 800784c:	4b66      	ldr	r3, [pc, #408]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 800784e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007850:	4a65      	ldr	r2, [pc, #404]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	6713      	str	r3, [r2, #112]	; 0x70
 8007858:	e01c      	b.n	8007894 <HAL_RCC_OscConfig+0x358>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	2b05      	cmp	r3, #5
 8007860:	d10c      	bne.n	800787c <HAL_RCC_OscConfig+0x340>
 8007862:	4b61      	ldr	r3, [pc, #388]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 8007864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007866:	4a60      	ldr	r2, [pc, #384]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 8007868:	f043 0304 	orr.w	r3, r3, #4
 800786c:	6713      	str	r3, [r2, #112]	; 0x70
 800786e:	4b5e      	ldr	r3, [pc, #376]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 8007870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007872:	4a5d      	ldr	r2, [pc, #372]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 8007874:	f043 0301 	orr.w	r3, r3, #1
 8007878:	6713      	str	r3, [r2, #112]	; 0x70
 800787a:	e00b      	b.n	8007894 <HAL_RCC_OscConfig+0x358>
 800787c:	4b5a      	ldr	r3, [pc, #360]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 800787e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007880:	4a59      	ldr	r2, [pc, #356]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 8007882:	f023 0301 	bic.w	r3, r3, #1
 8007886:	6713      	str	r3, [r2, #112]	; 0x70
 8007888:	4b57      	ldr	r3, [pc, #348]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 800788a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788c:	4a56      	ldr	r2, [pc, #344]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 800788e:	f023 0304 	bic.w	r3, r3, #4
 8007892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d015      	beq.n	80078c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800789c:	f7fb fd76 	bl	800338c <HAL_GetTick>
 80078a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078a2:	e00a      	b.n	80078ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078a4:	f7fb fd72 	bl	800338c <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e0d7      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ba:	4b4b      	ldr	r3, [pc, #300]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 80078bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0ee      	beq.n	80078a4 <HAL_RCC_OscConfig+0x368>
 80078c6:	e014      	b.n	80078f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c8:	f7fb fd60 	bl	800338c <HAL_GetTick>
 80078cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078ce:	e00a      	b.n	80078e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078d0:	f7fb fd5c 	bl	800338c <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	f241 3288 	movw	r2, #5000	; 0x1388
 80078de:	4293      	cmp	r3, r2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e0c1      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e6:	4b40      	ldr	r3, [pc, #256]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 80078e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1ee      	bne.n	80078d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d105      	bne.n	8007904 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078f8:	4b3b      	ldr	r3, [pc, #236]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 80078fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fc:	4a3a      	ldr	r2, [pc, #232]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 80078fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007902:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 80ad 	beq.w	8007a68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800790e:	4b36      	ldr	r3, [pc, #216]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f003 030c 	and.w	r3, r3, #12
 8007916:	2b08      	cmp	r3, #8
 8007918:	d060      	beq.n	80079dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d145      	bne.n	80079ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007922:	4b33      	ldr	r3, [pc, #204]	; (80079f0 <HAL_RCC_OscConfig+0x4b4>)
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007928:	f7fb fd30 	bl	800338c <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007930:	f7fb fd2c 	bl	800338c <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e093      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007942:	4b29      	ldr	r3, [pc, #164]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1f0      	bne.n	8007930 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	69da      	ldr	r2, [r3, #28]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	019b      	lsls	r3, r3, #6
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	085b      	lsrs	r3, r3, #1
 8007966:	3b01      	subs	r3, #1
 8007968:	041b      	lsls	r3, r3, #16
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	061b      	lsls	r3, r3, #24
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	071b      	lsls	r3, r3, #28
 800797a:	491b      	ldr	r1, [pc, #108]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 800797c:	4313      	orrs	r3, r2
 800797e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007980:	4b1b      	ldr	r3, [pc, #108]	; (80079f0 <HAL_RCC_OscConfig+0x4b4>)
 8007982:	2201      	movs	r2, #1
 8007984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007986:	f7fb fd01 	bl	800338c <HAL_GetTick>
 800798a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800798c:	e008      	b.n	80079a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800798e:	f7fb fcfd 	bl	800338c <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	2b02      	cmp	r3, #2
 800799a:	d901      	bls.n	80079a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e064      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079a0:	4b11      	ldr	r3, [pc, #68]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0f0      	beq.n	800798e <HAL_RCC_OscConfig+0x452>
 80079ac:	e05c      	b.n	8007a68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ae:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <HAL_RCC_OscConfig+0x4b4>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b4:	f7fb fcea 	bl	800338c <HAL_GetTick>
 80079b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ba:	e008      	b.n	80079ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079bc:	f7fb fce6 	bl	800338c <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e04d      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ce:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <HAL_RCC_OscConfig+0x4ac>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1f0      	bne.n	80079bc <HAL_RCC_OscConfig+0x480>
 80079da:	e045      	b.n	8007a68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d107      	bne.n	80079f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e040      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
 80079e8:	40023800 	.word	0x40023800
 80079ec:	40007000 	.word	0x40007000
 80079f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079f4:	4b1f      	ldr	r3, [pc, #124]	; (8007a74 <HAL_RCC_OscConfig+0x538>)
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d030      	beq.n	8007a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d129      	bne.n	8007a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d122      	bne.n	8007a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a24:	4013      	ands	r3, r2
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d119      	bne.n	8007a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	085b      	lsrs	r3, r3, #1
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d10f      	bne.n	8007a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d107      	bne.n	8007a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d001      	beq.n	8007a68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	40023800 	.word	0x40023800

08007a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e041      	b.n	8007b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d106      	bne.n	8007aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7fb f842 	bl	8002b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	f000 ff96 	bl	80089e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d001      	beq.n	8007b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e04e      	b.n	8007bce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0201 	orr.w	r2, r2, #1
 8007b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a23      	ldr	r2, [pc, #140]	; (8007bdc <HAL_TIM_Base_Start_IT+0xc4>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d022      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5a:	d01d      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a1f      	ldr	r2, [pc, #124]	; (8007be0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d018      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a1e      	ldr	r2, [pc, #120]	; (8007be4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d013      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a1c      	ldr	r2, [pc, #112]	; (8007be8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00e      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a1b      	ldr	r2, [pc, #108]	; (8007bec <HAL_TIM_Base_Start_IT+0xd4>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d009      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a19      	ldr	r2, [pc, #100]	; (8007bf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d004      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x80>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a18      	ldr	r2, [pc, #96]	; (8007bf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d111      	bne.n	8007bbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b06      	cmp	r3, #6
 8007ba8:	d010      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f042 0201 	orr.w	r2, r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bba:	e007      	b.n	8007bcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f042 0201 	orr.w	r2, r2, #1
 8007bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	40010000 	.word	0x40010000
 8007be0:	40000400 	.word	0x40000400
 8007be4:	40000800 	.word	0x40000800
 8007be8:	40000c00 	.word	0x40000c00
 8007bec:	40010400 	.word	0x40010400
 8007bf0:	40014000 	.word	0x40014000
 8007bf4:	40001800 	.word	0x40001800

08007bf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e041      	b.n	8007c8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f839 	bl	8007c96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f000 fed6 	bl	80089e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
	...

08007cac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d109      	bne.n	8007cd0 <HAL_TIM_PWM_Start+0x24>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	bf14      	ite	ne
 8007cc8:	2301      	movne	r3, #1
 8007cca:	2300      	moveq	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	e022      	b.n	8007d16 <HAL_TIM_PWM_Start+0x6a>
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b04      	cmp	r3, #4
 8007cd4:	d109      	bne.n	8007cea <HAL_TIM_PWM_Start+0x3e>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	bf14      	ite	ne
 8007ce2:	2301      	movne	r3, #1
 8007ce4:	2300      	moveq	r3, #0
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	e015      	b.n	8007d16 <HAL_TIM_PWM_Start+0x6a>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	d109      	bne.n	8007d04 <HAL_TIM_PWM_Start+0x58>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	bf14      	ite	ne
 8007cfc:	2301      	movne	r3, #1
 8007cfe:	2300      	moveq	r3, #0
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	e008      	b.n	8007d16 <HAL_TIM_PWM_Start+0x6a>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	bf14      	ite	ne
 8007d10:	2301      	movne	r3, #1
 8007d12:	2300      	moveq	r3, #0
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e07c      	b.n	8007e18 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d104      	bne.n	8007d2e <HAL_TIM_PWM_Start+0x82>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d2c:	e013      	b.n	8007d56 <HAL_TIM_PWM_Start+0xaa>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d104      	bne.n	8007d3e <HAL_TIM_PWM_Start+0x92>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d3c:	e00b      	b.n	8007d56 <HAL_TIM_PWM_Start+0xaa>
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d104      	bne.n	8007d4e <HAL_TIM_PWM_Start+0xa2>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d4c:	e003      	b.n	8007d56 <HAL_TIM_PWM_Start+0xaa>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f001 f92c 	bl	8008fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a2d      	ldr	r2, [pc, #180]	; (8007e20 <HAL_TIM_PWM_Start+0x174>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d004      	beq.n	8007d78 <HAL_TIM_PWM_Start+0xcc>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a2c      	ldr	r2, [pc, #176]	; (8007e24 <HAL_TIM_PWM_Start+0x178>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d101      	bne.n	8007d7c <HAL_TIM_PWM_Start+0xd0>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e000      	b.n	8007d7e <HAL_TIM_PWM_Start+0xd2>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d007      	beq.n	8007d92 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a22      	ldr	r2, [pc, #136]	; (8007e20 <HAL_TIM_PWM_Start+0x174>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d022      	beq.n	8007de2 <HAL_TIM_PWM_Start+0x136>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007da4:	d01d      	beq.n	8007de2 <HAL_TIM_PWM_Start+0x136>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a1f      	ldr	r2, [pc, #124]	; (8007e28 <HAL_TIM_PWM_Start+0x17c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d018      	beq.n	8007de2 <HAL_TIM_PWM_Start+0x136>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a1d      	ldr	r2, [pc, #116]	; (8007e2c <HAL_TIM_PWM_Start+0x180>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d013      	beq.n	8007de2 <HAL_TIM_PWM_Start+0x136>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a1c      	ldr	r2, [pc, #112]	; (8007e30 <HAL_TIM_PWM_Start+0x184>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d00e      	beq.n	8007de2 <HAL_TIM_PWM_Start+0x136>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a16      	ldr	r2, [pc, #88]	; (8007e24 <HAL_TIM_PWM_Start+0x178>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d009      	beq.n	8007de2 <HAL_TIM_PWM_Start+0x136>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a18      	ldr	r2, [pc, #96]	; (8007e34 <HAL_TIM_PWM_Start+0x188>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d004      	beq.n	8007de2 <HAL_TIM_PWM_Start+0x136>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a16      	ldr	r2, [pc, #88]	; (8007e38 <HAL_TIM_PWM_Start+0x18c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d111      	bne.n	8007e06 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b06      	cmp	r3, #6
 8007df2:	d010      	beq.n	8007e16 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0201 	orr.w	r2, r2, #1
 8007e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e04:	e007      	b.n	8007e16 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f042 0201 	orr.w	r2, r2, #1
 8007e14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	40010000 	.word	0x40010000
 8007e24:	40010400 	.word	0x40010400
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40000c00 	.word	0x40000c00
 8007e34:	40014000 	.word	0x40014000
 8007e38:	40001800 	.word	0x40001800

08007e3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f001 f8b4 	bl	8008fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a2e      	ldr	r2, [pc, #184]	; (8007f14 <HAL_TIM_PWM_Stop+0xd8>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d004      	beq.n	8007e68 <HAL_TIM_PWM_Stop+0x2c>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a2d      	ldr	r2, [pc, #180]	; (8007f18 <HAL_TIM_PWM_Stop+0xdc>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d101      	bne.n	8007e6c <HAL_TIM_PWM_Stop+0x30>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e000      	b.n	8007e6e <HAL_TIM_PWM_Stop+0x32>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d017      	beq.n	8007ea2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6a1a      	ldr	r2, [r3, #32]
 8007e78:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10f      	bne.n	8007ea2 <HAL_TIM_PWM_Stop+0x66>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6a1a      	ldr	r2, [r3, #32]
 8007e88:	f240 4344 	movw	r3, #1092	; 0x444
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d107      	bne.n	8007ea2 <HAL_TIM_PWM_Stop+0x66>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ea0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6a1a      	ldr	r2, [r3, #32]
 8007ea8:	f241 1311 	movw	r3, #4369	; 0x1111
 8007eac:	4013      	ands	r3, r2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10f      	bne.n	8007ed2 <HAL_TIM_PWM_Stop+0x96>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6a1a      	ldr	r2, [r3, #32]
 8007eb8:	f240 4344 	movw	r3, #1092	; 0x444
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d107      	bne.n	8007ed2 <HAL_TIM_PWM_Stop+0x96>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0201 	bic.w	r2, r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d104      	bne.n	8007ee2 <HAL_TIM_PWM_Stop+0xa6>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ee0:	e013      	b.n	8007f0a <HAL_TIM_PWM_Stop+0xce>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d104      	bne.n	8007ef2 <HAL_TIM_PWM_Stop+0xb6>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ef0:	e00b      	b.n	8007f0a <HAL_TIM_PWM_Stop+0xce>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d104      	bne.n	8007f02 <HAL_TIM_PWM_Stop+0xc6>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f00:	e003      	b.n	8007f0a <HAL_TIM_PWM_Stop+0xce>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40010000 	.word	0x40010000
 8007f18:	40010400 	.word	0x40010400

08007f1c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d109      	bne.n	8007f48 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	bf0c      	ite	eq
 8007f40:	2301      	moveq	r3, #1
 8007f42:	2300      	movne	r3, #0
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	e022      	b.n	8007f8e <HAL_TIM_PWM_Start_DMA+0x72>
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d109      	bne.n	8007f62 <HAL_TIM_PWM_Start_DMA+0x46>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	bf0c      	ite	eq
 8007f5a:	2301      	moveq	r3, #1
 8007f5c:	2300      	movne	r3, #0
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	e015      	b.n	8007f8e <HAL_TIM_PWM_Start_DMA+0x72>
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	d109      	bne.n	8007f7c <HAL_TIM_PWM_Start_DMA+0x60>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	bf0c      	ite	eq
 8007f74:	2301      	moveq	r3, #1
 8007f76:	2300      	movne	r3, #0
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	e008      	b.n	8007f8e <HAL_TIM_PWM_Start_DMA+0x72>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	bf0c      	ite	eq
 8007f88:	2301      	moveq	r3, #1
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007f92:	2302      	movs	r3, #2
 8007f94:	e171      	b.n	800827a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d109      	bne.n	8007fb0 <HAL_TIM_PWM_Start_DMA+0x94>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	bf0c      	ite	eq
 8007fa8:	2301      	moveq	r3, #1
 8007faa:	2300      	movne	r3, #0
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	e022      	b.n	8007ff6 <HAL_TIM_PWM_Start_DMA+0xda>
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d109      	bne.n	8007fca <HAL_TIM_PWM_Start_DMA+0xae>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	bf0c      	ite	eq
 8007fc2:	2301      	moveq	r3, #1
 8007fc4:	2300      	movne	r3, #0
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	e015      	b.n	8007ff6 <HAL_TIM_PWM_Start_DMA+0xda>
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d109      	bne.n	8007fe4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	bf0c      	ite	eq
 8007fdc:	2301      	moveq	r3, #1
 8007fde:	2300      	movne	r3, #0
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	e008      	b.n	8007ff6 <HAL_TIM_PWM_Start_DMA+0xda>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	bf0c      	ite	eq
 8007ff0:	2301      	moveq	r3, #1
 8007ff2:	2300      	movne	r3, #0
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d024      	beq.n	8008044 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d104      	bne.n	800800a <HAL_TIM_PWM_Start_DMA+0xee>
 8008000:	887b      	ldrh	r3, [r7, #2]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e137      	b.n	800827a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d104      	bne.n	800801a <HAL_TIM_PWM_Start_DMA+0xfe>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008018:	e016      	b.n	8008048 <HAL_TIM_PWM_Start_DMA+0x12c>
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b04      	cmp	r3, #4
 800801e:	d104      	bne.n	800802a <HAL_TIM_PWM_Start_DMA+0x10e>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008028:	e00e      	b.n	8008048 <HAL_TIM_PWM_Start_DMA+0x12c>
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	2b08      	cmp	r3, #8
 800802e:	d104      	bne.n	800803a <HAL_TIM_PWM_Start_DMA+0x11e>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008038:	e006      	b.n	8008048 <HAL_TIM_PWM_Start_DMA+0x12c>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2202      	movs	r2, #2
 800803e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008042:	e001      	b.n	8008048 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e118      	b.n	800827a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2b0c      	cmp	r3, #12
 800804c:	f200 80ae 	bhi.w	80081ac <HAL_TIM_PWM_Start_DMA+0x290>
 8008050:	a201      	add	r2, pc, #4	; (adr r2, 8008058 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008056:	bf00      	nop
 8008058:	0800808d 	.word	0x0800808d
 800805c:	080081ad 	.word	0x080081ad
 8008060:	080081ad 	.word	0x080081ad
 8008064:	080081ad 	.word	0x080081ad
 8008068:	080080d5 	.word	0x080080d5
 800806c:	080081ad 	.word	0x080081ad
 8008070:	080081ad 	.word	0x080081ad
 8008074:	080081ad 	.word	0x080081ad
 8008078:	0800811d 	.word	0x0800811d
 800807c:	080081ad 	.word	0x080081ad
 8008080:	080081ad 	.word	0x080081ad
 8008084:	080081ad 	.word	0x080081ad
 8008088:	08008165 	.word	0x08008165
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	4a7c      	ldr	r2, [pc, #496]	; (8008284 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008092:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	4a7b      	ldr	r2, [pc, #492]	; (8008288 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800809a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	4a7a      	ldr	r2, [pc, #488]	; (800828c <HAL_TIM_PWM_Start_DMA+0x370>)
 80080a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3334      	adds	r3, #52	; 0x34
 80080b0:	461a      	mov	r2, r3
 80080b2:	887b      	ldrh	r3, [r7, #2]
 80080b4:	f7fc fa92 	bl	80045dc <HAL_DMA_Start_IT>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e0db      	b.n	800827a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68da      	ldr	r2, [r3, #12]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080d0:	60da      	str	r2, [r3, #12]
      break;
 80080d2:	e06e      	b.n	80081b2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d8:	4a6a      	ldr	r2, [pc, #424]	; (8008284 <HAL_TIM_PWM_Start_DMA+0x368>)
 80080da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e0:	4a69      	ldr	r2, [pc, #420]	; (8008288 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80080e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	4a68      	ldr	r2, [pc, #416]	; (800828c <HAL_TIM_PWM_Start_DMA+0x370>)
 80080ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3338      	adds	r3, #56	; 0x38
 80080f8:	461a      	mov	r2, r3
 80080fa:	887b      	ldrh	r3, [r7, #2]
 80080fc:	f7fc fa6e 	bl	80045dc <HAL_DMA_Start_IT>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e0b7      	b.n	800827a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008118:	60da      	str	r2, [r3, #12]
      break;
 800811a:	e04a      	b.n	80081b2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008120:	4a58      	ldr	r2, [pc, #352]	; (8008284 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008122:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008128:	4a57      	ldr	r2, [pc, #348]	; (8008288 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800812a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008130:	4a56      	ldr	r2, [pc, #344]	; (800828c <HAL_TIM_PWM_Start_DMA+0x370>)
 8008132:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	333c      	adds	r3, #60	; 0x3c
 8008140:	461a      	mov	r2, r3
 8008142:	887b      	ldrh	r3, [r7, #2]
 8008144:	f7fc fa4a 	bl	80045dc <HAL_DMA_Start_IT>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e093      	b.n	800827a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68da      	ldr	r2, [r3, #12]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008160:	60da      	str	r2, [r3, #12]
      break;
 8008162:	e026      	b.n	80081b2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008168:	4a46      	ldr	r2, [pc, #280]	; (8008284 <HAL_TIM_PWM_Start_DMA+0x368>)
 800816a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008170:	4a45      	ldr	r2, [pc, #276]	; (8008288 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008172:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008178:	4a44      	ldr	r2, [pc, #272]	; (800828c <HAL_TIM_PWM_Start_DMA+0x370>)
 800817a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008180:	6879      	ldr	r1, [r7, #4]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3340      	adds	r3, #64	; 0x40
 8008188:	461a      	mov	r2, r3
 800818a:	887b      	ldrh	r3, [r7, #2]
 800818c:	f7fc fa26 	bl	80045dc <HAL_DMA_Start_IT>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e06f      	b.n	800827a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68da      	ldr	r2, [r3, #12]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081a8:	60da      	str	r2, [r3, #12]
      break;
 80081aa:	e002      	b.n	80081b2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	75fb      	strb	r3, [r7, #23]
      break;
 80081b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d15f      	bne.n	8008278 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2201      	movs	r2, #1
 80081be:	68b9      	ldr	r1, [r7, #8]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 fefb 	bl	8008fbc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a31      	ldr	r2, [pc, #196]	; (8008290 <HAL_TIM_PWM_Start_DMA+0x374>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d004      	beq.n	80081da <HAL_TIM_PWM_Start_DMA+0x2be>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a2f      	ldr	r2, [pc, #188]	; (8008294 <HAL_TIM_PWM_Start_DMA+0x378>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d101      	bne.n	80081de <HAL_TIM_PWM_Start_DMA+0x2c2>
 80081da:	2301      	movs	r3, #1
 80081dc:	e000      	b.n	80081e0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80081de:	2300      	movs	r3, #0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d007      	beq.n	80081f4 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a25      	ldr	r2, [pc, #148]	; (8008290 <HAL_TIM_PWM_Start_DMA+0x374>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d022      	beq.n	8008244 <HAL_TIM_PWM_Start_DMA+0x328>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008206:	d01d      	beq.n	8008244 <HAL_TIM_PWM_Start_DMA+0x328>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a22      	ldr	r2, [pc, #136]	; (8008298 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d018      	beq.n	8008244 <HAL_TIM_PWM_Start_DMA+0x328>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a21      	ldr	r2, [pc, #132]	; (800829c <HAL_TIM_PWM_Start_DMA+0x380>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d013      	beq.n	8008244 <HAL_TIM_PWM_Start_DMA+0x328>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a1f      	ldr	r2, [pc, #124]	; (80082a0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d00e      	beq.n	8008244 <HAL_TIM_PWM_Start_DMA+0x328>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a1a      	ldr	r2, [pc, #104]	; (8008294 <HAL_TIM_PWM_Start_DMA+0x378>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d009      	beq.n	8008244 <HAL_TIM_PWM_Start_DMA+0x328>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a1b      	ldr	r2, [pc, #108]	; (80082a4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d004      	beq.n	8008244 <HAL_TIM_PWM_Start_DMA+0x328>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a1a      	ldr	r2, [pc, #104]	; (80082a8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d111      	bne.n	8008268 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f003 0307 	and.w	r3, r3, #7
 800824e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	2b06      	cmp	r3, #6
 8008254:	d010      	beq.n	8008278 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f042 0201 	orr.w	r2, r2, #1
 8008264:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008266:	e007      	b.n	8008278 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f042 0201 	orr.w	r2, r2, #1
 8008276:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008278:	7dfb      	ldrb	r3, [r7, #23]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	080088d9 	.word	0x080088d9
 8008288:	08008981 	.word	0x08008981
 800828c:	08008847 	.word	0x08008847
 8008290:	40010000 	.word	0x40010000
 8008294:	40010400 	.word	0x40010400
 8008298:	40000400 	.word	0x40000400
 800829c:	40000800 	.word	0x40000800
 80082a0:	40000c00 	.word	0x40000c00
 80082a4:	40014000 	.word	0x40014000
 80082a8:	40001800 	.word	0x40001800

080082ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d122      	bne.n	8008308 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d11b      	bne.n	8008308 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f06f 0202 	mvn.w	r2, #2
 80082d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa77 	bl	80087e2 <HAL_TIM_IC_CaptureCallback>
 80082f4:	e005      	b.n	8008302 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fa69 	bl	80087ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fa7a 	bl	80087f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0304 	and.w	r3, r3, #4
 8008312:	2b04      	cmp	r3, #4
 8008314:	d122      	bne.n	800835c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b04      	cmp	r3, #4
 8008322:	d11b      	bne.n	800835c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f06f 0204 	mvn.w	r2, #4
 800832c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2202      	movs	r2, #2
 8008332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa4d 	bl	80087e2 <HAL_TIM_IC_CaptureCallback>
 8008348:	e005      	b.n	8008356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa3f 	bl	80087ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fa50 	bl	80087f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	f003 0308 	and.w	r3, r3, #8
 8008366:	2b08      	cmp	r3, #8
 8008368:	d122      	bne.n	80083b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b08      	cmp	r3, #8
 8008376:	d11b      	bne.n	80083b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f06f 0208 	mvn.w	r2, #8
 8008380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2204      	movs	r2, #4
 8008386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa23 	bl	80087e2 <HAL_TIM_IC_CaptureCallback>
 800839c:	e005      	b.n	80083aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa15 	bl	80087ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fa26 	bl	80087f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	f003 0310 	and.w	r3, r3, #16
 80083ba:	2b10      	cmp	r3, #16
 80083bc:	d122      	bne.n	8008404 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f003 0310 	and.w	r3, r3, #16
 80083c8:	2b10      	cmp	r3, #16
 80083ca:	d11b      	bne.n	8008404 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f06f 0210 	mvn.w	r2, #16
 80083d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2208      	movs	r2, #8
 80083da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f9f9 	bl	80087e2 <HAL_TIM_IC_CaptureCallback>
 80083f0:	e005      	b.n	80083fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f9eb 	bl	80087ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f9fc 	bl	80087f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b01      	cmp	r3, #1
 8008410:	d10e      	bne.n	8008430 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b01      	cmp	r3, #1
 800841e:	d107      	bne.n	8008430 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f06f 0201 	mvn.w	r2, #1
 8008428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7f8 feca 	bl	80011c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843a:	2b80      	cmp	r3, #128	; 0x80
 800843c:	d10e      	bne.n	800845c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008448:	2b80      	cmp	r3, #128	; 0x80
 800844a:	d107      	bne.n	800845c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 f946 	bl	80096e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008466:	2b40      	cmp	r3, #64	; 0x40
 8008468:	d10e      	bne.n	8008488 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008474:	2b40      	cmp	r3, #64	; 0x40
 8008476:	d107      	bne.n	8008488 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f9cb 	bl	800881e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b20      	cmp	r3, #32
 8008494:	d10e      	bne.n	80084b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d107      	bne.n	80084b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f06f 0220 	mvn.w	r2, #32
 80084ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 f910 	bl	80096d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084d6:	2302      	movs	r3, #2
 80084d8:	e0ae      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b0c      	cmp	r3, #12
 80084e6:	f200 809f 	bhi.w	8008628 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80084ea:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008525 	.word	0x08008525
 80084f4:	08008629 	.word	0x08008629
 80084f8:	08008629 	.word	0x08008629
 80084fc:	08008629 	.word	0x08008629
 8008500:	08008565 	.word	0x08008565
 8008504:	08008629 	.word	0x08008629
 8008508:	08008629 	.word	0x08008629
 800850c:	08008629 	.word	0x08008629
 8008510:	080085a7 	.word	0x080085a7
 8008514:	08008629 	.word	0x08008629
 8008518:	08008629 	.word	0x08008629
 800851c:	08008629 	.word	0x08008629
 8008520:	080085e7 	.word	0x080085e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68b9      	ldr	r1, [r7, #8]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fafc 	bl	8008b28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699a      	ldr	r2, [r3, #24]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0208 	orr.w	r2, r2, #8
 800853e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 0204 	bic.w	r2, r2, #4
 800854e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6999      	ldr	r1, [r3, #24]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	691a      	ldr	r2, [r3, #16]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	619a      	str	r2, [r3, #24]
      break;
 8008562:	e064      	b.n	800862e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68b9      	ldr	r1, [r7, #8]
 800856a:	4618      	mov	r0, r3
 800856c:	f000 fb4c 	bl	8008c08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	699a      	ldr	r2, [r3, #24]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800857e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699a      	ldr	r2, [r3, #24]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800858e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6999      	ldr	r1, [r3, #24]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	021a      	lsls	r2, r3, #8
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	619a      	str	r2, [r3, #24]
      break;
 80085a4:	e043      	b.n	800862e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fba1 	bl	8008cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69da      	ldr	r2, [r3, #28]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f042 0208 	orr.w	r2, r2, #8
 80085c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69da      	ldr	r2, [r3, #28]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0204 	bic.w	r2, r2, #4
 80085d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69d9      	ldr	r1, [r3, #28]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	61da      	str	r2, [r3, #28]
      break;
 80085e4:	e023      	b.n	800862e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68b9      	ldr	r1, [r7, #8]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 fbf5 	bl	8008ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69da      	ldr	r2, [r3, #28]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69da      	ldr	r2, [r3, #28]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69d9      	ldr	r1, [r3, #28]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	021a      	lsls	r2, r3, #8
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	61da      	str	r2, [r3, #28]
      break;
 8008626:	e002      	b.n	800862e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	75fb      	strb	r3, [r7, #23]
      break;
 800862c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008654:	2b01      	cmp	r3, #1
 8008656:	d101      	bne.n	800865c <HAL_TIM_ConfigClockSource+0x1c>
 8008658:	2302      	movs	r3, #2
 800865a:	e0b4      	b.n	80087c6 <HAL_TIM_ConfigClockSource+0x186>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800867a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008694:	d03e      	beq.n	8008714 <HAL_TIM_ConfigClockSource+0xd4>
 8008696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800869a:	f200 8087 	bhi.w	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 800869e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a2:	f000 8086 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x172>
 80086a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086aa:	d87f      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086ac:	2b70      	cmp	r3, #112	; 0x70
 80086ae:	d01a      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0xa6>
 80086b0:	2b70      	cmp	r3, #112	; 0x70
 80086b2:	d87b      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086b4:	2b60      	cmp	r3, #96	; 0x60
 80086b6:	d050      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x11a>
 80086b8:	2b60      	cmp	r3, #96	; 0x60
 80086ba:	d877      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086bc:	2b50      	cmp	r3, #80	; 0x50
 80086be:	d03c      	beq.n	800873a <HAL_TIM_ConfigClockSource+0xfa>
 80086c0:	2b50      	cmp	r3, #80	; 0x50
 80086c2:	d873      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086c4:	2b40      	cmp	r3, #64	; 0x40
 80086c6:	d058      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x13a>
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	d86f      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086cc:	2b30      	cmp	r3, #48	; 0x30
 80086ce:	d064      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x15a>
 80086d0:	2b30      	cmp	r3, #48	; 0x30
 80086d2:	d86b      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086d4:	2b20      	cmp	r3, #32
 80086d6:	d060      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x15a>
 80086d8:	2b20      	cmp	r3, #32
 80086da:	d867      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d05c      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x15a>
 80086e0:	2b10      	cmp	r3, #16
 80086e2:	d05a      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x15a>
 80086e4:	e062      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	6899      	ldr	r1, [r3, #8]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f000 fc41 	bl	8008f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	609a      	str	r2, [r3, #8]
      break;
 8008712:	e04f      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6818      	ldr	r0, [r3, #0]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	6899      	ldr	r1, [r3, #8]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f000 fc2a 	bl	8008f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008736:	609a      	str	r2, [r3, #8]
      break;
 8008738:	e03c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	6859      	ldr	r1, [r3, #4]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	461a      	mov	r2, r3
 8008748:	f000 fb9e 	bl	8008e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2150      	movs	r1, #80	; 0x50
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fbf7 	bl	8008f46 <TIM_ITRx_SetConfig>
      break;
 8008758:	e02c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6818      	ldr	r0, [r3, #0]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	6859      	ldr	r1, [r3, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	461a      	mov	r2, r3
 8008768:	f000 fbbd 	bl	8008ee6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2160      	movs	r1, #96	; 0x60
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fbe7 	bl	8008f46 <TIM_ITRx_SetConfig>
      break;
 8008778:	e01c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	6859      	ldr	r1, [r3, #4]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	461a      	mov	r2, r3
 8008788:	f000 fb7e 	bl	8008e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2140      	movs	r1, #64	; 0x40
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fbd7 	bl	8008f46 <TIM_ITRx_SetConfig>
      break;
 8008798:	e00c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4619      	mov	r1, r3
 80087a4:	4610      	mov	r0, r2
 80087a6:	f000 fbce 	bl	8008f46 <TIM_ITRx_SetConfig>
      break;
 80087aa:	e003      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	73fb      	strb	r3, [r7, #15]
      break;
 80087b0:	e000      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087ea:	bf00      	nop
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087fe:	bf00      	nop
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800883a:	bf00      	nop
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b084      	sub	sp, #16
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008852:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	429a      	cmp	r2, r3
 800885c:	d107      	bne.n	800886e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2201      	movs	r2, #1
 8008862:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800886c:	e02a      	b.n	80088c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	429a      	cmp	r2, r3
 8008876:	d107      	bne.n	8008888 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2202      	movs	r2, #2
 800887c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008886:	e01d      	b.n	80088c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	429a      	cmp	r2, r3
 8008890:	d107      	bne.n	80088a2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2204      	movs	r2, #4
 8008896:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088a0:	e010      	b.n	80088c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d107      	bne.n	80088bc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2208      	movs	r2, #8
 80088b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088ba:	e003      	b.n	80088c4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f7ff ffb4 	bl	8008832 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	771a      	strb	r2, [r3, #28]
}
 80088d0:	bf00      	nop
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d10b      	bne.n	8008908 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2201      	movs	r2, #1
 80088f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d136      	bne.n	800896c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008906:	e031      	b.n	800896c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	429a      	cmp	r2, r3
 8008910:	d10b      	bne.n	800892a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2202      	movs	r2, #2
 8008916:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d125      	bne.n	800896c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008928:	e020      	b.n	800896c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	d10b      	bne.n	800894c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2204      	movs	r2, #4
 8008938:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d114      	bne.n	800896c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800894a:	e00f      	b.n	800896c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	429a      	cmp	r2, r3
 8008954:	d10a      	bne.n	800896c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2208      	movs	r2, #8
 800895a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d103      	bne.n	800896c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f7ff ff42 	bl	80087f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	771a      	strb	r2, [r3, #28]
}
 8008978:	bf00      	nop
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	429a      	cmp	r2, r3
 8008996:	d103      	bne.n	80089a0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2201      	movs	r2, #1
 800899c:	771a      	strb	r2, [r3, #28]
 800899e:	e019      	b.n	80089d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d103      	bne.n	80089b2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2202      	movs	r2, #2
 80089ae:	771a      	strb	r2, [r3, #28]
 80089b0:	e010      	b.n	80089d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d103      	bne.n	80089c4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2204      	movs	r2, #4
 80089c0:	771a      	strb	r2, [r3, #28]
 80089c2:	e007      	b.n	80089d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d102      	bne.n	80089d4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2208      	movs	r2, #8
 80089d2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f7ff ff18 	bl	800880a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	771a      	strb	r2, [r3, #28]
}
 80089e0:	bf00      	nop
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a40      	ldr	r2, [pc, #256]	; (8008afc <TIM_Base_SetConfig+0x114>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d013      	beq.n	8008a28 <TIM_Base_SetConfig+0x40>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a06:	d00f      	beq.n	8008a28 <TIM_Base_SetConfig+0x40>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a3d      	ldr	r2, [pc, #244]	; (8008b00 <TIM_Base_SetConfig+0x118>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d00b      	beq.n	8008a28 <TIM_Base_SetConfig+0x40>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a3c      	ldr	r2, [pc, #240]	; (8008b04 <TIM_Base_SetConfig+0x11c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d007      	beq.n	8008a28 <TIM_Base_SetConfig+0x40>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a3b      	ldr	r2, [pc, #236]	; (8008b08 <TIM_Base_SetConfig+0x120>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d003      	beq.n	8008a28 <TIM_Base_SetConfig+0x40>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a3a      	ldr	r2, [pc, #232]	; (8008b0c <TIM_Base_SetConfig+0x124>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d108      	bne.n	8008a3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a2f      	ldr	r2, [pc, #188]	; (8008afc <TIM_Base_SetConfig+0x114>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d02b      	beq.n	8008a9a <TIM_Base_SetConfig+0xb2>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a48:	d027      	beq.n	8008a9a <TIM_Base_SetConfig+0xb2>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a2c      	ldr	r2, [pc, #176]	; (8008b00 <TIM_Base_SetConfig+0x118>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d023      	beq.n	8008a9a <TIM_Base_SetConfig+0xb2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a2b      	ldr	r2, [pc, #172]	; (8008b04 <TIM_Base_SetConfig+0x11c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d01f      	beq.n	8008a9a <TIM_Base_SetConfig+0xb2>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a2a      	ldr	r2, [pc, #168]	; (8008b08 <TIM_Base_SetConfig+0x120>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d01b      	beq.n	8008a9a <TIM_Base_SetConfig+0xb2>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a29      	ldr	r2, [pc, #164]	; (8008b0c <TIM_Base_SetConfig+0x124>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d017      	beq.n	8008a9a <TIM_Base_SetConfig+0xb2>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a28      	ldr	r2, [pc, #160]	; (8008b10 <TIM_Base_SetConfig+0x128>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d013      	beq.n	8008a9a <TIM_Base_SetConfig+0xb2>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a27      	ldr	r2, [pc, #156]	; (8008b14 <TIM_Base_SetConfig+0x12c>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d00f      	beq.n	8008a9a <TIM_Base_SetConfig+0xb2>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a26      	ldr	r2, [pc, #152]	; (8008b18 <TIM_Base_SetConfig+0x130>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d00b      	beq.n	8008a9a <TIM_Base_SetConfig+0xb2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a25      	ldr	r2, [pc, #148]	; (8008b1c <TIM_Base_SetConfig+0x134>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d007      	beq.n	8008a9a <TIM_Base_SetConfig+0xb2>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a24      	ldr	r2, [pc, #144]	; (8008b20 <TIM_Base_SetConfig+0x138>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d003      	beq.n	8008a9a <TIM_Base_SetConfig+0xb2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a23      	ldr	r2, [pc, #140]	; (8008b24 <TIM_Base_SetConfig+0x13c>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d108      	bne.n	8008aac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a0a      	ldr	r2, [pc, #40]	; (8008afc <TIM_Base_SetConfig+0x114>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_Base_SetConfig+0xf8>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a0c      	ldr	r2, [pc, #48]	; (8008b0c <TIM_Base_SetConfig+0x124>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d103      	bne.n	8008ae8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	691a      	ldr	r2, [r3, #16]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	615a      	str	r2, [r3, #20]
}
 8008aee:	bf00      	nop
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	40010000 	.word	0x40010000
 8008b00:	40000400 	.word	0x40000400
 8008b04:	40000800 	.word	0x40000800
 8008b08:	40000c00 	.word	0x40000c00
 8008b0c:	40010400 	.word	0x40010400
 8008b10:	40014000 	.word	0x40014000
 8008b14:	40014400 	.word	0x40014400
 8008b18:	40014800 	.word	0x40014800
 8008b1c:	40001800 	.word	0x40001800
 8008b20:	40001c00 	.word	0x40001c00
 8008b24:	40002000 	.word	0x40002000

08008b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	f023 0201 	bic.w	r2, r3, #1
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0303 	bic.w	r3, r3, #3
 8008b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f023 0302 	bic.w	r3, r3, #2
 8008b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a20      	ldr	r2, [pc, #128]	; (8008c00 <TIM_OC1_SetConfig+0xd8>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d003      	beq.n	8008b8c <TIM_OC1_SetConfig+0x64>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a1f      	ldr	r2, [pc, #124]	; (8008c04 <TIM_OC1_SetConfig+0xdc>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d10c      	bne.n	8008ba6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f023 0308 	bic.w	r3, r3, #8
 8008b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f023 0304 	bic.w	r3, r3, #4
 8008ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a15      	ldr	r2, [pc, #84]	; (8008c00 <TIM_OC1_SetConfig+0xd8>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d003      	beq.n	8008bb6 <TIM_OC1_SetConfig+0x8e>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a14      	ldr	r2, [pc, #80]	; (8008c04 <TIM_OC1_SetConfig+0xdc>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d111      	bne.n	8008bda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	621a      	str	r2, [r3, #32]
}
 8008bf4:	bf00      	nop
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	40010000 	.word	0x40010000
 8008c04:	40010400 	.word	0x40010400

08008c08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	f023 0210 	bic.w	r2, r3, #16
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	021b      	lsls	r3, r3, #8
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f023 0320 	bic.w	r3, r3, #32
 8008c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a22      	ldr	r2, [pc, #136]	; (8008cec <TIM_OC2_SetConfig+0xe4>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d003      	beq.n	8008c70 <TIM_OC2_SetConfig+0x68>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a21      	ldr	r2, [pc, #132]	; (8008cf0 <TIM_OC2_SetConfig+0xe8>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d10d      	bne.n	8008c8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	011b      	lsls	r3, r3, #4
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a17      	ldr	r2, [pc, #92]	; (8008cec <TIM_OC2_SetConfig+0xe4>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d003      	beq.n	8008c9c <TIM_OC2_SetConfig+0x94>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a16      	ldr	r2, [pc, #88]	; (8008cf0 <TIM_OC2_SetConfig+0xe8>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d113      	bne.n	8008cc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ca2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008caa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	695b      	ldr	r3, [r3, #20]
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	621a      	str	r2, [r3, #32]
}
 8008cde:	bf00      	nop
 8008ce0:	371c      	adds	r7, #28
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40010000 	.word	0x40010000
 8008cf0:	40010400 	.word	0x40010400

08008cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f023 0303 	bic.w	r3, r3, #3
 8008d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	021b      	lsls	r3, r3, #8
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a21      	ldr	r2, [pc, #132]	; (8008dd4 <TIM_OC3_SetConfig+0xe0>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d003      	beq.n	8008d5a <TIM_OC3_SetConfig+0x66>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a20      	ldr	r2, [pc, #128]	; (8008dd8 <TIM_OC3_SetConfig+0xe4>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d10d      	bne.n	8008d76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	021b      	lsls	r3, r3, #8
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a16      	ldr	r2, [pc, #88]	; (8008dd4 <TIM_OC3_SetConfig+0xe0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d003      	beq.n	8008d86 <TIM_OC3_SetConfig+0x92>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a15      	ldr	r2, [pc, #84]	; (8008dd8 <TIM_OC3_SetConfig+0xe4>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d113      	bne.n	8008dae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	011b      	lsls	r3, r3, #4
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	011b      	lsls	r3, r3, #4
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	621a      	str	r2, [r3, #32]
}
 8008dc8:	bf00      	nop
 8008dca:	371c      	adds	r7, #28
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	40010000 	.word	0x40010000
 8008dd8:	40010400 	.word	0x40010400

08008ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b087      	sub	sp, #28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	021b      	lsls	r3, r3, #8
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	031b      	lsls	r3, r3, #12
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a12      	ldr	r2, [pc, #72]	; (8008e80 <TIM_OC4_SetConfig+0xa4>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d003      	beq.n	8008e44 <TIM_OC4_SetConfig+0x68>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a11      	ldr	r2, [pc, #68]	; (8008e84 <TIM_OC4_SetConfig+0xa8>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d109      	bne.n	8008e58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	019b      	lsls	r3, r3, #6
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	621a      	str	r2, [r3, #32]
}
 8008e72:	bf00      	nop
 8008e74:	371c      	adds	r7, #28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40010000 	.word	0x40010000
 8008e84:	40010400 	.word	0x40010400

08008e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b087      	sub	sp, #28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	f023 0201 	bic.w	r2, r3, #1
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	011b      	lsls	r3, r3, #4
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f023 030a 	bic.w	r3, r3, #10
 8008ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	621a      	str	r2, [r3, #32]
}
 8008eda:	bf00      	nop
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b087      	sub	sp, #28
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	f023 0210 	bic.w	r2, r3, #16
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	031b      	lsls	r3, r3, #12
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	011b      	lsls	r3, r3, #4
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	621a      	str	r2, [r3, #32]
}
 8008f3a:	bf00      	nop
 8008f3c:	371c      	adds	r7, #28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	f043 0307 	orr.w	r3, r3, #7
 8008f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	609a      	str	r2, [r3, #8]
}
 8008f70:	bf00      	nop
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	021a      	lsls	r2, r3, #8
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	431a      	orrs	r2, r3
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	609a      	str	r2, [r3, #8]
}
 8008fb0:	bf00      	nop
 8008fb2:	371c      	adds	r7, #28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f003 031f 	and.w	r3, r3, #31
 8008fce:	2201      	movs	r2, #1
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a1a      	ldr	r2, [r3, #32]
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	43db      	mvns	r3, r3
 8008fde:	401a      	ands	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6a1a      	ldr	r2, [r3, #32]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f003 031f 	and.w	r3, r3, #31
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff4:	431a      	orrs	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	621a      	str	r2, [r3, #32]
}
 8008ffa:	bf00      	nop
 8008ffc:	371c      	adds	r7, #28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
	...

08009008 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d109      	bne.n	800902c <HAL_TIMEx_PWMN_Start+0x24>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b01      	cmp	r3, #1
 8009022:	bf14      	ite	ne
 8009024:	2301      	movne	r3, #1
 8009026:	2300      	moveq	r3, #0
 8009028:	b2db      	uxtb	r3, r3
 800902a:	e022      	b.n	8009072 <HAL_TIMEx_PWMN_Start+0x6a>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b04      	cmp	r3, #4
 8009030:	d109      	bne.n	8009046 <HAL_TIMEx_PWMN_Start+0x3e>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b01      	cmp	r3, #1
 800903c:	bf14      	ite	ne
 800903e:	2301      	movne	r3, #1
 8009040:	2300      	moveq	r3, #0
 8009042:	b2db      	uxtb	r3, r3
 8009044:	e015      	b.n	8009072 <HAL_TIMEx_PWMN_Start+0x6a>
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2b08      	cmp	r3, #8
 800904a:	d109      	bne.n	8009060 <HAL_TIMEx_PWMN_Start+0x58>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b01      	cmp	r3, #1
 8009056:	bf14      	ite	ne
 8009058:	2301      	movne	r3, #1
 800905a:	2300      	moveq	r3, #0
 800905c:	b2db      	uxtb	r3, r3
 800905e:	e008      	b.n	8009072 <HAL_TIMEx_PWMN_Start+0x6a>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b01      	cmp	r3, #1
 800906a:	bf14      	ite	ne
 800906c:	2301      	movne	r3, #1
 800906e:	2300      	moveq	r3, #0
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e06d      	b.n	8009156 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d104      	bne.n	800908a <HAL_TIMEx_PWMN_Start+0x82>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009088:	e013      	b.n	80090b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b04      	cmp	r3, #4
 800908e:	d104      	bne.n	800909a <HAL_TIMEx_PWMN_Start+0x92>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009098:	e00b      	b.n	80090b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	2b08      	cmp	r3, #8
 800909e:	d104      	bne.n	80090aa <HAL_TIMEx_PWMN_Start+0xa2>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090a8:	e003      	b.n	80090b2 <HAL_TIMEx_PWMN_Start+0xaa>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2202      	movs	r2, #2
 80090ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2204      	movs	r2, #4
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 fba9 	bl	8009812 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a22      	ldr	r2, [pc, #136]	; (8009160 <HAL_TIMEx_PWMN_Start+0x158>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d022      	beq.n	8009120 <HAL_TIMEx_PWMN_Start+0x118>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e2:	d01d      	beq.n	8009120 <HAL_TIMEx_PWMN_Start+0x118>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a1e      	ldr	r2, [pc, #120]	; (8009164 <HAL_TIMEx_PWMN_Start+0x15c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d018      	beq.n	8009120 <HAL_TIMEx_PWMN_Start+0x118>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a1d      	ldr	r2, [pc, #116]	; (8009168 <HAL_TIMEx_PWMN_Start+0x160>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d013      	beq.n	8009120 <HAL_TIMEx_PWMN_Start+0x118>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a1b      	ldr	r2, [pc, #108]	; (800916c <HAL_TIMEx_PWMN_Start+0x164>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d00e      	beq.n	8009120 <HAL_TIMEx_PWMN_Start+0x118>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a1a      	ldr	r2, [pc, #104]	; (8009170 <HAL_TIMEx_PWMN_Start+0x168>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d009      	beq.n	8009120 <HAL_TIMEx_PWMN_Start+0x118>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a18      	ldr	r2, [pc, #96]	; (8009174 <HAL_TIMEx_PWMN_Start+0x16c>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d004      	beq.n	8009120 <HAL_TIMEx_PWMN_Start+0x118>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a17      	ldr	r2, [pc, #92]	; (8009178 <HAL_TIMEx_PWMN_Start+0x170>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d111      	bne.n	8009144 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f003 0307 	and.w	r3, r3, #7
 800912a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b06      	cmp	r3, #6
 8009130:	d010      	beq.n	8009154 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f042 0201 	orr.w	r2, r2, #1
 8009140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009142:	e007      	b.n	8009154 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f042 0201 	orr.w	r2, r2, #1
 8009152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	40010000 	.word	0x40010000
 8009164:	40000400 	.word	0x40000400
 8009168:	40000800 	.word	0x40000800
 800916c:	40000c00 	.word	0x40000c00
 8009170:	40010400 	.word	0x40010400
 8009174:	40014000 	.word	0x40014000
 8009178:	40001800 	.word	0x40001800

0800917c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2200      	movs	r2, #0
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	4618      	mov	r0, r3
 8009190:	f000 fb3f 	bl	8009812 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6a1a      	ldr	r2, [r3, #32]
 800919a:	f241 1311 	movw	r3, #4369	; 0x1111
 800919e:	4013      	ands	r3, r2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10f      	bne.n	80091c4 <HAL_TIMEx_PWMN_Stop+0x48>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6a1a      	ldr	r2, [r3, #32]
 80091aa:	f240 4344 	movw	r3, #1092	; 0x444
 80091ae:	4013      	ands	r3, r2
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d107      	bne.n	80091c4 <HAL_TIMEx_PWMN_Stop+0x48>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6a1a      	ldr	r2, [r3, #32]
 80091ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80091ce:	4013      	ands	r3, r2
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10f      	bne.n	80091f4 <HAL_TIMEx_PWMN_Stop+0x78>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6a1a      	ldr	r2, [r3, #32]
 80091da:	f240 4344 	movw	r3, #1092	; 0x444
 80091de:	4013      	ands	r3, r2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d107      	bne.n	80091f4 <HAL_TIMEx_PWMN_Stop+0x78>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 0201 	bic.w	r2, r2, #1
 80091f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d104      	bne.n	8009204 <HAL_TIMEx_PWMN_Stop+0x88>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009202:	e013      	b.n	800922c <HAL_TIMEx_PWMN_Stop+0xb0>
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2b04      	cmp	r3, #4
 8009208:	d104      	bne.n	8009214 <HAL_TIMEx_PWMN_Stop+0x98>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009212:	e00b      	b.n	800922c <HAL_TIMEx_PWMN_Stop+0xb0>
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2b08      	cmp	r3, #8
 8009218:	d104      	bne.n	8009224 <HAL_TIMEx_PWMN_Stop+0xa8>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009222:	e003      	b.n	800922c <HAL_TIMEx_PWMN_Stop+0xb0>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d109      	bne.n	8009264 <HAL_TIMEx_PWMN_Start_DMA+0x2c>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b02      	cmp	r3, #2
 800925a:	bf0c      	ite	eq
 800925c:	2301      	moveq	r3, #1
 800925e:	2300      	movne	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	e022      	b.n	80092aa <HAL_TIMEx_PWMN_Start_DMA+0x72>
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2b04      	cmp	r3, #4
 8009268:	d109      	bne.n	800927e <HAL_TIMEx_PWMN_Start_DMA+0x46>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b02      	cmp	r3, #2
 8009274:	bf0c      	ite	eq
 8009276:	2301      	moveq	r3, #1
 8009278:	2300      	movne	r3, #0
 800927a:	b2db      	uxtb	r3, r3
 800927c:	e015      	b.n	80092aa <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b08      	cmp	r3, #8
 8009282:	d109      	bne.n	8009298 <HAL_TIMEx_PWMN_Start_DMA+0x60>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b02      	cmp	r3, #2
 800928e:	bf0c      	ite	eq
 8009290:	2301      	moveq	r3, #1
 8009292:	2300      	movne	r3, #0
 8009294:	b2db      	uxtb	r3, r3
 8009296:	e008      	b.n	80092aa <HAL_TIMEx_PWMN_Start_DMA+0x72>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	bf0c      	ite	eq
 80092a4:	2301      	moveq	r3, #1
 80092a6:	2300      	movne	r3, #0
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <HAL_TIMEx_PWMN_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80092ae:	2302      	movs	r3, #2
 80092b0:	e129      	b.n	8009506 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d109      	bne.n	80092cc <HAL_TIMEx_PWMN_Start_DMA+0x94>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	bf0c      	ite	eq
 80092c4:	2301      	moveq	r3, #1
 80092c6:	2300      	movne	r3, #0
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	e022      	b.n	8009312 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	2b04      	cmp	r3, #4
 80092d0:	d109      	bne.n	80092e6 <HAL_TIMEx_PWMN_Start_DMA+0xae>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b01      	cmp	r3, #1
 80092dc:	bf0c      	ite	eq
 80092de:	2301      	moveq	r3, #1
 80092e0:	2300      	movne	r3, #0
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	e015      	b.n	8009312 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b08      	cmp	r3, #8
 80092ea:	d109      	bne.n	8009300 <HAL_TIMEx_PWMN_Start_DMA+0xc8>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	bf0c      	ite	eq
 80092f8:	2301      	moveq	r3, #1
 80092fa:	2300      	movne	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	e008      	b.n	8009312 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b01      	cmp	r3, #1
 800930a:	bf0c      	ite	eq
 800930c:	2301      	moveq	r3, #1
 800930e:	2300      	movne	r3, #0
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	d024      	beq.n	8009360 <HAL_TIMEx_PWMN_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d104      	bne.n	8009326 <HAL_TIMEx_PWMN_Start_DMA+0xee>
 800931c:	887b      	ldrh	r3, [r7, #2]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <HAL_TIMEx_PWMN_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e0ef      	b.n	8009506 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d104      	bne.n	8009336 <HAL_TIMEx_PWMN_Start_DMA+0xfe>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2202      	movs	r2, #2
 8009330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009334:	e016      	b.n	8009364 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2b04      	cmp	r3, #4
 800933a:	d104      	bne.n	8009346 <HAL_TIMEx_PWMN_Start_DMA+0x10e>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009344:	e00e      	b.n	8009364 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2b08      	cmp	r3, #8
 800934a:	d104      	bne.n	8009356 <HAL_TIMEx_PWMN_Start_DMA+0x11e>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2202      	movs	r2, #2
 8009350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009354:	e006      	b.n	8009364 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2202      	movs	r2, #2
 800935a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800935e:	e001      	b.n	8009364 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e0d0      	b.n	8009506 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
  }

  switch (Channel)
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2b08      	cmp	r3, #8
 8009368:	d051      	beq.n	800940e <HAL_TIMEx_PWMN_Start_DMA+0x1d6>
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b08      	cmp	r3, #8
 800936e:	d872      	bhi.n	8009456 <HAL_TIMEx_PWMN_Start_DMA+0x21e>
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d003      	beq.n	800937e <HAL_TIMEx_PWMN_Start_DMA+0x146>
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2b04      	cmp	r3, #4
 800937a:	d024      	beq.n	80093c6 <HAL_TIMEx_PWMN_Start_DMA+0x18e>
 800937c:	e06b      	b.n	8009456 <HAL_TIMEx_PWMN_Start_DMA+0x21e>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	4a63      	ldr	r2, [pc, #396]	; (8009510 <HAL_TIMEx_PWMN_Start_DMA+0x2d8>)
 8009384:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	4a62      	ldr	r2, [pc, #392]	; (8009514 <HAL_TIMEx_PWMN_Start_DMA+0x2dc>)
 800938c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	4a61      	ldr	r2, [pc, #388]	; (8009518 <HAL_TIMEx_PWMN_Start_DMA+0x2e0>)
 8009394:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800939a:	6879      	ldr	r1, [r7, #4]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3334      	adds	r3, #52	; 0x34
 80093a2:	461a      	mov	r2, r3
 80093a4:	887b      	ldrh	r3, [r7, #2]
 80093a6:	f7fb f919 	bl	80045dc <HAL_DMA_Start_IT>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <HAL_TIMEx_PWMN_Start_DMA+0x17c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e0a8      	b.n	8009506 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093c2:	60da      	str	r2, [r3, #12]
      break;
 80093c4:	e04a      	b.n	800945c <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ca:	4a51      	ldr	r2, [pc, #324]	; (8009510 <HAL_TIMEx_PWMN_Start_DMA+0x2d8>)
 80093cc:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d2:	4a50      	ldr	r2, [pc, #320]	; (8009514 <HAL_TIMEx_PWMN_Start_DMA+0x2dc>)
 80093d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093da:	4a4f      	ldr	r2, [pc, #316]	; (8009518 <HAL_TIMEx_PWMN_Start_DMA+0x2e0>)
 80093dc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80093e2:	6879      	ldr	r1, [r7, #4]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3338      	adds	r3, #56	; 0x38
 80093ea:	461a      	mov	r2, r3
 80093ec:	887b      	ldrh	r3, [r7, #2]
 80093ee:	f7fb f8f5 	bl	80045dc <HAL_DMA_Start_IT>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <HAL_TIMEx_PWMN_Start_DMA+0x1c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e084      	b.n	8009506 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800940a:	60da      	str	r2, [r3, #12]
      break;
 800940c:	e026      	b.n	800945c <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	4a3f      	ldr	r2, [pc, #252]	; (8009510 <HAL_TIMEx_PWMN_Start_DMA+0x2d8>)
 8009414:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941a:	4a3e      	ldr	r2, [pc, #248]	; (8009514 <HAL_TIMEx_PWMN_Start_DMA+0x2dc>)
 800941c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009422:	4a3d      	ldr	r2, [pc, #244]	; (8009518 <HAL_TIMEx_PWMN_Start_DMA+0x2e0>)
 8009424:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800942a:	6879      	ldr	r1, [r7, #4]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	333c      	adds	r3, #60	; 0x3c
 8009432:	461a      	mov	r2, r3
 8009434:	887b      	ldrh	r3, [r7, #2]
 8009436:	f7fb f8d1 	bl	80045dc <HAL_DMA_Start_IT>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <HAL_TIMEx_PWMN_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e060      	b.n	8009506 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68da      	ldr	r2, [r3, #12]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009452:	60da      	str	r2, [r3, #12]
      break;
 8009454:	e002      	b.n	800945c <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    default:
      status = HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	75fb      	strb	r3, [r7, #23]
      break;
 800945a:	bf00      	nop
  }

  if (status == HAL_OK)
 800945c:	7dfb      	ldrb	r3, [r7, #23]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d150      	bne.n	8009504 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
  {
    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2204      	movs	r2, #4
 8009468:	68b9      	ldr	r1, [r7, #8]
 800946a:	4618      	mov	r0, r3
 800946c:	f000 f9d1 	bl	8009812 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800947e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a25      	ldr	r2, [pc, #148]	; (800951c <HAL_TIMEx_PWMN_Start_DMA+0x2e4>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d022      	beq.n	80094d0 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009492:	d01d      	beq.n	80094d0 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a21      	ldr	r2, [pc, #132]	; (8009520 <HAL_TIMEx_PWMN_Start_DMA+0x2e8>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d018      	beq.n	80094d0 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a20      	ldr	r2, [pc, #128]	; (8009524 <HAL_TIMEx_PWMN_Start_DMA+0x2ec>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d013      	beq.n	80094d0 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a1e      	ldr	r2, [pc, #120]	; (8009528 <HAL_TIMEx_PWMN_Start_DMA+0x2f0>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d00e      	beq.n	80094d0 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a1d      	ldr	r2, [pc, #116]	; (800952c <HAL_TIMEx_PWMN_Start_DMA+0x2f4>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d009      	beq.n	80094d0 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a1b      	ldr	r2, [pc, #108]	; (8009530 <HAL_TIMEx_PWMN_Start_DMA+0x2f8>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d004      	beq.n	80094d0 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a1a      	ldr	r2, [pc, #104]	; (8009534 <HAL_TIMEx_PWMN_Start_DMA+0x2fc>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d111      	bne.n	80094f4 <HAL_TIMEx_PWMN_Start_DMA+0x2bc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f003 0307 	and.w	r3, r3, #7
 80094da:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2b06      	cmp	r3, #6
 80094e0:	d010      	beq.n	8009504 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
      {
        __HAL_TIM_ENABLE(htim);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f042 0201 	orr.w	r2, r2, #1
 80094f0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094f2:	e007      	b.n	8009504 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f042 0201 	orr.w	r2, r2, #1
 8009502:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009504:	7dfb      	ldrb	r3, [r7, #23]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	080096fd 	.word	0x080096fd
 8009514:	08008981 	.word	0x08008981
 8009518:	080097a5 	.word	0x080097a5
 800951c:	40010000 	.word	0x40010000
 8009520:	40000400 	.word	0x40000400
 8009524:	40000800 	.word	0x40000800
 8009528:	40000c00 	.word	0x40000c00
 800952c:	40010400 	.word	0x40010400
 8009530:	40014000 	.word	0x40014000
 8009534:	40001800 	.word	0x40001800

08009538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009548:	2b01      	cmp	r3, #1
 800954a:	d101      	bne.n	8009550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800954c:	2302      	movs	r3, #2
 800954e:	e05a      	b.n	8009606 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2202      	movs	r2, #2
 800955c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	4313      	orrs	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a21      	ldr	r2, [pc, #132]	; (8009614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d022      	beq.n	80095da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800959c:	d01d      	beq.n	80095da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a1d      	ldr	r2, [pc, #116]	; (8009618 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d018      	beq.n	80095da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a1b      	ldr	r2, [pc, #108]	; (800961c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d013      	beq.n	80095da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a1a      	ldr	r2, [pc, #104]	; (8009620 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d00e      	beq.n	80095da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a18      	ldr	r2, [pc, #96]	; (8009624 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d009      	beq.n	80095da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a17      	ldr	r2, [pc, #92]	; (8009628 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d004      	beq.n	80095da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a15      	ldr	r2, [pc, #84]	; (800962c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d10c      	bne.n	80095f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	40010000 	.word	0x40010000
 8009618:	40000400 	.word	0x40000400
 800961c:	40000800 	.word	0x40000800
 8009620:	40000c00 	.word	0x40000c00
 8009624:	40010400 	.word	0x40010400
 8009628:	40014000 	.word	0x40014000
 800962c:	40001800 	.word	0x40001800

08009630 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800963a:	2300      	movs	r3, #0
 800963c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009644:	2b01      	cmp	r3, #1
 8009646:	d101      	bne.n	800964c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009648:	2302      	movs	r3, #2
 800964a:	e03d      	b.n	80096c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	4313      	orrs	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	4313      	orrs	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	4313      	orrs	r3, r2
 800967c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4313      	orrs	r3, r2
 800968a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	4313      	orrs	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	695b      	ldr	r3, [r3, #20]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <TIM_DMADelayPulseNCplt>:
  * @brief  TIM DMA Delay Pulse complete callback (complementary channel).
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseNCplt(DMA_HandleTypeDef *hdma)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009708:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	429a      	cmp	r2, r3
 8009712:	d10b      	bne.n	800972c <TIM_DMADelayPulseNCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2201      	movs	r2, #1
 8009718:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	69db      	ldr	r3, [r3, #28]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d136      	bne.n	8009790 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800972a:	e031      	b.n	8009790 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	429a      	cmp	r2, r3
 8009734:	d10b      	bne.n	800974e <TIM_DMADelayPulseNCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2202      	movs	r2, #2
 800973a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d125      	bne.n	8009790 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800974c:	e020      	b.n	8009790 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	429a      	cmp	r2, r3
 8009756:	d10b      	bne.n	8009770 <TIM_DMADelayPulseNCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2204      	movs	r2, #4
 800975c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d114      	bne.n	8009790 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800976e:	e00f      	b.n	8009790 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	429a      	cmp	r2, r3
 8009778:	d10a      	bne.n	8009790 <TIM_DMADelayPulseNCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2208      	movs	r2, #8
 800977e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	69db      	ldr	r3, [r3, #28]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d103      	bne.n	8009790 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7ff f830 	bl	80087f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	771a      	strb	r2, [r3, #28]
}
 800979c:	bf00      	nop
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <TIM_DMAErrorCCxN>:
  * @brief  TIM DMA error callback (complementary channel)
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAErrorCCxN(DMA_HandleTypeDef *hdma)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d107      	bne.n	80097cc <TIM_DMAErrorCCxN+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2201      	movs	r2, #1
 80097c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097ca:	e018      	b.n	80097fe <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d107      	bne.n	80097e6 <TIM_DMAErrorCCxN+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2202      	movs	r2, #2
 80097da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097e4:	e00b      	b.n	80097fe <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d106      	bne.n	80097fe <TIM_DMAErrorCCxN+0x5a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2204      	movs	r2, #4
 80097f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f7ff f817 	bl	8008832 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	771a      	strb	r2, [r3, #28]
}
 800980a:	bf00      	nop
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009812:	b480      	push	{r7}
 8009814:	b087      	sub	sp, #28
 8009816:	af00      	add	r7, sp, #0
 8009818:	60f8      	str	r0, [r7, #12]
 800981a:	60b9      	str	r1, [r7, #8]
 800981c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	f003 031f 	and.w	r3, r3, #31
 8009824:	2204      	movs	r2, #4
 8009826:	fa02 f303 	lsl.w	r3, r2, r3
 800982a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6a1a      	ldr	r2, [r3, #32]
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	43db      	mvns	r3, r3
 8009834:	401a      	ands	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a1a      	ldr	r2, [r3, #32]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f003 031f 	and.w	r3, r3, #31
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	fa01 f303 	lsl.w	r3, r1, r3
 800984a:	431a      	orrs	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	621a      	str	r2, [r3, #32]
}
 8009850:	bf00      	nop
 8009852:	371c      	adds	r7, #28
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800985c:	b084      	sub	sp, #16
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	f107 001c 	add.w	r0, r7, #28
 800986a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009870:	2b01      	cmp	r3, #1
 8009872:	d122      	bne.n	80098ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009878:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800989c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d105      	bne.n	80098ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f001 fbe8 	bl	800b084 <USB_CoreReset>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73fb      	strb	r3, [r7, #15]
 80098b8:	e01a      	b.n	80098f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f001 fbdc 	bl	800b084 <USB_CoreReset>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80098d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	639a      	str	r2, [r3, #56]	; 0x38
 80098e2:	e005      	b.n	80098f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80098f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d10b      	bne.n	800990e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	f043 0206 	orr.w	r2, r3, #6
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	f043 0220 	orr.w	r2, r3, #32
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800990e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800991a:	b004      	add	sp, #16
 800991c:	4770      	bx	lr
	...

08009920 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	4613      	mov	r3, r2
 800992c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800992e:	79fb      	ldrb	r3, [r7, #7]
 8009930:	2b02      	cmp	r3, #2
 8009932:	d165      	bne.n	8009a00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	4a41      	ldr	r2, [pc, #260]	; (8009a3c <USB_SetTurnaroundTime+0x11c>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d906      	bls.n	800994a <USB_SetTurnaroundTime+0x2a>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	4a40      	ldr	r2, [pc, #256]	; (8009a40 <USB_SetTurnaroundTime+0x120>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d202      	bcs.n	800994a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009944:	230f      	movs	r3, #15
 8009946:	617b      	str	r3, [r7, #20]
 8009948:	e062      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	4a3c      	ldr	r2, [pc, #240]	; (8009a40 <USB_SetTurnaroundTime+0x120>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d306      	bcc.n	8009960 <USB_SetTurnaroundTime+0x40>
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	4a3b      	ldr	r2, [pc, #236]	; (8009a44 <USB_SetTurnaroundTime+0x124>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d202      	bcs.n	8009960 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800995a:	230e      	movs	r3, #14
 800995c:	617b      	str	r3, [r7, #20]
 800995e:	e057      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4a38      	ldr	r2, [pc, #224]	; (8009a44 <USB_SetTurnaroundTime+0x124>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d306      	bcc.n	8009976 <USB_SetTurnaroundTime+0x56>
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	4a37      	ldr	r2, [pc, #220]	; (8009a48 <USB_SetTurnaroundTime+0x128>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d202      	bcs.n	8009976 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009970:	230d      	movs	r3, #13
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	e04c      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4a33      	ldr	r2, [pc, #204]	; (8009a48 <USB_SetTurnaroundTime+0x128>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d306      	bcc.n	800998c <USB_SetTurnaroundTime+0x6c>
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	4a32      	ldr	r2, [pc, #200]	; (8009a4c <USB_SetTurnaroundTime+0x12c>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d802      	bhi.n	800998c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009986:	230c      	movs	r3, #12
 8009988:	617b      	str	r3, [r7, #20]
 800998a:	e041      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	4a2f      	ldr	r2, [pc, #188]	; (8009a4c <USB_SetTurnaroundTime+0x12c>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d906      	bls.n	80099a2 <USB_SetTurnaroundTime+0x82>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	4a2e      	ldr	r2, [pc, #184]	; (8009a50 <USB_SetTurnaroundTime+0x130>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d802      	bhi.n	80099a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800999c:	230b      	movs	r3, #11
 800999e:	617b      	str	r3, [r7, #20]
 80099a0:	e036      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	4a2a      	ldr	r2, [pc, #168]	; (8009a50 <USB_SetTurnaroundTime+0x130>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d906      	bls.n	80099b8 <USB_SetTurnaroundTime+0x98>
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	4a29      	ldr	r2, [pc, #164]	; (8009a54 <USB_SetTurnaroundTime+0x134>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d802      	bhi.n	80099b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80099b2:	230a      	movs	r3, #10
 80099b4:	617b      	str	r3, [r7, #20]
 80099b6:	e02b      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	4a26      	ldr	r2, [pc, #152]	; (8009a54 <USB_SetTurnaroundTime+0x134>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d906      	bls.n	80099ce <USB_SetTurnaroundTime+0xae>
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	4a25      	ldr	r2, [pc, #148]	; (8009a58 <USB_SetTurnaroundTime+0x138>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d202      	bcs.n	80099ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80099c8:	2309      	movs	r3, #9
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	e020      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	4a21      	ldr	r2, [pc, #132]	; (8009a58 <USB_SetTurnaroundTime+0x138>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d306      	bcc.n	80099e4 <USB_SetTurnaroundTime+0xc4>
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	4a20      	ldr	r2, [pc, #128]	; (8009a5c <USB_SetTurnaroundTime+0x13c>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d802      	bhi.n	80099e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80099de:	2308      	movs	r3, #8
 80099e0:	617b      	str	r3, [r7, #20]
 80099e2:	e015      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	4a1d      	ldr	r2, [pc, #116]	; (8009a5c <USB_SetTurnaroundTime+0x13c>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d906      	bls.n	80099fa <USB_SetTurnaroundTime+0xda>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	4a1c      	ldr	r2, [pc, #112]	; (8009a60 <USB_SetTurnaroundTime+0x140>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d202      	bcs.n	80099fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80099f4:	2307      	movs	r3, #7
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	e00a      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80099fa:	2306      	movs	r3, #6
 80099fc:	617b      	str	r3, [r7, #20]
 80099fe:	e007      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009a00:	79fb      	ldrb	r3, [r7, #7]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d102      	bne.n	8009a0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009a06:	2309      	movs	r3, #9
 8009a08:	617b      	str	r3, [r7, #20]
 8009a0a:	e001      	b.n	8009a10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009a0c:	2309      	movs	r3, #9
 8009a0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	68da      	ldr	r2, [r3, #12]
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	029b      	lsls	r3, r3, #10
 8009a24:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009a28:	431a      	orrs	r2, r3
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	371c      	adds	r7, #28
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	00d8acbf 	.word	0x00d8acbf
 8009a40:	00e4e1c0 	.word	0x00e4e1c0
 8009a44:	00f42400 	.word	0x00f42400
 8009a48:	01067380 	.word	0x01067380
 8009a4c:	011a499f 	.word	0x011a499f
 8009a50:	01312cff 	.word	0x01312cff
 8009a54:	014ca43f 	.word	0x014ca43f
 8009a58:	016e3600 	.word	0x016e3600
 8009a5c:	01a6ab1f 	.word	0x01a6ab1f
 8009a60:	01e84800 	.word	0x01e84800

08009a64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f043 0201 	orr.w	r2, r3, #1
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a86:	b480      	push	{r7}
 8009a88:	b083      	sub	sp, #12
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	f023 0201 	bic.w	r2, r3, #1
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009ac4:	78fb      	ldrb	r3, [r7, #3]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d115      	bne.n	8009af6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ad6:	2001      	movs	r0, #1
 8009ad8:	f7f9 fc64 	bl	80033a4 <HAL_Delay>
      ms++;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f001 fa3f 	bl	800af66 <USB_GetMode>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d01e      	beq.n	8009b2c <USB_SetCurrentMode+0x84>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2b31      	cmp	r3, #49	; 0x31
 8009af2:	d9f0      	bls.n	8009ad6 <USB_SetCurrentMode+0x2e>
 8009af4:	e01a      	b.n	8009b2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009af6:	78fb      	ldrb	r3, [r7, #3]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d115      	bne.n	8009b28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b08:	2001      	movs	r0, #1
 8009b0a:	f7f9 fc4b 	bl	80033a4 <HAL_Delay>
      ms++;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3301      	adds	r3, #1
 8009b12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f001 fa26 	bl	800af66 <USB_GetMode>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d005      	beq.n	8009b2c <USB_SetCurrentMode+0x84>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b31      	cmp	r3, #49	; 0x31
 8009b24:	d9f0      	bls.n	8009b08 <USB_SetCurrentMode+0x60>
 8009b26:	e001      	b.n	8009b2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e005      	b.n	8009b38 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b32      	cmp	r3, #50	; 0x32
 8009b30:	d101      	bne.n	8009b36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e000      	b.n	8009b38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b40:	b084      	sub	sp, #16
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b086      	sub	sp, #24
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	613b      	str	r3, [r7, #16]
 8009b5e:	e009      	b.n	8009b74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	3340      	adds	r3, #64	; 0x40
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	3301      	adds	r3, #1
 8009b72:	613b      	str	r3, [r7, #16]
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2b0e      	cmp	r3, #14
 8009b78:	d9f2      	bls.n	8009b60 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d11c      	bne.n	8009bba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b8e:	f043 0302 	orr.w	r3, r3, #2
 8009b92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	e005      	b.n	8009bc6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bcc:	461a      	mov	r2, r3
 8009bce:	2300      	movs	r3, #0
 8009bd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bd8:	4619      	mov	r1, r3
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009be0:	461a      	mov	r2, r3
 8009be2:	680b      	ldr	r3, [r1, #0]
 8009be4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d10c      	bne.n	8009c06 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d104      	bne.n	8009bfc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f965 	bl	8009ec4 <USB_SetDevSpeed>
 8009bfa:	e008      	b.n	8009c0e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009bfc:	2101      	movs	r1, #1
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f960 	bl	8009ec4 <USB_SetDevSpeed>
 8009c04:	e003      	b.n	8009c0e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009c06:	2103      	movs	r1, #3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f95b 	bl	8009ec4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009c0e:	2110      	movs	r1, #16
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f8f3 	bl	8009dfc <USB_FlushTxFifo>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d001      	beq.n	8009c20 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f91f 	bl	8009e64 <USB_FlushRxFifo>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c36:	461a      	mov	r2, r3
 8009c38:	2300      	movs	r3, #0
 8009c3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c42:	461a      	mov	r2, r3
 8009c44:	2300      	movs	r3, #0
 8009c46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c4e:	461a      	mov	r2, r3
 8009c50:	2300      	movs	r3, #0
 8009c52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c54:	2300      	movs	r3, #0
 8009c56:	613b      	str	r3, [r7, #16]
 8009c58:	e043      	b.n	8009ce2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	015a      	lsls	r2, r3, #5
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c70:	d118      	bne.n	8009ca4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c84:	461a      	mov	r2, r3
 8009c86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	e013      	b.n	8009cb6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	015a      	lsls	r2, r3, #5
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	4413      	add	r3, r2
 8009c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ca0:	6013      	str	r3, [r2, #0]
 8009ca2:	e008      	b.n	8009cb6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009cda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	613b      	str	r3, [r7, #16]
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d3b7      	bcc.n	8009c5a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cea:	2300      	movs	r3, #0
 8009cec:	613b      	str	r3, [r7, #16]
 8009cee:	e043      	b.n	8009d78 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d06:	d118      	bne.n	8009d3a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10a      	bne.n	8009d24 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d20:	6013      	str	r3, [r2, #0]
 8009d22:	e013      	b.n	8009d4c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	015a      	lsls	r2, r3, #5
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d30:	461a      	mov	r2, r3
 8009d32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	e008      	b.n	8009d4c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d46:	461a      	mov	r2, r3
 8009d48:	2300      	movs	r3, #0
 8009d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d58:	461a      	mov	r2, r3
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	3301      	adds	r3, #1
 8009d76:	613b      	str	r3, [r7, #16]
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d3b7      	bcc.n	8009cf0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009da0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d105      	bne.n	8009db4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	699b      	ldr	r3, [r3, #24]
 8009dac:	f043 0210 	orr.w	r2, r3, #16
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	699a      	ldr	r2, [r3, #24]
 8009db8:	4b0f      	ldr	r3, [pc, #60]	; (8009df8 <USB_DevInit+0x2b8>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d005      	beq.n	8009dd2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f043 0208 	orr.w	r2, r3, #8
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d107      	bne.n	8009de8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009de0:	f043 0304 	orr.w	r3, r3, #4
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009df4:	b004      	add	sp, #16
 8009df6:	4770      	bx	lr
 8009df8:	803c3800 	.word	0x803c3800

08009dfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4a13      	ldr	r2, [pc, #76]	; (8009e60 <USB_FlushTxFifo+0x64>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d901      	bls.n	8009e1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e01b      	b.n	8009e54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	daf2      	bge.n	8009e0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009e24:	2300      	movs	r3, #0
 8009e26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	019b      	lsls	r3, r3, #6
 8009e2c:	f043 0220 	orr.w	r2, r3, #32
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	3301      	adds	r3, #1
 8009e38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	4a08      	ldr	r2, [pc, #32]	; (8009e60 <USB_FlushTxFifo+0x64>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d901      	bls.n	8009e46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	e006      	b.n	8009e54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	f003 0320 	and.w	r3, r3, #32
 8009e4e:	2b20      	cmp	r3, #32
 8009e50:	d0f0      	beq.n	8009e34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr
 8009e60:	00030d40 	.word	0x00030d40

08009e64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	3301      	adds	r3, #1
 8009e74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	4a11      	ldr	r2, [pc, #68]	; (8009ec0 <USB_FlushRxFifo+0x5c>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d901      	bls.n	8009e82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e018      	b.n	8009eb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	daf2      	bge.n	8009e70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2210      	movs	r2, #16
 8009e92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	3301      	adds	r3, #1
 8009e98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4a08      	ldr	r2, [pc, #32]	; (8009ec0 <USB_FlushRxFifo+0x5c>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d901      	bls.n	8009ea6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e006      	b.n	8009eb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	f003 0310 	and.w	r3, r3, #16
 8009eae:	2b10      	cmp	r3, #16
 8009eb0:	d0f0      	beq.n	8009e94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	00030d40 	.word	0x00030d40

08009ec4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	68f9      	ldr	r1, [r7, #12]
 8009ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b087      	sub	sp, #28
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f003 0306 	and.w	r3, r3, #6
 8009f0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d102      	bne.n	8009f1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009f16:	2300      	movs	r3, #0
 8009f18:	75fb      	strb	r3, [r7, #23]
 8009f1a:	e00a      	b.n	8009f32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d002      	beq.n	8009f28 <USB_GetDevSpeed+0x32>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2b06      	cmp	r3, #6
 8009f26:	d102      	bne.n	8009f2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009f28:	2302      	movs	r3, #2
 8009f2a:	75fb      	strb	r3, [r7, #23]
 8009f2c:	e001      	b.n	8009f32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009f2e:	230f      	movs	r3, #15
 8009f30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	371c      	adds	r7, #28
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	785b      	ldrb	r3, [r3, #1]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d13a      	bne.n	8009fd2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f62:	69da      	ldr	r2, [r3, #28]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	f003 030f 	and.w	r3, r3, #15
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	68f9      	ldr	r1, [r7, #12]
 8009f76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	015a      	lsls	r2, r3, #5
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	4413      	add	r3, r2
 8009f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d155      	bne.n	800a040 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	791b      	ldrb	r3, [r3, #4]
 8009fae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009fb0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	059b      	lsls	r3, r3, #22
 8009fb6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	0151      	lsls	r1, r2, #5
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	440a      	add	r2, r1
 8009fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	e036      	b.n	800a040 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd8:	69da      	ldr	r2, [r3, #28]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	f003 030f 	and.w	r3, r3, #15
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fe8:	041b      	lsls	r3, r3, #16
 8009fea:	68f9      	ldr	r1, [r7, #12]
 8009fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	015a      	lsls	r2, r3, #5
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d11a      	bne.n	800a040 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	015a      	lsls	r2, r3, #5
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	4413      	add	r3, r2
 800a012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	791b      	ldrb	r3, [r3, #4]
 800a024:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a026:	430b      	orrs	r3, r1
 800a028:	4313      	orrs	r3, r2
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	0151      	lsls	r1, r2, #5
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	440a      	add	r2, r1
 800a032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a03a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a03e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3714      	adds	r7, #20
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
	...

0800a050 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	785b      	ldrb	r3, [r3, #1]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d161      	bne.n	800a130 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	015a      	lsls	r2, r3, #5
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4413      	add	r3, r2
 800a074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a07e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a082:	d11f      	bne.n	800a0c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	0151      	lsls	r1, r2, #5
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	440a      	add	r2, r1
 800a09a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a09e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	0151      	lsls	r1, r2, #5
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	440a      	add	r2, r1
 800a0ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	f003 030f 	and.w	r3, r3, #15
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	43db      	mvns	r3, r3
 800a0de:	68f9      	ldr	r1, [r7, #12]
 800a0e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ee:	69da      	ldr	r2, [r3, #28]
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	f003 030f 	and.w	r3, r3, #15
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	43db      	mvns	r3, r3
 800a102:	68f9      	ldr	r1, [r7, #12]
 800a104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a108:	4013      	ands	r3, r2
 800a10a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	0159      	lsls	r1, r3, #5
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	440b      	add	r3, r1
 800a122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a126:	4619      	mov	r1, r3
 800a128:	4b35      	ldr	r3, [pc, #212]	; (800a200 <USB_DeactivateEndpoint+0x1b0>)
 800a12a:	4013      	ands	r3, r2
 800a12c:	600b      	str	r3, [r1, #0]
 800a12e:	e060      	b.n	800a1f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a146:	d11f      	bne.n	800a188 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	0151      	lsls	r1, r2, #5
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	440a      	add	r2, r1
 800a15e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a162:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a166:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	015a      	lsls	r2, r3, #5
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	4413      	add	r3, r2
 800a170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	0151      	lsls	r1, r2, #5
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	440a      	add	r2, r1
 800a17e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a182:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a186:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a18e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	f003 030f 	and.w	r3, r3, #15
 800a198:	2101      	movs	r1, #1
 800a19a:	fa01 f303 	lsl.w	r3, r1, r3
 800a19e:	041b      	lsls	r3, r3, #16
 800a1a0:	43db      	mvns	r3, r3
 800a1a2:	68f9      	ldr	r1, [r7, #12]
 800a1a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b2:	69da      	ldr	r2, [r3, #28]
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	f003 030f 	and.w	r3, r3, #15
 800a1bc:	2101      	movs	r1, #1
 800a1be:	fa01 f303 	lsl.w	r3, r1, r3
 800a1c2:	041b      	lsls	r3, r3, #16
 800a1c4:	43db      	mvns	r3, r3
 800a1c6:	68f9      	ldr	r1, [r7, #12]
 800a1c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	015a      	lsls	r2, r3, #5
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	0159      	lsls	r1, r3, #5
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	440b      	add	r3, r1
 800a1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	4b05      	ldr	r3, [pc, #20]	; (800a204 <USB_DeactivateEndpoint+0x1b4>)
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	ec337800 	.word	0xec337800
 800a204:	eff37800 	.word	0xeff37800

0800a208 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b08a      	sub	sp, #40	; 0x28
 800a20c:	af02      	add	r7, sp, #8
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	785b      	ldrb	r3, [r3, #1]
 800a224:	2b01      	cmp	r3, #1
 800a226:	f040 815c 	bne.w	800a4e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d132      	bne.n	800a298 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	015a      	lsls	r2, r3, #5
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	4413      	add	r3, r2
 800a23a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	0151      	lsls	r1, r2, #5
 800a244:	69fa      	ldr	r2, [r7, #28]
 800a246:	440a      	add	r2, r1
 800a248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a24c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a250:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a254:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	015a      	lsls	r2, r3, #5
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	69ba      	ldr	r2, [r7, #24]
 800a266:	0151      	lsls	r1, r2, #5
 800a268:	69fa      	ldr	r2, [r7, #28]
 800a26a:	440a      	add	r2, r1
 800a26c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a274:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	015a      	lsls	r2, r3, #5
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	4413      	add	r3, r2
 800a27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	69ba      	ldr	r2, [r7, #24]
 800a286:	0151      	lsls	r1, r2, #5
 800a288:	69fa      	ldr	r2, [r7, #28]
 800a28a:	440a      	add	r2, r1
 800a28c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a290:	0cdb      	lsrs	r3, r3, #19
 800a292:	04db      	lsls	r3, r3, #19
 800a294:	6113      	str	r3, [r2, #16]
 800a296:	e074      	b.n	800a382 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	015a      	lsls	r2, r3, #5
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	4413      	add	r3, r2
 800a2a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	69ba      	ldr	r2, [r7, #24]
 800a2a8:	0151      	lsls	r1, r2, #5
 800a2aa:	69fa      	ldr	r2, [r7, #28]
 800a2ac:	440a      	add	r2, r1
 800a2ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b2:	0cdb      	lsrs	r3, r3, #19
 800a2b4:	04db      	lsls	r3, r3, #19
 800a2b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	69ba      	ldr	r2, [r7, #24]
 800a2c8:	0151      	lsls	r1, r2, #5
 800a2ca:	69fa      	ldr	r2, [r7, #28]
 800a2cc:	440a      	add	r2, r1
 800a2ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	6999      	ldr	r1, [r3, #24]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	440b      	add	r3, r1
 800a2f4:	1e59      	subs	r1, r3, #1
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a2fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a300:	4b9d      	ldr	r3, [pc, #628]	; (800a578 <USB_EPStartXfer+0x370>)
 800a302:	400b      	ands	r3, r1
 800a304:	69b9      	ldr	r1, [r7, #24]
 800a306:	0148      	lsls	r0, r1, #5
 800a308:	69f9      	ldr	r1, [r7, #28]
 800a30a:	4401      	add	r1, r0
 800a30c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a310:	4313      	orrs	r3, r2
 800a312:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	015a      	lsls	r2, r3, #5
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	4413      	add	r3, r2
 800a31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a320:	691a      	ldr	r2, [r3, #16]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a32a:	69b9      	ldr	r1, [r7, #24]
 800a32c:	0148      	lsls	r0, r1, #5
 800a32e:	69f9      	ldr	r1, [r7, #28]
 800a330:	4401      	add	r1, r0
 800a332:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a336:	4313      	orrs	r3, r2
 800a338:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	791b      	ldrb	r3, [r3, #4]
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d11f      	bne.n	800a382 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	015a      	lsls	r2, r3, #5
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	4413      	add	r3, r2
 800a34a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	69ba      	ldr	r2, [r7, #24]
 800a352:	0151      	lsls	r1, r2, #5
 800a354:	69fa      	ldr	r2, [r7, #28]
 800a356:	440a      	add	r2, r1
 800a358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a35c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a360:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	0151      	lsls	r1, r2, #5
 800a374:	69fa      	ldr	r2, [r7, #28]
 800a376:	440a      	add	r2, r1
 800a378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a37c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a380:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a382:	79fb      	ldrb	r3, [r7, #7]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d14b      	bne.n	800a420 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d009      	beq.n	800a3a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a39c:	461a      	mov	r2, r3
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	791b      	ldrb	r3, [r3, #4]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d128      	bne.n	800a3fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d110      	bne.n	800a3de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	0151      	lsls	r1, r2, #5
 800a3ce:	69fa      	ldr	r2, [r7, #28]
 800a3d0:	440a      	add	r2, r1
 800a3d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3da:	6013      	str	r3, [r2, #0]
 800a3dc:	e00f      	b.n	800a3fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	69ba      	ldr	r2, [r7, #24]
 800a3ee:	0151      	lsls	r1, r2, #5
 800a3f0:	69fa      	ldr	r2, [r7, #28]
 800a3f2:	440a      	add	r2, r1
 800a3f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	015a      	lsls	r2, r3, #5
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	4413      	add	r3, r2
 800a406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	69ba      	ldr	r2, [r7, #24]
 800a40e:	0151      	lsls	r1, r2, #5
 800a410:	69fa      	ldr	r2, [r7, #28]
 800a412:	440a      	add	r2, r1
 800a414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a418:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	e133      	b.n	800a688 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	015a      	lsls	r2, r3, #5
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	4413      	add	r3, r2
 800a428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	0151      	lsls	r1, r2, #5
 800a432:	69fa      	ldr	r2, [r7, #28]
 800a434:	440a      	add	r2, r1
 800a436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a43a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a43e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	791b      	ldrb	r3, [r3, #4]
 800a444:	2b01      	cmp	r3, #1
 800a446:	d015      	beq.n	800a474 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 811b 	beq.w	800a688 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	f003 030f 	and.w	r3, r3, #15
 800a462:	2101      	movs	r1, #1
 800a464:	fa01 f303 	lsl.w	r3, r1, r3
 800a468:	69f9      	ldr	r1, [r7, #28]
 800a46a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a46e:	4313      	orrs	r3, r2
 800a470:	634b      	str	r3, [r1, #52]	; 0x34
 800a472:	e109      	b.n	800a688 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a480:	2b00      	cmp	r3, #0
 800a482:	d110      	bne.n	800a4a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	0151      	lsls	r1, r2, #5
 800a496:	69fa      	ldr	r2, [r7, #28]
 800a498:	440a      	add	r2, r1
 800a49a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a49e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4a2:	6013      	str	r3, [r2, #0]
 800a4a4:	e00f      	b.n	800a4c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	0151      	lsls	r1, r2, #5
 800a4b8:	69fa      	ldr	r2, [r7, #28]
 800a4ba:	440a      	add	r2, r1
 800a4bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	6919      	ldr	r1, [r3, #16]
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	781a      	ldrb	r2, [r3, #0]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	b298      	uxth	r0, r3
 800a4d4:	79fb      	ldrb	r3, [r7, #7]
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	4603      	mov	r3, r0
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 fade 	bl	800aa9c <USB_WritePacket>
 800a4e0:	e0d2      	b.n	800a688 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	015a      	lsls	r2, r3, #5
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	69ba      	ldr	r2, [r7, #24]
 800a4f2:	0151      	lsls	r1, r2, #5
 800a4f4:	69fa      	ldr	r2, [r7, #28]
 800a4f6:	440a      	add	r2, r1
 800a4f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4fc:	0cdb      	lsrs	r3, r3, #19
 800a4fe:	04db      	lsls	r3, r3, #19
 800a500:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	015a      	lsls	r2, r3, #5
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	4413      	add	r3, r2
 800a50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	69ba      	ldr	r2, [r7, #24]
 800a512:	0151      	lsls	r1, r2, #5
 800a514:	69fa      	ldr	r2, [r7, #28]
 800a516:	440a      	add	r2, r1
 800a518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a51c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a520:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a524:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d126      	bne.n	800a57c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	015a      	lsls	r2, r3, #5
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	4413      	add	r3, r2
 800a536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53a:	691a      	ldr	r2, [r3, #16]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a544:	69b9      	ldr	r1, [r7, #24]
 800a546:	0148      	lsls	r0, r1, #5
 800a548:	69f9      	ldr	r1, [r7, #28]
 800a54a:	4401      	add	r1, r0
 800a54c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a550:	4313      	orrs	r3, r2
 800a552:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	015a      	lsls	r2, r3, #5
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	4413      	add	r3, r2
 800a55c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	69ba      	ldr	r2, [r7, #24]
 800a564:	0151      	lsls	r1, r2, #5
 800a566:	69fa      	ldr	r2, [r7, #28]
 800a568:	440a      	add	r2, r1
 800a56a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a56e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a572:	6113      	str	r3, [r2, #16]
 800a574:	e03a      	b.n	800a5ec <USB_EPStartXfer+0x3e4>
 800a576:	bf00      	nop
 800a578:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	699a      	ldr	r2, [r3, #24]
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	4413      	add	r3, r2
 800a586:	1e5a      	subs	r2, r3, #1
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a590:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	8afa      	ldrh	r2, [r7, #22]
 800a598:	fb03 f202 	mul.w	r2, r3, r2
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	015a      	lsls	r2, r3, #5
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ac:	691a      	ldr	r2, [r3, #16]
 800a5ae:	8afb      	ldrh	r3, [r7, #22]
 800a5b0:	04d9      	lsls	r1, r3, #19
 800a5b2:	4b38      	ldr	r3, [pc, #224]	; (800a694 <USB_EPStartXfer+0x48c>)
 800a5b4:	400b      	ands	r3, r1
 800a5b6:	69b9      	ldr	r1, [r7, #24]
 800a5b8:	0148      	lsls	r0, r1, #5
 800a5ba:	69f9      	ldr	r1, [r7, #28]
 800a5bc:	4401      	add	r1, r0
 800a5be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	015a      	lsls	r2, r3, #5
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d2:	691a      	ldr	r2, [r3, #16]
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	69db      	ldr	r3, [r3, #28]
 800a5d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5dc:	69b9      	ldr	r1, [r7, #24]
 800a5de:	0148      	lsls	r0, r1, #5
 800a5e0:	69f9      	ldr	r1, [r7, #28]
 800a5e2:	4401      	add	r1, r0
 800a5e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a5ec:	79fb      	ldrb	r3, [r7, #7]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d10d      	bne.n	800a60e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d009      	beq.n	800a60e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	6919      	ldr	r1, [r3, #16]
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	015a      	lsls	r2, r3, #5
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	4413      	add	r3, r2
 800a606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60a:	460a      	mov	r2, r1
 800a60c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	791b      	ldrb	r3, [r3, #4]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d128      	bne.n	800a668 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a622:	2b00      	cmp	r3, #0
 800a624:	d110      	bne.n	800a648 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	015a      	lsls	r2, r3, #5
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	4413      	add	r3, r2
 800a62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	0151      	lsls	r1, r2, #5
 800a638:	69fa      	ldr	r2, [r7, #28]
 800a63a:	440a      	add	r2, r1
 800a63c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a644:	6013      	str	r3, [r2, #0]
 800a646:	e00f      	b.n	800a668 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	015a      	lsls	r2, r3, #5
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	4413      	add	r3, r2
 800a650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	69ba      	ldr	r2, [r7, #24]
 800a658:	0151      	lsls	r1, r2, #5
 800a65a:	69fa      	ldr	r2, [r7, #28]
 800a65c:	440a      	add	r2, r1
 800a65e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a666:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	69ba      	ldr	r2, [r7, #24]
 800a678:	0151      	lsls	r1, r2, #5
 800a67a:	69fa      	ldr	r2, [r7, #28]
 800a67c:	440a      	add	r2, r1
 800a67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a682:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a686:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3720      	adds	r7, #32
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	1ff80000 	.word	0x1ff80000

0800a698 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	785b      	ldrb	r3, [r3, #1]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	f040 80ce 	bne.w	800a856 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d132      	bne.n	800a728 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	015a      	lsls	r2, r3, #5
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	0151      	lsls	r1, r2, #5
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	440a      	add	r2, r1
 800a6d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a6e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a6e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	015a      	lsls	r2, r3, #5
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	0151      	lsls	r1, r2, #5
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	440a      	add	r2, r1
 800a6fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	0151      	lsls	r1, r2, #5
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	440a      	add	r2, r1
 800a71c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a720:	0cdb      	lsrs	r3, r3, #19
 800a722:	04db      	lsls	r3, r3, #19
 800a724:	6113      	str	r3, [r2, #16]
 800a726:	e04e      	b.n	800a7c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	0151      	lsls	r1, r2, #5
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	440a      	add	r2, r1
 800a73e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a742:	0cdb      	lsrs	r3, r3, #19
 800a744:	04db      	lsls	r3, r3, #19
 800a746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	693a      	ldr	r2, [r7, #16]
 800a758:	0151      	lsls	r1, r2, #5
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	440a      	add	r2, r1
 800a75e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a762:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a766:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a76a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	699a      	ldr	r2, [r3, #24]
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	429a      	cmp	r2, r3
 800a776:	d903      	bls.n	800a780 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	68da      	ldr	r2, [r3, #12]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	4413      	add	r3, r2
 800a788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	693a      	ldr	r2, [r7, #16]
 800a790:	0151      	lsls	r1, r2, #5
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	440a      	add	r2, r1
 800a796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a79a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a79e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ac:	691a      	ldr	r2, [r3, #16]
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7b6:	6939      	ldr	r1, [r7, #16]
 800a7b8:	0148      	lsls	r0, r1, #5
 800a7ba:	6979      	ldr	r1, [r7, #20]
 800a7bc:	4401      	add	r1, r0
 800a7be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a7c6:	79fb      	ldrb	r3, [r7, #7]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d11e      	bne.n	800a80a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d009      	beq.n	800a7e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	015a      	lsls	r2, r3, #5
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	0151      	lsls	r1, r2, #5
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	440a      	add	r2, r1
 800a7fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a802:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	e097      	b.n	800a93a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	015a      	lsls	r2, r3, #5
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	4413      	add	r3, r2
 800a812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	0151      	lsls	r1, r2, #5
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	440a      	add	r2, r1
 800a820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a824:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a828:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f000 8083 	beq.w	800a93a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	f003 030f 	and.w	r3, r3, #15
 800a844:	2101      	movs	r1, #1
 800a846:	fa01 f303 	lsl.w	r3, r1, r3
 800a84a:	6979      	ldr	r1, [r7, #20]
 800a84c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a850:	4313      	orrs	r3, r2
 800a852:	634b      	str	r3, [r1, #52]	; 0x34
 800a854:	e071      	b.n	800a93a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	015a      	lsls	r2, r3, #5
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	4413      	add	r3, r2
 800a85e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	0151      	lsls	r1, r2, #5
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	440a      	add	r2, r1
 800a86c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a870:	0cdb      	lsrs	r3, r3, #19
 800a872:	04db      	lsls	r3, r3, #19
 800a874:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	015a      	lsls	r2, r3, #5
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	4413      	add	r3, r2
 800a87e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	693a      	ldr	r2, [r7, #16]
 800a886:	0151      	lsls	r1, r2, #5
 800a888:	697a      	ldr	r2, [r7, #20]
 800a88a:	440a      	add	r2, r1
 800a88c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a890:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a894:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a898:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	68da      	ldr	r2, [r3, #12]
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	68da      	ldr	r2, [r3, #12]
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	015a      	lsls	r2, r3, #5
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	0151      	lsls	r1, r2, #5
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	440a      	add	r2, r1
 800a8c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	015a      	lsls	r2, r3, #5
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	4413      	add	r3, r2
 800a8da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8de:	691a      	ldr	r2, [r3, #16]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8e8:	6939      	ldr	r1, [r7, #16]
 800a8ea:	0148      	lsls	r0, r1, #5
 800a8ec:	6979      	ldr	r1, [r7, #20]
 800a8ee:	4401      	add	r1, r0
 800a8f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a8f8:	79fb      	ldrb	r3, [r7, #7]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d10d      	bne.n	800a91a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d009      	beq.n	800a91a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	6919      	ldr	r1, [r3, #16]
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	015a      	lsls	r2, r3, #5
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	4413      	add	r3, r2
 800a912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a916:	460a      	mov	r2, r1
 800a918:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	015a      	lsls	r2, r3, #5
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	4413      	add	r3, r2
 800a922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	693a      	ldr	r2, [r7, #16]
 800a92a:	0151      	lsls	r1, r2, #5
 800a92c:	697a      	ldr	r2, [r7, #20]
 800a92e:	440a      	add	r2, r1
 800a930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a934:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a938:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	371c      	adds	r7, #28
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a948:	b480      	push	{r7}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a952:	2300      	movs	r3, #0
 800a954:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	785b      	ldrb	r3, [r3, #1]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d14a      	bne.n	800a9fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a97a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a97e:	f040 8086 	bne.w	800aa8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	7812      	ldrb	r2, [r2, #0]
 800a996:	0151      	lsls	r1, r2, #5
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	440a      	add	r2, r1
 800a99c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a9a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	015a      	lsls	r2, r3, #5
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	7812      	ldrb	r2, [r2, #0]
 800a9ba:	0151      	lsls	r1, r2, #5
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	440a      	add	r2, r1
 800a9c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d902      	bls.n	800a9e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	75fb      	strb	r3, [r7, #23]
          break;
 800a9de:	e056      	b.n	800aa8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9f8:	d0e7      	beq.n	800a9ca <USB_EPStopXfer+0x82>
 800a9fa:	e048      	b.n	800aa8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	015a      	lsls	r2, r3, #5
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	4413      	add	r3, r2
 800aa06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa14:	d13b      	bne.n	800aa8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	7812      	ldrb	r2, [r2, #0]
 800aa2a:	0151      	lsls	r1, r2, #5
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	440a      	add	r2, r1
 800aa30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aa38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	7812      	ldrb	r2, [r2, #0]
 800aa4e:	0151      	lsls	r1, r2, #5
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	440a      	add	r2, r1
 800aa54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3301      	adds	r3, #1
 800aa62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f242 7210 	movw	r2, #10000	; 0x2710
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d902      	bls.n	800aa74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	75fb      	strb	r3, [r7, #23]
          break;
 800aa72:	e00c      	b.n	800aa8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	015a      	lsls	r2, r3, #5
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa8c:	d0e7      	beq.n	800aa5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	371c      	adds	r7, #28
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b089      	sub	sp, #36	; 0x24
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	4611      	mov	r1, r2
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	460b      	mov	r3, r1
 800aaac:	71fb      	strb	r3, [r7, #7]
 800aaae:	4613      	mov	r3, r2
 800aab0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800aaba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d123      	bne.n	800ab0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aac2:	88bb      	ldrh	r3, [r7, #4]
 800aac4:	3303      	adds	r3, #3
 800aac6:	089b      	lsrs	r3, r3, #2
 800aac8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800aaca:	2300      	movs	r3, #0
 800aacc:	61bb      	str	r3, [r7, #24]
 800aace:	e018      	b.n	800ab02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aad0:	79fb      	ldrb	r3, [r7, #7]
 800aad2:	031a      	lsls	r2, r3, #12
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	4413      	add	r3, r2
 800aad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aadc:	461a      	mov	r2, r3
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	3301      	adds	r3, #1
 800aae8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	3301      	adds	r3, #1
 800aaee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	3301      	adds	r3, #1
 800ab00:	61bb      	str	r3, [r7, #24]
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d3e2      	bcc.n	800aad0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3724      	adds	r7, #36	; 0x24
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b08b      	sub	sp, #44	; 0x2c
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	4613      	mov	r3, r2
 800ab24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ab2e:	88fb      	ldrh	r3, [r7, #6]
 800ab30:	089b      	lsrs	r3, r3, #2
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ab36:	88fb      	ldrh	r3, [r7, #6]
 800ab38:	f003 0303 	and.w	r3, r3, #3
 800ab3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ab3e:	2300      	movs	r3, #0
 800ab40:	623b      	str	r3, [r7, #32]
 800ab42:	e014      	b.n	800ab6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4e:	601a      	str	r2, [r3, #0]
    pDest++;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	3301      	adds	r3, #1
 800ab54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	3301      	adds	r3, #1
 800ab5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	3301      	adds	r3, #1
 800ab60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	3301      	adds	r3, #1
 800ab66:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ab68:	6a3b      	ldr	r3, [r7, #32]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	623b      	str	r3, [r7, #32]
 800ab6e:	6a3a      	ldr	r2, [r7, #32]
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d3e6      	bcc.n	800ab44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ab76:	8bfb      	ldrh	r3, [r7, #30]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d01e      	beq.n	800abba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab86:	461a      	mov	r2, r3
 800ab88:	f107 0310 	add.w	r3, r7, #16
 800ab8c:	6812      	ldr	r2, [r2, #0]
 800ab8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ab90:	693a      	ldr	r2, [r7, #16]
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	fa22 f303 	lsr.w	r3, r2, r3
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba0:	701a      	strb	r2, [r3, #0]
      i++;
 800aba2:	6a3b      	ldr	r3, [r7, #32]
 800aba4:	3301      	adds	r3, #1
 800aba6:	623b      	str	r3, [r7, #32]
      pDest++;
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	3301      	adds	r3, #1
 800abac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800abae:	8bfb      	ldrh	r3, [r7, #30]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800abb4:	8bfb      	ldrh	r3, [r7, #30]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1ea      	bne.n	800ab90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	372c      	adds	r7, #44	; 0x2c
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	785b      	ldrb	r3, [r3, #1]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d12c      	bne.n	800ac3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	db12      	blt.n	800ac1c <USB_EPSetStall+0x54>
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00f      	beq.n	800ac1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	015a      	lsls	r2, r3, #5
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	4413      	add	r3, r2
 800ac04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	0151      	lsls	r1, r2, #5
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	440a      	add	r2, r1
 800ac12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	0151      	lsls	r1, r2, #5
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	440a      	add	r2, r1
 800ac32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac3a:	6013      	str	r3, [r2, #0]
 800ac3c:	e02b      	b.n	800ac96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	015a      	lsls	r2, r3, #5
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	4413      	add	r3, r2
 800ac46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	db12      	blt.n	800ac76 <USB_EPSetStall+0xae>
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00f      	beq.n	800ac76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	015a      	lsls	r2, r3, #5
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	0151      	lsls	r1, r2, #5
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	440a      	add	r2, r1
 800ac6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	015a      	lsls	r2, r3, #5
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	0151      	lsls	r1, r2, #5
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	440a      	add	r2, r1
 800ac8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	785b      	ldrb	r3, [r3, #1]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d128      	bne.n	800ad12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	015a      	lsls	r2, r3, #5
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	4413      	add	r3, r2
 800acc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68ba      	ldr	r2, [r7, #8]
 800acd0:	0151      	lsls	r1, r2, #5
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	440a      	add	r2, r1
 800acd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800acde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	791b      	ldrb	r3, [r3, #4]
 800ace4:	2b03      	cmp	r3, #3
 800ace6:	d003      	beq.n	800acf0 <USB_EPClearStall+0x4c>
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	791b      	ldrb	r3, [r3, #4]
 800acec:	2b02      	cmp	r3, #2
 800acee:	d138      	bne.n	800ad62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	015a      	lsls	r2, r3, #5
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	4413      	add	r3, r2
 800acf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	0151      	lsls	r1, r2, #5
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	440a      	add	r2, r1
 800ad06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad0e:	6013      	str	r3, [r2, #0]
 800ad10:	e027      	b.n	800ad62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	015a      	lsls	r2, r3, #5
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	4413      	add	r3, r2
 800ad1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68ba      	ldr	r2, [r7, #8]
 800ad22:	0151      	lsls	r1, r2, #5
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	440a      	add	r2, r1
 800ad28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	791b      	ldrb	r3, [r3, #4]
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	d003      	beq.n	800ad42 <USB_EPClearStall+0x9e>
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	791b      	ldrb	r3, [r3, #4]
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d10f      	bne.n	800ad62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	015a      	lsls	r2, r3, #5
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	4413      	add	r3, r2
 800ad4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	0151      	lsls	r1, r2, #5
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	440a      	add	r2, r1
 800ad58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ad92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	78fb      	ldrb	r3, [r7, #3]
 800ad9e:	011b      	lsls	r3, r3, #4
 800ada0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ada4:	68f9      	ldr	r1, [r7, #12]
 800ada6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adaa:	4313      	orrs	r3, r2
 800adac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800add6:	f023 0303 	bic.w	r3, r3, #3
 800adda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800adea:	f023 0302 	bic.w	r3, r3, #2
 800adee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3714      	adds	r7, #20
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800adfe:	b480      	push	{r7}
 800ae00:	b085      	sub	sp, #20
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae18:	f023 0303 	bic.w	r3, r3, #3
 800ae1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae2c:	f043 0302 	orr.w	r3, r3, #2
 800ae30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3714      	adds	r7, #20
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	4013      	ands	r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ae58:	68fb      	ldr	r3, [r7, #12]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b085      	sub	sp, #20
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae82:	69db      	ldr	r3, [r3, #28]
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	4013      	ands	r3, r2
 800ae88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	0c1b      	lsrs	r3, r3, #16
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr

0800ae9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b085      	sub	sp, #20
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeb6:	69db      	ldr	r3, [r3, #28]
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	4013      	ands	r3, r2
 800aebc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	b29b      	uxth	r3, r3
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aece:	b480      	push	{r7}
 800aed0:	b085      	sub	sp, #20
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	460b      	mov	r3, r1
 800aed8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aede:	78fb      	ldrb	r3, [r7, #3]
 800aee0:	015a      	lsls	r2, r3, #5
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	4013      	ands	r3, r2
 800aefa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aefc:	68bb      	ldr	r3, [r7, #8]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b087      	sub	sp, #28
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	460b      	mov	r3, r1
 800af14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800af2e:	78fb      	ldrb	r3, [r7, #3]
 800af30:	f003 030f 	and.w	r3, r3, #15
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	fa22 f303 	lsr.w	r3, r2, r3
 800af3a:	01db      	lsls	r3, r3, #7
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	4313      	orrs	r3, r2
 800af42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800af44:	78fb      	ldrb	r3, [r7, #3]
 800af46:	015a      	lsls	r2, r3, #5
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	4413      	add	r3, r2
 800af4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	4013      	ands	r3, r2
 800af56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af58:	68bb      	ldr	r3, [r7, #8]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	371c      	adds	r7, #28
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800af66:	b480      	push	{r7}
 800af68:	b083      	sub	sp, #12
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	f003 0301 	and.w	r3, r3, #1
}
 800af76:	4618      	mov	r0, r3
 800af78:	370c      	adds	r7, #12
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800af82:	b480      	push	{r7}
 800af84:	b085      	sub	sp, #20
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800afa0:	f023 0307 	bic.w	r3, r3, #7
 800afa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3714      	adds	r7, #20
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800afc8:	b480      	push	{r7}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	460b      	mov	r3, r1
 800afd2:	607a      	str	r2, [r7, #4]
 800afd4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	333c      	adds	r3, #60	; 0x3c
 800afde:	3304      	adds	r3, #4
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	4a26      	ldr	r2, [pc, #152]	; (800b080 <USB_EP0_OutStart+0xb8>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d90a      	bls.n	800b002 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800affc:	d101      	bne.n	800b002 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800affe:	2300      	movs	r3, #0
 800b000:	e037      	b.n	800b072 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b008:	461a      	mov	r2, r3
 800b00a:	2300      	movs	r3, #0
 800b00c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b01c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b020:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	697a      	ldr	r2, [r7, #20]
 800b02c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b030:	f043 0318 	orr.w	r3, r3, #24
 800b034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	697a      	ldr	r2, [r7, #20]
 800b040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b044:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b048:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b04a:	7afb      	ldrb	r3, [r7, #11]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d10f      	bne.n	800b070 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b056:	461a      	mov	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b06a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b06e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	371c      	adds	r7, #28
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	4f54300a 	.word	0x4f54300a

0800b084 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b08c:	2300      	movs	r3, #0
 800b08e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	3301      	adds	r3, #1
 800b094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	4a13      	ldr	r2, [pc, #76]	; (800b0e8 <USB_CoreReset+0x64>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d901      	bls.n	800b0a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e01b      	b.n	800b0da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	daf2      	bge.n	800b090 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	f043 0201 	orr.w	r2, r3, #1
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	4a09      	ldr	r2, [pc, #36]	; (800b0e8 <USB_CoreReset+0x64>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d901      	bls.n	800b0cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e006      	b.n	800b0da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	f003 0301 	and.w	r3, r3, #1
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d0f0      	beq.n	800b0ba <USB_CoreReset+0x36>

  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	00030d40 	.word	0x00030d40

0800b0ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b0f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b0fc:	f005 fb8e 	bl	801081c <USBD_static_malloc>
 800b100:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d109      	bne.n	800b11c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	32b0      	adds	r2, #176	; 0xb0
 800b112:	2100      	movs	r1, #0
 800b114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b118:	2302      	movs	r3, #2
 800b11a:	e0d4      	b.n	800b2c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b11c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b120:	2100      	movs	r1, #0
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f005 fc08 	bl	8010938 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	32b0      	adds	r2, #176	; 0xb0
 800b132:	68f9      	ldr	r1, [r7, #12]
 800b134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	32b0      	adds	r2, #176	; 0xb0
 800b142:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	7c1b      	ldrb	r3, [r3, #16]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d138      	bne.n	800b1c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b154:	4b5e      	ldr	r3, [pc, #376]	; (800b2d0 <USBD_CDC_Init+0x1e4>)
 800b156:	7819      	ldrb	r1, [r3, #0]
 800b158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b15c:	2202      	movs	r2, #2
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f005 fa39 	bl	80105d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b164:	4b5a      	ldr	r3, [pc, #360]	; (800b2d0 <USBD_CDC_Init+0x1e4>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	f003 020f 	and.w	r2, r3, #15
 800b16c:	6879      	ldr	r1, [r7, #4]
 800b16e:	4613      	mov	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	440b      	add	r3, r1
 800b178:	3324      	adds	r3, #36	; 0x24
 800b17a:	2201      	movs	r2, #1
 800b17c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b17e:	4b55      	ldr	r3, [pc, #340]	; (800b2d4 <USBD_CDC_Init+0x1e8>)
 800b180:	7819      	ldrb	r1, [r3, #0]
 800b182:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b186:	2202      	movs	r2, #2
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f005 fa24 	bl	80105d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b18e:	4b51      	ldr	r3, [pc, #324]	; (800b2d4 <USBD_CDC_Init+0x1e8>)
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	f003 020f 	and.w	r2, r3, #15
 800b196:	6879      	ldr	r1, [r7, #4]
 800b198:	4613      	mov	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	440b      	add	r3, r1
 800b1a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b1aa:	4b4b      	ldr	r3, [pc, #300]	; (800b2d8 <USBD_CDC_Init+0x1ec>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	f003 020f 	and.w	r2, r3, #15
 800b1b2:	6879      	ldr	r1, [r7, #4]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	440b      	add	r3, r1
 800b1be:	3326      	adds	r3, #38	; 0x26
 800b1c0:	2210      	movs	r2, #16
 800b1c2:	801a      	strh	r2, [r3, #0]
 800b1c4:	e035      	b.n	800b232 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b1c6:	4b42      	ldr	r3, [pc, #264]	; (800b2d0 <USBD_CDC_Init+0x1e4>)
 800b1c8:	7819      	ldrb	r1, [r3, #0]
 800b1ca:	2340      	movs	r3, #64	; 0x40
 800b1cc:	2202      	movs	r2, #2
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f005 fa01 	bl	80105d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b1d4:	4b3e      	ldr	r3, [pc, #248]	; (800b2d0 <USBD_CDC_Init+0x1e4>)
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	f003 020f 	and.w	r2, r3, #15
 800b1dc:	6879      	ldr	r1, [r7, #4]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	440b      	add	r3, r1
 800b1e8:	3324      	adds	r3, #36	; 0x24
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b1ee:	4b39      	ldr	r3, [pc, #228]	; (800b2d4 <USBD_CDC_Init+0x1e8>)
 800b1f0:	7819      	ldrb	r1, [r3, #0]
 800b1f2:	2340      	movs	r3, #64	; 0x40
 800b1f4:	2202      	movs	r2, #2
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f005 f9ed 	bl	80105d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b1fc:	4b35      	ldr	r3, [pc, #212]	; (800b2d4 <USBD_CDC_Init+0x1e8>)
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	f003 020f 	and.w	r2, r3, #15
 800b204:	6879      	ldr	r1, [r7, #4]
 800b206:	4613      	mov	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	4413      	add	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	440b      	add	r3, r1
 800b210:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b214:	2201      	movs	r2, #1
 800b216:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b218:	4b2f      	ldr	r3, [pc, #188]	; (800b2d8 <USBD_CDC_Init+0x1ec>)
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	f003 020f 	and.w	r2, r3, #15
 800b220:	6879      	ldr	r1, [r7, #4]
 800b222:	4613      	mov	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	440b      	add	r3, r1
 800b22c:	3326      	adds	r3, #38	; 0x26
 800b22e:	2210      	movs	r2, #16
 800b230:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b232:	4b29      	ldr	r3, [pc, #164]	; (800b2d8 <USBD_CDC_Init+0x1ec>)
 800b234:	7819      	ldrb	r1, [r3, #0]
 800b236:	2308      	movs	r3, #8
 800b238:	2203      	movs	r2, #3
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f005 f9cb 	bl	80105d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b240:	4b25      	ldr	r3, [pc, #148]	; (800b2d8 <USBD_CDC_Init+0x1ec>)
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	f003 020f 	and.w	r2, r3, #15
 800b248:	6879      	ldr	r1, [r7, #4]
 800b24a:	4613      	mov	r3, r2
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	4413      	add	r3, r2
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	440b      	add	r3, r1
 800b254:	3324      	adds	r3, #36	; 0x24
 800b256:	2201      	movs	r2, #1
 800b258:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	33b0      	adds	r3, #176	; 0xb0
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	4413      	add	r3, r2
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b290:	2302      	movs	r3, #2
 800b292:	e018      	b.n	800b2c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	7c1b      	ldrb	r3, [r3, #16]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10a      	bne.n	800b2b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b29c:	4b0d      	ldr	r3, [pc, #52]	; (800b2d4 <USBD_CDC_Init+0x1e8>)
 800b29e:	7819      	ldrb	r1, [r3, #0]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f005 fa82 	bl	80107b4 <USBD_LL_PrepareReceive>
 800b2b0:	e008      	b.n	800b2c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2b2:	4b08      	ldr	r3, [pc, #32]	; (800b2d4 <USBD_CDC_Init+0x1e8>)
 800b2b4:	7819      	ldrb	r1, [r3, #0]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2bc:	2340      	movs	r3, #64	; 0x40
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f005 fa78 	bl	80107b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20000093 	.word	0x20000093
 800b2d4:	20000094 	.word	0x20000094
 800b2d8:	20000095 	.word	0x20000095

0800b2dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b2e8:	4b3a      	ldr	r3, [pc, #232]	; (800b3d4 <USBD_CDC_DeInit+0xf8>)
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f005 f997 	bl	8010622 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b2f4:	4b37      	ldr	r3, [pc, #220]	; (800b3d4 <USBD_CDC_DeInit+0xf8>)
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	f003 020f 	and.w	r2, r3, #15
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	440b      	add	r3, r1
 800b308:	3324      	adds	r3, #36	; 0x24
 800b30a:	2200      	movs	r2, #0
 800b30c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b30e:	4b32      	ldr	r3, [pc, #200]	; (800b3d8 <USBD_CDC_DeInit+0xfc>)
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f005 f984 	bl	8010622 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b31a:	4b2f      	ldr	r3, [pc, #188]	; (800b3d8 <USBD_CDC_DeInit+0xfc>)
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	f003 020f 	and.w	r2, r3, #15
 800b322:	6879      	ldr	r1, [r7, #4]
 800b324:	4613      	mov	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4413      	add	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	440b      	add	r3, r1
 800b32e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b332:	2200      	movs	r2, #0
 800b334:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b336:	4b29      	ldr	r3, [pc, #164]	; (800b3dc <USBD_CDC_DeInit+0x100>)
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	4619      	mov	r1, r3
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f005 f970 	bl	8010622 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b342:	4b26      	ldr	r3, [pc, #152]	; (800b3dc <USBD_CDC_DeInit+0x100>)
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	f003 020f 	and.w	r2, r3, #15
 800b34a:	6879      	ldr	r1, [r7, #4]
 800b34c:	4613      	mov	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	440b      	add	r3, r1
 800b356:	3324      	adds	r3, #36	; 0x24
 800b358:	2200      	movs	r2, #0
 800b35a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b35c:	4b1f      	ldr	r3, [pc, #124]	; (800b3dc <USBD_CDC_DeInit+0x100>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	f003 020f 	and.w	r2, r3, #15
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	4613      	mov	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	440b      	add	r3, r1
 800b370:	3326      	adds	r3, #38	; 0x26
 800b372:	2200      	movs	r2, #0
 800b374:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	32b0      	adds	r2, #176	; 0xb0
 800b380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d01f      	beq.n	800b3c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	33b0      	adds	r3, #176	; 0xb0
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4413      	add	r3, r2
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	32b0      	adds	r2, #176	; 0xb0
 800b3a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f005 fa44 	bl	8010838 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	32b0      	adds	r2, #176	; 0xb0
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3708      	adds	r7, #8
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	20000093 	.word	0x20000093
 800b3d8:	20000094 	.word	0x20000094
 800b3dc:	20000095 	.word	0x20000095

0800b3e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	32b0      	adds	r2, #176	; 0xb0
 800b3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b402:	2300      	movs	r3, #0
 800b404:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e0bf      	b.n	800b590 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d050      	beq.n	800b4be <USBD_CDC_Setup+0xde>
 800b41c:	2b20      	cmp	r3, #32
 800b41e:	f040 80af 	bne.w	800b580 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	88db      	ldrh	r3, [r3, #6]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d03a      	beq.n	800b4a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	b25b      	sxtb	r3, r3
 800b430:	2b00      	cmp	r3, #0
 800b432:	da1b      	bge.n	800b46c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	33b0      	adds	r3, #176	; 0xb0
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b44a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	88d2      	ldrh	r2, [r2, #6]
 800b450:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	88db      	ldrh	r3, [r3, #6]
 800b456:	2b07      	cmp	r3, #7
 800b458:	bf28      	it	cs
 800b45a:	2307      	movcs	r3, #7
 800b45c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	89fa      	ldrh	r2, [r7, #14]
 800b462:	4619      	mov	r1, r3
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f001 fd43 	bl	800cef0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b46a:	e090      	b.n	800b58e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	785a      	ldrb	r2, [r3, #1]
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	88db      	ldrh	r3, [r3, #6]
 800b47a:	2b3f      	cmp	r3, #63	; 0x3f
 800b47c:	d803      	bhi.n	800b486 <USBD_CDC_Setup+0xa6>
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	88db      	ldrh	r3, [r3, #6]
 800b482:	b2da      	uxtb	r2, r3
 800b484:	e000      	b.n	800b488 <USBD_CDC_Setup+0xa8>
 800b486:	2240      	movs	r2, #64	; 0x40
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b48e:	6939      	ldr	r1, [r7, #16]
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b496:	461a      	mov	r2, r3
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f001 fd55 	bl	800cf48 <USBD_CtlPrepareRx>
      break;
 800b49e:	e076      	b.n	800b58e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	33b0      	adds	r3, #176	; 0xb0
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	4413      	add	r3, r2
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	7850      	ldrb	r0, [r2, #1]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	4798      	blx	r3
      break;
 800b4bc:	e067      	b.n	800b58e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	785b      	ldrb	r3, [r3, #1]
 800b4c2:	2b0b      	cmp	r3, #11
 800b4c4:	d851      	bhi.n	800b56a <USBD_CDC_Setup+0x18a>
 800b4c6:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <USBD_CDC_Setup+0xec>)
 800b4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4cc:	0800b4fd 	.word	0x0800b4fd
 800b4d0:	0800b579 	.word	0x0800b579
 800b4d4:	0800b56b 	.word	0x0800b56b
 800b4d8:	0800b56b 	.word	0x0800b56b
 800b4dc:	0800b56b 	.word	0x0800b56b
 800b4e0:	0800b56b 	.word	0x0800b56b
 800b4e4:	0800b56b 	.word	0x0800b56b
 800b4e8:	0800b56b 	.word	0x0800b56b
 800b4ec:	0800b56b 	.word	0x0800b56b
 800b4f0:	0800b56b 	.word	0x0800b56b
 800b4f4:	0800b527 	.word	0x0800b527
 800b4f8:	0800b551 	.word	0x0800b551
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b502:	b2db      	uxtb	r3, r3
 800b504:	2b03      	cmp	r3, #3
 800b506:	d107      	bne.n	800b518 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b508:	f107 030a 	add.w	r3, r7, #10
 800b50c:	2202      	movs	r2, #2
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f001 fced 	bl	800cef0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b516:	e032      	b.n	800b57e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f001 fc77 	bl	800ce0e <USBD_CtlError>
            ret = USBD_FAIL;
 800b520:	2303      	movs	r3, #3
 800b522:	75fb      	strb	r3, [r7, #23]
          break;
 800b524:	e02b      	b.n	800b57e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	2b03      	cmp	r3, #3
 800b530:	d107      	bne.n	800b542 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b532:	f107 030d 	add.w	r3, r7, #13
 800b536:	2201      	movs	r2, #1
 800b538:	4619      	mov	r1, r3
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f001 fcd8 	bl	800cef0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b540:	e01d      	b.n	800b57e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 fc62 	bl	800ce0e <USBD_CtlError>
            ret = USBD_FAIL;
 800b54a:	2303      	movs	r3, #3
 800b54c:	75fb      	strb	r3, [r7, #23]
          break;
 800b54e:	e016      	b.n	800b57e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b556:	b2db      	uxtb	r3, r3
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d00f      	beq.n	800b57c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b55c:	6839      	ldr	r1, [r7, #0]
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f001 fc55 	bl	800ce0e <USBD_CtlError>
            ret = USBD_FAIL;
 800b564:	2303      	movs	r3, #3
 800b566:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b568:	e008      	b.n	800b57c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b56a:	6839      	ldr	r1, [r7, #0]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f001 fc4e 	bl	800ce0e <USBD_CtlError>
          ret = USBD_FAIL;
 800b572:	2303      	movs	r3, #3
 800b574:	75fb      	strb	r3, [r7, #23]
          break;
 800b576:	e002      	b.n	800b57e <USBD_CDC_Setup+0x19e>
          break;
 800b578:	bf00      	nop
 800b57a:	e008      	b.n	800b58e <USBD_CDC_Setup+0x1ae>
          break;
 800b57c:	bf00      	nop
      }
      break;
 800b57e:	e006      	b.n	800b58e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f001 fc43 	bl	800ce0e <USBD_CtlError>
      ret = USBD_FAIL;
 800b588:	2303      	movs	r3, #3
 800b58a:	75fb      	strb	r3, [r7, #23]
      break;
 800b58c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	32b0      	adds	r2, #176	; 0xb0
 800b5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d101      	bne.n	800b5c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e065      	b.n	800b68e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	32b0      	adds	r2, #176	; 0xb0
 800b5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b5d2:	78fb      	ldrb	r3, [r7, #3]
 800b5d4:	f003 020f 	and.w	r2, r3, #15
 800b5d8:	6879      	ldr	r1, [r7, #4]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4413      	add	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	440b      	add	r3, r1
 800b5e4:	3318      	adds	r3, #24
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d02f      	beq.n	800b64c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b5ec:	78fb      	ldrb	r3, [r7, #3]
 800b5ee:	f003 020f 	and.w	r2, r3, #15
 800b5f2:	6879      	ldr	r1, [r7, #4]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4413      	add	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	440b      	add	r3, r1
 800b5fe:	3318      	adds	r3, #24
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	78fb      	ldrb	r3, [r7, #3]
 800b604:	f003 010f 	and.w	r1, r3, #15
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	460b      	mov	r3, r1
 800b60c:	00db      	lsls	r3, r3, #3
 800b60e:	440b      	add	r3, r1
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4403      	add	r3, r0
 800b614:	3348      	adds	r3, #72	; 0x48
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	fbb2 f1f3 	udiv	r1, r2, r3
 800b61c:	fb01 f303 	mul.w	r3, r1, r3
 800b620:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b622:	2b00      	cmp	r3, #0
 800b624:	d112      	bne.n	800b64c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b626:	78fb      	ldrb	r3, [r7, #3]
 800b628:	f003 020f 	and.w	r2, r3, #15
 800b62c:	6879      	ldr	r1, [r7, #4]
 800b62e:	4613      	mov	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	4413      	add	r3, r2
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	440b      	add	r3, r1
 800b638:	3318      	adds	r3, #24
 800b63a:	2200      	movs	r2, #0
 800b63c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b63e:	78f9      	ldrb	r1, [r7, #3]
 800b640:	2300      	movs	r3, #0
 800b642:	2200      	movs	r2, #0
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f005 f894 	bl	8010772 <USBD_LL_Transmit>
 800b64a:	e01f      	b.n	800b68c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2200      	movs	r2, #0
 800b650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	33b0      	adds	r3, #176	; 0xb0
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	4413      	add	r3, r2
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d010      	beq.n	800b68c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	33b0      	adds	r3, #176	; 0xb0
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4413      	add	r3, r2
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b688:	78fa      	ldrb	r2, [r7, #3]
 800b68a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b084      	sub	sp, #16
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
 800b69e:	460b      	mov	r3, r1
 800b6a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	32b0      	adds	r2, #176	; 0xb0
 800b6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	32b0      	adds	r2, #176	; 0xb0
 800b6bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	e01a      	b.n	800b6fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b6c8:	78fb      	ldrb	r3, [r7, #3]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f005 f892 	bl	80107f6 <USBD_LL_GetRxDataSize>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	33b0      	adds	r3, #176	; 0xb0
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	4413      	add	r3, r2
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b706:	b580      	push	{r7, lr}
 800b708:	b084      	sub	sp, #16
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	32b0      	adds	r2, #176	; 0xb0
 800b718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b71c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d101      	bne.n	800b728 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b724:	2303      	movs	r3, #3
 800b726:	e025      	b.n	800b774 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	33b0      	adds	r3, #176	; 0xb0
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4413      	add	r3, r2
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d01a      	beq.n	800b772 <USBD_CDC_EP0_RxReady+0x6c>
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b742:	2bff      	cmp	r3, #255	; 0xff
 800b744:	d015      	beq.n	800b772 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	33b0      	adds	r3, #176	; 0xb0
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b75e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b766:	b292      	uxth	r2, r2
 800b768:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	22ff      	movs	r2, #255	; 0xff
 800b76e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b784:	2182      	movs	r1, #130	; 0x82
 800b786:	4818      	ldr	r0, [pc, #96]	; (800b7e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b788:	f000 fd09 	bl	800c19e <USBD_GetEpDesc>
 800b78c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b78e:	2101      	movs	r1, #1
 800b790:	4815      	ldr	r0, [pc, #84]	; (800b7e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b792:	f000 fd04 	bl	800c19e <USBD_GetEpDesc>
 800b796:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b798:	2181      	movs	r1, #129	; 0x81
 800b79a:	4813      	ldr	r0, [pc, #76]	; (800b7e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b79c:	f000 fcff 	bl	800c19e <USBD_GetEpDesc>
 800b7a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d002      	beq.n	800b7ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	2210      	movs	r2, #16
 800b7ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d006      	beq.n	800b7c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7bc:	711a      	strb	r2, [r3, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d006      	beq.n	800b7d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7d0:	711a      	strb	r2, [r3, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2243      	movs	r2, #67	; 0x43
 800b7da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7dc:	4b02      	ldr	r3, [pc, #8]	; (800b7e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3718      	adds	r7, #24
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	20000050 	.word	0x20000050

0800b7ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b7f4:	2182      	movs	r1, #130	; 0x82
 800b7f6:	4818      	ldr	r0, [pc, #96]	; (800b858 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b7f8:	f000 fcd1 	bl	800c19e <USBD_GetEpDesc>
 800b7fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b7fe:	2101      	movs	r1, #1
 800b800:	4815      	ldr	r0, [pc, #84]	; (800b858 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b802:	f000 fccc 	bl	800c19e <USBD_GetEpDesc>
 800b806:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b808:	2181      	movs	r1, #129	; 0x81
 800b80a:	4813      	ldr	r0, [pc, #76]	; (800b858 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b80c:	f000 fcc7 	bl	800c19e <USBD_GetEpDesc>
 800b810:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d002      	beq.n	800b81e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	2210      	movs	r2, #16
 800b81c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d006      	beq.n	800b832 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	2200      	movs	r2, #0
 800b828:	711a      	strb	r2, [r3, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f042 0202 	orr.w	r2, r2, #2
 800b830:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d006      	beq.n	800b846 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	711a      	strb	r2, [r3, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	f042 0202 	orr.w	r2, r2, #2
 800b844:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2243      	movs	r2, #67	; 0x43
 800b84a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b84c:	4b02      	ldr	r3, [pc, #8]	; (800b858 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3718      	adds	r7, #24
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	20000050 	.word	0x20000050

0800b85c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b864:	2182      	movs	r1, #130	; 0x82
 800b866:	4818      	ldr	r0, [pc, #96]	; (800b8c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b868:	f000 fc99 	bl	800c19e <USBD_GetEpDesc>
 800b86c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b86e:	2101      	movs	r1, #1
 800b870:	4815      	ldr	r0, [pc, #84]	; (800b8c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b872:	f000 fc94 	bl	800c19e <USBD_GetEpDesc>
 800b876:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b878:	2181      	movs	r1, #129	; 0x81
 800b87a:	4813      	ldr	r0, [pc, #76]	; (800b8c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b87c:	f000 fc8f 	bl	800c19e <USBD_GetEpDesc>
 800b880:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d002      	beq.n	800b88e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	2210      	movs	r2, #16
 800b88c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d006      	beq.n	800b8a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	2200      	movs	r2, #0
 800b898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b89c:	711a      	strb	r2, [r3, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d006      	beq.n	800b8b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8b0:	711a      	strb	r2, [r3, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2243      	movs	r2, #67	; 0x43
 800b8ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b8bc:	4b02      	ldr	r3, [pc, #8]	; (800b8c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3718      	adds	r7, #24
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	20000050 	.word	0x20000050

0800b8cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	220a      	movs	r2, #10
 800b8d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b8da:	4b03      	ldr	r3, [pc, #12]	; (800b8e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	2000000c 	.word	0x2000000c

0800b8ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d101      	bne.n	800b900 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e009      	b.n	800b914 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	33b0      	adds	r3, #176	; 0xb0
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4413      	add	r3, r2
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b920:	b480      	push	{r7}
 800b922:	b087      	sub	sp, #28
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	32b0      	adds	r2, #176	; 0xb0
 800b936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b93a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d101      	bne.n	800b946 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b942:	2303      	movs	r3, #3
 800b944:	e008      	b.n	800b958 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	371c      	adds	r7, #28
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	32b0      	adds	r2, #176	; 0xb0
 800b978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b97c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d101      	bne.n	800b988 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b984:	2303      	movs	r3, #3
 800b986:	e004      	b.n	800b992 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
	...

0800b9a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	32b0      	adds	r2, #176	; 0xb0
 800b9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	32b0      	adds	r2, #176	; 0xb0
 800b9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	e018      	b.n	800ba00 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	7c1b      	ldrb	r3, [r3, #16]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d10a      	bne.n	800b9ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9d6:	4b0c      	ldr	r3, [pc, #48]	; (800ba08 <USBD_CDC_ReceivePacket+0x68>)
 800b9d8:	7819      	ldrb	r1, [r3, #0]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f004 fee5 	bl	80107b4 <USBD_LL_PrepareReceive>
 800b9ea:	e008      	b.n	800b9fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9ec:	4b06      	ldr	r3, [pc, #24]	; (800ba08 <USBD_CDC_ReceivePacket+0x68>)
 800b9ee:	7819      	ldrb	r1, [r3, #0]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9f6:	2340      	movs	r3, #64	; 0x40
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f004 fedb 	bl	80107b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	20000094 	.word	0x20000094

0800ba0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	4613      	mov	r3, r2
 800ba18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba20:	2303      	movs	r3, #3
 800ba22:	e01f      	b.n	800ba64 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d003      	beq.n	800ba4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	79fa      	ldrb	r2, [r7, #7]
 800ba56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f004 fd55 	bl	8010508 <USBD_LL_Init>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3718      	adds	r7, #24
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba76:	2300      	movs	r3, #0
 800ba78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d101      	bne.n	800ba84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba80:	2303      	movs	r3, #3
 800ba82:	e025      	b.n	800bad0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	32ae      	adds	r2, #174	; 0xae
 800ba96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00f      	beq.n	800bac0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	32ae      	adds	r2, #174	; 0xae
 800baaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab0:	f107 020e 	add.w	r2, r7, #14
 800bab4:	4610      	mov	r0, r2
 800bab6:	4798      	blx	r3
 800bab8:	4602      	mov	r2, r0
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bac6:	1c5a      	adds	r2, r3, #1
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f004 fd5d 	bl	80105a0 <USBD_LL_Start>
 800bae6:	4603      	mov	r3, r0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800baf8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	370c      	adds	r7, #12
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr

0800bb06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b084      	sub	sp, #16
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb12:	2300      	movs	r3, #0
 800bb14:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d009      	beq.n	800bb34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	78fa      	ldrb	r2, [r7, #3]
 800bb2a:	4611      	mov	r1, r2
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	4798      	blx	r3
 800bb30:	4603      	mov	r3, r0
 800bb32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b084      	sub	sp, #16
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	460b      	mov	r3, r1
 800bb48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	78fa      	ldrb	r2, [r7, #3]
 800bb58:	4611      	mov	r1, r2
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	4798      	blx	r3
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d001      	beq.n	800bb68 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bb64:	2303      	movs	r3, #3
 800bb66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b084      	sub	sp, #16
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb82:	6839      	ldr	r1, [r7, #0]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f001 f908 	bl	800cd9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb98:	461a      	mov	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bba6:	f003 031f 	and.w	r3, r3, #31
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d01a      	beq.n	800bbe4 <USBD_LL_SetupStage+0x72>
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	d822      	bhi.n	800bbf8 <USBD_LL_SetupStage+0x86>
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d002      	beq.n	800bbbc <USBD_LL_SetupStage+0x4a>
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d00a      	beq.n	800bbd0 <USBD_LL_SetupStage+0x5e>
 800bbba:	e01d      	b.n	800bbf8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 fb5f 	bl	800c288 <USBD_StdDevReq>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	73fb      	strb	r3, [r7, #15]
      break;
 800bbce:	e020      	b.n	800bc12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 fbc7 	bl	800c36c <USBD_StdItfReq>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	73fb      	strb	r3, [r7, #15]
      break;
 800bbe2:	e016      	b.n	800bc12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbea:	4619      	mov	r1, r3
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fc29 	bl	800c444 <USBD_StdEPReq>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	73fb      	strb	r3, [r7, #15]
      break;
 800bbf6:	e00c      	b.n	800bc12 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bbfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	4619      	mov	r1, r3
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f004 fd2a 	bl	8010660 <USBD_LL_StallEP>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc10:	bf00      	nop
  }

  return ret;
 800bc12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b086      	sub	sp, #24
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	460b      	mov	r3, r1
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bc2e:	7afb      	ldrb	r3, [r7, #11]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d16e      	bne.n	800bd12 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bc3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	f040 8098 	bne.w	800bd78 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	689a      	ldr	r2, [r3, #8]
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d913      	bls.n	800bc7c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	689a      	ldr	r2, [r3, #8]
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	1ad2      	subs	r2, r2, r3
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	68da      	ldr	r2, [r3, #12]
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	bf28      	it	cs
 800bc6e:	4613      	movcs	r3, r2
 800bc70:	461a      	mov	r2, r3
 800bc72:	6879      	ldr	r1, [r7, #4]
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f001 f984 	bl	800cf82 <USBD_CtlContinueRx>
 800bc7a:	e07d      	b.n	800bd78 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc82:	f003 031f 	and.w	r3, r3, #31
 800bc86:	2b02      	cmp	r3, #2
 800bc88:	d014      	beq.n	800bcb4 <USBD_LL_DataOutStage+0x98>
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d81d      	bhi.n	800bcca <USBD_LL_DataOutStage+0xae>
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d002      	beq.n	800bc98 <USBD_LL_DataOutStage+0x7c>
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d003      	beq.n	800bc9e <USBD_LL_DataOutStage+0x82>
 800bc96:	e018      	b.n	800bcca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	75bb      	strb	r3, [r7, #22]
            break;
 800bc9c:	e018      	b.n	800bcd0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	4619      	mov	r1, r3
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f000 fa5e 	bl	800c16a <USBD_CoreFindIF>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	75bb      	strb	r3, [r7, #22]
            break;
 800bcb2:	e00d      	b.n	800bcd0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f000 fa60 	bl	800c184 <USBD_CoreFindEP>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	75bb      	strb	r3, [r7, #22]
            break;
 800bcc8:	e002      	b.n	800bcd0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bcca:	2300      	movs	r3, #0
 800bccc:	75bb      	strb	r3, [r7, #22]
            break;
 800bcce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bcd0:	7dbb      	ldrb	r3, [r7, #22]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d119      	bne.n	800bd0a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	2b03      	cmp	r3, #3
 800bce0:	d113      	bne.n	800bd0a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bce2:	7dba      	ldrb	r2, [r7, #22]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	32ae      	adds	r2, #174	; 0xae
 800bce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00b      	beq.n	800bd0a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bcf2:	7dba      	ldrb	r2, [r7, #22]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bcfa:	7dba      	ldrb	r2, [r7, #22]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	32ae      	adds	r2, #174	; 0xae
 800bd00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f001 f94a 	bl	800cfa4 <USBD_CtlSendStatus>
 800bd10:	e032      	b.n	800bd78 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bd12:	7afb      	ldrb	r3, [r7, #11]
 800bd14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f000 fa31 	bl	800c184 <USBD_CoreFindEP>
 800bd22:	4603      	mov	r3, r0
 800bd24:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd26:	7dbb      	ldrb	r3, [r7, #22]
 800bd28:	2bff      	cmp	r3, #255	; 0xff
 800bd2a:	d025      	beq.n	800bd78 <USBD_LL_DataOutStage+0x15c>
 800bd2c:	7dbb      	ldrb	r3, [r7, #22]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d122      	bne.n	800bd78 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2b03      	cmp	r3, #3
 800bd3c:	d117      	bne.n	800bd6e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bd3e:	7dba      	ldrb	r2, [r7, #22]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	32ae      	adds	r2, #174	; 0xae
 800bd44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00f      	beq.n	800bd6e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bd4e:	7dba      	ldrb	r2, [r7, #22]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bd56:	7dba      	ldrb	r2, [r7, #22]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	32ae      	adds	r2, #174	; 0xae
 800bd5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd60:	699b      	ldr	r3, [r3, #24]
 800bd62:	7afa      	ldrb	r2, [r7, #11]
 800bd64:	4611      	mov	r1, r2
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	4798      	blx	r3
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bd6e:	7dfb      	ldrb	r3, [r7, #23]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d001      	beq.n	800bd78 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bd74:	7dfb      	ldrb	r3, [r7, #23]
 800bd76:	e000      	b.n	800bd7a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3718      	adds	r7, #24
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	b086      	sub	sp, #24
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	60f8      	str	r0, [r7, #12]
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	607a      	str	r2, [r7, #4]
 800bd8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bd90:	7afb      	ldrb	r3, [r7, #11]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d16f      	bne.n	800be76 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	3314      	adds	r3, #20
 800bd9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d15a      	bne.n	800be5c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	689a      	ldr	r2, [r3, #8]
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d914      	bls.n	800bddc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	689a      	ldr	r2, [r3, #8]
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	1ad2      	subs	r2, r2, r3
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	6879      	ldr	r1, [r7, #4]
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f001 f8ac 	bl	800cf26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdce:	2300      	movs	r3, #0
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	f004 fced 	bl	80107b4 <USBD_LL_PrepareReceive>
 800bdda:	e03f      	b.n	800be5c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	68da      	ldr	r2, [r3, #12]
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d11c      	bne.n	800be22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	685a      	ldr	r2, [r3, #4]
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d316      	bcc.n	800be22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	685a      	ldr	r2, [r3, #4]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d20f      	bcs.n	800be22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800be02:	2200      	movs	r2, #0
 800be04:	2100      	movs	r1, #0
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f001 f88d 	bl	800cf26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2200      	movs	r2, #0
 800be10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be14:	2300      	movs	r3, #0
 800be16:	2200      	movs	r2, #0
 800be18:	2100      	movs	r1, #0
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f004 fcca 	bl	80107b4 <USBD_LL_PrepareReceive>
 800be20:	e01c      	b.n	800be5c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b03      	cmp	r3, #3
 800be2c:	d10f      	bne.n	800be4e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d009      	beq.n	800be4e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be4e:	2180      	movs	r1, #128	; 0x80
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f004 fc05 	bl	8010660 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f001 f8b7 	bl	800cfca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d03a      	beq.n	800bedc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f7ff fe42 	bl	800baf0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800be74:	e032      	b.n	800bedc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be76:	7afb      	ldrb	r3, [r7, #11]
 800be78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	4619      	mov	r1, r3
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f000 f97f 	bl	800c184 <USBD_CoreFindEP>
 800be86:	4603      	mov	r3, r0
 800be88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be8a:	7dfb      	ldrb	r3, [r7, #23]
 800be8c:	2bff      	cmp	r3, #255	; 0xff
 800be8e:	d025      	beq.n	800bedc <USBD_LL_DataInStage+0x15a>
 800be90:	7dfb      	ldrb	r3, [r7, #23]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d122      	bne.n	800bedc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	2b03      	cmp	r3, #3
 800bea0:	d11c      	bne.n	800bedc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bea2:	7dfa      	ldrb	r2, [r7, #23]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	32ae      	adds	r2, #174	; 0xae
 800bea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beac:	695b      	ldr	r3, [r3, #20]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d014      	beq.n	800bedc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800beb2:	7dfa      	ldrb	r2, [r7, #23]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800beba:	7dfa      	ldrb	r2, [r7, #23]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	32ae      	adds	r2, #174	; 0xae
 800bec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	7afa      	ldrb	r2, [r7, #11]
 800bec8:	4611      	mov	r1, r2
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	4798      	blx	r3
 800bece:	4603      	mov	r3, r0
 800bed0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bed2:	7dbb      	ldrb	r3, [r7, #22]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d001      	beq.n	800bedc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bed8:	7dbb      	ldrb	r3, [r7, #22]
 800beda:	e000      	b.n	800bede <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3718      	adds	r7, #24
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b084      	sub	sp, #16
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800beee:	2300      	movs	r3, #0
 800bef0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2201      	movs	r2, #1
 800bef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d014      	beq.n	800bf4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00e      	beq.n	800bf4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	6852      	ldr	r2, [r2, #4]
 800bf3a:	b2d2      	uxtb	r2, r2
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	4798      	blx	r3
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d001      	beq.n	800bf4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bf48:	2303      	movs	r3, #3
 800bf4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf4c:	2340      	movs	r3, #64	; 0x40
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2100      	movs	r1, #0
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f004 fb3f 	bl	80105d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2240      	movs	r2, #64	; 0x40
 800bf64:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf68:	2340      	movs	r3, #64	; 0x40
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	2180      	movs	r1, #128	; 0x80
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f004 fb31 	bl	80105d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2240      	movs	r2, #64	; 0x40
 800bf7e:	621a      	str	r2, [r3, #32]

  return ret;
 800bf80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf8a:	b480      	push	{r7}
 800bf8c:	b083      	sub	sp, #12
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	460b      	mov	r3, r1
 800bf94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	78fa      	ldrb	r2, [r7, #3]
 800bf9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr

0800bfaa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b083      	sub	sp, #12
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfb8:	b2da      	uxtb	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2204      	movs	r2, #4
 800bfc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	370c      	adds	r7, #12
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr

0800bfd6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bfd6:	b480      	push	{r7}
 800bfd8:	b083      	sub	sp, #12
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b04      	cmp	r3, #4
 800bfe8:	d106      	bne.n	800bff8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bff0:	b2da      	uxtb	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	370c      	adds	r7, #12
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b082      	sub	sp, #8
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c014:	b2db      	uxtb	r3, r3
 800c016:	2b03      	cmp	r3, #3
 800c018:	d110      	bne.n	800c03c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00b      	beq.n	800c03c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c02a:	69db      	ldr	r3, [r3, #28]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d005      	beq.n	800c03c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c036:	69db      	ldr	r3, [r3, #28]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3708      	adds	r7, #8
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b082      	sub	sp, #8
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	460b      	mov	r3, r1
 800c050:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	32ae      	adds	r2, #174	; 0xae
 800c05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d101      	bne.n	800c068 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c064:	2303      	movs	r3, #3
 800c066:	e01c      	b.n	800c0a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	2b03      	cmp	r3, #3
 800c072:	d115      	bne.n	800c0a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	32ae      	adds	r2, #174	; 0xae
 800c07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c082:	6a1b      	ldr	r3, [r3, #32]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00b      	beq.n	800c0a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	32ae      	adds	r2, #174	; 0xae
 800c092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	78fa      	ldrb	r2, [r7, #3]
 800c09a:	4611      	mov	r1, r2
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b082      	sub	sp, #8
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	32ae      	adds	r2, #174	; 0xae
 800c0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c0c8:	2303      	movs	r3, #3
 800c0ca:	e01c      	b.n	800c106 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	2b03      	cmp	r3, #3
 800c0d6:	d115      	bne.n	800c104 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	32ae      	adds	r2, #174	; 0xae
 800c0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00b      	beq.n	800c104 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	32ae      	adds	r2, #174	; 0xae
 800c0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fc:	78fa      	ldrb	r2, [r7, #3]
 800c0fe:	4611      	mov	r1, r2
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c10e:	b480      	push	{r7}
 800c110:	b083      	sub	sp, #12
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c116:	2300      	movs	r3, #0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00e      	beq.n	800c160 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	6852      	ldr	r2, [r2, #4]
 800c14e:	b2d2      	uxtb	r2, r2
 800c150:	4611      	mov	r1, r2
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	4798      	blx	r3
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d001      	beq.n	800c160 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c15c:	2303      	movs	r3, #3
 800c15e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c160:	7bfb      	ldrb	r3, [r7, #15]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c16a:	b480      	push	{r7}
 800c16c:	b083      	sub	sp, #12
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
 800c172:	460b      	mov	r3, r1
 800c174:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c176:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c178:	4618      	mov	r0, r3
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	460b      	mov	r3, r1
 800c18e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c190:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c192:	4618      	mov	r0, r3
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b086      	sub	sp, #24
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	885b      	ldrh	r3, [r3, #2]
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d920      	bls.n	800c208 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c1ce:	e013      	b.n	800c1f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c1d0:	f107 030a 	add.w	r3, r7, #10
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6978      	ldr	r0, [r7, #20]
 800c1d8:	f000 f81b 	bl	800c212 <USBD_GetNextDesc>
 800c1dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	785b      	ldrb	r3, [r3, #1]
 800c1e2:	2b05      	cmp	r3, #5
 800c1e4:	d108      	bne.n	800c1f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	789b      	ldrb	r3, [r3, #2]
 800c1ee:	78fa      	ldrb	r2, [r7, #3]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d008      	beq.n	800c206 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	885b      	ldrh	r3, [r3, #2]
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	897b      	ldrh	r3, [r7, #10]
 800c200:	429a      	cmp	r2, r3
 800c202:	d8e5      	bhi.n	800c1d0 <USBD_GetEpDesc+0x32>
 800c204:	e000      	b.n	800c208 <USBD_GetEpDesc+0x6a>
          break;
 800c206:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c208:	693b      	ldr	r3, [r7, #16]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3718      	adds	r7, #24
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c212:	b480      	push	{r7}
 800c214:	b085      	sub	sp, #20
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	881a      	ldrh	r2, [r3, #0]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	b29b      	uxth	r3, r3
 800c22a:	4413      	add	r3, r2
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	461a      	mov	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4413      	add	r3, r2
 800c23c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c23e:	68fb      	ldr	r3, [r7, #12]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3714      	adds	r7, #20
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b087      	sub	sp, #28
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	3301      	adds	r3, #1
 800c262:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c26a:	8a3b      	ldrh	r3, [r7, #16]
 800c26c:	021b      	lsls	r3, r3, #8
 800c26e:	b21a      	sxth	r2, r3
 800c270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c274:	4313      	orrs	r3, r2
 800c276:	b21b      	sxth	r3, r3
 800c278:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c27a:	89fb      	ldrh	r3, [r7, #14]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	371c      	adds	r7, #28
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c292:	2300      	movs	r3, #0
 800c294:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c29e:	2b40      	cmp	r3, #64	; 0x40
 800c2a0:	d005      	beq.n	800c2ae <USBD_StdDevReq+0x26>
 800c2a2:	2b40      	cmp	r3, #64	; 0x40
 800c2a4:	d857      	bhi.n	800c356 <USBD_StdDevReq+0xce>
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d00f      	beq.n	800c2ca <USBD_StdDevReq+0x42>
 800c2aa:	2b20      	cmp	r3, #32
 800c2ac:	d153      	bne.n	800c356 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	32ae      	adds	r2, #174	; 0xae
 800c2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	4798      	blx	r3
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c2c8:	e04a      	b.n	800c360 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	785b      	ldrb	r3, [r3, #1]
 800c2ce:	2b09      	cmp	r3, #9
 800c2d0:	d83b      	bhi.n	800c34a <USBD_StdDevReq+0xc2>
 800c2d2:	a201      	add	r2, pc, #4	; (adr r2, 800c2d8 <USBD_StdDevReq+0x50>)
 800c2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d8:	0800c32d 	.word	0x0800c32d
 800c2dc:	0800c341 	.word	0x0800c341
 800c2e0:	0800c34b 	.word	0x0800c34b
 800c2e4:	0800c337 	.word	0x0800c337
 800c2e8:	0800c34b 	.word	0x0800c34b
 800c2ec:	0800c30b 	.word	0x0800c30b
 800c2f0:	0800c301 	.word	0x0800c301
 800c2f4:	0800c34b 	.word	0x0800c34b
 800c2f8:	0800c323 	.word	0x0800c323
 800c2fc:	0800c315 	.word	0x0800c315
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c300:	6839      	ldr	r1, [r7, #0]
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 fa3c 	bl	800c780 <USBD_GetDescriptor>
          break;
 800c308:	e024      	b.n	800c354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fba1 	bl	800ca54 <USBD_SetAddress>
          break;
 800c312:	e01f      	b.n	800c354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fbe0 	bl	800cadc <USBD_SetConfig>
 800c31c:	4603      	mov	r3, r0
 800c31e:	73fb      	strb	r3, [r7, #15]
          break;
 800c320:	e018      	b.n	800c354 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c322:	6839      	ldr	r1, [r7, #0]
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 fc83 	bl	800cc30 <USBD_GetConfig>
          break;
 800c32a:	e013      	b.n	800c354 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c32c:	6839      	ldr	r1, [r7, #0]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fcb4 	bl	800cc9c <USBD_GetStatus>
          break;
 800c334:	e00e      	b.n	800c354 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 fce3 	bl	800cd04 <USBD_SetFeature>
          break;
 800c33e:	e009      	b.n	800c354 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fd07 	bl	800cd56 <USBD_ClrFeature>
          break;
 800c348:	e004      	b.n	800c354 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fd5e 	bl	800ce0e <USBD_CtlError>
          break;
 800c352:	bf00      	nop
      }
      break;
 800c354:	e004      	b.n	800c360 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c356:	6839      	ldr	r1, [r7, #0]
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 fd58 	bl	800ce0e <USBD_CtlError>
      break;
 800c35e:	bf00      	nop
  }

  return ret;
 800c360:	7bfb      	ldrb	r3, [r7, #15]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop

0800c36c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c382:	2b40      	cmp	r3, #64	; 0x40
 800c384:	d005      	beq.n	800c392 <USBD_StdItfReq+0x26>
 800c386:	2b40      	cmp	r3, #64	; 0x40
 800c388:	d852      	bhi.n	800c430 <USBD_StdItfReq+0xc4>
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d001      	beq.n	800c392 <USBD_StdItfReq+0x26>
 800c38e:	2b20      	cmp	r3, #32
 800c390:	d14e      	bne.n	800c430 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	3b01      	subs	r3, #1
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	d840      	bhi.n	800c422 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	889b      	ldrh	r3, [r3, #4]
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d836      	bhi.n	800c418 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	889b      	ldrh	r3, [r3, #4]
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f7ff fed9 	bl	800c16a <USBD_CoreFindIF>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3bc:	7bbb      	ldrb	r3, [r7, #14]
 800c3be:	2bff      	cmp	r3, #255	; 0xff
 800c3c0:	d01d      	beq.n	800c3fe <USBD_StdItfReq+0x92>
 800c3c2:	7bbb      	ldrb	r3, [r7, #14]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d11a      	bne.n	800c3fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c3c8:	7bba      	ldrb	r2, [r7, #14]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	32ae      	adds	r2, #174	; 0xae
 800c3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00f      	beq.n	800c3f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c3d8:	7bba      	ldrb	r2, [r7, #14]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c3e0:	7bba      	ldrb	r2, [r7, #14]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	32ae      	adds	r2, #174	; 0xae
 800c3e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	4798      	blx	r3
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3f6:	e004      	b.n	800c402 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3fc:	e001      	b.n	800c402 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c3fe:	2303      	movs	r3, #3
 800c400:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	88db      	ldrh	r3, [r3, #6]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d110      	bne.n	800c42c <USBD_StdItfReq+0xc0>
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10d      	bne.n	800c42c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 fdc7 	bl	800cfa4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c416:	e009      	b.n	800c42c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fcf7 	bl	800ce0e <USBD_CtlError>
          break;
 800c420:	e004      	b.n	800c42c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c422:	6839      	ldr	r1, [r7, #0]
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 fcf2 	bl	800ce0e <USBD_CtlError>
          break;
 800c42a:	e000      	b.n	800c42e <USBD_StdItfReq+0xc2>
          break;
 800c42c:	bf00      	nop
      }
      break;
 800c42e:	e004      	b.n	800c43a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 fceb 	bl	800ce0e <USBD_CtlError>
      break;
 800c438:	bf00      	nop
  }

  return ret;
 800c43a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	889b      	ldrh	r3, [r3, #4]
 800c456:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c460:	2b40      	cmp	r3, #64	; 0x40
 800c462:	d007      	beq.n	800c474 <USBD_StdEPReq+0x30>
 800c464:	2b40      	cmp	r3, #64	; 0x40
 800c466:	f200 817f 	bhi.w	800c768 <USBD_StdEPReq+0x324>
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d02a      	beq.n	800c4c4 <USBD_StdEPReq+0x80>
 800c46e:	2b20      	cmp	r3, #32
 800c470:	f040 817a 	bne.w	800c768 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c474:	7bbb      	ldrb	r3, [r7, #14]
 800c476:	4619      	mov	r1, r3
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f7ff fe83 	bl	800c184 <USBD_CoreFindEP>
 800c47e:	4603      	mov	r3, r0
 800c480:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c482:	7b7b      	ldrb	r3, [r7, #13]
 800c484:	2bff      	cmp	r3, #255	; 0xff
 800c486:	f000 8174 	beq.w	800c772 <USBD_StdEPReq+0x32e>
 800c48a:	7b7b      	ldrb	r3, [r7, #13]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f040 8170 	bne.w	800c772 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c492:	7b7a      	ldrb	r2, [r7, #13]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c49a:	7b7a      	ldrb	r2, [r7, #13]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	32ae      	adds	r2, #174	; 0xae
 800c4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	f000 8163 	beq.w	800c772 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c4ac:	7b7a      	ldrb	r2, [r7, #13]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	32ae      	adds	r2, #174	; 0xae
 800c4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	6839      	ldr	r1, [r7, #0]
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	4798      	blx	r3
 800c4be:	4603      	mov	r3, r0
 800c4c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c4c2:	e156      	b.n	800c772 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	785b      	ldrb	r3, [r3, #1]
 800c4c8:	2b03      	cmp	r3, #3
 800c4ca:	d008      	beq.n	800c4de <USBD_StdEPReq+0x9a>
 800c4cc:	2b03      	cmp	r3, #3
 800c4ce:	f300 8145 	bgt.w	800c75c <USBD_StdEPReq+0x318>
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f000 809b 	beq.w	800c60e <USBD_StdEPReq+0x1ca>
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d03c      	beq.n	800c556 <USBD_StdEPReq+0x112>
 800c4dc:	e13e      	b.n	800c75c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	d002      	beq.n	800c4f0 <USBD_StdEPReq+0xac>
 800c4ea:	2b03      	cmp	r3, #3
 800c4ec:	d016      	beq.n	800c51c <USBD_StdEPReq+0xd8>
 800c4ee:	e02c      	b.n	800c54a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4f0:	7bbb      	ldrb	r3, [r7, #14]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00d      	beq.n	800c512 <USBD_StdEPReq+0xce>
 800c4f6:	7bbb      	ldrb	r3, [r7, #14]
 800c4f8:	2b80      	cmp	r3, #128	; 0x80
 800c4fa:	d00a      	beq.n	800c512 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4fc:	7bbb      	ldrb	r3, [r7, #14]
 800c4fe:	4619      	mov	r1, r3
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f004 f8ad 	bl	8010660 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c506:	2180      	movs	r1, #128	; 0x80
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f004 f8a9 	bl	8010660 <USBD_LL_StallEP>
 800c50e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c510:	e020      	b.n	800c554 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c512:	6839      	ldr	r1, [r7, #0]
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 fc7a 	bl	800ce0e <USBD_CtlError>
              break;
 800c51a:	e01b      	b.n	800c554 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	885b      	ldrh	r3, [r3, #2]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d10e      	bne.n	800c542 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c524:	7bbb      	ldrb	r3, [r7, #14]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00b      	beq.n	800c542 <USBD_StdEPReq+0xfe>
 800c52a:	7bbb      	ldrb	r3, [r7, #14]
 800c52c:	2b80      	cmp	r3, #128	; 0x80
 800c52e:	d008      	beq.n	800c542 <USBD_StdEPReq+0xfe>
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	88db      	ldrh	r3, [r3, #6]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d104      	bne.n	800c542 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c538:	7bbb      	ldrb	r3, [r7, #14]
 800c53a:	4619      	mov	r1, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f004 f88f 	bl	8010660 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 fd2e 	bl	800cfa4 <USBD_CtlSendStatus>

              break;
 800c548:	e004      	b.n	800c554 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fc5e 	bl	800ce0e <USBD_CtlError>
              break;
 800c552:	bf00      	nop
          }
          break;
 800c554:	e107      	b.n	800c766 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	2b02      	cmp	r3, #2
 800c560:	d002      	beq.n	800c568 <USBD_StdEPReq+0x124>
 800c562:	2b03      	cmp	r3, #3
 800c564:	d016      	beq.n	800c594 <USBD_StdEPReq+0x150>
 800c566:	e04b      	b.n	800c600 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c568:	7bbb      	ldrb	r3, [r7, #14]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00d      	beq.n	800c58a <USBD_StdEPReq+0x146>
 800c56e:	7bbb      	ldrb	r3, [r7, #14]
 800c570:	2b80      	cmp	r3, #128	; 0x80
 800c572:	d00a      	beq.n	800c58a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c574:	7bbb      	ldrb	r3, [r7, #14]
 800c576:	4619      	mov	r1, r3
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f004 f871 	bl	8010660 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c57e:	2180      	movs	r1, #128	; 0x80
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f004 f86d 	bl	8010660 <USBD_LL_StallEP>
 800c586:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c588:	e040      	b.n	800c60c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c58a:	6839      	ldr	r1, [r7, #0]
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 fc3e 	bl	800ce0e <USBD_CtlError>
              break;
 800c592:	e03b      	b.n	800c60c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	885b      	ldrh	r3, [r3, #2]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d136      	bne.n	800c60a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c59c:	7bbb      	ldrb	r3, [r7, #14]
 800c59e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d004      	beq.n	800c5b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c5a6:	7bbb      	ldrb	r3, [r7, #14]
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f004 f877 	bl	801069e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 fcf7 	bl	800cfa4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c5b6:	7bbb      	ldrb	r3, [r7, #14]
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7ff fde2 	bl	800c184 <USBD_CoreFindEP>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5c4:	7b7b      	ldrb	r3, [r7, #13]
 800c5c6:	2bff      	cmp	r3, #255	; 0xff
 800c5c8:	d01f      	beq.n	800c60a <USBD_StdEPReq+0x1c6>
 800c5ca:	7b7b      	ldrb	r3, [r7, #13]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d11c      	bne.n	800c60a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c5d0:	7b7a      	ldrb	r2, [r7, #13]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c5d8:	7b7a      	ldrb	r2, [r7, #13]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	32ae      	adds	r2, #174	; 0xae
 800c5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d010      	beq.n	800c60a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c5e8:	7b7a      	ldrb	r2, [r7, #13]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	32ae      	adds	r2, #174	; 0xae
 800c5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	4798      	blx	r3
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c5fe:	e004      	b.n	800c60a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c600:	6839      	ldr	r1, [r7, #0]
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fc03 	bl	800ce0e <USBD_CtlError>
              break;
 800c608:	e000      	b.n	800c60c <USBD_StdEPReq+0x1c8>
              break;
 800c60a:	bf00      	nop
          }
          break;
 800c60c:	e0ab      	b.n	800c766 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c614:	b2db      	uxtb	r3, r3
 800c616:	2b02      	cmp	r3, #2
 800c618:	d002      	beq.n	800c620 <USBD_StdEPReq+0x1dc>
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d032      	beq.n	800c684 <USBD_StdEPReq+0x240>
 800c61e:	e097      	b.n	800c750 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c620:	7bbb      	ldrb	r3, [r7, #14]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d007      	beq.n	800c636 <USBD_StdEPReq+0x1f2>
 800c626:	7bbb      	ldrb	r3, [r7, #14]
 800c628:	2b80      	cmp	r3, #128	; 0x80
 800c62a:	d004      	beq.n	800c636 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c62c:	6839      	ldr	r1, [r7, #0]
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 fbed 	bl	800ce0e <USBD_CtlError>
                break;
 800c634:	e091      	b.n	800c75a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	da0b      	bge.n	800c656 <USBD_StdEPReq+0x212>
 800c63e:	7bbb      	ldrb	r3, [r7, #14]
 800c640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c644:	4613      	mov	r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4413      	add	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	3310      	adds	r3, #16
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	4413      	add	r3, r2
 800c652:	3304      	adds	r3, #4
 800c654:	e00b      	b.n	800c66e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c656:	7bbb      	ldrb	r3, [r7, #14]
 800c658:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c65c:	4613      	mov	r3, r2
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	4413      	add	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	4413      	add	r3, r2
 800c66c:	3304      	adds	r3, #4
 800c66e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	2200      	movs	r2, #0
 800c674:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	2202      	movs	r2, #2
 800c67a:	4619      	mov	r1, r3
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 fc37 	bl	800cef0 <USBD_CtlSendData>
              break;
 800c682:	e06a      	b.n	800c75a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	da11      	bge.n	800c6b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c68c:	7bbb      	ldrb	r3, [r7, #14]
 800c68e:	f003 020f 	and.w	r2, r3, #15
 800c692:	6879      	ldr	r1, [r7, #4]
 800c694:	4613      	mov	r3, r2
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	4413      	add	r3, r2
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	440b      	add	r3, r1
 800c69e:	3324      	adds	r3, #36	; 0x24
 800c6a0:	881b      	ldrh	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d117      	bne.n	800c6d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c6a6:	6839      	ldr	r1, [r7, #0]
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 fbb0 	bl	800ce0e <USBD_CtlError>
                  break;
 800c6ae:	e054      	b.n	800c75a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c6b0:	7bbb      	ldrb	r3, [r7, #14]
 800c6b2:	f003 020f 	and.w	r2, r3, #15
 800c6b6:	6879      	ldr	r1, [r7, #4]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	4413      	add	r3, r2
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	440b      	add	r3, r1
 800c6c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c6c6:	881b      	ldrh	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d104      	bne.n	800c6d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c6cc:	6839      	ldr	r1, [r7, #0]
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 fb9d 	bl	800ce0e <USBD_CtlError>
                  break;
 800c6d4:	e041      	b.n	800c75a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	da0b      	bge.n	800c6f6 <USBD_StdEPReq+0x2b2>
 800c6de:	7bbb      	ldrb	r3, [r7, #14]
 800c6e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	4413      	add	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	3310      	adds	r3, #16
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	e00b      	b.n	800c70e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6f6:	7bbb      	ldrb	r3, [r7, #14]
 800c6f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	4413      	add	r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	4413      	add	r3, r2
 800c70c:	3304      	adds	r3, #4
 800c70e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c710:	7bbb      	ldrb	r3, [r7, #14]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d002      	beq.n	800c71c <USBD_StdEPReq+0x2d8>
 800c716:	7bbb      	ldrb	r3, [r7, #14]
 800c718:	2b80      	cmp	r3, #128	; 0x80
 800c71a:	d103      	bne.n	800c724 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	2200      	movs	r2, #0
 800c720:	601a      	str	r2, [r3, #0]
 800c722:	e00e      	b.n	800c742 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c724:	7bbb      	ldrb	r3, [r7, #14]
 800c726:	4619      	mov	r1, r3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f003 ffd7 	bl	80106dc <USBD_LL_IsStallEP>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d003      	beq.n	800c73c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	2201      	movs	r2, #1
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	e002      	b.n	800c742 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	2200      	movs	r2, #0
 800c740:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	2202      	movs	r2, #2
 800c746:	4619      	mov	r1, r3
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fbd1 	bl	800cef0 <USBD_CtlSendData>
              break;
 800c74e:	e004      	b.n	800c75a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c750:	6839      	ldr	r1, [r7, #0]
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fb5b 	bl	800ce0e <USBD_CtlError>
              break;
 800c758:	bf00      	nop
          }
          break;
 800c75a:	e004      	b.n	800c766 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c75c:	6839      	ldr	r1, [r7, #0]
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 fb55 	bl	800ce0e <USBD_CtlError>
          break;
 800c764:	bf00      	nop
      }
      break;
 800c766:	e005      	b.n	800c774 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c768:	6839      	ldr	r1, [r7, #0]
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 fb4f 	bl	800ce0e <USBD_CtlError>
      break;
 800c770:	e000      	b.n	800c774 <USBD_StdEPReq+0x330>
      break;
 800c772:	bf00      	nop
  }

  return ret;
 800c774:	7bfb      	ldrb	r3, [r7, #15]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3710      	adds	r7, #16
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
	...

0800c780 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c78a:	2300      	movs	r3, #0
 800c78c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c78e:	2300      	movs	r3, #0
 800c790:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c792:	2300      	movs	r3, #0
 800c794:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	885b      	ldrh	r3, [r3, #2]
 800c79a:	0a1b      	lsrs	r3, r3, #8
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	2b06      	cmp	r3, #6
 800c7a2:	f200 8128 	bhi.w	800c9f6 <USBD_GetDescriptor+0x276>
 800c7a6:	a201      	add	r2, pc, #4	; (adr r2, 800c7ac <USBD_GetDescriptor+0x2c>)
 800c7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ac:	0800c7c9 	.word	0x0800c7c9
 800c7b0:	0800c7e1 	.word	0x0800c7e1
 800c7b4:	0800c821 	.word	0x0800c821
 800c7b8:	0800c9f7 	.word	0x0800c9f7
 800c7bc:	0800c9f7 	.word	0x0800c9f7
 800c7c0:	0800c997 	.word	0x0800c997
 800c7c4:	0800c9c3 	.word	0x0800c9c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	7c12      	ldrb	r2, [r2, #16]
 800c7d4:	f107 0108 	add.w	r1, r7, #8
 800c7d8:	4610      	mov	r0, r2
 800c7da:	4798      	blx	r3
 800c7dc:	60f8      	str	r0, [r7, #12]
      break;
 800c7de:	e112      	b.n	800ca06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	7c1b      	ldrb	r3, [r3, #16]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10d      	bne.n	800c804 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f0:	f107 0208 	add.w	r2, r7, #8
 800c7f4:	4610      	mov	r0, r2
 800c7f6:	4798      	blx	r3
 800c7f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	2202      	movs	r2, #2
 800c800:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c802:	e100      	b.n	800ca06 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80c:	f107 0208 	add.w	r2, r7, #8
 800c810:	4610      	mov	r0, r2
 800c812:	4798      	blx	r3
 800c814:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	3301      	adds	r3, #1
 800c81a:	2202      	movs	r2, #2
 800c81c:	701a      	strb	r2, [r3, #0]
      break;
 800c81e:	e0f2      	b.n	800ca06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	885b      	ldrh	r3, [r3, #2]
 800c824:	b2db      	uxtb	r3, r3
 800c826:	2b05      	cmp	r3, #5
 800c828:	f200 80ac 	bhi.w	800c984 <USBD_GetDescriptor+0x204>
 800c82c:	a201      	add	r2, pc, #4	; (adr r2, 800c834 <USBD_GetDescriptor+0xb4>)
 800c82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c832:	bf00      	nop
 800c834:	0800c84d 	.word	0x0800c84d
 800c838:	0800c881 	.word	0x0800c881
 800c83c:	0800c8b5 	.word	0x0800c8b5
 800c840:	0800c8e9 	.word	0x0800c8e9
 800c844:	0800c91d 	.word	0x0800c91d
 800c848:	0800c951 	.word	0x0800c951
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00b      	beq.n	800c870 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	7c12      	ldrb	r2, [r2, #16]
 800c864:	f107 0108 	add.w	r1, r7, #8
 800c868:	4610      	mov	r0, r2
 800c86a:	4798      	blx	r3
 800c86c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c86e:	e091      	b.n	800c994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c870:	6839      	ldr	r1, [r7, #0]
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 facb 	bl	800ce0e <USBD_CtlError>
            err++;
 800c878:	7afb      	ldrb	r3, [r7, #11]
 800c87a:	3301      	adds	r3, #1
 800c87c:	72fb      	strb	r3, [r7, #11]
          break;
 800c87e:	e089      	b.n	800c994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d00b      	beq.n	800c8a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	7c12      	ldrb	r2, [r2, #16]
 800c898:	f107 0108 	add.w	r1, r7, #8
 800c89c:	4610      	mov	r0, r2
 800c89e:	4798      	blx	r3
 800c8a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8a2:	e077      	b.n	800c994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8a4:	6839      	ldr	r1, [r7, #0]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 fab1 	bl	800ce0e <USBD_CtlError>
            err++;
 800c8ac:	7afb      	ldrb	r3, [r7, #11]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c8b2:	e06f      	b.n	800c994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00b      	beq.n	800c8d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	7c12      	ldrb	r2, [r2, #16]
 800c8cc:	f107 0108 	add.w	r1, r7, #8
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	4798      	blx	r3
 800c8d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8d6:	e05d      	b.n	800c994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8d8:	6839      	ldr	r1, [r7, #0]
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 fa97 	bl	800ce0e <USBD_CtlError>
            err++;
 800c8e0:	7afb      	ldrb	r3, [r7, #11]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c8e6:	e055      	b.n	800c994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ee:	691b      	ldr	r3, [r3, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00b      	beq.n	800c90c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	7c12      	ldrb	r2, [r2, #16]
 800c900:	f107 0108 	add.w	r1, r7, #8
 800c904:	4610      	mov	r0, r2
 800c906:	4798      	blx	r3
 800c908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c90a:	e043      	b.n	800c994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c90c:	6839      	ldr	r1, [r7, #0]
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 fa7d 	bl	800ce0e <USBD_CtlError>
            err++;
 800c914:	7afb      	ldrb	r3, [r7, #11]
 800c916:	3301      	adds	r3, #1
 800c918:	72fb      	strb	r3, [r7, #11]
          break;
 800c91a:	e03b      	b.n	800c994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c922:	695b      	ldr	r3, [r3, #20]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00b      	beq.n	800c940 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c92e:	695b      	ldr	r3, [r3, #20]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	7c12      	ldrb	r2, [r2, #16]
 800c934:	f107 0108 	add.w	r1, r7, #8
 800c938:	4610      	mov	r0, r2
 800c93a:	4798      	blx	r3
 800c93c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c93e:	e029      	b.n	800c994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c940:	6839      	ldr	r1, [r7, #0]
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 fa63 	bl	800ce0e <USBD_CtlError>
            err++;
 800c948:	7afb      	ldrb	r3, [r7, #11]
 800c94a:	3301      	adds	r3, #1
 800c94c:	72fb      	strb	r3, [r7, #11]
          break;
 800c94e:	e021      	b.n	800c994 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c956:	699b      	ldr	r3, [r3, #24]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00b      	beq.n	800c974 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c962:	699b      	ldr	r3, [r3, #24]
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	7c12      	ldrb	r2, [r2, #16]
 800c968:	f107 0108 	add.w	r1, r7, #8
 800c96c:	4610      	mov	r0, r2
 800c96e:	4798      	blx	r3
 800c970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c972:	e00f      	b.n	800c994 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fa49 	bl	800ce0e <USBD_CtlError>
            err++;
 800c97c:	7afb      	ldrb	r3, [r7, #11]
 800c97e:	3301      	adds	r3, #1
 800c980:	72fb      	strb	r3, [r7, #11]
          break;
 800c982:	e007      	b.n	800c994 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c984:	6839      	ldr	r1, [r7, #0]
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 fa41 	bl	800ce0e <USBD_CtlError>
          err++;
 800c98c:	7afb      	ldrb	r3, [r7, #11]
 800c98e:	3301      	adds	r3, #1
 800c990:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c992:	bf00      	nop
      }
      break;
 800c994:	e037      	b.n	800ca06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	7c1b      	ldrb	r3, [r3, #16]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d109      	bne.n	800c9b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a6:	f107 0208 	add.w	r2, r7, #8
 800c9aa:	4610      	mov	r0, r2
 800c9ac:	4798      	blx	r3
 800c9ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9b0:	e029      	b.n	800ca06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c9b2:	6839      	ldr	r1, [r7, #0]
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 fa2a 	bl	800ce0e <USBD_CtlError>
        err++;
 800c9ba:	7afb      	ldrb	r3, [r7, #11]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	72fb      	strb	r3, [r7, #11]
      break;
 800c9c0:	e021      	b.n	800ca06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	7c1b      	ldrb	r3, [r3, #16]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10d      	bne.n	800c9e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d2:	f107 0208 	add.w	r2, r7, #8
 800c9d6:	4610      	mov	r0, r2
 800c9d8:	4798      	blx	r3
 800c9da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	2207      	movs	r2, #7
 800c9e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9e4:	e00f      	b.n	800ca06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c9e6:	6839      	ldr	r1, [r7, #0]
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 fa10 	bl	800ce0e <USBD_CtlError>
        err++;
 800c9ee:	7afb      	ldrb	r3, [r7, #11]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	72fb      	strb	r3, [r7, #11]
      break;
 800c9f4:	e007      	b.n	800ca06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c9f6:	6839      	ldr	r1, [r7, #0]
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 fa08 	bl	800ce0e <USBD_CtlError>
      err++;
 800c9fe:	7afb      	ldrb	r3, [r7, #11]
 800ca00:	3301      	adds	r3, #1
 800ca02:	72fb      	strb	r3, [r7, #11]
      break;
 800ca04:	bf00      	nop
  }

  if (err != 0U)
 800ca06:	7afb      	ldrb	r3, [r7, #11]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d11e      	bne.n	800ca4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	88db      	ldrh	r3, [r3, #6]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d016      	beq.n	800ca42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ca14:	893b      	ldrh	r3, [r7, #8]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00e      	beq.n	800ca38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	88da      	ldrh	r2, [r3, #6]
 800ca1e:	893b      	ldrh	r3, [r7, #8]
 800ca20:	4293      	cmp	r3, r2
 800ca22:	bf28      	it	cs
 800ca24:	4613      	movcs	r3, r2
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca2a:	893b      	ldrh	r3, [r7, #8]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	68f9      	ldr	r1, [r7, #12]
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 fa5d 	bl	800cef0 <USBD_CtlSendData>
 800ca36:	e009      	b.n	800ca4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ca38:	6839      	ldr	r1, [r7, #0]
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 f9e7 	bl	800ce0e <USBD_CtlError>
 800ca40:	e004      	b.n	800ca4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 faae 	bl	800cfa4 <USBD_CtlSendStatus>
 800ca48:	e000      	b.n	800ca4c <USBD_GetDescriptor+0x2cc>
    return;
 800ca4a:	bf00      	nop
  }
}
 800ca4c:	3710      	adds	r7, #16
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop

0800ca54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	889b      	ldrh	r3, [r3, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d131      	bne.n	800caca <USBD_SetAddress+0x76>
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	88db      	ldrh	r3, [r3, #6]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d12d      	bne.n	800caca <USBD_SetAddress+0x76>
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	885b      	ldrh	r3, [r3, #2]
 800ca72:	2b7f      	cmp	r3, #127	; 0x7f
 800ca74:	d829      	bhi.n	800caca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	885b      	ldrh	r3, [r3, #2]
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	2b03      	cmp	r3, #3
 800ca8c:	d104      	bne.n	800ca98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 f9bc 	bl	800ce0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca96:	e01d      	b.n	800cad4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	7bfa      	ldrb	r2, [r7, #15]
 800ca9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
 800caa2:	4619      	mov	r1, r3
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f003 fe45 	bl	8010734 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fa7a 	bl	800cfa4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cab0:	7bfb      	ldrb	r3, [r7, #15]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d004      	beq.n	800cac0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2202      	movs	r2, #2
 800caba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cabe:	e009      	b.n	800cad4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cac8:	e004      	b.n	800cad4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800caca:	6839      	ldr	r1, [r7, #0]
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 f99e 	bl	800ce0e <USBD_CtlError>
  }
}
 800cad2:	bf00      	nop
 800cad4:	bf00      	nop
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cae6:	2300      	movs	r3, #0
 800cae8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	885b      	ldrh	r3, [r3, #2]
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	4b4e      	ldr	r3, [pc, #312]	; (800cc2c <USBD_SetConfig+0x150>)
 800caf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800caf4:	4b4d      	ldr	r3, [pc, #308]	; (800cc2c <USBD_SetConfig+0x150>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d905      	bls.n	800cb08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cafc:	6839      	ldr	r1, [r7, #0]
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 f985 	bl	800ce0e <USBD_CtlError>
    return USBD_FAIL;
 800cb04:	2303      	movs	r3, #3
 800cb06:	e08c      	b.n	800cc22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d002      	beq.n	800cb1a <USBD_SetConfig+0x3e>
 800cb14:	2b03      	cmp	r3, #3
 800cb16:	d029      	beq.n	800cb6c <USBD_SetConfig+0x90>
 800cb18:	e075      	b.n	800cc06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cb1a:	4b44      	ldr	r3, [pc, #272]	; (800cc2c <USBD_SetConfig+0x150>)
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d020      	beq.n	800cb64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cb22:	4b42      	ldr	r3, [pc, #264]	; (800cc2c <USBD_SetConfig+0x150>)
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	461a      	mov	r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb2c:	4b3f      	ldr	r3, [pc, #252]	; (800cc2c <USBD_SetConfig+0x150>)
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	4619      	mov	r1, r3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7fe ffe7 	bl	800bb06 <USBD_SetClassConfig>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cb3c:	7bfb      	ldrb	r3, [r7, #15]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d008      	beq.n	800cb54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cb42:	6839      	ldr	r1, [r7, #0]
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 f962 	bl	800ce0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2202      	movs	r2, #2
 800cb4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb52:	e065      	b.n	800cc20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 fa25 	bl	800cfa4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2203      	movs	r2, #3
 800cb5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb62:	e05d      	b.n	800cc20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 fa1d 	bl	800cfa4 <USBD_CtlSendStatus>
      break;
 800cb6a:	e059      	b.n	800cc20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb6c:	4b2f      	ldr	r3, [pc, #188]	; (800cc2c <USBD_SetConfig+0x150>)
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d112      	bne.n	800cb9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2202      	movs	r2, #2
 800cb78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cb7c:	4b2b      	ldr	r3, [pc, #172]	; (800cc2c <USBD_SetConfig+0x150>)
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	461a      	mov	r2, r3
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb86:	4b29      	ldr	r3, [pc, #164]	; (800cc2c <USBD_SetConfig+0x150>)
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f7fe ffd6 	bl	800bb3e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 fa06 	bl	800cfa4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb98:	e042      	b.n	800cc20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cb9a:	4b24      	ldr	r3, [pc, #144]	; (800cc2c <USBD_SetConfig+0x150>)
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	461a      	mov	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d02a      	beq.n	800cbfe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	4619      	mov	r1, r3
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7fe ffc4 	bl	800bb3e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cbb6:	4b1d      	ldr	r3, [pc, #116]	; (800cc2c <USBD_SetConfig+0x150>)
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	461a      	mov	r2, r3
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbc0:	4b1a      	ldr	r3, [pc, #104]	; (800cc2c <USBD_SetConfig+0x150>)
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7fe ff9d 	bl	800bb06 <USBD_SetClassConfig>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00f      	beq.n	800cbf6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cbd6:	6839      	ldr	r1, [r7, #0]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 f918 	bl	800ce0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7fe ffa9 	bl	800bb3e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2202      	movs	r2, #2
 800cbf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cbf4:	e014      	b.n	800cc20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 f9d4 	bl	800cfa4 <USBD_CtlSendStatus>
      break;
 800cbfc:	e010      	b.n	800cc20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f9d0 	bl	800cfa4 <USBD_CtlSendStatus>
      break;
 800cc04:	e00c      	b.n	800cc20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f900 	bl	800ce0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc0e:	4b07      	ldr	r3, [pc, #28]	; (800cc2c <USBD_SetConfig+0x150>)
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	4619      	mov	r1, r3
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7fe ff92 	bl	800bb3e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	73fb      	strb	r3, [r7, #15]
      break;
 800cc1e:	bf00      	nop
  }

  return ret;
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	200009ec 	.word	0x200009ec

0800cc30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	88db      	ldrh	r3, [r3, #6]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d004      	beq.n	800cc4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 f8e2 	bl	800ce0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cc4a:	e023      	b.n	800cc94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	dc02      	bgt.n	800cc5e <USBD_GetConfig+0x2e>
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	dc03      	bgt.n	800cc64 <USBD_GetConfig+0x34>
 800cc5c:	e015      	b.n	800cc8a <USBD_GetConfig+0x5a>
 800cc5e:	2b03      	cmp	r3, #3
 800cc60:	d00b      	beq.n	800cc7a <USBD_GetConfig+0x4a>
 800cc62:	e012      	b.n	800cc8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	3308      	adds	r3, #8
 800cc6e:	2201      	movs	r2, #1
 800cc70:	4619      	mov	r1, r3
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 f93c 	bl	800cef0 <USBD_CtlSendData>
        break;
 800cc78:	e00c      	b.n	800cc94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	3304      	adds	r3, #4
 800cc7e:	2201      	movs	r2, #1
 800cc80:	4619      	mov	r1, r3
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f934 	bl	800cef0 <USBD_CtlSendData>
        break;
 800cc88:	e004      	b.n	800cc94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f8be 	bl	800ce0e <USBD_CtlError>
        break;
 800cc92:	bf00      	nop
}
 800cc94:	bf00      	nop
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	2b02      	cmp	r3, #2
 800ccb2:	d81e      	bhi.n	800ccf2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	88db      	ldrh	r3, [r3, #6]
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d004      	beq.n	800ccc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ccbc:	6839      	ldr	r1, [r7, #0]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f8a5 	bl	800ce0e <USBD_CtlError>
        break;
 800ccc4:	e01a      	b.n	800ccfc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d005      	beq.n	800cce2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	f043 0202 	orr.w	r2, r3, #2
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	330c      	adds	r3, #12
 800cce6:	2202      	movs	r2, #2
 800cce8:	4619      	mov	r1, r3
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 f900 	bl	800cef0 <USBD_CtlSendData>
      break;
 800ccf0:	e004      	b.n	800ccfc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ccf2:	6839      	ldr	r1, [r7, #0]
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 f88a 	bl	800ce0e <USBD_CtlError>
      break;
 800ccfa:	bf00      	nop
  }
}
 800ccfc:	bf00      	nop
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	885b      	ldrh	r3, [r3, #2]
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d107      	bne.n	800cd26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 f940 	bl	800cfa4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cd24:	e013      	b.n	800cd4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	885b      	ldrh	r3, [r3, #2]
 800cd2a:	2b02      	cmp	r3, #2
 800cd2c:	d10b      	bne.n	800cd46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	889b      	ldrh	r3, [r3, #4]
 800cd32:	0a1b      	lsrs	r3, r3, #8
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 f930 	bl	800cfa4 <USBD_CtlSendStatus>
}
 800cd44:	e003      	b.n	800cd4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cd46:	6839      	ldr	r1, [r7, #0]
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 f860 	bl	800ce0e <USBD_CtlError>
}
 800cd4e:	bf00      	nop
 800cd50:	3708      	adds	r7, #8
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b082      	sub	sp, #8
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
 800cd5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	2b02      	cmp	r3, #2
 800cd6c:	d80b      	bhi.n	800cd86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	885b      	ldrh	r3, [r3, #2]
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d10c      	bne.n	800cd90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 f910 	bl	800cfa4 <USBD_CtlSendStatus>
      }
      break;
 800cd84:	e004      	b.n	800cd90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd86:	6839      	ldr	r1, [r7, #0]
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 f840 	bl	800ce0e <USBD_CtlError>
      break;
 800cd8e:	e000      	b.n	800cd92 <USBD_ClrFeature+0x3c>
      break;
 800cd90:	bf00      	nop
  }
}
 800cd92:	bf00      	nop
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b084      	sub	sp, #16
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	781a      	ldrb	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	781a      	ldrb	r2, [r3, #0]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f7ff fa41 	bl	800c24c <SWAPBYTE>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	461a      	mov	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	3301      	adds	r3, #1
 800cddc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f7ff fa34 	bl	800c24c <SWAPBYTE>
 800cde4:	4603      	mov	r3, r0
 800cde6:	461a      	mov	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f7ff fa27 	bl	800c24c <SWAPBYTE>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	461a      	mov	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	80da      	strh	r2, [r3, #6]
}
 800ce06:	bf00      	nop
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b082      	sub	sp, #8
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
 800ce16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce18:	2180      	movs	r1, #128	; 0x80
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f003 fc20 	bl	8010660 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce20:	2100      	movs	r1, #0
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f003 fc1c 	bl	8010660 <USBD_LL_StallEP>
}
 800ce28:	bf00      	nop
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d036      	beq.n	800ceb4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ce4a:	6938      	ldr	r0, [r7, #16]
 800ce4c:	f000 f836 	bl	800cebc <USBD_GetLen>
 800ce50:	4603      	mov	r3, r0
 800ce52:	3301      	adds	r3, #1
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	005b      	lsls	r3, r3, #1
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce5e:	7dfb      	ldrb	r3, [r7, #23]
 800ce60:	68ba      	ldr	r2, [r7, #8]
 800ce62:	4413      	add	r3, r2
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	7812      	ldrb	r2, [r2, #0]
 800ce68:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce6a:	7dfb      	ldrb	r3, [r7, #23]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce70:	7dfb      	ldrb	r3, [r7, #23]
 800ce72:	68ba      	ldr	r2, [r7, #8]
 800ce74:	4413      	add	r3, r2
 800ce76:	2203      	movs	r2, #3
 800ce78:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce7a:	7dfb      	ldrb	r3, [r7, #23]
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce80:	e013      	b.n	800ceaa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ce82:	7dfb      	ldrb	r3, [r7, #23]
 800ce84:	68ba      	ldr	r2, [r7, #8]
 800ce86:	4413      	add	r3, r2
 800ce88:	693a      	ldr	r2, [r7, #16]
 800ce8a:	7812      	ldrb	r2, [r2, #0]
 800ce8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	3301      	adds	r3, #1
 800ce92:	613b      	str	r3, [r7, #16]
    idx++;
 800ce94:	7dfb      	ldrb	r3, [r7, #23]
 800ce96:	3301      	adds	r3, #1
 800ce98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce9a:	7dfb      	ldrb	r3, [r7, #23]
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	4413      	add	r3, r2
 800cea0:	2200      	movs	r2, #0
 800cea2:	701a      	strb	r2, [r3, #0]
    idx++;
 800cea4:	7dfb      	ldrb	r3, [r7, #23]
 800cea6:	3301      	adds	r3, #1
 800cea8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1e7      	bne.n	800ce82 <USBD_GetString+0x52>
 800ceb2:	e000      	b.n	800ceb6 <USBD_GetString+0x86>
    return;
 800ceb4:	bf00      	nop
  }
}
 800ceb6:	3718      	adds	r7, #24
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cec4:	2300      	movs	r3, #0
 800cec6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cecc:	e005      	b.n	800ceda <USBD_GetLen+0x1e>
  {
    len++;
 800cece:	7bfb      	ldrb	r3, [r7, #15]
 800ced0:	3301      	adds	r3, #1
 800ced2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	3301      	adds	r3, #1
 800ced8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d1f5      	bne.n	800cece <USBD_GetLen+0x12>
  }

  return len;
 800cee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3714      	adds	r7, #20
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2202      	movs	r2, #2
 800cf00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	68ba      	ldr	r2, [r7, #8]
 800cf14:	2100      	movs	r1, #0
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f003 fc2b 	bl	8010772 <USBD_LL_Transmit>

  return USBD_OK;
 800cf1c:	2300      	movs	r3, #0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b084      	sub	sp, #16
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	60f8      	str	r0, [r7, #12]
 800cf2e:	60b9      	str	r1, [r7, #8]
 800cf30:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	68ba      	ldr	r2, [r7, #8]
 800cf36:	2100      	movs	r1, #0
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f003 fc1a 	bl	8010772 <USBD_LL_Transmit>

  return USBD_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2203      	movs	r2, #3
 800cf58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	68ba      	ldr	r2, [r7, #8]
 800cf70:	2100      	movs	r1, #0
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f003 fc1e 	bl	80107b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b084      	sub	sp, #16
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	60f8      	str	r0, [r7, #12]
 800cf8a:	60b9      	str	r1, [r7, #8]
 800cf8c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	2100      	movs	r1, #0
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f003 fc0d 	bl	80107b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2204      	movs	r2, #4
 800cfb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	2100      	movs	r1, #0
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f003 fbd9 	bl	8010772 <USBD_LL_Transmit>

  return USBD_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b082      	sub	sp, #8
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2205      	movs	r2, #5
 800cfd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfda:	2300      	movs	r3, #0
 800cfdc:	2200      	movs	r2, #0
 800cfde:	2100      	movs	r1, #0
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f003 fbe7 	bl	80107b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3708      	adds	r7, #8
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <__NVIC_SetPriority>:
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	4603      	mov	r3, r0
 800cff8:	6039      	str	r1, [r7, #0]
 800cffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d000:	2b00      	cmp	r3, #0
 800d002:	db0a      	blt.n	800d01a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	b2da      	uxtb	r2, r3
 800d008:	490c      	ldr	r1, [pc, #48]	; (800d03c <__NVIC_SetPriority+0x4c>)
 800d00a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d00e:	0112      	lsls	r2, r2, #4
 800d010:	b2d2      	uxtb	r2, r2
 800d012:	440b      	add	r3, r1
 800d014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d018:	e00a      	b.n	800d030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	4908      	ldr	r1, [pc, #32]	; (800d040 <__NVIC_SetPriority+0x50>)
 800d020:	79fb      	ldrb	r3, [r7, #7]
 800d022:	f003 030f 	and.w	r3, r3, #15
 800d026:	3b04      	subs	r3, #4
 800d028:	0112      	lsls	r2, r2, #4
 800d02a:	b2d2      	uxtb	r2, r2
 800d02c:	440b      	add	r3, r1
 800d02e:	761a      	strb	r2, [r3, #24]
}
 800d030:	bf00      	nop
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	e000e100 	.word	0xe000e100
 800d040:	e000ed00 	.word	0xe000ed00

0800d044 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d044:	b580      	push	{r7, lr}
 800d046:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d048:	4b05      	ldr	r3, [pc, #20]	; (800d060 <SysTick_Handler+0x1c>)
 800d04a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d04c:	f001 fe5a 	bl	800ed04 <xTaskGetSchedulerState>
 800d050:	4603      	mov	r3, r0
 800d052:	2b01      	cmp	r3, #1
 800d054:	d001      	beq.n	800d05a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d056:	f002 fc3f 	bl	800f8d8 <xPortSysTickHandler>
  }
}
 800d05a:	bf00      	nop
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	e000e010 	.word	0xe000e010

0800d064 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d064:	b580      	push	{r7, lr}
 800d066:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d068:	2100      	movs	r1, #0
 800d06a:	f06f 0004 	mvn.w	r0, #4
 800d06e:	f7ff ffbf 	bl	800cff0 <__NVIC_SetPriority>
#endif
}
 800d072:	bf00      	nop
 800d074:	bd80      	pop	{r7, pc}
	...

0800d078 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d07e:	f3ef 8305 	mrs	r3, IPSR
 800d082:	603b      	str	r3, [r7, #0]
  return(result);
 800d084:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d086:	2b00      	cmp	r3, #0
 800d088:	d003      	beq.n	800d092 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d08a:	f06f 0305 	mvn.w	r3, #5
 800d08e:	607b      	str	r3, [r7, #4]
 800d090:	e00c      	b.n	800d0ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d092:	4b0a      	ldr	r3, [pc, #40]	; (800d0bc <osKernelInitialize+0x44>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d105      	bne.n	800d0a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d09a:	4b08      	ldr	r3, [pc, #32]	; (800d0bc <osKernelInitialize+0x44>)
 800d09c:	2201      	movs	r2, #1
 800d09e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	607b      	str	r3, [r7, #4]
 800d0a4:	e002      	b.n	800d0ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d0aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d0ac:	687b      	ldr	r3, [r7, #4]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	370c      	adds	r7, #12
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	200009f0 	.word	0x200009f0

0800d0c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0c6:	f3ef 8305 	mrs	r3, IPSR
 800d0ca:	603b      	str	r3, [r7, #0]
  return(result);
 800d0cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d003      	beq.n	800d0da <osKernelStart+0x1a>
    stat = osErrorISR;
 800d0d2:	f06f 0305 	mvn.w	r3, #5
 800d0d6:	607b      	str	r3, [r7, #4]
 800d0d8:	e010      	b.n	800d0fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d0da:	4b0b      	ldr	r3, [pc, #44]	; (800d108 <osKernelStart+0x48>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d109      	bne.n	800d0f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d0e2:	f7ff ffbf 	bl	800d064 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d0e6:	4b08      	ldr	r3, [pc, #32]	; (800d108 <osKernelStart+0x48>)
 800d0e8:	2202      	movs	r2, #2
 800d0ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d0ec:	f001 f99e 	bl	800e42c <vTaskStartScheduler>
      stat = osOK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	607b      	str	r3, [r7, #4]
 800d0f4:	e002      	b.n	800d0fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d0fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d0fc:	687b      	ldr	r3, [r7, #4]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	200009f0 	.word	0x200009f0

0800d10c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b08e      	sub	sp, #56	; 0x38
 800d110:	af04      	add	r7, sp, #16
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d118:	2300      	movs	r3, #0
 800d11a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d11c:	f3ef 8305 	mrs	r3, IPSR
 800d120:	617b      	str	r3, [r7, #20]
  return(result);
 800d122:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d124:	2b00      	cmp	r3, #0
 800d126:	d17e      	bne.n	800d226 <osThreadNew+0x11a>
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d07b      	beq.n	800d226 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d12e:	2380      	movs	r3, #128	; 0x80
 800d130:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d132:	2318      	movs	r3, #24
 800d134:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d136:	2300      	movs	r3, #0
 800d138:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d13a:	f04f 33ff 	mov.w	r3, #4294967295
 800d13e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d045      	beq.n	800d1d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d002      	beq.n	800d154 <osThreadNew+0x48>
        name = attr->name;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	699b      	ldr	r3, [r3, #24]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	699b      	ldr	r3, [r3, #24]
 800d160:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d162:	69fb      	ldr	r3, [r7, #28]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d008      	beq.n	800d17a <osThreadNew+0x6e>
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	2b38      	cmp	r3, #56	; 0x38
 800d16c:	d805      	bhi.n	800d17a <osThreadNew+0x6e>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	f003 0301 	and.w	r3, r3, #1
 800d176:	2b00      	cmp	r3, #0
 800d178:	d001      	beq.n	800d17e <osThreadNew+0x72>
        return (NULL);
 800d17a:	2300      	movs	r3, #0
 800d17c:	e054      	b.n	800d228 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	695b      	ldr	r3, [r3, #20]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d003      	beq.n	800d18e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	695b      	ldr	r3, [r3, #20]
 800d18a:	089b      	lsrs	r3, r3, #2
 800d18c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00e      	beq.n	800d1b4 <osThreadNew+0xa8>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	2bbb      	cmp	r3, #187	; 0xbb
 800d19c:	d90a      	bls.n	800d1b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d006      	beq.n	800d1b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	695b      	ldr	r3, [r3, #20]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d002      	beq.n	800d1b4 <osThreadNew+0xa8>
        mem = 1;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	61bb      	str	r3, [r7, #24]
 800d1b2:	e010      	b.n	800d1d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10c      	bne.n	800d1d6 <osThreadNew+0xca>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d108      	bne.n	800d1d6 <osThreadNew+0xca>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	691b      	ldr	r3, [r3, #16]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d104      	bne.n	800d1d6 <osThreadNew+0xca>
          mem = 0;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	61bb      	str	r3, [r7, #24]
 800d1d0:	e001      	b.n	800d1d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d110      	bne.n	800d1fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d1e4:	9202      	str	r2, [sp, #8]
 800d1e6:	9301      	str	r3, [sp, #4]
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	6a3a      	ldr	r2, [r7, #32]
 800d1f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f000 feec 	bl	800dfd0 <xTaskCreateStatic>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	613b      	str	r3, [r7, #16]
 800d1fc:	e013      	b.n	800d226 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d110      	bne.n	800d226 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	b29a      	uxth	r2, r3
 800d208:	f107 0310 	add.w	r3, r7, #16
 800d20c:	9301      	str	r3, [sp, #4]
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	9300      	str	r3, [sp, #0]
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	f000 ff37 	bl	800e08a <xTaskCreate>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d001      	beq.n	800d226 <osThreadNew+0x11a>
            hTask = NULL;
 800d222:	2300      	movs	r3, #0
 800d224:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d226:	693b      	ldr	r3, [r7, #16]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3728      	adds	r7, #40	; 0x28
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800d236:	f001 fd55 	bl	800ece4 <xTaskGetCurrentTaskHandle>
 800d23a:	6078      	str	r0, [r7, #4]

  return (id);
 800d23c:	687b      	ldr	r3, [r7, #4]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3708      	adds	r7, #8
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800d246:	b580      	push	{r7, lr}
 800d248:	b086      	sub	sp, #24
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d252:	f3ef 8305 	mrs	r3, IPSR
 800d256:	60fb      	str	r3, [r7, #12]
  return(result);
 800d258:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d003      	beq.n	800d266 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800d25e:	f06f 0305 	mvn.w	r3, #5
 800d262:	617b      	str	r3, [r7, #20]
 800d264:	e00b      	b.n	800d27e <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d103      	bne.n	800d274 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800d26c:	f06f 0303 	mvn.w	r3, #3
 800d270:	617b      	str	r3, [r7, #20]
 800d272:	e004      	b.n	800d27e <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800d274:	2300      	movs	r3, #0
 800d276:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800d278:	6938      	ldr	r0, [r7, #16]
 800d27a:	f001 f861 	bl	800e340 <vTaskSuspend>
  }

  return (stat);
 800d27e:	697b      	ldr	r3, [r7, #20]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3718      	adds	r7, #24
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d294:	2300      	movs	r3, #0
 800d296:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d103      	bne.n	800d2a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d29e:	f06f 0303 	mvn.w	r3, #3
 800d2a2:	617b      	str	r3, [r7, #20]
 800d2a4:	e02c      	b.n	800d300 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2a6:	f3ef 8305 	mrs	r3, IPSR
 800d2aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d01a      	beq.n	800d2e8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d2b6:	f107 0308 	add.w	r3, r7, #8
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	6938      	ldr	r0, [r7, #16]
 800d2be:	f000 fbac 	bl	800da1a <xQueueGiveFromISR>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d003      	beq.n	800d2d0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d2c8:	f06f 0302 	mvn.w	r3, #2
 800d2cc:	617b      	str	r3, [r7, #20]
 800d2ce:	e017      	b.n	800d300 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d014      	beq.n	800d300 <osSemaphoreRelease+0x78>
 800d2d6:	4b0d      	ldr	r3, [pc, #52]	; (800d30c <osSemaphoreRelease+0x84>)
 800d2d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2dc:	601a      	str	r2, [r3, #0]
 800d2de:	f3bf 8f4f 	dsb	sy
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	e00b      	b.n	800d300 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	6938      	ldr	r0, [r7, #16]
 800d2f0:	f000 f9fa 	bl	800d6e8 <xQueueGenericSend>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d002      	beq.n	800d300 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d2fa:	f06f 0302 	mvn.w	r3, #2
 800d2fe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d300:	697b      	ldr	r3, [r7, #20]
}
 800d302:	4618      	mov	r0, r3
 800d304:	3718      	adds	r7, #24
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	e000ed04 	.word	0xe000ed04

0800d310 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d310:	b480      	push	{r7}
 800d312:	b085      	sub	sp, #20
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	4a07      	ldr	r2, [pc, #28]	; (800d33c <vApplicationGetIdleTaskMemory+0x2c>)
 800d320:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	4a06      	ldr	r2, [pc, #24]	; (800d340 <vApplicationGetIdleTaskMemory+0x30>)
 800d326:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2280      	movs	r2, #128	; 0x80
 800d32c:	601a      	str	r2, [r3, #0]
}
 800d32e:	bf00      	nop
 800d330:	3714      	adds	r7, #20
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	200009f4 	.word	0x200009f4
 800d340:	20000ab0 	.word	0x20000ab0

0800d344 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	4a07      	ldr	r2, [pc, #28]	; (800d370 <vApplicationGetTimerTaskMemory+0x2c>)
 800d354:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	4a06      	ldr	r2, [pc, #24]	; (800d374 <vApplicationGetTimerTaskMemory+0x30>)
 800d35a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d362:	601a      	str	r2, [r3, #0]
}
 800d364:	bf00      	nop
 800d366:	3714      	adds	r7, #20
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr
 800d370:	20000cb0 	.word	0x20000cb0
 800d374:	20000d6c 	.word	0x20000d6c

0800d378 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f103 0208 	add.w	r2, r3, #8
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f04f 32ff 	mov.w	r2, #4294967295
 800d390:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f103 0208 	add.w	r2, r3, #8
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f103 0208 	add.w	r2, r3, #8
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d3ac:	bf00      	nop
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d3c6:	bf00      	nop
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr

0800d3d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d3d2:	b480      	push	{r7}
 800d3d4:	b085      	sub	sp, #20
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
 800d3da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	689a      	ldr	r2, [r3, #8]
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	683a      	ldr	r2, [r7, #0]
 800d3f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	683a      	ldr	r2, [r7, #0]
 800d3fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	1c5a      	adds	r2, r3, #1
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	601a      	str	r2, [r3, #0]
}
 800d40e:	bf00      	nop
 800d410:	3714      	adds	r7, #20
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr

0800d41a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d41a:	b480      	push	{r7}
 800d41c:	b085      	sub	sp, #20
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
 800d422:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d430:	d103      	bne.n	800d43a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	691b      	ldr	r3, [r3, #16]
 800d436:	60fb      	str	r3, [r7, #12]
 800d438:	e00c      	b.n	800d454 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	3308      	adds	r3, #8
 800d43e:	60fb      	str	r3, [r7, #12]
 800d440:	e002      	b.n	800d448 <vListInsert+0x2e>
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	68ba      	ldr	r2, [r7, #8]
 800d450:	429a      	cmp	r2, r3
 800d452:	d2f6      	bcs.n	800d442 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	685a      	ldr	r2, [r3, #4]
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	683a      	ldr	r2, [r7, #0]
 800d462:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	683a      	ldr	r2, [r7, #0]
 800d46e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	1c5a      	adds	r2, r3, #1
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	601a      	str	r2, [r3, #0]
}
 800d480:	bf00      	nop
 800d482:	3714      	adds	r7, #20
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d48c:	b480      	push	{r7}
 800d48e:	b085      	sub	sp, #20
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	691b      	ldr	r3, [r3, #16]
 800d498:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	6892      	ldr	r2, [r2, #8]
 800d4a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	6852      	ldr	r2, [r2, #4]
 800d4ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d103      	bne.n	800d4c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	689a      	ldr	r2, [r3, #8]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	1e5a      	subs	r2, r3, #1
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3714      	adds	r7, #20
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10a      	bne.n	800d50a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d506:	bf00      	nop
 800d508:	e7fe      	b.n	800d508 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d50a:	f002 f953 	bl	800f7b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d516:	68f9      	ldr	r1, [r7, #12]
 800d518:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d51a:	fb01 f303 	mul.w	r3, r1, r3
 800d51e:	441a      	add	r2, r3
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2200      	movs	r2, #0
 800d528:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53a:	3b01      	subs	r3, #1
 800d53c:	68f9      	ldr	r1, [r7, #12]
 800d53e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d540:	fb01 f303 	mul.w	r3, r1, r3
 800d544:	441a      	add	r2, r3
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	22ff      	movs	r2, #255	; 0xff
 800d54e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	22ff      	movs	r2, #255	; 0xff
 800d556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d114      	bne.n	800d58a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	691b      	ldr	r3, [r3, #16]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d01a      	beq.n	800d59e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	3310      	adds	r3, #16
 800d56c:	4618      	mov	r0, r3
 800d56e:	f001 f9f7 	bl	800e960 <xTaskRemoveFromEventList>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d012      	beq.n	800d59e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d578:	4b0c      	ldr	r3, [pc, #48]	; (800d5ac <xQueueGenericReset+0xcc>)
 800d57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d57e:	601a      	str	r2, [r3, #0]
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	f3bf 8f6f 	isb	sy
 800d588:	e009      	b.n	800d59e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	3310      	adds	r3, #16
 800d58e:	4618      	mov	r0, r3
 800d590:	f7ff fef2 	bl	800d378 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	3324      	adds	r3, #36	; 0x24
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff feed 	bl	800d378 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d59e:	f002 f939 	bl	800f814 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d5a2:	2301      	movs	r3, #1
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3710      	adds	r7, #16
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	e000ed04 	.word	0xe000ed04

0800d5b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b08e      	sub	sp, #56	; 0x38
 800d5b4:	af02      	add	r7, sp, #8
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	607a      	str	r2, [r7, #4]
 800d5bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d10a      	bne.n	800d5da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c8:	f383 8811 	msr	BASEPRI, r3
 800d5cc:	f3bf 8f6f 	isb	sy
 800d5d0:	f3bf 8f4f 	dsb	sy
 800d5d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d5d6:	bf00      	nop
 800d5d8:	e7fe      	b.n	800d5d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d10a      	bne.n	800d5f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e4:	f383 8811 	msr	BASEPRI, r3
 800d5e8:	f3bf 8f6f 	isb	sy
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d5f2:	bf00      	nop
 800d5f4:	e7fe      	b.n	800d5f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d002      	beq.n	800d602 <xQueueGenericCreateStatic+0x52>
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d001      	beq.n	800d606 <xQueueGenericCreateStatic+0x56>
 800d602:	2301      	movs	r3, #1
 800d604:	e000      	b.n	800d608 <xQueueGenericCreateStatic+0x58>
 800d606:	2300      	movs	r3, #0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d10a      	bne.n	800d622 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d610:	f383 8811 	msr	BASEPRI, r3
 800d614:	f3bf 8f6f 	isb	sy
 800d618:	f3bf 8f4f 	dsb	sy
 800d61c:	623b      	str	r3, [r7, #32]
}
 800d61e:	bf00      	nop
 800d620:	e7fe      	b.n	800d620 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d102      	bne.n	800d62e <xQueueGenericCreateStatic+0x7e>
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d101      	bne.n	800d632 <xQueueGenericCreateStatic+0x82>
 800d62e:	2301      	movs	r3, #1
 800d630:	e000      	b.n	800d634 <xQueueGenericCreateStatic+0x84>
 800d632:	2300      	movs	r3, #0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d10a      	bne.n	800d64e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63c:	f383 8811 	msr	BASEPRI, r3
 800d640:	f3bf 8f6f 	isb	sy
 800d644:	f3bf 8f4f 	dsb	sy
 800d648:	61fb      	str	r3, [r7, #28]
}
 800d64a:	bf00      	nop
 800d64c:	e7fe      	b.n	800d64c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d64e:	2350      	movs	r3, #80	; 0x50
 800d650:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	2b50      	cmp	r3, #80	; 0x50
 800d656:	d00a      	beq.n	800d66e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65c:	f383 8811 	msr	BASEPRI, r3
 800d660:	f3bf 8f6f 	isb	sy
 800d664:	f3bf 8f4f 	dsb	sy
 800d668:	61bb      	str	r3, [r7, #24]
}
 800d66a:	bf00      	nop
 800d66c:	e7fe      	b.n	800d66c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d66e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00d      	beq.n	800d696 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67c:	2201      	movs	r2, #1
 800d67e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d682:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d688:	9300      	str	r3, [sp, #0]
 800d68a:	4613      	mov	r3, r2
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	68b9      	ldr	r1, [r7, #8]
 800d690:	68f8      	ldr	r0, [r7, #12]
 800d692:	f000 f805 	bl	800d6a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d698:	4618      	mov	r0, r3
 800d69a:	3730      	adds	r7, #48	; 0x30
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	607a      	str	r2, [r7, #4]
 800d6ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d103      	bne.n	800d6bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	69ba      	ldr	r2, [r7, #24]
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	e002      	b.n	800d6c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d6c8:	69bb      	ldr	r3, [r7, #24]
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6ce:	2101      	movs	r1, #1
 800d6d0:	69b8      	ldr	r0, [r7, #24]
 800d6d2:	f7ff ff05 	bl	800d4e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d6d6:	69bb      	ldr	r3, [r7, #24]
 800d6d8:	78fa      	ldrb	r2, [r7, #3]
 800d6da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d6de:	bf00      	nop
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
	...

0800d6e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b08e      	sub	sp, #56	; 0x38
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	607a      	str	r2, [r7, #4]
 800d6f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10a      	bne.n	800d71a <xQueueGenericSend+0x32>
	__asm volatile
 800d704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d716:	bf00      	nop
 800d718:	e7fe      	b.n	800d718 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d103      	bne.n	800d728 <xQueueGenericSend+0x40>
 800d720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d724:	2b00      	cmp	r3, #0
 800d726:	d101      	bne.n	800d72c <xQueueGenericSend+0x44>
 800d728:	2301      	movs	r3, #1
 800d72a:	e000      	b.n	800d72e <xQueueGenericSend+0x46>
 800d72c:	2300      	movs	r3, #0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10a      	bne.n	800d748 <xQueueGenericSend+0x60>
	__asm volatile
 800d732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d736:	f383 8811 	msr	BASEPRI, r3
 800d73a:	f3bf 8f6f 	isb	sy
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d744:	bf00      	nop
 800d746:	e7fe      	b.n	800d746 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	2b02      	cmp	r3, #2
 800d74c:	d103      	bne.n	800d756 <xQueueGenericSend+0x6e>
 800d74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d752:	2b01      	cmp	r3, #1
 800d754:	d101      	bne.n	800d75a <xQueueGenericSend+0x72>
 800d756:	2301      	movs	r3, #1
 800d758:	e000      	b.n	800d75c <xQueueGenericSend+0x74>
 800d75a:	2300      	movs	r3, #0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10a      	bne.n	800d776 <xQueueGenericSend+0x8e>
	__asm volatile
 800d760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d764:	f383 8811 	msr	BASEPRI, r3
 800d768:	f3bf 8f6f 	isb	sy
 800d76c:	f3bf 8f4f 	dsb	sy
 800d770:	623b      	str	r3, [r7, #32]
}
 800d772:	bf00      	nop
 800d774:	e7fe      	b.n	800d774 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d776:	f001 fac5 	bl	800ed04 <xTaskGetSchedulerState>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d102      	bne.n	800d786 <xQueueGenericSend+0x9e>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d101      	bne.n	800d78a <xQueueGenericSend+0xa2>
 800d786:	2301      	movs	r3, #1
 800d788:	e000      	b.n	800d78c <xQueueGenericSend+0xa4>
 800d78a:	2300      	movs	r3, #0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d10a      	bne.n	800d7a6 <xQueueGenericSend+0xbe>
	__asm volatile
 800d790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d794:	f383 8811 	msr	BASEPRI, r3
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	f3bf 8f4f 	dsb	sy
 800d7a0:	61fb      	str	r3, [r7, #28]
}
 800d7a2:	bf00      	nop
 800d7a4:	e7fe      	b.n	800d7a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7a6:	f002 f805 	bl	800f7b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d302      	bcc.n	800d7bc <xQueueGenericSend+0xd4>
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d129      	bne.n	800d810 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7bc:	683a      	ldr	r2, [r7, #0]
 800d7be:	68b9      	ldr	r1, [r7, #8]
 800d7c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7c2:	f000 fa97 	bl	800dcf4 <prvCopyDataToQueue>
 800d7c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d010      	beq.n	800d7f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d2:	3324      	adds	r3, #36	; 0x24
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f001 f8c3 	bl	800e960 <xTaskRemoveFromEventList>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d013      	beq.n	800d808 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d7e0:	4b3f      	ldr	r3, [pc, #252]	; (800d8e0 <xQueueGenericSend+0x1f8>)
 800d7e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7e6:	601a      	str	r2, [r3, #0]
 800d7e8:	f3bf 8f4f 	dsb	sy
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	e00a      	b.n	800d808 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d007      	beq.n	800d808 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d7f8:	4b39      	ldr	r3, [pc, #228]	; (800d8e0 <xQueueGenericSend+0x1f8>)
 800d7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7fe:	601a      	str	r2, [r3, #0]
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d808:	f002 f804 	bl	800f814 <vPortExitCritical>
				return pdPASS;
 800d80c:	2301      	movs	r3, #1
 800d80e:	e063      	b.n	800d8d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d103      	bne.n	800d81e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d816:	f001 fffd 	bl	800f814 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d81a:	2300      	movs	r3, #0
 800d81c:	e05c      	b.n	800d8d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d820:	2b00      	cmp	r3, #0
 800d822:	d106      	bne.n	800d832 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d824:	f107 0314 	add.w	r3, r7, #20
 800d828:	4618      	mov	r0, r3
 800d82a:	f001 f8fd 	bl	800ea28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d82e:	2301      	movs	r3, #1
 800d830:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d832:	f001 ffef 	bl	800f814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d836:	f000 fe69 	bl	800e50c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d83a:	f001 ffbb 	bl	800f7b4 <vPortEnterCritical>
 800d83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d844:	b25b      	sxtb	r3, r3
 800d846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84a:	d103      	bne.n	800d854 <xQueueGenericSend+0x16c>
 800d84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84e:	2200      	movs	r2, #0
 800d850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d85a:	b25b      	sxtb	r3, r3
 800d85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d860:	d103      	bne.n	800d86a <xQueueGenericSend+0x182>
 800d862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d864:	2200      	movs	r2, #0
 800d866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d86a:	f001 ffd3 	bl	800f814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d86e:	1d3a      	adds	r2, r7, #4
 800d870:	f107 0314 	add.w	r3, r7, #20
 800d874:	4611      	mov	r1, r2
 800d876:	4618      	mov	r0, r3
 800d878:	f001 f8ec 	bl	800ea54 <xTaskCheckForTimeOut>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d124      	bne.n	800d8cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d884:	f000 fb2e 	bl	800dee4 <prvIsQueueFull>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d018      	beq.n	800d8c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d890:	3310      	adds	r3, #16
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	4611      	mov	r1, r2
 800d896:	4618      	mov	r0, r3
 800d898:	f001 f812 	bl	800e8c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d89c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d89e:	f000 fab9 	bl	800de14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d8a2:	f000 fe41 	bl	800e528 <xTaskResumeAll>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f47f af7c 	bne.w	800d7a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d8ae:	4b0c      	ldr	r3, [pc, #48]	; (800d8e0 <xQueueGenericSend+0x1f8>)
 800d8b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	f3bf 8f4f 	dsb	sy
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	e772      	b.n	800d7a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d8c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8c2:	f000 faa7 	bl	800de14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8c6:	f000 fe2f 	bl	800e528 <xTaskResumeAll>
 800d8ca:	e76c      	b.n	800d7a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d8cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8ce:	f000 faa1 	bl	800de14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8d2:	f000 fe29 	bl	800e528 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d8d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3738      	adds	r7, #56	; 0x38
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	e000ed04 	.word	0xe000ed04

0800d8e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b090      	sub	sp, #64	; 0x40
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
 800d8f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10a      	bne.n	800d912 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d90e:	bf00      	nop
 800d910:	e7fe      	b.n	800d910 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d103      	bne.n	800d920 <xQueueGenericSendFromISR+0x3c>
 800d918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d101      	bne.n	800d924 <xQueueGenericSendFromISR+0x40>
 800d920:	2301      	movs	r3, #1
 800d922:	e000      	b.n	800d926 <xQueueGenericSendFromISR+0x42>
 800d924:	2300      	movs	r3, #0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10a      	bne.n	800d940 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	2b02      	cmp	r3, #2
 800d944:	d103      	bne.n	800d94e <xQueueGenericSendFromISR+0x6a>
 800d946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d101      	bne.n	800d952 <xQueueGenericSendFromISR+0x6e>
 800d94e:	2301      	movs	r3, #1
 800d950:	e000      	b.n	800d954 <xQueueGenericSendFromISR+0x70>
 800d952:	2300      	movs	r3, #0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10a      	bne.n	800d96e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95c:	f383 8811 	msr	BASEPRI, r3
 800d960:	f3bf 8f6f 	isb	sy
 800d964:	f3bf 8f4f 	dsb	sy
 800d968:	623b      	str	r3, [r7, #32]
}
 800d96a:	bf00      	nop
 800d96c:	e7fe      	b.n	800d96c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d96e:	f002 f803 	bl	800f978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d972:	f3ef 8211 	mrs	r2, BASEPRI
 800d976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97a:	f383 8811 	msr	BASEPRI, r3
 800d97e:	f3bf 8f6f 	isb	sy
 800d982:	f3bf 8f4f 	dsb	sy
 800d986:	61fa      	str	r2, [r7, #28]
 800d988:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d98a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d98c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d996:	429a      	cmp	r2, r3
 800d998:	d302      	bcc.n	800d9a0 <xQueueGenericSendFromISR+0xbc>
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d12f      	bne.n	800da00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9b0:	683a      	ldr	r2, [r7, #0]
 800d9b2:	68b9      	ldr	r1, [r7, #8]
 800d9b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9b6:	f000 f99d 	bl	800dcf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d9ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c2:	d112      	bne.n	800d9ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d016      	beq.n	800d9fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ce:	3324      	adds	r3, #36	; 0x24
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f000 ffc5 	bl	800e960 <xTaskRemoveFromEventList>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00e      	beq.n	800d9fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00b      	beq.n	800d9fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	601a      	str	r2, [r3, #0]
 800d9e8:	e007      	b.n	800d9fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d9ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	b25a      	sxtb	r2, r3
 800d9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d9fe:	e001      	b.n	800da04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800da00:	2300      	movs	r3, #0
 800da02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800da0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800da12:	4618      	mov	r0, r3
 800da14:	3740      	adds	r7, #64	; 0x40
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b08e      	sub	sp, #56	; 0x38
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800da28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d10a      	bne.n	800da44 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800da2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da32:	f383 8811 	msr	BASEPRI, r3
 800da36:	f3bf 8f6f 	isb	sy
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	623b      	str	r3, [r7, #32]
}
 800da40:	bf00      	nop
 800da42:	e7fe      	b.n	800da42 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d00a      	beq.n	800da62 <xQueueGiveFromISR+0x48>
	__asm volatile
 800da4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da50:	f383 8811 	msr	BASEPRI, r3
 800da54:	f3bf 8f6f 	isb	sy
 800da58:	f3bf 8f4f 	dsb	sy
 800da5c:	61fb      	str	r3, [r7, #28]
}
 800da5e:	bf00      	nop
 800da60:	e7fe      	b.n	800da60 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800da62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d103      	bne.n	800da72 <xQueueGiveFromISR+0x58>
 800da6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d101      	bne.n	800da76 <xQueueGiveFromISR+0x5c>
 800da72:	2301      	movs	r3, #1
 800da74:	e000      	b.n	800da78 <xQueueGiveFromISR+0x5e>
 800da76:	2300      	movs	r3, #0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10a      	bne.n	800da92 <xQueueGiveFromISR+0x78>
	__asm volatile
 800da7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	61bb      	str	r3, [r7, #24]
}
 800da8e:	bf00      	nop
 800da90:	e7fe      	b.n	800da90 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da92:	f001 ff71 	bl	800f978 <vPortValidateInterruptPriority>
	__asm volatile
 800da96:	f3ef 8211 	mrs	r2, BASEPRI
 800da9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9e:	f383 8811 	msr	BASEPRI, r3
 800daa2:	f3bf 8f6f 	isb	sy
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	617a      	str	r2, [r7, #20]
 800daac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800daae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dabc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d22b      	bcs.n	800db1a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dace:	1c5a      	adds	r2, r3, #1
 800dad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dadc:	d112      	bne.n	800db04 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d016      	beq.n	800db14 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae8:	3324      	adds	r3, #36	; 0x24
 800daea:	4618      	mov	r0, r3
 800daec:	f000 ff38 	bl	800e960 <xTaskRemoveFromEventList>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00e      	beq.n	800db14 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d00b      	beq.n	800db14 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	2201      	movs	r2, #1
 800db00:	601a      	str	r2, [r3, #0]
 800db02:	e007      	b.n	800db14 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db08:	3301      	adds	r3, #1
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	b25a      	sxtb	r2, r3
 800db0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800db14:	2301      	movs	r3, #1
 800db16:	637b      	str	r3, [r7, #52]	; 0x34
 800db18:	e001      	b.n	800db1e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db1a:	2300      	movs	r3, #0
 800db1c:	637b      	str	r3, [r7, #52]	; 0x34
 800db1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db20:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f383 8811 	msr	BASEPRI, r3
}
 800db28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3738      	adds	r7, #56	; 0x38
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b08c      	sub	sp, #48	; 0x30
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800db40:	2300      	movs	r3, #0
 800db42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d10a      	bne.n	800db64 <xQueueReceive+0x30>
	__asm volatile
 800db4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	623b      	str	r3, [r7, #32]
}
 800db60:	bf00      	nop
 800db62:	e7fe      	b.n	800db62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d103      	bne.n	800db72 <xQueueReceive+0x3e>
 800db6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d101      	bne.n	800db76 <xQueueReceive+0x42>
 800db72:	2301      	movs	r3, #1
 800db74:	e000      	b.n	800db78 <xQueueReceive+0x44>
 800db76:	2300      	movs	r3, #0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d10a      	bne.n	800db92 <xQueueReceive+0x5e>
	__asm volatile
 800db7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db80:	f383 8811 	msr	BASEPRI, r3
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	61fb      	str	r3, [r7, #28]
}
 800db8e:	bf00      	nop
 800db90:	e7fe      	b.n	800db90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db92:	f001 f8b7 	bl	800ed04 <xTaskGetSchedulerState>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d102      	bne.n	800dba2 <xQueueReceive+0x6e>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d101      	bne.n	800dba6 <xQueueReceive+0x72>
 800dba2:	2301      	movs	r3, #1
 800dba4:	e000      	b.n	800dba8 <xQueueReceive+0x74>
 800dba6:	2300      	movs	r3, #0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d10a      	bne.n	800dbc2 <xQueueReceive+0x8e>
	__asm volatile
 800dbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb0:	f383 8811 	msr	BASEPRI, r3
 800dbb4:	f3bf 8f6f 	isb	sy
 800dbb8:	f3bf 8f4f 	dsb	sy
 800dbbc:	61bb      	str	r3, [r7, #24]
}
 800dbbe:	bf00      	nop
 800dbc0:	e7fe      	b.n	800dbc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dbc2:	f001 fdf7 	bl	800f7b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d01f      	beq.n	800dc12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dbd2:	68b9      	ldr	r1, [r7, #8]
 800dbd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbd6:	f000 f8f7 	bl	800ddc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbdc:	1e5a      	subs	r2, r3, #1
 800dbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d00f      	beq.n	800dc0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbec:	3310      	adds	r3, #16
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f000 feb6 	bl	800e960 <xTaskRemoveFromEventList>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d007      	beq.n	800dc0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dbfa:	4b3d      	ldr	r3, [pc, #244]	; (800dcf0 <xQueueReceive+0x1bc>)
 800dbfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc00:	601a      	str	r2, [r3, #0]
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc0a:	f001 fe03 	bl	800f814 <vPortExitCritical>
				return pdPASS;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e069      	b.n	800dce6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d103      	bne.n	800dc20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc18:	f001 fdfc 	bl	800f814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	e062      	b.n	800dce6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d106      	bne.n	800dc34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc26:	f107 0310 	add.w	r3, r7, #16
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f000 fefc 	bl	800ea28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc30:	2301      	movs	r3, #1
 800dc32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc34:	f001 fdee 	bl	800f814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc38:	f000 fc68 	bl	800e50c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc3c:	f001 fdba 	bl	800f7b4 <vPortEnterCritical>
 800dc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc46:	b25b      	sxtb	r3, r3
 800dc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc4c:	d103      	bne.n	800dc56 <xQueueReceive+0x122>
 800dc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc50:	2200      	movs	r2, #0
 800dc52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc5c:	b25b      	sxtb	r3, r3
 800dc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc62:	d103      	bne.n	800dc6c <xQueueReceive+0x138>
 800dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc66:	2200      	movs	r2, #0
 800dc68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc6c:	f001 fdd2 	bl	800f814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc70:	1d3a      	adds	r2, r7, #4
 800dc72:	f107 0310 	add.w	r3, r7, #16
 800dc76:	4611      	mov	r1, r2
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f000 feeb 	bl	800ea54 <xTaskCheckForTimeOut>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d123      	bne.n	800dccc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc86:	f000 f917 	bl	800deb8 <prvIsQueueEmpty>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d017      	beq.n	800dcc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc92:	3324      	adds	r3, #36	; 0x24
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	4611      	mov	r1, r2
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f000 fe11 	bl	800e8c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dca0:	f000 f8b8 	bl	800de14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dca4:	f000 fc40 	bl	800e528 <xTaskResumeAll>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d189      	bne.n	800dbc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dcae:	4b10      	ldr	r3, [pc, #64]	; (800dcf0 <xQueueReceive+0x1bc>)
 800dcb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcb4:	601a      	str	r2, [r3, #0]
 800dcb6:	f3bf 8f4f 	dsb	sy
 800dcba:	f3bf 8f6f 	isb	sy
 800dcbe:	e780      	b.n	800dbc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dcc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcc2:	f000 f8a7 	bl	800de14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcc6:	f000 fc2f 	bl	800e528 <xTaskResumeAll>
 800dcca:	e77a      	b.n	800dbc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcce:	f000 f8a1 	bl	800de14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcd2:	f000 fc29 	bl	800e528 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcd8:	f000 f8ee 	bl	800deb8 <prvIsQueueEmpty>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	f43f af6f 	beq.w	800dbc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dce4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3730      	adds	r7, #48	; 0x30
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	e000ed04 	.word	0xe000ed04

0800dcf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b086      	sub	sp, #24
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dd00:	2300      	movs	r3, #0
 800dd02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d10d      	bne.n	800dd2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d14d      	bne.n	800ddb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	689b      	ldr	r3, [r3, #8]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f001 f80e 	bl	800ed40 <xTaskPriorityDisinherit>
 800dd24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	609a      	str	r2, [r3, #8]
 800dd2c:	e043      	b.n	800ddb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d119      	bne.n	800dd68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6858      	ldr	r0, [r3, #4]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	68b9      	ldr	r1, [r7, #8]
 800dd40:	f002 fdec 	bl	801091c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	685a      	ldr	r2, [r3, #4]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd4c:	441a      	add	r2, r3
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	685a      	ldr	r2, [r3, #4]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d32b      	bcc.n	800ddb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	605a      	str	r2, [r3, #4]
 800dd66:	e026      	b.n	800ddb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	68d8      	ldr	r0, [r3, #12]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd70:	461a      	mov	r2, r3
 800dd72:	68b9      	ldr	r1, [r7, #8]
 800dd74:	f002 fdd2 	bl	801091c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	68da      	ldr	r2, [r3, #12]
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd80:	425b      	negs	r3, r3
 800dd82:	441a      	add	r2, r3
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	68da      	ldr	r2, [r3, #12]
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d207      	bcs.n	800dda4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	689a      	ldr	r2, [r3, #8]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd9c:	425b      	negs	r3, r3
 800dd9e:	441a      	add	r2, r3
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2b02      	cmp	r3, #2
 800dda8:	d105      	bne.n	800ddb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d002      	beq.n	800ddb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	1c5a      	adds	r2, r3, #1
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ddbe:	697b      	ldr	r3, [r7, #20]
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3718      	adds	r7, #24
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d018      	beq.n	800de0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	68da      	ldr	r2, [r3, #12]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde2:	441a      	add	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	68da      	ldr	r2, [r3, #12]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	689b      	ldr	r3, [r3, #8]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d303      	bcc.n	800ddfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	68d9      	ldr	r1, [r3, #12]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de04:	461a      	mov	r2, r3
 800de06:	6838      	ldr	r0, [r7, #0]
 800de08:	f002 fd88 	bl	801091c <memcpy>
	}
}
 800de0c:	bf00      	nop
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800de1c:	f001 fcca 	bl	800f7b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de28:	e011      	b.n	800de4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d012      	beq.n	800de58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	3324      	adds	r3, #36	; 0x24
 800de36:	4618      	mov	r0, r3
 800de38:	f000 fd92 	bl	800e960 <xTaskRemoveFromEventList>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d001      	beq.n	800de46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800de42:	f000 fe69 	bl	800eb18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800de46:	7bfb      	ldrb	r3, [r7, #15]
 800de48:	3b01      	subs	r3, #1
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de52:	2b00      	cmp	r3, #0
 800de54:	dce9      	bgt.n	800de2a <prvUnlockQueue+0x16>
 800de56:	e000      	b.n	800de5a <prvUnlockQueue+0x46>
					break;
 800de58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	22ff      	movs	r2, #255	; 0xff
 800de5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800de62:	f001 fcd7 	bl	800f814 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800de66:	f001 fca5 	bl	800f7b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de72:	e011      	b.n	800de98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	691b      	ldr	r3, [r3, #16]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d012      	beq.n	800dea2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	3310      	adds	r3, #16
 800de80:	4618      	mov	r0, r3
 800de82:	f000 fd6d 	bl	800e960 <xTaskRemoveFromEventList>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d001      	beq.n	800de90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de8c:	f000 fe44 	bl	800eb18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de90:	7bbb      	ldrb	r3, [r7, #14]
 800de92:	3b01      	subs	r3, #1
 800de94:	b2db      	uxtb	r3, r3
 800de96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	dce9      	bgt.n	800de74 <prvUnlockQueue+0x60>
 800dea0:	e000      	b.n	800dea4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dea2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	22ff      	movs	r2, #255	; 0xff
 800dea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800deac:	f001 fcb2 	bl	800f814 <vPortExitCritical>
}
 800deb0:	bf00      	nop
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dec0:	f001 fc78 	bl	800f7b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d102      	bne.n	800ded2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800decc:	2301      	movs	r3, #1
 800dece:	60fb      	str	r3, [r7, #12]
 800ded0:	e001      	b.n	800ded6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ded2:	2300      	movs	r3, #0
 800ded4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ded6:	f001 fc9d 	bl	800f814 <vPortExitCritical>

	return xReturn;
 800deda:	68fb      	ldr	r3, [r7, #12]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800deec:	f001 fc62 	bl	800f7b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800def8:	429a      	cmp	r2, r3
 800defa:	d102      	bne.n	800df02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800defc:	2301      	movs	r3, #1
 800defe:	60fb      	str	r3, [r7, #12]
 800df00:	e001      	b.n	800df06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df02:	2300      	movs	r3, #0
 800df04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df06:	f001 fc85 	bl	800f814 <vPortExitCritical>

	return xReturn;
 800df0a:	68fb      	ldr	r3, [r7, #12]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3710      	adds	r7, #16
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df1e:	2300      	movs	r3, #0
 800df20:	60fb      	str	r3, [r7, #12]
 800df22:	e014      	b.n	800df4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800df24:	4a0f      	ldr	r2, [pc, #60]	; (800df64 <vQueueAddToRegistry+0x50>)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d10b      	bne.n	800df48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800df30:	490c      	ldr	r1, [pc, #48]	; (800df64 <vQueueAddToRegistry+0x50>)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	683a      	ldr	r2, [r7, #0]
 800df36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800df3a:	4a0a      	ldr	r2, [pc, #40]	; (800df64 <vQueueAddToRegistry+0x50>)
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	00db      	lsls	r3, r3, #3
 800df40:	4413      	add	r3, r2
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800df46:	e006      	b.n	800df56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	3301      	adds	r3, #1
 800df4c:	60fb      	str	r3, [r7, #12]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2b07      	cmp	r3, #7
 800df52:	d9e7      	bls.n	800df24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800df54:	bf00      	nop
 800df56:	bf00      	nop
 800df58:	3714      	adds	r7, #20
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	2000116c 	.word	0x2000116c

0800df68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800df78:	f001 fc1c 	bl	800f7b4 <vPortEnterCritical>
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df82:	b25b      	sxtb	r3, r3
 800df84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df88:	d103      	bne.n	800df92 <vQueueWaitForMessageRestricted+0x2a>
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df98:	b25b      	sxtb	r3, r3
 800df9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df9e:	d103      	bne.n	800dfa8 <vQueueWaitForMessageRestricted+0x40>
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dfa8:	f001 fc34 	bl	800f814 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d106      	bne.n	800dfc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	3324      	adds	r3, #36	; 0x24
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	68b9      	ldr	r1, [r7, #8]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f000 fca3 	bl	800e908 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dfc2:	6978      	ldr	r0, [r7, #20]
 800dfc4:	f7ff ff26 	bl	800de14 <prvUnlockQueue>
	}
 800dfc8:	bf00      	nop
 800dfca:	3718      	adds	r7, #24
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b08e      	sub	sp, #56	; 0x38
 800dfd4:	af04      	add	r7, sp, #16
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	607a      	str	r2, [r7, #4]
 800dfdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d10a      	bne.n	800dffa <xTaskCreateStatic+0x2a>
	__asm volatile
 800dfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe8:	f383 8811 	msr	BASEPRI, r3
 800dfec:	f3bf 8f6f 	isb	sy
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	623b      	str	r3, [r7, #32]
}
 800dff6:	bf00      	nop
 800dff8:	e7fe      	b.n	800dff8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d10a      	bne.n	800e016 <xTaskCreateStatic+0x46>
	__asm volatile
 800e000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e004:	f383 8811 	msr	BASEPRI, r3
 800e008:	f3bf 8f6f 	isb	sy
 800e00c:	f3bf 8f4f 	dsb	sy
 800e010:	61fb      	str	r3, [r7, #28]
}
 800e012:	bf00      	nop
 800e014:	e7fe      	b.n	800e014 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e016:	23bc      	movs	r3, #188	; 0xbc
 800e018:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	2bbc      	cmp	r3, #188	; 0xbc
 800e01e:	d00a      	beq.n	800e036 <xTaskCreateStatic+0x66>
	__asm volatile
 800e020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e024:	f383 8811 	msr	BASEPRI, r3
 800e028:	f3bf 8f6f 	isb	sy
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	61bb      	str	r3, [r7, #24]
}
 800e032:	bf00      	nop
 800e034:	e7fe      	b.n	800e034 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e036:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d01e      	beq.n	800e07c <xTaskCreateStatic+0xac>
 800e03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e040:	2b00      	cmp	r3, #0
 800e042:	d01b      	beq.n	800e07c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e046:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e04c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e050:	2202      	movs	r2, #2
 800e052:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e056:	2300      	movs	r3, #0
 800e058:	9303      	str	r3, [sp, #12]
 800e05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05c:	9302      	str	r3, [sp, #8]
 800e05e:	f107 0314 	add.w	r3, r7, #20
 800e062:	9301      	str	r3, [sp, #4]
 800e064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e066:	9300      	str	r3, [sp, #0]
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	68b9      	ldr	r1, [r7, #8]
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f000 f850 	bl	800e114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e074:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e076:	f000 f8f3 	bl	800e260 <prvAddNewTaskToReadyList>
 800e07a:	e001      	b.n	800e080 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e07c:	2300      	movs	r3, #0
 800e07e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e080:	697b      	ldr	r3, [r7, #20]
	}
 800e082:	4618      	mov	r0, r3
 800e084:	3728      	adds	r7, #40	; 0x28
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}

0800e08a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e08a:	b580      	push	{r7, lr}
 800e08c:	b08c      	sub	sp, #48	; 0x30
 800e08e:	af04      	add	r7, sp, #16
 800e090:	60f8      	str	r0, [r7, #12]
 800e092:	60b9      	str	r1, [r7, #8]
 800e094:	603b      	str	r3, [r7, #0]
 800e096:	4613      	mov	r3, r2
 800e098:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e09a:	88fb      	ldrh	r3, [r7, #6]
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f001 fcaa 	bl	800f9f8 <pvPortMalloc>
 800e0a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00e      	beq.n	800e0ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e0ac:	20bc      	movs	r0, #188	; 0xbc
 800e0ae:	f001 fca3 	bl	800f9f8 <pvPortMalloc>
 800e0b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d003      	beq.n	800e0c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	697a      	ldr	r2, [r7, #20]
 800e0be:	631a      	str	r2, [r3, #48]	; 0x30
 800e0c0:	e005      	b.n	800e0ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e0c2:	6978      	ldr	r0, [r7, #20]
 800e0c4:	f001 fd64 	bl	800fb90 <vPortFree>
 800e0c8:	e001      	b.n	800e0ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d017      	beq.n	800e104 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e0dc:	88fa      	ldrh	r2, [r7, #6]
 800e0de:	2300      	movs	r3, #0
 800e0e0:	9303      	str	r3, [sp, #12]
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	9302      	str	r3, [sp, #8]
 800e0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e8:	9301      	str	r3, [sp, #4]
 800e0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ec:	9300      	str	r3, [sp, #0]
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	68b9      	ldr	r1, [r7, #8]
 800e0f2:	68f8      	ldr	r0, [r7, #12]
 800e0f4:	f000 f80e 	bl	800e114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0f8:	69f8      	ldr	r0, [r7, #28]
 800e0fa:	f000 f8b1 	bl	800e260 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e0fe:	2301      	movs	r3, #1
 800e100:	61bb      	str	r3, [r7, #24]
 800e102:	e002      	b.n	800e10a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e104:	f04f 33ff 	mov.w	r3, #4294967295
 800e108:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e10a:	69bb      	ldr	r3, [r7, #24]
	}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3720      	adds	r7, #32
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b088      	sub	sp, #32
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	607a      	str	r2, [r7, #4]
 800e120:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e124:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	461a      	mov	r2, r3
 800e12c:	21a5      	movs	r1, #165	; 0xa5
 800e12e:	f002 fc03 	bl	8010938 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e13c:	3b01      	subs	r3, #1
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	4413      	add	r3, r2
 800e142:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	f023 0307 	bic.w	r3, r3, #7
 800e14a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	f003 0307 	and.w	r3, r3, #7
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00a      	beq.n	800e16c <prvInitialiseNewTask+0x58>
	__asm volatile
 800e156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15a:	f383 8811 	msr	BASEPRI, r3
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	617b      	str	r3, [r7, #20]
}
 800e168:	bf00      	nop
 800e16a:	e7fe      	b.n	800e16a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d01f      	beq.n	800e1b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e172:	2300      	movs	r3, #0
 800e174:	61fb      	str	r3, [r7, #28]
 800e176:	e012      	b.n	800e19e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e178:	68ba      	ldr	r2, [r7, #8]
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	4413      	add	r3, r2
 800e17e:	7819      	ldrb	r1, [r3, #0]
 800e180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	4413      	add	r3, r2
 800e186:	3334      	adds	r3, #52	; 0x34
 800e188:	460a      	mov	r2, r1
 800e18a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e18c:	68ba      	ldr	r2, [r7, #8]
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	4413      	add	r3, r2
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d006      	beq.n	800e1a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	3301      	adds	r3, #1
 800e19c:	61fb      	str	r3, [r7, #28]
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	2b0f      	cmp	r3, #15
 800e1a2:	d9e9      	bls.n	800e178 <prvInitialiseNewTask+0x64>
 800e1a4:	e000      	b.n	800e1a8 <prvInitialiseNewTask+0x94>
			{
				break;
 800e1a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e1b0:	e003      	b.n	800e1ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1bc:	2b37      	cmp	r3, #55	; 0x37
 800e1be:	d901      	bls.n	800e1c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e1c0:	2337      	movs	r3, #55	; 0x37
 800e1c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d8:	3304      	adds	r3, #4
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7ff f8ec 	bl	800d3b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e2:	3318      	adds	r3, #24
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7ff f8e7 	bl	800d3b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e202:	2200      	movs	r2, #0
 800e204:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20a:	2200      	movs	r2, #0
 800e20c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e212:	3354      	adds	r3, #84	; 0x54
 800e214:	2260      	movs	r2, #96	; 0x60
 800e216:	2100      	movs	r1, #0
 800e218:	4618      	mov	r0, r3
 800e21a:	f002 fb8d 	bl	8010938 <memset>
 800e21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e220:	4a0c      	ldr	r2, [pc, #48]	; (800e254 <prvInitialiseNewTask+0x140>)
 800e222:	659a      	str	r2, [r3, #88]	; 0x58
 800e224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e226:	4a0c      	ldr	r2, [pc, #48]	; (800e258 <prvInitialiseNewTask+0x144>)
 800e228:	65da      	str	r2, [r3, #92]	; 0x5c
 800e22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22c:	4a0b      	ldr	r2, [pc, #44]	; (800e25c <prvInitialiseNewTask+0x148>)
 800e22e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e230:	683a      	ldr	r2, [r7, #0]
 800e232:	68f9      	ldr	r1, [r7, #12]
 800e234:	69b8      	ldr	r0, [r7, #24]
 800e236:	f001 f993 	bl	800f560 <pxPortInitialiseStack>
 800e23a:	4602      	mov	r2, r0
 800e23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e242:	2b00      	cmp	r3, #0
 800e244:	d002      	beq.n	800e24c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e24a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e24c:	bf00      	nop
 800e24e:	3720      	adds	r7, #32
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	08010cfc 	.word	0x08010cfc
 800e258:	08010d1c 	.word	0x08010d1c
 800e25c:	08010cdc 	.word	0x08010cdc

0800e260 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e268:	f001 faa4 	bl	800f7b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e26c:	4b2d      	ldr	r3, [pc, #180]	; (800e324 <prvAddNewTaskToReadyList+0xc4>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	3301      	adds	r3, #1
 800e272:	4a2c      	ldr	r2, [pc, #176]	; (800e324 <prvAddNewTaskToReadyList+0xc4>)
 800e274:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e276:	4b2c      	ldr	r3, [pc, #176]	; (800e328 <prvAddNewTaskToReadyList+0xc8>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d109      	bne.n	800e292 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e27e:	4a2a      	ldr	r2, [pc, #168]	; (800e328 <prvAddNewTaskToReadyList+0xc8>)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e284:	4b27      	ldr	r3, [pc, #156]	; (800e324 <prvAddNewTaskToReadyList+0xc4>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d110      	bne.n	800e2ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e28c:	f000 fc68 	bl	800eb60 <prvInitialiseTaskLists>
 800e290:	e00d      	b.n	800e2ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e292:	4b26      	ldr	r3, [pc, #152]	; (800e32c <prvAddNewTaskToReadyList+0xcc>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d109      	bne.n	800e2ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e29a:	4b23      	ldr	r3, [pc, #140]	; (800e328 <prvAddNewTaskToReadyList+0xc8>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d802      	bhi.n	800e2ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e2a8:	4a1f      	ldr	r2, [pc, #124]	; (800e328 <prvAddNewTaskToReadyList+0xc8>)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e2ae:	4b20      	ldr	r3, [pc, #128]	; (800e330 <prvAddNewTaskToReadyList+0xd0>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	4a1e      	ldr	r2, [pc, #120]	; (800e330 <prvAddNewTaskToReadyList+0xd0>)
 800e2b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e2b8:	4b1d      	ldr	r3, [pc, #116]	; (800e330 <prvAddNewTaskToReadyList+0xd0>)
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c4:	4b1b      	ldr	r3, [pc, #108]	; (800e334 <prvAddNewTaskToReadyList+0xd4>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d903      	bls.n	800e2d4 <prvAddNewTaskToReadyList+0x74>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d0:	4a18      	ldr	r2, [pc, #96]	; (800e334 <prvAddNewTaskToReadyList+0xd4>)
 800e2d2:	6013      	str	r3, [r2, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d8:	4613      	mov	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	4a15      	ldr	r2, [pc, #84]	; (800e338 <prvAddNewTaskToReadyList+0xd8>)
 800e2e2:	441a      	add	r2, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	3304      	adds	r3, #4
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	f7ff f871 	bl	800d3d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e2f0:	f001 fa90 	bl	800f814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e2f4:	4b0d      	ldr	r3, [pc, #52]	; (800e32c <prvAddNewTaskToReadyList+0xcc>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d00e      	beq.n	800e31a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e2fc:	4b0a      	ldr	r3, [pc, #40]	; (800e328 <prvAddNewTaskToReadyList+0xc8>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e306:	429a      	cmp	r2, r3
 800e308:	d207      	bcs.n	800e31a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e30a:	4b0c      	ldr	r3, [pc, #48]	; (800e33c <prvAddNewTaskToReadyList+0xdc>)
 800e30c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e310:	601a      	str	r2, [r3, #0]
 800e312:	f3bf 8f4f 	dsb	sy
 800e316:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e31a:	bf00      	nop
 800e31c:	3708      	adds	r7, #8
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	20001680 	.word	0x20001680
 800e328:	200011ac 	.word	0x200011ac
 800e32c:	2000168c 	.word	0x2000168c
 800e330:	2000169c 	.word	0x2000169c
 800e334:	20001688 	.word	0x20001688
 800e338:	200011b0 	.word	0x200011b0
 800e33c:	e000ed04 	.word	0xe000ed04

0800e340 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e348:	f001 fa34 	bl	800f7b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d102      	bne.n	800e358 <vTaskSuspend+0x18>
 800e352:	4b30      	ldr	r3, [pc, #192]	; (800e414 <vTaskSuspend+0xd4>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	e000      	b.n	800e35a <vTaskSuspend+0x1a>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	3304      	adds	r3, #4
 800e360:	4618      	mov	r0, r3
 800e362:	f7ff f893 	bl	800d48c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d004      	beq.n	800e378 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	3318      	adds	r3, #24
 800e372:	4618      	mov	r0, r3
 800e374:	f7ff f88a 	bl	800d48c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	3304      	adds	r3, #4
 800e37c:	4619      	mov	r1, r3
 800e37e:	4826      	ldr	r0, [pc, #152]	; (800e418 <vTaskSuspend+0xd8>)
 800e380:	f7ff f827 	bl	800d3d2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d103      	bne.n	800e398 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2200      	movs	r2, #0
 800e394:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800e398:	f001 fa3c 	bl	800f814 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800e39c:	4b1f      	ldr	r3, [pc, #124]	; (800e41c <vTaskSuspend+0xdc>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d005      	beq.n	800e3b0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800e3a4:	f001 fa06 	bl	800f7b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800e3a8:	f000 fc7c 	bl	800eca4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800e3ac:	f001 fa32 	bl	800f814 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800e3b0:	4b18      	ldr	r3, [pc, #96]	; (800e414 <vTaskSuspend+0xd4>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d127      	bne.n	800e40a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800e3ba:	4b18      	ldr	r3, [pc, #96]	; (800e41c <vTaskSuspend+0xdc>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d017      	beq.n	800e3f2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800e3c2:	4b17      	ldr	r3, [pc, #92]	; (800e420 <vTaskSuspend+0xe0>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00a      	beq.n	800e3e0 <vTaskSuspend+0xa0>
	__asm volatile
 800e3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	60bb      	str	r3, [r7, #8]
}
 800e3dc:	bf00      	nop
 800e3de:	e7fe      	b.n	800e3de <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800e3e0:	4b10      	ldr	r3, [pc, #64]	; (800e424 <vTaskSuspend+0xe4>)
 800e3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3e6:	601a      	str	r2, [r3, #0]
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3f0:	e00b      	b.n	800e40a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800e3f2:	4b09      	ldr	r3, [pc, #36]	; (800e418 <vTaskSuspend+0xd8>)
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	4b0c      	ldr	r3, [pc, #48]	; (800e428 <vTaskSuspend+0xe8>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d103      	bne.n	800e406 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800e3fe:	4b05      	ldr	r3, [pc, #20]	; (800e414 <vTaskSuspend+0xd4>)
 800e400:	2200      	movs	r2, #0
 800e402:	601a      	str	r2, [r3, #0]
	}
 800e404:	e001      	b.n	800e40a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800e406:	f000 f9f7 	bl	800e7f8 <vTaskSwitchContext>
	}
 800e40a:	bf00      	nop
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	200011ac 	.word	0x200011ac
 800e418:	2000166c 	.word	0x2000166c
 800e41c:	2000168c 	.word	0x2000168c
 800e420:	200016a8 	.word	0x200016a8
 800e424:	e000ed04 	.word	0xe000ed04
 800e428:	20001680 	.word	0x20001680

0800e42c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b08a      	sub	sp, #40	; 0x28
 800e430:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e432:	2300      	movs	r3, #0
 800e434:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e436:	2300      	movs	r3, #0
 800e438:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e43a:	463a      	mov	r2, r7
 800e43c:	1d39      	adds	r1, r7, #4
 800e43e:	f107 0308 	add.w	r3, r7, #8
 800e442:	4618      	mov	r0, r3
 800e444:	f7fe ff64 	bl	800d310 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e448:	6839      	ldr	r1, [r7, #0]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	68ba      	ldr	r2, [r7, #8]
 800e44e:	9202      	str	r2, [sp, #8]
 800e450:	9301      	str	r3, [sp, #4]
 800e452:	2300      	movs	r3, #0
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	2300      	movs	r3, #0
 800e458:	460a      	mov	r2, r1
 800e45a:	4924      	ldr	r1, [pc, #144]	; (800e4ec <vTaskStartScheduler+0xc0>)
 800e45c:	4824      	ldr	r0, [pc, #144]	; (800e4f0 <vTaskStartScheduler+0xc4>)
 800e45e:	f7ff fdb7 	bl	800dfd0 <xTaskCreateStatic>
 800e462:	4603      	mov	r3, r0
 800e464:	4a23      	ldr	r2, [pc, #140]	; (800e4f4 <vTaskStartScheduler+0xc8>)
 800e466:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e468:	4b22      	ldr	r3, [pc, #136]	; (800e4f4 <vTaskStartScheduler+0xc8>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d002      	beq.n	800e476 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e470:	2301      	movs	r3, #1
 800e472:	617b      	str	r3, [r7, #20]
 800e474:	e001      	b.n	800e47a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e476:	2300      	movs	r3, #0
 800e478:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d102      	bne.n	800e486 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e480:	f000 fd20 	bl	800eec4 <xTimerCreateTimerTask>
 800e484:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d11b      	bne.n	800e4c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800e48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e490:	f383 8811 	msr	BASEPRI, r3
 800e494:	f3bf 8f6f 	isb	sy
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	613b      	str	r3, [r7, #16]
}
 800e49e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e4a0:	4b15      	ldr	r3, [pc, #84]	; (800e4f8 <vTaskStartScheduler+0xcc>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	3354      	adds	r3, #84	; 0x54
 800e4a6:	4a15      	ldr	r2, [pc, #84]	; (800e4fc <vTaskStartScheduler+0xd0>)
 800e4a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e4aa:	4b15      	ldr	r3, [pc, #84]	; (800e500 <vTaskStartScheduler+0xd4>)
 800e4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e4b2:	4b14      	ldr	r3, [pc, #80]	; (800e504 <vTaskStartScheduler+0xd8>)
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e4b8:	4b13      	ldr	r3, [pc, #76]	; (800e508 <vTaskStartScheduler+0xdc>)
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e4be:	f001 f8d7 	bl	800f670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e4c2:	e00e      	b.n	800e4e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ca:	d10a      	bne.n	800e4e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800e4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d0:	f383 8811 	msr	BASEPRI, r3
 800e4d4:	f3bf 8f6f 	isb	sy
 800e4d8:	f3bf 8f4f 	dsb	sy
 800e4dc:	60fb      	str	r3, [r7, #12]
}
 800e4de:	bf00      	nop
 800e4e0:	e7fe      	b.n	800e4e0 <vTaskStartScheduler+0xb4>
}
 800e4e2:	bf00      	nop
 800e4e4:	3718      	adds	r7, #24
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	08010c38 	.word	0x08010c38
 800e4f0:	0800eb31 	.word	0x0800eb31
 800e4f4:	200016a4 	.word	0x200016a4
 800e4f8:	200011ac 	.word	0x200011ac
 800e4fc:	20000100 	.word	0x20000100
 800e500:	200016a0 	.word	0x200016a0
 800e504:	2000168c 	.word	0x2000168c
 800e508:	20001684 	.word	0x20001684

0800e50c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e50c:	b480      	push	{r7}
 800e50e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e510:	4b04      	ldr	r3, [pc, #16]	; (800e524 <vTaskSuspendAll+0x18>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	3301      	adds	r3, #1
 800e516:	4a03      	ldr	r2, [pc, #12]	; (800e524 <vTaskSuspendAll+0x18>)
 800e518:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e51a:	bf00      	nop
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr
 800e524:	200016a8 	.word	0x200016a8

0800e528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e52e:	2300      	movs	r3, #0
 800e530:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e532:	2300      	movs	r3, #0
 800e534:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e536:	4b42      	ldr	r3, [pc, #264]	; (800e640 <xTaskResumeAll+0x118>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d10a      	bne.n	800e554 <xTaskResumeAll+0x2c>
	__asm volatile
 800e53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e542:	f383 8811 	msr	BASEPRI, r3
 800e546:	f3bf 8f6f 	isb	sy
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	603b      	str	r3, [r7, #0]
}
 800e550:	bf00      	nop
 800e552:	e7fe      	b.n	800e552 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e554:	f001 f92e 	bl	800f7b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e558:	4b39      	ldr	r3, [pc, #228]	; (800e640 <xTaskResumeAll+0x118>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	3b01      	subs	r3, #1
 800e55e:	4a38      	ldr	r2, [pc, #224]	; (800e640 <xTaskResumeAll+0x118>)
 800e560:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e562:	4b37      	ldr	r3, [pc, #220]	; (800e640 <xTaskResumeAll+0x118>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d162      	bne.n	800e630 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e56a:	4b36      	ldr	r3, [pc, #216]	; (800e644 <xTaskResumeAll+0x11c>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d05e      	beq.n	800e630 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e572:	e02f      	b.n	800e5d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e574:	4b34      	ldr	r3, [pc, #208]	; (800e648 <xTaskResumeAll+0x120>)
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	68db      	ldr	r3, [r3, #12]
 800e57a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	3318      	adds	r3, #24
 800e580:	4618      	mov	r0, r3
 800e582:	f7fe ff83 	bl	800d48c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	3304      	adds	r3, #4
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fe ff7e 	bl	800d48c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e594:	4b2d      	ldr	r3, [pc, #180]	; (800e64c <xTaskResumeAll+0x124>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d903      	bls.n	800e5a4 <xTaskResumeAll+0x7c>
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a0:	4a2a      	ldr	r2, [pc, #168]	; (800e64c <xTaskResumeAll+0x124>)
 800e5a2:	6013      	str	r3, [r2, #0]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	4413      	add	r3, r2
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	4a27      	ldr	r2, [pc, #156]	; (800e650 <xTaskResumeAll+0x128>)
 800e5b2:	441a      	add	r2, r3
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	3304      	adds	r3, #4
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	4610      	mov	r0, r2
 800e5bc:	f7fe ff09 	bl	800d3d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c4:	4b23      	ldr	r3, [pc, #140]	; (800e654 <xTaskResumeAll+0x12c>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d302      	bcc.n	800e5d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e5ce:	4b22      	ldr	r3, [pc, #136]	; (800e658 <xTaskResumeAll+0x130>)
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5d4:	4b1c      	ldr	r3, [pc, #112]	; (800e648 <xTaskResumeAll+0x120>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d1cb      	bne.n	800e574 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d001      	beq.n	800e5e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e5e2:	f000 fb5f 	bl	800eca4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e5e6:	4b1d      	ldr	r3, [pc, #116]	; (800e65c <xTaskResumeAll+0x134>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d010      	beq.n	800e614 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e5f2:	f000 f847 	bl	800e684 <xTaskIncrementTick>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e5fc:	4b16      	ldr	r3, [pc, #88]	; (800e658 <xTaskResumeAll+0x130>)
 800e5fe:	2201      	movs	r2, #1
 800e600:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	3b01      	subs	r3, #1
 800e606:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1f1      	bne.n	800e5f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e60e:	4b13      	ldr	r3, [pc, #76]	; (800e65c <xTaskResumeAll+0x134>)
 800e610:	2200      	movs	r2, #0
 800e612:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e614:	4b10      	ldr	r3, [pc, #64]	; (800e658 <xTaskResumeAll+0x130>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d009      	beq.n	800e630 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e61c:	2301      	movs	r3, #1
 800e61e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e620:	4b0f      	ldr	r3, [pc, #60]	; (800e660 <xTaskResumeAll+0x138>)
 800e622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e626:	601a      	str	r2, [r3, #0]
 800e628:	f3bf 8f4f 	dsb	sy
 800e62c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e630:	f001 f8f0 	bl	800f814 <vPortExitCritical>

	return xAlreadyYielded;
 800e634:	68bb      	ldr	r3, [r7, #8]
}
 800e636:	4618      	mov	r0, r3
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	200016a8 	.word	0x200016a8
 800e644:	20001680 	.word	0x20001680
 800e648:	20001640 	.word	0x20001640
 800e64c:	20001688 	.word	0x20001688
 800e650:	200011b0 	.word	0x200011b0
 800e654:	200011ac 	.word	0x200011ac
 800e658:	20001694 	.word	0x20001694
 800e65c:	20001690 	.word	0x20001690
 800e660:	e000ed04 	.word	0xe000ed04

0800e664 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e66a:	4b05      	ldr	r3, [pc, #20]	; (800e680 <xTaskGetTickCount+0x1c>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e670:	687b      	ldr	r3, [r7, #4]
}
 800e672:	4618      	mov	r0, r3
 800e674:	370c      	adds	r7, #12
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop
 800e680:	20001684 	.word	0x20001684

0800e684 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b086      	sub	sp, #24
 800e688:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e68a:	2300      	movs	r3, #0
 800e68c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e68e:	4b4f      	ldr	r3, [pc, #316]	; (800e7cc <xTaskIncrementTick+0x148>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	f040 808f 	bne.w	800e7b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e698:	4b4d      	ldr	r3, [pc, #308]	; (800e7d0 <xTaskIncrementTick+0x14c>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	3301      	adds	r3, #1
 800e69e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e6a0:	4a4b      	ldr	r2, [pc, #300]	; (800e7d0 <xTaskIncrementTick+0x14c>)
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d120      	bne.n	800e6ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e6ac:	4b49      	ldr	r3, [pc, #292]	; (800e7d4 <xTaskIncrementTick+0x150>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d00a      	beq.n	800e6cc <xTaskIncrementTick+0x48>
	__asm volatile
 800e6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ba:	f383 8811 	msr	BASEPRI, r3
 800e6be:	f3bf 8f6f 	isb	sy
 800e6c2:	f3bf 8f4f 	dsb	sy
 800e6c6:	603b      	str	r3, [r7, #0]
}
 800e6c8:	bf00      	nop
 800e6ca:	e7fe      	b.n	800e6ca <xTaskIncrementTick+0x46>
 800e6cc:	4b41      	ldr	r3, [pc, #260]	; (800e7d4 <xTaskIncrementTick+0x150>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	60fb      	str	r3, [r7, #12]
 800e6d2:	4b41      	ldr	r3, [pc, #260]	; (800e7d8 <xTaskIncrementTick+0x154>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4a3f      	ldr	r2, [pc, #252]	; (800e7d4 <xTaskIncrementTick+0x150>)
 800e6d8:	6013      	str	r3, [r2, #0]
 800e6da:	4a3f      	ldr	r2, [pc, #252]	; (800e7d8 <xTaskIncrementTick+0x154>)
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	6013      	str	r3, [r2, #0]
 800e6e0:	4b3e      	ldr	r3, [pc, #248]	; (800e7dc <xTaskIncrementTick+0x158>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	4a3d      	ldr	r2, [pc, #244]	; (800e7dc <xTaskIncrementTick+0x158>)
 800e6e8:	6013      	str	r3, [r2, #0]
 800e6ea:	f000 fadb 	bl	800eca4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e6ee:	4b3c      	ldr	r3, [pc, #240]	; (800e7e0 <xTaskIncrementTick+0x15c>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	693a      	ldr	r2, [r7, #16]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d349      	bcc.n	800e78c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6f8:	4b36      	ldr	r3, [pc, #216]	; (800e7d4 <xTaskIncrementTick+0x150>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d104      	bne.n	800e70c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e702:	4b37      	ldr	r3, [pc, #220]	; (800e7e0 <xTaskIncrementTick+0x15c>)
 800e704:	f04f 32ff 	mov.w	r2, #4294967295
 800e708:	601a      	str	r2, [r3, #0]
					break;
 800e70a:	e03f      	b.n	800e78c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e70c:	4b31      	ldr	r3, [pc, #196]	; (800e7d4 <xTaskIncrementTick+0x150>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e71c:	693a      	ldr	r2, [r7, #16]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	429a      	cmp	r2, r3
 800e722:	d203      	bcs.n	800e72c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e724:	4a2e      	ldr	r2, [pc, #184]	; (800e7e0 <xTaskIncrementTick+0x15c>)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e72a:	e02f      	b.n	800e78c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	3304      	adds	r3, #4
 800e730:	4618      	mov	r0, r3
 800e732:	f7fe feab 	bl	800d48c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d004      	beq.n	800e748 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	3318      	adds	r3, #24
 800e742:	4618      	mov	r0, r3
 800e744:	f7fe fea2 	bl	800d48c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e74c:	4b25      	ldr	r3, [pc, #148]	; (800e7e4 <xTaskIncrementTick+0x160>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	429a      	cmp	r2, r3
 800e752:	d903      	bls.n	800e75c <xTaskIncrementTick+0xd8>
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e758:	4a22      	ldr	r2, [pc, #136]	; (800e7e4 <xTaskIncrementTick+0x160>)
 800e75a:	6013      	str	r3, [r2, #0]
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e760:	4613      	mov	r3, r2
 800e762:	009b      	lsls	r3, r3, #2
 800e764:	4413      	add	r3, r2
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	4a1f      	ldr	r2, [pc, #124]	; (800e7e8 <xTaskIncrementTick+0x164>)
 800e76a:	441a      	add	r2, r3
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	3304      	adds	r3, #4
 800e770:	4619      	mov	r1, r3
 800e772:	4610      	mov	r0, r2
 800e774:	f7fe fe2d 	bl	800d3d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e77c:	4b1b      	ldr	r3, [pc, #108]	; (800e7ec <xTaskIncrementTick+0x168>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e782:	429a      	cmp	r2, r3
 800e784:	d3b8      	bcc.n	800e6f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e786:	2301      	movs	r3, #1
 800e788:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e78a:	e7b5      	b.n	800e6f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e78c:	4b17      	ldr	r3, [pc, #92]	; (800e7ec <xTaskIncrementTick+0x168>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e792:	4915      	ldr	r1, [pc, #84]	; (800e7e8 <xTaskIncrementTick+0x164>)
 800e794:	4613      	mov	r3, r2
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	4413      	add	r3, r2
 800e79a:	009b      	lsls	r3, r3, #2
 800e79c:	440b      	add	r3, r1
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d901      	bls.n	800e7a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e7a8:	4b11      	ldr	r3, [pc, #68]	; (800e7f0 <xTaskIncrementTick+0x16c>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d007      	beq.n	800e7c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	617b      	str	r3, [r7, #20]
 800e7b4:	e004      	b.n	800e7c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e7b6:	4b0f      	ldr	r3, [pc, #60]	; (800e7f4 <xTaskIncrementTick+0x170>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	4a0d      	ldr	r2, [pc, #52]	; (800e7f4 <xTaskIncrementTick+0x170>)
 800e7be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e7c0:	697b      	ldr	r3, [r7, #20]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3718      	adds	r7, #24
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	200016a8 	.word	0x200016a8
 800e7d0:	20001684 	.word	0x20001684
 800e7d4:	20001638 	.word	0x20001638
 800e7d8:	2000163c 	.word	0x2000163c
 800e7dc:	20001698 	.word	0x20001698
 800e7e0:	200016a0 	.word	0x200016a0
 800e7e4:	20001688 	.word	0x20001688
 800e7e8:	200011b0 	.word	0x200011b0
 800e7ec:	200011ac 	.word	0x200011ac
 800e7f0:	20001694 	.word	0x20001694
 800e7f4:	20001690 	.word	0x20001690

0800e7f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b085      	sub	sp, #20
 800e7fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e7fe:	4b2a      	ldr	r3, [pc, #168]	; (800e8a8 <vTaskSwitchContext+0xb0>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d003      	beq.n	800e80e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e806:	4b29      	ldr	r3, [pc, #164]	; (800e8ac <vTaskSwitchContext+0xb4>)
 800e808:	2201      	movs	r2, #1
 800e80a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e80c:	e046      	b.n	800e89c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e80e:	4b27      	ldr	r3, [pc, #156]	; (800e8ac <vTaskSwitchContext+0xb4>)
 800e810:	2200      	movs	r2, #0
 800e812:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e814:	4b26      	ldr	r3, [pc, #152]	; (800e8b0 <vTaskSwitchContext+0xb8>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	60fb      	str	r3, [r7, #12]
 800e81a:	e010      	b.n	800e83e <vTaskSwitchContext+0x46>
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d10a      	bne.n	800e838 <vTaskSwitchContext+0x40>
	__asm volatile
 800e822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e826:	f383 8811 	msr	BASEPRI, r3
 800e82a:	f3bf 8f6f 	isb	sy
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	607b      	str	r3, [r7, #4]
}
 800e834:	bf00      	nop
 800e836:	e7fe      	b.n	800e836 <vTaskSwitchContext+0x3e>
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	3b01      	subs	r3, #1
 800e83c:	60fb      	str	r3, [r7, #12]
 800e83e:	491d      	ldr	r1, [pc, #116]	; (800e8b4 <vTaskSwitchContext+0xbc>)
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	4613      	mov	r3, r2
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	4413      	add	r3, r2
 800e848:	009b      	lsls	r3, r3, #2
 800e84a:	440b      	add	r3, r1
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d0e4      	beq.n	800e81c <vTaskSwitchContext+0x24>
 800e852:	68fa      	ldr	r2, [r7, #12]
 800e854:	4613      	mov	r3, r2
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	4413      	add	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	4a15      	ldr	r2, [pc, #84]	; (800e8b4 <vTaskSwitchContext+0xbc>)
 800e85e:	4413      	add	r3, r2
 800e860:	60bb      	str	r3, [r7, #8]
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	685a      	ldr	r2, [r3, #4]
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	605a      	str	r2, [r3, #4]
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	685a      	ldr	r2, [r3, #4]
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	3308      	adds	r3, #8
 800e874:	429a      	cmp	r2, r3
 800e876:	d104      	bne.n	800e882 <vTaskSwitchContext+0x8a>
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	685a      	ldr	r2, [r3, #4]
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	605a      	str	r2, [r3, #4]
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	4a0b      	ldr	r2, [pc, #44]	; (800e8b8 <vTaskSwitchContext+0xc0>)
 800e88a:	6013      	str	r3, [r2, #0]
 800e88c:	4a08      	ldr	r2, [pc, #32]	; (800e8b0 <vTaskSwitchContext+0xb8>)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e892:	4b09      	ldr	r3, [pc, #36]	; (800e8b8 <vTaskSwitchContext+0xc0>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	3354      	adds	r3, #84	; 0x54
 800e898:	4a08      	ldr	r2, [pc, #32]	; (800e8bc <vTaskSwitchContext+0xc4>)
 800e89a:	6013      	str	r3, [r2, #0]
}
 800e89c:	bf00      	nop
 800e89e:	3714      	adds	r7, #20
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr
 800e8a8:	200016a8 	.word	0x200016a8
 800e8ac:	20001694 	.word	0x20001694
 800e8b0:	20001688 	.word	0x20001688
 800e8b4:	200011b0 	.word	0x200011b0
 800e8b8:	200011ac 	.word	0x200011ac
 800e8bc:	20000100 	.word	0x20000100

0800e8c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d10a      	bne.n	800e8e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d4:	f383 8811 	msr	BASEPRI, r3
 800e8d8:	f3bf 8f6f 	isb	sy
 800e8dc:	f3bf 8f4f 	dsb	sy
 800e8e0:	60fb      	str	r3, [r7, #12]
}
 800e8e2:	bf00      	nop
 800e8e4:	e7fe      	b.n	800e8e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8e6:	4b07      	ldr	r3, [pc, #28]	; (800e904 <vTaskPlaceOnEventList+0x44>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	3318      	adds	r3, #24
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f7fe fd93 	bl	800d41a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e8f4:	2101      	movs	r1, #1
 800e8f6:	6838      	ldr	r0, [r7, #0]
 800e8f8:	f000 fa90 	bl	800ee1c <prvAddCurrentTaskToDelayedList>
}
 800e8fc:	bf00      	nop
 800e8fe:	3710      	adds	r7, #16
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	200011ac 	.word	0x200011ac

0800e908 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b086      	sub	sp, #24
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	60b9      	str	r1, [r7, #8]
 800e912:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d10a      	bne.n	800e930 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91e:	f383 8811 	msr	BASEPRI, r3
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	f3bf 8f4f 	dsb	sy
 800e92a:	617b      	str	r3, [r7, #20]
}
 800e92c:	bf00      	nop
 800e92e:	e7fe      	b.n	800e92e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e930:	4b0a      	ldr	r3, [pc, #40]	; (800e95c <vTaskPlaceOnEventListRestricted+0x54>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	3318      	adds	r3, #24
 800e936:	4619      	mov	r1, r3
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f7fe fd4a 	bl	800d3d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d002      	beq.n	800e94a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e944:	f04f 33ff 	mov.w	r3, #4294967295
 800e948:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e94a:	6879      	ldr	r1, [r7, #4]
 800e94c:	68b8      	ldr	r0, [r7, #8]
 800e94e:	f000 fa65 	bl	800ee1c <prvAddCurrentTaskToDelayedList>
	}
 800e952:	bf00      	nop
 800e954:	3718      	adds	r7, #24
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	200011ac 	.word	0x200011ac

0800e960 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b086      	sub	sp, #24
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	68db      	ldr	r3, [r3, #12]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d10a      	bne.n	800e98c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97a:	f383 8811 	msr	BASEPRI, r3
 800e97e:	f3bf 8f6f 	isb	sy
 800e982:	f3bf 8f4f 	dsb	sy
 800e986:	60fb      	str	r3, [r7, #12]
}
 800e988:	bf00      	nop
 800e98a:	e7fe      	b.n	800e98a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	3318      	adds	r3, #24
 800e990:	4618      	mov	r0, r3
 800e992:	f7fe fd7b 	bl	800d48c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e996:	4b1e      	ldr	r3, [pc, #120]	; (800ea10 <xTaskRemoveFromEventList+0xb0>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d11d      	bne.n	800e9da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	3304      	adds	r3, #4
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f7fe fd72 	bl	800d48c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9ac:	4b19      	ldr	r3, [pc, #100]	; (800ea14 <xTaskRemoveFromEventList+0xb4>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d903      	bls.n	800e9bc <xTaskRemoveFromEventList+0x5c>
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b8:	4a16      	ldr	r2, [pc, #88]	; (800ea14 <xTaskRemoveFromEventList+0xb4>)
 800e9ba:	6013      	str	r3, [r2, #0]
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	4413      	add	r3, r2
 800e9c6:	009b      	lsls	r3, r3, #2
 800e9c8:	4a13      	ldr	r2, [pc, #76]	; (800ea18 <xTaskRemoveFromEventList+0xb8>)
 800e9ca:	441a      	add	r2, r3
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	3304      	adds	r3, #4
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	4610      	mov	r0, r2
 800e9d4:	f7fe fcfd 	bl	800d3d2 <vListInsertEnd>
 800e9d8:	e005      	b.n	800e9e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	3318      	adds	r3, #24
 800e9de:	4619      	mov	r1, r3
 800e9e0:	480e      	ldr	r0, [pc, #56]	; (800ea1c <xTaskRemoveFromEventList+0xbc>)
 800e9e2:	f7fe fcf6 	bl	800d3d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9ea:	4b0d      	ldr	r3, [pc, #52]	; (800ea20 <xTaskRemoveFromEventList+0xc0>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d905      	bls.n	800ea00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ea24 <xTaskRemoveFromEventList+0xc4>)
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	601a      	str	r2, [r3, #0]
 800e9fe:	e001      	b.n	800ea04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ea00:	2300      	movs	r3, #0
 800ea02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ea04:	697b      	ldr	r3, [r7, #20]
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3718      	adds	r7, #24
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	200016a8 	.word	0x200016a8
 800ea14:	20001688 	.word	0x20001688
 800ea18:	200011b0 	.word	0x200011b0
 800ea1c:	20001640 	.word	0x20001640
 800ea20:	200011ac 	.word	0x200011ac
 800ea24:	20001694 	.word	0x20001694

0800ea28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b083      	sub	sp, #12
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea30:	4b06      	ldr	r3, [pc, #24]	; (800ea4c <vTaskInternalSetTimeOutState+0x24>)
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea38:	4b05      	ldr	r3, [pc, #20]	; (800ea50 <vTaskInternalSetTimeOutState+0x28>)
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	605a      	str	r2, [r3, #4]
}
 800ea40:	bf00      	nop
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr
 800ea4c:	20001698 	.word	0x20001698
 800ea50:	20001684 	.word	0x20001684

0800ea54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b088      	sub	sp, #32
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d10a      	bne.n	800ea7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ea64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea68:	f383 8811 	msr	BASEPRI, r3
 800ea6c:	f3bf 8f6f 	isb	sy
 800ea70:	f3bf 8f4f 	dsb	sy
 800ea74:	613b      	str	r3, [r7, #16]
}
 800ea76:	bf00      	nop
 800ea78:	e7fe      	b.n	800ea78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d10a      	bne.n	800ea96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ea80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	60fb      	str	r3, [r7, #12]
}
 800ea92:	bf00      	nop
 800ea94:	e7fe      	b.n	800ea94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ea96:	f000 fe8d 	bl	800f7b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ea9a:	4b1d      	ldr	r3, [pc, #116]	; (800eb10 <xTaskCheckForTimeOut+0xbc>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	69ba      	ldr	r2, [r7, #24]
 800eaa6:	1ad3      	subs	r3, r2, r3
 800eaa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab2:	d102      	bne.n	800eaba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eab4:	2300      	movs	r3, #0
 800eab6:	61fb      	str	r3, [r7, #28]
 800eab8:	e023      	b.n	800eb02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	4b15      	ldr	r3, [pc, #84]	; (800eb14 <xTaskCheckForTimeOut+0xc0>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d007      	beq.n	800ead6 <xTaskCheckForTimeOut+0x82>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	69ba      	ldr	r2, [r7, #24]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d302      	bcc.n	800ead6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ead0:	2301      	movs	r3, #1
 800ead2:	61fb      	str	r3, [r7, #28]
 800ead4:	e015      	b.n	800eb02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	697a      	ldr	r2, [r7, #20]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d20b      	bcs.n	800eaf8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	1ad2      	subs	r2, r2, r3
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7ff ff9b 	bl	800ea28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	61fb      	str	r3, [r7, #28]
 800eaf6:	e004      	b.n	800eb02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	2200      	movs	r2, #0
 800eafc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eafe:	2301      	movs	r3, #1
 800eb00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eb02:	f000 fe87 	bl	800f814 <vPortExitCritical>

	return xReturn;
 800eb06:	69fb      	ldr	r3, [r7, #28]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3720      	adds	r7, #32
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	20001684 	.word	0x20001684
 800eb14:	20001698 	.word	0x20001698

0800eb18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eb18:	b480      	push	{r7}
 800eb1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eb1c:	4b03      	ldr	r3, [pc, #12]	; (800eb2c <vTaskMissedYield+0x14>)
 800eb1e:	2201      	movs	r2, #1
 800eb20:	601a      	str	r2, [r3, #0]
}
 800eb22:	bf00      	nop
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr
 800eb2c:	20001694 	.word	0x20001694

0800eb30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eb38:	f000 f852 	bl	800ebe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eb3c:	4b06      	ldr	r3, [pc, #24]	; (800eb58 <prvIdleTask+0x28>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d9f9      	bls.n	800eb38 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eb44:	4b05      	ldr	r3, [pc, #20]	; (800eb5c <prvIdleTask+0x2c>)
 800eb46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb4a:	601a      	str	r2, [r3, #0]
 800eb4c:	f3bf 8f4f 	dsb	sy
 800eb50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eb54:	e7f0      	b.n	800eb38 <prvIdleTask+0x8>
 800eb56:	bf00      	nop
 800eb58:	200011b0 	.word	0x200011b0
 800eb5c:	e000ed04 	.word	0xe000ed04

0800eb60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb66:	2300      	movs	r3, #0
 800eb68:	607b      	str	r3, [r7, #4]
 800eb6a:	e00c      	b.n	800eb86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	009b      	lsls	r3, r3, #2
 800eb72:	4413      	add	r3, r2
 800eb74:	009b      	lsls	r3, r3, #2
 800eb76:	4a12      	ldr	r2, [pc, #72]	; (800ebc0 <prvInitialiseTaskLists+0x60>)
 800eb78:	4413      	add	r3, r2
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fe fbfc 	bl	800d378 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	3301      	adds	r3, #1
 800eb84:	607b      	str	r3, [r7, #4]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2b37      	cmp	r3, #55	; 0x37
 800eb8a:	d9ef      	bls.n	800eb6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb8c:	480d      	ldr	r0, [pc, #52]	; (800ebc4 <prvInitialiseTaskLists+0x64>)
 800eb8e:	f7fe fbf3 	bl	800d378 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb92:	480d      	ldr	r0, [pc, #52]	; (800ebc8 <prvInitialiseTaskLists+0x68>)
 800eb94:	f7fe fbf0 	bl	800d378 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb98:	480c      	ldr	r0, [pc, #48]	; (800ebcc <prvInitialiseTaskLists+0x6c>)
 800eb9a:	f7fe fbed 	bl	800d378 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb9e:	480c      	ldr	r0, [pc, #48]	; (800ebd0 <prvInitialiseTaskLists+0x70>)
 800eba0:	f7fe fbea 	bl	800d378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eba4:	480b      	ldr	r0, [pc, #44]	; (800ebd4 <prvInitialiseTaskLists+0x74>)
 800eba6:	f7fe fbe7 	bl	800d378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ebaa:	4b0b      	ldr	r3, [pc, #44]	; (800ebd8 <prvInitialiseTaskLists+0x78>)
 800ebac:	4a05      	ldr	r2, [pc, #20]	; (800ebc4 <prvInitialiseTaskLists+0x64>)
 800ebae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ebb0:	4b0a      	ldr	r3, [pc, #40]	; (800ebdc <prvInitialiseTaskLists+0x7c>)
 800ebb2:	4a05      	ldr	r2, [pc, #20]	; (800ebc8 <prvInitialiseTaskLists+0x68>)
 800ebb4:	601a      	str	r2, [r3, #0]
}
 800ebb6:	bf00      	nop
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	200011b0 	.word	0x200011b0
 800ebc4:	20001610 	.word	0x20001610
 800ebc8:	20001624 	.word	0x20001624
 800ebcc:	20001640 	.word	0x20001640
 800ebd0:	20001654 	.word	0x20001654
 800ebd4:	2000166c 	.word	0x2000166c
 800ebd8:	20001638 	.word	0x20001638
 800ebdc:	2000163c 	.word	0x2000163c

0800ebe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebe6:	e019      	b.n	800ec1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ebe8:	f000 fde4 	bl	800f7b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebec:	4b10      	ldr	r3, [pc, #64]	; (800ec30 <prvCheckTasksWaitingTermination+0x50>)
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	68db      	ldr	r3, [r3, #12]
 800ebf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	3304      	adds	r3, #4
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7fe fc47 	bl	800d48c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ebfe:	4b0d      	ldr	r3, [pc, #52]	; (800ec34 <prvCheckTasksWaitingTermination+0x54>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	3b01      	subs	r3, #1
 800ec04:	4a0b      	ldr	r2, [pc, #44]	; (800ec34 <prvCheckTasksWaitingTermination+0x54>)
 800ec06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ec08:	4b0b      	ldr	r3, [pc, #44]	; (800ec38 <prvCheckTasksWaitingTermination+0x58>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	3b01      	subs	r3, #1
 800ec0e:	4a0a      	ldr	r2, [pc, #40]	; (800ec38 <prvCheckTasksWaitingTermination+0x58>)
 800ec10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ec12:	f000 fdff 	bl	800f814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 f810 	bl	800ec3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec1c:	4b06      	ldr	r3, [pc, #24]	; (800ec38 <prvCheckTasksWaitingTermination+0x58>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d1e1      	bne.n	800ebe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ec24:	bf00      	nop
 800ec26:	bf00      	nop
 800ec28:	3708      	adds	r7, #8
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	20001654 	.word	0x20001654
 800ec34:	20001680 	.word	0x20001680
 800ec38:	20001668 	.word	0x20001668

0800ec3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	3354      	adds	r3, #84	; 0x54
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f001 ff6b 	bl	8010b24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d108      	bne.n	800ec6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f000 ff97 	bl	800fb90 <vPortFree>
				vPortFree( pxTCB );
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 ff94 	bl	800fb90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec68:	e018      	b.n	800ec9c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d103      	bne.n	800ec7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 ff8b 	bl	800fb90 <vPortFree>
	}
 800ec7a:	e00f      	b.n	800ec9c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ec82:	2b02      	cmp	r3, #2
 800ec84:	d00a      	beq.n	800ec9c <prvDeleteTCB+0x60>
	__asm volatile
 800ec86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8a:	f383 8811 	msr	BASEPRI, r3
 800ec8e:	f3bf 8f6f 	isb	sy
 800ec92:	f3bf 8f4f 	dsb	sy
 800ec96:	60fb      	str	r3, [r7, #12]
}
 800ec98:	bf00      	nop
 800ec9a:	e7fe      	b.n	800ec9a <prvDeleteTCB+0x5e>
	}
 800ec9c:	bf00      	nop
 800ec9e:	3710      	adds	r7, #16
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecaa:	4b0c      	ldr	r3, [pc, #48]	; (800ecdc <prvResetNextTaskUnblockTime+0x38>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d104      	bne.n	800ecbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ecb4:	4b0a      	ldr	r3, [pc, #40]	; (800ece0 <prvResetNextTaskUnblockTime+0x3c>)
 800ecb6:	f04f 32ff 	mov.w	r2, #4294967295
 800ecba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ecbc:	e008      	b.n	800ecd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecbe:	4b07      	ldr	r3, [pc, #28]	; (800ecdc <prvResetNextTaskUnblockTime+0x38>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	4a04      	ldr	r2, [pc, #16]	; (800ece0 <prvResetNextTaskUnblockTime+0x3c>)
 800ecce:	6013      	str	r3, [r2, #0]
}
 800ecd0:	bf00      	nop
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr
 800ecdc:	20001638 	.word	0x20001638
 800ece0:	200016a0 	.word	0x200016a0

0800ece4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ecea:	4b05      	ldr	r3, [pc, #20]	; (800ed00 <xTaskGetCurrentTaskHandle+0x1c>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ecf0:	687b      	ldr	r3, [r7, #4]
	}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	370c      	adds	r7, #12
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	200011ac 	.word	0x200011ac

0800ed04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ed0a:	4b0b      	ldr	r3, [pc, #44]	; (800ed38 <xTaskGetSchedulerState+0x34>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d102      	bne.n	800ed18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed12:	2301      	movs	r3, #1
 800ed14:	607b      	str	r3, [r7, #4]
 800ed16:	e008      	b.n	800ed2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed18:	4b08      	ldr	r3, [pc, #32]	; (800ed3c <xTaskGetSchedulerState+0x38>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d102      	bne.n	800ed26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ed20:	2302      	movs	r3, #2
 800ed22:	607b      	str	r3, [r7, #4]
 800ed24:	e001      	b.n	800ed2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ed26:	2300      	movs	r3, #0
 800ed28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ed2a:	687b      	ldr	r3, [r7, #4]
	}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	370c      	adds	r7, #12
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr
 800ed38:	2000168c 	.word	0x2000168c
 800ed3c:	200016a8 	.word	0x200016a8

0800ed40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d056      	beq.n	800ee04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed56:	4b2e      	ldr	r3, [pc, #184]	; (800ee10 <xTaskPriorityDisinherit+0xd0>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	693a      	ldr	r2, [r7, #16]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d00a      	beq.n	800ed76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ed60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed64:	f383 8811 	msr	BASEPRI, r3
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	f3bf 8f4f 	dsb	sy
 800ed70:	60fb      	str	r3, [r7, #12]
}
 800ed72:	bf00      	nop
 800ed74:	e7fe      	b.n	800ed74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d10a      	bne.n	800ed94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ed7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed82:	f383 8811 	msr	BASEPRI, r3
 800ed86:	f3bf 8f6f 	isb	sy
 800ed8a:	f3bf 8f4f 	dsb	sy
 800ed8e:	60bb      	str	r3, [r7, #8]
}
 800ed90:	bf00      	nop
 800ed92:	e7fe      	b.n	800ed92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed98:	1e5a      	subs	r2, r3, #1
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d02c      	beq.n	800ee04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d128      	bne.n	800ee04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	3304      	adds	r3, #4
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7fe fb68 	bl	800d48c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edc8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edd4:	4b0f      	ldr	r3, [pc, #60]	; (800ee14 <xTaskPriorityDisinherit+0xd4>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d903      	bls.n	800ede4 <xTaskPriorityDisinherit+0xa4>
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ede0:	4a0c      	ldr	r2, [pc, #48]	; (800ee14 <xTaskPriorityDisinherit+0xd4>)
 800ede2:	6013      	str	r3, [r2, #0]
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ede8:	4613      	mov	r3, r2
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	4413      	add	r3, r2
 800edee:	009b      	lsls	r3, r3, #2
 800edf0:	4a09      	ldr	r2, [pc, #36]	; (800ee18 <xTaskPriorityDisinherit+0xd8>)
 800edf2:	441a      	add	r2, r3
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	3304      	adds	r3, #4
 800edf8:	4619      	mov	r1, r3
 800edfa:	4610      	mov	r0, r2
 800edfc:	f7fe fae9 	bl	800d3d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee00:	2301      	movs	r3, #1
 800ee02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee04:	697b      	ldr	r3, [r7, #20]
	}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3718      	adds	r7, #24
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	200011ac 	.word	0x200011ac
 800ee14:	20001688 	.word	0x20001688
 800ee18:	200011b0 	.word	0x200011b0

0800ee1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee26:	4b21      	ldr	r3, [pc, #132]	; (800eeac <prvAddCurrentTaskToDelayedList+0x90>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee2c:	4b20      	ldr	r3, [pc, #128]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	3304      	adds	r3, #4
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7fe fb2a 	bl	800d48c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee3e:	d10a      	bne.n	800ee56 <prvAddCurrentTaskToDelayedList+0x3a>
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d007      	beq.n	800ee56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee46:	4b1a      	ldr	r3, [pc, #104]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	3304      	adds	r3, #4
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	4819      	ldr	r0, [pc, #100]	; (800eeb4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ee50:	f7fe fabf 	bl	800d3d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ee54:	e026      	b.n	800eea4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee56:	68fa      	ldr	r2, [r7, #12]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	4413      	add	r3, r2
 800ee5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee5e:	4b14      	ldr	r3, [pc, #80]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	68ba      	ldr	r2, [r7, #8]
 800ee64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee66:	68ba      	ldr	r2, [r7, #8]
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d209      	bcs.n	800ee82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee6e:	4b12      	ldr	r3, [pc, #72]	; (800eeb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	4b0f      	ldr	r3, [pc, #60]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	3304      	adds	r3, #4
 800ee78:	4619      	mov	r1, r3
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	f7fe facd 	bl	800d41a <vListInsert>
}
 800ee80:	e010      	b.n	800eea4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee82:	4b0e      	ldr	r3, [pc, #56]	; (800eebc <prvAddCurrentTaskToDelayedList+0xa0>)
 800ee84:	681a      	ldr	r2, [r3, #0]
 800ee86:	4b0a      	ldr	r3, [pc, #40]	; (800eeb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	3304      	adds	r3, #4
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	4610      	mov	r0, r2
 800ee90:	f7fe fac3 	bl	800d41a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee94:	4b0a      	ldr	r3, [pc, #40]	; (800eec0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	68ba      	ldr	r2, [r7, #8]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d202      	bcs.n	800eea4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ee9e:	4a08      	ldr	r2, [pc, #32]	; (800eec0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	6013      	str	r3, [r2, #0]
}
 800eea4:	bf00      	nop
 800eea6:	3710      	adds	r7, #16
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	20001684 	.word	0x20001684
 800eeb0:	200011ac 	.word	0x200011ac
 800eeb4:	2000166c 	.word	0x2000166c
 800eeb8:	2000163c 	.word	0x2000163c
 800eebc:	20001638 	.word	0x20001638
 800eec0:	200016a0 	.word	0x200016a0

0800eec4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b08a      	sub	sp, #40	; 0x28
 800eec8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eeca:	2300      	movs	r3, #0
 800eecc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eece:	f000 fb07 	bl	800f4e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eed2:	4b1c      	ldr	r3, [pc, #112]	; (800ef44 <xTimerCreateTimerTask+0x80>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d021      	beq.n	800ef1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eeda:	2300      	movs	r3, #0
 800eedc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eede:	2300      	movs	r3, #0
 800eee0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eee2:	1d3a      	adds	r2, r7, #4
 800eee4:	f107 0108 	add.w	r1, r7, #8
 800eee8:	f107 030c 	add.w	r3, r7, #12
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7fe fa29 	bl	800d344 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eef2:	6879      	ldr	r1, [r7, #4]
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	68fa      	ldr	r2, [r7, #12]
 800eef8:	9202      	str	r2, [sp, #8]
 800eefa:	9301      	str	r3, [sp, #4]
 800eefc:	2302      	movs	r3, #2
 800eefe:	9300      	str	r3, [sp, #0]
 800ef00:	2300      	movs	r3, #0
 800ef02:	460a      	mov	r2, r1
 800ef04:	4910      	ldr	r1, [pc, #64]	; (800ef48 <xTimerCreateTimerTask+0x84>)
 800ef06:	4811      	ldr	r0, [pc, #68]	; (800ef4c <xTimerCreateTimerTask+0x88>)
 800ef08:	f7ff f862 	bl	800dfd0 <xTaskCreateStatic>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	4a10      	ldr	r2, [pc, #64]	; (800ef50 <xTimerCreateTimerTask+0x8c>)
 800ef10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ef12:	4b0f      	ldr	r3, [pc, #60]	; (800ef50 <xTimerCreateTimerTask+0x8c>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d10a      	bne.n	800ef3a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ef24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef28:	f383 8811 	msr	BASEPRI, r3
 800ef2c:	f3bf 8f6f 	isb	sy
 800ef30:	f3bf 8f4f 	dsb	sy
 800ef34:	613b      	str	r3, [r7, #16]
}
 800ef36:	bf00      	nop
 800ef38:	e7fe      	b.n	800ef38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ef3a:	697b      	ldr	r3, [r7, #20]
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3718      	adds	r7, #24
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	200016dc 	.word	0x200016dc
 800ef48:	08010c40 	.word	0x08010c40
 800ef4c:	0800f089 	.word	0x0800f089
 800ef50:	200016e0 	.word	0x200016e0

0800ef54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b08a      	sub	sp, #40	; 0x28
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]
 800ef60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ef62:	2300      	movs	r3, #0
 800ef64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d10a      	bne.n	800ef82 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ef6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef70:	f383 8811 	msr	BASEPRI, r3
 800ef74:	f3bf 8f6f 	isb	sy
 800ef78:	f3bf 8f4f 	dsb	sy
 800ef7c:	623b      	str	r3, [r7, #32]
}
 800ef7e:	bf00      	nop
 800ef80:	e7fe      	b.n	800ef80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ef82:	4b1a      	ldr	r3, [pc, #104]	; (800efec <xTimerGenericCommand+0x98>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d02a      	beq.n	800efe0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	2b05      	cmp	r3, #5
 800ef9a:	dc18      	bgt.n	800efce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef9c:	f7ff feb2 	bl	800ed04 <xTaskGetSchedulerState>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b02      	cmp	r3, #2
 800efa4:	d109      	bne.n	800efba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800efa6:	4b11      	ldr	r3, [pc, #68]	; (800efec <xTimerGenericCommand+0x98>)
 800efa8:	6818      	ldr	r0, [r3, #0]
 800efaa:	f107 0110 	add.w	r1, r7, #16
 800efae:	2300      	movs	r3, #0
 800efb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efb2:	f7fe fb99 	bl	800d6e8 <xQueueGenericSend>
 800efb6:	6278      	str	r0, [r7, #36]	; 0x24
 800efb8:	e012      	b.n	800efe0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800efba:	4b0c      	ldr	r3, [pc, #48]	; (800efec <xTimerGenericCommand+0x98>)
 800efbc:	6818      	ldr	r0, [r3, #0]
 800efbe:	f107 0110 	add.w	r1, r7, #16
 800efc2:	2300      	movs	r3, #0
 800efc4:	2200      	movs	r2, #0
 800efc6:	f7fe fb8f 	bl	800d6e8 <xQueueGenericSend>
 800efca:	6278      	str	r0, [r7, #36]	; 0x24
 800efcc:	e008      	b.n	800efe0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800efce:	4b07      	ldr	r3, [pc, #28]	; (800efec <xTimerGenericCommand+0x98>)
 800efd0:	6818      	ldr	r0, [r3, #0]
 800efd2:	f107 0110 	add.w	r1, r7, #16
 800efd6:	2300      	movs	r3, #0
 800efd8:	683a      	ldr	r2, [r7, #0]
 800efda:	f7fe fc83 	bl	800d8e4 <xQueueGenericSendFromISR>
 800efde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3728      	adds	r7, #40	; 0x28
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	200016dc 	.word	0x200016dc

0800eff0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b088      	sub	sp, #32
 800eff4:	af02      	add	r7, sp, #8
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800effa:	4b22      	ldr	r3, [pc, #136]	; (800f084 <prvProcessExpiredTimer+0x94>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	68db      	ldr	r3, [r3, #12]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	3304      	adds	r3, #4
 800f008:	4618      	mov	r0, r3
 800f00a:	f7fe fa3f 	bl	800d48c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f014:	f003 0304 	and.w	r3, r3, #4
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d022      	beq.n	800f062 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	699a      	ldr	r2, [r3, #24]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	18d1      	adds	r1, r2, r3
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	683a      	ldr	r2, [r7, #0]
 800f028:	6978      	ldr	r0, [r7, #20]
 800f02a:	f000 f8d1 	bl	800f1d0 <prvInsertTimerInActiveList>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d01f      	beq.n	800f074 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f034:	2300      	movs	r3, #0
 800f036:	9300      	str	r3, [sp, #0]
 800f038:	2300      	movs	r3, #0
 800f03a:	687a      	ldr	r2, [r7, #4]
 800f03c:	2100      	movs	r1, #0
 800f03e:	6978      	ldr	r0, [r7, #20]
 800f040:	f7ff ff88 	bl	800ef54 <xTimerGenericCommand>
 800f044:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d113      	bne.n	800f074 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f050:	f383 8811 	msr	BASEPRI, r3
 800f054:	f3bf 8f6f 	isb	sy
 800f058:	f3bf 8f4f 	dsb	sy
 800f05c:	60fb      	str	r3, [r7, #12]
}
 800f05e:	bf00      	nop
 800f060:	e7fe      	b.n	800f060 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f068:	f023 0301 	bic.w	r3, r3, #1
 800f06c:	b2da      	uxtb	r2, r3
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	6a1b      	ldr	r3, [r3, #32]
 800f078:	6978      	ldr	r0, [r7, #20]
 800f07a:	4798      	blx	r3
}
 800f07c:	bf00      	nop
 800f07e:	3718      	adds	r7, #24
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	200016d4 	.word	0x200016d4

0800f088 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f090:	f107 0308 	add.w	r3, r7, #8
 800f094:	4618      	mov	r0, r3
 800f096:	f000 f857 	bl	800f148 <prvGetNextExpireTime>
 800f09a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	4619      	mov	r1, r3
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	f000 f803 	bl	800f0ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f0a6:	f000 f8d5 	bl	800f254 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0aa:	e7f1      	b.n	800f090 <prvTimerTask+0x8>

0800f0ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f0b6:	f7ff fa29 	bl	800e50c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0ba:	f107 0308 	add.w	r3, r7, #8
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f000 f866 	bl	800f190 <prvSampleTimeNow>
 800f0c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d130      	bne.n	800f12e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d10a      	bne.n	800f0e8 <prvProcessTimerOrBlockTask+0x3c>
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d806      	bhi.n	800f0e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f0da:	f7ff fa25 	bl	800e528 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f0de:	68f9      	ldr	r1, [r7, #12]
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f7ff ff85 	bl	800eff0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f0e6:	e024      	b.n	800f132 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d008      	beq.n	800f100 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f0ee:	4b13      	ldr	r3, [pc, #76]	; (800f13c <prvProcessTimerOrBlockTask+0x90>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d101      	bne.n	800f0fc <prvProcessTimerOrBlockTask+0x50>
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	e000      	b.n	800f0fe <prvProcessTimerOrBlockTask+0x52>
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f100:	4b0f      	ldr	r3, [pc, #60]	; (800f140 <prvProcessTimerOrBlockTask+0x94>)
 800f102:	6818      	ldr	r0, [r3, #0]
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	1ad3      	subs	r3, r2, r3
 800f10a:	683a      	ldr	r2, [r7, #0]
 800f10c:	4619      	mov	r1, r3
 800f10e:	f7fe ff2b 	bl	800df68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f112:	f7ff fa09 	bl	800e528 <xTaskResumeAll>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d10a      	bne.n	800f132 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f11c:	4b09      	ldr	r3, [pc, #36]	; (800f144 <prvProcessTimerOrBlockTask+0x98>)
 800f11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f122:	601a      	str	r2, [r3, #0]
 800f124:	f3bf 8f4f 	dsb	sy
 800f128:	f3bf 8f6f 	isb	sy
}
 800f12c:	e001      	b.n	800f132 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f12e:	f7ff f9fb 	bl	800e528 <xTaskResumeAll>
}
 800f132:	bf00      	nop
 800f134:	3710      	adds	r7, #16
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	200016d8 	.word	0x200016d8
 800f140:	200016dc 	.word	0x200016dc
 800f144:	e000ed04 	.word	0xe000ed04

0800f148 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f148:	b480      	push	{r7}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f150:	4b0e      	ldr	r3, [pc, #56]	; (800f18c <prvGetNextExpireTime+0x44>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d101      	bne.n	800f15e <prvGetNextExpireTime+0x16>
 800f15a:	2201      	movs	r2, #1
 800f15c:	e000      	b.n	800f160 <prvGetNextExpireTime+0x18>
 800f15e:	2200      	movs	r2, #0
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d105      	bne.n	800f178 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f16c:	4b07      	ldr	r3, [pc, #28]	; (800f18c <prvGetNextExpireTime+0x44>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	68db      	ldr	r3, [r3, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	60fb      	str	r3, [r7, #12]
 800f176:	e001      	b.n	800f17c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f178:	2300      	movs	r3, #0
 800f17a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f17c:	68fb      	ldr	r3, [r7, #12]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3714      	adds	r7, #20
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	200016d4 	.word	0x200016d4

0800f190 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f198:	f7ff fa64 	bl	800e664 <xTaskGetTickCount>
 800f19c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f19e:	4b0b      	ldr	r3, [pc, #44]	; (800f1cc <prvSampleTimeNow+0x3c>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	68fa      	ldr	r2, [r7, #12]
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d205      	bcs.n	800f1b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f1a8:	f000 f936 	bl	800f418 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	601a      	str	r2, [r3, #0]
 800f1b2:	e002      	b.n	800f1ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f1ba:	4a04      	ldr	r2, [pc, #16]	; (800f1cc <prvSampleTimeNow+0x3c>)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3710      	adds	r7, #16
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	200016e4 	.word	0x200016e4

0800f1d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b086      	sub	sp, #24
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	607a      	str	r2, [r7, #4]
 800f1dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	68ba      	ldr	r2, [r7, #8]
 800f1e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	68fa      	ldr	r2, [r7, #12]
 800f1ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f1ee:	68ba      	ldr	r2, [r7, #8]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d812      	bhi.n	800f21c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1f6:	687a      	ldr	r2, [r7, #4]
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	1ad2      	subs	r2, r2, r3
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	699b      	ldr	r3, [r3, #24]
 800f200:	429a      	cmp	r2, r3
 800f202:	d302      	bcc.n	800f20a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f204:	2301      	movs	r3, #1
 800f206:	617b      	str	r3, [r7, #20]
 800f208:	e01b      	b.n	800f242 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f20a:	4b10      	ldr	r3, [pc, #64]	; (800f24c <prvInsertTimerInActiveList+0x7c>)
 800f20c:	681a      	ldr	r2, [r3, #0]
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	3304      	adds	r3, #4
 800f212:	4619      	mov	r1, r3
 800f214:	4610      	mov	r0, r2
 800f216:	f7fe f900 	bl	800d41a <vListInsert>
 800f21a:	e012      	b.n	800f242 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f21c:	687a      	ldr	r2, [r7, #4]
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	429a      	cmp	r2, r3
 800f222:	d206      	bcs.n	800f232 <prvInsertTimerInActiveList+0x62>
 800f224:	68ba      	ldr	r2, [r7, #8]
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d302      	bcc.n	800f232 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f22c:	2301      	movs	r3, #1
 800f22e:	617b      	str	r3, [r7, #20]
 800f230:	e007      	b.n	800f242 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f232:	4b07      	ldr	r3, [pc, #28]	; (800f250 <prvInsertTimerInActiveList+0x80>)
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	3304      	adds	r3, #4
 800f23a:	4619      	mov	r1, r3
 800f23c:	4610      	mov	r0, r2
 800f23e:	f7fe f8ec 	bl	800d41a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f242:	697b      	ldr	r3, [r7, #20]
}
 800f244:	4618      	mov	r0, r3
 800f246:	3718      	adds	r7, #24
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	200016d8 	.word	0x200016d8
 800f250:	200016d4 	.word	0x200016d4

0800f254 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b08e      	sub	sp, #56	; 0x38
 800f258:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f25a:	e0ca      	b.n	800f3f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	da18      	bge.n	800f294 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f262:	1d3b      	adds	r3, r7, #4
 800f264:	3304      	adds	r3, #4
 800f266:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d10a      	bne.n	800f284 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f272:	f383 8811 	msr	BASEPRI, r3
 800f276:	f3bf 8f6f 	isb	sy
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	61fb      	str	r3, [r7, #28]
}
 800f280:	bf00      	nop
 800f282:	e7fe      	b.n	800f282 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f28a:	6850      	ldr	r0, [r2, #4]
 800f28c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f28e:	6892      	ldr	r2, [r2, #8]
 800f290:	4611      	mov	r1, r2
 800f292:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2b00      	cmp	r3, #0
 800f298:	f2c0 80aa 	blt.w	800f3f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a2:	695b      	ldr	r3, [r3, #20]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d004      	beq.n	800f2b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2aa:	3304      	adds	r3, #4
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7fe f8ed 	bl	800d48c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2b2:	463b      	mov	r3, r7
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7ff ff6b 	bl	800f190 <prvSampleTimeNow>
 800f2ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b09      	cmp	r3, #9
 800f2c0:	f200 8097 	bhi.w	800f3f2 <prvProcessReceivedCommands+0x19e>
 800f2c4:	a201      	add	r2, pc, #4	; (adr r2, 800f2cc <prvProcessReceivedCommands+0x78>)
 800f2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ca:	bf00      	nop
 800f2cc:	0800f2f5 	.word	0x0800f2f5
 800f2d0:	0800f2f5 	.word	0x0800f2f5
 800f2d4:	0800f2f5 	.word	0x0800f2f5
 800f2d8:	0800f369 	.word	0x0800f369
 800f2dc:	0800f37d 	.word	0x0800f37d
 800f2e0:	0800f3c7 	.word	0x0800f3c7
 800f2e4:	0800f2f5 	.word	0x0800f2f5
 800f2e8:	0800f2f5 	.word	0x0800f2f5
 800f2ec:	0800f369 	.word	0x0800f369
 800f2f0:	0800f37d 	.word	0x0800f37d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2fa:	f043 0301 	orr.w	r3, r3, #1
 800f2fe:	b2da      	uxtb	r2, r3
 800f300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f306:	68ba      	ldr	r2, [r7, #8]
 800f308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30a:	699b      	ldr	r3, [r3, #24]
 800f30c:	18d1      	adds	r1, r2, r3
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f314:	f7ff ff5c 	bl	800f1d0 <prvInsertTimerInActiveList>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d069      	beq.n	800f3f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f320:	6a1b      	ldr	r3, [r3, #32]
 800f322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f324:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f32c:	f003 0304 	and.w	r3, r3, #4
 800f330:	2b00      	cmp	r3, #0
 800f332:	d05e      	beq.n	800f3f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f334:	68ba      	ldr	r2, [r7, #8]
 800f336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f338:	699b      	ldr	r3, [r3, #24]
 800f33a:	441a      	add	r2, r3
 800f33c:	2300      	movs	r3, #0
 800f33e:	9300      	str	r3, [sp, #0]
 800f340:	2300      	movs	r3, #0
 800f342:	2100      	movs	r1, #0
 800f344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f346:	f7ff fe05 	bl	800ef54 <xTimerGenericCommand>
 800f34a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f34c:	6a3b      	ldr	r3, [r7, #32]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d14f      	bne.n	800f3f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f356:	f383 8811 	msr	BASEPRI, r3
 800f35a:	f3bf 8f6f 	isb	sy
 800f35e:	f3bf 8f4f 	dsb	sy
 800f362:	61bb      	str	r3, [r7, #24]
}
 800f364:	bf00      	nop
 800f366:	e7fe      	b.n	800f366 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f36e:	f023 0301 	bic.w	r3, r3, #1
 800f372:	b2da      	uxtb	r2, r3
 800f374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f37a:	e03a      	b.n	800f3f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f382:	f043 0301 	orr.w	r3, r3, #1
 800f386:	b2da      	uxtb	r2, r3
 800f388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f38e:	68ba      	ldr	r2, [r7, #8]
 800f390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f392:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f396:	699b      	ldr	r3, [r3, #24]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d10a      	bne.n	800f3b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a0:	f383 8811 	msr	BASEPRI, r3
 800f3a4:	f3bf 8f6f 	isb	sy
 800f3a8:	f3bf 8f4f 	dsb	sy
 800f3ac:	617b      	str	r3, [r7, #20]
}
 800f3ae:	bf00      	nop
 800f3b0:	e7fe      	b.n	800f3b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b4:	699a      	ldr	r2, [r3, #24]
 800f3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b8:	18d1      	adds	r1, r2, r3
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3c0:	f7ff ff06 	bl	800f1d0 <prvInsertTimerInActiveList>
					break;
 800f3c4:	e015      	b.n	800f3f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3cc:	f003 0302 	and.w	r3, r3, #2
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d103      	bne.n	800f3dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f3d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3d6:	f000 fbdb 	bl	800fb90 <vPortFree>
 800f3da:	e00a      	b.n	800f3f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3e2:	f023 0301 	bic.w	r3, r3, #1
 800f3e6:	b2da      	uxtb	r2, r3
 800f3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f3ee:	e000      	b.n	800f3f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f3f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f3f2:	4b08      	ldr	r3, [pc, #32]	; (800f414 <prvProcessReceivedCommands+0x1c0>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	1d39      	adds	r1, r7, #4
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fe fb9a 	bl	800db34 <xQueueReceive>
 800f400:	4603      	mov	r3, r0
 800f402:	2b00      	cmp	r3, #0
 800f404:	f47f af2a 	bne.w	800f25c <prvProcessReceivedCommands+0x8>
	}
}
 800f408:	bf00      	nop
 800f40a:	bf00      	nop
 800f40c:	3730      	adds	r7, #48	; 0x30
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
 800f412:	bf00      	nop
 800f414:	200016dc 	.word	0x200016dc

0800f418 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b088      	sub	sp, #32
 800f41c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f41e:	e048      	b.n	800f4b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f420:	4b2d      	ldr	r3, [pc, #180]	; (800f4d8 <prvSwitchTimerLists+0xc0>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	68db      	ldr	r3, [r3, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f42a:	4b2b      	ldr	r3, [pc, #172]	; (800f4d8 <prvSwitchTimerLists+0xc0>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	3304      	adds	r3, #4
 800f438:	4618      	mov	r0, r3
 800f43a:	f7fe f827 	bl	800d48c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	6a1b      	ldr	r3, [r3, #32]
 800f442:	68f8      	ldr	r0, [r7, #12]
 800f444:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f44c:	f003 0304 	and.w	r3, r3, #4
 800f450:	2b00      	cmp	r3, #0
 800f452:	d02e      	beq.n	800f4b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	699b      	ldr	r3, [r3, #24]
 800f458:	693a      	ldr	r2, [r7, #16]
 800f45a:	4413      	add	r3, r2
 800f45c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f45e:	68ba      	ldr	r2, [r7, #8]
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	429a      	cmp	r2, r3
 800f464:	d90e      	bls.n	800f484 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	68ba      	ldr	r2, [r7, #8]
 800f46a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	68fa      	ldr	r2, [r7, #12]
 800f470:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f472:	4b19      	ldr	r3, [pc, #100]	; (800f4d8 <prvSwitchTimerLists+0xc0>)
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	3304      	adds	r3, #4
 800f47a:	4619      	mov	r1, r3
 800f47c:	4610      	mov	r0, r2
 800f47e:	f7fd ffcc 	bl	800d41a <vListInsert>
 800f482:	e016      	b.n	800f4b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f484:	2300      	movs	r3, #0
 800f486:	9300      	str	r3, [sp, #0]
 800f488:	2300      	movs	r3, #0
 800f48a:	693a      	ldr	r2, [r7, #16]
 800f48c:	2100      	movs	r1, #0
 800f48e:	68f8      	ldr	r0, [r7, #12]
 800f490:	f7ff fd60 	bl	800ef54 <xTimerGenericCommand>
 800f494:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d10a      	bne.n	800f4b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a0:	f383 8811 	msr	BASEPRI, r3
 800f4a4:	f3bf 8f6f 	isb	sy
 800f4a8:	f3bf 8f4f 	dsb	sy
 800f4ac:	603b      	str	r3, [r7, #0]
}
 800f4ae:	bf00      	nop
 800f4b0:	e7fe      	b.n	800f4b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f4b2:	4b09      	ldr	r3, [pc, #36]	; (800f4d8 <prvSwitchTimerLists+0xc0>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1b1      	bne.n	800f420 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f4bc:	4b06      	ldr	r3, [pc, #24]	; (800f4d8 <prvSwitchTimerLists+0xc0>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f4c2:	4b06      	ldr	r3, [pc, #24]	; (800f4dc <prvSwitchTimerLists+0xc4>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4a04      	ldr	r2, [pc, #16]	; (800f4d8 <prvSwitchTimerLists+0xc0>)
 800f4c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f4ca:	4a04      	ldr	r2, [pc, #16]	; (800f4dc <prvSwitchTimerLists+0xc4>)
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	6013      	str	r3, [r2, #0]
}
 800f4d0:	bf00      	nop
 800f4d2:	3718      	adds	r7, #24
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	200016d4 	.word	0x200016d4
 800f4dc:	200016d8 	.word	0x200016d8

0800f4e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f4e6:	f000 f965 	bl	800f7b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f4ea:	4b15      	ldr	r3, [pc, #84]	; (800f540 <prvCheckForValidListAndQueue+0x60>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d120      	bne.n	800f534 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f4f2:	4814      	ldr	r0, [pc, #80]	; (800f544 <prvCheckForValidListAndQueue+0x64>)
 800f4f4:	f7fd ff40 	bl	800d378 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f4f8:	4813      	ldr	r0, [pc, #76]	; (800f548 <prvCheckForValidListAndQueue+0x68>)
 800f4fa:	f7fd ff3d 	bl	800d378 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f4fe:	4b13      	ldr	r3, [pc, #76]	; (800f54c <prvCheckForValidListAndQueue+0x6c>)
 800f500:	4a10      	ldr	r2, [pc, #64]	; (800f544 <prvCheckForValidListAndQueue+0x64>)
 800f502:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f504:	4b12      	ldr	r3, [pc, #72]	; (800f550 <prvCheckForValidListAndQueue+0x70>)
 800f506:	4a10      	ldr	r2, [pc, #64]	; (800f548 <prvCheckForValidListAndQueue+0x68>)
 800f508:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f50a:	2300      	movs	r3, #0
 800f50c:	9300      	str	r3, [sp, #0]
 800f50e:	4b11      	ldr	r3, [pc, #68]	; (800f554 <prvCheckForValidListAndQueue+0x74>)
 800f510:	4a11      	ldr	r2, [pc, #68]	; (800f558 <prvCheckForValidListAndQueue+0x78>)
 800f512:	2110      	movs	r1, #16
 800f514:	200a      	movs	r0, #10
 800f516:	f7fe f84b 	bl	800d5b0 <xQueueGenericCreateStatic>
 800f51a:	4603      	mov	r3, r0
 800f51c:	4a08      	ldr	r2, [pc, #32]	; (800f540 <prvCheckForValidListAndQueue+0x60>)
 800f51e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f520:	4b07      	ldr	r3, [pc, #28]	; (800f540 <prvCheckForValidListAndQueue+0x60>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d005      	beq.n	800f534 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f528:	4b05      	ldr	r3, [pc, #20]	; (800f540 <prvCheckForValidListAndQueue+0x60>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	490b      	ldr	r1, [pc, #44]	; (800f55c <prvCheckForValidListAndQueue+0x7c>)
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fe fcf0 	bl	800df14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f534:	f000 f96e 	bl	800f814 <vPortExitCritical>
}
 800f538:	bf00      	nop
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	200016dc 	.word	0x200016dc
 800f544:	200016ac 	.word	0x200016ac
 800f548:	200016c0 	.word	0x200016c0
 800f54c:	200016d4 	.word	0x200016d4
 800f550:	200016d8 	.word	0x200016d8
 800f554:	20001788 	.word	0x20001788
 800f558:	200016e8 	.word	0x200016e8
 800f55c:	08010c48 	.word	0x08010c48

0800f560 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	3b04      	subs	r3, #4
 800f570:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	3b04      	subs	r3, #4
 800f57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	f023 0201 	bic.w	r2, r3, #1
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	3b04      	subs	r3, #4
 800f58e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f590:	4a0c      	ldr	r2, [pc, #48]	; (800f5c4 <pxPortInitialiseStack+0x64>)
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	3b14      	subs	r3, #20
 800f59a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	3b04      	subs	r3, #4
 800f5a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f06f 0202 	mvn.w	r2, #2
 800f5ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	3b20      	subs	r3, #32
 800f5b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3714      	adds	r7, #20
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr
 800f5c4:	0800f5c9 	.word	0x0800f5c9

0800f5c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b085      	sub	sp, #20
 800f5cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f5d2:	4b12      	ldr	r3, [pc, #72]	; (800f61c <prvTaskExitError+0x54>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5da:	d00a      	beq.n	800f5f2 <prvTaskExitError+0x2a>
	__asm volatile
 800f5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e0:	f383 8811 	msr	BASEPRI, r3
 800f5e4:	f3bf 8f6f 	isb	sy
 800f5e8:	f3bf 8f4f 	dsb	sy
 800f5ec:	60fb      	str	r3, [r7, #12]
}
 800f5ee:	bf00      	nop
 800f5f0:	e7fe      	b.n	800f5f0 <prvTaskExitError+0x28>
	__asm volatile
 800f5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f6:	f383 8811 	msr	BASEPRI, r3
 800f5fa:	f3bf 8f6f 	isb	sy
 800f5fe:	f3bf 8f4f 	dsb	sy
 800f602:	60bb      	str	r3, [r7, #8]
}
 800f604:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f606:	bf00      	nop
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d0fc      	beq.n	800f608 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f60e:	bf00      	nop
 800f610:	bf00      	nop
 800f612:	3714      	adds	r7, #20
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr
 800f61c:	20000098 	.word	0x20000098

0800f620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f620:	4b07      	ldr	r3, [pc, #28]	; (800f640 <pxCurrentTCBConst2>)
 800f622:	6819      	ldr	r1, [r3, #0]
 800f624:	6808      	ldr	r0, [r1, #0]
 800f626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f62a:	f380 8809 	msr	PSP, r0
 800f62e:	f3bf 8f6f 	isb	sy
 800f632:	f04f 0000 	mov.w	r0, #0
 800f636:	f380 8811 	msr	BASEPRI, r0
 800f63a:	4770      	bx	lr
 800f63c:	f3af 8000 	nop.w

0800f640 <pxCurrentTCBConst2>:
 800f640:	200011ac 	.word	0x200011ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f644:	bf00      	nop
 800f646:	bf00      	nop

0800f648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f648:	4808      	ldr	r0, [pc, #32]	; (800f66c <prvPortStartFirstTask+0x24>)
 800f64a:	6800      	ldr	r0, [r0, #0]
 800f64c:	6800      	ldr	r0, [r0, #0]
 800f64e:	f380 8808 	msr	MSP, r0
 800f652:	f04f 0000 	mov.w	r0, #0
 800f656:	f380 8814 	msr	CONTROL, r0
 800f65a:	b662      	cpsie	i
 800f65c:	b661      	cpsie	f
 800f65e:	f3bf 8f4f 	dsb	sy
 800f662:	f3bf 8f6f 	isb	sy
 800f666:	df00      	svc	0
 800f668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f66a:	bf00      	nop
 800f66c:	e000ed08 	.word	0xe000ed08

0800f670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b086      	sub	sp, #24
 800f674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f676:	4b46      	ldr	r3, [pc, #280]	; (800f790 <xPortStartScheduler+0x120>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4a46      	ldr	r2, [pc, #280]	; (800f794 <xPortStartScheduler+0x124>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d10a      	bne.n	800f696 <xPortStartScheduler+0x26>
	__asm volatile
 800f680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f684:	f383 8811 	msr	BASEPRI, r3
 800f688:	f3bf 8f6f 	isb	sy
 800f68c:	f3bf 8f4f 	dsb	sy
 800f690:	613b      	str	r3, [r7, #16]
}
 800f692:	bf00      	nop
 800f694:	e7fe      	b.n	800f694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f696:	4b3e      	ldr	r3, [pc, #248]	; (800f790 <xPortStartScheduler+0x120>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a3f      	ldr	r2, [pc, #252]	; (800f798 <xPortStartScheduler+0x128>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d10a      	bne.n	800f6b6 <xPortStartScheduler+0x46>
	__asm volatile
 800f6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a4:	f383 8811 	msr	BASEPRI, r3
 800f6a8:	f3bf 8f6f 	isb	sy
 800f6ac:	f3bf 8f4f 	dsb	sy
 800f6b0:	60fb      	str	r3, [r7, #12]
}
 800f6b2:	bf00      	nop
 800f6b4:	e7fe      	b.n	800f6b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f6b6:	4b39      	ldr	r3, [pc, #228]	; (800f79c <xPortStartScheduler+0x12c>)
 800f6b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	22ff      	movs	r2, #255	; 0xff
 800f6c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f6d0:	78fb      	ldrb	r3, [r7, #3]
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f6d8:	b2da      	uxtb	r2, r3
 800f6da:	4b31      	ldr	r3, [pc, #196]	; (800f7a0 <xPortStartScheduler+0x130>)
 800f6dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f6de:	4b31      	ldr	r3, [pc, #196]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f6e0:	2207      	movs	r2, #7
 800f6e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6e4:	e009      	b.n	800f6fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f6e6:	4b2f      	ldr	r3, [pc, #188]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	3b01      	subs	r3, #1
 800f6ec:	4a2d      	ldr	r2, [pc, #180]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f6ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f6f0:	78fb      	ldrb	r3, [r7, #3]
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	005b      	lsls	r3, r3, #1
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6fa:	78fb      	ldrb	r3, [r7, #3]
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f702:	2b80      	cmp	r3, #128	; 0x80
 800f704:	d0ef      	beq.n	800f6e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f706:	4b27      	ldr	r3, [pc, #156]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f1c3 0307 	rsb	r3, r3, #7
 800f70e:	2b04      	cmp	r3, #4
 800f710:	d00a      	beq.n	800f728 <xPortStartScheduler+0xb8>
	__asm volatile
 800f712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	60bb      	str	r3, [r7, #8]
}
 800f724:	bf00      	nop
 800f726:	e7fe      	b.n	800f726 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f728:	4b1e      	ldr	r3, [pc, #120]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	021b      	lsls	r3, r3, #8
 800f72e:	4a1d      	ldr	r2, [pc, #116]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f730:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f732:	4b1c      	ldr	r3, [pc, #112]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f73a:	4a1a      	ldr	r2, [pc, #104]	; (800f7a4 <xPortStartScheduler+0x134>)
 800f73c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	b2da      	uxtb	r2, r3
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f746:	4b18      	ldr	r3, [pc, #96]	; (800f7a8 <xPortStartScheduler+0x138>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4a17      	ldr	r2, [pc, #92]	; (800f7a8 <xPortStartScheduler+0x138>)
 800f74c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f752:	4b15      	ldr	r3, [pc, #84]	; (800f7a8 <xPortStartScheduler+0x138>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4a14      	ldr	r2, [pc, #80]	; (800f7a8 <xPortStartScheduler+0x138>)
 800f758:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f75c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f75e:	f000 f8dd 	bl	800f91c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f762:	4b12      	ldr	r3, [pc, #72]	; (800f7ac <xPortStartScheduler+0x13c>)
 800f764:	2200      	movs	r2, #0
 800f766:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f768:	f000 f8fc 	bl	800f964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f76c:	4b10      	ldr	r3, [pc, #64]	; (800f7b0 <xPortStartScheduler+0x140>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a0f      	ldr	r2, [pc, #60]	; (800f7b0 <xPortStartScheduler+0x140>)
 800f772:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f776:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f778:	f7ff ff66 	bl	800f648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f77c:	f7ff f83c 	bl	800e7f8 <vTaskSwitchContext>
	prvTaskExitError();
 800f780:	f7ff ff22 	bl	800f5c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	3718      	adds	r7, #24
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	e000ed00 	.word	0xe000ed00
 800f794:	410fc271 	.word	0x410fc271
 800f798:	410fc270 	.word	0x410fc270
 800f79c:	e000e400 	.word	0xe000e400
 800f7a0:	200017d8 	.word	0x200017d8
 800f7a4:	200017dc 	.word	0x200017dc
 800f7a8:	e000ed20 	.word	0xe000ed20
 800f7ac:	20000098 	.word	0x20000098
 800f7b0:	e000ef34 	.word	0xe000ef34

0800f7b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
	__asm volatile
 800f7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7be:	f383 8811 	msr	BASEPRI, r3
 800f7c2:	f3bf 8f6f 	isb	sy
 800f7c6:	f3bf 8f4f 	dsb	sy
 800f7ca:	607b      	str	r3, [r7, #4]
}
 800f7cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f7ce:	4b0f      	ldr	r3, [pc, #60]	; (800f80c <vPortEnterCritical+0x58>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	4a0d      	ldr	r2, [pc, #52]	; (800f80c <vPortEnterCritical+0x58>)
 800f7d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f7d8:	4b0c      	ldr	r3, [pc, #48]	; (800f80c <vPortEnterCritical+0x58>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d10f      	bne.n	800f800 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f7e0:	4b0b      	ldr	r3, [pc, #44]	; (800f810 <vPortEnterCritical+0x5c>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d00a      	beq.n	800f800 <vPortEnterCritical+0x4c>
	__asm volatile
 800f7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ee:	f383 8811 	msr	BASEPRI, r3
 800f7f2:	f3bf 8f6f 	isb	sy
 800f7f6:	f3bf 8f4f 	dsb	sy
 800f7fa:	603b      	str	r3, [r7, #0]
}
 800f7fc:	bf00      	nop
 800f7fe:	e7fe      	b.n	800f7fe <vPortEnterCritical+0x4a>
	}
}
 800f800:	bf00      	nop
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr
 800f80c:	20000098 	.word	0x20000098
 800f810:	e000ed04 	.word	0xe000ed04

0800f814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f81a:	4b12      	ldr	r3, [pc, #72]	; (800f864 <vPortExitCritical+0x50>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d10a      	bne.n	800f838 <vPortExitCritical+0x24>
	__asm volatile
 800f822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f826:	f383 8811 	msr	BASEPRI, r3
 800f82a:	f3bf 8f6f 	isb	sy
 800f82e:	f3bf 8f4f 	dsb	sy
 800f832:	607b      	str	r3, [r7, #4]
}
 800f834:	bf00      	nop
 800f836:	e7fe      	b.n	800f836 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f838:	4b0a      	ldr	r3, [pc, #40]	; (800f864 <vPortExitCritical+0x50>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	3b01      	subs	r3, #1
 800f83e:	4a09      	ldr	r2, [pc, #36]	; (800f864 <vPortExitCritical+0x50>)
 800f840:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f842:	4b08      	ldr	r3, [pc, #32]	; (800f864 <vPortExitCritical+0x50>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d105      	bne.n	800f856 <vPortExitCritical+0x42>
 800f84a:	2300      	movs	r3, #0
 800f84c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	f383 8811 	msr	BASEPRI, r3
}
 800f854:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f856:	bf00      	nop
 800f858:	370c      	adds	r7, #12
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	20000098 	.word	0x20000098
	...

0800f870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f870:	f3ef 8009 	mrs	r0, PSP
 800f874:	f3bf 8f6f 	isb	sy
 800f878:	4b15      	ldr	r3, [pc, #84]	; (800f8d0 <pxCurrentTCBConst>)
 800f87a:	681a      	ldr	r2, [r3, #0]
 800f87c:	f01e 0f10 	tst.w	lr, #16
 800f880:	bf08      	it	eq
 800f882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f88a:	6010      	str	r0, [r2, #0]
 800f88c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f890:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f894:	f380 8811 	msr	BASEPRI, r0
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	f3bf 8f6f 	isb	sy
 800f8a0:	f7fe ffaa 	bl	800e7f8 <vTaskSwitchContext>
 800f8a4:	f04f 0000 	mov.w	r0, #0
 800f8a8:	f380 8811 	msr	BASEPRI, r0
 800f8ac:	bc09      	pop	{r0, r3}
 800f8ae:	6819      	ldr	r1, [r3, #0]
 800f8b0:	6808      	ldr	r0, [r1, #0]
 800f8b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b6:	f01e 0f10 	tst.w	lr, #16
 800f8ba:	bf08      	it	eq
 800f8bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f8c0:	f380 8809 	msr	PSP, r0
 800f8c4:	f3bf 8f6f 	isb	sy
 800f8c8:	4770      	bx	lr
 800f8ca:	bf00      	nop
 800f8cc:	f3af 8000 	nop.w

0800f8d0 <pxCurrentTCBConst>:
 800f8d0:	200011ac 	.word	0x200011ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f8d4:	bf00      	nop
 800f8d6:	bf00      	nop

0800f8d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e2:	f383 8811 	msr	BASEPRI, r3
 800f8e6:	f3bf 8f6f 	isb	sy
 800f8ea:	f3bf 8f4f 	dsb	sy
 800f8ee:	607b      	str	r3, [r7, #4]
}
 800f8f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f8f2:	f7fe fec7 	bl	800e684 <xTaskIncrementTick>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d003      	beq.n	800f904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f8fc:	4b06      	ldr	r3, [pc, #24]	; (800f918 <xPortSysTickHandler+0x40>)
 800f8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f902:	601a      	str	r2, [r3, #0]
 800f904:	2300      	movs	r3, #0
 800f906:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	f383 8811 	msr	BASEPRI, r3
}
 800f90e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f910:	bf00      	nop
 800f912:	3708      	adds	r7, #8
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}
 800f918:	e000ed04 	.word	0xe000ed04

0800f91c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f91c:	b480      	push	{r7}
 800f91e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f920:	4b0b      	ldr	r3, [pc, #44]	; (800f950 <vPortSetupTimerInterrupt+0x34>)
 800f922:	2200      	movs	r2, #0
 800f924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f926:	4b0b      	ldr	r3, [pc, #44]	; (800f954 <vPortSetupTimerInterrupt+0x38>)
 800f928:	2200      	movs	r2, #0
 800f92a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f92c:	4b0a      	ldr	r3, [pc, #40]	; (800f958 <vPortSetupTimerInterrupt+0x3c>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a0a      	ldr	r2, [pc, #40]	; (800f95c <vPortSetupTimerInterrupt+0x40>)
 800f932:	fba2 2303 	umull	r2, r3, r2, r3
 800f936:	099b      	lsrs	r3, r3, #6
 800f938:	4a09      	ldr	r2, [pc, #36]	; (800f960 <vPortSetupTimerInterrupt+0x44>)
 800f93a:	3b01      	subs	r3, #1
 800f93c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f93e:	4b04      	ldr	r3, [pc, #16]	; (800f950 <vPortSetupTimerInterrupt+0x34>)
 800f940:	2207      	movs	r2, #7
 800f942:	601a      	str	r2, [r3, #0]
}
 800f944:	bf00      	nop
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop
 800f950:	e000e010 	.word	0xe000e010
 800f954:	e000e018 	.word	0xe000e018
 800f958:	20000000 	.word	0x20000000
 800f95c:	10624dd3 	.word	0x10624dd3
 800f960:	e000e014 	.word	0xe000e014

0800f964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f974 <vPortEnableVFP+0x10>
 800f968:	6801      	ldr	r1, [r0, #0]
 800f96a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f96e:	6001      	str	r1, [r0, #0]
 800f970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f972:	bf00      	nop
 800f974:	e000ed88 	.word	0xe000ed88

0800f978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f978:	b480      	push	{r7}
 800f97a:	b085      	sub	sp, #20
 800f97c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f97e:	f3ef 8305 	mrs	r3, IPSR
 800f982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2b0f      	cmp	r3, #15
 800f988:	d914      	bls.n	800f9b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f98a:	4a17      	ldr	r2, [pc, #92]	; (800f9e8 <vPortValidateInterruptPriority+0x70>)
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	4413      	add	r3, r2
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f994:	4b15      	ldr	r3, [pc, #84]	; (800f9ec <vPortValidateInterruptPriority+0x74>)
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	7afa      	ldrb	r2, [r7, #11]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d20a      	bcs.n	800f9b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a2:	f383 8811 	msr	BASEPRI, r3
 800f9a6:	f3bf 8f6f 	isb	sy
 800f9aa:	f3bf 8f4f 	dsb	sy
 800f9ae:	607b      	str	r3, [r7, #4]
}
 800f9b0:	bf00      	nop
 800f9b2:	e7fe      	b.n	800f9b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f9b4:	4b0e      	ldr	r3, [pc, #56]	; (800f9f0 <vPortValidateInterruptPriority+0x78>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f9bc:	4b0d      	ldr	r3, [pc, #52]	; (800f9f4 <vPortValidateInterruptPriority+0x7c>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d90a      	bls.n	800f9da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c8:	f383 8811 	msr	BASEPRI, r3
 800f9cc:	f3bf 8f6f 	isb	sy
 800f9d0:	f3bf 8f4f 	dsb	sy
 800f9d4:	603b      	str	r3, [r7, #0]
}
 800f9d6:	bf00      	nop
 800f9d8:	e7fe      	b.n	800f9d8 <vPortValidateInterruptPriority+0x60>
	}
 800f9da:	bf00      	nop
 800f9dc:	3714      	adds	r7, #20
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop
 800f9e8:	e000e3f0 	.word	0xe000e3f0
 800f9ec:	200017d8 	.word	0x200017d8
 800f9f0:	e000ed0c 	.word	0xe000ed0c
 800f9f4:	200017dc 	.word	0x200017dc

0800f9f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b08a      	sub	sp, #40	; 0x28
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fa00:	2300      	movs	r3, #0
 800fa02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fa04:	f7fe fd82 	bl	800e50c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fa08:	4b5b      	ldr	r3, [pc, #364]	; (800fb78 <pvPortMalloc+0x180>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d101      	bne.n	800fa14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa10:	f000 f920 	bl	800fc54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa14:	4b59      	ldr	r3, [pc, #356]	; (800fb7c <pvPortMalloc+0x184>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	4013      	ands	r3, r2
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f040 8093 	bne.w	800fb48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d01d      	beq.n	800fa64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fa28:	2208      	movs	r2, #8
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f003 0307 	and.w	r3, r3, #7
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d014      	beq.n	800fa64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f023 0307 	bic.w	r3, r3, #7
 800fa40:	3308      	adds	r3, #8
 800fa42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f003 0307 	and.w	r3, r3, #7
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d00a      	beq.n	800fa64 <pvPortMalloc+0x6c>
	__asm volatile
 800fa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa52:	f383 8811 	msr	BASEPRI, r3
 800fa56:	f3bf 8f6f 	isb	sy
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	617b      	str	r3, [r7, #20]
}
 800fa60:	bf00      	nop
 800fa62:	e7fe      	b.n	800fa62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d06e      	beq.n	800fb48 <pvPortMalloc+0x150>
 800fa6a:	4b45      	ldr	r3, [pc, #276]	; (800fb80 <pvPortMalloc+0x188>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d869      	bhi.n	800fb48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fa74:	4b43      	ldr	r3, [pc, #268]	; (800fb84 <pvPortMalloc+0x18c>)
 800fa76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fa78:	4b42      	ldr	r3, [pc, #264]	; (800fb84 <pvPortMalloc+0x18c>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa7e:	e004      	b.n	800fa8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	687a      	ldr	r2, [r7, #4]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d903      	bls.n	800fa9c <pvPortMalloc+0xa4>
 800fa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d1f1      	bne.n	800fa80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fa9c:	4b36      	ldr	r3, [pc, #216]	; (800fb78 <pvPortMalloc+0x180>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d050      	beq.n	800fb48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800faa6:	6a3b      	ldr	r3, [r7, #32]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	2208      	movs	r2, #8
 800faac:	4413      	add	r3, r2
 800faae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	6a3b      	ldr	r3, [r7, #32]
 800fab6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faba:	685a      	ldr	r2, [r3, #4]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	1ad2      	subs	r2, r2, r3
 800fac0:	2308      	movs	r3, #8
 800fac2:	005b      	lsls	r3, r3, #1
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d91f      	bls.n	800fb08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4413      	add	r3, r2
 800face:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fad0:	69bb      	ldr	r3, [r7, #24]
 800fad2:	f003 0307 	and.w	r3, r3, #7
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d00a      	beq.n	800faf0 <pvPortMalloc+0xf8>
	__asm volatile
 800fada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fade:	f383 8811 	msr	BASEPRI, r3
 800fae2:	f3bf 8f6f 	isb	sy
 800fae6:	f3bf 8f4f 	dsb	sy
 800faea:	613b      	str	r3, [r7, #16]
}
 800faec:	bf00      	nop
 800faee:	e7fe      	b.n	800faee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800faf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf2:	685a      	ldr	r2, [r3, #4]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	1ad2      	subs	r2, r2, r3
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb02:	69b8      	ldr	r0, [r7, #24]
 800fb04:	f000 f908 	bl	800fd18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb08:	4b1d      	ldr	r3, [pc, #116]	; (800fb80 <pvPortMalloc+0x188>)
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	4a1b      	ldr	r2, [pc, #108]	; (800fb80 <pvPortMalloc+0x188>)
 800fb14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb16:	4b1a      	ldr	r3, [pc, #104]	; (800fb80 <pvPortMalloc+0x188>)
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	4b1b      	ldr	r3, [pc, #108]	; (800fb88 <pvPortMalloc+0x190>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d203      	bcs.n	800fb2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb22:	4b17      	ldr	r3, [pc, #92]	; (800fb80 <pvPortMalloc+0x188>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4a18      	ldr	r2, [pc, #96]	; (800fb88 <pvPortMalloc+0x190>)
 800fb28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	4b13      	ldr	r3, [pc, #76]	; (800fb7c <pvPortMalloc+0x184>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	431a      	orrs	r2, r3
 800fb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fb3e:	4b13      	ldr	r3, [pc, #76]	; (800fb8c <pvPortMalloc+0x194>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	3301      	adds	r3, #1
 800fb44:	4a11      	ldr	r2, [pc, #68]	; (800fb8c <pvPortMalloc+0x194>)
 800fb46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fb48:	f7fe fcee 	bl	800e528 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	f003 0307 	and.w	r3, r3, #7
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d00a      	beq.n	800fb6c <pvPortMalloc+0x174>
	__asm volatile
 800fb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5a:	f383 8811 	msr	BASEPRI, r3
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f3bf 8f4f 	dsb	sy
 800fb66:	60fb      	str	r3, [r7, #12]
}
 800fb68:	bf00      	nop
 800fb6a:	e7fe      	b.n	800fb6a <pvPortMalloc+0x172>
	return pvReturn;
 800fb6c:	69fb      	ldr	r3, [r7, #28]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3728      	adds	r7, #40	; 0x28
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	200053e8 	.word	0x200053e8
 800fb7c:	200053fc 	.word	0x200053fc
 800fb80:	200053ec 	.word	0x200053ec
 800fb84:	200053e0 	.word	0x200053e0
 800fb88:	200053f0 	.word	0x200053f0
 800fb8c:	200053f4 	.word	0x200053f4

0800fb90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d04d      	beq.n	800fc3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fba2:	2308      	movs	r3, #8
 800fba4:	425b      	negs	r3, r3
 800fba6:	697a      	ldr	r2, [r7, #20]
 800fba8:	4413      	add	r3, r2
 800fbaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	685a      	ldr	r2, [r3, #4]
 800fbb4:	4b24      	ldr	r3, [pc, #144]	; (800fc48 <vPortFree+0xb8>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	4013      	ands	r3, r2
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d10a      	bne.n	800fbd4 <vPortFree+0x44>
	__asm volatile
 800fbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc2:	f383 8811 	msr	BASEPRI, r3
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	60fb      	str	r3, [r7, #12]
}
 800fbd0:	bf00      	nop
 800fbd2:	e7fe      	b.n	800fbd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d00a      	beq.n	800fbf2 <vPortFree+0x62>
	__asm volatile
 800fbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe0:	f383 8811 	msr	BASEPRI, r3
 800fbe4:	f3bf 8f6f 	isb	sy
 800fbe8:	f3bf 8f4f 	dsb	sy
 800fbec:	60bb      	str	r3, [r7, #8]
}
 800fbee:	bf00      	nop
 800fbf0:	e7fe      	b.n	800fbf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	685a      	ldr	r2, [r3, #4]
 800fbf6:	4b14      	ldr	r3, [pc, #80]	; (800fc48 <vPortFree+0xb8>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	4013      	ands	r3, r2
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d01e      	beq.n	800fc3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d11a      	bne.n	800fc3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	685a      	ldr	r2, [r3, #4]
 800fc0c:	4b0e      	ldr	r3, [pc, #56]	; (800fc48 <vPortFree+0xb8>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	43db      	mvns	r3, r3
 800fc12:	401a      	ands	r2, r3
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc18:	f7fe fc78 	bl	800e50c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	685a      	ldr	r2, [r3, #4]
 800fc20:	4b0a      	ldr	r3, [pc, #40]	; (800fc4c <vPortFree+0xbc>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4413      	add	r3, r2
 800fc26:	4a09      	ldr	r2, [pc, #36]	; (800fc4c <vPortFree+0xbc>)
 800fc28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc2a:	6938      	ldr	r0, [r7, #16]
 800fc2c:	f000 f874 	bl	800fd18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fc30:	4b07      	ldr	r3, [pc, #28]	; (800fc50 <vPortFree+0xc0>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	3301      	adds	r3, #1
 800fc36:	4a06      	ldr	r2, [pc, #24]	; (800fc50 <vPortFree+0xc0>)
 800fc38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fc3a:	f7fe fc75 	bl	800e528 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fc3e:	bf00      	nop
 800fc40:	3718      	adds	r7, #24
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	200053fc 	.word	0x200053fc
 800fc4c:	200053ec 	.word	0x200053ec
 800fc50:	200053f8 	.word	0x200053f8

0800fc54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fc54:	b480      	push	{r7}
 800fc56:	b085      	sub	sp, #20
 800fc58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fc5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fc5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fc60:	4b27      	ldr	r3, [pc, #156]	; (800fd00 <prvHeapInit+0xac>)
 800fc62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f003 0307 	and.w	r3, r3, #7
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d00c      	beq.n	800fc88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	3307      	adds	r3, #7
 800fc72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f023 0307 	bic.w	r3, r3, #7
 800fc7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc7c:	68ba      	ldr	r2, [r7, #8]
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	1ad3      	subs	r3, r2, r3
 800fc82:	4a1f      	ldr	r2, [pc, #124]	; (800fd00 <prvHeapInit+0xac>)
 800fc84:	4413      	add	r3, r2
 800fc86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fc8c:	4a1d      	ldr	r2, [pc, #116]	; (800fd04 <prvHeapInit+0xb0>)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fc92:	4b1c      	ldr	r3, [pc, #112]	; (800fd04 <prvHeapInit+0xb0>)
 800fc94:	2200      	movs	r2, #0
 800fc96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	68ba      	ldr	r2, [r7, #8]
 800fc9c:	4413      	add	r3, r2
 800fc9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fca0:	2208      	movs	r2, #8
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	1a9b      	subs	r3, r3, r2
 800fca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f023 0307 	bic.w	r3, r3, #7
 800fcae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	4a15      	ldr	r2, [pc, #84]	; (800fd08 <prvHeapInit+0xb4>)
 800fcb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fcb6:	4b14      	ldr	r3, [pc, #80]	; (800fd08 <prvHeapInit+0xb4>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fcbe:	4b12      	ldr	r3, [pc, #72]	; (800fd08 <prvHeapInit+0xb4>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	1ad2      	subs	r2, r2, r3
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fcd4:	4b0c      	ldr	r3, [pc, #48]	; (800fd08 <prvHeapInit+0xb4>)
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	4a0a      	ldr	r2, [pc, #40]	; (800fd0c <prvHeapInit+0xb8>)
 800fce2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	685b      	ldr	r3, [r3, #4]
 800fce8:	4a09      	ldr	r2, [pc, #36]	; (800fd10 <prvHeapInit+0xbc>)
 800fcea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fcec:	4b09      	ldr	r3, [pc, #36]	; (800fd14 <prvHeapInit+0xc0>)
 800fcee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fcf2:	601a      	str	r2, [r3, #0]
}
 800fcf4:	bf00      	nop
 800fcf6:	3714      	adds	r7, #20
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfe:	4770      	bx	lr
 800fd00:	200017e0 	.word	0x200017e0
 800fd04:	200053e0 	.word	0x200053e0
 800fd08:	200053e8 	.word	0x200053e8
 800fd0c:	200053f0 	.word	0x200053f0
 800fd10:	200053ec 	.word	0x200053ec
 800fd14:	200053fc 	.word	0x200053fc

0800fd18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd20:	4b28      	ldr	r3, [pc, #160]	; (800fdc4 <prvInsertBlockIntoFreeList+0xac>)
 800fd22:	60fb      	str	r3, [r7, #12]
 800fd24:	e002      	b.n	800fd2c <prvInsertBlockIntoFreeList+0x14>
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	60fb      	str	r3, [r7, #12]
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d8f7      	bhi.n	800fd26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	68ba      	ldr	r2, [r7, #8]
 800fd40:	4413      	add	r3, r2
 800fd42:	687a      	ldr	r2, [r7, #4]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d108      	bne.n	800fd5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	441a      	add	r2, r3
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	68ba      	ldr	r2, [r7, #8]
 800fd64:	441a      	add	r2, r3
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d118      	bne.n	800fda0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681a      	ldr	r2, [r3, #0]
 800fd72:	4b15      	ldr	r3, [pc, #84]	; (800fdc8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d00d      	beq.n	800fd96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	685a      	ldr	r2, [r3, #4]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	685b      	ldr	r3, [r3, #4]
 800fd84:	441a      	add	r2, r3
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	601a      	str	r2, [r3, #0]
 800fd94:	e008      	b.n	800fda8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd96:	4b0c      	ldr	r3, [pc, #48]	; (800fdc8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	601a      	str	r2, [r3, #0]
 800fd9e:	e003      	b.n	800fda8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681a      	ldr	r2, [r3, #0]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fda8:	68fa      	ldr	r2, [r7, #12]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d002      	beq.n	800fdb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fdb6:	bf00      	nop
 800fdb8:	3714      	adds	r7, #20
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop
 800fdc4:	200053e0 	.word	0x200053e0
 800fdc8:	200053e8 	.word	0x200053e8

0800fdcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	4912      	ldr	r1, [pc, #72]	; (800fe1c <MX_USB_DEVICE_Init+0x50>)
 800fdd4:	4812      	ldr	r0, [pc, #72]	; (800fe20 <MX_USB_DEVICE_Init+0x54>)
 800fdd6:	f7fb fe19 	bl	800ba0c <USBD_Init>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d001      	beq.n	800fde4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fde0:	f7f1 fa68 	bl	80012b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fde4:	490f      	ldr	r1, [pc, #60]	; (800fe24 <MX_USB_DEVICE_Init+0x58>)
 800fde6:	480e      	ldr	r0, [pc, #56]	; (800fe20 <MX_USB_DEVICE_Init+0x54>)
 800fde8:	f7fb fe40 	bl	800ba6c <USBD_RegisterClass>
 800fdec:	4603      	mov	r3, r0
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d001      	beq.n	800fdf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fdf2:	f7f1 fa5f 	bl	80012b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fdf6:	490c      	ldr	r1, [pc, #48]	; (800fe28 <MX_USB_DEVICE_Init+0x5c>)
 800fdf8:	4809      	ldr	r0, [pc, #36]	; (800fe20 <MX_USB_DEVICE_Init+0x54>)
 800fdfa:	f7fb fd77 	bl	800b8ec <USBD_CDC_RegisterInterface>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d001      	beq.n	800fe08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fe04:	f7f1 fa56 	bl	80012b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fe08:	4805      	ldr	r0, [pc, #20]	; (800fe20 <MX_USB_DEVICE_Init+0x54>)
 800fe0a:	f7fb fe65 	bl	800bad8 <USBD_Start>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d001      	beq.n	800fe18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fe14:	f7f1 fa4e 	bl	80012b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fe18:	bf00      	nop
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	200000b0 	.word	0x200000b0
 800fe20:	20005400 	.word	0x20005400
 800fe24:	20000018 	.word	0x20000018
 800fe28:	2000009c 	.word	0x2000009c

0800fe2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fe30:	2200      	movs	r2, #0
 800fe32:	4905      	ldr	r1, [pc, #20]	; (800fe48 <CDC_Init_FS+0x1c>)
 800fe34:	4805      	ldr	r0, [pc, #20]	; (800fe4c <CDC_Init_FS+0x20>)
 800fe36:	f7fb fd73 	bl	800b920 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fe3a:	4905      	ldr	r1, [pc, #20]	; (800fe50 <CDC_Init_FS+0x24>)
 800fe3c:	4803      	ldr	r0, [pc, #12]	; (800fe4c <CDC_Init_FS+0x20>)
 800fe3e:	f7fb fd91 	bl	800b964 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fe42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	bd80      	pop	{r7, pc}
 800fe48:	20005edc 	.word	0x20005edc
 800fe4c:	20005400 	.word	0x20005400
 800fe50:	200056dc 	.word	0x200056dc

0800fe54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fe54:	b480      	push	{r7}
 800fe56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fe58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b083      	sub	sp, #12
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	6039      	str	r1, [r7, #0]
 800fe6e:	71fb      	strb	r3, [r7, #7]
 800fe70:	4613      	mov	r3, r2
 800fe72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fe74:	79fb      	ldrb	r3, [r7, #7]
 800fe76:	2b23      	cmp	r3, #35	; 0x23
 800fe78:	f200 808c 	bhi.w	800ff94 <CDC_Control_FS+0x130>
 800fe7c:	a201      	add	r2, pc, #4	; (adr r2, 800fe84 <CDC_Control_FS+0x20>)
 800fe7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe82:	bf00      	nop
 800fe84:	0800ff95 	.word	0x0800ff95
 800fe88:	0800ff95 	.word	0x0800ff95
 800fe8c:	0800ff95 	.word	0x0800ff95
 800fe90:	0800ff95 	.word	0x0800ff95
 800fe94:	0800ff95 	.word	0x0800ff95
 800fe98:	0800ff95 	.word	0x0800ff95
 800fe9c:	0800ff95 	.word	0x0800ff95
 800fea0:	0800ff95 	.word	0x0800ff95
 800fea4:	0800ff95 	.word	0x0800ff95
 800fea8:	0800ff95 	.word	0x0800ff95
 800feac:	0800ff95 	.word	0x0800ff95
 800feb0:	0800ff95 	.word	0x0800ff95
 800feb4:	0800ff95 	.word	0x0800ff95
 800feb8:	0800ff95 	.word	0x0800ff95
 800febc:	0800ff95 	.word	0x0800ff95
 800fec0:	0800ff95 	.word	0x0800ff95
 800fec4:	0800ff95 	.word	0x0800ff95
 800fec8:	0800ff95 	.word	0x0800ff95
 800fecc:	0800ff95 	.word	0x0800ff95
 800fed0:	0800ff95 	.word	0x0800ff95
 800fed4:	0800ff95 	.word	0x0800ff95
 800fed8:	0800ff95 	.word	0x0800ff95
 800fedc:	0800ff95 	.word	0x0800ff95
 800fee0:	0800ff95 	.word	0x0800ff95
 800fee4:	0800ff95 	.word	0x0800ff95
 800fee8:	0800ff95 	.word	0x0800ff95
 800feec:	0800ff95 	.word	0x0800ff95
 800fef0:	0800ff95 	.word	0x0800ff95
 800fef4:	0800ff95 	.word	0x0800ff95
 800fef8:	0800ff95 	.word	0x0800ff95
 800fefc:	0800ff95 	.word	0x0800ff95
 800ff00:	0800ff95 	.word	0x0800ff95
 800ff04:	0800ff15 	.word	0x0800ff15
 800ff08:	0800ff4f 	.word	0x0800ff4f
 800ff0c:	0800ff95 	.word	0x0800ff95
 800ff10:	0800ff95 	.word	0x0800ff95
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	usbVcpParameters[0] = pbuf[0];
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	781a      	ldrb	r2, [r3, #0]
 800ff18:	4b22      	ldr	r3, [pc, #136]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff1a:	701a      	strb	r2, [r3, #0]
    	usbVcpParameters[1] = pbuf[1];
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	785a      	ldrb	r2, [r3, #1]
 800ff20:	4b20      	ldr	r3, [pc, #128]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff22:	705a      	strb	r2, [r3, #1]
    	usbVcpParameters[2] = pbuf[2];
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	789a      	ldrb	r2, [r3, #2]
 800ff28:	4b1e      	ldr	r3, [pc, #120]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff2a:	709a      	strb	r2, [r3, #2]
    	usbVcpParameters[3] = pbuf[3];
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	78da      	ldrb	r2, [r3, #3]
 800ff30:	4b1c      	ldr	r3, [pc, #112]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff32:	70da      	strb	r2, [r3, #3]
    	usbVcpParameters[4] = pbuf[4];
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	791a      	ldrb	r2, [r3, #4]
 800ff38:	4b1a      	ldr	r3, [pc, #104]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff3a:	711a      	strb	r2, [r3, #4]
    	usbVcpParameters[5] = pbuf[5];
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	795a      	ldrb	r2, [r3, #5]
 800ff40:	4b18      	ldr	r3, [pc, #96]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff42:	715a      	strb	r2, [r3, #5]
    	usbVcpParameters[6] = pbuf[6];
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	799a      	ldrb	r2, [r3, #6]
 800ff48:	4b16      	ldr	r3, [pc, #88]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff4a:	719a      	strb	r2, [r3, #6]

    break;
 800ff4c:	e023      	b.n	800ff96 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = usbVcpParameters[0];
 800ff4e:	4b15      	ldr	r3, [pc, #84]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff50:	781a      	ldrb	r2, [r3, #0]
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = usbVcpParameters[1];
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	3301      	adds	r3, #1
 800ff5a:	4a12      	ldr	r2, [pc, #72]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff5c:	7852      	ldrb	r2, [r2, #1]
 800ff5e:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = usbVcpParameters[2];
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	3302      	adds	r3, #2
 800ff64:	4a0f      	ldr	r2, [pc, #60]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff66:	7892      	ldrb	r2, [r2, #2]
 800ff68:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = usbVcpParameters[3];
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	3303      	adds	r3, #3
 800ff6e:	4a0d      	ldr	r2, [pc, #52]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff70:	78d2      	ldrb	r2, [r2, #3]
 800ff72:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = usbVcpParameters[4];
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	3304      	adds	r3, #4
 800ff78:	4a0a      	ldr	r2, [pc, #40]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff7a:	7912      	ldrb	r2, [r2, #4]
 800ff7c:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = usbVcpParameters[5];
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	3305      	adds	r3, #5
 800ff82:	4a08      	ldr	r2, [pc, #32]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff84:	7952      	ldrb	r2, [r2, #5]
 800ff86:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = usbVcpParameters[6];
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	3306      	adds	r3, #6
 800ff8c:	4a05      	ldr	r2, [pc, #20]	; (800ffa4 <CDC_Control_FS+0x140>)
 800ff8e:	7992      	ldrb	r2, [r2, #6]
 800ff90:	701a      	strb	r2, [r3, #0]

    break;
 800ff92:	e000      	b.n	800ff96 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ff94:	bf00      	nop
  }

  return (USBD_OK);
 800ff96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	370c      	adds	r7, #12
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa2:	4770      	bx	lr
 800ffa4:	20000700 	.word	0x20000700

0800ffa8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ffb2:	6879      	ldr	r1, [r7, #4]
 800ffb4:	4808      	ldr	r0, [pc, #32]	; (800ffd8 <CDC_Receive_FS+0x30>)
 800ffb6:	f7fb fcd5 	bl	800b964 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ffba:	4807      	ldr	r0, [pc, #28]	; (800ffd8 <CDC_Receive_FS+0x30>)
 800ffbc:	f7fb fcf0 	bl	800b9a0 <USBD_CDC_ReceivePacket>

  PDM_USB_Process(Buf, *Len);
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f7f1 f9cf 	bl	800136c <PDM_USB_Process>

  return (USBD_OK);
 800ffce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3708      	adds	r7, #8
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	20005400 	.word	0x20005400

0800ffdc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b087      	sub	sp, #28
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ffea:	2300      	movs	r3, #0
 800ffec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ffee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	371c      	adds	r7, #28
 800fff6:	46bd      	mov	sp, r7
 800fff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffc:	4770      	bx	lr
	...

08010000 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010000:	b480      	push	{r7}
 8010002:	b083      	sub	sp, #12
 8010004:	af00      	add	r7, sp, #0
 8010006:	4603      	mov	r3, r0
 8010008:	6039      	str	r1, [r7, #0]
 801000a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	2212      	movs	r2, #18
 8010010:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010012:	4b03      	ldr	r3, [pc, #12]	; (8010020 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010014:	4618      	mov	r0, r3
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr
 8010020:	200000cc 	.word	0x200000cc

08010024 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	4603      	mov	r3, r0
 801002c:	6039      	str	r1, [r7, #0]
 801002e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	2204      	movs	r2, #4
 8010034:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010036:	4b03      	ldr	r3, [pc, #12]	; (8010044 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010038:	4618      	mov	r0, r3
 801003a:	370c      	adds	r7, #12
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr
 8010044:	200000e0 	.word	0x200000e0

08010048 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	4603      	mov	r3, r0
 8010050:	6039      	str	r1, [r7, #0]
 8010052:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010054:	79fb      	ldrb	r3, [r7, #7]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d105      	bne.n	8010066 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801005a:	683a      	ldr	r2, [r7, #0]
 801005c:	4907      	ldr	r1, [pc, #28]	; (801007c <USBD_FS_ProductStrDescriptor+0x34>)
 801005e:	4808      	ldr	r0, [pc, #32]	; (8010080 <USBD_FS_ProductStrDescriptor+0x38>)
 8010060:	f7fc fee6 	bl	800ce30 <USBD_GetString>
 8010064:	e004      	b.n	8010070 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010066:	683a      	ldr	r2, [r7, #0]
 8010068:	4904      	ldr	r1, [pc, #16]	; (801007c <USBD_FS_ProductStrDescriptor+0x34>)
 801006a:	4805      	ldr	r0, [pc, #20]	; (8010080 <USBD_FS_ProductStrDescriptor+0x38>)
 801006c:	f7fc fee0 	bl	800ce30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010070:	4b02      	ldr	r3, [pc, #8]	; (801007c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010072:	4618      	mov	r0, r3
 8010074:	3708      	adds	r7, #8
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	200066dc 	.word	0x200066dc
 8010080:	08010c50 	.word	0x08010c50

08010084 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
 801008a:	4603      	mov	r3, r0
 801008c:	6039      	str	r1, [r7, #0]
 801008e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010090:	683a      	ldr	r2, [r7, #0]
 8010092:	4904      	ldr	r1, [pc, #16]	; (80100a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010094:	4804      	ldr	r0, [pc, #16]	; (80100a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010096:	f7fc fecb 	bl	800ce30 <USBD_GetString>
  return USBD_StrDesc;
 801009a:	4b02      	ldr	r3, [pc, #8]	; (80100a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801009c:	4618      	mov	r0, r3
 801009e:	3708      	adds	r7, #8
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	200066dc 	.word	0x200066dc
 80100a8:	08010c68 	.word	0x08010c68

080100ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	4603      	mov	r3, r0
 80100b4:	6039      	str	r1, [r7, #0]
 80100b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	221a      	movs	r2, #26
 80100bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80100be:	f000 f843 	bl	8010148 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80100c2:	4b02      	ldr	r3, [pc, #8]	; (80100cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3708      	adds	r7, #8
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	200000e4 	.word	0x200000e4

080100d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	4603      	mov	r3, r0
 80100d8:	6039      	str	r1, [r7, #0]
 80100da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80100dc:	79fb      	ldrb	r3, [r7, #7]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d105      	bne.n	80100ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80100e2:	683a      	ldr	r2, [r7, #0]
 80100e4:	4907      	ldr	r1, [pc, #28]	; (8010104 <USBD_FS_ConfigStrDescriptor+0x34>)
 80100e6:	4808      	ldr	r0, [pc, #32]	; (8010108 <USBD_FS_ConfigStrDescriptor+0x38>)
 80100e8:	f7fc fea2 	bl	800ce30 <USBD_GetString>
 80100ec:	e004      	b.n	80100f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80100ee:	683a      	ldr	r2, [r7, #0]
 80100f0:	4904      	ldr	r1, [pc, #16]	; (8010104 <USBD_FS_ConfigStrDescriptor+0x34>)
 80100f2:	4805      	ldr	r0, [pc, #20]	; (8010108 <USBD_FS_ConfigStrDescriptor+0x38>)
 80100f4:	f7fc fe9c 	bl	800ce30 <USBD_GetString>
  }
  return USBD_StrDesc;
 80100f8:	4b02      	ldr	r3, [pc, #8]	; (8010104 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3708      	adds	r7, #8
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop
 8010104:	200066dc 	.word	0x200066dc
 8010108:	08010c7c 	.word	0x08010c7c

0801010c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	4603      	mov	r3, r0
 8010114:	6039      	str	r1, [r7, #0]
 8010116:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010118:	79fb      	ldrb	r3, [r7, #7]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d105      	bne.n	801012a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801011e:	683a      	ldr	r2, [r7, #0]
 8010120:	4907      	ldr	r1, [pc, #28]	; (8010140 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010122:	4808      	ldr	r0, [pc, #32]	; (8010144 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010124:	f7fc fe84 	bl	800ce30 <USBD_GetString>
 8010128:	e004      	b.n	8010134 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801012a:	683a      	ldr	r2, [r7, #0]
 801012c:	4904      	ldr	r1, [pc, #16]	; (8010140 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801012e:	4805      	ldr	r0, [pc, #20]	; (8010144 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010130:	f7fc fe7e 	bl	800ce30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010134:	4b02      	ldr	r3, [pc, #8]	; (8010140 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010136:	4618      	mov	r0, r3
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	bf00      	nop
 8010140:	200066dc 	.word	0x200066dc
 8010144:	08010c88 	.word	0x08010c88

08010148 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b084      	sub	sp, #16
 801014c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801014e:	4b0f      	ldr	r3, [pc, #60]	; (801018c <Get_SerialNum+0x44>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010154:	4b0e      	ldr	r3, [pc, #56]	; (8010190 <Get_SerialNum+0x48>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801015a:	4b0e      	ldr	r3, [pc, #56]	; (8010194 <Get_SerialNum+0x4c>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	4413      	add	r3, r2
 8010166:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d009      	beq.n	8010182 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801016e:	2208      	movs	r2, #8
 8010170:	4909      	ldr	r1, [pc, #36]	; (8010198 <Get_SerialNum+0x50>)
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	f000 f814 	bl	80101a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010178:	2204      	movs	r2, #4
 801017a:	4908      	ldr	r1, [pc, #32]	; (801019c <Get_SerialNum+0x54>)
 801017c:	68b8      	ldr	r0, [r7, #8]
 801017e:	f000 f80f 	bl	80101a0 <IntToUnicode>
  }
}
 8010182:	bf00      	nop
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	1fff7a10 	.word	0x1fff7a10
 8010190:	1fff7a14 	.word	0x1fff7a14
 8010194:	1fff7a18 	.word	0x1fff7a18
 8010198:	200000e6 	.word	0x200000e6
 801019c:	200000f6 	.word	0x200000f6

080101a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b087      	sub	sp, #28
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	60f8      	str	r0, [r7, #12]
 80101a8:	60b9      	str	r1, [r7, #8]
 80101aa:	4613      	mov	r3, r2
 80101ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80101ae:	2300      	movs	r3, #0
 80101b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80101b2:	2300      	movs	r3, #0
 80101b4:	75fb      	strb	r3, [r7, #23]
 80101b6:	e027      	b.n	8010208 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	0f1b      	lsrs	r3, r3, #28
 80101bc:	2b09      	cmp	r3, #9
 80101be:	d80b      	bhi.n	80101d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	0f1b      	lsrs	r3, r3, #28
 80101c4:	b2da      	uxtb	r2, r3
 80101c6:	7dfb      	ldrb	r3, [r7, #23]
 80101c8:	005b      	lsls	r3, r3, #1
 80101ca:	4619      	mov	r1, r3
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	440b      	add	r3, r1
 80101d0:	3230      	adds	r2, #48	; 0x30
 80101d2:	b2d2      	uxtb	r2, r2
 80101d4:	701a      	strb	r2, [r3, #0]
 80101d6:	e00a      	b.n	80101ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	0f1b      	lsrs	r3, r3, #28
 80101dc:	b2da      	uxtb	r2, r3
 80101de:	7dfb      	ldrb	r3, [r7, #23]
 80101e0:	005b      	lsls	r3, r3, #1
 80101e2:	4619      	mov	r1, r3
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	440b      	add	r3, r1
 80101e8:	3237      	adds	r2, #55	; 0x37
 80101ea:	b2d2      	uxtb	r2, r2
 80101ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	011b      	lsls	r3, r3, #4
 80101f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80101f4:	7dfb      	ldrb	r3, [r7, #23]
 80101f6:	005b      	lsls	r3, r3, #1
 80101f8:	3301      	adds	r3, #1
 80101fa:	68ba      	ldr	r2, [r7, #8]
 80101fc:	4413      	add	r3, r2
 80101fe:	2200      	movs	r2, #0
 8010200:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010202:	7dfb      	ldrb	r3, [r7, #23]
 8010204:	3301      	adds	r3, #1
 8010206:	75fb      	strb	r3, [r7, #23]
 8010208:	7dfa      	ldrb	r2, [r7, #23]
 801020a:	79fb      	ldrb	r3, [r7, #7]
 801020c:	429a      	cmp	r2, r3
 801020e:	d3d3      	bcc.n	80101b8 <IntToUnicode+0x18>
  }
}
 8010210:	bf00      	nop
 8010212:	bf00      	nop
 8010214:	371c      	adds	r7, #28
 8010216:	46bd      	mov	sp, r7
 8010218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021c:	4770      	bx	lr
	...

08010220 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b0a0      	sub	sp, #128	; 0x80
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010228:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801022c:	2200      	movs	r2, #0
 801022e:	601a      	str	r2, [r3, #0]
 8010230:	605a      	str	r2, [r3, #4]
 8010232:	609a      	str	r2, [r3, #8]
 8010234:	60da      	str	r2, [r3, #12]
 8010236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010238:	f107 0310 	add.w	r3, r7, #16
 801023c:	225c      	movs	r2, #92	; 0x5c
 801023e:	2100      	movs	r1, #0
 8010240:	4618      	mov	r0, r3
 8010242:	f000 fb79 	bl	8010938 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801024e:	d161      	bne.n	8010314 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010254:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 8010256:	2308      	movs	r3, #8
 8010258:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 801025a:	23c0      	movs	r3, #192	; 0xc0
 801025c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 801025e:	2302      	movs	r3, #2
 8010260:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8010262:	2304      	movs	r3, #4
 8010264:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8010266:	2301      	movs	r3, #1
 8010268:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 801026a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801026e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010270:	f107 0310 	add.w	r3, r7, #16
 8010274:	4618      	mov	r0, r3
 8010276:	f7f6 fc07 	bl	8006a88 <HAL_RCCEx_PeriphCLKConfig>
 801027a:	4603      	mov	r3, r0
 801027c:	2b00      	cmp	r3, #0
 801027e:	d001      	beq.n	8010284 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8010280:	f7f1 f818 	bl	80012b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010284:	2300      	movs	r3, #0
 8010286:	60fb      	str	r3, [r7, #12]
 8010288:	4b24      	ldr	r3, [pc, #144]	; (801031c <HAL_PCD_MspInit+0xfc>)
 801028a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801028c:	4a23      	ldr	r2, [pc, #140]	; (801031c <HAL_PCD_MspInit+0xfc>)
 801028e:	f043 0301 	orr.w	r3, r3, #1
 8010292:	6313      	str	r3, [r2, #48]	; 0x30
 8010294:	4b21      	ldr	r3, [pc, #132]	; (801031c <HAL_PCD_MspInit+0xfc>)
 8010296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010298:	f003 0301 	and.w	r3, r3, #1
 801029c:	60fb      	str	r3, [r7, #12]
 801029e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80102a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80102a6:	2300      	movs	r3, #0
 80102a8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102aa:	2300      	movs	r3, #0
 80102ac:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80102ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80102b2:	4619      	mov	r1, r3
 80102b4:	481a      	ldr	r0, [pc, #104]	; (8010320 <HAL_PCD_MspInit+0x100>)
 80102b6:	f7f4 fc53 	bl	8004b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80102ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80102be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80102c0:	2302      	movs	r3, #2
 80102c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102c4:	2300      	movs	r3, #0
 80102c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80102c8:	2303      	movs	r3, #3
 80102ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80102cc:	230a      	movs	r3, #10
 80102ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80102d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80102d4:	4619      	mov	r1, r3
 80102d6:	4812      	ldr	r0, [pc, #72]	; (8010320 <HAL_PCD_MspInit+0x100>)
 80102d8:	f7f4 fc42 	bl	8004b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80102dc:	4b0f      	ldr	r3, [pc, #60]	; (801031c <HAL_PCD_MspInit+0xfc>)
 80102de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102e0:	4a0e      	ldr	r2, [pc, #56]	; (801031c <HAL_PCD_MspInit+0xfc>)
 80102e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102e6:	6353      	str	r3, [r2, #52]	; 0x34
 80102e8:	2300      	movs	r3, #0
 80102ea:	60bb      	str	r3, [r7, #8]
 80102ec:	4b0b      	ldr	r3, [pc, #44]	; (801031c <HAL_PCD_MspInit+0xfc>)
 80102ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102f0:	4a0a      	ldr	r2, [pc, #40]	; (801031c <HAL_PCD_MspInit+0xfc>)
 80102f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80102f6:	6453      	str	r3, [r2, #68]	; 0x44
 80102f8:	4b08      	ldr	r3, [pc, #32]	; (801031c <HAL_PCD_MspInit+0xfc>)
 80102fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010300:	60bb      	str	r3, [r7, #8]
 8010302:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010304:	2200      	movs	r2, #0
 8010306:	2105      	movs	r1, #5
 8010308:	2043      	movs	r0, #67	; 0x43
 801030a:	f7f4 f873 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801030e:	2043      	movs	r0, #67	; 0x43
 8010310:	f7f4 f88c 	bl	800442c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010314:	bf00      	nop
 8010316:	3780      	adds	r7, #128	; 0x80
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	40023800 	.word	0x40023800
 8010320:	40020000 	.word	0x40020000

08010324 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010338:	4619      	mov	r1, r3
 801033a:	4610      	mov	r0, r2
 801033c:	f7fb fc19 	bl	800bb72 <USBD_LL_SetupStage>
}
 8010340:	bf00      	nop
 8010342:	3708      	adds	r7, #8
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	460b      	mov	r3, r1
 8010352:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801035a:	78fa      	ldrb	r2, [r7, #3]
 801035c:	6879      	ldr	r1, [r7, #4]
 801035e:	4613      	mov	r3, r2
 8010360:	00db      	lsls	r3, r3, #3
 8010362:	4413      	add	r3, r2
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	440b      	add	r3, r1
 8010368:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801036c:	681a      	ldr	r2, [r3, #0]
 801036e:	78fb      	ldrb	r3, [r7, #3]
 8010370:	4619      	mov	r1, r3
 8010372:	f7fb fc53 	bl	800bc1c <USBD_LL_DataOutStage>
}
 8010376:	bf00      	nop
 8010378:	3708      	adds	r7, #8
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}

0801037e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801037e:	b580      	push	{r7, lr}
 8010380:	b082      	sub	sp, #8
 8010382:	af00      	add	r7, sp, #0
 8010384:	6078      	str	r0, [r7, #4]
 8010386:	460b      	mov	r3, r1
 8010388:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010390:	78fa      	ldrb	r2, [r7, #3]
 8010392:	6879      	ldr	r1, [r7, #4]
 8010394:	4613      	mov	r3, r2
 8010396:	00db      	lsls	r3, r3, #3
 8010398:	4413      	add	r3, r2
 801039a:	009b      	lsls	r3, r3, #2
 801039c:	440b      	add	r3, r1
 801039e:	334c      	adds	r3, #76	; 0x4c
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	78fb      	ldrb	r3, [r7, #3]
 80103a4:	4619      	mov	r1, r3
 80103a6:	f7fb fcec 	bl	800bd82 <USBD_LL_DataInStage>
}
 80103aa:	bf00      	nop
 80103ac:	3708      	adds	r7, #8
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}

080103b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103b2:	b580      	push	{r7, lr}
 80103b4:	b082      	sub	sp, #8
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7fb fe20 	bl	800c006 <USBD_LL_SOF>
}
 80103c6:	bf00      	nop
 80103c8:	3708      	adds	r7, #8
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}

080103ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103ce:	b580      	push	{r7, lr}
 80103d0:	b084      	sub	sp, #16
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80103d6:	2301      	movs	r3, #1
 80103d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d102      	bne.n	80103e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80103e2:	2300      	movs	r3, #0
 80103e4:	73fb      	strb	r3, [r7, #15]
 80103e6:	e008      	b.n	80103fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	2b02      	cmp	r3, #2
 80103ee:	d102      	bne.n	80103f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80103f0:	2301      	movs	r3, #1
 80103f2:	73fb      	strb	r3, [r7, #15]
 80103f4:	e001      	b.n	80103fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80103f6:	f7f0 ff5d 	bl	80012b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010400:	7bfa      	ldrb	r2, [r7, #15]
 8010402:	4611      	mov	r1, r2
 8010404:	4618      	mov	r0, r3
 8010406:	f7fb fdc0 	bl	800bf8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010410:	4618      	mov	r0, r3
 8010412:	f7fb fd68 	bl	800bee6 <USBD_LL_Reset>
}
 8010416:	bf00      	nop
 8010418:	3710      	adds	r7, #16
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
	...

08010420 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801042e:	4618      	mov	r0, r3
 8010430:	f7fb fdbb 	bl	800bfaa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	687a      	ldr	r2, [r7, #4]
 8010440:	6812      	ldr	r2, [r2, #0]
 8010442:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010446:	f043 0301 	orr.w	r3, r3, #1
 801044a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6a1b      	ldr	r3, [r3, #32]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d005      	beq.n	8010460 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010454:	4b04      	ldr	r3, [pc, #16]	; (8010468 <HAL_PCD_SuspendCallback+0x48>)
 8010456:	691b      	ldr	r3, [r3, #16]
 8010458:	4a03      	ldr	r2, [pc, #12]	; (8010468 <HAL_PCD_SuspendCallback+0x48>)
 801045a:	f043 0306 	orr.w	r3, r3, #6
 801045e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010460:	bf00      	nop
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	e000ed00 	.word	0xe000ed00

0801046c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b082      	sub	sp, #8
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801047a:	4618      	mov	r0, r3
 801047c:	f7fb fdab 	bl	800bfd6 <USBD_LL_Resume>
}
 8010480:	bf00      	nop
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	460b      	mov	r3, r1
 8010492:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801049a:	78fa      	ldrb	r2, [r7, #3]
 801049c:	4611      	mov	r1, r2
 801049e:	4618      	mov	r0, r3
 80104a0:	f7fb fe03 	bl	800c0aa <USBD_LL_IsoOUTIncomplete>
}
 80104a4:	bf00      	nop
 80104a6:	3708      	adds	r7, #8
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	460b      	mov	r3, r1
 80104b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80104be:	78fa      	ldrb	r2, [r7, #3]
 80104c0:	4611      	mov	r1, r2
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7fb fdbf 	bl	800c046 <USBD_LL_IsoINIncomplete>
}
 80104c8:	bf00      	nop
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80104de:	4618      	mov	r0, r3
 80104e0:	f7fb fe15 	bl	800c10e <USBD_LL_DevConnected>
}
 80104e4:	bf00      	nop
 80104e6:	3708      	adds	r7, #8
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fb fe12 	bl	800c124 <USBD_LL_DevDisconnected>
}
 8010500:	bf00      	nop
 8010502:	3708      	adds	r7, #8
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	781b      	ldrb	r3, [r3, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d13c      	bne.n	8010592 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010518:	4a20      	ldr	r2, [pc, #128]	; (801059c <USBD_LL_Init+0x94>)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	4a1e      	ldr	r2, [pc, #120]	; (801059c <USBD_LL_Init+0x94>)
 8010524:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010528:	4b1c      	ldr	r3, [pc, #112]	; (801059c <USBD_LL_Init+0x94>)
 801052a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801052e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010530:	4b1a      	ldr	r3, [pc, #104]	; (801059c <USBD_LL_Init+0x94>)
 8010532:	2206      	movs	r2, #6
 8010534:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010536:	4b19      	ldr	r3, [pc, #100]	; (801059c <USBD_LL_Init+0x94>)
 8010538:	2202      	movs	r2, #2
 801053a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801053c:	4b17      	ldr	r3, [pc, #92]	; (801059c <USBD_LL_Init+0x94>)
 801053e:	2200      	movs	r2, #0
 8010540:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010542:	4b16      	ldr	r3, [pc, #88]	; (801059c <USBD_LL_Init+0x94>)
 8010544:	2202      	movs	r2, #2
 8010546:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010548:	4b14      	ldr	r3, [pc, #80]	; (801059c <USBD_LL_Init+0x94>)
 801054a:	2200      	movs	r2, #0
 801054c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801054e:	4b13      	ldr	r3, [pc, #76]	; (801059c <USBD_LL_Init+0x94>)
 8010550:	2200      	movs	r2, #0
 8010552:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010554:	4b11      	ldr	r3, [pc, #68]	; (801059c <USBD_LL_Init+0x94>)
 8010556:	2200      	movs	r2, #0
 8010558:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801055a:	4b10      	ldr	r3, [pc, #64]	; (801059c <USBD_LL_Init+0x94>)
 801055c:	2201      	movs	r2, #1
 801055e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010560:	4b0e      	ldr	r3, [pc, #56]	; (801059c <USBD_LL_Init+0x94>)
 8010562:	2200      	movs	r2, #0
 8010564:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010566:	480d      	ldr	r0, [pc, #52]	; (801059c <USBD_LL_Init+0x94>)
 8010568:	f7f4 fe1c 	bl	80051a4 <HAL_PCD_Init>
 801056c:	4603      	mov	r3, r0
 801056e:	2b00      	cmp	r3, #0
 8010570:	d001      	beq.n	8010576 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010572:	f7f0 fe9f 	bl	80012b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010576:	2180      	movs	r1, #128	; 0x80
 8010578:	4808      	ldr	r0, [pc, #32]	; (801059c <USBD_LL_Init+0x94>)
 801057a:	f7f6 f8a8 	bl	80066ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801057e:	2240      	movs	r2, #64	; 0x40
 8010580:	2100      	movs	r1, #0
 8010582:	4806      	ldr	r0, [pc, #24]	; (801059c <USBD_LL_Init+0x94>)
 8010584:	f7f6 f85c 	bl	8006640 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010588:	2280      	movs	r2, #128	; 0x80
 801058a:	2101      	movs	r1, #1
 801058c:	4803      	ldr	r0, [pc, #12]	; (801059c <USBD_LL_Init+0x94>)
 801058e:	f7f6 f857 	bl	8006640 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010592:	2300      	movs	r3, #0
}
 8010594:	4618      	mov	r0, r3
 8010596:	3708      	adds	r7, #8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}
 801059c:	200068dc 	.word	0x200068dc

080105a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105a8:	2300      	movs	r3, #0
 80105aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105ac:	2300      	movs	r3, #0
 80105ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7f4 ff18 	bl	80053ec <HAL_PCD_Start>
 80105bc:	4603      	mov	r3, r0
 80105be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105c0:	7bfb      	ldrb	r3, [r7, #15]
 80105c2:	4618      	mov	r0, r3
 80105c4:	f000 f942 	bl	801084c <USBD_Get_USB_Status>
 80105c8:	4603      	mov	r3, r0
 80105ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b084      	sub	sp, #16
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
 80105de:	4608      	mov	r0, r1
 80105e0:	4611      	mov	r1, r2
 80105e2:	461a      	mov	r2, r3
 80105e4:	4603      	mov	r3, r0
 80105e6:	70fb      	strb	r3, [r7, #3]
 80105e8:	460b      	mov	r3, r1
 80105ea:	70bb      	strb	r3, [r7, #2]
 80105ec:	4613      	mov	r3, r2
 80105ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105f0:	2300      	movs	r3, #0
 80105f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105f4:	2300      	movs	r3, #0
 80105f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80105fe:	78bb      	ldrb	r3, [r7, #2]
 8010600:	883a      	ldrh	r2, [r7, #0]
 8010602:	78f9      	ldrb	r1, [r7, #3]
 8010604:	f7f5 fc16 	bl	8005e34 <HAL_PCD_EP_Open>
 8010608:	4603      	mov	r3, r0
 801060a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801060c:	7bfb      	ldrb	r3, [r7, #15]
 801060e:	4618      	mov	r0, r3
 8010610:	f000 f91c 	bl	801084c <USBD_Get_USB_Status>
 8010614:	4603      	mov	r3, r0
 8010616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010618:	7bbb      	ldrb	r3, [r7, #14]
}
 801061a:	4618      	mov	r0, r3
 801061c:	3710      	adds	r7, #16
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010622:	b580      	push	{r7, lr}
 8010624:	b084      	sub	sp, #16
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
 801062a:	460b      	mov	r3, r1
 801062c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801062e:	2300      	movs	r3, #0
 8010630:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010632:	2300      	movs	r3, #0
 8010634:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801063c:	78fa      	ldrb	r2, [r7, #3]
 801063e:	4611      	mov	r1, r2
 8010640:	4618      	mov	r0, r3
 8010642:	f7f5 fc5f 	bl	8005f04 <HAL_PCD_EP_Close>
 8010646:	4603      	mov	r3, r0
 8010648:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801064a:	7bfb      	ldrb	r3, [r7, #15]
 801064c:	4618      	mov	r0, r3
 801064e:	f000 f8fd 	bl	801084c <USBD_Get_USB_Status>
 8010652:	4603      	mov	r3, r0
 8010654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010656:	7bbb      	ldrb	r3, [r7, #14]
}
 8010658:	4618      	mov	r0, r3
 801065a:	3710      	adds	r7, #16
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b084      	sub	sp, #16
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	460b      	mov	r3, r1
 801066a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801066c:	2300      	movs	r3, #0
 801066e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010670:	2300      	movs	r3, #0
 8010672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801067a:	78fa      	ldrb	r2, [r7, #3]
 801067c:	4611      	mov	r1, r2
 801067e:	4618      	mov	r0, r3
 8010680:	f7f5 fd37 	bl	80060f2 <HAL_PCD_EP_SetStall>
 8010684:	4603      	mov	r3, r0
 8010686:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010688:	7bfb      	ldrb	r3, [r7, #15]
 801068a:	4618      	mov	r0, r3
 801068c:	f000 f8de 	bl	801084c <USBD_Get_USB_Status>
 8010690:	4603      	mov	r3, r0
 8010692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010694:	7bbb      	ldrb	r3, [r7, #14]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3710      	adds	r7, #16
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}

0801069e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801069e:	b580      	push	{r7, lr}
 80106a0:	b084      	sub	sp, #16
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
 80106a6:	460b      	mov	r3, r1
 80106a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106aa:	2300      	movs	r3, #0
 80106ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106ae:	2300      	movs	r3, #0
 80106b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80106b8:	78fa      	ldrb	r2, [r7, #3]
 80106ba:	4611      	mov	r1, r2
 80106bc:	4618      	mov	r0, r3
 80106be:	f7f5 fd7c 	bl	80061ba <HAL_PCD_EP_ClrStall>
 80106c2:	4603      	mov	r3, r0
 80106c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106c6:	7bfb      	ldrb	r3, [r7, #15]
 80106c8:	4618      	mov	r0, r3
 80106ca:	f000 f8bf 	bl	801084c <USBD_Get_USB_Status>
 80106ce:	4603      	mov	r3, r0
 80106d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3710      	adds	r7, #16
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106dc:	b480      	push	{r7}
 80106de:	b085      	sub	sp, #20
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	460b      	mov	r3, r1
 80106e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80106ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80106f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	da0b      	bge.n	8010710 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80106f8:	78fb      	ldrb	r3, [r7, #3]
 80106fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80106fe:	68f9      	ldr	r1, [r7, #12]
 8010700:	4613      	mov	r3, r2
 8010702:	00db      	lsls	r3, r3, #3
 8010704:	4413      	add	r3, r2
 8010706:	009b      	lsls	r3, r3, #2
 8010708:	440b      	add	r3, r1
 801070a:	333e      	adds	r3, #62	; 0x3e
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	e00b      	b.n	8010728 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010710:	78fb      	ldrb	r3, [r7, #3]
 8010712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010716:	68f9      	ldr	r1, [r7, #12]
 8010718:	4613      	mov	r3, r2
 801071a:	00db      	lsls	r3, r3, #3
 801071c:	4413      	add	r3, r2
 801071e:	009b      	lsls	r3, r3, #2
 8010720:	440b      	add	r3, r1
 8010722:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010726:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010728:	4618      	mov	r0, r3
 801072a:	3714      	adds	r7, #20
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	460b      	mov	r3, r1
 801073e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010740:	2300      	movs	r3, #0
 8010742:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010744:	2300      	movs	r3, #0
 8010746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801074e:	78fa      	ldrb	r2, [r7, #3]
 8010750:	4611      	mov	r1, r2
 8010752:	4618      	mov	r0, r3
 8010754:	f7f5 fb49 	bl	8005dea <HAL_PCD_SetAddress>
 8010758:	4603      	mov	r3, r0
 801075a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801075c:	7bfb      	ldrb	r3, [r7, #15]
 801075e:	4618      	mov	r0, r3
 8010760:	f000 f874 	bl	801084c <USBD_Get_USB_Status>
 8010764:	4603      	mov	r3, r0
 8010766:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010768:	7bbb      	ldrb	r3, [r7, #14]
}
 801076a:	4618      	mov	r0, r3
 801076c:	3710      	adds	r7, #16
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}

08010772 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010772:	b580      	push	{r7, lr}
 8010774:	b086      	sub	sp, #24
 8010776:	af00      	add	r7, sp, #0
 8010778:	60f8      	str	r0, [r7, #12]
 801077a:	607a      	str	r2, [r7, #4]
 801077c:	603b      	str	r3, [r7, #0]
 801077e:	460b      	mov	r3, r1
 8010780:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010782:	2300      	movs	r3, #0
 8010784:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010786:	2300      	movs	r3, #0
 8010788:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010790:	7af9      	ldrb	r1, [r7, #11]
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	f7f5 fc62 	bl	800605e <HAL_PCD_EP_Transmit>
 801079a:	4603      	mov	r3, r0
 801079c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801079e:	7dfb      	ldrb	r3, [r7, #23]
 80107a0:	4618      	mov	r0, r3
 80107a2:	f000 f853 	bl	801084c <USBD_Get_USB_Status>
 80107a6:	4603      	mov	r3, r0
 80107a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80107aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3718      	adds	r7, #24
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b086      	sub	sp, #24
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	607a      	str	r2, [r7, #4]
 80107be:	603b      	str	r3, [r7, #0]
 80107c0:	460b      	mov	r3, r1
 80107c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107c4:	2300      	movs	r3, #0
 80107c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107c8:	2300      	movs	r3, #0
 80107ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80107d2:	7af9      	ldrb	r1, [r7, #11]
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	687a      	ldr	r2, [r7, #4]
 80107d8:	f7f5 fbde 	bl	8005f98 <HAL_PCD_EP_Receive>
 80107dc:	4603      	mov	r3, r0
 80107de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107e0:	7dfb      	ldrb	r3, [r7, #23]
 80107e2:	4618      	mov	r0, r3
 80107e4:	f000 f832 	bl	801084c <USBD_Get_USB_Status>
 80107e8:	4603      	mov	r3, r0
 80107ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80107ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3718      	adds	r7, #24
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107f6:	b580      	push	{r7, lr}
 80107f8:	b082      	sub	sp, #8
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
 80107fe:	460b      	mov	r3, r1
 8010800:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010808:	78fa      	ldrb	r2, [r7, #3]
 801080a:	4611      	mov	r1, r2
 801080c:	4618      	mov	r0, r3
 801080e:	f7f5 fc0e 	bl	800602e <HAL_PCD_EP_GetRxCount>
 8010812:	4603      	mov	r3, r0
}
 8010814:	4618      	mov	r0, r3
 8010816:	3708      	adds	r7, #8
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}

0801081c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010824:	4b03      	ldr	r3, [pc, #12]	; (8010834 <USBD_static_malloc+0x18>)
}
 8010826:	4618      	mov	r0, r3
 8010828:	370c      	adds	r7, #12
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop
 8010834:	20006de8 	.word	0x20006de8

08010838 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010838:	b480      	push	{r7}
 801083a:	b083      	sub	sp, #12
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]

}
 8010840:	bf00      	nop
 8010842:	370c      	adds	r7, #12
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr

0801084c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801084c:	b480      	push	{r7}
 801084e:	b085      	sub	sp, #20
 8010850:	af00      	add	r7, sp, #0
 8010852:	4603      	mov	r3, r0
 8010854:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010856:	2300      	movs	r3, #0
 8010858:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801085a:	79fb      	ldrb	r3, [r7, #7]
 801085c:	2b03      	cmp	r3, #3
 801085e:	d817      	bhi.n	8010890 <USBD_Get_USB_Status+0x44>
 8010860:	a201      	add	r2, pc, #4	; (adr r2, 8010868 <USBD_Get_USB_Status+0x1c>)
 8010862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010866:	bf00      	nop
 8010868:	08010879 	.word	0x08010879
 801086c:	0801087f 	.word	0x0801087f
 8010870:	08010885 	.word	0x08010885
 8010874:	0801088b 	.word	0x0801088b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010878:	2300      	movs	r3, #0
 801087a:	73fb      	strb	r3, [r7, #15]
    break;
 801087c:	e00b      	b.n	8010896 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801087e:	2303      	movs	r3, #3
 8010880:	73fb      	strb	r3, [r7, #15]
    break;
 8010882:	e008      	b.n	8010896 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010884:	2301      	movs	r3, #1
 8010886:	73fb      	strb	r3, [r7, #15]
    break;
 8010888:	e005      	b.n	8010896 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801088a:	2303      	movs	r3, #3
 801088c:	73fb      	strb	r3, [r7, #15]
    break;
 801088e:	e002      	b.n	8010896 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010890:	2303      	movs	r3, #3
 8010892:	73fb      	strb	r3, [r7, #15]
    break;
 8010894:	bf00      	nop
  }
  return usb_status;
 8010896:	7bfb      	ldrb	r3, [r7, #15]
}
 8010898:	4618      	mov	r0, r3
 801089a:	3714      	adds	r7, #20
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <__errno>:
 80108a4:	4b01      	ldr	r3, [pc, #4]	; (80108ac <__errno+0x8>)
 80108a6:	6818      	ldr	r0, [r3, #0]
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop
 80108ac:	20000100 	.word	0x20000100

080108b0 <__libc_init_array>:
 80108b0:	b570      	push	{r4, r5, r6, lr}
 80108b2:	4d0d      	ldr	r5, [pc, #52]	; (80108e8 <__libc_init_array+0x38>)
 80108b4:	4c0d      	ldr	r4, [pc, #52]	; (80108ec <__libc_init_array+0x3c>)
 80108b6:	1b64      	subs	r4, r4, r5
 80108b8:	10a4      	asrs	r4, r4, #2
 80108ba:	2600      	movs	r6, #0
 80108bc:	42a6      	cmp	r6, r4
 80108be:	d109      	bne.n	80108d4 <__libc_init_array+0x24>
 80108c0:	4d0b      	ldr	r5, [pc, #44]	; (80108f0 <__libc_init_array+0x40>)
 80108c2:	4c0c      	ldr	r4, [pc, #48]	; (80108f4 <__libc_init_array+0x44>)
 80108c4:	f000 f9a6 	bl	8010c14 <_init>
 80108c8:	1b64      	subs	r4, r4, r5
 80108ca:	10a4      	asrs	r4, r4, #2
 80108cc:	2600      	movs	r6, #0
 80108ce:	42a6      	cmp	r6, r4
 80108d0:	d105      	bne.n	80108de <__libc_init_array+0x2e>
 80108d2:	bd70      	pop	{r4, r5, r6, pc}
 80108d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80108d8:	4798      	blx	r3
 80108da:	3601      	adds	r6, #1
 80108dc:	e7ee      	b.n	80108bc <__libc_init_array+0xc>
 80108de:	f855 3b04 	ldr.w	r3, [r5], #4
 80108e2:	4798      	blx	r3
 80108e4:	3601      	adds	r6, #1
 80108e6:	e7f2      	b.n	80108ce <__libc_init_array+0x1e>
 80108e8:	08010d44 	.word	0x08010d44
 80108ec:	08010d44 	.word	0x08010d44
 80108f0:	08010d44 	.word	0x08010d44
 80108f4:	08010d48 	.word	0x08010d48

080108f8 <__retarget_lock_acquire_recursive>:
 80108f8:	4770      	bx	lr

080108fa <__retarget_lock_release_recursive>:
 80108fa:	4770      	bx	lr

080108fc <malloc>:
 80108fc:	4b02      	ldr	r3, [pc, #8]	; (8010908 <malloc+0xc>)
 80108fe:	4601      	mov	r1, r0
 8010900:	6818      	ldr	r0, [r3, #0]
 8010902:	f000 b88d 	b.w	8010a20 <_malloc_r>
 8010906:	bf00      	nop
 8010908:	20000100 	.word	0x20000100

0801090c <free>:
 801090c:	4b02      	ldr	r3, [pc, #8]	; (8010918 <free+0xc>)
 801090e:	4601      	mov	r1, r0
 8010910:	6818      	ldr	r0, [r3, #0]
 8010912:	f000 b819 	b.w	8010948 <_free_r>
 8010916:	bf00      	nop
 8010918:	20000100 	.word	0x20000100

0801091c <memcpy>:
 801091c:	440a      	add	r2, r1
 801091e:	4291      	cmp	r1, r2
 8010920:	f100 33ff 	add.w	r3, r0, #4294967295
 8010924:	d100      	bne.n	8010928 <memcpy+0xc>
 8010926:	4770      	bx	lr
 8010928:	b510      	push	{r4, lr}
 801092a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801092e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010932:	4291      	cmp	r1, r2
 8010934:	d1f9      	bne.n	801092a <memcpy+0xe>
 8010936:	bd10      	pop	{r4, pc}

08010938 <memset>:
 8010938:	4402      	add	r2, r0
 801093a:	4603      	mov	r3, r0
 801093c:	4293      	cmp	r3, r2
 801093e:	d100      	bne.n	8010942 <memset+0xa>
 8010940:	4770      	bx	lr
 8010942:	f803 1b01 	strb.w	r1, [r3], #1
 8010946:	e7f9      	b.n	801093c <memset+0x4>

08010948 <_free_r>:
 8010948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801094a:	2900      	cmp	r1, #0
 801094c:	d044      	beq.n	80109d8 <_free_r+0x90>
 801094e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010952:	9001      	str	r0, [sp, #4]
 8010954:	2b00      	cmp	r3, #0
 8010956:	f1a1 0404 	sub.w	r4, r1, #4
 801095a:	bfb8      	it	lt
 801095c:	18e4      	addlt	r4, r4, r3
 801095e:	f000 f94d 	bl	8010bfc <__malloc_lock>
 8010962:	4a1e      	ldr	r2, [pc, #120]	; (80109dc <_free_r+0x94>)
 8010964:	9801      	ldr	r0, [sp, #4]
 8010966:	6813      	ldr	r3, [r2, #0]
 8010968:	b933      	cbnz	r3, 8010978 <_free_r+0x30>
 801096a:	6063      	str	r3, [r4, #4]
 801096c:	6014      	str	r4, [r2, #0]
 801096e:	b003      	add	sp, #12
 8010970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010974:	f000 b948 	b.w	8010c08 <__malloc_unlock>
 8010978:	42a3      	cmp	r3, r4
 801097a:	d908      	bls.n	801098e <_free_r+0x46>
 801097c:	6825      	ldr	r5, [r4, #0]
 801097e:	1961      	adds	r1, r4, r5
 8010980:	428b      	cmp	r3, r1
 8010982:	bf01      	itttt	eq
 8010984:	6819      	ldreq	r1, [r3, #0]
 8010986:	685b      	ldreq	r3, [r3, #4]
 8010988:	1949      	addeq	r1, r1, r5
 801098a:	6021      	streq	r1, [r4, #0]
 801098c:	e7ed      	b.n	801096a <_free_r+0x22>
 801098e:	461a      	mov	r2, r3
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	b10b      	cbz	r3, 8010998 <_free_r+0x50>
 8010994:	42a3      	cmp	r3, r4
 8010996:	d9fa      	bls.n	801098e <_free_r+0x46>
 8010998:	6811      	ldr	r1, [r2, #0]
 801099a:	1855      	adds	r5, r2, r1
 801099c:	42a5      	cmp	r5, r4
 801099e:	d10b      	bne.n	80109b8 <_free_r+0x70>
 80109a0:	6824      	ldr	r4, [r4, #0]
 80109a2:	4421      	add	r1, r4
 80109a4:	1854      	adds	r4, r2, r1
 80109a6:	42a3      	cmp	r3, r4
 80109a8:	6011      	str	r1, [r2, #0]
 80109aa:	d1e0      	bne.n	801096e <_free_r+0x26>
 80109ac:	681c      	ldr	r4, [r3, #0]
 80109ae:	685b      	ldr	r3, [r3, #4]
 80109b0:	6053      	str	r3, [r2, #4]
 80109b2:	4421      	add	r1, r4
 80109b4:	6011      	str	r1, [r2, #0]
 80109b6:	e7da      	b.n	801096e <_free_r+0x26>
 80109b8:	d902      	bls.n	80109c0 <_free_r+0x78>
 80109ba:	230c      	movs	r3, #12
 80109bc:	6003      	str	r3, [r0, #0]
 80109be:	e7d6      	b.n	801096e <_free_r+0x26>
 80109c0:	6825      	ldr	r5, [r4, #0]
 80109c2:	1961      	adds	r1, r4, r5
 80109c4:	428b      	cmp	r3, r1
 80109c6:	bf04      	itt	eq
 80109c8:	6819      	ldreq	r1, [r3, #0]
 80109ca:	685b      	ldreq	r3, [r3, #4]
 80109cc:	6063      	str	r3, [r4, #4]
 80109ce:	bf04      	itt	eq
 80109d0:	1949      	addeq	r1, r1, r5
 80109d2:	6021      	streq	r1, [r4, #0]
 80109d4:	6054      	str	r4, [r2, #4]
 80109d6:	e7ca      	b.n	801096e <_free_r+0x26>
 80109d8:	b003      	add	sp, #12
 80109da:	bd30      	pop	{r4, r5, pc}
 80109dc:	2000700c 	.word	0x2000700c

080109e0 <sbrk_aligned>:
 80109e0:	b570      	push	{r4, r5, r6, lr}
 80109e2:	4e0e      	ldr	r6, [pc, #56]	; (8010a1c <sbrk_aligned+0x3c>)
 80109e4:	460c      	mov	r4, r1
 80109e6:	6831      	ldr	r1, [r6, #0]
 80109e8:	4605      	mov	r5, r0
 80109ea:	b911      	cbnz	r1, 80109f2 <sbrk_aligned+0x12>
 80109ec:	f000 f8f6 	bl	8010bdc <_sbrk_r>
 80109f0:	6030      	str	r0, [r6, #0]
 80109f2:	4621      	mov	r1, r4
 80109f4:	4628      	mov	r0, r5
 80109f6:	f000 f8f1 	bl	8010bdc <_sbrk_r>
 80109fa:	1c43      	adds	r3, r0, #1
 80109fc:	d00a      	beq.n	8010a14 <sbrk_aligned+0x34>
 80109fe:	1cc4      	adds	r4, r0, #3
 8010a00:	f024 0403 	bic.w	r4, r4, #3
 8010a04:	42a0      	cmp	r0, r4
 8010a06:	d007      	beq.n	8010a18 <sbrk_aligned+0x38>
 8010a08:	1a21      	subs	r1, r4, r0
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	f000 f8e6 	bl	8010bdc <_sbrk_r>
 8010a10:	3001      	adds	r0, #1
 8010a12:	d101      	bne.n	8010a18 <sbrk_aligned+0x38>
 8010a14:	f04f 34ff 	mov.w	r4, #4294967295
 8010a18:	4620      	mov	r0, r4
 8010a1a:	bd70      	pop	{r4, r5, r6, pc}
 8010a1c:	20007010 	.word	0x20007010

08010a20 <_malloc_r>:
 8010a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a24:	1ccd      	adds	r5, r1, #3
 8010a26:	f025 0503 	bic.w	r5, r5, #3
 8010a2a:	3508      	adds	r5, #8
 8010a2c:	2d0c      	cmp	r5, #12
 8010a2e:	bf38      	it	cc
 8010a30:	250c      	movcc	r5, #12
 8010a32:	2d00      	cmp	r5, #0
 8010a34:	4607      	mov	r7, r0
 8010a36:	db01      	blt.n	8010a3c <_malloc_r+0x1c>
 8010a38:	42a9      	cmp	r1, r5
 8010a3a:	d905      	bls.n	8010a48 <_malloc_r+0x28>
 8010a3c:	230c      	movs	r3, #12
 8010a3e:	603b      	str	r3, [r7, #0]
 8010a40:	2600      	movs	r6, #0
 8010a42:	4630      	mov	r0, r6
 8010a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a48:	4e2e      	ldr	r6, [pc, #184]	; (8010b04 <_malloc_r+0xe4>)
 8010a4a:	f000 f8d7 	bl	8010bfc <__malloc_lock>
 8010a4e:	6833      	ldr	r3, [r6, #0]
 8010a50:	461c      	mov	r4, r3
 8010a52:	bb34      	cbnz	r4, 8010aa2 <_malloc_r+0x82>
 8010a54:	4629      	mov	r1, r5
 8010a56:	4638      	mov	r0, r7
 8010a58:	f7ff ffc2 	bl	80109e0 <sbrk_aligned>
 8010a5c:	1c43      	adds	r3, r0, #1
 8010a5e:	4604      	mov	r4, r0
 8010a60:	d14d      	bne.n	8010afe <_malloc_r+0xde>
 8010a62:	6834      	ldr	r4, [r6, #0]
 8010a64:	4626      	mov	r6, r4
 8010a66:	2e00      	cmp	r6, #0
 8010a68:	d140      	bne.n	8010aec <_malloc_r+0xcc>
 8010a6a:	6823      	ldr	r3, [r4, #0]
 8010a6c:	4631      	mov	r1, r6
 8010a6e:	4638      	mov	r0, r7
 8010a70:	eb04 0803 	add.w	r8, r4, r3
 8010a74:	f000 f8b2 	bl	8010bdc <_sbrk_r>
 8010a78:	4580      	cmp	r8, r0
 8010a7a:	d13a      	bne.n	8010af2 <_malloc_r+0xd2>
 8010a7c:	6821      	ldr	r1, [r4, #0]
 8010a7e:	3503      	adds	r5, #3
 8010a80:	1a6d      	subs	r5, r5, r1
 8010a82:	f025 0503 	bic.w	r5, r5, #3
 8010a86:	3508      	adds	r5, #8
 8010a88:	2d0c      	cmp	r5, #12
 8010a8a:	bf38      	it	cc
 8010a8c:	250c      	movcc	r5, #12
 8010a8e:	4629      	mov	r1, r5
 8010a90:	4638      	mov	r0, r7
 8010a92:	f7ff ffa5 	bl	80109e0 <sbrk_aligned>
 8010a96:	3001      	adds	r0, #1
 8010a98:	d02b      	beq.n	8010af2 <_malloc_r+0xd2>
 8010a9a:	6823      	ldr	r3, [r4, #0]
 8010a9c:	442b      	add	r3, r5
 8010a9e:	6023      	str	r3, [r4, #0]
 8010aa0:	e00e      	b.n	8010ac0 <_malloc_r+0xa0>
 8010aa2:	6822      	ldr	r2, [r4, #0]
 8010aa4:	1b52      	subs	r2, r2, r5
 8010aa6:	d41e      	bmi.n	8010ae6 <_malloc_r+0xc6>
 8010aa8:	2a0b      	cmp	r2, #11
 8010aaa:	d916      	bls.n	8010ada <_malloc_r+0xba>
 8010aac:	1961      	adds	r1, r4, r5
 8010aae:	42a3      	cmp	r3, r4
 8010ab0:	6025      	str	r5, [r4, #0]
 8010ab2:	bf18      	it	ne
 8010ab4:	6059      	strne	r1, [r3, #4]
 8010ab6:	6863      	ldr	r3, [r4, #4]
 8010ab8:	bf08      	it	eq
 8010aba:	6031      	streq	r1, [r6, #0]
 8010abc:	5162      	str	r2, [r4, r5]
 8010abe:	604b      	str	r3, [r1, #4]
 8010ac0:	4638      	mov	r0, r7
 8010ac2:	f104 060b 	add.w	r6, r4, #11
 8010ac6:	f000 f89f 	bl	8010c08 <__malloc_unlock>
 8010aca:	f026 0607 	bic.w	r6, r6, #7
 8010ace:	1d23      	adds	r3, r4, #4
 8010ad0:	1af2      	subs	r2, r6, r3
 8010ad2:	d0b6      	beq.n	8010a42 <_malloc_r+0x22>
 8010ad4:	1b9b      	subs	r3, r3, r6
 8010ad6:	50a3      	str	r3, [r4, r2]
 8010ad8:	e7b3      	b.n	8010a42 <_malloc_r+0x22>
 8010ada:	6862      	ldr	r2, [r4, #4]
 8010adc:	42a3      	cmp	r3, r4
 8010ade:	bf0c      	ite	eq
 8010ae0:	6032      	streq	r2, [r6, #0]
 8010ae2:	605a      	strne	r2, [r3, #4]
 8010ae4:	e7ec      	b.n	8010ac0 <_malloc_r+0xa0>
 8010ae6:	4623      	mov	r3, r4
 8010ae8:	6864      	ldr	r4, [r4, #4]
 8010aea:	e7b2      	b.n	8010a52 <_malloc_r+0x32>
 8010aec:	4634      	mov	r4, r6
 8010aee:	6876      	ldr	r6, [r6, #4]
 8010af0:	e7b9      	b.n	8010a66 <_malloc_r+0x46>
 8010af2:	230c      	movs	r3, #12
 8010af4:	603b      	str	r3, [r7, #0]
 8010af6:	4638      	mov	r0, r7
 8010af8:	f000 f886 	bl	8010c08 <__malloc_unlock>
 8010afc:	e7a1      	b.n	8010a42 <_malloc_r+0x22>
 8010afe:	6025      	str	r5, [r4, #0]
 8010b00:	e7de      	b.n	8010ac0 <_malloc_r+0xa0>
 8010b02:	bf00      	nop
 8010b04:	2000700c 	.word	0x2000700c

08010b08 <cleanup_glue>:
 8010b08:	b538      	push	{r3, r4, r5, lr}
 8010b0a:	460c      	mov	r4, r1
 8010b0c:	6809      	ldr	r1, [r1, #0]
 8010b0e:	4605      	mov	r5, r0
 8010b10:	b109      	cbz	r1, 8010b16 <cleanup_glue+0xe>
 8010b12:	f7ff fff9 	bl	8010b08 <cleanup_glue>
 8010b16:	4621      	mov	r1, r4
 8010b18:	4628      	mov	r0, r5
 8010b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b1e:	f7ff bf13 	b.w	8010948 <_free_r>
	...

08010b24 <_reclaim_reent>:
 8010b24:	4b2c      	ldr	r3, [pc, #176]	; (8010bd8 <_reclaim_reent+0xb4>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	4283      	cmp	r3, r0
 8010b2a:	b570      	push	{r4, r5, r6, lr}
 8010b2c:	4604      	mov	r4, r0
 8010b2e:	d051      	beq.n	8010bd4 <_reclaim_reent+0xb0>
 8010b30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010b32:	b143      	cbz	r3, 8010b46 <_reclaim_reent+0x22>
 8010b34:	68db      	ldr	r3, [r3, #12]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d14a      	bne.n	8010bd0 <_reclaim_reent+0xac>
 8010b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b3c:	6819      	ldr	r1, [r3, #0]
 8010b3e:	b111      	cbz	r1, 8010b46 <_reclaim_reent+0x22>
 8010b40:	4620      	mov	r0, r4
 8010b42:	f7ff ff01 	bl	8010948 <_free_r>
 8010b46:	6961      	ldr	r1, [r4, #20]
 8010b48:	b111      	cbz	r1, 8010b50 <_reclaim_reent+0x2c>
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	f7ff fefc 	bl	8010948 <_free_r>
 8010b50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010b52:	b111      	cbz	r1, 8010b5a <_reclaim_reent+0x36>
 8010b54:	4620      	mov	r0, r4
 8010b56:	f7ff fef7 	bl	8010948 <_free_r>
 8010b5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010b5c:	b111      	cbz	r1, 8010b64 <_reclaim_reent+0x40>
 8010b5e:	4620      	mov	r0, r4
 8010b60:	f7ff fef2 	bl	8010948 <_free_r>
 8010b64:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010b66:	b111      	cbz	r1, 8010b6e <_reclaim_reent+0x4a>
 8010b68:	4620      	mov	r0, r4
 8010b6a:	f7ff feed 	bl	8010948 <_free_r>
 8010b6e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010b70:	b111      	cbz	r1, 8010b78 <_reclaim_reent+0x54>
 8010b72:	4620      	mov	r0, r4
 8010b74:	f7ff fee8 	bl	8010948 <_free_r>
 8010b78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010b7a:	b111      	cbz	r1, 8010b82 <_reclaim_reent+0x5e>
 8010b7c:	4620      	mov	r0, r4
 8010b7e:	f7ff fee3 	bl	8010948 <_free_r>
 8010b82:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010b84:	b111      	cbz	r1, 8010b8c <_reclaim_reent+0x68>
 8010b86:	4620      	mov	r0, r4
 8010b88:	f7ff fede 	bl	8010948 <_free_r>
 8010b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b8e:	b111      	cbz	r1, 8010b96 <_reclaim_reent+0x72>
 8010b90:	4620      	mov	r0, r4
 8010b92:	f7ff fed9 	bl	8010948 <_free_r>
 8010b96:	69a3      	ldr	r3, [r4, #24]
 8010b98:	b1e3      	cbz	r3, 8010bd4 <_reclaim_reent+0xb0>
 8010b9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010b9c:	4620      	mov	r0, r4
 8010b9e:	4798      	blx	r3
 8010ba0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010ba2:	b1b9      	cbz	r1, 8010bd4 <_reclaim_reent+0xb0>
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010baa:	f7ff bfad 	b.w	8010b08 <cleanup_glue>
 8010bae:	5949      	ldr	r1, [r1, r5]
 8010bb0:	b941      	cbnz	r1, 8010bc4 <_reclaim_reent+0xa0>
 8010bb2:	3504      	adds	r5, #4
 8010bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bb6:	2d80      	cmp	r5, #128	; 0x80
 8010bb8:	68d9      	ldr	r1, [r3, #12]
 8010bba:	d1f8      	bne.n	8010bae <_reclaim_reent+0x8a>
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	f7ff fec3 	bl	8010948 <_free_r>
 8010bc2:	e7ba      	b.n	8010b3a <_reclaim_reent+0x16>
 8010bc4:	680e      	ldr	r6, [r1, #0]
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	f7ff febe 	bl	8010948 <_free_r>
 8010bcc:	4631      	mov	r1, r6
 8010bce:	e7ef      	b.n	8010bb0 <_reclaim_reent+0x8c>
 8010bd0:	2500      	movs	r5, #0
 8010bd2:	e7ef      	b.n	8010bb4 <_reclaim_reent+0x90>
 8010bd4:	bd70      	pop	{r4, r5, r6, pc}
 8010bd6:	bf00      	nop
 8010bd8:	20000100 	.word	0x20000100

08010bdc <_sbrk_r>:
 8010bdc:	b538      	push	{r3, r4, r5, lr}
 8010bde:	4d06      	ldr	r5, [pc, #24]	; (8010bf8 <_sbrk_r+0x1c>)
 8010be0:	2300      	movs	r3, #0
 8010be2:	4604      	mov	r4, r0
 8010be4:	4608      	mov	r0, r1
 8010be6:	602b      	str	r3, [r5, #0]
 8010be8:	f7f2 fb28 	bl	800323c <_sbrk>
 8010bec:	1c43      	adds	r3, r0, #1
 8010bee:	d102      	bne.n	8010bf6 <_sbrk_r+0x1a>
 8010bf0:	682b      	ldr	r3, [r5, #0]
 8010bf2:	b103      	cbz	r3, 8010bf6 <_sbrk_r+0x1a>
 8010bf4:	6023      	str	r3, [r4, #0]
 8010bf6:	bd38      	pop	{r3, r4, r5, pc}
 8010bf8:	20007014 	.word	0x20007014

08010bfc <__malloc_lock>:
 8010bfc:	4801      	ldr	r0, [pc, #4]	; (8010c04 <__malloc_lock+0x8>)
 8010bfe:	f7ff be7b 	b.w	80108f8 <__retarget_lock_acquire_recursive>
 8010c02:	bf00      	nop
 8010c04:	20007008 	.word	0x20007008

08010c08 <__malloc_unlock>:
 8010c08:	4801      	ldr	r0, [pc, #4]	; (8010c10 <__malloc_unlock+0x8>)
 8010c0a:	f7ff be76 	b.w	80108fa <__retarget_lock_release_recursive>
 8010c0e:	bf00      	nop
 8010c10:	20007008 	.word	0x20007008

08010c14 <_init>:
 8010c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c16:	bf00      	nop
 8010c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c1a:	bc08      	pop	{r3}
 8010c1c:	469e      	mov	lr, r3
 8010c1e:	4770      	bx	lr

08010c20 <_fini>:
 8010c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c22:	bf00      	nop
 8010c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c26:	bc08      	pop	{r3}
 8010c28:	469e      	mov	lr, r3
 8010c2a:	4770      	bx	lr
