
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800e58c  0800e58c  0001e58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6e4  0800e6e4  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6e4  0800e6e4  0001e6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6ec  0800e6ec  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6ec  0800e6ec  0001e6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6f0  0800e6f0  0001e6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800e6f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006b5c  20000164  0800e858  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 0000c000  20006cc0  0800e858  00026cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029e69  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005af5  00000000  00000000  00049ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020c0  00000000  00000000  0004faf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e70  00000000  00000000  00051bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008de9  00000000  00000000  00053a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002942e  00000000  00000000  0005c811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1aa1  00000000  00000000  00085c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001776e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cd4  00000000  00000000  00177730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000164 	.word	0x20000164
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e574 	.word	0x0800e574

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000168 	.word	0x20000168
 800020c:	0800e574 	.word	0x0800e574

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 fc22 	bl	8001d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f844 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fcfe 	bl	8000f20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fca6 	bl	8000e74 <MX_DMA_Init>
  MX_ADC1_Init();
 8000528:	f000 f8b0 	bl	800068c <MX_ADC1_Init>
  MX_ADC2_Init();
 800052c:	f000 f93a 	bl	80007a4 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000530:	f000 f9c2 	bl	80008b8 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000534:	f000 fa38 	bl	80009a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000538:	f000 fad6 	bl	8000ae8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800053c:	f000 fb4a 	bl	8000bd4 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000540:	f000 fbf6 	bl	8000d30 <MX_TIM8_Init>
  MX_I2C1_Init();
 8000544:	f000 fa02 	bl	800094c <MX_I2C1_Init>
  MX_CRC_Init();
 8000548:	f000 f9ec 	bl	8000924 <MX_CRC_Init>
  MX_TIM6_Init();
 800054c:	f000 fbba 	bl	8000cc4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000550:	f00a f940 	bl	800a7d4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of canRxSemaphore */
  canRxSemaphoreHandle = osSemaphoreNew(1, 1, &canRxSemaphore_attributes);
 8000554:	4a0d      	ldr	r2, [pc, #52]	; (800058c <main+0x78>)
 8000556:	2101      	movs	r1, #1
 8000558:	2001      	movs	r0, #1
 800055a:	f00a fa37 	bl	800a9cc <osSemaphoreNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <main+0x7c>)
 8000562:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of processQueue */
  processQueueHandle = osMessageQueueNew (5, sizeof(PDM_Data_Queue_Struct), &processQueue_attributes);
 8000564:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <main+0x80>)
 8000566:	2114      	movs	r1, #20
 8000568:	2005      	movs	r0, #5
 800056a:	f00a fafd 	bl	800ab68 <osMessageQueueNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a09      	ldr	r2, [pc, #36]	; (8000598 <main+0x84>)
 8000572:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of setupTask */
  setupTaskHandle = osThreadNew(StartSetupTask, NULL, &setupTask_attributes);
 8000574:	4a09      	ldr	r2, [pc, #36]	; (800059c <main+0x88>)
 8000576:	2100      	movs	r1, #0
 8000578:	4809      	ldr	r0, [pc, #36]	; (80005a0 <main+0x8c>)
 800057a:	f00a f975 	bl	800a868 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <main+0x90>)
 8000582:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f00a f94a 	bl	800a81c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x74>
 800058a:	bf00      	nop
 800058c:	0800e654 	.word	0x0800e654
 8000590:	20000644 	.word	0x20000644
 8000594:	0800e63c 	.word	0x0800e63c
 8000598:	20000640 	.word	0x20000640
 800059c:	0800e618 	.word	0x0800e618
 80005a0:	08001159 	.word	0x08001159
 80005a4:	2000063c 	.word	0x2000063c

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2234      	movs	r2, #52	; 0x34
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f00d ff12 	bl	800e3e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <SystemClock_Config+0xdc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <SystemClock_Config+0xdc>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b29      	ldr	r3, [pc, #164]	; (8000684 <SystemClock_Config+0xdc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4b26      	ldr	r3, [pc, #152]	; (8000688 <SystemClock_Config+0xe0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a25      	ldr	r2, [pc, #148]	; (8000688 <SystemClock_Config+0xe0>)
 80005f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <SystemClock_Config+0xe0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800061c:	23b4      	movs	r3, #180	; 0xb4
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000624:	2308      	movs	r3, #8
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4618      	mov	r0, r3
 8000632:	f005 fa55 	bl	8005ae0 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800063c:	f000 fdc6 	bl	80011cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000640:	f004 fb58 	bl	8004cf4 <HAL_PWREx_EnableOverDrive>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800064a:	f000 fdbf 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2302      	movs	r3, #2
 8000654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	2105      	movs	r1, #5
 800066c:	4618      	mov	r0, r3
 800066e:	f004 fb91 	bl	8004d94 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000678:	f000 fda8 	bl	80011cc <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	; 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800069e:	4b3d      	ldr	r3, [pc, #244]	; (8000794 <MX_ADC1_Init+0x108>)
 80006a0:	4a3d      	ldr	r2, [pc, #244]	; (8000798 <MX_ADC1_Init+0x10c>)
 80006a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <MX_ADC1_Init+0x108>)
 80006a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ac:	4b39      	ldr	r3, [pc, #228]	; (8000794 <MX_ADC1_Init+0x108>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <MX_ADC1_Init+0x108>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006b8:	4b36      	ldr	r3, [pc, #216]	; (8000794 <MX_ADC1_Init+0x108>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b35      	ldr	r3, [pc, #212]	; (8000794 <MX_ADC1_Init+0x108>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c6:	4b33      	ldr	r3, [pc, #204]	; (8000794 <MX_ADC1_Init+0x108>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	4b31      	ldr	r3, [pc, #196]	; (8000794 <MX_ADC1_Init+0x108>)
 80006ce:	4a33      	ldr	r2, [pc, #204]	; (800079c <MX_ADC1_Init+0x110>)
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b30      	ldr	r3, [pc, #192]	; (8000794 <MX_ADC1_Init+0x108>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80006d8:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <MX_ADC1_Init+0x108>)
 80006da:	2205      	movs	r2, #5
 80006dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <MX_ADC1_Init+0x108>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <MX_ADC1_Init+0x108>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ec:	4829      	ldr	r0, [pc, #164]	; (8000794 <MX_ADC1_Init+0x108>)
 80006ee:	f001 fb9d 	bl	8001e2c <HAL_ADC_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006f8:	f000 fd68 	bl	80011cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006fc:	2305      	movs	r3, #5
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000700:	2301      	movs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000704:	2307      	movs	r3, #7
 8000706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4821      	ldr	r0, [pc, #132]	; (8000794 <MX_ADC1_Init+0x108>)
 800070e:	f001 fbd1 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000718:	f000 fd58 	bl	80011cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800071c:	2306      	movs	r3, #6
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	481a      	ldr	r0, [pc, #104]	; (8000794 <MX_ADC1_Init+0x108>)
 800072a:	f001 fbc3 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000734:	f000 fd4a 	bl	80011cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000738:	2307      	movs	r3, #7
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800073c:	2303      	movs	r3, #3
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	4813      	ldr	r0, [pc, #76]	; (8000794 <MX_ADC1_Init+0x108>)
 8000746:	f001 fbb5 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000750:	f000 fd3c 	bl	80011cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000754:	230e      	movs	r3, #14
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <MX_ADC1_Init+0x108>)
 8000762:	f001 fba7 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800076c:	f000 fd2e 	bl	80011cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000770:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_ADC1_Init+0x114>)
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000774:	2305      	movs	r3, #5
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_ADC1_Init+0x108>)
 800077e:	f001 fb99 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000788:	f000 fd20 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000180 	.word	0x20000180
 8000798:	40012000 	.word	0x40012000
 800079c:	0f000001 	.word	0x0f000001
 80007a0:	10000012 	.word	0x10000012

080007a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80007b6:	4b3d      	ldr	r3, [pc, #244]	; (80008ac <MX_ADC2_Init+0x108>)
 80007b8:	4a3d      	ldr	r2, [pc, #244]	; (80008b0 <MX_ADC2_Init+0x10c>)
 80007ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007bc:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <MX_ADC2_Init+0x108>)
 80007be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007c4:	4b39      	ldr	r3, [pc, #228]	; (80008ac <MX_ADC2_Init+0x108>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80007ca:	4b38      	ldr	r3, [pc, #224]	; (80008ac <MX_ADC2_Init+0x108>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007d0:	4b36      	ldr	r3, [pc, #216]	; (80008ac <MX_ADC2_Init+0x108>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007d6:	4b35      	ldr	r3, [pc, #212]	; (80008ac <MX_ADC2_Init+0x108>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007de:	4b33      	ldr	r3, [pc, #204]	; (80008ac <MX_ADC2_Init+0x108>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e4:	4b31      	ldr	r3, [pc, #196]	; (80008ac <MX_ADC2_Init+0x108>)
 80007e6:	4a33      	ldr	r2, [pc, #204]	; (80008b4 <MX_ADC2_Init+0x110>)
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ea:	4b30      	ldr	r3, [pc, #192]	; (80008ac <MX_ADC2_Init+0x108>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 80007f0:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <MX_ADC2_Init+0x108>)
 80007f2:	2205      	movs	r2, #5
 80007f4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <MX_ADC2_Init+0x108>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <MX_ADC2_Init+0x108>)
 8000800:	2201      	movs	r2, #1
 8000802:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000804:	4829      	ldr	r0, [pc, #164]	; (80008ac <MX_ADC2_Init+0x108>)
 8000806:	f001 fb11 	bl	8001e2c <HAL_ADC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000810:	f000 fcdc 	bl	80011cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800081c:	2307      	movs	r3, #7
 800081e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	4821      	ldr	r0, [pc, #132]	; (80008ac <MX_ADC2_Init+0x108>)
 8000826:	f001 fb45 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000830:	f000 fccc 	bl	80011cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000834:	2301      	movs	r3, #1
 8000836:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	481a      	ldr	r0, [pc, #104]	; (80008ac <MX_ADC2_Init+0x108>)
 8000842:	f001 fb37 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800084c:	f000 fcbe 	bl	80011cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000850:	2302      	movs	r3, #2
 8000852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000854:	2303      	movs	r3, #3
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <MX_ADC2_Init+0x108>)
 800085e:	f001 fb29 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000868:	f000 fcb0 	bl	80011cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800086c:	2303      	movs	r3, #3
 800086e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <MX_ADC2_Init+0x108>)
 800087a:	f001 fb1b 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000884:	f000 fca2 	bl	80011cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000888:	2304      	movs	r3, #4
 800088a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800088c:	2305      	movs	r3, #5
 800088e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_ADC2_Init+0x108>)
 8000896:	f001 fb0d 	bl	8001eb4 <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80008a0:	f000 fc94 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200001c8 	.word	0x200001c8
 80008b0:	40012100 	.word	0x40012100
 80008b4:	0f000001 	.word	0x0f000001

080008b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_CAN1_Init+0x64>)
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <MX_CAN1_Init+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_CAN1_Init+0x64>)
 80008c4:	2205      	movs	r2, #5
 80008c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_CAN1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_CAN1_Init+0x64>)
 80008d0:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80008d4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_CAN1_Init+0x64>)
 80008d8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80008dc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_CAN1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008e4:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_CAN1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_CAN1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_CAN1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_CAN1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_CAN1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_CAN1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_CAN1_Init+0x64>)
 800090a:	f001 fd01 	bl	8002310 <HAL_CAN_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000914:	f000 fc5a 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200002d0 	.word	0x200002d0
 8000920:	40006400 	.word	0x40006400

08000924 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_CRC_Init+0x20>)
 800092a:	4a07      	ldr	r2, [pc, #28]	; (8000948 <MX_CRC_Init+0x24>)
 800092c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_CRC_Init+0x20>)
 8000930:	f002 f8fa 	bl	8002b28 <HAL_CRC_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800093a:	f000 fc47 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200002f8 	.word	0x200002f8
 8000948:	40023000 	.word	0x40023000

0800094c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_I2C1_Init+0x50>)
 8000952:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <MX_I2C1_Init+0x54>)
 8000954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_I2C1_Init+0x50>)
 8000958:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <MX_I2C1_Init+0x58>)
 800095a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_I2C1_Init+0x50>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_I2C1_Init+0x50>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_I2C1_Init+0x50>)
 800096a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800096e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_I2C1_Init+0x50>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_I2C1_Init+0x50>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_I2C1_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_I2C1_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_I2C1_Init+0x50>)
 800098a:	f002 fd99 	bl	80034c0 <HAL_I2C_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000994:	f000 fc1a 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000300 	.word	0x20000300
 80009a0:	40005400 	.word	0x40005400
 80009a4:	00061a80 	.word	0x00061a80

080009a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b096      	sub	sp, #88	; 0x58
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
 80009d6:	615a      	str	r2, [r3, #20]
 80009d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2220      	movs	r2, #32
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f00d fcfd 	bl	800e3e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009e6:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <MX_TIM1_Init+0x138>)
 80009e8:	4a3e      	ldr	r2, [pc, #248]	; (8000ae4 <MX_TIM1_Init+0x13c>)
 80009ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1799;
 80009ec:	4b3c      	ldr	r3, [pc, #240]	; (8000ae0 <MX_TIM1_Init+0x138>)
 80009ee:	f240 7207 	movw	r2, #1799	; 0x707
 80009f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <MX_TIM1_Init+0x138>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80009fa:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <MX_TIM1_Init+0x138>)
 80009fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a02:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a08:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a14:	4832      	ldr	r0, [pc, #200]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000a16:	f005 fb01 	bl	800601c <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a20:	f000 fbd4 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a2e:	4619      	mov	r1, r3
 8000a30:	482b      	ldr	r0, [pc, #172]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000a32:	f005 fe05 	bl	8006640 <HAL_TIM_ConfigClockSource>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a3c:	f000 fbc6 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a40:	4827      	ldr	r0, [pc, #156]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000a42:	f005 fbda 	bl	80061fa <HAL_TIM_PWM_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a4c:	f000 fbbe 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4820      	ldr	r0, [pc, #128]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000a60:	f006 f9c8 	bl	8006df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a6a:	f000 fbaf 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6e:	2360      	movs	r3, #96	; 0x60
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000a90:	f005 fd14 	bl	80064bc <HAL_TIM_PWM_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000a9a:	f000 fb97 	bl	80011cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000ac2:	f006 fa13 	bl	8006eec <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000acc:	f000 fb7e 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <MX_TIM1_Init+0x138>)
 8000ad2:	f000 ff1d 	bl	8001910 <HAL_TIM_MspPostInit>

}
 8000ad6:	bf00      	nop
 8000ad8:	3758      	adds	r7, #88	; 0x58
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000354 	.word	0x20000354
 8000ae4:	40010000 	.word	0x40010000

08000ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afc:	f107 0320 	add.w	r3, r7, #32
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
 8000b14:	615a      	str	r2, [r3, #20]
 8000b16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b18:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b22:	f240 3283 	movw	r2, #899	; 0x383
 8000b26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b2e:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b42:	4823      	ldr	r0, [pc, #140]	; (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b44:	f005 fa6a 	bl	800601c <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b4e:	f000 fb3d 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481c      	ldr	r0, [pc, #112]	; (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b60:	f005 fd6e 	bl	8006640 <HAL_TIM_ConfigClockSource>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b6a:	f000 fb2f 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b6e:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b70:	f005 fb43 	bl	80061fa <HAL_TIM_PWM_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b7a:	f000 fb27 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <MX_TIM2_Init+0xe8>)
 8000b8e:	f006 f931 	bl	8006df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b98:	f000 fb18 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9c:	2360      	movs	r3, #96	; 0x60
 8000b9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2208      	movs	r2, #8
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <MX_TIM2_Init+0xe8>)
 8000bb4:	f005 fc82 	bl	80064bc <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000bbe:	f000 fb05 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bc2:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <MX_TIM2_Init+0xe8>)
 8000bc4:	f000 fea4 	bl	8001910 <HAL_TIM_MspPostInit>

}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	; 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000039c 	.word	0x2000039c

08000bd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	f107 0320 	add.w	r3, r7, #32
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	615a      	str	r2, [r3, #20]
 8000c02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <MX_TIM3_Init+0xe8>)
 8000c06:	4a2e      	ldr	r2, [pc, #184]	; (8000cc0 <MX_TIM3_Init+0xec>)
 8000c08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <MX_TIM3_Init+0xe8>)
 8000c0c:	f240 3283 	movw	r2, #899	; 0x383
 8000c10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c12:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <MX_TIM3_Init+0xe8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c18:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <MX_TIM3_Init+0xe8>)
 8000c1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c20:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <MX_TIM3_Init+0xe8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <MX_TIM3_Init+0xe8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c2c:	4823      	ldr	r0, [pc, #140]	; (8000cbc <MX_TIM3_Init+0xe8>)
 8000c2e:	f005 f9f5 	bl	800601c <HAL_TIM_Base_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c38:	f000 fac8 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c46:	4619      	mov	r1, r3
 8000c48:	481c      	ldr	r0, [pc, #112]	; (8000cbc <MX_TIM3_Init+0xe8>)
 8000c4a:	f005 fcf9 	bl	8006640 <HAL_TIM_ConfigClockSource>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c54:	f000 faba 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c58:	4818      	ldr	r0, [pc, #96]	; (8000cbc <MX_TIM3_Init+0xe8>)
 8000c5a:	f005 face 	bl	80061fa <HAL_TIM_PWM_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c64:	f000 fab2 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c70:	f107 0320 	add.w	r3, r7, #32
 8000c74:	4619      	mov	r1, r3
 8000c76:	4811      	ldr	r0, [pc, #68]	; (8000cbc <MX_TIM3_Init+0xe8>)
 8000c78:	f006 f8bc 	bl	8006df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c82:	f000 faa3 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c86:	2360      	movs	r3, #96	; 0x60
 8000c88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	220c      	movs	r2, #12
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <MX_TIM3_Init+0xe8>)
 8000c9e:	f005 fc0d 	bl	80064bc <HAL_TIM_PWM_ConfigChannel>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ca8:	f000 fa90 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <MX_TIM3_Init+0xe8>)
 8000cae:	f000 fe2f 	bl	8001910 <HAL_TIM_MspPostInit>

}
 8000cb2:	bf00      	nop
 8000cb4:	3738      	adds	r7, #56	; 0x38
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200003e4 	.word	0x200003e4
 8000cc0:	40000400 	.word	0x40000400

08000cc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <MX_TIM6_Init+0x68>)
 8000cd6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000cda:	2259      	movs	r2, #89	; 0x59
 8000cdc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xfffe;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000ce6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000cea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000cf4:	f005 f992 	bl	800601c <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000cfe:	f000 fa65 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000d10:	f006 f870 	bl	8006df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d1a:	f000 fa57 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000042c 	.word	0x2000042c
 8000d2c:	40001000 	.word	0x40001000

08000d30 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b096      	sub	sp, #88	; 0x58
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
 8000d5e:	615a      	str	r2, [r3, #20]
 8000d60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2220      	movs	r2, #32
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f00d fb39 	bl	800e3e0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d6e:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000d70:	4a3f      	ldr	r2, [pc, #252]	; (8000e70 <MX_TIM8_Init+0x140>)
 8000d72:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1799;
 8000d74:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000d76:	f240 7207 	movw	r2, #1799	; 0x707
 8000d7a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000d82:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000d84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d88:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8a:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d90:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000d9c:	4833      	ldr	r0, [pc, #204]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000d9e:	f005 f93d 	bl	800601c <HAL_TIM_Base_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000da8:	f000 fa10 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000db2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000db6:	4619      	mov	r1, r3
 8000db8:	482c      	ldr	r0, [pc, #176]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000dba:	f005 fc41 	bl	8006640 <HAL_TIM_ConfigClockSource>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000dc4:	f000 fa02 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000dc8:	4828      	ldr	r0, [pc, #160]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000dca:	f005 fa16 	bl	80061fa <HAL_TIM_PWM_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000dd4:	f000 f9fa 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000de0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000de4:	4619      	mov	r1, r3
 8000de6:	4821      	ldr	r0, [pc, #132]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000de8:	f006 f804 	bl	8006df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000df2:	f000 f9eb 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df6:	2360      	movs	r3, #96	; 0x60
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	2204      	movs	r2, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4814      	ldr	r0, [pc, #80]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000e1c:	f005 fb4e 	bl	80064bc <HAL_TIM_PWM_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000e26:	f000 f9d1 	bl	80011cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000e4e:	f006 f84d 	bl	8006eec <HAL_TIMEx_ConfigBreakDeadTime>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8000e58:	f000 f9b8 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <MX_TIM8_Init+0x13c>)
 8000e5e:	f000 fd57 	bl	8001910 <HAL_TIM_MspPostInit>

}
 8000e62:	bf00      	nop
 8000e64:	3758      	adds	r7, #88	; 0x58
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000474 	.word	0x20000474
 8000e70:	40010400 	.word	0x40010400

08000e74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <MX_DMA_Init+0xa8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a26      	ldr	r2, [pc, #152]	; (8000f1c <MX_DMA_Init+0xa8>)
 8000e84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_DMA_Init+0xa8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <MX_DMA_Init+0xa8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <MX_DMA_Init+0xa8>)
 8000ea0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <MX_DMA_Init+0xa8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2105      	movs	r1, #5
 8000eb6:	200c      	movs	r0, #12
 8000eb8:	f001 fe0c 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ebc:	200c      	movs	r0, #12
 8000ebe:	f001 fe25 	bl	8002b0c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	200d      	movs	r0, #13
 8000ec8:	f001 fe04 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ecc:	200d      	movs	r0, #13
 8000ece:	f001 fe1d 	bl	8002b0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2105      	movs	r1, #5
 8000ed6:	2038      	movs	r0, #56	; 0x38
 8000ed8:	f001 fdfc 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000edc:	2038      	movs	r0, #56	; 0x38
 8000ede:	f001 fe15 	bl	8002b0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	203a      	movs	r0, #58	; 0x3a
 8000ee8:	f001 fdf4 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000eec:	203a      	movs	r0, #58	; 0x3a
 8000eee:	f001 fe0d 	bl	8002b0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	203b      	movs	r0, #59	; 0x3b
 8000ef8:	f001 fdec 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000efc:	203b      	movs	r0, #59	; 0x3b
 8000efe:	f001 fe05 	bl	8002b0c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2105      	movs	r1, #5
 8000f06:	203c      	movs	r0, #60	; 0x3c
 8000f08:	f001 fde4 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000f0c:	203c      	movs	r0, #60	; 0x3c
 8000f0e:	f001 fdfd 	bl	8002b0c <HAL_NVIC_EnableIRQ>

}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08e      	sub	sp, #56	; 0x38
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
 8000f3a:	4b80      	ldr	r3, [pc, #512]	; (800113c <MX_GPIO_Init+0x21c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a7f      	ldr	r2, [pc, #508]	; (800113c <MX_GPIO_Init+0x21c>)
 8000f40:	f043 0310 	orr.w	r3, r3, #16
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b7d      	ldr	r3, [pc, #500]	; (800113c <MX_GPIO_Init+0x21c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	623b      	str	r3, [r7, #32]
 8000f50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	4b79      	ldr	r3, [pc, #484]	; (800113c <MX_GPIO_Init+0x21c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a78      	ldr	r2, [pc, #480]	; (800113c <MX_GPIO_Init+0x21c>)
 8000f5c:	f043 0320 	orr.w	r3, r3, #32
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b76      	ldr	r3, [pc, #472]	; (800113c <MX_GPIO_Init+0x21c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0320 	and.w	r3, r3, #32
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	4b72      	ldr	r3, [pc, #456]	; (800113c <MX_GPIO_Init+0x21c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a71      	ldr	r2, [pc, #452]	; (800113c <MX_GPIO_Init+0x21c>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b6f      	ldr	r3, [pc, #444]	; (800113c <MX_GPIO_Init+0x21c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	4b6b      	ldr	r3, [pc, #428]	; (800113c <MX_GPIO_Init+0x21c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a6a      	ldr	r2, [pc, #424]	; (800113c <MX_GPIO_Init+0x21c>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b68      	ldr	r3, [pc, #416]	; (800113c <MX_GPIO_Init+0x21c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b64      	ldr	r3, [pc, #400]	; (800113c <MX_GPIO_Init+0x21c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a63      	ldr	r2, [pc, #396]	; (800113c <MX_GPIO_Init+0x21c>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b61      	ldr	r3, [pc, #388]	; (800113c <MX_GPIO_Init+0x21c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	; (800113c <MX_GPIO_Init+0x21c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a5c      	ldr	r2, [pc, #368]	; (800113c <MX_GPIO_Init+0x21c>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b5a      	ldr	r3, [pc, #360]	; (800113c <MX_GPIO_Init+0x21c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b56      	ldr	r3, [pc, #344]	; (800113c <MX_GPIO_Init+0x21c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a55      	ldr	r2, [pc, #340]	; (800113c <MX_GPIO_Init+0x21c>)
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b53      	ldr	r3, [pc, #332]	; (800113c <MX_GPIO_Init+0x21c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b4f      	ldr	r3, [pc, #316]	; (800113c <MX_GPIO_Init+0x21c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a4e      	ldr	r2, [pc, #312]	; (800113c <MX_GPIO_Init+0x21c>)
 8001004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b4c      	ldr	r3, [pc, #304]	; (800113c <MX_GPIO_Init+0x21c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FAULTRST_Pin|SEL1_Pin|SEL0_Pin|SEN_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	213c      	movs	r1, #60	; 0x3c
 800101a:	4849      	ldr	r0, [pc, #292]	; (8001140 <MX_GPIO_Init+0x220>)
 800101c:	f002 fa1e 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001026:	4847      	ldr	r0, [pc, #284]	; (8001144 <MX_GPIO_Init+0x224>)
 8001028:	f002 fa18 	bl	800345c <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001032:	4845      	ldr	r0, [pc, #276]	; (8001148 <MX_GPIO_Init+0x228>)
 8001034:	f002 fa12 	bl	800345c <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : FAULTRST_Pin SEL1_Pin SEL0_Pin SEN_Pin */
  GPIO_InitStruct.Pin = FAULTRST_Pin|SEL1_Pin|SEL0_Pin|SEN_Pin;
 8001038:	233c      	movs	r3, #60	; 0x3c
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800103c:	2311      	movs	r3, #17
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	483c      	ldr	r0, [pc, #240]	; (8001140 <MX_GPIO_Init+0x220>)
 8001050:	f002 f870 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 8001054:	230f      	movs	r3, #15
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001058:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	4838      	ldr	r0, [pc, #224]	; (800114c <MX_GPIO_Init+0x22c>)
 800106a:	f002 f863 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 800106e:	f24f 0330 	movw	r3, #61488	; 0xf030
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001074:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	4619      	mov	r1, r3
 8001084:	4832      	ldr	r0, [pc, #200]	; (8001150 <MX_GPIO_Init+0x230>)
 8001086:	f002 f855 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 800108a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001090:	2311      	movs	r3, #17
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a0:	4619      	mov	r1, r3
 80010a2:	4828      	ldr	r0, [pc, #160]	; (8001144 <MX_GPIO_Init+0x224>)
 80010a4:	f002 f846 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 80010a8:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010ae:	2311      	movs	r3, #17
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	4619      	mov	r1, r3
 80010c0:	4821      	ldr	r0, [pc, #132]	; (8001148 <MX_GPIO_Init+0x228>)
 80010c2:	f002 f837 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 80010c6:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010cc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	481d      	ldr	r0, [pc, #116]	; (8001154 <MX_GPIO_Init+0x234>)
 80010de:	f002 f829 	bl	8003134 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2105      	movs	r1, #5
 80010e6:	2006      	movs	r0, #6
 80010e8:	f001 fcf4 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010ec:	2006      	movs	r0, #6
 80010ee:	f001 fd0d 	bl	8002b0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2105      	movs	r1, #5
 80010f6:	2007      	movs	r0, #7
 80010f8:	f001 fcec 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010fc:	2007      	movs	r0, #7
 80010fe:	f001 fd05 	bl	8002b0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2105      	movs	r1, #5
 8001106:	2008      	movs	r0, #8
 8001108:	f001 fce4 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800110c:	2008      	movs	r0, #8
 800110e:	f001 fcfd 	bl	8002b0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2105      	movs	r1, #5
 8001116:	2009      	movs	r0, #9
 8001118:	f001 fcdc 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800111c:	2009      	movs	r0, #9
 800111e:	f001 fcf5 	bl	8002b0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2105      	movs	r1, #5
 8001126:	200a      	movs	r0, #10
 8001128:	f001 fcd4 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800112c:	200a      	movs	r0, #10
 800112e:	f001 fced 	bl	8002b0c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001132:	bf00      	nop
 8001134:	3738      	adds	r7, #56	; 0x38
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40021000 	.word	0x40021000
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021800 	.word	0x40021800
 800114c:	40021400 	.word	0x40021400
 8001150:	40020400 	.word	0x40020400
 8001154:	40020800 	.word	0x40020800

08001158 <StartSetupTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSetupTask */
void StartSetupTask(void *argument)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001160:	f00c fba4 	bl	800d8ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osThreadYield();
 8001164:	f009 fc12 	bl	800a98c <osThreadYield>
 8001168:	e7fc      	b.n	8001164 <StartSetupTask+0xc>
	...

0800116c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	PDM_Data_Queue_Struct data = {.source = Interrupt_Gpio};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	2303      	movs	r3, #3
 8001186:	773b      	strb	r3, [r7, #28]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8001192:	f000 fe07 	bl	8001da4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d10a      	bne.n	80011b6 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
	  HAL_TIM_Base_Stop_IT(htim);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f004 fffb 	bl	800619c <HAL_TIM_Base_Stop_IT>
	  osMessageQueuePut(processQueueHandle, (void*) &data, 0, 0);
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	f107 010c 	add.w	r1, r7, #12
 80011ae:	2300      	movs	r3, #0
 80011b0:	2200      	movs	r2, #0
 80011b2:	f009 fd4d 	bl	800ac50 <osMessageQueuePut>
  }
  /* USER CODE END Callback 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40014000 	.word	0x40014000
 80011c4:	40001000 	.word	0x40001000
 80011c8:	20000640 	.word	0x20000640

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <HAL_CAN_RxFifo0MsgPendingCallback>:
#include "pdm.h"

/*BEGIN PERIPHERAL CALLBACK FUNCTIONS*/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(canRxSemaphoreHandle);	//Release semaphore to PDM_CAN_Thread_Receive_Data Thread
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f009 fc7b 	bl	800aae0 <osSemaphoreRelease>

	return;
 80011ea:	bf00      	nop
}
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000644 	.word	0x20000644

080011f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
	PDM_Data_Queue_Struct data = {.source = Interrupt_Gpio};
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
 8001212:	2303      	movs	r3, #3
 8001214:	773b      	strb	r3, [r7, #28]

	//Send interrupt source to Readings Thread
	osMessageQueuePut(processQueueHandle, (void*) &data, 0, 0);
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_GPIO_EXTI_Callback+0x38>)
 8001218:	6818      	ldr	r0, [r3, #0]
 800121a:	f107 010c 	add.w	r1, r7, #12
 800121e:	2300      	movs	r3, #0
 8001220:	2200      	movs	r2, #0
 8001222:	f009 fd15 	bl	800ac50 <osMessageQueuePut>

	return;
 8001226:	bf00      	nop
}
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000640 	.word	0x20000640

08001234 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_MspInit+0x54>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a11      	ldr	r2, [pc, #68]	; (8001288 <HAL_MspInit+0x54>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_MspInit+0x54>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_MspInit+0x54>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_MspInit+0x54>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_MspInit+0x54>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	210f      	movs	r1, #15
 8001276:	f06f 0001 	mvn.w	r0, #1
 800127a:	f001 fc2b 	bl	8002ad4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a6b      	ldr	r2, [pc, #428]	; (8001458 <HAL_ADC_MspInit+0x1cc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d172      	bne.n	8001394 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	4b6a      	ldr	r3, [pc, #424]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a69      	ldr	r2, [pc, #420]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80012b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b67      	ldr	r3, [pc, #412]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	4b63      	ldr	r3, [pc, #396]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a62      	ldr	r2, [pc, #392]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b60      	ldr	r3, [pc, #384]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b5c      	ldr	r3, [pc, #368]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a5b      	ldr	r2, [pc, #364]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 8001302:	23e0      	movs	r3, #224	; 0xe0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001306:	2303      	movs	r3, #3
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	4852      	ldr	r0, [pc, #328]	; (8001460 <HAL_ADC_MspInit+0x1d4>)
 8001316:	f001 ff0d 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ANALOG9_Pin;
 800131a:	2310      	movs	r3, #16
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131e:	2303      	movs	r3, #3
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	484d      	ldr	r0, [pc, #308]	; (8001464 <HAL_ADC_MspInit+0x1d8>)
 800132e:	f001 ff01 	bl	8003134 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001332:	4b4d      	ldr	r3, [pc, #308]	; (8001468 <HAL_ADC_MspInit+0x1dc>)
 8001334:	4a4d      	ldr	r2, [pc, #308]	; (800146c <HAL_ADC_MspInit+0x1e0>)
 8001336:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001338:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <HAL_ADC_MspInit+0x1dc>)
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133e:	4b4a      	ldr	r3, [pc, #296]	; (8001468 <HAL_ADC_MspInit+0x1dc>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001344:	4b48      	ldr	r3, [pc, #288]	; (8001468 <HAL_ADC_MspInit+0x1dc>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <HAL_ADC_MspInit+0x1dc>)
 800134c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001350:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001352:	4b45      	ldr	r3, [pc, #276]	; (8001468 <HAL_ADC_MspInit+0x1dc>)
 8001354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001358:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800135a:	4b43      	ldr	r3, [pc, #268]	; (8001468 <HAL_ADC_MspInit+0x1dc>)
 800135c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001360:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <HAL_ADC_MspInit+0x1dc>)
 8001364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001368:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800136a:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <HAL_ADC_MspInit+0x1dc>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001370:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <HAL_ADC_MspInit+0x1dc>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001376:	483c      	ldr	r0, [pc, #240]	; (8001468 <HAL_ADC_MspInit+0x1dc>)
 8001378:	f001 fbf2 	bl	8002b60 <HAL_DMA_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001382:	f7ff ff23 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a37      	ldr	r2, [pc, #220]	; (8001468 <HAL_ADC_MspInit+0x1dc>)
 800138a:	639a      	str	r2, [r3, #56]	; 0x38
 800138c:	4a36      	ldr	r2, [pc, #216]	; (8001468 <HAL_ADC_MspInit+0x1dc>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001392:	e05d      	b.n	8001450 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a35      	ldr	r2, [pc, #212]	; (8001470 <HAL_ADC_MspInit+0x1e4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d158      	bne.n	8001450 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a2d      	ldr	r2, [pc, #180]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80013a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a26      	ldr	r2, [pc, #152]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <HAL_ADC_MspInit+0x1d0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin
 80013d6:	231f      	movs	r3, #31
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013da:	2303      	movs	r3, #3
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	481d      	ldr	r0, [pc, #116]	; (8001460 <HAL_ADC_MspInit+0x1d4>)
 80013ea:	f001 fea3 	bl	8003134 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <HAL_ADC_MspInit+0x1e8>)
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <HAL_ADC_MspInit+0x1ec>)
 80013f2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <HAL_ADC_MspInit+0x1e8>)
 80013f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013fa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_ADC_MspInit+0x1e8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <HAL_ADC_MspInit+0x1e8>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_ADC_MspInit+0x1e8>)
 800140a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800140e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_ADC_MspInit+0x1e8>)
 8001412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001416:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_ADC_MspInit+0x1e8>)
 800141a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800141e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_ADC_MspInit+0x1e8>)
 8001422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001426:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_ADC_MspInit+0x1e8>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_ADC_MspInit+0x1e8>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001434:	480f      	ldr	r0, [pc, #60]	; (8001474 <HAL_ADC_MspInit+0x1e8>)
 8001436:	f001 fb93 	bl	8002b60 <HAL_DMA_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8001440:	f7ff fec4 	bl	80011cc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <HAL_ADC_MspInit+0x1e8>)
 8001448:	639a      	str	r2, [r3, #56]	; 0x38
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_ADC_MspInit+0x1e8>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001450:	bf00      	nop
 8001452:	3730      	adds	r7, #48	; 0x30
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40012000 	.word	0x40012000
 800145c:	40023800 	.word	0x40023800
 8001460:	40020000 	.word	0x40020000
 8001464:	40020800 	.word	0x40020800
 8001468:	20000210 	.word	0x20000210
 800146c:	40026410 	.word	0x40026410
 8001470:	40012100 	.word	0x40012100
 8001474:	20000270 	.word	0x20000270
 8001478:	40026440 	.word	0x40026440

0800147c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <HAL_CAN_MspInit+0x94>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d134      	bne.n	8001508 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_CAN_MspInit+0x98>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <HAL_CAN_MspInit+0x98>)
 80014a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_CAN_MspInit+0x98>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_CAN_MspInit+0x98>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a14      	ldr	r2, [pc, #80]	; (8001514 <HAL_CAN_MspInit+0x98>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_CAN_MspInit+0x98>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014e8:	2309      	movs	r3, #9
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4809      	ldr	r0, [pc, #36]	; (8001518 <HAL_CAN_MspInit+0x9c>)
 80014f4:	f001 fe1e 	bl	8003134 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2105      	movs	r1, #5
 80014fc:	2014      	movs	r0, #20
 80014fe:	f001 fae9 	bl	8002ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001502:	2014      	movs	r0, #20
 8001504:	f001 fb02 	bl	8002b0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40006400 	.word	0x40006400
 8001514:	40023800 	.word	0x40023800
 8001518:	40020400 	.word	0x40020400

0800151c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_CRC_MspInit+0x3c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d10d      	bne.n	800154a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_CRC_MspInit+0x40>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_CRC_MspInit+0x40>)
 8001538:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <HAL_CRC_MspInit+0x40>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023000 	.word	0x40023000
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_I2C_MspInit+0x84>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d12b      	bne.n	80015da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_I2C_MspInit+0x88>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <HAL_I2C_MspInit+0x88>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_I2C_MspInit+0x88>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800159e:	23c0      	movs	r3, #192	; 0xc0
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a2:	2312      	movs	r3, #18
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ae:	2304      	movs	r3, #4
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <HAL_I2C_MspInit+0x8c>)
 80015ba:	f001 fdbb 	bl	8003134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_I2C_MspInit+0x88>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_I2C_MspInit+0x88>)
 80015c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_I2C_MspInit+0x88>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	; 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40005400 	.word	0x40005400
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020400 	.word	0x40020400

080015f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a8e      	ldr	r2, [pc, #568]	; (8001838 <HAL_TIM_Base_MspInit+0x248>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d15a      	bne.n	80016b8 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	4b8d      	ldr	r3, [pc, #564]	; (800183c <HAL_TIM_Base_MspInit+0x24c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a8c      	ldr	r2, [pc, #560]	; (800183c <HAL_TIM_Base_MspInit+0x24c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b8a      	ldr	r3, [pc, #552]	; (800183c <HAL_TIM_Base_MspInit+0x24c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 800161e:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 8001620:	4a88      	ldr	r2, [pc, #544]	; (8001844 <HAL_TIM_Base_MspInit+0x254>)
 8001622:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8001624:	4b86      	ldr	r3, [pc, #536]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 8001626:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800162a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162c:	4b84      	ldr	r3, [pc, #528]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8001632:	4b83      	ldr	r3, [pc, #524]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001638:	4b81      	ldr	r3, [pc, #516]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 800163a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001640:	4b7f      	ldr	r3, [pc, #508]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 8001642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001646:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001648:	4b7d      	ldr	r3, [pc, #500]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 800164a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800164e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8001650:	4b7b      	ldr	r3, [pc, #492]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8001656:	4b7a      	ldr	r3, [pc, #488]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800165c:	4b78      	ldr	r3, [pc, #480]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8001662:	4877      	ldr	r0, [pc, #476]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 8001664:	f001 fa7c 	bl	8002b60 <HAL_DMA_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800166e:	f7ff fdad 	bl	80011cc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a72      	ldr	r2, [pc, #456]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
 8001678:	4a71      	ldr	r2, [pc, #452]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a6f      	ldr	r2, [pc, #444]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 8001682:	639a      	str	r2, [r3, #56]	; 0x38
 8001684:	4a6e      	ldr	r2, [pc, #440]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a6c      	ldr	r2, [pc, #432]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 800168e:	635a      	str	r2, [r3, #52]	; 0x34
 8001690:	4a6b      	ldr	r2, [pc, #428]	; (8001840 <HAL_TIM_Base_MspInit+0x250>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 15, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	210f      	movs	r1, #15
 800169a:	2018      	movs	r0, #24
 800169c:	f001 fa1a 	bl	8002ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80016a0:	2018      	movs	r0, #24
 80016a2:	f001 fa33 	bl	8002b0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2105      	movs	r1, #5
 80016aa:	2019      	movs	r0, #25
 80016ac:	f001 fa12 	bl	8002ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016b0:	2019      	movs	r0, #25
 80016b2:	f001 fa2b 	bl	8002b0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80016b6:	e11e      	b.n	80018f6 <HAL_TIM_Base_MspInit+0x306>
  else if(htim_base->Instance==TIM2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c0:	d14c      	bne.n	800175c <HAL_TIM_Base_MspInit+0x16c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	4b5d      	ldr	r3, [pc, #372]	; (800183c <HAL_TIM_Base_MspInit+0x24c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a5c      	ldr	r2, [pc, #368]	; (800183c <HAL_TIM_Base_MspInit+0x24c>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b5a      	ldr	r3, [pc, #360]	; (800183c <HAL_TIM_Base_MspInit+0x24c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80016de:	4b5a      	ldr	r3, [pc, #360]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 80016e0:	4a5a      	ldr	r2, [pc, #360]	; (800184c <HAL_TIM_Base_MspInit+0x25c>)
 80016e2:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80016e4:	4b58      	ldr	r3, [pc, #352]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 80016e6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016ea:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ec:	4b56      	ldr	r3, [pc, #344]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f2:	4b55      	ldr	r3, [pc, #340]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 80016fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016fe:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001700:	4b51      	ldr	r3, [pc, #324]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 8001702:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001706:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001708:	4b4f      	ldr	r3, [pc, #316]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 800170a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170e:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 8001710:	4b4d      	ldr	r3, [pc, #308]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001716:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800171c:	4b4a      	ldr	r3, [pc, #296]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 800171e:	2200      	movs	r2, #0
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8001722:	4849      	ldr	r0, [pc, #292]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 8001724:	f001 fa1c 	bl	8002b60 <HAL_DMA_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_TIM_Base_MspInit+0x142>
      Error_Handler();
 800172e:	f7ff fd4d 	bl	80011cc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a44      	ldr	r2, [pc, #272]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 8001736:	621a      	str	r2, [r3, #32]
 8001738:	4a43      	ldr	r2, [pc, #268]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a41      	ldr	r2, [pc, #260]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
 8001744:	4a40      	ldr	r2, [pc, #256]	; (8001848 <HAL_TIM_Base_MspInit+0x258>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2105      	movs	r1, #5
 800174e:	201c      	movs	r0, #28
 8001750:	f001 f9c0 	bl	8002ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001754:	201c      	movs	r0, #28
 8001756:	f001 f9d9 	bl	8002b0c <HAL_NVIC_EnableIRQ>
}
 800175a:	e0cc      	b.n	80018f6 <HAL_TIM_Base_MspInit+0x306>
  else if(htim_base->Instance==TIM3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a3b      	ldr	r2, [pc, #236]	; (8001850 <HAL_TIM_Base_MspInit+0x260>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d14c      	bne.n	8001800 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_TIM_Base_MspInit+0x24c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a33      	ldr	r2, [pc, #204]	; (800183c <HAL_TIM_Base_MspInit+0x24c>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <HAL_TIM_Base_MspInit+0x24c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8001782:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 8001784:	4a34      	ldr	r2, [pc, #208]	; (8001858 <HAL_TIM_Base_MspInit+0x268>)
 8001786:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8001788:	4b32      	ldr	r3, [pc, #200]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 800178a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800178e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001790:	4b30      	ldr	r3, [pc, #192]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001796:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 800179e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 80017a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017aa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 80017ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80017c6:	4823      	ldr	r0, [pc, #140]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 80017c8:	f001 f9ca 	bl	8002b60 <HAL_DMA_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_TIM_Base_MspInit+0x1e6>
      Error_Handler();
 80017d2:	f7ff fcfb 	bl	80011cc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a1e      	ldr	r2, [pc, #120]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 80017da:	631a      	str	r2, [r3, #48]	; 0x30
 80017dc:	4a1d      	ldr	r2, [pc, #116]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 80017e6:	621a      	str	r2, [r3, #32]
 80017e8:	4a1a      	ldr	r2, [pc, #104]	; (8001854 <HAL_TIM_Base_MspInit+0x264>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2105      	movs	r1, #5
 80017f2:	201d      	movs	r0, #29
 80017f4:	f001 f96e 	bl	8002ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017f8:	201d      	movs	r0, #29
 80017fa:	f001 f987 	bl	8002b0c <HAL_NVIC_EnableIRQ>
}
 80017fe:	e07a      	b.n	80018f6 <HAL_TIM_Base_MspInit+0x306>
  else if(htim_base->Instance==TIM6)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a15      	ldr	r2, [pc, #84]	; (800185c <HAL_TIM_Base_MspInit+0x26c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d12a      	bne.n	8001860 <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_TIM_Base_MspInit+0x24c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_TIM_Base_MspInit+0x24c>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_TIM_Base_MspInit+0x24c>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2105      	movs	r1, #5
 800182a:	2036      	movs	r0, #54	; 0x36
 800182c:	f001 f952 	bl	8002ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001830:	2036      	movs	r0, #54	; 0x36
 8001832:	f001 f96b 	bl	8002b0c <HAL_NVIC_EnableIRQ>
}
 8001836:	e05e      	b.n	80018f6 <HAL_TIM_Base_MspInit+0x306>
 8001838:	40010000 	.word	0x40010000
 800183c:	40023800 	.word	0x40023800
 8001840:	200004bc 	.word	0x200004bc
 8001844:	40026470 	.word	0x40026470
 8001848:	2000051c 	.word	0x2000051c
 800184c:	40026028 	.word	0x40026028
 8001850:	40000400 	.word	0x40000400
 8001854:	2000057c 	.word	0x2000057c
 8001858:	40026040 	.word	0x40026040
 800185c:	40001000 	.word	0x40001000
  else if(htim_base->Instance==TIM8)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a26      	ldr	r2, [pc, #152]	; (8001900 <HAL_TIM_Base_MspInit+0x310>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d145      	bne.n	80018f6 <HAL_TIM_Base_MspInit+0x306>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_TIM_Base_MspInit+0x314>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a24      	ldr	r2, [pc, #144]	; (8001904 <HAL_TIM_Base_MspInit+0x314>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_TIM_Base_MspInit+0x314>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch2.Instance = DMA2_Stream3;
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_TIM_Base_MspInit+0x318>)
 8001888:	4a20      	ldr	r2, [pc, #128]	; (800190c <HAL_TIM_Base_MspInit+0x31c>)
 800188a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Channel = DMA_CHANNEL_7;
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_TIM_Base_MspInit+0x318>)
 800188e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001892:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001894:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <HAL_TIM_Base_MspInit+0x318>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_TIM_Base_MspInit+0x318>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_TIM_Base_MspInit+0x318>)
 80018a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a6:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_TIM_Base_MspInit+0x318>)
 80018aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018ae:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_TIM_Base_MspInit+0x318>)
 80018b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b6:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_TIM_Base_MspInit+0x318>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_TIM_Base_MspInit+0x318>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_TIM_Base_MspInit+0x318>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 80018ca:	480f      	ldr	r0, [pc, #60]	; (8001908 <HAL_TIM_Base_MspInit+0x318>)
 80018cc:	f001 f948 	bl	8002b60 <HAL_DMA_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_TIM_Base_MspInit+0x2ea>
      Error_Handler();
 80018d6:	f7ff fc79 	bl	80011cc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <HAL_TIM_Base_MspInit+0x318>)
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
 80018e0:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_TIM_Base_MspInit+0x318>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2105      	movs	r1, #5
 80018ea:	202c      	movs	r0, #44	; 0x2c
 80018ec:	f001 f8f2 	bl	8002ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80018f0:	202c      	movs	r0, #44	; 0x2c
 80018f2:	f001 f90b 	bl	8002b0c <HAL_NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40010400 	.word	0x40010400
 8001904:	40023800 	.word	0x40023800
 8001908:	200005dc 	.word	0x200005dc
 800190c:	40026458 	.word	0x40026458

08001910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a49      	ldr	r2, [pc, #292]	; (8001a54 <HAL_TIM_MspPostInit+0x144>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d11f      	bne.n	8001972 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
 8001936:	4b48      	ldr	r3, [pc, #288]	; (8001a58 <HAL_TIM_MspPostInit+0x148>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a47      	ldr	r2, [pc, #284]	; (8001a58 <HAL_TIM_MspPostInit+0x148>)
 800193c:	f043 0310 	orr.w	r3, r3, #16
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b45      	ldr	r3, [pc, #276]	; (8001a58 <HAL_TIM_MspPostInit+0x148>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 800194e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001960:	2301      	movs	r3, #1
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	483c      	ldr	r0, [pc, #240]	; (8001a5c <HAL_TIM_MspPostInit+0x14c>)
 800196c:	f001 fbe2 	bl	8003134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001970:	e06b      	b.n	8001a4a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197a:	d11f      	bne.n	80019bc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <HAL_TIM_MspPostInit+0x148>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	4a34      	ldr	r2, [pc, #208]	; (8001a58 <HAL_TIM_MspPostInit+0x148>)
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	6313      	str	r3, [r2, #48]	; 0x30
 800198c:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <HAL_TIM_MspPostInit+0x148>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 8001998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199e:	2312      	movs	r3, #18
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019aa:	2301      	movs	r3, #1
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	482a      	ldr	r0, [pc, #168]	; (8001a60 <HAL_TIM_MspPostInit+0x150>)
 80019b6:	f001 fbbd 	bl	8003134 <HAL_GPIO_Init>
}
 80019ba:	e046      	b.n	8001a4a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a28      	ldr	r2, [pc, #160]	; (8001a64 <HAL_TIM_MspPostInit+0x154>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d11e      	bne.n	8001a04 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_TIM_MspPostInit+0x148>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <HAL_TIM_MspPostInit+0x148>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_TIM_MspPostInit+0x148>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e6:	2312      	movs	r3, #18
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019f2:	2302      	movs	r3, #2
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	4818      	ldr	r0, [pc, #96]	; (8001a60 <HAL_TIM_MspPostInit+0x150>)
 80019fe:	f001 fb99 	bl	8003134 <HAL_GPIO_Init>
}
 8001a02:	e022      	b.n	8001a4a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <HAL_TIM_MspPostInit+0x158>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d11d      	bne.n	8001a4a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HAL_TIM_MspPostInit+0x148>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a10      	ldr	r2, [pc, #64]	; (8001a58 <HAL_TIM_MspPostInit+0x148>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_TIM_MspPostInit+0x148>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2e:	2312      	movs	r3, #18
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	4806      	ldr	r0, [pc, #24]	; (8001a60 <HAL_TIM_MspPostInit+0x150>)
 8001a46:	f001 fb75 	bl	8003134 <HAL_GPIO_Init>
}
 8001a4a:	bf00      	nop
 8001a4c:	3730      	adds	r7, #48	; 0x30
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40010000 	.word	0x40010000
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40000400 	.word	0x40000400
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	; 0x30
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <HAL_InitTick+0xd4>)
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	4a2e      	ldr	r2, [pc, #184]	; (8001b40 <HAL_InitTick+0xd4>)
 8001a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <HAL_InitTick+0xd4>)
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a98:	f107 020c 	add.w	r2, r7, #12
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fa90 	bl	8004fc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001aa8:	f003 fa7a 	bl	8004fa0 <HAL_RCC_GetPCLK2Freq>
 8001aac:	4603      	mov	r3, r0
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab4:	4a23      	ldr	r2, [pc, #140]	; (8001b44 <HAL_InitTick+0xd8>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0c9b      	lsrs	r3, r3, #18
 8001abc:	3b01      	subs	r3, #1
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_InitTick+0xdc>)
 8001ac2:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <HAL_InitTick+0xe0>)
 8001ac4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_InitTick+0xdc>)
 8001ac8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001acc:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001ace:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <HAL_InitTick+0xdc>)
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_InitTick+0xdc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_InitTick+0xdc>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_InitTick+0xdc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001ae6:	4818      	ldr	r0, [pc, #96]	; (8001b48 <HAL_InitTick+0xdc>)
 8001ae8:	f004 fa98 	bl	800601c <HAL_TIM_Base_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d11b      	bne.n	8001b32 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001afa:	4813      	ldr	r0, [pc, #76]	; (8001b48 <HAL_InitTick+0xdc>)
 8001afc:	f004 fade 	bl	80060bc <HAL_TIM_Base_Start_IT>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d111      	bne.n	8001b32 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b0e:	2018      	movs	r0, #24
 8001b10:	f000 fffc 	bl	8002b0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	d808      	bhi.n	8001b2c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	2018      	movs	r0, #24
 8001b20:	f000 ffd8 	bl	8002ad4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b24:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <HAL_InitTick+0xe4>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e002      	b.n	8001b32 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3730      	adds	r7, #48	; 0x30
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	431bde83 	.word	0x431bde83
 8001b48:	20000650 	.word	0x20000650
 8001b4c:	40014000 	.word	0x40014000
 8001b50:	20000004 	.word	0x20000004

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <NMI_Handler+0x4>

08001b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <MemManage_Handler+0x4>

08001b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT1_Pin);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f001 fc83 	bl	8003490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT2_Pin);
 8001b92:	2002      	movs	r0, #2
 8001b94:	f001 fc7c 	bl	8003490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT3_Pin);
 8001ba0:	2004      	movs	r0, #4
 8001ba2:	f001 fc75 	bl	8003490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT4_Pin);
 8001bae:	2008      	movs	r0, #8
 8001bb0:	f001 fc6e 	bl	8003490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT5_Pin);
 8001bbc:	2010      	movs	r0, #16
 8001bbe:	f001 fc67 	bl	8003490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <DMA1_Stream1_IRQHandler+0x10>)
 8001bce:	f001 f875 	bl	8002cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000051c 	.word	0x2000051c

08001bdc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <DMA1_Stream2_IRQHandler+0x10>)
 8001be2:	f001 f86b 	bl	8002cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000057c 	.word	0x2000057c

08001bf0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <CAN1_RX0_IRQHandler+0x10>)
 8001bf6:	f000 fc86 	bl	8002506 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200002d0 	.word	0x200002d0

08001c04 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c08:	4803      	ldr	r0, [pc, #12]	; (8001c18 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001c0a:	f004 fb4f 	bl	80062ac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001c0e:	4803      	ldr	r0, [pc, #12]	; (8001c1c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001c10:	f004 fb4c 	bl	80062ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000354 	.word	0x20000354
 8001c1c:	20000650 	.word	0x20000650

08001c20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c26:	f004 fb41 	bl	80062ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000354 	.word	0x20000354

08001c34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <TIM2_IRQHandler+0x10>)
 8001c3a:	f004 fb37 	bl	80062ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000039c 	.word	0x2000039c

08001c48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <TIM3_IRQHandler+0x10>)
 8001c4e:	f004 fb2d 	bl	80062ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200003e4 	.word	0x200003e4

08001c5c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001c62:	f004 fb23 	bl	80062ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000474 	.word	0x20000474

08001c70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <TIM6_DAC_IRQHandler+0x10>)
 8001c76:	f004 fb19 	bl	80062ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000042c 	.word	0x2000042c

08001c84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <DMA2_Stream0_IRQHandler+0x10>)
 8001c8a:	f001 f817 	bl	8002cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000210 	.word	0x20000210

08001c98 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <DMA2_Stream2_IRQHandler+0x10>)
 8001c9e:	f001 f80d 	bl	8002cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000270 	.word	0x20000270

08001cac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <DMA2_Stream3_IRQHandler+0x10>)
 8001cb2:	f001 f803 	bl	8002cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200005dc 	.word	0x200005dc

08001cc0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <DMA2_Stream4_IRQHandler+0x10>)
 8001cc6:	f000 fff9 	bl	8002cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200004bc 	.word	0x200004bc

08001cd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <OTG_FS_IRQHandler+0x10>)
 8001cda:	f001 fe8c 	bl	80039f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000658c 	.word	0x2000658c

08001ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <SystemInit+0x20>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <SystemInit+0x20>)
 8001cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d10:	480d      	ldr	r0, [pc, #52]	; (8001d48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d12:	490e      	ldr	r1, [pc, #56]	; (8001d4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d14:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d26:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d28:	4c0b      	ldr	r4, [pc, #44]	; (8001d58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d36:	f7ff ffd7 	bl	8001ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f00c fb1d 	bl	800e378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3e:	f7fe fbe9 	bl	8000514 <main>
  bx  lr    
 8001d42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001d50:	0800e6f4 	.word	0x0800e6f4
  ldr r2, =_sbss
 8001d54:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001d58:	20006cc0 	.word	0x20006cc0

08001d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <HAL_Init+0x40>)
 8001d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_Init+0x40>)
 8001d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_Init+0x40>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d88:	2003      	movs	r0, #3
 8001d8a:	f000 fe98 	bl	8002abe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8e:	200f      	movs	r0, #15
 8001d90:	f7ff fe6c 	bl	8001a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d94:	f7ff fa4e 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_IncTick+0x20>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_IncTick+0x24>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_IncTick+0x24>)
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	20000698 	.word	0x20000698

08001dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_GetTick+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000698 	.word	0x20000698

08001de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff ffee 	bl	8001dcc <HAL_GetTick>
 8001df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d005      	beq.n	8001e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_Delay+0x44>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e0a:	bf00      	nop
 8001e0c:	f7ff ffde 	bl	8001dcc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d8f7      	bhi.n	8001e0c <HAL_Delay+0x28>
  {
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e033      	b.n	8001eaa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fa1e 	bl	800128c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d118      	bne.n	8001e9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e72:	f023 0302 	bic.w	r3, r3, #2
 8001e76:	f043 0202 	orr.w	r2, r3, #2
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f94a 	bl	8002118 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f023 0303 	bic.w	r3, r3, #3
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
 8001e9a:	e001      	b.n	8001ea0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x1c>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e113      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x244>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b09      	cmp	r3, #9
 8001ede:	d925      	bls.n	8001f2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68d9      	ldr	r1, [r3, #12]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	4613      	mov	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3b1e      	subs	r3, #30
 8001ef6:	2207      	movs	r2, #7
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43da      	mvns	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	400a      	ands	r2, r1
 8001f04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68d9      	ldr	r1, [r3, #12]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4618      	mov	r0, r3
 8001f18:	4603      	mov	r3, r0
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4403      	add	r3, r0
 8001f1e:	3b1e      	subs	r3, #30
 8001f20:	409a      	lsls	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	e022      	b.n	8001f72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6919      	ldr	r1, [r3, #16]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	2207      	movs	r2, #7
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6919      	ldr	r1, [r3, #16]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4618      	mov	r0, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4403      	add	r3, r0
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d824      	bhi.n	8001fc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	3b05      	subs	r3, #5
 8001f8c:	221f      	movs	r2, #31
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	400a      	ands	r2, r1
 8001f9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b05      	subs	r3, #5
 8001fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001fc2:	e04c      	b.n	800205e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b0c      	cmp	r3, #12
 8001fca:	d824      	bhi.n	8002016 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b23      	subs	r3, #35	; 0x23
 8001fde:	221f      	movs	r2, #31
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43da      	mvns	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	400a      	ands	r2, r1
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3b23      	subs	r3, #35	; 0x23
 8002008:	fa00 f203 	lsl.w	r2, r0, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
 8002014:	e023      	b.n	800205e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	3b41      	subs	r3, #65	; 0x41
 8002028:	221f      	movs	r2, #31
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	400a      	ands	r2, r1
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	4618      	mov	r0, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	3b41      	subs	r3, #65	; 0x41
 8002052:	fa00 f203 	lsl.w	r2, r0, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800205e:	4b29      	ldr	r3, [pc, #164]	; (8002104 <HAL_ADC_ConfigChannel+0x250>)
 8002060:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a28      	ldr	r2, [pc, #160]	; (8002108 <HAL_ADC_ConfigChannel+0x254>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d10f      	bne.n	800208c <HAL_ADC_ConfigChannel+0x1d8>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b12      	cmp	r3, #18
 8002072:	d10b      	bne.n	800208c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <HAL_ADC_ConfigChannel+0x254>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d12b      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x23a>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1c      	ldr	r2, [pc, #112]	; (800210c <HAL_ADC_ConfigChannel+0x258>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d003      	beq.n	80020a8 <HAL_ADC_ConfigChannel+0x1f4>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b11      	cmp	r3, #17
 80020a6:	d122      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a11      	ldr	r2, [pc, #68]	; (800210c <HAL_ADC_ConfigChannel+0x258>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d111      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_ADC_ConfigChannel+0x25c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a11      	ldr	r2, [pc, #68]	; (8002114 <HAL_ADC_ConfigChannel+0x260>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	0c9a      	lsrs	r2, r3, #18
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020e0:	e002      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f9      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40012300 	.word	0x40012300
 8002108:	40012000 	.word	0x40012000
 800210c:	10000012 	.word	0x10000012
 8002110:	20000000 	.word	0x20000000
 8002114:	431bde83 	.word	0x431bde83

08002118 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002120:	4b79      	ldr	r3, [pc, #484]	; (8002308 <ADC_Init+0x1f0>)
 8002122:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	431a      	orrs	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800214c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	021a      	lsls	r2, r3, #8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002170:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002192:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6899      	ldr	r1, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	4a58      	ldr	r2, [pc, #352]	; (800230c <ADC_Init+0x1f4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d022      	beq.n	80021f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6899      	ldr	r1, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6899      	ldr	r1, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	e00f      	b.n	8002216 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002204:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002214:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0202 	bic.w	r2, r2, #2
 8002224:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6899      	ldr	r1, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7e1b      	ldrb	r3, [r3, #24]
 8002230:	005a      	lsls	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01b      	beq.n	800227c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002252:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002262:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6859      	ldr	r1, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	3b01      	subs	r3, #1
 8002270:	035a      	lsls	r2, r3, #13
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	e007      	b.n	800228c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800228a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	051a      	lsls	r2, r3, #20
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6899      	ldr	r1, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022ce:	025a      	lsls	r2, r3, #9
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6899      	ldr	r1, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	029a      	lsls	r2, r3, #10
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	40012300 	.word	0x40012300
 800230c:	0f000001 	.word	0x0f000001

08002310 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0ed      	b.n	80024fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d102      	bne.n	8002334 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff f8a4 	bl	800147c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002344:	f7ff fd42 	bl	8001dcc <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800234a:	e012      	b.n	8002372 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800234c:	f7ff fd3e 	bl	8001dcc <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b0a      	cmp	r3, #10
 8002358:	d90b      	bls.n	8002372 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2205      	movs	r2, #5
 800236a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0c5      	b.n	80024fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0e5      	beq.n	800234c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0202 	bic.w	r2, r2, #2
 800238e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002390:	f7ff fd1c 	bl	8001dcc <HAL_GetTick>
 8002394:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002396:	e012      	b.n	80023be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002398:	f7ff fd18 	bl	8001dcc <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b0a      	cmp	r3, #10
 80023a4:	d90b      	bls.n	80023be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2205      	movs	r2, #5
 80023b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e09f      	b.n	80024fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e5      	bne.n	8002398 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7e1b      	ldrb	r3, [r3, #24]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d108      	bne.n	80023e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e007      	b.n	80023f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	7e5b      	ldrb	r3, [r3, #25]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d108      	bne.n	8002410 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	e007      	b.n	8002420 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	7e9b      	ldrb	r3, [r3, #26]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d108      	bne.n	800243a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0220 	orr.w	r2, r2, #32
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e007      	b.n	800244a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0220 	bic.w	r2, r2, #32
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7edb      	ldrb	r3, [r3, #27]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d108      	bne.n	8002464 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0210 	bic.w	r2, r2, #16
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e007      	b.n	8002474 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0210 	orr.w	r2, r2, #16
 8002472:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7f1b      	ldrb	r3, [r3, #28]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d108      	bne.n	800248e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0208 	orr.w	r2, r2, #8
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e007      	b.n	800249e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0208 	bic.w	r2, r2, #8
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7f5b      	ldrb	r3, [r3, #29]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d108      	bne.n	80024b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0204 	orr.w	r2, r2, #4
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e007      	b.n	80024c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0204 	bic.w	r2, r2, #4
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	ea42 0103 	orr.w	r1, r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	1e5a      	subs	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b08a      	sub	sp, #40	; 0x28
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d07c      	beq.n	8002646 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d023      	beq.n	800259e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2201      	movs	r2, #1
 800255c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f983 	bl	8002874 <HAL_CAN_TxMailbox0CompleteCallback>
 800256e:	e016      	b.n	800259e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d004      	beq.n	8002584 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
 8002582:	e00c      	b.n	800259e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d004      	beq.n	8002598 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
 8002596:	e002      	b.n	800259e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f989 	bl	80028b0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d024      	beq.n	80025f2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f963 	bl	8002888 <HAL_CAN_TxMailbox1CompleteCallback>
 80025c2:	e016      	b.n	80025f2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d004      	beq.n	80025d8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
 80025d6:	e00c      	b.n	80025f2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d004      	beq.n	80025ec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ea:	e002      	b.n	80025f2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f969 	bl	80028c4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d024      	beq.n	8002646 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002604:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f943 	bl	800289c <HAL_CAN_TxMailbox2CompleteCallback>
 8002616:	e016      	b.n	8002646 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d004      	beq.n	800262c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	e00c      	b.n	8002646 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	e002      	b.n	8002646 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f949 	bl	80028d8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00c      	beq.n	800266a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002660:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2210      	movs	r2, #16
 8002668:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00b      	beq.n	800268c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2208      	movs	r2, #8
 8002684:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f930 	bl	80028ec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7fe fd97 	bl	80011d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00c      	beq.n	80026ce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2210      	movs	r2, #16
 80026cc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00b      	beq.n	80026f0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d006      	beq.n	80026f0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2208      	movs	r2, #8
 80026e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f912 	bl	8002914 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f8f9 	bl	8002900 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2210      	movs	r2, #16
 8002728:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f8fc 	bl	8002928 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d006      	beq.n	8002752 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2208      	movs	r2, #8
 800274a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f8f5 	bl	800293c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d07b      	beq.n	8002854 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d072      	beq.n	800284c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d043      	beq.n	800284c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d03e      	beq.n	800284c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027d4:	2b60      	cmp	r3, #96	; 0x60
 80027d6:	d02b      	beq.n	8002830 <HAL_CAN_IRQHandler+0x32a>
 80027d8:	2b60      	cmp	r3, #96	; 0x60
 80027da:	d82e      	bhi.n	800283a <HAL_CAN_IRQHandler+0x334>
 80027dc:	2b50      	cmp	r3, #80	; 0x50
 80027de:	d022      	beq.n	8002826 <HAL_CAN_IRQHandler+0x320>
 80027e0:	2b50      	cmp	r3, #80	; 0x50
 80027e2:	d82a      	bhi.n	800283a <HAL_CAN_IRQHandler+0x334>
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d019      	beq.n	800281c <HAL_CAN_IRQHandler+0x316>
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d826      	bhi.n	800283a <HAL_CAN_IRQHandler+0x334>
 80027ec:	2b30      	cmp	r3, #48	; 0x30
 80027ee:	d010      	beq.n	8002812 <HAL_CAN_IRQHandler+0x30c>
 80027f0:	2b30      	cmp	r3, #48	; 0x30
 80027f2:	d822      	bhi.n	800283a <HAL_CAN_IRQHandler+0x334>
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d002      	beq.n	80027fe <HAL_CAN_IRQHandler+0x2f8>
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d005      	beq.n	8002808 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027fc:	e01d      	b.n	800283a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002806:	e019      	b.n	800283c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	f043 0310 	orr.w	r3, r3, #16
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002810:	e014      	b.n	800283c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	f043 0320 	orr.w	r3, r3, #32
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800281a:	e00f      	b.n	800283c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002824:	e00a      	b.n	800283c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800282e:	e005      	b.n	800283c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002838:	e000      	b.n	800283c <HAL_CAN_IRQHandler+0x336>
            break;
 800283a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800284a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2204      	movs	r2, #4
 8002852:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f872 	bl	8002950 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800286c:	bf00      	nop
 800286e:	3728      	adds	r7, #40	; 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002980:	4013      	ands	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800298c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002996:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	60d3      	str	r3, [r2, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <__NVIC_GetPriorityGrouping+0x18>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	0a1b      	lsrs	r3, r3, #8
 80029b6:	f003 0307 	and.w	r3, r3, #7
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	db0b      	blt.n	80029f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f003 021f 	and.w	r2, r3, #31
 80029e0:	4907      	ldr	r1, [pc, #28]	; (8002a00 <__NVIC_EnableIRQ+0x38>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2001      	movs	r0, #1
 80029ea:	fa00 f202 	lsl.w	r2, r0, r2
 80029ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000e100 	.word	0xe000e100

08002a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	db0a      	blt.n	8002a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	490c      	ldr	r1, [pc, #48]	; (8002a50 <__NVIC_SetPriority+0x4c>)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	0112      	lsls	r2, r2, #4
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	440b      	add	r3, r1
 8002a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a2c:	e00a      	b.n	8002a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4908      	ldr	r1, [pc, #32]	; (8002a54 <__NVIC_SetPriority+0x50>)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	3b04      	subs	r3, #4
 8002a3c:	0112      	lsls	r2, r2, #4
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	440b      	add	r3, r1
 8002a42:	761a      	strb	r2, [r3, #24]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000e100 	.word	0xe000e100
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f1c3 0307 	rsb	r3, r3, #7
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	bf28      	it	cs
 8002a76:	2304      	movcs	r3, #4
 8002a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d902      	bls.n	8002a88 <NVIC_EncodePriority+0x30>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3b03      	subs	r3, #3
 8002a86:	e000      	b.n	8002a8a <NVIC_EncodePriority+0x32>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43da      	mvns	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	43d9      	mvns	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	4313      	orrs	r3, r2
         );
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3724      	adds	r7, #36	; 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ff4c 	bl	8002964 <__NVIC_SetPriorityGrouping>
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae6:	f7ff ff61 	bl	80029ac <__NVIC_GetPriorityGrouping>
 8002aea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	6978      	ldr	r0, [r7, #20]
 8002af2:	f7ff ffb1 	bl	8002a58 <NVIC_EncodePriority>
 8002af6:	4602      	mov	r2, r0
 8002af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff80 	bl	8002a04 <__NVIC_SetPriority>
}
 8002b04:	bf00      	nop
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff54 	bl	80029c8 <__NVIC_EnableIRQ>
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e00e      	b.n	8002b58 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	795b      	ldrb	r3, [r3, #5]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe fce6 	bl	800151c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b6c:	f7ff f92e 	bl	8001dcc <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e099      	b.n	8002cb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9c:	e00f      	b.n	8002bbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b9e:	f7ff f915 	bl	8001dcc <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d908      	bls.n	8002bbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e078      	b.n	8002cb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e8      	bne.n	8002b9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_DMA_Init+0x158>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d107      	bne.n	8002c28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	4313      	orrs	r3, r2
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 0307 	bic.w	r3, r3, #7
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d117      	bne.n	8002c82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00e      	beq.n	8002c82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f9e9 	bl	800303c <DMA_CheckFifoParam>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2240      	movs	r2, #64	; 0x40
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e016      	b.n	8002cb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9a0 	bl	8002fd0 <DMA_CalcBaseAndBitshift>
 8002c90:	4603      	mov	r3, r0
 8002c92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	223f      	movs	r2, #63	; 0x3f
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	f010803f 	.word	0xf010803f

08002cbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cc8:	4b8e      	ldr	r3, [pc, #568]	; (8002f04 <HAL_DMA_IRQHandler+0x248>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a8e      	ldr	r2, [pc, #568]	; (8002f08 <HAL_DMA_IRQHandler+0x24c>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0a9b      	lsrs	r3, r3, #10
 8002cd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01a      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0204 	bic.w	r2, r2, #4
 8002d0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	2208      	movs	r2, #8
 8002d16:	409a      	lsls	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d012      	beq.n	8002d5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	f043 0202 	orr.w	r2, r3, #2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d62:	2204      	movs	r2, #4
 8002d64:	409a      	lsls	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d012      	beq.n	8002d94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	2204      	movs	r2, #4
 8002d82:	409a      	lsls	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8c:	f043 0204 	orr.w	r2, r3, #4
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	2210      	movs	r2, #16
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d043      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d03c      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	2210      	movs	r2, #16
 8002db8:	409a      	lsls	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d018      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d024      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
 8002dea:	e01f      	b.n	8002e2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01b      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
 8002dfc:	e016      	b.n	8002e2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d107      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0208 	bic.w	r2, r2, #8
 8002e1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	2220      	movs	r2, #32
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 808f 	beq.w	8002f5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8087 	beq.w	8002f5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	2220      	movs	r2, #32
 8002e54:	409a      	lsls	r2, r3
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d136      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0216 	bic.w	r2, r2, #22
 8002e74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_DMA_IRQHandler+0x1da>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0208 	bic.w	r2, r2, #8
 8002ea4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	223f      	movs	r2, #63	; 0x3f
 8002eac:	409a      	lsls	r2, r3
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d07e      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	4798      	blx	r3
        }
        return;
 8002ed2:	e079      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01d      	beq.n	8002f1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d031      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
 8002f00:	e02c      	b.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
 8002f02:	bf00      	nop
 8002f04:	20000000 	.word	0x20000000
 8002f08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d023      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
 8002f1c:	e01e      	b.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10f      	bne.n	8002f4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0210 	bic.w	r2, r2, #16
 8002f3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d032      	beq.n	8002fca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d022      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2205      	movs	r2, #5
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d307      	bcc.n	8002fa4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f2      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x2cc>
 8002fa2:	e000      	b.n	8002fa6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fa4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
 8002fc6:	e000      	b.n	8002fca <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fc8:	bf00      	nop
    }
  }
}
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3b10      	subs	r3, #16
 8002fe0:	4a14      	ldr	r2, [pc, #80]	; (8003034 <DMA_CalcBaseAndBitshift+0x64>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fea:	4a13      	ldr	r2, [pc, #76]	; (8003038 <DMA_CalcBaseAndBitshift+0x68>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d909      	bls.n	8003012 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	1d1a      	adds	r2, r3, #4
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	659a      	str	r2, [r3, #88]	; 0x58
 8003010:	e007      	b.n	8003022 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	aaaaaaab 	.word	0xaaaaaaab
 8003038:	0800e67c 	.word	0x0800e67c

0800303c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11f      	bne.n	8003096 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d856      	bhi.n	800310a <DMA_CheckFifoParam+0xce>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <DMA_CheckFifoParam+0x28>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003075 	.word	0x08003075
 8003068:	08003087 	.word	0x08003087
 800306c:	08003075 	.word	0x08003075
 8003070:	0800310b 	.word	0x0800310b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d046      	beq.n	800310e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003084:	e043      	b.n	800310e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800308e:	d140      	bne.n	8003112 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003094:	e03d      	b.n	8003112 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309e:	d121      	bne.n	80030e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d837      	bhi.n	8003116 <DMA_CheckFifoParam+0xda>
 80030a6:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <DMA_CheckFifoParam+0x70>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030c3 	.word	0x080030c3
 80030b4:	080030bd 	.word	0x080030bd
 80030b8:	080030d5 	.word	0x080030d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e030      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d025      	beq.n	800311a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d2:	e022      	b.n	800311a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030dc:	d11f      	bne.n	800311e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030e2:	e01c      	b.n	800311e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d903      	bls.n	80030f2 <DMA_CheckFifoParam+0xb6>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d003      	beq.n	80030f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030f0:	e018      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      break;
 80030f6:	e015      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      break;
 8003108:	e00b      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 800310a:	bf00      	nop
 800310c:	e00a      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 800310e:	bf00      	nop
 8003110:	e008      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003112:	bf00      	nop
 8003114:	e006      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003116:	bf00      	nop
 8003118:	e004      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 800311a:	bf00      	nop
 800311c:	e002      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;   
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003122:	bf00      	nop
    }
  } 
  
  return status; 
 8003124:	7bfb      	ldrb	r3, [r7, #15]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop

08003134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	; 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003146:	2300      	movs	r3, #0
 8003148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	e165      	b.n	800341c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003150:	2201      	movs	r2, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	429a      	cmp	r2, r3
 800316a:	f040 8154 	bne.w	8003416 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d005      	beq.n	8003186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003182:	2b02      	cmp	r3, #2
 8003184:	d130      	bne.n	80031e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031bc:	2201      	movs	r2, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 0201 	and.w	r2, r3, #1
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d017      	beq.n	8003224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	2203      	movs	r2, #3
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d123      	bne.n	8003278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	08da      	lsrs	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3208      	adds	r2, #8
 8003238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	220f      	movs	r2, #15
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	08da      	lsrs	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3208      	adds	r2, #8
 8003272:	69b9      	ldr	r1, [r7, #24]
 8003274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2203      	movs	r2, #3
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0203 	and.w	r2, r3, #3
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80ae 	beq.w	8003416 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b5d      	ldr	r3, [pc, #372]	; (8003434 <HAL_GPIO_Init+0x300>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	4a5c      	ldr	r2, [pc, #368]	; (8003434 <HAL_GPIO_Init+0x300>)
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ca:	4b5a      	ldr	r3, [pc, #360]	; (8003434 <HAL_GPIO_Init+0x300>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d6:	4a58      	ldr	r2, [pc, #352]	; (8003438 <HAL_GPIO_Init+0x304>)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	220f      	movs	r2, #15
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4f      	ldr	r2, [pc, #316]	; (800343c <HAL_GPIO_Init+0x308>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d025      	beq.n	800334e <HAL_GPIO_Init+0x21a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4e      	ldr	r2, [pc, #312]	; (8003440 <HAL_GPIO_Init+0x30c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01f      	beq.n	800334a <HAL_GPIO_Init+0x216>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4d      	ldr	r2, [pc, #308]	; (8003444 <HAL_GPIO_Init+0x310>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d019      	beq.n	8003346 <HAL_GPIO_Init+0x212>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4c      	ldr	r2, [pc, #304]	; (8003448 <HAL_GPIO_Init+0x314>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_GPIO_Init+0x20e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4b      	ldr	r2, [pc, #300]	; (800344c <HAL_GPIO_Init+0x318>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00d      	beq.n	800333e <HAL_GPIO_Init+0x20a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4a      	ldr	r2, [pc, #296]	; (8003450 <HAL_GPIO_Init+0x31c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d007      	beq.n	800333a <HAL_GPIO_Init+0x206>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a49      	ldr	r2, [pc, #292]	; (8003454 <HAL_GPIO_Init+0x320>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d101      	bne.n	8003336 <HAL_GPIO_Init+0x202>
 8003332:	2306      	movs	r3, #6
 8003334:	e00c      	b.n	8003350 <HAL_GPIO_Init+0x21c>
 8003336:	2307      	movs	r3, #7
 8003338:	e00a      	b.n	8003350 <HAL_GPIO_Init+0x21c>
 800333a:	2305      	movs	r3, #5
 800333c:	e008      	b.n	8003350 <HAL_GPIO_Init+0x21c>
 800333e:	2304      	movs	r3, #4
 8003340:	e006      	b.n	8003350 <HAL_GPIO_Init+0x21c>
 8003342:	2303      	movs	r3, #3
 8003344:	e004      	b.n	8003350 <HAL_GPIO_Init+0x21c>
 8003346:	2302      	movs	r3, #2
 8003348:	e002      	b.n	8003350 <HAL_GPIO_Init+0x21c>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_GPIO_Init+0x21c>
 800334e:	2300      	movs	r3, #0
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	f002 0203 	and.w	r2, r2, #3
 8003356:	0092      	lsls	r2, r2, #2
 8003358:	4093      	lsls	r3, r2
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003360:	4935      	ldr	r1, [pc, #212]	; (8003438 <HAL_GPIO_Init+0x304>)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	3302      	adds	r3, #2
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800336e:	4b3a      	ldr	r3, [pc, #232]	; (8003458 <HAL_GPIO_Init+0x324>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003392:	4a31      	ldr	r2, [pc, #196]	; (8003458 <HAL_GPIO_Init+0x324>)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003398:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <HAL_GPIO_Init+0x324>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033bc:	4a26      	ldr	r2, [pc, #152]	; (8003458 <HAL_GPIO_Init+0x324>)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033c2:	4b25      	ldr	r3, [pc, #148]	; (8003458 <HAL_GPIO_Init+0x324>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033e6:	4a1c      	ldr	r2, [pc, #112]	; (8003458 <HAL_GPIO_Init+0x324>)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <HAL_GPIO_Init+0x324>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003410:	4a11      	ldr	r2, [pc, #68]	; (8003458 <HAL_GPIO_Init+0x324>)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3301      	adds	r3, #1
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b0f      	cmp	r3, #15
 8003420:	f67f ae96 	bls.w	8003150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	3724      	adds	r7, #36	; 0x24
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	40013800 	.word	0x40013800
 800343c:	40020000 	.word	0x40020000
 8003440:	40020400 	.word	0x40020400
 8003444:	40020800 	.word	0x40020800
 8003448:	40020c00 	.word	0x40020c00
 800344c:	40021000 	.word	0x40021000
 8003450:	40021400 	.word	0x40021400
 8003454:	40021800 	.word	0x40021800
 8003458:	40013c00 	.word	0x40013c00

0800345c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	807b      	strh	r3, [r7, #2]
 8003468:	4613      	mov	r3, r2
 800346a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800346c:	787b      	ldrb	r3, [r7, #1]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003472:	887a      	ldrh	r2, [r7, #2]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003478:	e003      	b.n	8003482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800347a:	887b      	ldrh	r3, [r7, #2]
 800347c:	041a      	lsls	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	619a      	str	r2, [r3, #24]
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d006      	beq.n	80034b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034a6:	4a05      	ldr	r2, [pc, #20]	; (80034bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd fea2 	bl	80011f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40013c00 	.word	0x40013c00

080034c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e12b      	b.n	800372a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fe f83a 	bl	8001560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2224      	movs	r2, #36	; 0x24
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003512:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003522:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003524:	f001 fd28 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 8003528:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4a81      	ldr	r2, [pc, #516]	; (8003734 <HAL_I2C_Init+0x274>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d807      	bhi.n	8003544 <HAL_I2C_Init+0x84>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a80      	ldr	r2, [pc, #512]	; (8003738 <HAL_I2C_Init+0x278>)
 8003538:	4293      	cmp	r3, r2
 800353a:	bf94      	ite	ls
 800353c:	2301      	movls	r3, #1
 800353e:	2300      	movhi	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e006      	b.n	8003552 <HAL_I2C_Init+0x92>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a7d      	ldr	r2, [pc, #500]	; (800373c <HAL_I2C_Init+0x27c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	bf94      	ite	ls
 800354c:	2301      	movls	r3, #1
 800354e:	2300      	movhi	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0e7      	b.n	800372a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4a78      	ldr	r2, [pc, #480]	; (8003740 <HAL_I2C_Init+0x280>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	0c9b      	lsrs	r3, r3, #18
 8003564:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4a6a      	ldr	r2, [pc, #424]	; (8003734 <HAL_I2C_Init+0x274>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d802      	bhi.n	8003594 <HAL_I2C_Init+0xd4>
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	3301      	adds	r3, #1
 8003592:	e009      	b.n	80035a8 <HAL_I2C_Init+0xe8>
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800359a:	fb02 f303 	mul.w	r3, r2, r3
 800359e:	4a69      	ldr	r2, [pc, #420]	; (8003744 <HAL_I2C_Init+0x284>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	099b      	lsrs	r3, r3, #6
 80035a6:	3301      	adds	r3, #1
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	430b      	orrs	r3, r1
 80035ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	495c      	ldr	r1, [pc, #368]	; (8003734 <HAL_I2C_Init+0x274>)
 80035c4:	428b      	cmp	r3, r1
 80035c6:	d819      	bhi.n	80035fc <HAL_I2C_Init+0x13c>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1e59      	subs	r1, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035d6:	1c59      	adds	r1, r3, #1
 80035d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035dc:	400b      	ands	r3, r1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_I2C_Init+0x138>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1e59      	subs	r1, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f6:	e051      	b.n	800369c <HAL_I2C_Init+0x1dc>
 80035f8:	2304      	movs	r3, #4
 80035fa:	e04f      	b.n	800369c <HAL_I2C_Init+0x1dc>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d111      	bne.n	8003628 <HAL_I2C_Init+0x168>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1e58      	subs	r0, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	440b      	add	r3, r1
 8003612:	fbb0 f3f3 	udiv	r3, r0, r3
 8003616:	3301      	adds	r3, #1
 8003618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	e012      	b.n	800364e <HAL_I2C_Init+0x18e>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1e58      	subs	r0, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	0099      	lsls	r1, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	fbb0 f3f3 	udiv	r3, r0, r3
 800363e:	3301      	adds	r3, #1
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_Init+0x196>
 8003652:	2301      	movs	r3, #1
 8003654:	e022      	b.n	800369c <HAL_I2C_Init+0x1dc>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10e      	bne.n	800367c <HAL_I2C_Init+0x1bc>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1e58      	subs	r0, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6859      	ldr	r1, [r3, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	440b      	add	r3, r1
 800366c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003670:	3301      	adds	r3, #1
 8003672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800367a:	e00f      	b.n	800369c <HAL_I2C_Init+0x1dc>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1e58      	subs	r0, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	0099      	lsls	r1, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	6809      	ldr	r1, [r1, #0]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69da      	ldr	r2, [r3, #28]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6911      	ldr	r1, [r2, #16]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68d2      	ldr	r2, [r2, #12]
 80036d6:	4311      	orrs	r1, r2
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	430b      	orrs	r3, r1
 80036de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	000186a0 	.word	0x000186a0
 8003738:	001e847f 	.word	0x001e847f
 800373c:	003d08ff 	.word	0x003d08ff
 8003740:	431bde83 	.word	0x431bde83
 8003744:	10624dd3 	.word	0x10624dd3

08003748 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374a:	b08f      	sub	sp, #60	; 0x3c
 800374c:	af0a      	add	r7, sp, #40	; 0x28
 800374e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e116      	b.n	8003988 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f00a fabd 	bl	800dcf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2203      	movs	r2, #3
 800377e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f003 fd22 	bl	80071e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	687e      	ldr	r6, [r7, #4]
 80037a6:	466d      	mov	r5, sp
 80037a8:	f106 0410 	add.w	r4, r6, #16
 80037ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80037bc:	1d33      	adds	r3, r6, #4
 80037be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c0:	6838      	ldr	r0, [r7, #0]
 80037c2:	f003 fbf9 	bl	8006fb8 <USB_CoreInit>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0d7      	b.n	8003988 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f003 fd10 	bl	8007204 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	e04a      	b.n	8003880 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	333d      	adds	r3, #61	; 0x3d
 80037fa:	2201      	movs	r2, #1
 80037fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	333c      	adds	r3, #60	; 0x3c
 800380e:	7bfa      	ldrb	r2, [r7, #15]
 8003810:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	b298      	uxth	r0, r3
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3344      	adds	r3, #68	; 0x44
 8003826:	4602      	mov	r2, r0
 8003828:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	3340      	adds	r3, #64	; 0x40
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800383e:	7bfa      	ldrb	r2, [r7, #15]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3348      	adds	r3, #72	; 0x48
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003852:	7bfa      	ldrb	r2, [r7, #15]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	334c      	adds	r3, #76	; 0x4c
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003866:	7bfa      	ldrb	r2, [r7, #15]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	3354      	adds	r3, #84	; 0x54
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	3301      	adds	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	429a      	cmp	r2, r3
 8003888:	d3af      	bcc.n	80037ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	e044      	b.n	800391a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003890:	7bfa      	ldrb	r2, [r7, #15]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038a6:	7bfa      	ldrb	r2, [r7, #15]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038bc:	7bfa      	ldrb	r2, [r7, #15]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038d2:	7bfa      	ldrb	r2, [r7, #15]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038e8:	7bfa      	ldrb	r2, [r7, #15]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	3301      	adds	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	429a      	cmp	r2, r3
 8003922:	d3b5      	bcc.n	8003890 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	687e      	ldr	r6, [r7, #4]
 800392c:	466d      	mov	r5, sp
 800392e:	f106 0410 	add.w	r4, r6, #16
 8003932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800393e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003942:	1d33      	adds	r3, r6, #4
 8003944:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003946:	6838      	ldr	r0, [r7, #0]
 8003948:	f003 fca8 	bl	800729c <USB_DevInit>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e014      	b.n	8003988 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	2b01      	cmp	r3, #1
 8003974:	d102      	bne.n	800397c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f001 f98c 	bl	8004c94 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f004 fdea 	bl	800855a <USB_DevDisconnect>

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003990 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_PCD_Start+0x1c>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e020      	b.n	80039ee <HAL_PCD_Start+0x5e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d109      	bne.n	80039d0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d005      	beq.n	80039d0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f003 fbf3 	bl	80071c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f004 fd9a 	bl	8008518 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039f6:	b590      	push	{r4, r7, lr}
 80039f8:	b08d      	sub	sp, #52	; 0x34
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f004 fe58 	bl	80086c2 <USB_GetMode>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 84b7 	bne.w	8004388 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f004 fdbc 	bl	800859c <USB_ReadInterrupts>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 84ad 	beq.w	8004386 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	0a1b      	lsrs	r3, r3, #8
 8003a36:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f004 fda9 	bl	800859c <USB_ReadInterrupts>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d107      	bne.n	8003a64 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f002 0202 	and.w	r2, r2, #2
 8003a62:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f004 fd97 	bl	800859c <USB_ReadInterrupts>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d161      	bne.n	8003b3c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0210 	bic.w	r2, r2, #16
 8003a86:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 020f 	and.w	r2, r3, #15
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	0c5b      	lsrs	r3, r3, #17
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d124      	bne.n	8003afe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d035      	beq.n	8003b2c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	6a38      	ldr	r0, [r7, #32]
 8003ad4:	f004 fbce 	bl	8008274 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ae4:	441a      	add	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	6a1a      	ldr	r2, [r3, #32]
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af6:	441a      	add	r2, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	621a      	str	r2, [r3, #32]
 8003afc:	e016      	b.n	8003b2c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	0c5b      	lsrs	r3, r3, #17
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d110      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b10:	2208      	movs	r2, #8
 8003b12:	4619      	mov	r1, r3
 8003b14:	6a38      	ldr	r0, [r7, #32]
 8003b16:	f004 fbad 	bl	8008274 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	6a1a      	ldr	r2, [r3, #32]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b26:	441a      	add	r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0210 	orr.w	r2, r2, #16
 8003b3a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f004 fd2b 	bl	800859c <USB_ReadInterrupts>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b50:	f040 80a7 	bne.w	8003ca2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f004 fd30 	bl	80085c2 <USB_ReadDevAllOutEpInterrupt>
 8003b62:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b64:	e099      	b.n	8003c9a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 808e 	beq.w	8003c8e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f004 fd54 	bl	800862a <USB_ReadDevOutEPInterrupt>
 8003b82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00c      	beq.n	8003ba8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fef0 	bl	8004988 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00c      	beq.n	8003bcc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 ffc6 	bl	8004b58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	461a      	mov	r2, r3
 8003be4:	2310      	movs	r3, #16
 8003be6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d030      	beq.n	8003c54 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	2b80      	cmp	r3, #128	; 0x80
 8003bfc:	d109      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c10:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	3304      	adds	r3, #4
 8003c26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	78db      	ldrb	r3, [r3, #3]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d108      	bne.n	8003c42 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2200      	movs	r2, #0
 8003c34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f00a f98d 	bl	800df5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2302      	movs	r3, #2
 8003c52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2320      	movs	r3, #32
 8003c6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d009      	beq.n	8003c8e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c86:	461a      	mov	r2, r3
 8003c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c8c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	3301      	adds	r3, #1
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f47f af62 	bne.w	8003b66 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f004 fc78 	bl	800859c <USB_ReadInterrupts>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cb6:	f040 80db 	bne.w	8003e70 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f004 fc99 	bl	80085f6 <USB_ReadDevAllInEpInterrupt>
 8003cc4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003cca:	e0cd      	b.n	8003e68 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80c2 	beq.w	8003e5c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f004 fcbf 	bl	8008666 <USB_ReadDevInEPInterrupt>
 8003ce8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d057      	beq.n	8003da4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69f9      	ldr	r1, [r7, #28]
 8003d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d14:	4013      	ands	r3, r2
 8003d16:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d24:	461a      	mov	r2, r3
 8003d26:	2301      	movs	r3, #1
 8003d28:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d132      	bne.n	8003d98 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	4613      	mov	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	334c      	adds	r3, #76	; 0x4c
 8003d42:	6819      	ldr	r1, [r3, #0]
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4403      	add	r3, r0
 8003d52:	3348      	adds	r3, #72	; 0x48
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4419      	add	r1, r3
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4403      	add	r3, r0
 8003d66:	334c      	adds	r3, #76	; 0x4c
 8003d68:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d113      	bne.n	8003d98 <HAL_PCD_IRQHandler+0x3a2>
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3354      	adds	r3, #84	; 0x54
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d108      	bne.n	8003d98 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d90:	461a      	mov	r2, r3
 8003d92:	2101      	movs	r1, #1
 8003d94:	f004 fcc6 	bl	8008724 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f00a f857 	bl	800de52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2308      	movs	r3, #8
 8003dbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2310      	movs	r3, #16
 8003dda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	461a      	mov	r2, r3
 8003df4:	2340      	movs	r3, #64	; 0x40
 8003df6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d023      	beq.n	8003e4a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e04:	6a38      	ldr	r0, [r7, #32]
 8003e06:	f003 fba7 	bl	8007558 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	3338      	adds	r3, #56	; 0x38
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	78db      	ldrb	r3, [r3, #3]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d108      	bne.n	8003e38 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	4619      	mov	r1, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f00a f8a4 	bl	800df80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e44:	461a      	mov	r2, r3
 8003e46:	2302      	movs	r3, #2
 8003e48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fd08 	bl	800486c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	3301      	adds	r3, #1
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	085b      	lsrs	r3, r3, #1
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f47f af2e 	bne.w	8003ccc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f004 fb91 	bl	800859c <USB_ReadInterrupts>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e84:	d122      	bne.n	8003ecc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d108      	bne.n	8003eb6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003eac:	2100      	movs	r1, #0
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 ff14 	bl	8004cdc <HAL_PCDEx_LPM_Callback>
 8003eb4:	e002      	b.n	8003ebc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f00a f842 	bl	800df40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f004 fb63 	bl	800859c <USB_ReadInterrupts>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee0:	d112      	bne.n	8003f08 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d102      	bne.n	8003ef8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f009 fffe 	bl	800def4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f06:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f004 fb45 	bl	800859c <USB_ReadInterrupts>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f1c:	d121      	bne.n	8003f62 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695a      	ldr	r2, [r3, #20]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003f2c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d111      	bne.n	8003f5c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	089b      	lsrs	r3, r3, #2
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f52:	2101      	movs	r1, #1
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fec1 	bl	8004cdc <HAL_PCDEx_LPM_Callback>
 8003f5a:	e002      	b.n	8003f62 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f009 ffc9 	bl	800def4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f004 fb18 	bl	800859c <USB_ReadInterrupts>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f76:	f040 80b7 	bne.w	80040e8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2110      	movs	r1, #16
 8003f94:	4618      	mov	r0, r3
 8003f96:	f003 fadf 	bl	8007558 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9e:	e046      	b.n	800402e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fac:	461a      	mov	r2, r3
 8003fae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fb2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fe6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004002:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004006:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004022:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004026:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402a:	3301      	adds	r3, #1
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004034:	429a      	cmp	r2, r3
 8004036:	d3b3      	bcc.n	8003fa0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004046:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800404a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	2b00      	cmp	r3, #0
 8004052:	d016      	beq.n	8004082 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004064:	f043 030b 	orr.w	r3, r3, #11
 8004068:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800407a:	f043 030b 	orr.w	r3, r3, #11
 800407e:	6453      	str	r3, [r2, #68]	; 0x44
 8004080:	e015      	b.n	80040ae <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004090:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004094:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004098:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040a8:	f043 030b 	orr.w	r3, r3, #11
 80040ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040d2:	461a      	mov	r2, r3
 80040d4:	f004 fb26 	bl	8008724 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f004 fa55 	bl	800859c <USB_ReadInterrupts>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fc:	d124      	bne.n	8004148 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f004 faeb 	bl	80086de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f003 faa0 	bl	8007652 <USB_GetDevSpeed>
 8004112:	4603      	mov	r3, r0
 8004114:	461a      	mov	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681c      	ldr	r4, [r3, #0]
 800411e:	f000 ff1f 	bl	8004f60 <HAL_RCC_GetHCLKFreq>
 8004122:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	4620      	mov	r0, r4
 800412e:	f002 ffa5 	bl	800707c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f009 feb5 	bl	800dea2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004146:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f004 fa25 	bl	800859c <USB_ReadInterrupts>
 8004152:	4603      	mov	r3, r0
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b08      	cmp	r3, #8
 800415a:	d10a      	bne.n	8004172 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f009 fe92 	bl	800de86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f002 0208 	and.w	r2, r2, #8
 8004170:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f004 fa10 	bl	800859c <USB_ReadInterrupts>
 800417c:	4603      	mov	r3, r0
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	2b80      	cmp	r3, #128	; 0x80
 8004184:	d122      	bne.n	80041cc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004192:	2301      	movs	r3, #1
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	e014      	b.n	80041c2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419c:	4613      	mov	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	4619      	mov	r1, r3
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fb27 	bl	800480a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	3301      	adds	r3, #1
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d3e5      	bcc.n	8004198 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f004 f9e3 	bl	800859c <USB_ReadInterrupts>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e0:	d13b      	bne.n	800425a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041e2:	2301      	movs	r3, #1
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
 80041e6:	e02b      	b.n	8004240 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	3340      	adds	r3, #64	; 0x40
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d115      	bne.n	800423a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800420e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004210:	2b00      	cmp	r3, #0
 8004212:	da12      	bge.n	800423a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004218:	4613      	mov	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	333f      	adds	r3, #63	; 0x3f
 8004224:	2201      	movs	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004230:	b2db      	uxtb	r3, r3
 8004232:	4619      	mov	r1, r3
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fae8 	bl	800480a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	3301      	adds	r3, #1
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004246:	429a      	cmp	r2, r3
 8004248:	d3ce      	bcc.n	80041e8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f004 f99c 	bl	800859c <USB_ReadInterrupts>
 8004264:	4603      	mov	r3, r0
 8004266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800426a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800426e:	d155      	bne.n	800431c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004270:	2301      	movs	r3, #1
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
 8004274:	e045      	b.n	8004302 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d12e      	bne.n	80042fc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800429e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	da2b      	bge.n	80042fc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80042b0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d121      	bne.n	80042fc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042bc:	4613      	mov	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80042ca:	2201      	movs	r2, #1
 80042cc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10a      	bne.n	80042fc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042f8:	6053      	str	r3, [r2, #4]
            break;
 80042fa:	e007      	b.n	800430c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	3301      	adds	r3, #1
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004308:	429a      	cmp	r2, r3
 800430a:	d3b4      	bcc.n	8004276 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800431a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f004 f93b 	bl	800859c <USB_ReadInterrupts>
 8004326:	4603      	mov	r3, r0
 8004328:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800432c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004330:	d10a      	bne.n	8004348 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f009 fe36 	bl	800dfa4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004346:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f004 f925 	bl	800859c <USB_ReadInterrupts>
 8004352:	4603      	mov	r3, r0
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d115      	bne.n	8004388 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f009 fe26 	bl	800dfc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6859      	ldr	r1, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	430a      	orrs	r2, r1
 8004382:	605a      	str	r2, [r3, #4]
 8004384:	e000      	b.n	8004388 <HAL_PCD_IRQHandler+0x992>
      return;
 8004386:	bf00      	nop
    }
  }
}
 8004388:	3734      	adds	r7, #52	; 0x34
 800438a:	46bd      	mov	sp, r7
 800438c:	bd90      	pop	{r4, r7, pc}

0800438e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_PCD_SetAddress+0x1a>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e013      	b.n	80043d0 <HAL_PCD_SetAddress+0x42>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	78fa      	ldrb	r2, [r7, #3]
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f004 f883 	bl	80084cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	4608      	mov	r0, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	4603      	mov	r3, r0
 80043e8:	70fb      	strb	r3, [r7, #3]
 80043ea:	460b      	mov	r3, r1
 80043ec:	803b      	strh	r3, [r7, #0]
 80043ee:	4613      	mov	r3, r2
 80043f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	da0f      	bge.n	800441e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	f003 020f 	and.w	r2, r3, #15
 8004404:	4613      	mov	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	3338      	adds	r3, #56	; 0x38
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4413      	add	r3, r2
 8004412:	3304      	adds	r3, #4
 8004414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	705a      	strb	r2, [r3, #1]
 800441c:	e00f      	b.n	800443e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	f003 020f 	and.w	r2, r3, #15
 8004424:	4613      	mov	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	4413      	add	r3, r2
 8004434:	3304      	adds	r3, #4
 8004436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	b2da      	uxtb	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800444a:	883a      	ldrh	r2, [r7, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	78ba      	ldrb	r2, [r7, #2]
 8004454:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	785b      	ldrb	r3, [r3, #1]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d004      	beq.n	8004468 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004468:	78bb      	ldrb	r3, [r7, #2]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d102      	bne.n	8004474 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_PCD_EP_Open+0xaa>
 800447e:	2302      	movs	r3, #2
 8004480:	e00e      	b.n	80044a0 <HAL_PCD_EP_Open+0xc8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68f9      	ldr	r1, [r7, #12]
 8004490:	4618      	mov	r0, r3
 8004492:	f003 f903 	bl	800769c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800449e:	7afb      	ldrb	r3, [r7, #11]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	da0f      	bge.n	80044dc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	f003 020f 	and.w	r2, r3, #15
 80044c2:	4613      	mov	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	3338      	adds	r3, #56	; 0x38
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	4413      	add	r3, r2
 80044d0:	3304      	adds	r3, #4
 80044d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	705a      	strb	r2, [r3, #1]
 80044da:	e00f      	b.n	80044fc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	f003 020f 	and.w	r2, r3, #15
 80044e2:	4613      	mov	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	4413      	add	r3, r2
 80044f2:	3304      	adds	r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	b2da      	uxtb	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_PCD_EP_Close+0x6e>
 8004512:	2302      	movs	r3, #2
 8004514:	e00e      	b.n	8004534 <HAL_PCD_EP_Close+0x8c>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68f9      	ldr	r1, [r7, #12]
 8004524:	4618      	mov	r0, r3
 8004526:	f003 f941 	bl	80077ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	460b      	mov	r3, r1
 800454a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800454c:	7afb      	ldrb	r3, [r7, #11]
 800454e:	f003 020f 	and.w	r2, r3, #15
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	3304      	adds	r3, #4
 8004564:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2200      	movs	r2, #0
 800457c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800457e:	7afb      	ldrb	r3, [r7, #11]
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	b2da      	uxtb	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d102      	bne.n	8004598 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004598:	7afb      	ldrb	r3, [r7, #11]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	6979      	ldr	r1, [r7, #20]
 80045b0:	f003 fc20 	bl	8007df4 <USB_EP0StartXfer>
 80045b4:	e008      	b.n	80045c8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	6979      	ldr	r1, [r7, #20]
 80045c4:	f003 f9ce 	bl	8007964 <USB_EPStartXfer>
  }

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	460b      	mov	r3, r1
 80045dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	f003 020f 	and.w	r2, r3, #15
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80045f4:	681b      	ldr	r3, [r3, #0]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	460b      	mov	r3, r1
 8004610:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004612:	7afb      	ldrb	r3, [r7, #11]
 8004614:	f003 020f 	and.w	r2, r3, #15
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	3338      	adds	r3, #56	; 0x38
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	3304      	adds	r3, #4
 8004628:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2200      	movs	r2, #0
 800463a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2201      	movs	r2, #1
 8004640:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004642:	7afb      	ldrb	r3, [r7, #11]
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	b2da      	uxtb	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d102      	bne.n	800465c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800465c:	7afb      	ldrb	r3, [r7, #11]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	6979      	ldr	r1, [r7, #20]
 8004674:	f003 fbbe 	bl	8007df4 <USB_EP0StartXfer>
 8004678:	e008      	b.n	800468c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	6979      	ldr	r1, [r7, #20]
 8004688:	f003 f96c 	bl	8007964 <USB_EPStartXfer>
  }

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 020f 	and.w	r2, r3, #15
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d901      	bls.n	80046b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e050      	b.n	8004756 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	da0f      	bge.n	80046dc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	f003 020f 	and.w	r2, r3, #15
 80046c2:	4613      	mov	r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	3338      	adds	r3, #56	; 0x38
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4413      	add	r3, r2
 80046d0:	3304      	adds	r3, #4
 80046d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	705a      	strb	r2, [r3, #1]
 80046da:	e00d      	b.n	80046f8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	3304      	adds	r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2201      	movs	r2, #1
 80046fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	b2da      	uxtb	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_PCD_EP_SetStall+0x82>
 8004714:	2302      	movs	r3, #2
 8004716:	e01e      	b.n	8004756 <HAL_PCD_EP_SetStall+0xc0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68f9      	ldr	r1, [r7, #12]
 8004726:	4618      	mov	r0, r3
 8004728:	f003 fdfc 	bl	8008324 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	b2d9      	uxtb	r1, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004746:	461a      	mov	r2, r3
 8004748:	f003 ffec 	bl	8008724 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	460b      	mov	r3, r1
 8004768:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	f003 020f 	and.w	r2, r3, #15
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	429a      	cmp	r2, r3
 8004776:	d901      	bls.n	800477c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e042      	b.n	8004802 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800477c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004780:	2b00      	cmp	r3, #0
 8004782:	da0f      	bge.n	80047a4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	f003 020f 	and.w	r2, r3, #15
 800478a:	4613      	mov	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	3338      	adds	r3, #56	; 0x38
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	4413      	add	r3, r2
 8004798:	3304      	adds	r3, #4
 800479a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	705a      	strb	r2, [r3, #1]
 80047a2:	e00f      	b.n	80047c4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	f003 020f 	and.w	r2, r3, #15
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	3304      	adds	r3, #4
 80047bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_PCD_EP_ClrStall+0x86>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e00e      	b.n	8004802 <HAL_PCD_EP_ClrStall+0xa4>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68f9      	ldr	r1, [r7, #12]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f003 fe04 	bl	8008400 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800481a:	2b00      	cmp	r3, #0
 800481c:	da0c      	bge.n	8004838 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	f003 020f 	and.w	r2, r3, #15
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	3338      	adds	r3, #56	; 0x38
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	3304      	adds	r3, #4
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	e00c      	b.n	8004852 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	f003 020f 	and.w	r2, r3, #15
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	3304      	adds	r3, #4
 8004850:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68f9      	ldr	r1, [r7, #12]
 8004858:	4618      	mov	r0, r3
 800485a:	f003 fc23 	bl	80080a4 <USB_EPStopXfer>
 800485e:	4603      	mov	r3, r0
 8004860:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004862:	7afb      	ldrb	r3, [r7, #11]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08a      	sub	sp, #40	; 0x28
 8004870:	af02      	add	r7, sp, #8
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	3338      	adds	r3, #56	; 0x38
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	4413      	add	r3, r2
 8004890:	3304      	adds	r3, #4
 8004892:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1a      	ldr	r2, [r3, #32]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	429a      	cmp	r2, r3
 800489e:	d901      	bls.n	80048a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e06c      	b.n	800497e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d902      	bls.n	80048c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	3303      	adds	r3, #3
 80048c4:	089b      	lsrs	r3, r3, #2
 80048c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048c8:	e02b      	b.n	8004922 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d902      	bls.n	80048e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	3303      	adds	r3, #3
 80048ea:	089b      	lsrs	r3, r3, #2
 80048ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6919      	ldr	r1, [r3, #16]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	4603      	mov	r3, r0
 8004904:	6978      	ldr	r0, [r7, #20]
 8004906:	f003 fc77 	bl	80081f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	441a      	add	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1a      	ldr	r2, [r3, #32]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	441a      	add	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	b29b      	uxth	r3, r3
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	429a      	cmp	r2, r3
 8004936:	d809      	bhi.n	800494c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a1a      	ldr	r2, [r3, #32]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004940:	429a      	cmp	r2, r3
 8004942:	d203      	bcs.n	800494c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1be      	bne.n	80048ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	699a      	ldr	r2, [r3, #24]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	429a      	cmp	r2, r3
 8004956:	d811      	bhi.n	800497c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	2201      	movs	r2, #1
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	43db      	mvns	r3, r3
 8004972:	6939      	ldr	r1, [r7, #16]
 8004974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004978:	4013      	ands	r3, r2
 800497a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	333c      	adds	r3, #60	; 0x3c
 80049a0:	3304      	adds	r3, #4
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d17b      	bne.n	8004ab6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d015      	beq.n	80049f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	4a61      	ldr	r2, [pc, #388]	; (8004b50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	f240 80b9 	bls.w	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80b3 	beq.w	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	461a      	mov	r2, r3
 80049ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f0:	6093      	str	r3, [r2, #8]
 80049f2:	e0a7      	b.n	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	6093      	str	r3, [r2, #8]
 8004a10:	e098      	b.n	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f040 8093 	bne.w	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	4a4b      	ldr	r2, [pc, #300]	; (8004b50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d90f      	bls.n	8004a46 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a42:	6093      	str	r3, [r2, #8]
 8004a44:	e07e      	b.n	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	4413      	add	r3, r2
 8004a58:	3304      	adds	r3, #4
 8004a5a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	0159      	lsls	r1, r3, #5
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	440b      	add	r3, r1
 8004a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a72:	1ad2      	subs	r2, r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d114      	bne.n	8004aa8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a90:	461a      	mov	r2, r3
 8004a92:	2101      	movs	r1, #1
 8004a94:	f003 fe46 	bl	8008724 <USB_EP0_OutStart>
 8004a98:	e006      	b.n	8004aa8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	441a      	add	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f009 f9b4 	bl	800de1c <HAL_PCD_DataOutStageCallback>
 8004ab4:	e046      	b.n	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4a26      	ldr	r2, [pc, #152]	; (8004b54 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d124      	bne.n	8004b08 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ada:	6093      	str	r3, [r2, #8]
 8004adc:	e032      	b.n	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	461a      	mov	r2, r3
 8004af6:	2320      	movs	r3, #32
 8004af8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f009 f98b 	bl	800de1c <HAL_PCD_DataOutStageCallback>
 8004b06:	e01d      	b.n	8004b44 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d114      	bne.n	8004b38 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	4613      	mov	r3, r2
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d108      	bne.n	8004b38 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b30:	461a      	mov	r2, r3
 8004b32:	2100      	movs	r1, #0
 8004b34:	f003 fdf6 	bl	8008724 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f009 f96c 	bl	800de1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	4f54300a 	.word	0x4f54300a
 8004b54:	4f54310a 	.word	0x4f54310a

08004b58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	333c      	adds	r3, #60	; 0x3c
 8004b70:	3304      	adds	r3, #4
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a15      	ldr	r2, [pc, #84]	; (8004be0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d90e      	bls.n	8004bac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d009      	beq.n	8004bac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004baa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f009 f923 	bl	800ddf8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a0a      	ldr	r2, [pc, #40]	; (8004be0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d90c      	bls.n	8004bd4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d108      	bne.n	8004bd4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2101      	movs	r1, #1
 8004bd0:	f003 fda8 	bl	8008724 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	4f54300a 	.word	0x4f54300a

08004be4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d107      	bne.n	8004c12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c02:	883b      	ldrh	r3, [r7, #0]
 8004c04:	0419      	lsls	r1, r3, #16
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c10:	e028      	b.n	8004c64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c20:	2300      	movs	r3, #0
 8004c22:	73fb      	strb	r3, [r7, #15]
 8004c24:	e00d      	b.n	8004c42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	3340      	adds	r3, #64	; 0x40
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	4413      	add	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]
 8004c42:	7bfa      	ldrb	r2, [r7, #15]
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d3ec      	bcc.n	8004c26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c4c:	883b      	ldrh	r3, [r7, #0]
 8004c4e:	0418      	lsls	r0, r3, #16
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	4302      	orrs	r2, r0
 8004c5c:	3340      	adds	r3, #64	; 0x40
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	887a      	ldrh	r2, [r7, #2]
 8004c84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	f043 0303 	orr.w	r3, r3, #3
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004cfe:	2300      	movs	r3, #0
 8004d00:	603b      	str	r3, [r7, #0]
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	4a1f      	ldr	r2, [pc, #124]	; (8004d84 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d0e:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d1a:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <HAL_PWREx_EnableOverDrive+0x94>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d20:	f7fd f854 	bl	8001dcc <HAL_GetTick>
 8004d24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d26:	e009      	b.n	8004d3c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d28:	f7fd f850 	bl	8001dcc <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d36:	d901      	bls.n	8004d3c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e01f      	b.n	8004d7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d3c:	4b13      	ldr	r3, [pc, #76]	; (8004d8c <HAL_PWREx_EnableOverDrive+0x98>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d48:	d1ee      	bne.n	8004d28 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d4a:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d50:	f7fd f83c 	bl	8001dcc <HAL_GetTick>
 8004d54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d56:	e009      	b.n	8004d6c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d58:	f7fd f838 	bl	8001dcc <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d66:	d901      	bls.n	8004d6c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e007      	b.n	8004d7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d6c:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <HAL_PWREx_EnableOverDrive+0x98>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d78:	d1ee      	bne.n	8004d58 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40023800 	.word	0x40023800
 8004d88:	420e0040 	.word	0x420e0040
 8004d8c:	40007000 	.word	0x40007000
 8004d90:	420e0044 	.word	0x420e0044

08004d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0cc      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004da8:	4b68      	ldr	r3, [pc, #416]	; (8004f4c <HAL_RCC_ClockConfig+0x1b8>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d90c      	bls.n	8004dd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db6:	4b65      	ldr	r3, [pc, #404]	; (8004f4c <HAL_RCC_ClockConfig+0x1b8>)
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dbe:	4b63      	ldr	r3, [pc, #396]	; (8004f4c <HAL_RCC_ClockConfig+0x1b8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d001      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0b8      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d020      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de8:	4b59      	ldr	r3, [pc, #356]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	4a58      	ldr	r2, [pc, #352]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004df2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e00:	4b53      	ldr	r3, [pc, #332]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	4a52      	ldr	r2, [pc, #328]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e0c:	4b50      	ldr	r3, [pc, #320]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	494d      	ldr	r1, [pc, #308]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d044      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d107      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e32:	4b47      	ldr	r3, [pc, #284]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d119      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e07f      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d003      	beq.n	8004e52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d107      	bne.n	8004e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e52:	4b3f      	ldr	r3, [pc, #252]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e06f      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e62:	4b3b      	ldr	r3, [pc, #236]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e067      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e72:	4b37      	ldr	r3, [pc, #220]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f023 0203 	bic.w	r2, r3, #3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	4934      	ldr	r1, [pc, #208]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e84:	f7fc ffa2 	bl	8001dcc <HAL_GetTick>
 8004e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8c:	f7fc ff9e 	bl	8001dcc <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e04f      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea2:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 020c 	and.w	r2, r3, #12
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d1eb      	bne.n	8004e8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb4:	4b25      	ldr	r3, [pc, #148]	; (8004f4c <HAL_RCC_ClockConfig+0x1b8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d20c      	bcs.n	8004edc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec2:	4b22      	ldr	r3, [pc, #136]	; (8004f4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eca:	4b20      	ldr	r3, [pc, #128]	; (8004f4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e032      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee8:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4916      	ldr	r1, [pc, #88]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	490e      	ldr	r1, [pc, #56]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f1a:	f000 fbb1 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	091b      	lsrs	r3, r3, #4
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	490a      	ldr	r1, [pc, #40]	; (8004f54 <HAL_RCC_ClockConfig+0x1c0>)
 8004f2c:	5ccb      	ldrb	r3, [r1, r3]
 8004f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f32:	4a09      	ldr	r2, [pc, #36]	; (8004f58 <HAL_RCC_ClockConfig+0x1c4>)
 8004f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f36:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_RCC_ClockConfig+0x1c8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fc fd96 	bl	8001a6c <HAL_InitTick>

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40023c00 	.word	0x40023c00
 8004f50:	40023800 	.word	0x40023800
 8004f54:	0800e664 	.word	0x0800e664
 8004f58:	20000000 	.word	0x20000000
 8004f5c:	20000004 	.word	0x20000004

08004f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f64:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f66:	681b      	ldr	r3, [r3, #0]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20000000 	.word	0x20000000

08004f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f7c:	f7ff fff0 	bl	8004f60 <HAL_RCC_GetHCLKFreq>
 8004f80:	4602      	mov	r2, r0
 8004f82:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	0a9b      	lsrs	r3, r3, #10
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	4903      	ldr	r1, [pc, #12]	; (8004f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f8e:	5ccb      	ldrb	r3, [r1, r3]
 8004f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	0800e674 	.word	0x0800e674

08004fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fa4:	f7ff ffdc 	bl	8004f60 <HAL_RCC_GetHCLKFreq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	0b5b      	lsrs	r3, r3, #13
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4903      	ldr	r1, [pc, #12]	; (8004fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	0800e674 	.word	0x0800e674

08004fc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	220f      	movs	r2, #15
 8004fd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fd8:	4b12      	ldr	r3, [pc, #72]	; (8005024 <HAL_RCC_GetClockConfig+0x5c>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0203 	and.w	r2, r3, #3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fe4:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <HAL_RCC_GetClockConfig+0x5c>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <HAL_RCC_GetClockConfig+0x5c>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ffc:	4b09      	ldr	r3, [pc, #36]	; (8005024 <HAL_RCC_GetClockConfig+0x5c>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	08db      	lsrs	r3, r3, #3
 8005002:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800500a:	4b07      	ldr	r3, [pc, #28]	; (8005028 <HAL_RCC_GetClockConfig+0x60>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 020f 	and.w	r2, r3, #15
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	601a      	str	r2, [r3, #0]
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40023800 	.word	0x40023800
 8005028:	40023c00 	.word	0x40023c00

0800502c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08c      	sub	sp, #48	; 0x30
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d010      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005064:	4b6f      	ldr	r3, [pc, #444]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800506a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	496c      	ldr	r1, [pc, #432]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005082:	2301      	movs	r3, #1
 8005084:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d010      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005092:	4b64      	ldr	r3, [pc, #400]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005098:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	4960      	ldr	r1, [pc, #384]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80050b0:	2301      	movs	r3, #1
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d017      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050c0:	4b58      	ldr	r3, [pc, #352]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	4955      	ldr	r1, [pc, #340]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050de:	d101      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80050e0:	2301      	movs	r3, #1
 80050e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80050ec:	2301      	movs	r3, #1
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d017      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050fc:	4b49      	ldr	r3, [pc, #292]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005102:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510a:	4946      	ldr	r1, [pc, #280]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800511a:	d101      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800511c:	2301      	movs	r3, #1
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005128:	2301      	movs	r3, #1
 800512a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 808a 	beq.w	800524e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800513a:	2300      	movs	r3, #0
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	4b39      	ldr	r3, [pc, #228]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	4a38      	ldr	r2, [pc, #224]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005148:	6413      	str	r3, [r2, #64]	; 0x40
 800514a:	4b36      	ldr	r3, [pc, #216]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005156:	4b34      	ldr	r3, [pc, #208]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a33      	ldr	r2, [pc, #204]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800515c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005160:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005162:	f7fc fe33 	bl	8001dcc <HAL_GetTick>
 8005166:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005168:	e008      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800516a:	f7fc fe2f 	bl	8001dcc <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d901      	bls.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e278      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800517c:	4b2a      	ldr	r3, [pc, #168]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0f0      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005188:	4b26      	ldr	r3, [pc, #152]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005190:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d02f      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a0:	6a3a      	ldr	r2, [r7, #32]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d028      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051a6:	4b1f      	ldr	r3, [pc, #124]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ae:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051b0:	4b1e      	ldr	r3, [pc, #120]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051b6:	4b1d      	ldr	r3, [pc, #116]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80051bc:	4a19      	ldr	r2, [pc, #100]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051c2:	4b18      	ldr	r3, [pc, #96]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d114      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80051ce:	f7fc fdfd 	bl	8001dcc <HAL_GetTick>
 80051d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d4:	e00a      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d6:	f7fc fdf9 	bl	8001dcc <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d901      	bls.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e240      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0ee      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005204:	d114      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005206:	4b07      	ldr	r3, [pc, #28]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521a:	4902      	ldr	r1, [pc, #8]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800521c:	4313      	orrs	r3, r2
 800521e:	608b      	str	r3, [r1, #8]
 8005220:	e00c      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800
 8005228:	40007000 	.word	0x40007000
 800522c:	42470e40 	.word	0x42470e40
 8005230:	4b4a      	ldr	r3, [pc, #296]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	4a49      	ldr	r2, [pc, #292]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005236:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800523a:	6093      	str	r3, [r2, #8]
 800523c:	4b47      	ldr	r3, [pc, #284]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800523e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005248:	4944      	ldr	r1, [pc, #272]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800524a:	4313      	orrs	r3, r2
 800524c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2b00      	cmp	r3, #0
 8005258:	d004      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005260:	4b3f      	ldr	r3, [pc, #252]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005262:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005270:	4b3a      	ldr	r3, [pc, #232]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005276:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527e:	4937      	ldr	r1, [pc, #220]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005292:	4b32      	ldr	r3, [pc, #200]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005298:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a0:	492e      	ldr	r1, [pc, #184]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d011      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052b4:	4b29      	ldr	r3, [pc, #164]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ba:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	4926      	ldr	r1, [pc, #152]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d2:	d101      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80052d4:	2301      	movs	r3, #1
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80052e4:	4b1d      	ldr	r3, [pc, #116]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	491a      	ldr	r1, [pc, #104]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005302:	2b00      	cmp	r3, #0
 8005304:	d011      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005306:	4b15      	ldr	r3, [pc, #84]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800530c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005314:	4911      	ldr	r1, [pc, #68]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005324:	d101      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005326:	2301      	movs	r3, #1
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d005      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005338:	f040 80ff 	bne.w	800553a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005342:	f7fc fd43 	bl	8001dcc <HAL_GetTick>
 8005346:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005348:	e00e      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800534a:	f7fc fd3f 	bl	8001dcc <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d907      	bls.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e188      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800535c:	40023800 	.word	0x40023800
 8005360:	424711e0 	.word	0x424711e0
 8005364:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005368:	4b7e      	ldr	r3, [pc, #504]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1ea      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	2b00      	cmp	r3, #0
 8005386:	d009      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005390:	2b00      	cmp	r3, #0
 8005392:	d028      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005398:	2b00      	cmp	r3, #0
 800539a:	d124      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800539c:	4b71      	ldr	r3, [pc, #452]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800539e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a2:	0c1b      	lsrs	r3, r3, #16
 80053a4:	f003 0303 	and.w	r3, r3, #3
 80053a8:	3301      	adds	r3, #1
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053ae:	4b6d      	ldr	r3, [pc, #436]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b4:	0e1b      	lsrs	r3, r3, #24
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	019b      	lsls	r3, r3, #6
 80053c6:	431a      	orrs	r2, r3
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	085b      	lsrs	r3, r3, #1
 80053cc:	3b01      	subs	r3, #1
 80053ce:	041b      	lsls	r3, r3, #16
 80053d0:	431a      	orrs	r2, r3
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	061b      	lsls	r3, r3, #24
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	071b      	lsls	r3, r3, #28
 80053de:	4961      	ldr	r1, [pc, #388]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005404:	2b00      	cmp	r3, #0
 8005406:	d035      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005410:	d130      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005412:	4b54      	ldr	r3, [pc, #336]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005418:	0c1b      	lsrs	r3, r3, #16
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	3301      	adds	r3, #1
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005424:	4b4f      	ldr	r3, [pc, #316]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542a:	0f1b      	lsrs	r3, r3, #28
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	019b      	lsls	r3, r3, #6
 800543c:	431a      	orrs	r2, r3
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	085b      	lsrs	r3, r3, #1
 8005442:	3b01      	subs	r3, #1
 8005444:	041b      	lsls	r3, r3, #16
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	061b      	lsls	r3, r3, #24
 800544e:	431a      	orrs	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	071b      	lsls	r3, r3, #28
 8005454:	4943      	ldr	r1, [pc, #268]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800545c:	4b41      	ldr	r3, [pc, #260]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800545e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005462:	f023 021f 	bic.w	r2, r3, #31
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	3b01      	subs	r3, #1
 800546c:	493d      	ldr	r1, [pc, #244]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547c:	2b00      	cmp	r3, #0
 800547e:	d029      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005488:	d124      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800548a:	4b36      	ldr	r3, [pc, #216]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800548c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005490:	0c1b      	lsrs	r3, r3, #16
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	3301      	adds	r3, #1
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800549c:	4b31      	ldr	r3, [pc, #196]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800549e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a2:	0f1b      	lsrs	r3, r3, #28
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	019b      	lsls	r3, r3, #6
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	3b01      	subs	r3, #1
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	431a      	orrs	r2, r3
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	061b      	lsls	r3, r3, #24
 80054c6:	431a      	orrs	r2, r3
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	071b      	lsls	r3, r3, #28
 80054cc:	4925      	ldr	r1, [pc, #148]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d016      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	019b      	lsls	r3, r3, #6
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	085b      	lsrs	r3, r3, #1
 80054f2:	3b01      	subs	r3, #1
 80054f4:	041b      	lsls	r3, r3, #16
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	061b      	lsls	r3, r3, #24
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	071b      	lsls	r3, r3, #28
 8005506:	4917      	ldr	r1, [pc, #92]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800550e:	4b16      	ldr	r3, [pc, #88]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005510:	2201      	movs	r2, #1
 8005512:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005514:	f7fc fc5a 	bl	8001dcc <HAL_GetTick>
 8005518:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800551a:	e008      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800551c:	f7fc fc56 	bl	8001dcc <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e09f      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800552e:	4b0d      	ldr	r3, [pc, #52]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	2b01      	cmp	r3, #1
 800553e:	f040 8095 	bne.w	800566c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005542:	4b0a      	ldr	r3, [pc, #40]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005548:	f7fc fc40 	bl	8001dcc <HAL_GetTick>
 800554c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800554e:	e00f      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005550:	f7fc fc3c 	bl	8001dcc <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d908      	bls.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e085      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005562:	bf00      	nop
 8005564:	40023800 	.word	0x40023800
 8005568:	42470068 	.word	0x42470068
 800556c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005570:	4b41      	ldr	r3, [pc, #260]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557c:	d0e8      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800559a:	2b00      	cmp	r3, #0
 800559c:	d02b      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d127      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80055a6:	4b34      	ldr	r3, [pc, #208]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ac:	0c1b      	lsrs	r3, r3, #16
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	3301      	adds	r3, #1
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	019b      	lsls	r3, r3, #6
 80055c2:	431a      	orrs	r2, r3
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	3b01      	subs	r3, #1
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	061b      	lsls	r3, r3, #24
 80055d4:	4928      	ldr	r1, [pc, #160]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055dc:	4b26      	ldr	r3, [pc, #152]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80055de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ea:	3b01      	subs	r3, #1
 80055ec:	021b      	lsls	r3, r3, #8
 80055ee:	4922      	ldr	r1, [pc, #136]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01d      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800560a:	d118      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800560c:	4b1a      	ldr	r3, [pc, #104]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	0e1b      	lsrs	r3, r3, #24
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	019b      	lsls	r3, r3, #6
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	085b      	lsrs	r3, r3, #1
 800562c:	3b01      	subs	r3, #1
 800562e:	041b      	lsls	r3, r3, #16
 8005630:	431a      	orrs	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	061b      	lsls	r3, r3, #24
 8005636:	4910      	ldr	r1, [pc, #64]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800563e:	4b0f      	ldr	r3, [pc, #60]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005640:	2201      	movs	r2, #1
 8005642:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005644:	f7fc fbc2 	bl	8001dcc <HAL_GetTick>
 8005648:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800564a:	e008      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800564c:	f7fc fbbe 	bl	8001dcc <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e007      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800566a:	d1ef      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3730      	adds	r7, #48	; 0x30
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40023800 	.word	0x40023800
 800567c:	42470070 	.word	0x42470070

08005680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005684:	b0ae      	sub	sp, #184	; 0xb8
 8005686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056a6:	4bcb      	ldr	r3, [pc, #812]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 030c 	and.w	r3, r3, #12
 80056ae:	2b0c      	cmp	r3, #12
 80056b0:	f200 8206 	bhi.w	8005ac0 <HAL_RCC_GetSysClockFreq+0x440>
 80056b4:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80056b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ba:	bf00      	nop
 80056bc:	080056f1 	.word	0x080056f1
 80056c0:	08005ac1 	.word	0x08005ac1
 80056c4:	08005ac1 	.word	0x08005ac1
 80056c8:	08005ac1 	.word	0x08005ac1
 80056cc:	080056f9 	.word	0x080056f9
 80056d0:	08005ac1 	.word	0x08005ac1
 80056d4:	08005ac1 	.word	0x08005ac1
 80056d8:	08005ac1 	.word	0x08005ac1
 80056dc:	08005701 	.word	0x08005701
 80056e0:	08005ac1 	.word	0x08005ac1
 80056e4:	08005ac1 	.word	0x08005ac1
 80056e8:	08005ac1 	.word	0x08005ac1
 80056ec:	080058f1 	.word	0x080058f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056f0:	4bb9      	ldr	r3, [pc, #740]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80056f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80056f6:	e1e7      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056f8:	4bb8      	ldr	r3, [pc, #736]	; (80059dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80056fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80056fe:	e1e3      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005700:	4bb4      	ldr	r3, [pc, #720]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800570c:	4bb1      	ldr	r3, [pc, #708]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d071      	beq.n	80057fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005718:	4bae      	ldr	r3, [pc, #696]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	099b      	lsrs	r3, r3, #6
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005724:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800572c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005734:	2300      	movs	r3, #0
 8005736:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800573a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800573e:	4622      	mov	r2, r4
 8005740:	462b      	mov	r3, r5
 8005742:	f04f 0000 	mov.w	r0, #0
 8005746:	f04f 0100 	mov.w	r1, #0
 800574a:	0159      	lsls	r1, r3, #5
 800574c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005750:	0150      	lsls	r0, r2, #5
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4621      	mov	r1, r4
 8005758:	1a51      	subs	r1, r2, r1
 800575a:	6439      	str	r1, [r7, #64]	; 0x40
 800575c:	4629      	mov	r1, r5
 800575e:	eb63 0301 	sbc.w	r3, r3, r1
 8005762:	647b      	str	r3, [r7, #68]	; 0x44
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005770:	4649      	mov	r1, r9
 8005772:	018b      	lsls	r3, r1, #6
 8005774:	4641      	mov	r1, r8
 8005776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800577a:	4641      	mov	r1, r8
 800577c:	018a      	lsls	r2, r1, #6
 800577e:	4641      	mov	r1, r8
 8005780:	1a51      	subs	r1, r2, r1
 8005782:	63b9      	str	r1, [r7, #56]	; 0x38
 8005784:	4649      	mov	r1, r9
 8005786:	eb63 0301 	sbc.w	r3, r3, r1
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005798:	4649      	mov	r1, r9
 800579a:	00cb      	lsls	r3, r1, #3
 800579c:	4641      	mov	r1, r8
 800579e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057a2:	4641      	mov	r1, r8
 80057a4:	00ca      	lsls	r2, r1, #3
 80057a6:	4610      	mov	r0, r2
 80057a8:	4619      	mov	r1, r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	4622      	mov	r2, r4
 80057ae:	189b      	adds	r3, r3, r2
 80057b0:	633b      	str	r3, [r7, #48]	; 0x30
 80057b2:	462b      	mov	r3, r5
 80057b4:	460a      	mov	r2, r1
 80057b6:	eb42 0303 	adc.w	r3, r2, r3
 80057ba:	637b      	str	r3, [r7, #52]	; 0x34
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80057c8:	4629      	mov	r1, r5
 80057ca:	024b      	lsls	r3, r1, #9
 80057cc:	4621      	mov	r1, r4
 80057ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057d2:	4621      	mov	r1, r4
 80057d4:	024a      	lsls	r2, r1, #9
 80057d6:	4610      	mov	r0, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80057ec:	f7fa fd10 	bl	8000210 <__aeabi_uldivmod>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4613      	mov	r3, r2
 80057f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057fa:	e067      	b.n	80058cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057fc:	4b75      	ldr	r3, [pc, #468]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	099b      	lsrs	r3, r3, #6
 8005802:	2200      	movs	r2, #0
 8005804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005808:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800580c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005814:	67bb      	str	r3, [r7, #120]	; 0x78
 8005816:	2300      	movs	r3, #0
 8005818:	67fb      	str	r3, [r7, #124]	; 0x7c
 800581a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800581e:	4622      	mov	r2, r4
 8005820:	462b      	mov	r3, r5
 8005822:	f04f 0000 	mov.w	r0, #0
 8005826:	f04f 0100 	mov.w	r1, #0
 800582a:	0159      	lsls	r1, r3, #5
 800582c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005830:	0150      	lsls	r0, r2, #5
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4621      	mov	r1, r4
 8005838:	1a51      	subs	r1, r2, r1
 800583a:	62b9      	str	r1, [r7, #40]	; 0x28
 800583c:	4629      	mov	r1, r5
 800583e:	eb63 0301 	sbc.w	r3, r3, r1
 8005842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005850:	4649      	mov	r1, r9
 8005852:	018b      	lsls	r3, r1, #6
 8005854:	4641      	mov	r1, r8
 8005856:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800585a:	4641      	mov	r1, r8
 800585c:	018a      	lsls	r2, r1, #6
 800585e:	4641      	mov	r1, r8
 8005860:	ebb2 0a01 	subs.w	sl, r2, r1
 8005864:	4649      	mov	r1, r9
 8005866:	eb63 0b01 	sbc.w	fp, r3, r1
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005876:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800587a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800587e:	4692      	mov	sl, r2
 8005880:	469b      	mov	fp, r3
 8005882:	4623      	mov	r3, r4
 8005884:	eb1a 0303 	adds.w	r3, sl, r3
 8005888:	623b      	str	r3, [r7, #32]
 800588a:	462b      	mov	r3, r5
 800588c:	eb4b 0303 	adc.w	r3, fp, r3
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	f04f 0300 	mov.w	r3, #0
 800589a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800589e:	4629      	mov	r1, r5
 80058a0:	028b      	lsls	r3, r1, #10
 80058a2:	4621      	mov	r1, r4
 80058a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058a8:	4621      	mov	r1, r4
 80058aa:	028a      	lsls	r2, r1, #10
 80058ac:	4610      	mov	r0, r2
 80058ae:	4619      	mov	r1, r3
 80058b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058b4:	2200      	movs	r2, #0
 80058b6:	673b      	str	r3, [r7, #112]	; 0x70
 80058b8:	677a      	str	r2, [r7, #116]	; 0x74
 80058ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80058be:	f7fa fca7 	bl	8000210 <__aeabi_uldivmod>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4613      	mov	r3, r2
 80058c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058cc:	4b41      	ldr	r3, [pc, #260]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	0c1b      	lsrs	r3, r3, #16
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	3301      	adds	r3, #1
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80058de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80058ee:	e0eb      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058f0:	4b38      	ldr	r3, [pc, #224]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058fc:	4b35      	ldr	r3, [pc, #212]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d06b      	beq.n	80059e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005908:	4b32      	ldr	r3, [pc, #200]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	099b      	lsrs	r3, r3, #6
 800590e:	2200      	movs	r2, #0
 8005910:	66bb      	str	r3, [r7, #104]	; 0x68
 8005912:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591a:	663b      	str	r3, [r7, #96]	; 0x60
 800591c:	2300      	movs	r3, #0
 800591e:	667b      	str	r3, [r7, #100]	; 0x64
 8005920:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005924:	4622      	mov	r2, r4
 8005926:	462b      	mov	r3, r5
 8005928:	f04f 0000 	mov.w	r0, #0
 800592c:	f04f 0100 	mov.w	r1, #0
 8005930:	0159      	lsls	r1, r3, #5
 8005932:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005936:	0150      	lsls	r0, r2, #5
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4621      	mov	r1, r4
 800593e:	1a51      	subs	r1, r2, r1
 8005940:	61b9      	str	r1, [r7, #24]
 8005942:	4629      	mov	r1, r5
 8005944:	eb63 0301 	sbc.w	r3, r3, r1
 8005948:	61fb      	str	r3, [r7, #28]
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005956:	4659      	mov	r1, fp
 8005958:	018b      	lsls	r3, r1, #6
 800595a:	4651      	mov	r1, sl
 800595c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005960:	4651      	mov	r1, sl
 8005962:	018a      	lsls	r2, r1, #6
 8005964:	4651      	mov	r1, sl
 8005966:	ebb2 0801 	subs.w	r8, r2, r1
 800596a:	4659      	mov	r1, fp
 800596c:	eb63 0901 	sbc.w	r9, r3, r1
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800597c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005980:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005984:	4690      	mov	r8, r2
 8005986:	4699      	mov	r9, r3
 8005988:	4623      	mov	r3, r4
 800598a:	eb18 0303 	adds.w	r3, r8, r3
 800598e:	613b      	str	r3, [r7, #16]
 8005990:	462b      	mov	r3, r5
 8005992:	eb49 0303 	adc.w	r3, r9, r3
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80059a4:	4629      	mov	r1, r5
 80059a6:	024b      	lsls	r3, r1, #9
 80059a8:	4621      	mov	r1, r4
 80059aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059ae:	4621      	mov	r1, r4
 80059b0:	024a      	lsls	r2, r1, #9
 80059b2:	4610      	mov	r0, r2
 80059b4:	4619      	mov	r1, r3
 80059b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059ba:	2200      	movs	r2, #0
 80059bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80059be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80059c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059c4:	f7fa fc24 	bl	8000210 <__aeabi_uldivmod>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4613      	mov	r3, r2
 80059ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059d2:	e065      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x420>
 80059d4:	40023800 	.word	0x40023800
 80059d8:	00f42400 	.word	0x00f42400
 80059dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059e0:	4b3d      	ldr	r3, [pc, #244]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x458>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	099b      	lsrs	r3, r3, #6
 80059e6:	2200      	movs	r2, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	4611      	mov	r1, r2
 80059ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059f0:	653b      	str	r3, [r7, #80]	; 0x50
 80059f2:	2300      	movs	r3, #0
 80059f4:	657b      	str	r3, [r7, #84]	; 0x54
 80059f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80059fa:	4642      	mov	r2, r8
 80059fc:	464b      	mov	r3, r9
 80059fe:	f04f 0000 	mov.w	r0, #0
 8005a02:	f04f 0100 	mov.w	r1, #0
 8005a06:	0159      	lsls	r1, r3, #5
 8005a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a0c:	0150      	lsls	r0, r2, #5
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4641      	mov	r1, r8
 8005a14:	1a51      	subs	r1, r2, r1
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	4649      	mov	r1, r9
 8005a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	018b      	lsls	r3, r1, #6
 8005a30:	4651      	mov	r1, sl
 8005a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a36:	4651      	mov	r1, sl
 8005a38:	018a      	lsls	r2, r1, #6
 8005a3a:	4651      	mov	r1, sl
 8005a3c:	1a54      	subs	r4, r2, r1
 8005a3e:	4659      	mov	r1, fp
 8005a40:	eb63 0501 	sbc.w	r5, r3, r1
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	00eb      	lsls	r3, r5, #3
 8005a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a52:	00e2      	lsls	r2, r4, #3
 8005a54:	4614      	mov	r4, r2
 8005a56:	461d      	mov	r5, r3
 8005a58:	4643      	mov	r3, r8
 8005a5a:	18e3      	adds	r3, r4, r3
 8005a5c:	603b      	str	r3, [r7, #0]
 8005a5e:	464b      	mov	r3, r9
 8005a60:	eb45 0303 	adc.w	r3, r5, r3
 8005a64:	607b      	str	r3, [r7, #4]
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a72:	4629      	mov	r1, r5
 8005a74:	028b      	lsls	r3, r1, #10
 8005a76:	4621      	mov	r1, r4
 8005a78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	028a      	lsls	r2, r1, #10
 8005a80:	4610      	mov	r0, r2
 8005a82:	4619      	mov	r1, r3
 8005a84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a88:	2200      	movs	r2, #0
 8005a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a8c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005a8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a92:	f7fa fbbd 	bl	8000210 <__aeabi_uldivmod>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005aa0:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x458>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	0f1b      	lsrs	r3, r3, #28
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005aae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ab2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005abe:	e003      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ac0:	4b06      	ldr	r3, [pc, #24]	; (8005adc <HAL_RCC_GetSysClockFreq+0x45c>)
 8005ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005ac6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ac8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	37b8      	adds	r7, #184	; 0xb8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	00f42400 	.word	0x00f42400

08005ae0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e28d      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8083 	beq.w	8005c06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005b00:	4b94      	ldr	r3, [pc, #592]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 030c 	and.w	r3, r3, #12
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d019      	beq.n	8005b40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005b0c:	4b91      	ldr	r3, [pc, #580]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d106      	bne.n	8005b26 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005b18:	4b8e      	ldr	r3, [pc, #568]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b24:	d00c      	beq.n	8005b40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b26:	4b8b      	ldr	r3, [pc, #556]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	d112      	bne.n	8005b58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b32:	4b88      	ldr	r3, [pc, #544]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b3e:	d10b      	bne.n	8005b58 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b40:	4b84      	ldr	r3, [pc, #528]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d05b      	beq.n	8005c04 <HAL_RCC_OscConfig+0x124>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d157      	bne.n	8005c04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e25a      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b60:	d106      	bne.n	8005b70 <HAL_RCC_OscConfig+0x90>
 8005b62:	4b7c      	ldr	r3, [pc, #496]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a7b      	ldr	r2, [pc, #492]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	e01d      	b.n	8005bac <HAL_RCC_OscConfig+0xcc>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b78:	d10c      	bne.n	8005b94 <HAL_RCC_OscConfig+0xb4>
 8005b7a:	4b76      	ldr	r3, [pc, #472]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a75      	ldr	r2, [pc, #468]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	4b73      	ldr	r3, [pc, #460]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a72      	ldr	r2, [pc, #456]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e00b      	b.n	8005bac <HAL_RCC_OscConfig+0xcc>
 8005b94:	4b6f      	ldr	r3, [pc, #444]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a6e      	ldr	r2, [pc, #440]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	4b6c      	ldr	r3, [pc, #432]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a6b      	ldr	r2, [pc, #428]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d013      	beq.n	8005bdc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb4:	f7fc f90a 	bl	8001dcc <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bbc:	f7fc f906 	bl	8001dcc <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b64      	cmp	r3, #100	; 0x64
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e21f      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bce:	4b61      	ldr	r3, [pc, #388]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0f0      	beq.n	8005bbc <HAL_RCC_OscConfig+0xdc>
 8005bda:	e014      	b.n	8005c06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bdc:	f7fc f8f6 	bl	8001dcc <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005be4:	f7fc f8f2 	bl	8001dcc <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b64      	cmp	r3, #100	; 0x64
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e20b      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bf6:	4b57      	ldr	r3, [pc, #348]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0x104>
 8005c02:	e000      	b.n	8005c06 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d06f      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005c12:	4b50      	ldr	r3, [pc, #320]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 030c 	and.w	r3, r3, #12
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d017      	beq.n	8005c4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005c1e:	4b4d      	ldr	r3, [pc, #308]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d105      	bne.n	8005c36 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005c2a:	4b4a      	ldr	r3, [pc, #296]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00b      	beq.n	8005c4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c36:	4b47      	ldr	r3, [pc, #284]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005c3e:	2b0c      	cmp	r3, #12
 8005c40:	d11c      	bne.n	8005c7c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c42:	4b44      	ldr	r3, [pc, #272]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d116      	bne.n	8005c7c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c4e:	4b41      	ldr	r3, [pc, #260]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_RCC_OscConfig+0x186>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d001      	beq.n	8005c66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e1d3      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c66:	4b3b      	ldr	r3, [pc, #236]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4937      	ldr	r1, [pc, #220]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c7a:	e03a      	b.n	8005cf2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d020      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c84:	4b34      	ldr	r3, [pc, #208]	; (8005d58 <HAL_RCC_OscConfig+0x278>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8a:	f7fc f89f 	bl	8001dcc <HAL_GetTick>
 8005c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c92:	f7fc f89b 	bl	8001dcc <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e1b4      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca4:	4b2b      	ldr	r3, [pc, #172]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0f0      	beq.n	8005c92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb0:	4b28      	ldr	r3, [pc, #160]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4925      	ldr	r1, [pc, #148]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	600b      	str	r3, [r1, #0]
 8005cc4:	e015      	b.n	8005cf2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cc6:	4b24      	ldr	r3, [pc, #144]	; (8005d58 <HAL_RCC_OscConfig+0x278>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ccc:	f7fc f87e 	bl	8001dcc <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cd4:	f7fc f87a 	bl	8001dcc <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e193      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ce6:	4b1b      	ldr	r3, [pc, #108]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d036      	beq.n	8005d6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d016      	beq.n	8005d34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d06:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <HAL_RCC_OscConfig+0x27c>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d0c:	f7fc f85e 	bl	8001dcc <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d14:	f7fc f85a 	bl	8001dcc <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e173      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d26:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <HAL_RCC_OscConfig+0x274>)
 8005d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f0      	beq.n	8005d14 <HAL_RCC_OscConfig+0x234>
 8005d32:	e01b      	b.n	8005d6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d34:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <HAL_RCC_OscConfig+0x27c>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3a:	f7fc f847 	bl	8001dcc <HAL_GetTick>
 8005d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d40:	e00e      	b.n	8005d60 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d42:	f7fc f843 	bl	8001dcc <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d907      	bls.n	8005d60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e15c      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
 8005d54:	40023800 	.word	0x40023800
 8005d58:	42470000 	.word	0x42470000
 8005d5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d60:	4b8a      	ldr	r3, [pc, #552]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1ea      	bne.n	8005d42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 8097 	beq.w	8005ea8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d7e:	4b83      	ldr	r3, [pc, #524]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10f      	bne.n	8005daa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	4b7f      	ldr	r3, [pc, #508]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	4a7e      	ldr	r2, [pc, #504]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d98:	6413      	str	r3, [r2, #64]	; 0x40
 8005d9a:	4b7c      	ldr	r3, [pc, #496]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da2:	60bb      	str	r3, [r7, #8]
 8005da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da6:	2301      	movs	r3, #1
 8005da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005daa:	4b79      	ldr	r3, [pc, #484]	; (8005f90 <HAL_RCC_OscConfig+0x4b0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d118      	bne.n	8005de8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005db6:	4b76      	ldr	r3, [pc, #472]	; (8005f90 <HAL_RCC_OscConfig+0x4b0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a75      	ldr	r2, [pc, #468]	; (8005f90 <HAL_RCC_OscConfig+0x4b0>)
 8005dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dc2:	f7fc f803 	bl	8001dcc <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dca:	f7fb ffff 	bl	8001dcc <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e118      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ddc:	4b6c      	ldr	r3, [pc, #432]	; (8005f90 <HAL_RCC_OscConfig+0x4b0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0f0      	beq.n	8005dca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d106      	bne.n	8005dfe <HAL_RCC_OscConfig+0x31e>
 8005df0:	4b66      	ldr	r3, [pc, #408]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df4:	4a65      	ldr	r2, [pc, #404]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005df6:	f043 0301 	orr.w	r3, r3, #1
 8005dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8005dfc:	e01c      	b.n	8005e38 <HAL_RCC_OscConfig+0x358>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b05      	cmp	r3, #5
 8005e04:	d10c      	bne.n	8005e20 <HAL_RCC_OscConfig+0x340>
 8005e06:	4b61      	ldr	r3, [pc, #388]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	4a60      	ldr	r2, [pc, #384]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005e0c:	f043 0304 	orr.w	r3, r3, #4
 8005e10:	6713      	str	r3, [r2, #112]	; 0x70
 8005e12:	4b5e      	ldr	r3, [pc, #376]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e16:	4a5d      	ldr	r2, [pc, #372]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005e18:	f043 0301 	orr.w	r3, r3, #1
 8005e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e1e:	e00b      	b.n	8005e38 <HAL_RCC_OscConfig+0x358>
 8005e20:	4b5a      	ldr	r3, [pc, #360]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e24:	4a59      	ldr	r2, [pc, #356]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e2c:	4b57      	ldr	r3, [pc, #348]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	4a56      	ldr	r2, [pc, #344]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005e32:	f023 0304 	bic.w	r3, r3, #4
 8005e36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d015      	beq.n	8005e6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e40:	f7fb ffc4 	bl	8001dcc <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e46:	e00a      	b.n	8005e5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e48:	f7fb ffc0 	bl	8001dcc <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e0d7      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e5e:	4b4b      	ldr	r3, [pc, #300]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0ee      	beq.n	8005e48 <HAL_RCC_OscConfig+0x368>
 8005e6a:	e014      	b.n	8005e96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6c:	f7fb ffae 	bl	8001dcc <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e72:	e00a      	b.n	8005e8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e74:	f7fb ffaa 	bl	8001dcc <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e0c1      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e8a:	4b40      	ldr	r3, [pc, #256]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1ee      	bne.n	8005e74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d105      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e9c:	4b3b      	ldr	r3, [pc, #236]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	4a3a      	ldr	r2, [pc, #232]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 80ad 	beq.w	800600c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eb2:	4b36      	ldr	r3, [pc, #216]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d060      	beq.n	8005f80 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d145      	bne.n	8005f52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec6:	4b33      	ldr	r3, [pc, #204]	; (8005f94 <HAL_RCC_OscConfig+0x4b4>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ecc:	f7fb ff7e 	bl	8001dcc <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ed4:	f7fb ff7a 	bl	8001dcc <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e093      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ee6:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f0      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69da      	ldr	r2, [r3, #28]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	019b      	lsls	r3, r3, #6
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	085b      	lsrs	r3, r3, #1
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	041b      	lsls	r3, r3, #16
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	061b      	lsls	r3, r3, #24
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	071b      	lsls	r3, r3, #28
 8005f1e:	491b      	ldr	r1, [pc, #108]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f24:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <HAL_RCC_OscConfig+0x4b4>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2a:	f7fb ff4f 	bl	8001dcc <HAL_GetTick>
 8005f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f32:	f7fb ff4b 	bl	8001dcc <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e064      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f44:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0f0      	beq.n	8005f32 <HAL_RCC_OscConfig+0x452>
 8005f50:	e05c      	b.n	800600c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f52:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <HAL_RCC_OscConfig+0x4b4>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f58:	f7fb ff38 	bl	8001dcc <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f60:	f7fb ff34 	bl	8001dcc <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e04d      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f72:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <HAL_RCC_OscConfig+0x4ac>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1f0      	bne.n	8005f60 <HAL_RCC_OscConfig+0x480>
 8005f7e:	e045      	b.n	800600c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d107      	bne.n	8005f98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e040      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	40007000 	.word	0x40007000
 8005f94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f98:	4b1f      	ldr	r3, [pc, #124]	; (8006018 <HAL_RCC_OscConfig+0x538>)
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d030      	beq.n	8006008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d129      	bne.n	8006008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d122      	bne.n	8006008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fc8:	4013      	ands	r3, r2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d119      	bne.n	8006008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fde:	085b      	lsrs	r3, r3, #1
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d10f      	bne.n	8006008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d107      	bne.n	8006008 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006002:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	d001      	beq.n	800600c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	40023800 	.word	0x40023800

0800601c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e041      	b.n	80060b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fb fad4 	bl	80015f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3304      	adds	r3, #4
 8006058:	4619      	mov	r1, r3
 800605a:	4610      	mov	r0, r2
 800605c:	f000 fbe0 	bl	8006820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
	...

080060bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d001      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e04e      	b.n	8006172 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a23      	ldr	r2, [pc, #140]	; (8006180 <HAL_TIM_Base_Start_IT+0xc4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d022      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x80>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fe:	d01d      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x80>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <HAL_TIM_Base_Start_IT+0xc8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d018      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x80>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1e      	ldr	r2, [pc, #120]	; (8006188 <HAL_TIM_Base_Start_IT+0xcc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d013      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x80>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1c      	ldr	r2, [pc, #112]	; (800618c <HAL_TIM_Base_Start_IT+0xd0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00e      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x80>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <HAL_TIM_Base_Start_IT+0xd4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d009      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x80>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a19      	ldr	r2, [pc, #100]	; (8006194 <HAL_TIM_Base_Start_IT+0xd8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x80>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a18      	ldr	r2, [pc, #96]	; (8006198 <HAL_TIM_Base_Start_IT+0xdc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d111      	bne.n	8006160 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b06      	cmp	r3, #6
 800614c:	d010      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0201 	orr.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615e:	e007      	b.n	8006170 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40010000 	.word	0x40010000
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800
 800618c:	40000c00 	.word	0x40000c00
 8006190:	40010400 	.word	0x40010400
 8006194:	40014000 	.word	0x40014000
 8006198:	40001800 	.word	0x40001800

0800619c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0201 	bic.w	r2, r2, #1
 80061b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6a1a      	ldr	r2, [r3, #32]
 80061ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80061be:	4013      	ands	r3, r2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10f      	bne.n	80061e4 <HAL_TIM_Base_Stop_IT+0x48>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6a1a      	ldr	r2, [r3, #32]
 80061ca:	f240 4344 	movw	r3, #1092	; 0x444
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d107      	bne.n	80061e4 <HAL_TIM_Base_Stop_IT+0x48>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0201 	bic.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e041      	b.n	8006290 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f839 	bl	8006298 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4610      	mov	r0, r2
 800623a:	f000 faf1 	bl	8006820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d122      	bne.n	8006308 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d11b      	bne.n	8006308 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0202 	mvn.w	r2, #2
 80062d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa77 	bl	80067e2 <HAL_TIM_IC_CaptureCallback>
 80062f4:	e005      	b.n	8006302 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa69 	bl	80067ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fa7a 	bl	80067f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b04      	cmp	r3, #4
 8006314:	d122      	bne.n	800635c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b04      	cmp	r3, #4
 8006322:	d11b      	bne.n	800635c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0204 	mvn.w	r2, #4
 800632c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2202      	movs	r2, #2
 8006332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa4d 	bl	80067e2 <HAL_TIM_IC_CaptureCallback>
 8006348:	e005      	b.n	8006356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa3f 	bl	80067ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fa50 	bl	80067f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b08      	cmp	r3, #8
 8006368:	d122      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b08      	cmp	r3, #8
 8006376:	d11b      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0208 	mvn.w	r2, #8
 8006380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2204      	movs	r2, #4
 8006386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa23 	bl	80067e2 <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa15 	bl	80067ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fa26 	bl	80067f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0310 	and.w	r3, r3, #16
 80063ba:	2b10      	cmp	r3, #16
 80063bc:	d122      	bne.n	8006404 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	2b10      	cmp	r3, #16
 80063ca:	d11b      	bne.n	8006404 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0210 	mvn.w	r2, #16
 80063d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2208      	movs	r2, #8
 80063da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f9f9 	bl	80067e2 <HAL_TIM_IC_CaptureCallback>
 80063f0:	e005      	b.n	80063fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9eb 	bl	80067ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f9fc 	bl	80067f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b01      	cmp	r3, #1
 8006410:	d10e      	bne.n	8006430 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b01      	cmp	r3, #1
 800641e:	d107      	bne.n	8006430 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f06f 0201 	mvn.w	r2, #1
 8006428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fa fe9e 	bl	800116c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643a:	2b80      	cmp	r3, #128	; 0x80
 800643c:	d10e      	bne.n	800645c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006448:	2b80      	cmp	r3, #128	; 0x80
 800644a:	d107      	bne.n	800645c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fda4 	bl	8006fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006466:	2b40      	cmp	r3, #64	; 0x40
 8006468:	d10e      	bne.n	8006488 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	d107      	bne.n	8006488 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f9c1 	bl	800680a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b20      	cmp	r3, #32
 8006494:	d10e      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f003 0320 	and.w	r3, r3, #32
 80064a0:	2b20      	cmp	r3, #32
 80064a2:	d107      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f06f 0220 	mvn.w	r2, #32
 80064ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fd6e 	bl	8006f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e0ae      	b.n	8006638 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b0c      	cmp	r3, #12
 80064e6:	f200 809f 	bhi.w	8006628 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006525 	.word	0x08006525
 80064f4:	08006629 	.word	0x08006629
 80064f8:	08006629 	.word	0x08006629
 80064fc:	08006629 	.word	0x08006629
 8006500:	08006565 	.word	0x08006565
 8006504:	08006629 	.word	0x08006629
 8006508:	08006629 	.word	0x08006629
 800650c:	08006629 	.word	0x08006629
 8006510:	080065a7 	.word	0x080065a7
 8006514:	08006629 	.word	0x08006629
 8006518:	08006629 	.word	0x08006629
 800651c:	08006629 	.word	0x08006629
 8006520:	080065e7 	.word	0x080065e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fa18 	bl	8006960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699a      	ldr	r2, [r3, #24]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0208 	orr.w	r2, r2, #8
 800653e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699a      	ldr	r2, [r3, #24]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0204 	bic.w	r2, r2, #4
 800654e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6999      	ldr	r1, [r3, #24]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	619a      	str	r2, [r3, #24]
      break;
 8006562:	e064      	b.n	800662e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fa68 	bl	8006a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800657e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800658e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6999      	ldr	r1, [r3, #24]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	021a      	lsls	r2, r3, #8
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	619a      	str	r2, [r3, #24]
      break;
 80065a4:	e043      	b.n	800662e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68b9      	ldr	r1, [r7, #8]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 fabd 	bl	8006b2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69da      	ldr	r2, [r3, #28]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 0208 	orr.w	r2, r2, #8
 80065c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69da      	ldr	r2, [r3, #28]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0204 	bic.w	r2, r2, #4
 80065d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69d9      	ldr	r1, [r3, #28]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	61da      	str	r2, [r3, #28]
      break;
 80065e4:	e023      	b.n	800662e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fb11 	bl	8006c14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69d9      	ldr	r1, [r3, #28]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	021a      	lsls	r2, r3, #8
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	61da      	str	r2, [r3, #28]
      break;
 8006626:	e002      	b.n	800662e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	75fb      	strb	r3, [r7, #23]
      break;
 800662c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006636:	7dfb      	ldrb	r3, [r7, #23]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_TIM_ConfigClockSource+0x1c>
 8006658:	2302      	movs	r3, #2
 800665a:	e0b4      	b.n	80067c6 <HAL_TIM_ConfigClockSource+0x186>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800667a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006694:	d03e      	beq.n	8006714 <HAL_TIM_ConfigClockSource+0xd4>
 8006696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800669a:	f200 8087 	bhi.w	80067ac <HAL_TIM_ConfigClockSource+0x16c>
 800669e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a2:	f000 8086 	beq.w	80067b2 <HAL_TIM_ConfigClockSource+0x172>
 80066a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066aa:	d87f      	bhi.n	80067ac <HAL_TIM_ConfigClockSource+0x16c>
 80066ac:	2b70      	cmp	r3, #112	; 0x70
 80066ae:	d01a      	beq.n	80066e6 <HAL_TIM_ConfigClockSource+0xa6>
 80066b0:	2b70      	cmp	r3, #112	; 0x70
 80066b2:	d87b      	bhi.n	80067ac <HAL_TIM_ConfigClockSource+0x16c>
 80066b4:	2b60      	cmp	r3, #96	; 0x60
 80066b6:	d050      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x11a>
 80066b8:	2b60      	cmp	r3, #96	; 0x60
 80066ba:	d877      	bhi.n	80067ac <HAL_TIM_ConfigClockSource+0x16c>
 80066bc:	2b50      	cmp	r3, #80	; 0x50
 80066be:	d03c      	beq.n	800673a <HAL_TIM_ConfigClockSource+0xfa>
 80066c0:	2b50      	cmp	r3, #80	; 0x50
 80066c2:	d873      	bhi.n	80067ac <HAL_TIM_ConfigClockSource+0x16c>
 80066c4:	2b40      	cmp	r3, #64	; 0x40
 80066c6:	d058      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x13a>
 80066c8:	2b40      	cmp	r3, #64	; 0x40
 80066ca:	d86f      	bhi.n	80067ac <HAL_TIM_ConfigClockSource+0x16c>
 80066cc:	2b30      	cmp	r3, #48	; 0x30
 80066ce:	d064      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x15a>
 80066d0:	2b30      	cmp	r3, #48	; 0x30
 80066d2:	d86b      	bhi.n	80067ac <HAL_TIM_ConfigClockSource+0x16c>
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d060      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x15a>
 80066d8:	2b20      	cmp	r3, #32
 80066da:	d867      	bhi.n	80067ac <HAL_TIM_ConfigClockSource+0x16c>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d05c      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x15a>
 80066e0:	2b10      	cmp	r3, #16
 80066e2:	d05a      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x15a>
 80066e4:	e062      	b.n	80067ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	6899      	ldr	r1, [r3, #8]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f000 fb5d 	bl	8006db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	609a      	str	r2, [r3, #8]
      break;
 8006712:	e04f      	b.n	80067b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	6899      	ldr	r1, [r3, #8]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f000 fb46 	bl	8006db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006736:	609a      	str	r2, [r3, #8]
      break;
 8006738:	e03c      	b.n	80067b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	6859      	ldr	r1, [r3, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	461a      	mov	r2, r3
 8006748:	f000 faba 	bl	8006cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2150      	movs	r1, #80	; 0x50
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fb13 	bl	8006d7e <TIM_ITRx_SetConfig>
      break;
 8006758:	e02c      	b.n	80067b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	6859      	ldr	r1, [r3, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	461a      	mov	r2, r3
 8006768:	f000 fad9 	bl	8006d1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2160      	movs	r1, #96	; 0x60
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fb03 	bl	8006d7e <TIM_ITRx_SetConfig>
      break;
 8006778:	e01c      	b.n	80067b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	6859      	ldr	r1, [r3, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	461a      	mov	r2, r3
 8006788:	f000 fa9a 	bl	8006cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2140      	movs	r1, #64	; 0x40
 8006792:	4618      	mov	r0, r3
 8006794:	f000 faf3 	bl	8006d7e <TIM_ITRx_SetConfig>
      break;
 8006798:	e00c      	b.n	80067b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4619      	mov	r1, r3
 80067a4:	4610      	mov	r0, r2
 80067a6:	f000 faea 	bl	8006d7e <TIM_ITRx_SetConfig>
      break;
 80067aa:	e003      	b.n	80067b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	73fb      	strb	r3, [r7, #15]
      break;
 80067b0:	e000      	b.n	80067b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
	...

08006820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a40      	ldr	r2, [pc, #256]	; (8006934 <TIM_Base_SetConfig+0x114>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d013      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683e:	d00f      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a3d      	ldr	r2, [pc, #244]	; (8006938 <TIM_Base_SetConfig+0x118>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00b      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a3c      	ldr	r2, [pc, #240]	; (800693c <TIM_Base_SetConfig+0x11c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d007      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a3b      	ldr	r2, [pc, #236]	; (8006940 <TIM_Base_SetConfig+0x120>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d003      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a3a      	ldr	r2, [pc, #232]	; (8006944 <TIM_Base_SetConfig+0x124>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d108      	bne.n	8006872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a2f      	ldr	r2, [pc, #188]	; (8006934 <TIM_Base_SetConfig+0x114>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d02b      	beq.n	80068d2 <TIM_Base_SetConfig+0xb2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006880:	d027      	beq.n	80068d2 <TIM_Base_SetConfig+0xb2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a2c      	ldr	r2, [pc, #176]	; (8006938 <TIM_Base_SetConfig+0x118>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d023      	beq.n	80068d2 <TIM_Base_SetConfig+0xb2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a2b      	ldr	r2, [pc, #172]	; (800693c <TIM_Base_SetConfig+0x11c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d01f      	beq.n	80068d2 <TIM_Base_SetConfig+0xb2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a2a      	ldr	r2, [pc, #168]	; (8006940 <TIM_Base_SetConfig+0x120>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d01b      	beq.n	80068d2 <TIM_Base_SetConfig+0xb2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a29      	ldr	r2, [pc, #164]	; (8006944 <TIM_Base_SetConfig+0x124>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d017      	beq.n	80068d2 <TIM_Base_SetConfig+0xb2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a28      	ldr	r2, [pc, #160]	; (8006948 <TIM_Base_SetConfig+0x128>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <TIM_Base_SetConfig+0xb2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a27      	ldr	r2, [pc, #156]	; (800694c <TIM_Base_SetConfig+0x12c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00f      	beq.n	80068d2 <TIM_Base_SetConfig+0xb2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a26      	ldr	r2, [pc, #152]	; (8006950 <TIM_Base_SetConfig+0x130>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00b      	beq.n	80068d2 <TIM_Base_SetConfig+0xb2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a25      	ldr	r2, [pc, #148]	; (8006954 <TIM_Base_SetConfig+0x134>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d007      	beq.n	80068d2 <TIM_Base_SetConfig+0xb2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a24      	ldr	r2, [pc, #144]	; (8006958 <TIM_Base_SetConfig+0x138>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d003      	beq.n	80068d2 <TIM_Base_SetConfig+0xb2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a23      	ldr	r2, [pc, #140]	; (800695c <TIM_Base_SetConfig+0x13c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d108      	bne.n	80068e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a0a      	ldr	r2, [pc, #40]	; (8006934 <TIM_Base_SetConfig+0x114>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_Base_SetConfig+0xf8>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a0c      	ldr	r2, [pc, #48]	; (8006944 <TIM_Base_SetConfig+0x124>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d103      	bne.n	8006920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	615a      	str	r2, [r3, #20]
}
 8006926:	bf00      	nop
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40010000 	.word	0x40010000
 8006938:	40000400 	.word	0x40000400
 800693c:	40000800 	.word	0x40000800
 8006940:	40000c00 	.word	0x40000c00
 8006944:	40010400 	.word	0x40010400
 8006948:	40014000 	.word	0x40014000
 800694c:	40014400 	.word	0x40014400
 8006950:	40014800 	.word	0x40014800
 8006954:	40001800 	.word	0x40001800
 8006958:	40001c00 	.word	0x40001c00
 800695c:	40002000 	.word	0x40002000

08006960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f023 0201 	bic.w	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0303 	bic.w	r3, r3, #3
 8006996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f023 0302 	bic.w	r3, r3, #2
 80069a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a20      	ldr	r2, [pc, #128]	; (8006a38 <TIM_OC1_SetConfig+0xd8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_OC1_SetConfig+0x64>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a1f      	ldr	r2, [pc, #124]	; (8006a3c <TIM_OC1_SetConfig+0xdc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d10c      	bne.n	80069de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f023 0308 	bic.w	r3, r3, #8
 80069ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f023 0304 	bic.w	r3, r3, #4
 80069dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a15      	ldr	r2, [pc, #84]	; (8006a38 <TIM_OC1_SetConfig+0xd8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d003      	beq.n	80069ee <TIM_OC1_SetConfig+0x8e>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a14      	ldr	r2, [pc, #80]	; (8006a3c <TIM_OC1_SetConfig+0xdc>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d111      	bne.n	8006a12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	621a      	str	r2, [r3, #32]
}
 8006a2c:	bf00      	nop
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	40010000 	.word	0x40010000
 8006a3c:	40010400 	.word	0x40010400

08006a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	f023 0210 	bic.w	r2, r3, #16
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	021b      	lsls	r3, r3, #8
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f023 0320 	bic.w	r3, r3, #32
 8006a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a22      	ldr	r2, [pc, #136]	; (8006b24 <TIM_OC2_SetConfig+0xe4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d003      	beq.n	8006aa8 <TIM_OC2_SetConfig+0x68>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a21      	ldr	r2, [pc, #132]	; (8006b28 <TIM_OC2_SetConfig+0xe8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d10d      	bne.n	8006ac4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a17      	ldr	r2, [pc, #92]	; (8006b24 <TIM_OC2_SetConfig+0xe4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d003      	beq.n	8006ad4 <TIM_OC2_SetConfig+0x94>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a16      	ldr	r2, [pc, #88]	; (8006b28 <TIM_OC2_SetConfig+0xe8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d113      	bne.n	8006afc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ada:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	621a      	str	r2, [r3, #32]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	40010000 	.word	0x40010000
 8006b28:	40010400 	.word	0x40010400

08006b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	021b      	lsls	r3, r3, #8
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a21      	ldr	r2, [pc, #132]	; (8006c0c <TIM_OC3_SetConfig+0xe0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d003      	beq.n	8006b92 <TIM_OC3_SetConfig+0x66>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a20      	ldr	r2, [pc, #128]	; (8006c10 <TIM_OC3_SetConfig+0xe4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d10d      	bne.n	8006bae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <TIM_OC3_SetConfig+0xe0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d003      	beq.n	8006bbe <TIM_OC3_SetConfig+0x92>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <TIM_OC3_SetConfig+0xe4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d113      	bne.n	8006be6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	621a      	str	r2, [r3, #32]
}
 8006c00:	bf00      	nop
 8006c02:	371c      	adds	r7, #28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40010400 	.word	0x40010400

08006c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	021b      	lsls	r3, r3, #8
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	031b      	lsls	r3, r3, #12
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a12      	ldr	r2, [pc, #72]	; (8006cb8 <TIM_OC4_SetConfig+0xa4>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d003      	beq.n	8006c7c <TIM_OC4_SetConfig+0x68>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a11      	ldr	r2, [pc, #68]	; (8006cbc <TIM_OC4_SetConfig+0xa8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d109      	bne.n	8006c90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	019b      	lsls	r3, r3, #6
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40010000 	.word	0x40010000
 8006cbc:	40010400 	.word	0x40010400

08006cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f023 0201 	bic.w	r2, r3, #1
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	011b      	lsls	r3, r3, #4
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f023 030a 	bic.w	r3, r3, #10
 8006cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	621a      	str	r2, [r3, #32]
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b087      	sub	sp, #28
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f023 0210 	bic.w	r2, r3, #16
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	031b      	lsls	r3, r3, #12
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	011b      	lsls	r3, r3, #4
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	621a      	str	r2, [r3, #32]
}
 8006d72:	bf00      	nop
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b085      	sub	sp, #20
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	f043 0307 	orr.w	r3, r3, #7
 8006da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	609a      	str	r2, [r3, #8]
}
 8006da8:	bf00      	nop
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	021a      	lsls	r2, r3, #8
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	609a      	str	r2, [r3, #8]
}
 8006de8:	bf00      	nop
 8006dea:	371c      	adds	r7, #28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e05a      	b.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a21      	ldr	r2, [pc, #132]	; (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d022      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e58:	d01d      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1d      	ldr	r2, [pc, #116]	; (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d018      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a1b      	ldr	r2, [pc, #108]	; (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d013      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a1a      	ldr	r2, [pc, #104]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00e      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a18      	ldr	r2, [pc, #96]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d009      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a17      	ldr	r2, [pc, #92]	; (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d004      	beq.n	8006e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d10c      	bne.n	8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40010000 	.word	0x40010000
 8006ed4:	40000400 	.word	0x40000400
 8006ed8:	40000800 	.word	0x40000800
 8006edc:	40000c00 	.word	0x40000c00
 8006ee0:	40010400 	.word	0x40010400
 8006ee4:	40014000 	.word	0x40014000
 8006ee8:	40001800 	.word	0x40001800

08006eec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d101      	bne.n	8006f08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f04:	2302      	movs	r3, #2
 8006f06:	e03d      	b.n	8006f84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fb8:	b084      	sub	sp, #16
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	f107 001c 	add.w	r0, r7, #28
 8006fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d122      	bne.n	8007016 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d105      	bne.n	800700a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fbe8 	bl	80087e0 <USB_CoreReset>
 8007010:	4603      	mov	r3, r0
 8007012:	73fb      	strb	r3, [r7, #15]
 8007014:	e01a      	b.n	800704c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 fbdc 	bl	80087e0 <USB_CoreReset>
 8007028:	4603      	mov	r3, r0
 800702a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800702c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
 800703e:	e005      	b.n	800704c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007044:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	2b01      	cmp	r3, #1
 8007050:	d10b      	bne.n	800706a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f043 0206 	orr.w	r2, r3, #6
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f043 0220 	orr.w	r2, r3, #32
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800706a:	7bfb      	ldrb	r3, [r7, #15]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007076:	b004      	add	sp, #16
 8007078:	4770      	bx	lr
	...

0800707c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800708a:	79fb      	ldrb	r3, [r7, #7]
 800708c:	2b02      	cmp	r3, #2
 800708e:	d165      	bne.n	800715c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4a41      	ldr	r2, [pc, #260]	; (8007198 <USB_SetTurnaroundTime+0x11c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d906      	bls.n	80070a6 <USB_SetTurnaroundTime+0x2a>
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4a40      	ldr	r2, [pc, #256]	; (800719c <USB_SetTurnaroundTime+0x120>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d202      	bcs.n	80070a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80070a0:	230f      	movs	r3, #15
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	e062      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	4a3c      	ldr	r2, [pc, #240]	; (800719c <USB_SetTurnaroundTime+0x120>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d306      	bcc.n	80070bc <USB_SetTurnaroundTime+0x40>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	4a3b      	ldr	r2, [pc, #236]	; (80071a0 <USB_SetTurnaroundTime+0x124>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d202      	bcs.n	80070bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80070b6:	230e      	movs	r3, #14
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	e057      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4a38      	ldr	r2, [pc, #224]	; (80071a0 <USB_SetTurnaroundTime+0x124>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d306      	bcc.n	80070d2 <USB_SetTurnaroundTime+0x56>
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4a37      	ldr	r2, [pc, #220]	; (80071a4 <USB_SetTurnaroundTime+0x128>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d202      	bcs.n	80070d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80070cc:	230d      	movs	r3, #13
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	e04c      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	4a33      	ldr	r2, [pc, #204]	; (80071a4 <USB_SetTurnaroundTime+0x128>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d306      	bcc.n	80070e8 <USB_SetTurnaroundTime+0x6c>
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	4a32      	ldr	r2, [pc, #200]	; (80071a8 <USB_SetTurnaroundTime+0x12c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d802      	bhi.n	80070e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80070e2:	230c      	movs	r3, #12
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	e041      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	4a2f      	ldr	r2, [pc, #188]	; (80071a8 <USB_SetTurnaroundTime+0x12c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d906      	bls.n	80070fe <USB_SetTurnaroundTime+0x82>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4a2e      	ldr	r2, [pc, #184]	; (80071ac <USB_SetTurnaroundTime+0x130>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d802      	bhi.n	80070fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80070f8:	230b      	movs	r3, #11
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	e036      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	4a2a      	ldr	r2, [pc, #168]	; (80071ac <USB_SetTurnaroundTime+0x130>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d906      	bls.n	8007114 <USB_SetTurnaroundTime+0x98>
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	4a29      	ldr	r2, [pc, #164]	; (80071b0 <USB_SetTurnaroundTime+0x134>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d802      	bhi.n	8007114 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800710e:	230a      	movs	r3, #10
 8007110:	617b      	str	r3, [r7, #20]
 8007112:	e02b      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4a26      	ldr	r2, [pc, #152]	; (80071b0 <USB_SetTurnaroundTime+0x134>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d906      	bls.n	800712a <USB_SetTurnaroundTime+0xae>
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4a25      	ldr	r2, [pc, #148]	; (80071b4 <USB_SetTurnaroundTime+0x138>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d202      	bcs.n	800712a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007124:	2309      	movs	r3, #9
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	e020      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	4a21      	ldr	r2, [pc, #132]	; (80071b4 <USB_SetTurnaroundTime+0x138>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d306      	bcc.n	8007140 <USB_SetTurnaroundTime+0xc4>
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	4a20      	ldr	r2, [pc, #128]	; (80071b8 <USB_SetTurnaroundTime+0x13c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d802      	bhi.n	8007140 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800713a:	2308      	movs	r3, #8
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	e015      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4a1d      	ldr	r2, [pc, #116]	; (80071b8 <USB_SetTurnaroundTime+0x13c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d906      	bls.n	8007156 <USB_SetTurnaroundTime+0xda>
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4a1c      	ldr	r2, [pc, #112]	; (80071bc <USB_SetTurnaroundTime+0x140>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d202      	bcs.n	8007156 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007150:	2307      	movs	r3, #7
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	e00a      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007156:	2306      	movs	r3, #6
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	e007      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d102      	bne.n	8007168 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007162:	2309      	movs	r3, #9
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	e001      	b.n	800716c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007168:	2309      	movs	r3, #9
 800716a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	029b      	lsls	r3, r3, #10
 8007180:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007184:	431a      	orrs	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	371c      	adds	r7, #28
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	00d8acbf 	.word	0x00d8acbf
 800719c:	00e4e1c0 	.word	0x00e4e1c0
 80071a0:	00f42400 	.word	0x00f42400
 80071a4:	01067380 	.word	0x01067380
 80071a8:	011a499f 	.word	0x011a499f
 80071ac:	01312cff 	.word	0x01312cff
 80071b0:	014ca43f 	.word	0x014ca43f
 80071b4:	016e3600 	.word	0x016e3600
 80071b8:	01a6ab1f 	.word	0x01a6ab1f
 80071bc:	01e84800 	.word	0x01e84800

080071c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f043 0201 	orr.w	r2, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f023 0201 	bic.w	r2, r3, #1
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	460b      	mov	r3, r1
 800720e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d115      	bne.n	8007252 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007232:	2001      	movs	r0, #1
 8007234:	f7fa fdd6 	bl	8001de4 <HAL_Delay>
      ms++;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3301      	adds	r3, #1
 800723c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fa3f 	bl	80086c2 <USB_GetMode>
 8007244:	4603      	mov	r3, r0
 8007246:	2b01      	cmp	r3, #1
 8007248:	d01e      	beq.n	8007288 <USB_SetCurrentMode+0x84>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b31      	cmp	r3, #49	; 0x31
 800724e:	d9f0      	bls.n	8007232 <USB_SetCurrentMode+0x2e>
 8007250:	e01a      	b.n	8007288 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d115      	bne.n	8007284 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007264:	2001      	movs	r0, #1
 8007266:	f7fa fdbd 	bl	8001de4 <HAL_Delay>
      ms++;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 fa26 	bl	80086c2 <USB_GetMode>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <USB_SetCurrentMode+0x84>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b31      	cmp	r3, #49	; 0x31
 8007280:	d9f0      	bls.n	8007264 <USB_SetCurrentMode+0x60>
 8007282:	e001      	b.n	8007288 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e005      	b.n	8007294 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b32      	cmp	r3, #50	; 0x32
 800728c:	d101      	bne.n	8007292 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800729c:	b084      	sub	sp, #16
 800729e:	b580      	push	{r7, lr}
 80072a0:	b086      	sub	sp, #24
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072b6:	2300      	movs	r3, #0
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	e009      	b.n	80072d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	3340      	adds	r3, #64	; 0x40
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	2200      	movs	r2, #0
 80072c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	3301      	adds	r3, #1
 80072ce:	613b      	str	r3, [r7, #16]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	2b0e      	cmp	r3, #14
 80072d4:	d9f2      	bls.n	80072bc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d11c      	bne.n	8007316 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ea:	f043 0302 	orr.w	r3, r3, #2
 80072ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	e005      	b.n	8007322 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007328:	461a      	mov	r2, r3
 800732a:	2300      	movs	r3, #0
 800732c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007334:	4619      	mov	r1, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733c:	461a      	mov	r2, r3
 800733e:	680b      	ldr	r3, [r1, #0]
 8007340:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	2b01      	cmp	r3, #1
 8007346:	d10c      	bne.n	8007362 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	2b00      	cmp	r3, #0
 800734c:	d104      	bne.n	8007358 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800734e:	2100      	movs	r1, #0
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f965 	bl	8007620 <USB_SetDevSpeed>
 8007356:	e008      	b.n	800736a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007358:	2101      	movs	r1, #1
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f960 	bl	8007620 <USB_SetDevSpeed>
 8007360:	e003      	b.n	800736a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007362:	2103      	movs	r1, #3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f95b 	bl	8007620 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800736a:	2110      	movs	r1, #16
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f8f3 	bl	8007558 <USB_FlushTxFifo>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f91f 	bl	80075c0 <USB_FlushRxFifo>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007392:	461a      	mov	r2, r3
 8007394:	2300      	movs	r3, #0
 8007396:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739e:	461a      	mov	r2, r3
 80073a0:	2300      	movs	r3, #0
 80073a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073aa:	461a      	mov	r2, r3
 80073ac:	2300      	movs	r3, #0
 80073ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073b0:	2300      	movs	r3, #0
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	e043      	b.n	800743e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073cc:	d118      	bne.n	8007400 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10a      	bne.n	80073ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e0:	461a      	mov	r2, r3
 80073e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073e6:	6013      	str	r3, [r2, #0]
 80073e8:	e013      	b.n	8007412 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f6:	461a      	mov	r2, r3
 80073f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	e008      	b.n	8007412 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740c:	461a      	mov	r2, r3
 800740e:	2300      	movs	r3, #0
 8007410:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	4413      	add	r3, r2
 800741a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741e:	461a      	mov	r2, r3
 8007420:	2300      	movs	r3, #0
 8007422:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	461a      	mov	r2, r3
 8007432:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007436:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	3301      	adds	r3, #1
 800743c:	613b      	str	r3, [r7, #16]
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	429a      	cmp	r2, r3
 8007444:	d3b7      	bcc.n	80073b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007446:	2300      	movs	r3, #0
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	e043      	b.n	80074d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800745e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007462:	d118      	bne.n	8007496 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10a      	bne.n	8007480 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007476:	461a      	mov	r2, r3
 8007478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	e013      	b.n	80074a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748c:	461a      	mov	r2, r3
 800748e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	e008      	b.n	80074a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a2:	461a      	mov	r2, r3
 80074a4:	2300      	movs	r3, #0
 80074a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b4:	461a      	mov	r2, r3
 80074b6:	2300      	movs	r3, #0
 80074b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c6:	461a      	mov	r2, r3
 80074c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	3301      	adds	r3, #1
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d3b7      	bcc.n	800744c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80074fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	2b00      	cmp	r3, #0
 8007502:	d105      	bne.n	8007510 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	f043 0210 	orr.w	r2, r3, #16
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699a      	ldr	r2, [r3, #24]
 8007514:	4b0f      	ldr	r3, [pc, #60]	; (8007554 <USB_DevInit+0x2b8>)
 8007516:	4313      	orrs	r3, r2
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800751c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d005      	beq.n	800752e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	f043 0208 	orr.w	r2, r3, #8
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800752e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007530:	2b01      	cmp	r3, #1
 8007532:	d107      	bne.n	8007544 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800753c:	f043 0304 	orr.w	r3, r3, #4
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007544:	7dfb      	ldrb	r3, [r7, #23]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007550:	b004      	add	sp, #16
 8007552:	4770      	bx	lr
 8007554:	803c3800 	.word	0x803c3800

08007558 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3301      	adds	r3, #1
 800756a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4a13      	ldr	r2, [pc, #76]	; (80075bc <USB_FlushTxFifo+0x64>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d901      	bls.n	8007578 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e01b      	b.n	80075b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	daf2      	bge.n	8007566 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	019b      	lsls	r3, r3, #6
 8007588:	f043 0220 	orr.w	r2, r3, #32
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3301      	adds	r3, #1
 8007594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4a08      	ldr	r2, [pc, #32]	; (80075bc <USB_FlushTxFifo+0x64>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d901      	bls.n	80075a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e006      	b.n	80075b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	f003 0320 	and.w	r3, r3, #32
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	d0f0      	beq.n	8007590 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	00030d40 	.word	0x00030d40

080075c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3301      	adds	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4a11      	ldr	r2, [pc, #68]	; (800761c <USB_FlushRxFifo+0x5c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d901      	bls.n	80075de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e018      	b.n	8007610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	daf2      	bge.n	80075cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2210      	movs	r2, #16
 80075ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3301      	adds	r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4a08      	ldr	r2, [pc, #32]	; (800761c <USB_FlushRxFifo+0x5c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d901      	bls.n	8007602 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e006      	b.n	8007610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0310 	and.w	r3, r3, #16
 800760a:	2b10      	cmp	r3, #16
 800760c:	d0f0      	beq.n	80075f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	00030d40 	.word	0x00030d40

08007620 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	460b      	mov	r3, r1
 800762a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	68f9      	ldr	r1, [r7, #12]
 800763c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007640:	4313      	orrs	r3, r2
 8007642:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007652:	b480      	push	{r7}
 8007654:	b087      	sub	sp, #28
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 0306 	and.w	r3, r3, #6
 800766a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d102      	bne.n	8007678 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007672:	2300      	movs	r3, #0
 8007674:	75fb      	strb	r3, [r7, #23]
 8007676:	e00a      	b.n	800768e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d002      	beq.n	8007684 <USB_GetDevSpeed+0x32>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b06      	cmp	r3, #6
 8007682:	d102      	bne.n	800768a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007684:	2302      	movs	r3, #2
 8007686:	75fb      	strb	r3, [r7, #23]
 8007688:	e001      	b.n	800768e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800768a:	230f      	movs	r3, #15
 800768c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800768e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007690:	4618      	mov	r0, r3
 8007692:	371c      	adds	r7, #28
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	785b      	ldrb	r3, [r3, #1]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d13a      	bne.n	800772e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076be:	69da      	ldr	r2, [r3, #28]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	f003 030f 	and.w	r3, r3, #15
 80076c8:	2101      	movs	r1, #1
 80076ca:	fa01 f303 	lsl.w	r3, r1, r3
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	68f9      	ldr	r1, [r7, #12]
 80076d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076d6:	4313      	orrs	r3, r2
 80076d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d155      	bne.n	800779c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	791b      	ldrb	r3, [r3, #4]
 800770a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800770c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	059b      	lsls	r3, r3, #22
 8007712:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007714:	4313      	orrs	r3, r2
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	0151      	lsls	r1, r2, #5
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	440a      	add	r2, r1
 800771e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	e036      	b.n	800779c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007734:	69da      	ldr	r2, [r3, #28]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	2101      	movs	r1, #1
 8007740:	fa01 f303 	lsl.w	r3, r1, r3
 8007744:	041b      	lsls	r3, r3, #16
 8007746:	68f9      	ldr	r1, [r7, #12]
 8007748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800774c:	4313      	orrs	r3, r2
 800774e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d11a      	bne.n	800779c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	791b      	ldrb	r3, [r3, #4]
 8007780:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007782:	430b      	orrs	r3, r1
 8007784:	4313      	orrs	r3, r2
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	0151      	lsls	r1, r2, #5
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	440a      	add	r2, r1
 800778e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800779a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
	...

080077ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d161      	bne.n	800788c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077de:	d11f      	bne.n	8007820 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	0151      	lsls	r1, r2, #5
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	440a      	add	r2, r1
 80077f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	0151      	lsls	r1, r2, #5
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	440a      	add	r2, r1
 8007816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800781a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800781e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	f003 030f 	and.w	r3, r3, #15
 8007830:	2101      	movs	r1, #1
 8007832:	fa01 f303 	lsl.w	r3, r1, r3
 8007836:	b29b      	uxth	r3, r3
 8007838:	43db      	mvns	r3, r3
 800783a:	68f9      	ldr	r1, [r7, #12]
 800783c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007840:	4013      	ands	r3, r2
 8007842:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	69da      	ldr	r2, [r3, #28]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	2101      	movs	r1, #1
 8007856:	fa01 f303 	lsl.w	r3, r1, r3
 800785a:	b29b      	uxth	r3, r3
 800785c:	43db      	mvns	r3, r3
 800785e:	68f9      	ldr	r1, [r7, #12]
 8007860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007864:	4013      	ands	r3, r2
 8007866:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	0159      	lsls	r1, r3, #5
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	440b      	add	r3, r1
 800787e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007882:	4619      	mov	r1, r3
 8007884:	4b35      	ldr	r3, [pc, #212]	; (800795c <USB_DeactivateEndpoint+0x1b0>)
 8007886:	4013      	ands	r3, r2
 8007888:	600b      	str	r3, [r1, #0]
 800788a:	e060      	b.n	800794e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800789e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078a2:	d11f      	bne.n	80078e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	0151      	lsls	r1, r2, #5
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	440a      	add	r2, r1
 80078ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	0151      	lsls	r1, r2, #5
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	440a      	add	r2, r1
 80078da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	f003 030f 	and.w	r3, r3, #15
 80078f4:	2101      	movs	r1, #1
 80078f6:	fa01 f303 	lsl.w	r3, r1, r3
 80078fa:	041b      	lsls	r3, r3, #16
 80078fc:	43db      	mvns	r3, r3
 80078fe:	68f9      	ldr	r1, [r7, #12]
 8007900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007904:	4013      	ands	r3, r2
 8007906:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790e:	69da      	ldr	r2, [r3, #28]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	f003 030f 	and.w	r3, r3, #15
 8007918:	2101      	movs	r1, #1
 800791a:	fa01 f303 	lsl.w	r3, r1, r3
 800791e:	041b      	lsls	r3, r3, #16
 8007920:	43db      	mvns	r3, r3
 8007922:	68f9      	ldr	r1, [r7, #12]
 8007924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007928:	4013      	ands	r3, r2
 800792a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	0159      	lsls	r1, r3, #5
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	440b      	add	r3, r1
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	4619      	mov	r1, r3
 8007948:	4b05      	ldr	r3, [pc, #20]	; (8007960 <USB_DeactivateEndpoint+0x1b4>)
 800794a:	4013      	ands	r3, r2
 800794c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	ec337800 	.word	0xec337800
 8007960:	eff37800 	.word	0xeff37800

08007964 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08a      	sub	sp, #40	; 0x28
 8007968:	af02      	add	r7, sp, #8
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	4613      	mov	r3, r2
 8007970:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b01      	cmp	r3, #1
 8007982:	f040 815c 	bne.w	8007c3e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d132      	bne.n	80079f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	0151      	lsls	r1, r2, #5
 80079c4:	69fa      	ldr	r2, [r7, #28]
 80079c6:	440a      	add	r2, r1
 80079c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	0151      	lsls	r1, r2, #5
 80079e4:	69fa      	ldr	r2, [r7, #28]
 80079e6:	440a      	add	r2, r1
 80079e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ec:	0cdb      	lsrs	r3, r3, #19
 80079ee:	04db      	lsls	r3, r3, #19
 80079f0:	6113      	str	r3, [r2, #16]
 80079f2:	e074      	b.n	8007ade <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	0151      	lsls	r1, r2, #5
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	440a      	add	r2, r1
 8007a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a0e:	0cdb      	lsrs	r3, r3, #19
 8007a10:	04db      	lsls	r3, r3, #19
 8007a12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	0151      	lsls	r1, r2, #5
 8007a26:	69fa      	ldr	r2, [r7, #28]
 8007a28:	440a      	add	r2, r1
 8007a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a44:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6999      	ldr	r1, [r3, #24]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	440b      	add	r3, r1
 8007a50:	1e59      	subs	r1, r3, #1
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a5a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a5c:	4b9d      	ldr	r3, [pc, #628]	; (8007cd4 <USB_EPStartXfer+0x370>)
 8007a5e:	400b      	ands	r3, r1
 8007a60:	69b9      	ldr	r1, [r7, #24]
 8007a62:	0148      	lsls	r0, r1, #5
 8007a64:	69f9      	ldr	r1, [r7, #28]
 8007a66:	4401      	add	r1, r0
 8007a68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7c:	691a      	ldr	r2, [r3, #16]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a86:	69b9      	ldr	r1, [r7, #24]
 8007a88:	0148      	lsls	r0, r1, #5
 8007a8a:	69f9      	ldr	r1, [r7, #28]
 8007a8c:	4401      	add	r1, r0
 8007a8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a92:	4313      	orrs	r3, r2
 8007a94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	791b      	ldrb	r3, [r3, #4]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d11f      	bne.n	8007ade <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	0151      	lsls	r1, r2, #5
 8007ab0:	69fa      	ldr	r2, [r7, #28]
 8007ab2:	440a      	add	r2, r1
 8007ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007abc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ad8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007adc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d14b      	bne.n	8007b7c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d009      	beq.n	8007b00 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af8:	461a      	mov	r2, r3
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	791b      	ldrb	r3, [r3, #4]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d128      	bne.n	8007b5a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d110      	bne.n	8007b3a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	0151      	lsls	r1, r2, #5
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	440a      	add	r2, r1
 8007b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	e00f      	b.n	8007b5a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	0151      	lsls	r1, r2, #5
 8007b4c:	69fa      	ldr	r2, [r7, #28]
 8007b4e:	440a      	add	r2, r1
 8007b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b58:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	0151      	lsls	r1, r2, #5
 8007b6c:	69fa      	ldr	r2, [r7, #28]
 8007b6e:	440a      	add	r2, r1
 8007b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	e133      	b.n	8007de4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	0151      	lsls	r1, r2, #5
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	440a      	add	r2, r1
 8007b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b9a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	791b      	ldrb	r3, [r3, #4]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d015      	beq.n	8007bd0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 811b 	beq.w	8007de4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	f003 030f 	and.w	r3, r3, #15
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc4:	69f9      	ldr	r1, [r7, #28]
 8007bc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	634b      	str	r3, [r1, #52]	; 0x34
 8007bce:	e109      	b.n	8007de4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d110      	bne.n	8007c02 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	0151      	lsls	r1, r2, #5
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	440a      	add	r2, r1
 8007bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	e00f      	b.n	8007c22 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	0151      	lsls	r1, r2, #5
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	440a      	add	r2, r1
 8007c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c20:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	6919      	ldr	r1, [r3, #16]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	781a      	ldrb	r2, [r3, #0]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	b298      	uxth	r0, r3
 8007c30:	79fb      	ldrb	r3, [r7, #7]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	4603      	mov	r3, r0
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 fade 	bl	80081f8 <USB_WritePacket>
 8007c3c:	e0d2      	b.n	8007de4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	0151      	lsls	r1, r2, #5
 8007c50:	69fa      	ldr	r2, [r7, #28]
 8007c52:	440a      	add	r2, r1
 8007c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c58:	0cdb      	lsrs	r3, r3, #19
 8007c5a:	04db      	lsls	r3, r3, #19
 8007c5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	0151      	lsls	r1, r2, #5
 8007c70:	69fa      	ldr	r2, [r7, #28]
 8007c72:	440a      	add	r2, r1
 8007c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c80:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d126      	bne.n	8007cd8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c96:	691a      	ldr	r2, [r3, #16]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ca0:	69b9      	ldr	r1, [r7, #24]
 8007ca2:	0148      	lsls	r0, r1, #5
 8007ca4:	69f9      	ldr	r1, [r7, #28]
 8007ca6:	4401      	add	r1, r0
 8007ca8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cac:	4313      	orrs	r3, r2
 8007cae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	0151      	lsls	r1, r2, #5
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	440a      	add	r2, r1
 8007cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cce:	6113      	str	r3, [r2, #16]
 8007cd0:	e03a      	b.n	8007d48 <USB_EPStartXfer+0x3e4>
 8007cd2:	bf00      	nop
 8007cd4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	699a      	ldr	r2, [r3, #24]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	1e5a      	subs	r2, r3, #1
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cec:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	8afa      	ldrh	r2, [r7, #22]
 8007cf4:	fb03 f202 	mul.w	r2, r3, r2
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d08:	691a      	ldr	r2, [r3, #16]
 8007d0a:	8afb      	ldrh	r3, [r7, #22]
 8007d0c:	04d9      	lsls	r1, r3, #19
 8007d0e:	4b38      	ldr	r3, [pc, #224]	; (8007df0 <USB_EPStartXfer+0x48c>)
 8007d10:	400b      	ands	r3, r1
 8007d12:	69b9      	ldr	r1, [r7, #24]
 8007d14:	0148      	lsls	r0, r1, #5
 8007d16:	69f9      	ldr	r1, [r7, #28]
 8007d18:	4401      	add	r1, r0
 8007d1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2e:	691a      	ldr	r2, [r3, #16]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d38:	69b9      	ldr	r1, [r7, #24]
 8007d3a:	0148      	lsls	r0, r1, #5
 8007d3c:	69f9      	ldr	r1, [r7, #28]
 8007d3e:	4401      	add	r1, r0
 8007d40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d44:	4313      	orrs	r3, r2
 8007d46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d48:	79fb      	ldrb	r3, [r7, #7]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d10d      	bne.n	8007d6a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d009      	beq.n	8007d6a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	6919      	ldr	r1, [r3, #16]
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d66:	460a      	mov	r2, r1
 8007d68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	791b      	ldrb	r3, [r3, #4]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d128      	bne.n	8007dc4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d110      	bne.n	8007da4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	015a      	lsls	r2, r3, #5
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	4413      	add	r3, r2
 8007d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	0151      	lsls	r1, r2, #5
 8007d94:	69fa      	ldr	r2, [r7, #28]
 8007d96:	440a      	add	r2, r1
 8007d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007da0:	6013      	str	r3, [r2, #0]
 8007da2:	e00f      	b.n	8007dc4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	0151      	lsls	r1, r2, #5
 8007db6:	69fa      	ldr	r2, [r7, #28]
 8007db8:	440a      	add	r2, r1
 8007dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dc2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	0151      	lsls	r1, r2, #5
 8007dd6:	69fa      	ldr	r2, [r7, #28]
 8007dd8:	440a      	add	r2, r1
 8007dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007de2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3720      	adds	r7, #32
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	1ff80000 	.word	0x1ff80000

08007df4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	785b      	ldrb	r3, [r3, #1]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	f040 80ce 	bne.w	8007fb2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d132      	bne.n	8007e84 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	0151      	lsls	r1, r2, #5
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	440a      	add	r2, r1
 8007e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	0151      	lsls	r1, r2, #5
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	440a      	add	r2, r1
 8007e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	0151      	lsls	r1, r2, #5
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	440a      	add	r2, r1
 8007e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e7c:	0cdb      	lsrs	r3, r3, #19
 8007e7e:	04db      	lsls	r3, r3, #19
 8007e80:	6113      	str	r3, [r2, #16]
 8007e82:	e04e      	b.n	8007f22 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	0151      	lsls	r1, r2, #5
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	440a      	add	r2, r1
 8007e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e9e:	0cdb      	lsrs	r3, r3, #19
 8007ea0:	04db      	lsls	r3, r3, #19
 8007ea2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	0151      	lsls	r1, r2, #5
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	440a      	add	r2, r1
 8007eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ebe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ec2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ec6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	699a      	ldr	r2, [r3, #24]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d903      	bls.n	8007edc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	68da      	ldr	r2, [r3, #12]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	0151      	lsls	r1, r2, #5
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007efa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f08:	691a      	ldr	r2, [r3, #16]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f12:	6939      	ldr	r1, [r7, #16]
 8007f14:	0148      	lsls	r0, r1, #5
 8007f16:	6979      	ldr	r1, [r7, #20]
 8007f18:	4401      	add	r1, r0
 8007f1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d11e      	bne.n	8007f66 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d009      	beq.n	8007f44 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	0151      	lsls	r1, r2, #5
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	440a      	add	r2, r1
 8007f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	e097      	b.n	8008096 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	0151      	lsls	r1, r2, #5
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	440a      	add	r2, r1
 8007f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f84:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 8083 	beq.w	8008096 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa6:	6979      	ldr	r1, [r7, #20]
 8007fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fac:	4313      	orrs	r3, r2
 8007fae:	634b      	str	r3, [r1, #52]	; 0x34
 8007fb0:	e071      	b.n	8008096 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	0151      	lsls	r1, r2, #5
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	440a      	add	r2, r1
 8007fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fcc:	0cdb      	lsrs	r3, r3, #19
 8007fce:	04db      	lsls	r3, r3, #19
 8007fd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	0151      	lsls	r1, r2, #5
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	440a      	add	r2, r1
 8007fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ff4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	0151      	lsls	r1, r2, #5
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	440a      	add	r2, r1
 8008024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800802c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803a:	691a      	ldr	r2, [r3, #16]
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	69db      	ldr	r3, [r3, #28]
 8008040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008044:	6939      	ldr	r1, [r7, #16]
 8008046:	0148      	lsls	r0, r1, #5
 8008048:	6979      	ldr	r1, [r7, #20]
 800804a:	4401      	add	r1, r0
 800804c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008050:	4313      	orrs	r3, r2
 8008052:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008054:	79fb      	ldrb	r3, [r7, #7]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d10d      	bne.n	8008076 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d009      	beq.n	8008076 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	6919      	ldr	r1, [r3, #16]
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008072:	460a      	mov	r2, r1
 8008074:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	4413      	add	r3, r2
 800807e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	0151      	lsls	r1, r2, #5
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	440a      	add	r2, r1
 800808c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008090:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008094:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	785b      	ldrb	r3, [r3, #1]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d14a      	bne.n	8008158 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080da:	f040 8086 	bne.w	80081ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	7812      	ldrb	r2, [r2, #0]
 80080f2:	0151      	lsls	r1, r2, #5
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	440a      	add	r2, r1
 80080f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008100:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	7812      	ldrb	r2, [r2, #0]
 8008116:	0151      	lsls	r1, r2, #5
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	440a      	add	r2, r1
 800811c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008120:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008124:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3301      	adds	r3, #1
 800812a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008132:	4293      	cmp	r3, r2
 8008134:	d902      	bls.n	800813c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	75fb      	strb	r3, [r7, #23]
          break;
 800813a:	e056      	b.n	80081ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008150:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008154:	d0e7      	beq.n	8008126 <USB_EPStopXfer+0x82>
 8008156:	e048      	b.n	80081ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	4413      	add	r3, r2
 8008162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800816c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008170:	d13b      	bne.n	80081ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	7812      	ldrb	r2, [r2, #0]
 8008186:	0151      	lsls	r1, r2, #5
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	440a      	add	r2, r1
 800818c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008190:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008194:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	7812      	ldrb	r2, [r2, #0]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3301      	adds	r3, #1
 80081be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d902      	bls.n	80081d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]
          break;
 80081ce:	e00c      	b.n	80081ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081e8:	d0e7      	beq.n	80081ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	371c      	adds	r7, #28
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b089      	sub	sp, #36	; 0x24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	4611      	mov	r1, r2
 8008204:	461a      	mov	r2, r3
 8008206:	460b      	mov	r3, r1
 8008208:	71fb      	strb	r3, [r7, #7]
 800820a:	4613      	mov	r3, r2
 800820c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008216:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800821a:	2b00      	cmp	r3, #0
 800821c:	d123      	bne.n	8008266 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800821e:	88bb      	ldrh	r3, [r7, #4]
 8008220:	3303      	adds	r3, #3
 8008222:	089b      	lsrs	r3, r3, #2
 8008224:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008226:	2300      	movs	r3, #0
 8008228:	61bb      	str	r3, [r7, #24]
 800822a:	e018      	b.n	800825e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	031a      	lsls	r2, r3, #12
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	4413      	add	r3, r2
 8008234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008238:	461a      	mov	r2, r3
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	3301      	adds	r3, #1
 8008244:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	3301      	adds	r3, #1
 800824a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	3301      	adds	r3, #1
 8008250:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	3301      	adds	r3, #1
 8008256:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	3301      	adds	r3, #1
 800825c:	61bb      	str	r3, [r7, #24]
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	429a      	cmp	r2, r3
 8008264:	d3e2      	bcc.n	800822c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3724      	adds	r7, #36	; 0x24
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008274:	b480      	push	{r7}
 8008276:	b08b      	sub	sp, #44	; 0x2c
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800828a:	88fb      	ldrh	r3, [r7, #6]
 800828c:	089b      	lsrs	r3, r3, #2
 800828e:	b29b      	uxth	r3, r3
 8008290:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	f003 0303 	and.w	r3, r3, #3
 8008298:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800829a:	2300      	movs	r3, #0
 800829c:	623b      	str	r3, [r7, #32]
 800829e:	e014      	b.n	80082ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	3301      	adds	r3, #1
 80082b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	3301      	adds	r3, #1
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	3301      	adds	r3, #1
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	3301      	adds	r3, #1
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	3301      	adds	r3, #1
 80082c8:	623b      	str	r3, [r7, #32]
 80082ca:	6a3a      	ldr	r2, [r7, #32]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d3e6      	bcc.n	80082a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80082d2:	8bfb      	ldrh	r3, [r7, #30]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01e      	beq.n	8008316 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e2:	461a      	mov	r2, r3
 80082e4:	f107 0310 	add.w	r3, r7, #16
 80082e8:	6812      	ldr	r2, [r2, #0]
 80082ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	fa22 f303 	lsr.w	r3, r2, r3
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	701a      	strb	r2, [r3, #0]
      i++;
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	3301      	adds	r3, #1
 8008302:	623b      	str	r3, [r7, #32]
      pDest++;
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	3301      	adds	r3, #1
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800830a:	8bfb      	ldrh	r3, [r7, #30]
 800830c:	3b01      	subs	r3, #1
 800830e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008310:	8bfb      	ldrh	r3, [r7, #30]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1ea      	bne.n	80082ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008318:	4618      	mov	r0, r3
 800831a:	372c      	adds	r7, #44	; 0x2c
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	785b      	ldrb	r3, [r3, #1]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d12c      	bne.n	800839a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	db12      	blt.n	8008378 <USB_EPSetStall+0x54>
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00f      	beq.n	8008378 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4413      	add	r3, r2
 8008360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	0151      	lsls	r1, r2, #5
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	440a      	add	r2, r1
 800836e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008372:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008376:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4413      	add	r3, r2
 8008380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	0151      	lsls	r1, r2, #5
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	440a      	add	r2, r1
 800838e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	e02b      	b.n	80083f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	db12      	blt.n	80083d2 <USB_EPSetStall+0xae>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00f      	beq.n	80083d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	0151      	lsls	r1, r2, #5
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	440a      	add	r2, r1
 80083c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	0151      	lsls	r1, r2, #5
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	440a      	add	r2, r1
 80083e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	785b      	ldrb	r3, [r3, #1]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d128      	bne.n	800846e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4413      	add	r3, r2
 8008424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	0151      	lsls	r1, r2, #5
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	440a      	add	r2, r1
 8008432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008436:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800843a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	791b      	ldrb	r3, [r3, #4]
 8008440:	2b03      	cmp	r3, #3
 8008442:	d003      	beq.n	800844c <USB_EPClearStall+0x4c>
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	791b      	ldrb	r3, [r3, #4]
 8008448:	2b02      	cmp	r3, #2
 800844a:	d138      	bne.n	80084be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	440a      	add	r2, r1
 8008462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	e027      	b.n	80084be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4413      	add	r3, r2
 8008476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	0151      	lsls	r1, r2, #5
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	440a      	add	r2, r1
 8008484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008488:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800848c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	791b      	ldrb	r3, [r3, #4]
 8008492:	2b03      	cmp	r3, #3
 8008494:	d003      	beq.n	800849e <USB_EPClearStall+0x9e>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	791b      	ldrb	r3, [r3, #4]
 800849a:	2b02      	cmp	r3, #2
 800849c:	d10f      	bne.n	80084be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	0151      	lsls	r1, r2, #5
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	440a      	add	r2, r1
 80084b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80084ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008500:	68f9      	ldr	r1, [r7, #12]
 8008502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008506:	4313      	orrs	r3, r2
 8008508:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008532:	f023 0303 	bic.w	r3, r3, #3
 8008536:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008546:	f023 0302 	bic.w	r3, r3, #2
 800854a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800855a:	b480      	push	{r7}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008574:	f023 0303 	bic.w	r3, r3, #3
 8008578:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008588:	f043 0302 	orr.w	r3, r3, #2
 800858c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	695b      	ldr	r3, [r3, #20]
 80085a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4013      	ands	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085b4:	68fb      	ldr	r3, [r7, #12]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	4013      	ands	r3, r2
 80085e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	0c1b      	lsrs	r3, r3, #16
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b085      	sub	sp, #20
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	4013      	ands	r3, r2
 8008618:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	b29b      	uxth	r3, r3
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800862a:	b480      	push	{r7}
 800862c:	b085      	sub	sp, #20
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	460b      	mov	r3, r1
 8008634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800863a:	78fb      	ldrb	r3, [r7, #3]
 800863c:	015a      	lsls	r2, r3, #5
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	4413      	add	r3, r2
 8008642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	4013      	ands	r3, r2
 8008656:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008658:	68bb      	ldr	r3, [r7, #8]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008666:	b480      	push	{r7}
 8008668:	b087      	sub	sp, #28
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	460b      	mov	r3, r1
 8008670:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008688:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800868a:	78fb      	ldrb	r3, [r7, #3]
 800868c:	f003 030f 	and.w	r3, r3, #15
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	fa22 f303 	lsr.w	r3, r2, r3
 8008696:	01db      	lsls	r3, r3, #7
 8008698:	b2db      	uxtb	r3, r3
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	4313      	orrs	r3, r2
 800869e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	015a      	lsls	r2, r3, #5
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	4413      	add	r3, r2
 80086a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	4013      	ands	r3, r2
 80086b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086b4:	68bb      	ldr	r3, [r7, #8]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	f003 0301 	and.w	r3, r3, #1
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80086de:	b480      	push	{r7}
 80086e0:	b085      	sub	sp, #20
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80086fc:	f023 0307 	bic.w	r3, r3, #7
 8008700:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008714:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	460b      	mov	r3, r1
 800872e:	607a      	str	r2, [r7, #4]
 8008730:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	333c      	adds	r3, #60	; 0x3c
 800873a:	3304      	adds	r3, #4
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	4a26      	ldr	r2, [pc, #152]	; (80087dc <USB_EP0_OutStart+0xb8>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d90a      	bls.n	800875e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008758:	d101      	bne.n	800875e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	e037      	b.n	80087ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008764:	461a      	mov	r2, r3
 8008766:	2300      	movs	r3, #0
 8008768:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800877c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800878c:	f043 0318 	orr.w	r3, r3, #24
 8008790:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80087a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80087a6:	7afb      	ldrb	r3, [r7, #11]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d10f      	bne.n	80087cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b2:	461a      	mov	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80087ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	371c      	adds	r7, #28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	4f54300a 	.word	0x4f54300a

080087e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3301      	adds	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4a13      	ldr	r2, [pc, #76]	; (8008844 <USB_CoreReset+0x64>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d901      	bls.n	80087fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e01b      	b.n	8008836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	daf2      	bge.n	80087ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	f043 0201 	orr.w	r2, r3, #1
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3301      	adds	r3, #1
 800881a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4a09      	ldr	r2, [pc, #36]	; (8008844 <USB_CoreReset+0x64>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d901      	bls.n	8008828 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e006      	b.n	8008836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b01      	cmp	r3, #1
 8008832:	d0f0      	beq.n	8008816 <USB_CoreReset+0x36>

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	00030d40 	.word	0x00030d40

08008848 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008854:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008858:	f005 fd4a 	bl	800e2f0 <USBD_static_malloc>
 800885c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d109      	bne.n	8008878 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	32b0      	adds	r2, #176	; 0xb0
 800886e:	2100      	movs	r1, #0
 8008870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008874:	2302      	movs	r3, #2
 8008876:	e0d4      	b.n	8008a22 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008878:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800887c:	2100      	movs	r1, #0
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f005 fdae 	bl	800e3e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	32b0      	adds	r2, #176	; 0xb0
 800888e:	68f9      	ldr	r1, [r7, #12]
 8008890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	32b0      	adds	r2, #176	; 0xb0
 800889e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	7c1b      	ldrb	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d138      	bne.n	8008922 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088b0:	4b5e      	ldr	r3, [pc, #376]	; (8008a2c <USBD_CDC_Init+0x1e4>)
 80088b2:	7819      	ldrb	r1, [r3, #0]
 80088b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088b8:	2202      	movs	r2, #2
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f005 fbf5 	bl	800e0aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088c0:	4b5a      	ldr	r3, [pc, #360]	; (8008a2c <USBD_CDC_Init+0x1e4>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	f003 020f 	and.w	r2, r3, #15
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	4613      	mov	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	3324      	adds	r3, #36	; 0x24
 80088d6:	2201      	movs	r2, #1
 80088d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80088da:	4b55      	ldr	r3, [pc, #340]	; (8008a30 <USBD_CDC_Init+0x1e8>)
 80088dc:	7819      	ldrb	r1, [r3, #0]
 80088de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088e2:	2202      	movs	r2, #2
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f005 fbe0 	bl	800e0aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088ea:	4b51      	ldr	r3, [pc, #324]	; (8008a30 <USBD_CDC_Init+0x1e8>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	f003 020f 	and.w	r2, r3, #15
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	4613      	mov	r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	440b      	add	r3, r1
 80088fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008902:	2201      	movs	r2, #1
 8008904:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008906:	4b4b      	ldr	r3, [pc, #300]	; (8008a34 <USBD_CDC_Init+0x1ec>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	f003 020f 	and.w	r2, r3, #15
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	4613      	mov	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	440b      	add	r3, r1
 800891a:	3326      	adds	r3, #38	; 0x26
 800891c:	2210      	movs	r2, #16
 800891e:	801a      	strh	r2, [r3, #0]
 8008920:	e035      	b.n	800898e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008922:	4b42      	ldr	r3, [pc, #264]	; (8008a2c <USBD_CDC_Init+0x1e4>)
 8008924:	7819      	ldrb	r1, [r3, #0]
 8008926:	2340      	movs	r3, #64	; 0x40
 8008928:	2202      	movs	r2, #2
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f005 fbbd 	bl	800e0aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008930:	4b3e      	ldr	r3, [pc, #248]	; (8008a2c <USBD_CDC_Init+0x1e4>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	f003 020f 	and.w	r2, r3, #15
 8008938:	6879      	ldr	r1, [r7, #4]
 800893a:	4613      	mov	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	440b      	add	r3, r1
 8008944:	3324      	adds	r3, #36	; 0x24
 8008946:	2201      	movs	r2, #1
 8008948:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800894a:	4b39      	ldr	r3, [pc, #228]	; (8008a30 <USBD_CDC_Init+0x1e8>)
 800894c:	7819      	ldrb	r1, [r3, #0]
 800894e:	2340      	movs	r3, #64	; 0x40
 8008950:	2202      	movs	r2, #2
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f005 fba9 	bl	800e0aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008958:	4b35      	ldr	r3, [pc, #212]	; (8008a30 <USBD_CDC_Init+0x1e8>)
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	f003 020f 	and.w	r2, r3, #15
 8008960:	6879      	ldr	r1, [r7, #4]
 8008962:	4613      	mov	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	440b      	add	r3, r1
 800896c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008970:	2201      	movs	r2, #1
 8008972:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008974:	4b2f      	ldr	r3, [pc, #188]	; (8008a34 <USBD_CDC_Init+0x1ec>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f003 020f 	and.w	r2, r3, #15
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	440b      	add	r3, r1
 8008988:	3326      	adds	r3, #38	; 0x26
 800898a:	2210      	movs	r2, #16
 800898c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800898e:	4b29      	ldr	r3, [pc, #164]	; (8008a34 <USBD_CDC_Init+0x1ec>)
 8008990:	7819      	ldrb	r1, [r3, #0]
 8008992:	2308      	movs	r3, #8
 8008994:	2203      	movs	r2, #3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f005 fb87 	bl	800e0aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800899c:	4b25      	ldr	r3, [pc, #148]	; (8008a34 <USBD_CDC_Init+0x1ec>)
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	f003 020f 	and.w	r2, r3, #15
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	440b      	add	r3, r1
 80089b0:	3324      	adds	r3, #36	; 0x24
 80089b2:	2201      	movs	r2, #1
 80089b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	33b0      	adds	r3, #176	; 0xb0
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80089ec:	2302      	movs	r3, #2
 80089ee:	e018      	b.n	8008a22 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	7c1b      	ldrb	r3, [r3, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10a      	bne.n	8008a0e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089f8:	4b0d      	ldr	r3, [pc, #52]	; (8008a30 <USBD_CDC_Init+0x1e8>)
 80089fa:	7819      	ldrb	r1, [r3, #0]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f005 fc3e 	bl	800e288 <USBD_LL_PrepareReceive>
 8008a0c:	e008      	b.n	8008a20 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a0e:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <USBD_CDC_Init+0x1e8>)
 8008a10:	7819      	ldrb	r1, [r3, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a18:	2340      	movs	r3, #64	; 0x40
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f005 fc34 	bl	800e288 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20000093 	.word	0x20000093
 8008a30:	20000094 	.word	0x20000094
 8008a34:	20000095 	.word	0x20000095

08008a38 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008a44:	4b3a      	ldr	r3, [pc, #232]	; (8008b30 <USBD_CDC_DeInit+0xf8>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f005 fb53 	bl	800e0f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008a50:	4b37      	ldr	r3, [pc, #220]	; (8008b30 <USBD_CDC_DeInit+0xf8>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	f003 020f 	and.w	r2, r3, #15
 8008a58:	6879      	ldr	r1, [r7, #4]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	440b      	add	r3, r1
 8008a64:	3324      	adds	r3, #36	; 0x24
 8008a66:	2200      	movs	r2, #0
 8008a68:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008a6a:	4b32      	ldr	r3, [pc, #200]	; (8008b34 <USBD_CDC_DeInit+0xfc>)
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	4619      	mov	r1, r3
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f005 fb40 	bl	800e0f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008a76:	4b2f      	ldr	r3, [pc, #188]	; (8008b34 <USBD_CDC_DeInit+0xfc>)
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	f003 020f 	and.w	r2, r3, #15
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4613      	mov	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a8e:	2200      	movs	r2, #0
 8008a90:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008a92:	4b29      	ldr	r3, [pc, #164]	; (8008b38 <USBD_CDC_DeInit+0x100>)
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f005 fb2c 	bl	800e0f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008a9e:	4b26      	ldr	r3, [pc, #152]	; (8008b38 <USBD_CDC_DeInit+0x100>)
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	f003 020f 	and.w	r2, r3, #15
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	440b      	add	r3, r1
 8008ab2:	3324      	adds	r3, #36	; 0x24
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008ab8:	4b1f      	ldr	r3, [pc, #124]	; (8008b38 <USBD_CDC_DeInit+0x100>)
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	f003 020f 	and.w	r2, r3, #15
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	440b      	add	r3, r1
 8008acc:	3326      	adds	r3, #38	; 0x26
 8008ace:	2200      	movs	r2, #0
 8008ad0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	32b0      	adds	r2, #176	; 0xb0
 8008adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01f      	beq.n	8008b24 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	33b0      	adds	r3, #176	; 0xb0
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	32b0      	adds	r2, #176	; 0xb0
 8008b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f005 fc00 	bl	800e30c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	32b0      	adds	r2, #176	; 0xb0
 8008b16:	2100      	movs	r1, #0
 8008b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20000093 	.word	0x20000093
 8008b34:	20000094 	.word	0x20000094
 8008b38:	20000095 	.word	0x20000095

08008b3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	32b0      	adds	r2, #176	; 0xb0
 8008b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b54:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e0bf      	b.n	8008cec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d050      	beq.n	8008c1a <USBD_CDC_Setup+0xde>
 8008b78:	2b20      	cmp	r3, #32
 8008b7a:	f040 80af 	bne.w	8008cdc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	88db      	ldrh	r3, [r3, #6]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d03a      	beq.n	8008bfc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	b25b      	sxtb	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	da1b      	bge.n	8008bc8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	33b0      	adds	r3, #176	; 0xb0
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008ba6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	88d2      	ldrh	r2, [r2, #6]
 8008bac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	88db      	ldrh	r3, [r3, #6]
 8008bb2:	2b07      	cmp	r3, #7
 8008bb4:	bf28      	it	cs
 8008bb6:	2307      	movcs	r3, #7
 8008bb8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	89fa      	ldrh	r2, [r7, #14]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 fd43 	bl	800a64c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008bc6:	e090      	b.n	8008cea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	785a      	ldrb	r2, [r3, #1]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	88db      	ldrh	r3, [r3, #6]
 8008bd6:	2b3f      	cmp	r3, #63	; 0x3f
 8008bd8:	d803      	bhi.n	8008be2 <USBD_CDC_Setup+0xa6>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	88db      	ldrh	r3, [r3, #6]
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	e000      	b.n	8008be4 <USBD_CDC_Setup+0xa8>
 8008be2:	2240      	movs	r2, #64	; 0x40
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008bea:	6939      	ldr	r1, [r7, #16]
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f001 fd55 	bl	800a6a4 <USBD_CtlPrepareRx>
      break;
 8008bfa:	e076      	b.n	8008cea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	33b0      	adds	r3, #176	; 0xb0
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	7850      	ldrb	r0, [r2, #1]
 8008c12:	2200      	movs	r2, #0
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	4798      	blx	r3
      break;
 8008c18:	e067      	b.n	8008cea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	785b      	ldrb	r3, [r3, #1]
 8008c1e:	2b0b      	cmp	r3, #11
 8008c20:	d851      	bhi.n	8008cc6 <USBD_CDC_Setup+0x18a>
 8008c22:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <USBD_CDC_Setup+0xec>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008c59 	.word	0x08008c59
 8008c2c:	08008cd5 	.word	0x08008cd5
 8008c30:	08008cc7 	.word	0x08008cc7
 8008c34:	08008cc7 	.word	0x08008cc7
 8008c38:	08008cc7 	.word	0x08008cc7
 8008c3c:	08008cc7 	.word	0x08008cc7
 8008c40:	08008cc7 	.word	0x08008cc7
 8008c44:	08008cc7 	.word	0x08008cc7
 8008c48:	08008cc7 	.word	0x08008cc7
 8008c4c:	08008cc7 	.word	0x08008cc7
 8008c50:	08008c83 	.word	0x08008c83
 8008c54:	08008cad 	.word	0x08008cad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d107      	bne.n	8008c74 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c64:	f107 030a 	add.w	r3, r7, #10
 8008c68:	2202      	movs	r2, #2
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f001 fced 	bl	800a64c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c72:	e032      	b.n	8008cda <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f001 fc77 	bl	800a56a <USBD_CtlError>
            ret = USBD_FAIL;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	75fb      	strb	r3, [r7, #23]
          break;
 8008c80:	e02b      	b.n	8008cda <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d107      	bne.n	8008c9e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c8e:	f107 030d 	add.w	r3, r7, #13
 8008c92:	2201      	movs	r2, #1
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f001 fcd8 	bl	800a64c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c9c:	e01d      	b.n	8008cda <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f001 fc62 	bl	800a56a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8008caa:	e016      	b.n	8008cda <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d00f      	beq.n	8008cd8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f001 fc55 	bl	800a56a <USBD_CtlError>
            ret = USBD_FAIL;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008cc4:	e008      	b.n	8008cd8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 fc4e 	bl	800a56a <USBD_CtlError>
          ret = USBD_FAIL;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8008cd2:	e002      	b.n	8008cda <USBD_CDC_Setup+0x19e>
          break;
 8008cd4:	bf00      	nop
 8008cd6:	e008      	b.n	8008cea <USBD_CDC_Setup+0x1ae>
          break;
 8008cd8:	bf00      	nop
      }
      break;
 8008cda:	e006      	b.n	8008cea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 fc43 	bl	800a56a <USBD_CtlError>
      ret = USBD_FAIL;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ce8:	bf00      	nop
  }

  return (uint8_t)ret;
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	32b0      	adds	r2, #176	; 0xb0
 8008d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e065      	b.n	8008dea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	32b0      	adds	r2, #176	; 0xb0
 8008d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	f003 020f 	and.w	r2, r3, #15
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	440b      	add	r3, r1
 8008d40:	3318      	adds	r3, #24
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d02f      	beq.n	8008da8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	f003 020f 	and.w	r2, r3, #15
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4613      	mov	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	3318      	adds	r3, #24
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	78fb      	ldrb	r3, [r7, #3]
 8008d60:	f003 010f 	and.w	r1, r3, #15
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	460b      	mov	r3, r1
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	440b      	add	r3, r1
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4403      	add	r3, r0
 8008d70:	3348      	adds	r3, #72	; 0x48
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d78:	fb01 f303 	mul.w	r3, r1, r3
 8008d7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d112      	bne.n	8008da8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008d82:	78fb      	ldrb	r3, [r7, #3]
 8008d84:	f003 020f 	and.w	r2, r3, #15
 8008d88:	6879      	ldr	r1, [r7, #4]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4413      	add	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	440b      	add	r3, r1
 8008d94:	3318      	adds	r3, #24
 8008d96:	2200      	movs	r2, #0
 8008d98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d9a:	78f9      	ldrb	r1, [r7, #3]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	2200      	movs	r2, #0
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f005 fa50 	bl	800e246 <USBD_LL_Transmit>
 8008da6:	e01f      	b.n	8008de8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	33b0      	adds	r3, #176	; 0xb0
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d010      	beq.n	8008de8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	33b0      	adds	r3, #176	; 0xb0
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008de4:	78fa      	ldrb	r2, [r7, #3]
 8008de6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b084      	sub	sp, #16
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	32b0      	adds	r2, #176	; 0xb0
 8008e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	32b0      	adds	r2, #176	; 0xb0
 8008e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e01a      	b.n	8008e5a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f005 fa4e 	bl	800e2ca <USBD_LL_GetRxDataSize>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	33b0      	adds	r3, #176	; 0xb0
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e54:	4611      	mov	r1, r2
 8008e56:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	32b0      	adds	r2, #176	; 0xb0
 8008e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e025      	b.n	8008ed0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	33b0      	adds	r3, #176	; 0xb0
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d01a      	beq.n	8008ece <USBD_CDC_EP0_RxReady+0x6c>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e9e:	2bff      	cmp	r3, #255	; 0xff
 8008ea0:	d015      	beq.n	8008ece <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	33b0      	adds	r3, #176	; 0xb0
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008eba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ec2:	b292      	uxth	r2, r2
 8008ec4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	22ff      	movs	r2, #255	; 0xff
 8008eca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ee0:	2182      	movs	r1, #130	; 0x82
 8008ee2:	4818      	ldr	r0, [pc, #96]	; (8008f44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ee4:	f000 fd09 	bl	80098fa <USBD_GetEpDesc>
 8008ee8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008eea:	2101      	movs	r1, #1
 8008eec:	4815      	ldr	r0, [pc, #84]	; (8008f44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008eee:	f000 fd04 	bl	80098fa <USBD_GetEpDesc>
 8008ef2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ef4:	2181      	movs	r1, #129	; 0x81
 8008ef6:	4813      	ldr	r0, [pc, #76]	; (8008f44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ef8:	f000 fcff 	bl	80098fa <USBD_GetEpDesc>
 8008efc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2210      	movs	r2, #16
 8008f08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d006      	beq.n	8008f1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f18:	711a      	strb	r2, [r3, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d006      	beq.n	8008f32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f2c:	711a      	strb	r2, [r3, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2243      	movs	r2, #67	; 0x43
 8008f36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f38:	4b02      	ldr	r3, [pc, #8]	; (8008f44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	20000050 	.word	0x20000050

08008f48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f50:	2182      	movs	r1, #130	; 0x82
 8008f52:	4818      	ldr	r0, [pc, #96]	; (8008fb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f54:	f000 fcd1 	bl	80098fa <USBD_GetEpDesc>
 8008f58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	4815      	ldr	r0, [pc, #84]	; (8008fb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f5e:	f000 fccc 	bl	80098fa <USBD_GetEpDesc>
 8008f62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f64:	2181      	movs	r1, #129	; 0x81
 8008f66:	4813      	ldr	r0, [pc, #76]	; (8008fb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f68:	f000 fcc7 	bl	80098fa <USBD_GetEpDesc>
 8008f6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d002      	beq.n	8008f7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2210      	movs	r2, #16
 8008f78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d006      	beq.n	8008f8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2200      	movs	r2, #0
 8008f84:	711a      	strb	r2, [r3, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f042 0202 	orr.w	r2, r2, #2
 8008f8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d006      	beq.n	8008fa2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	711a      	strb	r2, [r3, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f042 0202 	orr.w	r2, r2, #2
 8008fa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2243      	movs	r2, #67	; 0x43
 8008fa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008fa8:	4b02      	ldr	r3, [pc, #8]	; (8008fb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20000050 	.word	0x20000050

08008fb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fc0:	2182      	movs	r1, #130	; 0x82
 8008fc2:	4818      	ldr	r0, [pc, #96]	; (8009024 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fc4:	f000 fc99 	bl	80098fa <USBD_GetEpDesc>
 8008fc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fca:	2101      	movs	r1, #1
 8008fcc:	4815      	ldr	r0, [pc, #84]	; (8009024 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fce:	f000 fc94 	bl	80098fa <USBD_GetEpDesc>
 8008fd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fd4:	2181      	movs	r1, #129	; 0x81
 8008fd6:	4813      	ldr	r0, [pc, #76]	; (8009024 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fd8:	f000 fc8f 	bl	80098fa <USBD_GetEpDesc>
 8008fdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2210      	movs	r2, #16
 8008fe8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d006      	beq.n	8008ffe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ff8:	711a      	strb	r2, [r3, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d006      	beq.n	8009012 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800900c:	711a      	strb	r2, [r3, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2243      	movs	r2, #67	; 0x43
 8009016:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009018:	4b02      	ldr	r3, [pc, #8]	; (8009024 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000050 	.word	0x20000050

08009028 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	220a      	movs	r2, #10
 8009034:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009036:	4b03      	ldr	r3, [pc, #12]	; (8009044 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	2000000c 	.word	0x2000000c

08009048 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d101      	bne.n	800905c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009058:	2303      	movs	r3, #3
 800905a:	e009      	b.n	8009070 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	33b0      	adds	r3, #176	; 0xb0
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800907c:	b480      	push	{r7}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	32b0      	adds	r2, #176	; 0xb0
 8009092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009096:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800909e:	2303      	movs	r3, #3
 80090a0:	e008      	b.n	80090b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	371c      	adds	r7, #28
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	32b0      	adds	r2, #176	; 0xb0
 80090d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e004      	b.n	80090ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
	...

080090fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	32b0      	adds	r2, #176	; 0xb0
 800910e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009112:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	32b0      	adds	r2, #176	; 0xb0
 800911e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009126:	2303      	movs	r3, #3
 8009128:	e018      	b.n	800915c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	7c1b      	ldrb	r3, [r3, #16]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009132:	4b0c      	ldr	r3, [pc, #48]	; (8009164 <USBD_CDC_ReceivePacket+0x68>)
 8009134:	7819      	ldrb	r1, [r3, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800913c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f005 f8a1 	bl	800e288 <USBD_LL_PrepareReceive>
 8009146:	e008      	b.n	800915a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009148:	4b06      	ldr	r3, [pc, #24]	; (8009164 <USBD_CDC_ReceivePacket+0x68>)
 800914a:	7819      	ldrb	r1, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009152:	2340      	movs	r3, #64	; 0x40
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f005 f897 	bl	800e288 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20000094 	.word	0x20000094

08009168 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	4613      	mov	r3, r2
 8009174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d101      	bne.n	8009180 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800917c:	2303      	movs	r3, #3
 800917e:	e01f      	b.n	80091c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	79fa      	ldrb	r2, [r7, #7]
 80091b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f004 ff11 	bl	800dfdc <USBD_LL_Init>
 80091ba:	4603      	mov	r3, r0
 80091bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80091be:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091dc:	2303      	movs	r3, #3
 80091de:	e025      	b.n	800922c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	32ae      	adds	r2, #174	; 0xae
 80091f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00f      	beq.n	800921c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	32ae      	adds	r2, #174	; 0xae
 8009206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	f107 020e 	add.w	r2, r7, #14
 8009210:	4610      	mov	r0, r2
 8009212:	4798      	blx	r3
 8009214:	4602      	mov	r2, r0
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f004 ff19 	bl	800e074 <USBD_LL_Start>
 8009242:	4603      	mov	r3, r0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009254:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009278:	2b00      	cmp	r3, #0
 800927a:	d009      	beq.n	8009290 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	78fa      	ldrb	r2, [r7, #3]
 8009286:	4611      	mov	r1, r2
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	4611      	mov	r1, r2
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	4798      	blx	r3
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80092c0:	2303      	movs	r3, #3
 80092c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f001 f908 	bl	800a4f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80092f4:	461a      	mov	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009302:	f003 031f 	and.w	r3, r3, #31
 8009306:	2b02      	cmp	r3, #2
 8009308:	d01a      	beq.n	8009340 <USBD_LL_SetupStage+0x72>
 800930a:	2b02      	cmp	r3, #2
 800930c:	d822      	bhi.n	8009354 <USBD_LL_SetupStage+0x86>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <USBD_LL_SetupStage+0x4a>
 8009312:	2b01      	cmp	r3, #1
 8009314:	d00a      	beq.n	800932c <USBD_LL_SetupStage+0x5e>
 8009316:	e01d      	b.n	8009354 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fb5f 	bl	80099e4 <USBD_StdDevReq>
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]
      break;
 800932a:	e020      	b.n	800936e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fbc7 	bl	8009ac8 <USBD_StdItfReq>
 800933a:	4603      	mov	r3, r0
 800933c:	73fb      	strb	r3, [r7, #15]
      break;
 800933e:	e016      	b.n	800936e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fc29 	bl	8009ba0 <USBD_StdEPReq>
 800934e:	4603      	mov	r3, r0
 8009350:	73fb      	strb	r3, [r7, #15]
      break;
 8009352:	e00c      	b.n	800936e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800935a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f004 fee6 	bl	800e134 <USBD_LL_StallEP>
 8009368:	4603      	mov	r3, r0
 800936a:	73fb      	strb	r3, [r7, #15]
      break;
 800936c:	bf00      	nop
  }

  return ret;
 800936e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	460b      	mov	r3, r1
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800938a:	7afb      	ldrb	r3, [r7, #11]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d16e      	bne.n	800946e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009396:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800939e:	2b03      	cmp	r3, #3
 80093a0:	f040 8098 	bne.w	80094d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d913      	bls.n	80093d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	689a      	ldr	r2, [r3, #8]
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	1ad2      	subs	r2, r2, r3
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	68da      	ldr	r2, [r3, #12]
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	4293      	cmp	r3, r2
 80093c8:	bf28      	it	cs
 80093ca:	4613      	movcs	r3, r2
 80093cc:	461a      	mov	r2, r3
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f001 f984 	bl	800a6de <USBD_CtlContinueRx>
 80093d6:	e07d      	b.n	80094d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093de:	f003 031f 	and.w	r3, r3, #31
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d014      	beq.n	8009410 <USBD_LL_DataOutStage+0x98>
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d81d      	bhi.n	8009426 <USBD_LL_DataOutStage+0xae>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <USBD_LL_DataOutStage+0x7c>
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d003      	beq.n	80093fa <USBD_LL_DataOutStage+0x82>
 80093f2:	e018      	b.n	8009426 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	75bb      	strb	r3, [r7, #22]
            break;
 80093f8:	e018      	b.n	800942c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009400:	b2db      	uxtb	r3, r3
 8009402:	4619      	mov	r1, r3
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fa5e 	bl	80098c6 <USBD_CoreFindIF>
 800940a:	4603      	mov	r3, r0
 800940c:	75bb      	strb	r3, [r7, #22]
            break;
 800940e:	e00d      	b.n	800942c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009416:	b2db      	uxtb	r3, r3
 8009418:	4619      	mov	r1, r3
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 fa60 	bl	80098e0 <USBD_CoreFindEP>
 8009420:	4603      	mov	r3, r0
 8009422:	75bb      	strb	r3, [r7, #22]
            break;
 8009424:	e002      	b.n	800942c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	75bb      	strb	r3, [r7, #22]
            break;
 800942a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800942c:	7dbb      	ldrb	r3, [r7, #22]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d119      	bne.n	8009466 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b03      	cmp	r3, #3
 800943c:	d113      	bne.n	8009466 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800943e:	7dba      	ldrb	r2, [r7, #22]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	32ae      	adds	r2, #174	; 0xae
 8009444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00b      	beq.n	8009466 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800944e:	7dba      	ldrb	r2, [r7, #22]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009456:	7dba      	ldrb	r2, [r7, #22]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	32ae      	adds	r2, #174	; 0xae
 800945c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f001 f94a 	bl	800a700 <USBD_CtlSendStatus>
 800946c:	e032      	b.n	80094d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800946e:	7afb      	ldrb	r3, [r7, #11]
 8009470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009474:	b2db      	uxtb	r3, r3
 8009476:	4619      	mov	r1, r3
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 fa31 	bl	80098e0 <USBD_CoreFindEP>
 800947e:	4603      	mov	r3, r0
 8009480:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009482:	7dbb      	ldrb	r3, [r7, #22]
 8009484:	2bff      	cmp	r3, #255	; 0xff
 8009486:	d025      	beq.n	80094d4 <USBD_LL_DataOutStage+0x15c>
 8009488:	7dbb      	ldrb	r3, [r7, #22]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d122      	bne.n	80094d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b03      	cmp	r3, #3
 8009498:	d117      	bne.n	80094ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800949a:	7dba      	ldrb	r2, [r7, #22]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	32ae      	adds	r2, #174	; 0xae
 80094a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00f      	beq.n	80094ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80094aa:	7dba      	ldrb	r2, [r7, #22]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80094b2:	7dba      	ldrb	r2, [r7, #22]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	32ae      	adds	r2, #174	; 0xae
 80094b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	7afa      	ldrb	r2, [r7, #11]
 80094c0:	4611      	mov	r1, r2
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	4798      	blx	r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	e000      	b.n	80094d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b086      	sub	sp, #24
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	460b      	mov	r3, r1
 80094e8:	607a      	str	r2, [r7, #4]
 80094ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80094ec:	7afb      	ldrb	r3, [r7, #11]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d16f      	bne.n	80095d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3314      	adds	r3, #20
 80094f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d15a      	bne.n	80095b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	689a      	ldr	r2, [r3, #8]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	429a      	cmp	r2, r3
 800950c:	d914      	bls.n	8009538 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	689a      	ldr	r2, [r3, #8]
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	1ad2      	subs	r2, r2, r3
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	461a      	mov	r2, r3
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f001 f8ac 	bl	800a682 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800952a:	2300      	movs	r3, #0
 800952c:	2200      	movs	r2, #0
 800952e:	2100      	movs	r1, #0
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f004 fea9 	bl	800e288 <USBD_LL_PrepareReceive>
 8009536:	e03f      	b.n	80095b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	429a      	cmp	r2, r3
 8009542:	d11c      	bne.n	800957e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800954c:	429a      	cmp	r2, r3
 800954e:	d316      	bcc.n	800957e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800955a:	429a      	cmp	r2, r3
 800955c:	d20f      	bcs.n	800957e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800955e:	2200      	movs	r2, #0
 8009560:	2100      	movs	r1, #0
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f001 f88d 	bl	800a682 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009570:	2300      	movs	r3, #0
 8009572:	2200      	movs	r2, #0
 8009574:	2100      	movs	r1, #0
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f004 fe86 	bl	800e288 <USBD_LL_PrepareReceive>
 800957c:	e01c      	b.n	80095b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b03      	cmp	r3, #3
 8009588:	d10f      	bne.n	80095aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d009      	beq.n	80095aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095aa:	2180      	movs	r1, #128	; 0x80
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f004 fdc1 	bl	800e134 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f001 f8b7 	bl	800a726 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d03a      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7ff fe42 	bl	800924c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80095d0:	e032      	b.n	8009638 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80095d2:	7afb      	ldrb	r3, [r7, #11]
 80095d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	4619      	mov	r1, r3
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 f97f 	bl	80098e0 <USBD_CoreFindEP>
 80095e2:	4603      	mov	r3, r0
 80095e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	2bff      	cmp	r3, #255	; 0xff
 80095ea:	d025      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d122      	bne.n	8009638 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d11c      	bne.n	8009638 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80095fe:	7dfa      	ldrb	r2, [r7, #23]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	32ae      	adds	r2, #174	; 0xae
 8009604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d014      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800960e:	7dfa      	ldrb	r2, [r7, #23]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009616:	7dfa      	ldrb	r2, [r7, #23]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	32ae      	adds	r2, #174	; 0xae
 800961c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	7afa      	ldrb	r2, [r7, #11]
 8009624:	4611      	mov	r1, r2
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	4798      	blx	r3
 800962a:	4603      	mov	r3, r0
 800962c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800962e:	7dbb      	ldrb	r3, [r7, #22]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009634:	7dbb      	ldrb	r3, [r7, #22]
 8009636:	e000      	b.n	800963a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967a:	2b00      	cmp	r3, #0
 800967c:	d014      	beq.n	80096a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00e      	beq.n	80096a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	6852      	ldr	r2, [r2, #4]
 8009696:	b2d2      	uxtb	r2, r2
 8009698:	4611      	mov	r1, r2
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	4798      	blx	r3
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80096a4:	2303      	movs	r3, #3
 80096a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096a8:	2340      	movs	r3, #64	; 0x40
 80096aa:	2200      	movs	r2, #0
 80096ac:	2100      	movs	r1, #0
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f004 fcfb 	bl	800e0aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2240      	movs	r2, #64	; 0x40
 80096c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096c4:	2340      	movs	r3, #64	; 0x40
 80096c6:	2200      	movs	r2, #0
 80096c8:	2180      	movs	r1, #128	; 0x80
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f004 fced 	bl	800e0aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2240      	movs	r2, #64	; 0x40
 80096da:	621a      	str	r2, [r3, #32]

  return ret;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009706:	b480      	push	{r7}
 8009708:	b083      	sub	sp, #12
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009714:	b2da      	uxtb	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2204      	movs	r2, #4
 8009720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b04      	cmp	r3, #4
 8009744:	d106      	bne.n	8009754 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800974c:	b2da      	uxtb	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b03      	cmp	r3, #3
 8009774:	d110      	bne.n	8009798 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00b      	beq.n	8009798 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d005      	beq.n	8009798 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009792:	69db      	ldr	r3, [r3, #28]
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	32ae      	adds	r2, #174	; 0xae
 80097b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e01c      	b.n	80097fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	d115      	bne.n	80097fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	32ae      	adds	r2, #174	; 0xae
 80097da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00b      	beq.n	80097fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	32ae      	adds	r2, #174	; 0xae
 80097ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f2:	6a1b      	ldr	r3, [r3, #32]
 80097f4:	78fa      	ldrb	r2, [r7, #3]
 80097f6:	4611      	mov	r1, r2
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	460b      	mov	r3, r1
 8009810:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	32ae      	adds	r2, #174	; 0xae
 800981c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d101      	bne.n	8009828 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009824:	2303      	movs	r3, #3
 8009826:	e01c      	b.n	8009862 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b03      	cmp	r3, #3
 8009832:	d115      	bne.n	8009860 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	32ae      	adds	r2, #174	; 0xae
 800983e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00b      	beq.n	8009860 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	32ae      	adds	r2, #174	; 0xae
 8009852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009858:	78fa      	ldrb	r2, [r7, #3]
 800985a:	4611      	mov	r1, r2
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00e      	beq.n	80098bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6852      	ldr	r2, [r2, #4]
 80098aa:	b2d2      	uxtb	r2, r2
 80098ac:	4611      	mov	r1, r2
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	4798      	blx	r3
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80098b8:	2303      	movs	r3, #3
 80098ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	460b      	mov	r3, r1
 80098d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b086      	sub	sp, #24
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800990e:	2300      	movs	r3, #0
 8009910:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	885b      	ldrh	r3, [r3, #2]
 8009916:	b29a      	uxth	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	b29b      	uxth	r3, r3
 800991e:	429a      	cmp	r2, r3
 8009920:	d920      	bls.n	8009964 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	b29b      	uxth	r3, r3
 8009928:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800992a:	e013      	b.n	8009954 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800992c:	f107 030a 	add.w	r3, r7, #10
 8009930:	4619      	mov	r1, r3
 8009932:	6978      	ldr	r0, [r7, #20]
 8009934:	f000 f81b 	bl	800996e <USBD_GetNextDesc>
 8009938:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	785b      	ldrb	r3, [r3, #1]
 800993e:	2b05      	cmp	r3, #5
 8009940:	d108      	bne.n	8009954 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	789b      	ldrb	r3, [r3, #2]
 800994a:	78fa      	ldrb	r2, [r7, #3]
 800994c:	429a      	cmp	r2, r3
 800994e:	d008      	beq.n	8009962 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009950:	2300      	movs	r3, #0
 8009952:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	885b      	ldrh	r3, [r3, #2]
 8009958:	b29a      	uxth	r2, r3
 800995a:	897b      	ldrh	r3, [r7, #10]
 800995c:	429a      	cmp	r2, r3
 800995e:	d8e5      	bhi.n	800992c <USBD_GetEpDesc+0x32>
 8009960:	e000      	b.n	8009964 <USBD_GetEpDesc+0x6a>
          break;
 8009962:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009964:	693b      	ldr	r3, [r7, #16]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800996e:	b480      	push	{r7}
 8009970:	b085      	sub	sp, #20
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	881a      	ldrh	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	b29b      	uxth	r3, r3
 8009986:	4413      	add	r3, r2
 8009988:	b29a      	uxth	r2, r3
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4413      	add	r3, r2
 8009998:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800999a:	68fb      	ldr	r3, [r7, #12]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	3301      	adds	r3, #1
 80099be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80099c6:	8a3b      	ldrh	r3, [r7, #16]
 80099c8:	021b      	lsls	r3, r3, #8
 80099ca:	b21a      	sxth	r2, r3
 80099cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	b21b      	sxth	r3, r3
 80099d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80099d6:	89fb      	ldrh	r3, [r7, #14]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099fa:	2b40      	cmp	r3, #64	; 0x40
 80099fc:	d005      	beq.n	8009a0a <USBD_StdDevReq+0x26>
 80099fe:	2b40      	cmp	r3, #64	; 0x40
 8009a00:	d857      	bhi.n	8009ab2 <USBD_StdDevReq+0xce>
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00f      	beq.n	8009a26 <USBD_StdDevReq+0x42>
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	d153      	bne.n	8009ab2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	32ae      	adds	r2, #174	; 0xae
 8009a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	4798      	blx	r3
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]
      break;
 8009a24:	e04a      	b.n	8009abc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	2b09      	cmp	r3, #9
 8009a2c:	d83b      	bhi.n	8009aa6 <USBD_StdDevReq+0xc2>
 8009a2e:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <USBD_StdDevReq+0x50>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a89 	.word	0x08009a89
 8009a38:	08009a9d 	.word	0x08009a9d
 8009a3c:	08009aa7 	.word	0x08009aa7
 8009a40:	08009a93 	.word	0x08009a93
 8009a44:	08009aa7 	.word	0x08009aa7
 8009a48:	08009a67 	.word	0x08009a67
 8009a4c:	08009a5d 	.word	0x08009a5d
 8009a50:	08009aa7 	.word	0x08009aa7
 8009a54:	08009a7f 	.word	0x08009a7f
 8009a58:	08009a71 	.word	0x08009a71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fa3c 	bl	8009edc <USBD_GetDescriptor>
          break;
 8009a64:	e024      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fba1 	bl	800a1b0 <USBD_SetAddress>
          break;
 8009a6e:	e01f      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fbe0 	bl	800a238 <USBD_SetConfig>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]
          break;
 8009a7c:	e018      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fc83 	bl	800a38c <USBD_GetConfig>
          break;
 8009a86:	e013      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fcb4 	bl	800a3f8 <USBD_GetStatus>
          break;
 8009a90:	e00e      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fce3 	bl	800a460 <USBD_SetFeature>
          break;
 8009a9a:	e009      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fd07 	bl	800a4b2 <USBD_ClrFeature>
          break;
 8009aa4:	e004      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fd5e 	bl	800a56a <USBD_CtlError>
          break;
 8009aae:	bf00      	nop
      }
      break;
 8009ab0:	e004      	b.n	8009abc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fd58 	bl	800a56a <USBD_CtlError>
      break;
 8009aba:	bf00      	nop
  }

  return ret;
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop

08009ac8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ade:	2b40      	cmp	r3, #64	; 0x40
 8009ae0:	d005      	beq.n	8009aee <USBD_StdItfReq+0x26>
 8009ae2:	2b40      	cmp	r3, #64	; 0x40
 8009ae4:	d852      	bhi.n	8009b8c <USBD_StdItfReq+0xc4>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <USBD_StdItfReq+0x26>
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d14e      	bne.n	8009b8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	3b01      	subs	r3, #1
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d840      	bhi.n	8009b7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	889b      	ldrh	r3, [r3, #4]
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d836      	bhi.n	8009b74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	889b      	ldrh	r3, [r3, #4]
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff fed9 	bl	80098c6 <USBD_CoreFindIF>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	2bff      	cmp	r3, #255	; 0xff
 8009b1c:	d01d      	beq.n	8009b5a <USBD_StdItfReq+0x92>
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d11a      	bne.n	8009b5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b24:	7bba      	ldrb	r2, [r7, #14]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	32ae      	adds	r2, #174	; 0xae
 8009b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00f      	beq.n	8009b54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009b34:	7bba      	ldrb	r2, [r7, #14]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b3c:	7bba      	ldrb	r2, [r7, #14]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	32ae      	adds	r2, #174	; 0xae
 8009b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	4798      	blx	r3
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b52:	e004      	b.n	8009b5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009b54:	2303      	movs	r3, #3
 8009b56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b58:	e001      	b.n	8009b5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	88db      	ldrh	r3, [r3, #6]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d110      	bne.n	8009b88 <USBD_StdItfReq+0xc0>
 8009b66:	7bfb      	ldrb	r3, [r7, #15]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10d      	bne.n	8009b88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fdc7 	bl	800a700 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b72:	e009      	b.n	8009b88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fcf7 	bl	800a56a <USBD_CtlError>
          break;
 8009b7c:	e004      	b.n	8009b88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fcf2 	bl	800a56a <USBD_CtlError>
          break;
 8009b86:	e000      	b.n	8009b8a <USBD_StdItfReq+0xc2>
          break;
 8009b88:	bf00      	nop
      }
      break;
 8009b8a:	e004      	b.n	8009b96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fceb 	bl	800a56a <USBD_CtlError>
      break;
 8009b94:	bf00      	nop
  }

  return ret;
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	889b      	ldrh	r3, [r3, #4]
 8009bb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bbc:	2b40      	cmp	r3, #64	; 0x40
 8009bbe:	d007      	beq.n	8009bd0 <USBD_StdEPReq+0x30>
 8009bc0:	2b40      	cmp	r3, #64	; 0x40
 8009bc2:	f200 817f 	bhi.w	8009ec4 <USBD_StdEPReq+0x324>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d02a      	beq.n	8009c20 <USBD_StdEPReq+0x80>
 8009bca:	2b20      	cmp	r3, #32
 8009bcc:	f040 817a 	bne.w	8009ec4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7ff fe83 	bl	80098e0 <USBD_CoreFindEP>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bde:	7b7b      	ldrb	r3, [r7, #13]
 8009be0:	2bff      	cmp	r3, #255	; 0xff
 8009be2:	f000 8174 	beq.w	8009ece <USBD_StdEPReq+0x32e>
 8009be6:	7b7b      	ldrb	r3, [r7, #13]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f040 8170 	bne.w	8009ece <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009bee:	7b7a      	ldrb	r2, [r7, #13]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009bf6:	7b7a      	ldrb	r2, [r7, #13]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	32ae      	adds	r2, #174	; 0xae
 8009bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 8163 	beq.w	8009ece <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c08:	7b7a      	ldrb	r2, [r7, #13]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	32ae      	adds	r2, #174	; 0xae
 8009c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	4798      	blx	r3
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c1e:	e156      	b.n	8009ece <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d008      	beq.n	8009c3a <USBD_StdEPReq+0x9a>
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	f300 8145 	bgt.w	8009eb8 <USBD_StdEPReq+0x318>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f000 809b 	beq.w	8009d6a <USBD_StdEPReq+0x1ca>
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d03c      	beq.n	8009cb2 <USBD_StdEPReq+0x112>
 8009c38:	e13e      	b.n	8009eb8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d002      	beq.n	8009c4c <USBD_StdEPReq+0xac>
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d016      	beq.n	8009c78 <USBD_StdEPReq+0xd8>
 8009c4a:	e02c      	b.n	8009ca6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00d      	beq.n	8009c6e <USBD_StdEPReq+0xce>
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	2b80      	cmp	r3, #128	; 0x80
 8009c56:	d00a      	beq.n	8009c6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f004 fa69 	bl	800e134 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c62:	2180      	movs	r1, #128	; 0x80
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f004 fa65 	bl	800e134 <USBD_LL_StallEP>
 8009c6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c6c:	e020      	b.n	8009cb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fc7a 	bl	800a56a <USBD_CtlError>
              break;
 8009c76:	e01b      	b.n	8009cb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	885b      	ldrh	r3, [r3, #2]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10e      	bne.n	8009c9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <USBD_StdEPReq+0xfe>
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
 8009c88:	2b80      	cmp	r3, #128	; 0x80
 8009c8a:	d008      	beq.n	8009c9e <USBD_StdEPReq+0xfe>
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	88db      	ldrh	r3, [r3, #6]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d104      	bne.n	8009c9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c94:	7bbb      	ldrb	r3, [r7, #14]
 8009c96:	4619      	mov	r1, r3
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f004 fa4b 	bl	800e134 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fd2e 	bl	800a700 <USBD_CtlSendStatus>

              break;
 8009ca4:	e004      	b.n	8009cb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fc5e 	bl	800a56a <USBD_CtlError>
              break;
 8009cae:	bf00      	nop
          }
          break;
 8009cb0:	e107      	b.n	8009ec2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d002      	beq.n	8009cc4 <USBD_StdEPReq+0x124>
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	d016      	beq.n	8009cf0 <USBD_StdEPReq+0x150>
 8009cc2:	e04b      	b.n	8009d5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00d      	beq.n	8009ce6 <USBD_StdEPReq+0x146>
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	2b80      	cmp	r3, #128	; 0x80
 8009cce:	d00a      	beq.n	8009ce6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f004 fa2d 	bl	800e134 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cda:	2180      	movs	r1, #128	; 0x80
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f004 fa29 	bl	800e134 <USBD_LL_StallEP>
 8009ce2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ce4:	e040      	b.n	8009d68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fc3e 	bl	800a56a <USBD_CtlError>
              break;
 8009cee:	e03b      	b.n	8009d68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	885b      	ldrh	r3, [r3, #2]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d136      	bne.n	8009d66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009cf8:	7bbb      	ldrb	r3, [r7, #14]
 8009cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d004      	beq.n	8009d0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f004 fa33 	bl	800e172 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fcf7 	bl	800a700 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7ff fde2 	bl	80098e0 <USBD_CoreFindEP>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d20:	7b7b      	ldrb	r3, [r7, #13]
 8009d22:	2bff      	cmp	r3, #255	; 0xff
 8009d24:	d01f      	beq.n	8009d66 <USBD_StdEPReq+0x1c6>
 8009d26:	7b7b      	ldrb	r3, [r7, #13]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d11c      	bne.n	8009d66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d2c:	7b7a      	ldrb	r2, [r7, #13]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009d34:	7b7a      	ldrb	r2, [r7, #13]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	32ae      	adds	r2, #174	; 0xae
 8009d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d010      	beq.n	8009d66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d44:	7b7a      	ldrb	r2, [r7, #13]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	32ae      	adds	r2, #174	; 0xae
 8009d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	4798      	blx	r3
 8009d56:	4603      	mov	r3, r0
 8009d58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009d5a:	e004      	b.n	8009d66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fc03 	bl	800a56a <USBD_CtlError>
              break;
 8009d64:	e000      	b.n	8009d68 <USBD_StdEPReq+0x1c8>
              break;
 8009d66:	bf00      	nop
          }
          break;
 8009d68:	e0ab      	b.n	8009ec2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d002      	beq.n	8009d7c <USBD_StdEPReq+0x1dc>
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	d032      	beq.n	8009de0 <USBD_StdEPReq+0x240>
 8009d7a:	e097      	b.n	8009eac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d007      	beq.n	8009d92 <USBD_StdEPReq+0x1f2>
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
 8009d84:	2b80      	cmp	r3, #128	; 0x80
 8009d86:	d004      	beq.n	8009d92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fbed 	bl	800a56a <USBD_CtlError>
                break;
 8009d90:	e091      	b.n	8009eb6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	da0b      	bge.n	8009db2 <USBD_StdEPReq+0x212>
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009da0:	4613      	mov	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	3310      	adds	r3, #16
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	4413      	add	r3, r2
 8009dae:	3304      	adds	r3, #4
 8009db0:	e00b      	b.n	8009dca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009db8:	4613      	mov	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	3304      	adds	r3, #4
 8009dca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fc37 	bl	800a64c <USBD_CtlSendData>
              break;
 8009dde:	e06a      	b.n	8009eb6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	da11      	bge.n	8009e0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	f003 020f 	and.w	r2, r3, #15
 8009dee:	6879      	ldr	r1, [r7, #4]
 8009df0:	4613      	mov	r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	440b      	add	r3, r1
 8009dfa:	3324      	adds	r3, #36	; 0x24
 8009dfc:	881b      	ldrh	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d117      	bne.n	8009e32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fbb0 	bl	800a56a <USBD_CtlError>
                  break;
 8009e0a:	e054      	b.n	8009eb6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	f003 020f 	and.w	r2, r3, #15
 8009e12:	6879      	ldr	r1, [r7, #4]
 8009e14:	4613      	mov	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	440b      	add	r3, r1
 8009e1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d104      	bne.n	8009e32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fb9d 	bl	800a56a <USBD_CtlError>
                  break;
 8009e30:	e041      	b.n	8009eb6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	da0b      	bge.n	8009e52 <USBD_StdEPReq+0x2b2>
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e40:	4613      	mov	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	3310      	adds	r3, #16
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	3304      	adds	r3, #4
 8009e50:	e00b      	b.n	8009e6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
 8009e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e58:	4613      	mov	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	4413      	add	r3, r2
 8009e68:	3304      	adds	r3, #4
 8009e6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d002      	beq.n	8009e78 <USBD_StdEPReq+0x2d8>
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	2b80      	cmp	r3, #128	; 0x80
 8009e76:	d103      	bne.n	8009e80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
 8009e7e:	e00e      	b.n	8009e9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f004 f993 	bl	800e1b0 <USBD_LL_IsStallEP>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d003      	beq.n	8009e98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2201      	movs	r2, #1
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	e002      	b.n	8009e9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fbd1 	bl	800a64c <USBD_CtlSendData>
              break;
 8009eaa:	e004      	b.n	8009eb6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fb5b 	bl	800a56a <USBD_CtlError>
              break;
 8009eb4:	bf00      	nop
          }
          break;
 8009eb6:	e004      	b.n	8009ec2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fb55 	bl	800a56a <USBD_CtlError>
          break;
 8009ec0:	bf00      	nop
      }
      break;
 8009ec2:	e005      	b.n	8009ed0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fb4f 	bl	800a56a <USBD_CtlError>
      break;
 8009ecc:	e000      	b.n	8009ed0 <USBD_StdEPReq+0x330>
      break;
 8009ece:	bf00      	nop
  }

  return ret;
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	885b      	ldrh	r3, [r3, #2]
 8009ef6:	0a1b      	lsrs	r3, r3, #8
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	3b01      	subs	r3, #1
 8009efc:	2b06      	cmp	r3, #6
 8009efe:	f200 8128 	bhi.w	800a152 <USBD_GetDescriptor+0x276>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <USBD_GetDescriptor+0x2c>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f25 	.word	0x08009f25
 8009f0c:	08009f3d 	.word	0x08009f3d
 8009f10:	08009f7d 	.word	0x08009f7d
 8009f14:	0800a153 	.word	0x0800a153
 8009f18:	0800a153 	.word	0x0800a153
 8009f1c:	0800a0f3 	.word	0x0800a0f3
 8009f20:	0800a11f 	.word	0x0800a11f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	7c12      	ldrb	r2, [r2, #16]
 8009f30:	f107 0108 	add.w	r1, r7, #8
 8009f34:	4610      	mov	r0, r2
 8009f36:	4798      	blx	r3
 8009f38:	60f8      	str	r0, [r7, #12]
      break;
 8009f3a:	e112      	b.n	800a162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	7c1b      	ldrb	r3, [r3, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10d      	bne.n	8009f60 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4c:	f107 0208 	add.w	r2, r7, #8
 8009f50:	4610      	mov	r0, r2
 8009f52:	4798      	blx	r3
 8009f54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f5e:	e100      	b.n	800a162 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	f107 0208 	add.w	r2, r7, #8
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4798      	blx	r3
 8009f70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3301      	adds	r3, #1
 8009f76:	2202      	movs	r2, #2
 8009f78:	701a      	strb	r2, [r3, #0]
      break;
 8009f7a:	e0f2      	b.n	800a162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	885b      	ldrh	r3, [r3, #2]
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b05      	cmp	r3, #5
 8009f84:	f200 80ac 	bhi.w	800a0e0 <USBD_GetDescriptor+0x204>
 8009f88:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <USBD_GetDescriptor+0xb4>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	08009fa9 	.word	0x08009fa9
 8009f94:	08009fdd 	.word	0x08009fdd
 8009f98:	0800a011 	.word	0x0800a011
 8009f9c:	0800a045 	.word	0x0800a045
 8009fa0:	0800a079 	.word	0x0800a079
 8009fa4:	0800a0ad 	.word	0x0800a0ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	7c12      	ldrb	r2, [r2, #16]
 8009fc0:	f107 0108 	add.w	r1, r7, #8
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	4798      	blx	r3
 8009fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fca:	e091      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 facb 	bl	800a56a <USBD_CtlError>
            err++;
 8009fd4:	7afb      	ldrb	r3, [r7, #11]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009fda:	e089      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00b      	beq.n	800a000 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	7c12      	ldrb	r2, [r2, #16]
 8009ff4:	f107 0108 	add.w	r1, r7, #8
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4798      	blx	r3
 8009ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ffe:	e077      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fab1 	bl	800a56a <USBD_CtlError>
            err++;
 800a008:	7afb      	ldrb	r3, [r7, #11]
 800a00a:	3301      	adds	r3, #1
 800a00c:	72fb      	strb	r3, [r7, #11]
          break;
 800a00e:	e06f      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00b      	beq.n	800a034 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	7c12      	ldrb	r2, [r2, #16]
 800a028:	f107 0108 	add.w	r1, r7, #8
 800a02c:	4610      	mov	r0, r2
 800a02e:	4798      	blx	r3
 800a030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a032:	e05d      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fa97 	bl	800a56a <USBD_CtlError>
            err++;
 800a03c:	7afb      	ldrb	r3, [r7, #11]
 800a03e:	3301      	adds	r3, #1
 800a040:	72fb      	strb	r3, [r7, #11]
          break;
 800a042:	e055      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00b      	beq.n	800a068 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	7c12      	ldrb	r2, [r2, #16]
 800a05c:	f107 0108 	add.w	r1, r7, #8
 800a060:	4610      	mov	r0, r2
 800a062:	4798      	blx	r3
 800a064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a066:	e043      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fa7d 	bl	800a56a <USBD_CtlError>
            err++;
 800a070:	7afb      	ldrb	r3, [r7, #11]
 800a072:	3301      	adds	r3, #1
 800a074:	72fb      	strb	r3, [r7, #11]
          break;
 800a076:	e03b      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00b      	beq.n	800a09c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	7c12      	ldrb	r2, [r2, #16]
 800a090:	f107 0108 	add.w	r1, r7, #8
 800a094:	4610      	mov	r0, r2
 800a096:	4798      	blx	r3
 800a098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a09a:	e029      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fa63 	bl	800a56a <USBD_CtlError>
            err++;
 800a0a4:	7afb      	ldrb	r3, [r7, #11]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0aa:	e021      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00b      	beq.n	800a0d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	7c12      	ldrb	r2, [r2, #16]
 800a0c4:	f107 0108 	add.w	r1, r7, #8
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	4798      	blx	r3
 800a0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ce:	e00f      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fa49 	bl	800a56a <USBD_CtlError>
            err++;
 800a0d8:	7afb      	ldrb	r3, [r7, #11]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0de:	e007      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fa41 	bl	800a56a <USBD_CtlError>
          err++;
 800a0e8:	7afb      	ldrb	r3, [r7, #11]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a0ee:	bf00      	nop
      }
      break;
 800a0f0:	e037      	b.n	800a162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	7c1b      	ldrb	r3, [r3, #16]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d109      	bne.n	800a10e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a102:	f107 0208 	add.w	r2, r7, #8
 800a106:	4610      	mov	r0, r2
 800a108:	4798      	blx	r3
 800a10a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a10c:	e029      	b.n	800a162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fa2a 	bl	800a56a <USBD_CtlError>
        err++;
 800a116:	7afb      	ldrb	r3, [r7, #11]
 800a118:	3301      	adds	r3, #1
 800a11a:	72fb      	strb	r3, [r7, #11]
      break;
 800a11c:	e021      	b.n	800a162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	7c1b      	ldrb	r3, [r3, #16]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10d      	bne.n	800a142 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12e:	f107 0208 	add.w	r2, r7, #8
 800a132:	4610      	mov	r0, r2
 800a134:	4798      	blx	r3
 800a136:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3301      	adds	r3, #1
 800a13c:	2207      	movs	r2, #7
 800a13e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a140:	e00f      	b.n	800a162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fa10 	bl	800a56a <USBD_CtlError>
        err++;
 800a14a:	7afb      	ldrb	r3, [r7, #11]
 800a14c:	3301      	adds	r3, #1
 800a14e:	72fb      	strb	r3, [r7, #11]
      break;
 800a150:	e007      	b.n	800a162 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fa08 	bl	800a56a <USBD_CtlError>
      err++;
 800a15a:	7afb      	ldrb	r3, [r7, #11]
 800a15c:	3301      	adds	r3, #1
 800a15e:	72fb      	strb	r3, [r7, #11]
      break;
 800a160:	bf00      	nop
  }

  if (err != 0U)
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d11e      	bne.n	800a1a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	88db      	ldrh	r3, [r3, #6]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d016      	beq.n	800a19e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a170:	893b      	ldrh	r3, [r7, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00e      	beq.n	800a194 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	88da      	ldrh	r2, [r3, #6]
 800a17a:	893b      	ldrh	r3, [r7, #8]
 800a17c:	4293      	cmp	r3, r2
 800a17e:	bf28      	it	cs
 800a180:	4613      	movcs	r3, r2
 800a182:	b29b      	uxth	r3, r3
 800a184:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a186:	893b      	ldrh	r3, [r7, #8]
 800a188:	461a      	mov	r2, r3
 800a18a:	68f9      	ldr	r1, [r7, #12]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 fa5d 	bl	800a64c <USBD_CtlSendData>
 800a192:	e009      	b.n	800a1a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f9e7 	bl	800a56a <USBD_CtlError>
 800a19c:	e004      	b.n	800a1a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 faae 	bl	800a700 <USBD_CtlSendStatus>
 800a1a4:	e000      	b.n	800a1a8 <USBD_GetDescriptor+0x2cc>
    return;
 800a1a6:	bf00      	nop
  }
}
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop

0800a1b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	889b      	ldrh	r3, [r3, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d131      	bne.n	800a226 <USBD_SetAddress+0x76>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	88db      	ldrh	r3, [r3, #6]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d12d      	bne.n	800a226 <USBD_SetAddress+0x76>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	885b      	ldrh	r3, [r3, #2]
 800a1ce:	2b7f      	cmp	r3, #127	; 0x7f
 800a1d0:	d829      	bhi.n	800a226 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	885b      	ldrh	r3, [r3, #2]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d104      	bne.n	800a1f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a1ea:	6839      	ldr	r1, [r7, #0]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f9bc 	bl	800a56a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f2:	e01d      	b.n	800a230 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	7bfa      	ldrb	r2, [r7, #15]
 800a1f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	4619      	mov	r1, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f004 f801 	bl	800e208 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fa7a 	bl	800a700 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d004      	beq.n	800a21c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2202      	movs	r2, #2
 800a216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a21a:	e009      	b.n	800a230 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a224:	e004      	b.n	800a230 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 f99e 	bl	800a56a <USBD_CtlError>
  }
}
 800a22e:	bf00      	nop
 800a230:	bf00      	nop
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	885b      	ldrh	r3, [r3, #2]
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	4b4e      	ldr	r3, [pc, #312]	; (800a388 <USBD_SetConfig+0x150>)
 800a24e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a250:	4b4d      	ldr	r3, [pc, #308]	; (800a388 <USBD_SetConfig+0x150>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d905      	bls.n	800a264 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f985 	bl	800a56a <USBD_CtlError>
    return USBD_FAIL;
 800a260:	2303      	movs	r3, #3
 800a262:	e08c      	b.n	800a37e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d002      	beq.n	800a276 <USBD_SetConfig+0x3e>
 800a270:	2b03      	cmp	r3, #3
 800a272:	d029      	beq.n	800a2c8 <USBD_SetConfig+0x90>
 800a274:	e075      	b.n	800a362 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a276:	4b44      	ldr	r3, [pc, #272]	; (800a388 <USBD_SetConfig+0x150>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d020      	beq.n	800a2c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a27e:	4b42      	ldr	r3, [pc, #264]	; (800a388 <USBD_SetConfig+0x150>)
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a288:	4b3f      	ldr	r3, [pc, #252]	; (800a388 <USBD_SetConfig+0x150>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7fe ffe7 	bl	8009262 <USBD_SetClassConfig>
 800a294:	4603      	mov	r3, r0
 800a296:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a298:	7bfb      	ldrb	r3, [r7, #15]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d008      	beq.n	800a2b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f962 	bl	800a56a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2ae:	e065      	b.n	800a37c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fa25 	bl	800a700 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2203      	movs	r2, #3
 800a2ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a2be:	e05d      	b.n	800a37c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fa1d 	bl	800a700 <USBD_CtlSendStatus>
      break;
 800a2c6:	e059      	b.n	800a37c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a2c8:	4b2f      	ldr	r3, [pc, #188]	; (800a388 <USBD_SetConfig+0x150>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d112      	bne.n	800a2f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a2d8:	4b2b      	ldr	r3, [pc, #172]	; (800a388 <USBD_SetConfig+0x150>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2e2:	4b29      	ldr	r3, [pc, #164]	; (800a388 <USBD_SetConfig+0x150>)
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7fe ffd6 	bl	800929a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fa06 	bl	800a700 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2f4:	e042      	b.n	800a37c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a2f6:	4b24      	ldr	r3, [pc, #144]	; (800a388 <USBD_SetConfig+0x150>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	429a      	cmp	r2, r3
 800a302:	d02a      	beq.n	800a35a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	4619      	mov	r1, r3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7fe ffc4 	bl	800929a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a312:	4b1d      	ldr	r3, [pc, #116]	; (800a388 <USBD_SetConfig+0x150>)
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a31c:	4b1a      	ldr	r3, [pc, #104]	; (800a388 <USBD_SetConfig+0x150>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7fe ff9d 	bl	8009262 <USBD_SetClassConfig>
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00f      	beq.n	800a352 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f918 	bl	800a56a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7fe ffa9 	bl	800929a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2202      	movs	r2, #2
 800a34c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a350:	e014      	b.n	800a37c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f9d4 	bl	800a700 <USBD_CtlSendStatus>
      break;
 800a358:	e010      	b.n	800a37c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f9d0 	bl	800a700 <USBD_CtlSendStatus>
      break;
 800a360:	e00c      	b.n	800a37c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 f900 	bl	800a56a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a36a:	4b07      	ldr	r3, [pc, #28]	; (800a388 <USBD_SetConfig+0x150>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7fe ff92 	bl	800929a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a376:	2303      	movs	r3, #3
 800a378:	73fb      	strb	r3, [r7, #15]
      break;
 800a37a:	bf00      	nop
  }

  return ret;
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	2000069c 	.word	0x2000069c

0800a38c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	88db      	ldrh	r3, [r3, #6]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d004      	beq.n	800a3a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f8e2 	bl	800a56a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3a6:	e023      	b.n	800a3f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	dc02      	bgt.n	800a3ba <USBD_GetConfig+0x2e>
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dc03      	bgt.n	800a3c0 <USBD_GetConfig+0x34>
 800a3b8:	e015      	b.n	800a3e6 <USBD_GetConfig+0x5a>
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d00b      	beq.n	800a3d6 <USBD_GetConfig+0x4a>
 800a3be:	e012      	b.n	800a3e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3308      	adds	r3, #8
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f93c 	bl	800a64c <USBD_CtlSendData>
        break;
 800a3d4:	e00c      	b.n	800a3f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3304      	adds	r3, #4
 800a3da:	2201      	movs	r2, #1
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f934 	bl	800a64c <USBD_CtlSendData>
        break;
 800a3e4:	e004      	b.n	800a3f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f8be 	bl	800a56a <USBD_CtlError>
        break;
 800a3ee:	bf00      	nop
}
 800a3f0:	bf00      	nop
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	3b01      	subs	r3, #1
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d81e      	bhi.n	800a44e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	88db      	ldrh	r3, [r3, #6]
 800a414:	2b02      	cmp	r3, #2
 800a416:	d004      	beq.n	800a422 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f8a5 	bl	800a56a <USBD_CtlError>
        break;
 800a420:	e01a      	b.n	800a458 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d005      	beq.n	800a43e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	f043 0202 	orr.w	r2, r3, #2
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	330c      	adds	r3, #12
 800a442:	2202      	movs	r2, #2
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f900 	bl	800a64c <USBD_CtlSendData>
      break;
 800a44c:	e004      	b.n	800a458 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f88a 	bl	800a56a <USBD_CtlError>
      break;
 800a456:	bf00      	nop
  }
}
 800a458:	bf00      	nop
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	885b      	ldrh	r3, [r3, #2]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d107      	bne.n	800a482 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2201      	movs	r2, #1
 800a476:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f940 	bl	800a700 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a480:	e013      	b.n	800a4aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	885b      	ldrh	r3, [r3, #2]
 800a486:	2b02      	cmp	r3, #2
 800a488:	d10b      	bne.n	800a4a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	889b      	ldrh	r3, [r3, #4]
 800a48e:	0a1b      	lsrs	r3, r3, #8
 800a490:	b29b      	uxth	r3, r3
 800a492:	b2da      	uxtb	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f930 	bl	800a700 <USBD_CtlSendStatus>
}
 800a4a0:	e003      	b.n	800a4aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f860 	bl	800a56a <USBD_CtlError>
}
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b082      	sub	sp, #8
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d80b      	bhi.n	800a4e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	885b      	ldrh	r3, [r3, #2]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d10c      	bne.n	800a4ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f910 	bl	800a700 <USBD_CtlSendStatus>
      }
      break;
 800a4e0:	e004      	b.n	800a4ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f840 	bl	800a56a <USBD_CtlError>
      break;
 800a4ea:	e000      	b.n	800a4ee <USBD_ClrFeature+0x3c>
      break;
 800a4ec:	bf00      	nop
  }
}
 800a4ee:	bf00      	nop
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	781a      	ldrb	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	3301      	adds	r3, #1
 800a510:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	781a      	ldrb	r2, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3301      	adds	r3, #1
 800a51e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f7ff fa41 	bl	80099a8 <SWAPBYTE>
 800a526:	4603      	mov	r3, r0
 800a528:	461a      	mov	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3301      	adds	r3, #1
 800a532:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	3301      	adds	r3, #1
 800a538:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f7ff fa34 	bl	80099a8 <SWAPBYTE>
 800a540:	4603      	mov	r3, r0
 800a542:	461a      	mov	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3301      	adds	r3, #1
 800a54c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	3301      	adds	r3, #1
 800a552:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f7ff fa27 	bl	80099a8 <SWAPBYTE>
 800a55a:	4603      	mov	r3, r0
 800a55c:	461a      	mov	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	80da      	strh	r2, [r3, #6]
}
 800a562:	bf00      	nop
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a574:	2180      	movs	r1, #128	; 0x80
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f003 fddc 	bl	800e134 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a57c:	2100      	movs	r1, #0
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f003 fdd8 	bl	800e134 <USBD_LL_StallEP>
}
 800a584:	bf00      	nop
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a598:	2300      	movs	r3, #0
 800a59a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d036      	beq.n	800a610 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5a6:	6938      	ldr	r0, [r7, #16]
 800a5a8:	f000 f836 	bl	800a618 <USBD_GetLen>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	4413      	add	r3, r2
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	7812      	ldrb	r2, [r2, #0]
 800a5c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a5cc:	7dfb      	ldrb	r3, [r7, #23]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	2203      	movs	r2, #3
 800a5d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a5dc:	e013      	b.n	800a606 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	7812      	ldrb	r2, [r2, #0]
 800a5e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	613b      	str	r3, [r7, #16]
    idx++;
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	701a      	strb	r2, [r3, #0]
    idx++;
 800a600:	7dfb      	ldrb	r3, [r7, #23]
 800a602:	3301      	adds	r3, #1
 800a604:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1e7      	bne.n	800a5de <USBD_GetString+0x52>
 800a60e:	e000      	b.n	800a612 <USBD_GetString+0x86>
    return;
 800a610:	bf00      	nop
  }
}
 800a612:	3718      	adds	r7, #24
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a620:	2300      	movs	r3, #0
 800a622:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a628:	e005      	b.n	800a636 <USBD_GetLen+0x1e>
  {
    len++;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
 800a62c:	3301      	adds	r3, #1
 800a62e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	3301      	adds	r3, #1
 800a634:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1f5      	bne.n	800a62a <USBD_GetLen+0x12>
  }

  return len;
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2202      	movs	r2, #2
 800a65c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	2100      	movs	r1, #0
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f003 fde7 	bl	800e246 <USBD_LL_Transmit>

  return USBD_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	2100      	movs	r1, #0
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f003 fdd6 	bl	800e246 <USBD_LL_Transmit>

  return USBD_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2203      	movs	r2, #3
 800a6b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f003 fdda 	bl	800e288 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	60f8      	str	r0, [r7, #12]
 800a6e6:	60b9      	str	r1, [r7, #8]
 800a6e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f003 fdc9 	bl	800e288 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2204      	movs	r2, #4
 800a70c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a710:	2300      	movs	r3, #0
 800a712:	2200      	movs	r2, #0
 800a714:	2100      	movs	r1, #0
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f003 fd95 	bl	800e246 <USBD_LL_Transmit>

  return USBD_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b082      	sub	sp, #8
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2205      	movs	r2, #5
 800a732:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a736:	2300      	movs	r3, #0
 800a738:	2200      	movs	r2, #0
 800a73a:	2100      	movs	r1, #0
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f003 fda3 	bl	800e288 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <__NVIC_SetPriority>:
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	6039      	str	r1, [r7, #0]
 800a756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	db0a      	blt.n	800a776 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	b2da      	uxtb	r2, r3
 800a764:	490c      	ldr	r1, [pc, #48]	; (800a798 <__NVIC_SetPriority+0x4c>)
 800a766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a76a:	0112      	lsls	r2, r2, #4
 800a76c:	b2d2      	uxtb	r2, r2
 800a76e:	440b      	add	r3, r1
 800a770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a774:	e00a      	b.n	800a78c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	4908      	ldr	r1, [pc, #32]	; (800a79c <__NVIC_SetPriority+0x50>)
 800a77c:	79fb      	ldrb	r3, [r7, #7]
 800a77e:	f003 030f 	and.w	r3, r3, #15
 800a782:	3b04      	subs	r3, #4
 800a784:	0112      	lsls	r2, r2, #4
 800a786:	b2d2      	uxtb	r2, r2
 800a788:	440b      	add	r3, r1
 800a78a:	761a      	strb	r2, [r3, #24]
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	e000e100 	.word	0xe000e100
 800a79c:	e000ed00 	.word	0xe000ed00

0800a7a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a7a4:	4b05      	ldr	r3, [pc, #20]	; (800a7bc <SysTick_Handler+0x1c>)
 800a7a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a7a8:	f002 f818 	bl	800c7dc <xTaskGetSchedulerState>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d001      	beq.n	800a7b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a7b2:	f002 fe01 	bl	800d3b8 <xPortSysTickHandler>
  }
}
 800a7b6:	bf00      	nop
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	e000e010 	.word	0xe000e010

0800a7c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	f06f 0004 	mvn.w	r0, #4
 800a7ca:	f7ff ffbf 	bl	800a74c <__NVIC_SetPriority>
#endif
}
 800a7ce:	bf00      	nop
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7da:	f3ef 8305 	mrs	r3, IPSR
 800a7de:	603b      	str	r3, [r7, #0]
  return(result);
 800a7e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d003      	beq.n	800a7ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a7e6:	f06f 0305 	mvn.w	r3, #5
 800a7ea:	607b      	str	r3, [r7, #4]
 800a7ec:	e00c      	b.n	800a808 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a7ee:	4b0a      	ldr	r3, [pc, #40]	; (800a818 <osKernelInitialize+0x44>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d105      	bne.n	800a802 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a7f6:	4b08      	ldr	r3, [pc, #32]	; (800a818 <osKernelInitialize+0x44>)
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	607b      	str	r3, [r7, #4]
 800a800:	e002      	b.n	800a808 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a802:	f04f 33ff 	mov.w	r3, #4294967295
 800a806:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a808:	687b      	ldr	r3, [r7, #4]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	200006a0 	.word	0x200006a0

0800a81c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a822:	f3ef 8305 	mrs	r3, IPSR
 800a826:	603b      	str	r3, [r7, #0]
  return(result);
 800a828:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d003      	beq.n	800a836 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a82e:	f06f 0305 	mvn.w	r3, #5
 800a832:	607b      	str	r3, [r7, #4]
 800a834:	e010      	b.n	800a858 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <osKernelStart+0x48>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d109      	bne.n	800a852 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a83e:	f7ff ffbf 	bl	800a7c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a842:	4b08      	ldr	r3, [pc, #32]	; (800a864 <osKernelStart+0x48>)
 800a844:	2202      	movs	r2, #2
 800a846:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a848:	f001 fb6c 	bl	800bf24 <vTaskStartScheduler>
      stat = osOK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	607b      	str	r3, [r7, #4]
 800a850:	e002      	b.n	800a858 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a852:	f04f 33ff 	mov.w	r3, #4294967295
 800a856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a858:	687b      	ldr	r3, [r7, #4]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	200006a0 	.word	0x200006a0

0800a868 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08e      	sub	sp, #56	; 0x38
 800a86c:	af04      	add	r7, sp, #16
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a874:	2300      	movs	r3, #0
 800a876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a878:	f3ef 8305 	mrs	r3, IPSR
 800a87c:	617b      	str	r3, [r7, #20]
  return(result);
 800a87e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a880:	2b00      	cmp	r3, #0
 800a882:	d17e      	bne.n	800a982 <osThreadNew+0x11a>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d07b      	beq.n	800a982 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a88a:	2380      	movs	r3, #128	; 0x80
 800a88c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a88e:	2318      	movs	r3, #24
 800a890:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a892:	2300      	movs	r3, #0
 800a894:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a896:	f04f 33ff 	mov.w	r3, #4294967295
 800a89a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d045      	beq.n	800a92e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d002      	beq.n	800a8b0 <osThreadNew+0x48>
        name = attr->name;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d008      	beq.n	800a8d6 <osThreadNew+0x6e>
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	2b38      	cmp	r3, #56	; 0x38
 800a8c8:	d805      	bhi.n	800a8d6 <osThreadNew+0x6e>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <osThreadNew+0x72>
        return (NULL);
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	e054      	b.n	800a984 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	695b      	ldr	r3, [r3, #20]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	695b      	ldr	r3, [r3, #20]
 800a8e6:	089b      	lsrs	r3, r3, #2
 800a8e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00e      	beq.n	800a910 <osThreadNew+0xa8>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	2bbb      	cmp	r3, #187	; 0xbb
 800a8f8:	d90a      	bls.n	800a910 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d006      	beq.n	800a910 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d002      	beq.n	800a910 <osThreadNew+0xa8>
        mem = 1;
 800a90a:	2301      	movs	r3, #1
 800a90c:	61bb      	str	r3, [r7, #24]
 800a90e:	e010      	b.n	800a932 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d10c      	bne.n	800a932 <osThreadNew+0xca>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d108      	bne.n	800a932 <osThreadNew+0xca>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d104      	bne.n	800a932 <osThreadNew+0xca>
          mem = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	61bb      	str	r3, [r7, #24]
 800a92c:	e001      	b.n	800a932 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d110      	bne.n	800a95a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a940:	9202      	str	r2, [sp, #8]
 800a942:	9301      	str	r3, [sp, #4]
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	6a3a      	ldr	r2, [r7, #32]
 800a94c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f001 f930 	bl	800bbb4 <xTaskCreateStatic>
 800a954:	4603      	mov	r3, r0
 800a956:	613b      	str	r3, [r7, #16]
 800a958:	e013      	b.n	800a982 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d110      	bne.n	800a982 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a960:	6a3b      	ldr	r3, [r7, #32]
 800a962:	b29a      	uxth	r2, r3
 800a964:	f107 0310 	add.w	r3, r7, #16
 800a968:	9301      	str	r3, [sp, #4]
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f001 f97b 	bl	800bc6e <xTaskCreate>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d001      	beq.n	800a982 <osThreadNew+0x11a>
            hTask = NULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a982:	693b      	ldr	r3, [r7, #16]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3728      	adds	r7, #40	; 0x28
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a992:	f3ef 8305 	mrs	r3, IPSR
 800a996:	603b      	str	r3, [r7, #0]
  return(result);
 800a998:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d003      	beq.n	800a9a6 <osThreadYield+0x1a>
    stat = osErrorISR;
 800a99e:	f06f 0305 	mvn.w	r3, #5
 800a9a2:	607b      	str	r3, [r7, #4]
 800a9a4:	e009      	b.n	800a9ba <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800a9aa:	4b07      	ldr	r3, [pc, #28]	; (800a9c8 <osThreadYield+0x3c>)
 800a9ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800a9ba:	687b      	ldr	r3, [r7, #4]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	e000ed04 	.word	0xe000ed04

0800a9cc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b08a      	sub	sp, #40	; 0x28
 800a9d0:	af02      	add	r7, sp, #8
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9dc:	f3ef 8305 	mrs	r3, IPSR
 800a9e0:	613b      	str	r3, [r7, #16]
  return(result);
 800a9e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d175      	bne.n	800aad4 <osSemaphoreNew+0x108>
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d072      	beq.n	800aad4 <osSemaphoreNew+0x108>
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d86e      	bhi.n	800aad4 <osSemaphoreNew+0x108>
    mem = -1;
 800a9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d015      	beq.n	800aa2e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d006      	beq.n	800aa18 <osSemaphoreNew+0x4c>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	2b4f      	cmp	r3, #79	; 0x4f
 800aa10:	d902      	bls.n	800aa18 <osSemaphoreNew+0x4c>
        mem = 1;
 800aa12:	2301      	movs	r3, #1
 800aa14:	61bb      	str	r3, [r7, #24]
 800aa16:	e00c      	b.n	800aa32 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d108      	bne.n	800aa32 <osSemaphoreNew+0x66>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d104      	bne.n	800aa32 <osSemaphoreNew+0x66>
          mem = 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	61bb      	str	r3, [r7, #24]
 800aa2c:	e001      	b.n	800aa32 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa38:	d04c      	beq.n	800aad4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d128      	bne.n	800aa92 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d10a      	bne.n	800aa5c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	2203      	movs	r2, #3
 800aa4c:	9200      	str	r2, [sp, #0]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	2100      	movs	r1, #0
 800aa52:	2001      	movs	r0, #1
 800aa54:	f000 faac 	bl	800afb0 <xQueueGenericCreateStatic>
 800aa58:	61f8      	str	r0, [r7, #28]
 800aa5a:	e005      	b.n	800aa68 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800aa5c:	2203      	movs	r2, #3
 800aa5e:	2100      	movs	r1, #0
 800aa60:	2001      	movs	r0, #1
 800aa62:	f000 fb1d 	bl	800b0a0 <xQueueGenericCreate>
 800aa66:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d022      	beq.n	800aab4 <osSemaphoreNew+0xe8>
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d01f      	beq.n	800aab4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800aa74:	2300      	movs	r3, #0
 800aa76:	2200      	movs	r2, #0
 800aa78:	2100      	movs	r1, #0
 800aa7a:	69f8      	ldr	r0, [r7, #28]
 800aa7c:	f000 fbd8 	bl	800b230 <xQueueGenericSend>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d016      	beq.n	800aab4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800aa86:	69f8      	ldr	r0, [r7, #28]
 800aa88:	f000 fed8 	bl	800b83c <vQueueDelete>
            hSemaphore = NULL;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	61fb      	str	r3, [r7, #28]
 800aa90:	e010      	b.n	800aab4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d108      	bne.n	800aaaa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	68b9      	ldr	r1, [r7, #8]
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f000 fb5a 	bl	800b15a <xQueueCreateCountingSemaphoreStatic>
 800aaa6:	61f8      	str	r0, [r7, #28]
 800aaa8:	e004      	b.n	800aab4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800aaaa:	68b9      	ldr	r1, [r7, #8]
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f000 fb8b 	bl	800b1c8 <xQueueCreateCountingSemaphore>
 800aab2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00c      	beq.n	800aad4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d003      	beq.n	800aac8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	617b      	str	r3, [r7, #20]
 800aac6:	e001      	b.n	800aacc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800aac8:	2300      	movs	r3, #0
 800aaca:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800aacc:	6979      	ldr	r1, [r7, #20]
 800aace:	69f8      	ldr	r0, [r7, #28]
 800aad0:	f000 ffe8 	bl	800baa4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800aad4:	69fb      	ldr	r3, [r7, #28]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3720      	adds	r7, #32
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
	...

0800aae0 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d103      	bne.n	800aafe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800aaf6:	f06f 0303 	mvn.w	r3, #3
 800aafa:	617b      	str	r3, [r7, #20]
 800aafc:	e02c      	b.n	800ab58 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aafe:	f3ef 8305 	mrs	r3, IPSR
 800ab02:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab04:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d01a      	beq.n	800ab40 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ab0e:	f107 0308 	add.w	r3, r7, #8
 800ab12:	4619      	mov	r1, r3
 800ab14:	6938      	ldr	r0, [r7, #16]
 800ab16:	f000 fd24 	bl	800b562 <xQueueGiveFromISR>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d003      	beq.n	800ab28 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ab20:	f06f 0302 	mvn.w	r3, #2
 800ab24:	617b      	str	r3, [r7, #20]
 800ab26:	e017      	b.n	800ab58 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d014      	beq.n	800ab58 <osSemaphoreRelease+0x78>
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	; (800ab64 <osSemaphoreRelease+0x84>)
 800ab30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab34:	601a      	str	r2, [r3, #0]
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	f3bf 8f6f 	isb	sy
 800ab3e:	e00b      	b.n	800ab58 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ab40:	2300      	movs	r3, #0
 800ab42:	2200      	movs	r2, #0
 800ab44:	2100      	movs	r1, #0
 800ab46:	6938      	ldr	r0, [r7, #16]
 800ab48:	f000 fb72 	bl	800b230 <xQueueGenericSend>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d002      	beq.n	800ab58 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ab52:	f06f 0302 	mvn.w	r3, #2
 800ab56:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ab58:	697b      	ldr	r3, [r7, #20]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	e000ed04 	.word	0xe000ed04

0800ab68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b08a      	sub	sp, #40	; 0x28
 800ab6c:	af02      	add	r7, sp, #8
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ab74:	2300      	movs	r3, #0
 800ab76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab78:	f3ef 8305 	mrs	r3, IPSR
 800ab7c:	613b      	str	r3, [r7, #16]
  return(result);
 800ab7e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d15f      	bne.n	800ac44 <osMessageQueueNew+0xdc>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d05c      	beq.n	800ac44 <osMessageQueueNew+0xdc>
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d059      	beq.n	800ac44 <osMessageQueueNew+0xdc>
    mem = -1;
 800ab90:	f04f 33ff 	mov.w	r3, #4294967295
 800ab94:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d029      	beq.n	800abf0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d012      	beq.n	800abca <osMessageQueueNew+0x62>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	2b4f      	cmp	r3, #79	; 0x4f
 800abaa:	d90e      	bls.n	800abca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00a      	beq.n	800abca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	695a      	ldr	r2, [r3, #20]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	68b9      	ldr	r1, [r7, #8]
 800abbc:	fb01 f303 	mul.w	r3, r1, r3
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d302      	bcc.n	800abca <osMessageQueueNew+0x62>
        mem = 1;
 800abc4:	2301      	movs	r3, #1
 800abc6:	61bb      	str	r3, [r7, #24]
 800abc8:	e014      	b.n	800abf4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d110      	bne.n	800abf4 <osMessageQueueNew+0x8c>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10c      	bne.n	800abf4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d108      	bne.n	800abf4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d104      	bne.n	800abf4 <osMessageQueueNew+0x8c>
          mem = 0;
 800abea:	2300      	movs	r3, #0
 800abec:	61bb      	str	r3, [r7, #24]
 800abee:	e001      	b.n	800abf4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d10b      	bne.n	800ac12 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	691a      	ldr	r2, [r3, #16]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	2100      	movs	r1, #0
 800ac04:	9100      	str	r1, [sp, #0]
 800ac06:	68b9      	ldr	r1, [r7, #8]
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f000 f9d1 	bl	800afb0 <xQueueGenericCreateStatic>
 800ac0e:	61f8      	str	r0, [r7, #28]
 800ac10:	e008      	b.n	800ac24 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d105      	bne.n	800ac24 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ac18:	2200      	movs	r2, #0
 800ac1a:	68b9      	ldr	r1, [r7, #8]
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f000 fa3f 	bl	800b0a0 <xQueueGenericCreate>
 800ac22:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00c      	beq.n	800ac44 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	617b      	str	r3, [r7, #20]
 800ac36:	e001      	b.n	800ac3c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ac3c:	6979      	ldr	r1, [r7, #20]
 800ac3e:	69f8      	ldr	r0, [r7, #28]
 800ac40:	f000 ff30 	bl	800baa4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ac44:	69fb      	ldr	r3, [r7, #28]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3720      	adds	r7, #32
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b088      	sub	sp, #32
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	603b      	str	r3, [r7, #0]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ac64:	2300      	movs	r3, #0
 800ac66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac68:	f3ef 8305 	mrs	r3, IPSR
 800ac6c:	617b      	str	r3, [r7, #20]
  return(result);
 800ac6e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d028      	beq.n	800acc6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d005      	beq.n	800ac86 <osMessageQueuePut+0x36>
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <osMessageQueuePut+0x36>
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d003      	beq.n	800ac8e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ac86:	f06f 0303 	mvn.w	r3, #3
 800ac8a:	61fb      	str	r3, [r7, #28]
 800ac8c:	e038      	b.n	800ad00 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ac92:	f107 0210 	add.w	r2, r7, #16
 800ac96:	2300      	movs	r3, #0
 800ac98:	68b9      	ldr	r1, [r7, #8]
 800ac9a:	69b8      	ldr	r0, [r7, #24]
 800ac9c:	f000 fbc6 	bl	800b42c <xQueueGenericSendFromISR>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d003      	beq.n	800acae <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800aca6:	f06f 0302 	mvn.w	r3, #2
 800acaa:	61fb      	str	r3, [r7, #28]
 800acac:	e028      	b.n	800ad00 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d025      	beq.n	800ad00 <osMessageQueuePut+0xb0>
 800acb4:	4b15      	ldr	r3, [pc, #84]	; (800ad0c <osMessageQueuePut+0xbc>)
 800acb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	e01c      	b.n	800ad00 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <osMessageQueuePut+0x82>
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d103      	bne.n	800acda <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800acd2:	f06f 0303 	mvn.w	r3, #3
 800acd6:	61fb      	str	r3, [r7, #28]
 800acd8:	e012      	b.n	800ad00 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800acda:	2300      	movs	r3, #0
 800acdc:	683a      	ldr	r2, [r7, #0]
 800acde:	68b9      	ldr	r1, [r7, #8]
 800ace0:	69b8      	ldr	r0, [r7, #24]
 800ace2:	f000 faa5 	bl	800b230 <xQueueGenericSend>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d009      	beq.n	800ad00 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d003      	beq.n	800acfa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800acf2:	f06f 0301 	mvn.w	r3, #1
 800acf6:	61fb      	str	r3, [r7, #28]
 800acf8:	e002      	b.n	800ad00 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800acfa:	f06f 0302 	mvn.w	r3, #2
 800acfe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ad00:	69fb      	ldr	r3, [r7, #28]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3720      	adds	r7, #32
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	e000ed04 	.word	0xe000ed04

0800ad10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4a07      	ldr	r2, [pc, #28]	; (800ad3c <vApplicationGetIdleTaskMemory+0x2c>)
 800ad20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	4a06      	ldr	r2, [pc, #24]	; (800ad40 <vApplicationGetIdleTaskMemory+0x30>)
 800ad26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2280      	movs	r2, #128	; 0x80
 800ad2c:	601a      	str	r2, [r3, #0]
}
 800ad2e:	bf00      	nop
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	200006a4 	.word	0x200006a4
 800ad40:	20000760 	.word	0x20000760

0800ad44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4a07      	ldr	r2, [pc, #28]	; (800ad70 <vApplicationGetTimerTaskMemory+0x2c>)
 800ad54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	4a06      	ldr	r2, [pc, #24]	; (800ad74 <vApplicationGetTimerTaskMemory+0x30>)
 800ad5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad62:	601a      	str	r2, [r3, #0]
}
 800ad64:	bf00      	nop
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	20000960 	.word	0x20000960
 800ad74:	20000a1c 	.word	0x20000a1c

0800ad78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f103 0208 	add.w	r2, r3, #8
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f103 0208 	add.w	r2, r3, #8
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f103 0208 	add.w	r2, r3, #8
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800adc6:	bf00      	nop
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800add2:	b480      	push	{r7}
 800add4:	b085      	sub	sp, #20
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	689a      	ldr	r2, [r3, #8]
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	601a      	str	r2, [r3, #0]
}
 800ae0e:	bf00      	nop
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b085      	sub	sp, #20
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae30:	d103      	bne.n	800ae3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	e00c      	b.n	800ae54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	3308      	adds	r3, #8
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	e002      	b.n	800ae48 <vListInsert+0x2e>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	60fb      	str	r3, [r7, #12]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d2f6      	bcs.n	800ae42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	1c5a      	adds	r2, r3, #1
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	601a      	str	r2, [r3, #0]
}
 800ae80:	bf00      	nop
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	6892      	ldr	r2, [r2, #8]
 800aea2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	6852      	ldr	r2, [r2, #4]
 800aeac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d103      	bne.n	800aec0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	689a      	ldr	r2, [r3, #8]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	1e5a      	subs	r2, r3, #1
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3714      	adds	r7, #20
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10a      	bne.n	800af0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800af06:	bf00      	nop
 800af08:	e7fe      	b.n	800af08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800af0a:	f002 f9c3 	bl	800d294 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af16:	68f9      	ldr	r1, [r7, #12]
 800af18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af1a:	fb01 f303 	mul.w	r3, r1, r3
 800af1e:	441a      	add	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af3a:	3b01      	subs	r3, #1
 800af3c:	68f9      	ldr	r1, [r7, #12]
 800af3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af40:	fb01 f303 	mul.w	r3, r1, r3
 800af44:	441a      	add	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	22ff      	movs	r2, #255	; 0xff
 800af4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	22ff      	movs	r2, #255	; 0xff
 800af56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d114      	bne.n	800af8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d01a      	beq.n	800af9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	3310      	adds	r3, #16
 800af6c:	4618      	mov	r0, r3
 800af6e:	f001 fa73 	bl	800c458 <xTaskRemoveFromEventList>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d012      	beq.n	800af9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af78:	4b0c      	ldr	r3, [pc, #48]	; (800afac <xQueueGenericReset+0xcc>)
 800af7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af7e:	601a      	str	r2, [r3, #0]
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	e009      	b.n	800af9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3310      	adds	r3, #16
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff fef2 	bl	800ad78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	3324      	adds	r3, #36	; 0x24
 800af98:	4618      	mov	r0, r3
 800af9a:	f7ff feed 	bl	800ad78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af9e:	f002 f9a9 	bl	800d2f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800afa2:	2301      	movs	r3, #1
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	e000ed04 	.word	0xe000ed04

0800afb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b08e      	sub	sp, #56	; 0x38
 800afb4:	af02      	add	r7, sp, #8
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10a      	bne.n	800afda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800afd6:	bf00      	nop
 800afd8:	e7fe      	b.n	800afd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10a      	bne.n	800aff6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aff2:	bf00      	nop
 800aff4:	e7fe      	b.n	800aff4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <xQueueGenericCreateStatic+0x52>
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <xQueueGenericCreateStatic+0x56>
 800b002:	2301      	movs	r3, #1
 800b004:	e000      	b.n	800b008 <xQueueGenericCreateStatic+0x58>
 800b006:	2300      	movs	r3, #0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10a      	bne.n	800b022 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	623b      	str	r3, [r7, #32]
}
 800b01e:	bf00      	nop
 800b020:	e7fe      	b.n	800b020 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d102      	bne.n	800b02e <xQueueGenericCreateStatic+0x7e>
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <xQueueGenericCreateStatic+0x82>
 800b02e:	2301      	movs	r3, #1
 800b030:	e000      	b.n	800b034 <xQueueGenericCreateStatic+0x84>
 800b032:	2300      	movs	r3, #0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10a      	bne.n	800b04e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	61fb      	str	r3, [r7, #28]
}
 800b04a:	bf00      	nop
 800b04c:	e7fe      	b.n	800b04c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b04e:	2350      	movs	r3, #80	; 0x50
 800b050:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	2b50      	cmp	r3, #80	; 0x50
 800b056:	d00a      	beq.n	800b06e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	61bb      	str	r3, [r7, #24]
}
 800b06a:	bf00      	nop
 800b06c:	e7fe      	b.n	800b06c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b06e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00d      	beq.n	800b096 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07c:	2201      	movs	r2, #1
 800b07e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b082:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	4613      	mov	r3, r2
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	68b9      	ldr	r1, [r7, #8]
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f000 f83f 	bl	800b114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b098:	4618      	mov	r0, r3
 800b09a:	3730      	adds	r7, #48	; 0x30
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b08a      	sub	sp, #40	; 0x28
 800b0a4:	af02      	add	r7, sp, #8
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10a      	bne.n	800b0ca <xQueueGenericCreate+0x2a>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	613b      	str	r3, [r7, #16]
}
 800b0c6:	bf00      	nop
 800b0c8:	e7fe      	b.n	800b0c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	fb02 f303 	mul.w	r3, r2, r3
 800b0d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	3350      	adds	r3, #80	; 0x50
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f002 f9fd 	bl	800d4d8 <pvPortMalloc>
 800b0de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d011      	beq.n	800b10a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	3350      	adds	r3, #80	; 0x50
 800b0ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b0f8:	79fa      	ldrb	r2, [r7, #7]
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	4613      	mov	r3, r2
 800b100:	697a      	ldr	r2, [r7, #20]
 800b102:	68b9      	ldr	r1, [r7, #8]
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f000 f805 	bl	800b114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b10a:	69bb      	ldr	r3, [r7, #24]
	}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3720      	adds	r7, #32
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
 800b120:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d103      	bne.n	800b130 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	e002      	b.n	800b136 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b142:	2101      	movs	r1, #1
 800b144:	69b8      	ldr	r0, [r7, #24]
 800b146:	f7ff fecb 	bl	800aee0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	78fa      	ldrb	r2, [r7, #3]
 800b14e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b152:	bf00      	nop
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b08a      	sub	sp, #40	; 0x28
 800b15e:	af02      	add	r7, sp, #8
 800b160:	60f8      	str	r0, [r7, #12]
 800b162:	60b9      	str	r1, [r7, #8]
 800b164:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10a      	bne.n	800b182 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	61bb      	str	r3, [r7, #24]
}
 800b17e:	bf00      	nop
 800b180:	e7fe      	b.n	800b180 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	429a      	cmp	r2, r3
 800b188:	d90a      	bls.n	800b1a0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	617b      	str	r3, [r7, #20]
}
 800b19c:	bf00      	nop
 800b19e:	e7fe      	b.n	800b19e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7ff ff00 	bl	800afb0 <xQueueGenericCreateStatic>
 800b1b0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b1be:	69fb      	ldr	r3, [r7, #28]
	}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3720      	adds	r7, #32
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10a      	bne.n	800b1ee <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	613b      	str	r3, [r7, #16]
}
 800b1ea:	bf00      	nop
 800b1ec:	e7fe      	b.n	800b1ec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d90a      	bls.n	800b20c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	60fb      	str	r3, [r7, #12]
}
 800b208:	bf00      	nop
 800b20a:	e7fe      	b.n	800b20a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b20c:	2202      	movs	r2, #2
 800b20e:	2100      	movs	r1, #0
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff ff45 	bl	800b0a0 <xQueueGenericCreate>
 800b216:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d002      	beq.n	800b224 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b224:	697b      	ldr	r3, [r7, #20]
	}
 800b226:	4618      	mov	r0, r3
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b08e      	sub	sp, #56	; 0x38
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b23e:	2300      	movs	r3, #0
 800b240:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10a      	bne.n	800b262 <xQueueGenericSend+0x32>
	__asm volatile
 800b24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b25e:	bf00      	nop
 800b260:	e7fe      	b.n	800b260 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d103      	bne.n	800b270 <xQueueGenericSend+0x40>
 800b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <xQueueGenericSend+0x44>
 800b270:	2301      	movs	r3, #1
 800b272:	e000      	b.n	800b276 <xQueueGenericSend+0x46>
 800b274:	2300      	movs	r3, #0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10a      	bne.n	800b290 <xQueueGenericSend+0x60>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b28c:	bf00      	nop
 800b28e:	e7fe      	b.n	800b28e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	2b02      	cmp	r3, #2
 800b294:	d103      	bne.n	800b29e <xQueueGenericSend+0x6e>
 800b296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d101      	bne.n	800b2a2 <xQueueGenericSend+0x72>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e000      	b.n	800b2a4 <xQueueGenericSend+0x74>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10a      	bne.n	800b2be <xQueueGenericSend+0x8e>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ac:	f383 8811 	msr	BASEPRI, r3
 800b2b0:	f3bf 8f6f 	isb	sy
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	623b      	str	r3, [r7, #32]
}
 800b2ba:	bf00      	nop
 800b2bc:	e7fe      	b.n	800b2bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2be:	f001 fa8d 	bl	800c7dc <xTaskGetSchedulerState>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d102      	bne.n	800b2ce <xQueueGenericSend+0x9e>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d101      	bne.n	800b2d2 <xQueueGenericSend+0xa2>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e000      	b.n	800b2d4 <xQueueGenericSend+0xa4>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10a      	bne.n	800b2ee <xQueueGenericSend+0xbe>
	__asm volatile
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	61fb      	str	r3, [r7, #28]
}
 800b2ea:	bf00      	nop
 800b2ec:	e7fe      	b.n	800b2ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2ee:	f001 ffd1 	bl	800d294 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d302      	bcc.n	800b304 <xQueueGenericSend+0xd4>
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b02      	cmp	r3, #2
 800b302:	d129      	bne.n	800b358 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b304:	683a      	ldr	r2, [r7, #0]
 800b306:	68b9      	ldr	r1, [r7, #8]
 800b308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b30a:	f000 faba 	bl	800b882 <prvCopyDataToQueue>
 800b30e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b314:	2b00      	cmp	r3, #0
 800b316:	d010      	beq.n	800b33a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31a:	3324      	adds	r3, #36	; 0x24
 800b31c:	4618      	mov	r0, r3
 800b31e:	f001 f89b 	bl	800c458 <xTaskRemoveFromEventList>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d013      	beq.n	800b350 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b328:	4b3f      	ldr	r3, [pc, #252]	; (800b428 <xQueueGenericSend+0x1f8>)
 800b32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b32e:	601a      	str	r2, [r3, #0]
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	e00a      	b.n	800b350 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d007      	beq.n	800b350 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b340:	4b39      	ldr	r3, [pc, #228]	; (800b428 <xQueueGenericSend+0x1f8>)
 800b342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b346:	601a      	str	r2, [r3, #0]
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b350:	f001 ffd0 	bl	800d2f4 <vPortExitCritical>
				return pdPASS;
 800b354:	2301      	movs	r3, #1
 800b356:	e063      	b.n	800b420 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d103      	bne.n	800b366 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b35e:	f001 ffc9 	bl	800d2f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b362:	2300      	movs	r3, #0
 800b364:	e05c      	b.n	800b420 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d106      	bne.n	800b37a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b36c:	f107 0314 	add.w	r3, r7, #20
 800b370:	4618      	mov	r0, r3
 800b372:	f001 f8d5 	bl	800c520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b376:	2301      	movs	r3, #1
 800b378:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b37a:	f001 ffbb 	bl	800d2f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b37e:	f000 fe41 	bl	800c004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b382:	f001 ff87 	bl	800d294 <vPortEnterCritical>
 800b386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b38c:	b25b      	sxtb	r3, r3
 800b38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b392:	d103      	bne.n	800b39c <xQueueGenericSend+0x16c>
 800b394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b396:	2200      	movs	r2, #0
 800b398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3a2:	b25b      	sxtb	r3, r3
 800b3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a8:	d103      	bne.n	800b3b2 <xQueueGenericSend+0x182>
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3b2:	f001 ff9f 	bl	800d2f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3b6:	1d3a      	adds	r2, r7, #4
 800b3b8:	f107 0314 	add.w	r3, r7, #20
 800b3bc:	4611      	mov	r1, r2
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f001 f8c4 	bl	800c54c <xTaskCheckForTimeOut>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d124      	bne.n	800b414 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b3ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3cc:	f000 fb51 	bl	800ba72 <prvIsQueueFull>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d018      	beq.n	800b408 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	3310      	adds	r3, #16
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	4611      	mov	r1, r2
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 ffea 	bl	800c3b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b3e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3e6:	f000 fadc 	bl	800b9a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b3ea:	f000 fe19 	bl	800c020 <xTaskResumeAll>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f47f af7c 	bne.w	800b2ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b3f6:	4b0c      	ldr	r3, [pc, #48]	; (800b428 <xQueueGenericSend+0x1f8>)
 800b3f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	e772      	b.n	800b2ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b40a:	f000 faca 	bl	800b9a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b40e:	f000 fe07 	bl	800c020 <xTaskResumeAll>
 800b412:	e76c      	b.n	800b2ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b416:	f000 fac4 	bl	800b9a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b41a:	f000 fe01 	bl	800c020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b41e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b420:	4618      	mov	r0, r3
 800b422:	3738      	adds	r7, #56	; 0x38
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	e000ed04 	.word	0xe000ed04

0800b42c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b090      	sub	sp, #64	; 0x40
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
 800b438:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10a      	bne.n	800b45a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b456:	bf00      	nop
 800b458:	e7fe      	b.n	800b458 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d103      	bne.n	800b468 <xQueueGenericSendFromISR+0x3c>
 800b460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b464:	2b00      	cmp	r3, #0
 800b466:	d101      	bne.n	800b46c <xQueueGenericSendFromISR+0x40>
 800b468:	2301      	movs	r3, #1
 800b46a:	e000      	b.n	800b46e <xQueueGenericSendFromISR+0x42>
 800b46c:	2300      	movs	r3, #0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10a      	bne.n	800b488 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b484:	bf00      	nop
 800b486:	e7fe      	b.n	800b486 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d103      	bne.n	800b496 <xQueueGenericSendFromISR+0x6a>
 800b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b492:	2b01      	cmp	r3, #1
 800b494:	d101      	bne.n	800b49a <xQueueGenericSendFromISR+0x6e>
 800b496:	2301      	movs	r3, #1
 800b498:	e000      	b.n	800b49c <xQueueGenericSendFromISR+0x70>
 800b49a:	2300      	movs	r3, #0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10a      	bne.n	800b4b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	623b      	str	r3, [r7, #32]
}
 800b4b2:	bf00      	nop
 800b4b4:	e7fe      	b.n	800b4b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4b6:	f001 ffcf 	bl	800d458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b4ba:	f3ef 8211 	mrs	r2, BASEPRI
 800b4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	61fa      	str	r2, [r7, #28]
 800b4d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b4d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d302      	bcc.n	800b4e8 <xQueueGenericSendFromISR+0xbc>
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	d12f      	bne.n	800b548 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4f8:	683a      	ldr	r2, [r7, #0]
 800b4fa:	68b9      	ldr	r1, [r7, #8]
 800b4fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4fe:	f000 f9c0 	bl	800b882 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b502:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b50a:	d112      	bne.n	800b532 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b510:	2b00      	cmp	r3, #0
 800b512:	d016      	beq.n	800b542 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b516:	3324      	adds	r3, #36	; 0x24
 800b518:	4618      	mov	r0, r3
 800b51a:	f000 ff9d 	bl	800c458 <xTaskRemoveFromEventList>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00e      	beq.n	800b542 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00b      	beq.n	800b542 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2201      	movs	r2, #1
 800b52e:	601a      	str	r2, [r3, #0]
 800b530:	e007      	b.n	800b542 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b532:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b536:	3301      	adds	r3, #1
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	b25a      	sxtb	r2, r3
 800b53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b542:	2301      	movs	r3, #1
 800b544:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b546:	e001      	b.n	800b54c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b548:	2300      	movs	r3, #0
 800b54a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b54e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b556:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3740      	adds	r7, #64	; 0x40
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b08e      	sub	sp, #56	; 0x38
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b572:	2b00      	cmp	r3, #0
 800b574:	d10a      	bne.n	800b58c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	623b      	str	r3, [r7, #32]
}
 800b588:	bf00      	nop
 800b58a:	e7fe      	b.n	800b58a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00a      	beq.n	800b5aa <xQueueGiveFromISR+0x48>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	61fb      	str	r3, [r7, #28]
}
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d103      	bne.n	800b5ba <xQueueGiveFromISR+0x58>
 800b5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d101      	bne.n	800b5be <xQueueGiveFromISR+0x5c>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e000      	b.n	800b5c0 <xQueueGiveFromISR+0x5e>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10a      	bne.n	800b5da <xQueueGiveFromISR+0x78>
	__asm volatile
 800b5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c8:	f383 8811 	msr	BASEPRI, r3
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	61bb      	str	r3, [r7, #24]
}
 800b5d6:	bf00      	nop
 800b5d8:	e7fe      	b.n	800b5d8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b5da:	f001 ff3d 	bl	800d458 <vPortValidateInterruptPriority>
	__asm volatile
 800b5de:	f3ef 8211 	mrs	r2, BASEPRI
 800b5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	617a      	str	r2, [r7, #20]
 800b5f4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b5f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b606:	429a      	cmp	r2, r3
 800b608:	d22b      	bcs.n	800b662 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b616:	1c5a      	adds	r2, r3, #1
 800b618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b61c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b624:	d112      	bne.n	800b64c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d016      	beq.n	800b65c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b630:	3324      	adds	r3, #36	; 0x24
 800b632:	4618      	mov	r0, r3
 800b634:	f000 ff10 	bl	800c458 <xTaskRemoveFromEventList>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00e      	beq.n	800b65c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00b      	beq.n	800b65c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	2201      	movs	r2, #1
 800b648:	601a      	str	r2, [r3, #0]
 800b64a:	e007      	b.n	800b65c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b650:	3301      	adds	r3, #1
 800b652:	b2db      	uxtb	r3, r3
 800b654:	b25a      	sxtb	r2, r3
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b65c:	2301      	movs	r3, #1
 800b65e:	637b      	str	r3, [r7, #52]	; 0x34
 800b660:	e001      	b.n	800b666 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b662:	2300      	movs	r3, #0
 800b664:	637b      	str	r3, [r7, #52]	; 0x34
 800b666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b668:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f383 8811 	msr	BASEPRI, r3
}
 800b670:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b674:	4618      	mov	r0, r3
 800b676:	3738      	adds	r7, #56	; 0x38
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b08c      	sub	sp, #48	; 0x30
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b688:	2300      	movs	r3, #0
 800b68a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10a      	bne.n	800b6ac <xQueueReceive+0x30>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	623b      	str	r3, [r7, #32]
}
 800b6a8:	bf00      	nop
 800b6aa:	e7fe      	b.n	800b6aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d103      	bne.n	800b6ba <xQueueReceive+0x3e>
 800b6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d101      	bne.n	800b6be <xQueueReceive+0x42>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e000      	b.n	800b6c0 <xQueueReceive+0x44>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10a      	bne.n	800b6da <xQueueReceive+0x5e>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	61fb      	str	r3, [r7, #28]
}
 800b6d6:	bf00      	nop
 800b6d8:	e7fe      	b.n	800b6d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6da:	f001 f87f 	bl	800c7dc <xTaskGetSchedulerState>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d102      	bne.n	800b6ea <xQueueReceive+0x6e>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <xQueueReceive+0x72>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e000      	b.n	800b6f0 <xQueueReceive+0x74>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10a      	bne.n	800b70a <xQueueReceive+0x8e>
	__asm volatile
 800b6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	61bb      	str	r3, [r7, #24]
}
 800b706:	bf00      	nop
 800b708:	e7fe      	b.n	800b708 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b70a:	f001 fdc3 	bl	800d294 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b712:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	2b00      	cmp	r3, #0
 800b718:	d01f      	beq.n	800b75a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b71a:	68b9      	ldr	r1, [r7, #8]
 800b71c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b71e:	f000 f91a 	bl	800b956 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b724:	1e5a      	subs	r2, r3, #1
 800b726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b728:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00f      	beq.n	800b752 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b734:	3310      	adds	r3, #16
 800b736:	4618      	mov	r0, r3
 800b738:	f000 fe8e 	bl	800c458 <xTaskRemoveFromEventList>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d007      	beq.n	800b752 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b742:	4b3d      	ldr	r3, [pc, #244]	; (800b838 <xQueueReceive+0x1bc>)
 800b744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b748:	601a      	str	r2, [r3, #0]
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b752:	f001 fdcf 	bl	800d2f4 <vPortExitCritical>
				return pdPASS;
 800b756:	2301      	movs	r3, #1
 800b758:	e069      	b.n	800b82e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d103      	bne.n	800b768 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b760:	f001 fdc8 	bl	800d2f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b764:	2300      	movs	r3, #0
 800b766:	e062      	b.n	800b82e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d106      	bne.n	800b77c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b76e:	f107 0310 	add.w	r3, r7, #16
 800b772:	4618      	mov	r0, r3
 800b774:	f000 fed4 	bl	800c520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b778:	2301      	movs	r3, #1
 800b77a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b77c:	f001 fdba 	bl	800d2f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b780:	f000 fc40 	bl	800c004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b784:	f001 fd86 	bl	800d294 <vPortEnterCritical>
 800b788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b78e:	b25b      	sxtb	r3, r3
 800b790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b794:	d103      	bne.n	800b79e <xQueueReceive+0x122>
 800b796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7a4:	b25b      	sxtb	r3, r3
 800b7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7aa:	d103      	bne.n	800b7b4 <xQueueReceive+0x138>
 800b7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7b4:	f001 fd9e 	bl	800d2f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b7b8:	1d3a      	adds	r2, r7, #4
 800b7ba:	f107 0310 	add.w	r3, r7, #16
 800b7be:	4611      	mov	r1, r2
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f000 fec3 	bl	800c54c <xTaskCheckForTimeOut>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d123      	bne.n	800b814 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7ce:	f000 f93a 	bl	800ba46 <prvIsQueueEmpty>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d017      	beq.n	800b808 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7da:	3324      	adds	r3, #36	; 0x24
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	4611      	mov	r1, r2
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f000 fde9 	bl	800c3b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b7e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7e8:	f000 f8db 	bl	800b9a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b7ec:	f000 fc18 	bl	800c020 <xTaskResumeAll>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d189      	bne.n	800b70a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b7f6:	4b10      	ldr	r3, [pc, #64]	; (800b838 <xQueueReceive+0x1bc>)
 800b7f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fc:	601a      	str	r2, [r3, #0]
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	e780      	b.n	800b70a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b80a:	f000 f8ca 	bl	800b9a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b80e:	f000 fc07 	bl	800c020 <xTaskResumeAll>
 800b812:	e77a      	b.n	800b70a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b816:	f000 f8c4 	bl	800b9a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b81a:	f000 fc01 	bl	800c020 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b81e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b820:	f000 f911 	bl	800ba46 <prvIsQueueEmpty>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	f43f af6f 	beq.w	800b70a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b82c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3730      	adds	r7, #48	; 0x30
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	e000ed04 	.word	0xe000ed04

0800b83c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10a      	bne.n	800b864 <vQueueDelete+0x28>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	60bb      	str	r3, [r7, #8]
}
 800b860:	bf00      	nop
 800b862:	e7fe      	b.n	800b862 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f000 f947 	bl	800baf8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b870:	2b00      	cmp	r3, #0
 800b872:	d102      	bne.n	800b87a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f001 fefb 	bl	800d670 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b87a:	bf00      	nop
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b086      	sub	sp, #24
 800b886:	af00      	add	r7, sp, #0
 800b888:	60f8      	str	r0, [r7, #12]
 800b88a:	60b9      	str	r1, [r7, #8]
 800b88c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b88e:	2300      	movs	r3, #0
 800b890:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b896:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10d      	bne.n	800b8bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d14d      	bne.n	800b944 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f000 ffb3 	bl	800c818 <xTaskPriorityDisinherit>
 800b8b2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	609a      	str	r2, [r3, #8]
 800b8ba:	e043      	b.n	800b944 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d119      	bne.n	800b8f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6858      	ldr	r0, [r3, #4]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	68b9      	ldr	r1, [r7, #8]
 800b8ce:	f002 fd79 	bl	800e3c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8da:	441a      	add	r2, r3
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	685a      	ldr	r2, [r3, #4]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d32b      	bcc.n	800b944 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	605a      	str	r2, [r3, #4]
 800b8f4:	e026      	b.n	800b944 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	68d8      	ldr	r0, [r3, #12]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fe:	461a      	mov	r2, r3
 800b900:	68b9      	ldr	r1, [r7, #8]
 800b902:	f002 fd5f 	bl	800e3c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	68da      	ldr	r2, [r3, #12]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90e:	425b      	negs	r3, r3
 800b910:	441a      	add	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	68da      	ldr	r2, [r3, #12]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d207      	bcs.n	800b932 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	689a      	ldr	r2, [r3, #8]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92a:	425b      	negs	r3, r3
 800b92c:	441a      	add	r2, r3
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b02      	cmp	r3, #2
 800b936:	d105      	bne.n	800b944 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d002      	beq.n	800b944 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	3b01      	subs	r3, #1
 800b942:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b94c:	697b      	ldr	r3, [r7, #20]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3718      	adds	r7, #24
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b082      	sub	sp, #8
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b964:	2b00      	cmp	r3, #0
 800b966:	d018      	beq.n	800b99a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68da      	ldr	r2, [r3, #12]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b970:	441a      	add	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	68da      	ldr	r2, [r3, #12]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d303      	bcc.n	800b98a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	68d9      	ldr	r1, [r3, #12]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b992:	461a      	mov	r2, r3
 800b994:	6838      	ldr	r0, [r7, #0]
 800b996:	f002 fd15 	bl	800e3c4 <memcpy>
	}
}
 800b99a:	bf00      	nop
 800b99c:	3708      	adds	r7, #8
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b9aa:	f001 fc73 	bl	800d294 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9b6:	e011      	b.n	800b9dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d012      	beq.n	800b9e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	3324      	adds	r3, #36	; 0x24
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f000 fd47 	bl	800c458 <xTaskRemoveFromEventList>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d001      	beq.n	800b9d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b9d0:	f000 fe1e 	bl	800c610 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b9d4:	7bfb      	ldrb	r3, [r7, #15]
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	dce9      	bgt.n	800b9b8 <prvUnlockQueue+0x16>
 800b9e4:	e000      	b.n	800b9e8 <prvUnlockQueue+0x46>
					break;
 800b9e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	22ff      	movs	r2, #255	; 0xff
 800b9ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b9f0:	f001 fc80 	bl	800d2f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b9f4:	f001 fc4e 	bl	800d294 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba00:	e011      	b.n	800ba26 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d012      	beq.n	800ba30 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	3310      	adds	r3, #16
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f000 fd22 	bl	800c458 <xTaskRemoveFromEventList>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba1a:	f000 fdf9 	bl	800c610 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ba1e:	7bbb      	ldrb	r3, [r7, #14]
 800ba20:	3b01      	subs	r3, #1
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	dce9      	bgt.n	800ba02 <prvUnlockQueue+0x60>
 800ba2e:	e000      	b.n	800ba32 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ba30:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	22ff      	movs	r2, #255	; 0xff
 800ba36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ba3a:	f001 fc5b 	bl	800d2f4 <vPortExitCritical>
}
 800ba3e:	bf00      	nop
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b084      	sub	sp, #16
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba4e:	f001 fc21 	bl	800d294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d102      	bne.n	800ba60 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	60fb      	str	r3, [r7, #12]
 800ba5e:	e001      	b.n	800ba64 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba60:	2300      	movs	r3, #0
 800ba62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba64:	f001 fc46 	bl	800d2f4 <vPortExitCritical>

	return xReturn;
 800ba68:	68fb      	ldr	r3, [r7, #12]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b084      	sub	sp, #16
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba7a:	f001 fc0b 	bl	800d294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d102      	bne.n	800ba90 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	60fb      	str	r3, [r7, #12]
 800ba8e:	e001      	b.n	800ba94 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ba90:	2300      	movs	r3, #0
 800ba92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba94:	f001 fc2e 	bl	800d2f4 <vPortExitCritical>

	return xReturn;
 800ba98:	68fb      	ldr	r3, [r7, #12]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
	...

0800baa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800baae:	2300      	movs	r3, #0
 800bab0:	60fb      	str	r3, [r7, #12]
 800bab2:	e014      	b.n	800bade <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bab4:	4a0f      	ldr	r2, [pc, #60]	; (800baf4 <vQueueAddToRegistry+0x50>)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d10b      	bne.n	800bad8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bac0:	490c      	ldr	r1, [pc, #48]	; (800baf4 <vQueueAddToRegistry+0x50>)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800baca:	4a0a      	ldr	r2, [pc, #40]	; (800baf4 <vQueueAddToRegistry+0x50>)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	00db      	lsls	r3, r3, #3
 800bad0:	4413      	add	r3, r2
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bad6:	e006      	b.n	800bae6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	3301      	adds	r3, #1
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2b07      	cmp	r3, #7
 800bae2:	d9e7      	bls.n	800bab4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bae4:	bf00      	nop
 800bae6:	bf00      	nop
 800bae8:	3714      	adds	r7, #20
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	20000e1c 	.word	0x20000e1c

0800baf8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb00:	2300      	movs	r3, #0
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	e016      	b.n	800bb34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bb06:	4a10      	ldr	r2, [pc, #64]	; (800bb48 <vQueueUnregisterQueue+0x50>)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	00db      	lsls	r3, r3, #3
 800bb0c:	4413      	add	r3, r2
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d10b      	bne.n	800bb2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bb16:	4a0c      	ldr	r2, [pc, #48]	; (800bb48 <vQueueUnregisterQueue+0x50>)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bb20:	4a09      	ldr	r2, [pc, #36]	; (800bb48 <vQueueUnregisterQueue+0x50>)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	00db      	lsls	r3, r3, #3
 800bb26:	4413      	add	r3, r2
 800bb28:	2200      	movs	r2, #0
 800bb2a:	605a      	str	r2, [r3, #4]
				break;
 800bb2c:	e006      	b.n	800bb3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	3301      	adds	r3, #1
 800bb32:	60fb      	str	r3, [r7, #12]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2b07      	cmp	r3, #7
 800bb38:	d9e5      	bls.n	800bb06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bb3a:	bf00      	nop
 800bb3c:	bf00      	nop
 800bb3e:	3714      	adds	r7, #20
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr
 800bb48:	20000e1c 	.word	0x20000e1c

0800bb4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bb5c:	f001 fb9a 	bl	800d294 <vPortEnterCritical>
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb66:	b25b      	sxtb	r3, r3
 800bb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6c:	d103      	bne.n	800bb76 <vQueueWaitForMessageRestricted+0x2a>
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb7c:	b25b      	sxtb	r3, r3
 800bb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb82:	d103      	bne.n	800bb8c <vQueueWaitForMessageRestricted+0x40>
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb8c:	f001 fbb2 	bl	800d2f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d106      	bne.n	800bba6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	3324      	adds	r3, #36	; 0x24
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	68b9      	ldr	r1, [r7, #8]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f000 fc2d 	bl	800c400 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bba6:	6978      	ldr	r0, [r7, #20]
 800bba8:	f7ff fefb 	bl	800b9a2 <prvUnlockQueue>
	}
 800bbac:	bf00      	nop
 800bbae:	3718      	adds	r7, #24
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b08e      	sub	sp, #56	; 0x38
 800bbb8:	af04      	add	r7, sp, #16
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	607a      	str	r2, [r7, #4]
 800bbc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10a      	bne.n	800bbde <xTaskCreateStatic+0x2a>
	__asm volatile
 800bbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbcc:	f383 8811 	msr	BASEPRI, r3
 800bbd0:	f3bf 8f6f 	isb	sy
 800bbd4:	f3bf 8f4f 	dsb	sy
 800bbd8:	623b      	str	r3, [r7, #32]
}
 800bbda:	bf00      	nop
 800bbdc:	e7fe      	b.n	800bbdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10a      	bne.n	800bbfa <xTaskCreateStatic+0x46>
	__asm volatile
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	f383 8811 	msr	BASEPRI, r3
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	61fb      	str	r3, [r7, #28]
}
 800bbf6:	bf00      	nop
 800bbf8:	e7fe      	b.n	800bbf8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bbfa:	23bc      	movs	r3, #188	; 0xbc
 800bbfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	2bbc      	cmp	r3, #188	; 0xbc
 800bc02:	d00a      	beq.n	800bc1a <xTaskCreateStatic+0x66>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	61bb      	str	r3, [r7, #24]
}
 800bc16:	bf00      	nop
 800bc18:	e7fe      	b.n	800bc18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bc1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d01e      	beq.n	800bc60 <xTaskCreateStatic+0xac>
 800bc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d01b      	beq.n	800bc60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc34:	2202      	movs	r2, #2
 800bc36:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	9303      	str	r3, [sp, #12]
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc40:	9302      	str	r3, [sp, #8]
 800bc42:	f107 0314 	add.w	r3, r7, #20
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	68b9      	ldr	r1, [r7, #8]
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f000 f850 	bl	800bcf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc5a:	f000 f8f3 	bl	800be44 <prvAddNewTaskToReadyList>
 800bc5e:	e001      	b.n	800bc64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bc60:	2300      	movs	r3, #0
 800bc62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc64:	697b      	ldr	r3, [r7, #20]
	}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3728      	adds	r7, #40	; 0x28
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b08c      	sub	sp, #48	; 0x30
 800bc72:	af04      	add	r7, sp, #16
 800bc74:	60f8      	str	r0, [r7, #12]
 800bc76:	60b9      	str	r1, [r7, #8]
 800bc78:	603b      	str	r3, [r7, #0]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bc7e:	88fb      	ldrh	r3, [r7, #6]
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f001 fc28 	bl	800d4d8 <pvPortMalloc>
 800bc88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00e      	beq.n	800bcae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc90:	20bc      	movs	r0, #188	; 0xbc
 800bc92:	f001 fc21 	bl	800d4d8 <pvPortMalloc>
 800bc96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d003      	beq.n	800bca6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	697a      	ldr	r2, [r7, #20]
 800bca2:	631a      	str	r2, [r3, #48]	; 0x30
 800bca4:	e005      	b.n	800bcb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bca6:	6978      	ldr	r0, [r7, #20]
 800bca8:	f001 fce2 	bl	800d670 <vPortFree>
 800bcac:	e001      	b.n	800bcb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d017      	beq.n	800bce8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bcc0:	88fa      	ldrh	r2, [r7, #6]
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	9303      	str	r3, [sp, #12]
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	9302      	str	r3, [sp, #8]
 800bcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bccc:	9301      	str	r3, [sp, #4]
 800bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	68b9      	ldr	r1, [r7, #8]
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f000 f80e 	bl	800bcf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcdc:	69f8      	ldr	r0, [r7, #28]
 800bcde:	f000 f8b1 	bl	800be44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bce2:	2301      	movs	r3, #1
 800bce4:	61bb      	str	r3, [r7, #24]
 800bce6:	e002      	b.n	800bcee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bce8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bcee:	69bb      	ldr	r3, [r7, #24]
	}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3720      	adds	r7, #32
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b088      	sub	sp, #32
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	461a      	mov	r2, r3
 800bd10:	21a5      	movs	r1, #165	; 0xa5
 800bd12:	f002 fb65 	bl	800e3e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bd20:	3b01      	subs	r3, #1
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	f023 0307 	bic.w	r3, r3, #7
 800bd2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	f003 0307 	and.w	r3, r3, #7
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00a      	beq.n	800bd50 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	617b      	str	r3, [r7, #20]
}
 800bd4c:	bf00      	nop
 800bd4e:	e7fe      	b.n	800bd4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d01f      	beq.n	800bd96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd56:	2300      	movs	r3, #0
 800bd58:	61fb      	str	r3, [r7, #28]
 800bd5a:	e012      	b.n	800bd82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	4413      	add	r3, r2
 800bd62:	7819      	ldrb	r1, [r3, #0]
 800bd64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	4413      	add	r3, r2
 800bd6a:	3334      	adds	r3, #52	; 0x34
 800bd6c:	460a      	mov	r2, r1
 800bd6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	4413      	add	r3, r2
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d006      	beq.n	800bd8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	61fb      	str	r3, [r7, #28]
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	2b0f      	cmp	r3, #15
 800bd86:	d9e9      	bls.n	800bd5c <prvInitialiseNewTask+0x64>
 800bd88:	e000      	b.n	800bd8c <prvInitialiseNewTask+0x94>
			{
				break;
 800bd8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd94:	e003      	b.n	800bd9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda0:	2b37      	cmp	r3, #55	; 0x37
 800bda2:	d901      	bls.n	800bda8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bda4:	2337      	movs	r3, #55	; 0x37
 800bda6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fe fffa 	bl	800adb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc6:	3318      	adds	r3, #24
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fe fff5 	bl	800adb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bddc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bde2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	3354      	adds	r3, #84	; 0x54
 800bdf8:	2260      	movs	r2, #96	; 0x60
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f002 faef 	bl	800e3e0 <memset>
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	4a0c      	ldr	r2, [pc, #48]	; (800be38 <prvInitialiseNewTask+0x140>)
 800be06:	659a      	str	r2, [r3, #88]	; 0x58
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	4a0c      	ldr	r2, [pc, #48]	; (800be3c <prvInitialiseNewTask+0x144>)
 800be0c:	65da      	str	r2, [r3, #92]	; 0x5c
 800be0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be10:	4a0b      	ldr	r2, [pc, #44]	; (800be40 <prvInitialiseNewTask+0x148>)
 800be12:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	68f9      	ldr	r1, [r7, #12]
 800be18:	69b8      	ldr	r0, [r7, #24]
 800be1a:	f001 f90d 	bl	800d038 <pxPortInitialiseStack>
 800be1e:	4602      	mov	r2, r0
 800be20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	2b00      	cmp	r3, #0
 800be28:	d002      	beq.n	800be30 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be30:	bf00      	nop
 800be32:	3720      	adds	r7, #32
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	0800e6a4 	.word	0x0800e6a4
 800be3c:	0800e6c4 	.word	0x0800e6c4
 800be40:	0800e684 	.word	0x0800e684

0800be44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be4c:	f001 fa22 	bl	800d294 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800be50:	4b2d      	ldr	r3, [pc, #180]	; (800bf08 <prvAddNewTaskToReadyList+0xc4>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	3301      	adds	r3, #1
 800be56:	4a2c      	ldr	r2, [pc, #176]	; (800bf08 <prvAddNewTaskToReadyList+0xc4>)
 800be58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800be5a:	4b2c      	ldr	r3, [pc, #176]	; (800bf0c <prvAddNewTaskToReadyList+0xc8>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d109      	bne.n	800be76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800be62:	4a2a      	ldr	r2, [pc, #168]	; (800bf0c <prvAddNewTaskToReadyList+0xc8>)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be68:	4b27      	ldr	r3, [pc, #156]	; (800bf08 <prvAddNewTaskToReadyList+0xc4>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d110      	bne.n	800be92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be70:	f000 fbf2 	bl	800c658 <prvInitialiseTaskLists>
 800be74:	e00d      	b.n	800be92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be76:	4b26      	ldr	r3, [pc, #152]	; (800bf10 <prvAddNewTaskToReadyList+0xcc>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d109      	bne.n	800be92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be7e:	4b23      	ldr	r3, [pc, #140]	; (800bf0c <prvAddNewTaskToReadyList+0xc8>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be88:	429a      	cmp	r2, r3
 800be8a:	d802      	bhi.n	800be92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be8c:	4a1f      	ldr	r2, [pc, #124]	; (800bf0c <prvAddNewTaskToReadyList+0xc8>)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be92:	4b20      	ldr	r3, [pc, #128]	; (800bf14 <prvAddNewTaskToReadyList+0xd0>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	3301      	adds	r3, #1
 800be98:	4a1e      	ldr	r2, [pc, #120]	; (800bf14 <prvAddNewTaskToReadyList+0xd0>)
 800be9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800be9c:	4b1d      	ldr	r3, [pc, #116]	; (800bf14 <prvAddNewTaskToReadyList+0xd0>)
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea8:	4b1b      	ldr	r3, [pc, #108]	; (800bf18 <prvAddNewTaskToReadyList+0xd4>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	429a      	cmp	r2, r3
 800beae:	d903      	bls.n	800beb8 <prvAddNewTaskToReadyList+0x74>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb4:	4a18      	ldr	r2, [pc, #96]	; (800bf18 <prvAddNewTaskToReadyList+0xd4>)
 800beb6:	6013      	str	r3, [r2, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bebc:	4613      	mov	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	4413      	add	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4a15      	ldr	r2, [pc, #84]	; (800bf1c <prvAddNewTaskToReadyList+0xd8>)
 800bec6:	441a      	add	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	3304      	adds	r3, #4
 800becc:	4619      	mov	r1, r3
 800bece:	4610      	mov	r0, r2
 800bed0:	f7fe ff7f 	bl	800add2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bed4:	f001 fa0e 	bl	800d2f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bed8:	4b0d      	ldr	r3, [pc, #52]	; (800bf10 <prvAddNewTaskToReadyList+0xcc>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00e      	beq.n	800befe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bee0:	4b0a      	ldr	r3, [pc, #40]	; (800bf0c <prvAddNewTaskToReadyList+0xc8>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beea:	429a      	cmp	r2, r3
 800beec:	d207      	bcs.n	800befe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800beee:	4b0c      	ldr	r3, [pc, #48]	; (800bf20 <prvAddNewTaskToReadyList+0xdc>)
 800bef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800befe:	bf00      	nop
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	20001330 	.word	0x20001330
 800bf0c:	20000e5c 	.word	0x20000e5c
 800bf10:	2000133c 	.word	0x2000133c
 800bf14:	2000134c 	.word	0x2000134c
 800bf18:	20001338 	.word	0x20001338
 800bf1c:	20000e60 	.word	0x20000e60
 800bf20:	e000ed04 	.word	0xe000ed04

0800bf24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b08a      	sub	sp, #40	; 0x28
 800bf28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf32:	463a      	mov	r2, r7
 800bf34:	1d39      	adds	r1, r7, #4
 800bf36:	f107 0308 	add.w	r3, r7, #8
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fe fee8 	bl	800ad10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	68ba      	ldr	r2, [r7, #8]
 800bf46:	9202      	str	r2, [sp, #8]
 800bf48:	9301      	str	r3, [sp, #4]
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	460a      	mov	r2, r1
 800bf52:	4924      	ldr	r1, [pc, #144]	; (800bfe4 <vTaskStartScheduler+0xc0>)
 800bf54:	4824      	ldr	r0, [pc, #144]	; (800bfe8 <vTaskStartScheduler+0xc4>)
 800bf56:	f7ff fe2d 	bl	800bbb4 <xTaskCreateStatic>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	4a23      	ldr	r2, [pc, #140]	; (800bfec <vTaskStartScheduler+0xc8>)
 800bf5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf60:	4b22      	ldr	r3, [pc, #136]	; (800bfec <vTaskStartScheduler+0xc8>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d002      	beq.n	800bf6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	e001      	b.n	800bf72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d102      	bne.n	800bf7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf78:	f000 fd10 	bl	800c99c <xTimerCreateTimerTask>
 800bf7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d11b      	bne.n	800bfbc <vTaskStartScheduler+0x98>
	__asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	613b      	str	r3, [r7, #16]
}
 800bf96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf98:	4b15      	ldr	r3, [pc, #84]	; (800bff0 <vTaskStartScheduler+0xcc>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	3354      	adds	r3, #84	; 0x54
 800bf9e:	4a15      	ldr	r2, [pc, #84]	; (800bff4 <vTaskStartScheduler+0xd0>)
 800bfa0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bfa2:	4b15      	ldr	r3, [pc, #84]	; (800bff8 <vTaskStartScheduler+0xd4>)
 800bfa4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bfaa:	4b14      	ldr	r3, [pc, #80]	; (800bffc <vTaskStartScheduler+0xd8>)
 800bfac:	2201      	movs	r2, #1
 800bfae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bfb0:	4b13      	ldr	r3, [pc, #76]	; (800c000 <vTaskStartScheduler+0xdc>)
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bfb6:	f001 f8cb 	bl	800d150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bfba:	e00e      	b.n	800bfda <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc2:	d10a      	bne.n	800bfda <vTaskStartScheduler+0xb6>
	__asm volatile
 800bfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	60fb      	str	r3, [r7, #12]
}
 800bfd6:	bf00      	nop
 800bfd8:	e7fe      	b.n	800bfd8 <vTaskStartScheduler+0xb4>
}
 800bfda:	bf00      	nop
 800bfdc:	3718      	adds	r7, #24
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	0800e5b8 	.word	0x0800e5b8
 800bfe8:	0800c629 	.word	0x0800c629
 800bfec:	20001354 	.word	0x20001354
 800bff0:	20000e5c 	.word	0x20000e5c
 800bff4:	20000100 	.word	0x20000100
 800bff8:	20001350 	.word	0x20001350
 800bffc:	2000133c 	.word	0x2000133c
 800c000:	20001334 	.word	0x20001334

0800c004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c004:	b480      	push	{r7}
 800c006:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <vTaskSuspendAll+0x18>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	3301      	adds	r3, #1
 800c00e:	4a03      	ldr	r2, [pc, #12]	; (800c01c <vTaskSuspendAll+0x18>)
 800c010:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c012:	bf00      	nop
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	20001358 	.word	0x20001358

0800c020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c026:	2300      	movs	r3, #0
 800c028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c02a:	2300      	movs	r3, #0
 800c02c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c02e:	4b42      	ldr	r3, [pc, #264]	; (800c138 <xTaskResumeAll+0x118>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10a      	bne.n	800c04c <xTaskResumeAll+0x2c>
	__asm volatile
 800c036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	603b      	str	r3, [r7, #0]
}
 800c048:	bf00      	nop
 800c04a:	e7fe      	b.n	800c04a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c04c:	f001 f922 	bl	800d294 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c050:	4b39      	ldr	r3, [pc, #228]	; (800c138 <xTaskResumeAll+0x118>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	3b01      	subs	r3, #1
 800c056:	4a38      	ldr	r2, [pc, #224]	; (800c138 <xTaskResumeAll+0x118>)
 800c058:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c05a:	4b37      	ldr	r3, [pc, #220]	; (800c138 <xTaskResumeAll+0x118>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d162      	bne.n	800c128 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c062:	4b36      	ldr	r3, [pc, #216]	; (800c13c <xTaskResumeAll+0x11c>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d05e      	beq.n	800c128 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c06a:	e02f      	b.n	800c0cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c06c:	4b34      	ldr	r3, [pc, #208]	; (800c140 <xTaskResumeAll+0x120>)
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	68db      	ldr	r3, [r3, #12]
 800c072:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	3318      	adds	r3, #24
 800c078:	4618      	mov	r0, r3
 800c07a:	f7fe ff07 	bl	800ae8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3304      	adds	r3, #4
 800c082:	4618      	mov	r0, r3
 800c084:	f7fe ff02 	bl	800ae8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08c:	4b2d      	ldr	r3, [pc, #180]	; (800c144 <xTaskResumeAll+0x124>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	429a      	cmp	r2, r3
 800c092:	d903      	bls.n	800c09c <xTaskResumeAll+0x7c>
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c098:	4a2a      	ldr	r2, [pc, #168]	; (800c144 <xTaskResumeAll+0x124>)
 800c09a:	6013      	str	r3, [r2, #0]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4a27      	ldr	r2, [pc, #156]	; (800c148 <xTaskResumeAll+0x128>)
 800c0aa:	441a      	add	r2, r3
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	f7fe fe8d 	bl	800add2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0bc:	4b23      	ldr	r3, [pc, #140]	; (800c14c <xTaskResumeAll+0x12c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d302      	bcc.n	800c0cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c0c6:	4b22      	ldr	r3, [pc, #136]	; (800c150 <xTaskResumeAll+0x130>)
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0cc:	4b1c      	ldr	r3, [pc, #112]	; (800c140 <xTaskResumeAll+0x120>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d1cb      	bne.n	800c06c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d001      	beq.n	800c0de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c0da:	f000 fb5f 	bl	800c79c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c0de:	4b1d      	ldr	r3, [pc, #116]	; (800c154 <xTaskResumeAll+0x134>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d010      	beq.n	800c10c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c0ea:	f000 f847 	bl	800c17c <xTaskIncrementTick>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d002      	beq.n	800c0fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c0f4:	4b16      	ldr	r3, [pc, #88]	; (800c150 <xTaskResumeAll+0x130>)
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d1f1      	bne.n	800c0ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c106:	4b13      	ldr	r3, [pc, #76]	; (800c154 <xTaskResumeAll+0x134>)
 800c108:	2200      	movs	r2, #0
 800c10a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c10c:	4b10      	ldr	r3, [pc, #64]	; (800c150 <xTaskResumeAll+0x130>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d009      	beq.n	800c128 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c114:	2301      	movs	r3, #1
 800c116:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c118:	4b0f      	ldr	r3, [pc, #60]	; (800c158 <xTaskResumeAll+0x138>)
 800c11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c128:	f001 f8e4 	bl	800d2f4 <vPortExitCritical>

	return xAlreadyYielded;
 800c12c:	68bb      	ldr	r3, [r7, #8]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	20001358 	.word	0x20001358
 800c13c:	20001330 	.word	0x20001330
 800c140:	200012f0 	.word	0x200012f0
 800c144:	20001338 	.word	0x20001338
 800c148:	20000e60 	.word	0x20000e60
 800c14c:	20000e5c 	.word	0x20000e5c
 800c150:	20001344 	.word	0x20001344
 800c154:	20001340 	.word	0x20001340
 800c158:	e000ed04 	.word	0xe000ed04

0800c15c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c162:	4b05      	ldr	r3, [pc, #20]	; (800c178 <xTaskGetTickCount+0x1c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c168:	687b      	ldr	r3, [r7, #4]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	370c      	adds	r7, #12
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	20001334 	.word	0x20001334

0800c17c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c182:	2300      	movs	r3, #0
 800c184:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c186:	4b4f      	ldr	r3, [pc, #316]	; (800c2c4 <xTaskIncrementTick+0x148>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	f040 808f 	bne.w	800c2ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c190:	4b4d      	ldr	r3, [pc, #308]	; (800c2c8 <xTaskIncrementTick+0x14c>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	3301      	adds	r3, #1
 800c196:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c198:	4a4b      	ldr	r2, [pc, #300]	; (800c2c8 <xTaskIncrementTick+0x14c>)
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d120      	bne.n	800c1e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c1a4:	4b49      	ldr	r3, [pc, #292]	; (800c2cc <xTaskIncrementTick+0x150>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00a      	beq.n	800c1c4 <xTaskIncrementTick+0x48>
	__asm volatile
 800c1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b2:	f383 8811 	msr	BASEPRI, r3
 800c1b6:	f3bf 8f6f 	isb	sy
 800c1ba:	f3bf 8f4f 	dsb	sy
 800c1be:	603b      	str	r3, [r7, #0]
}
 800c1c0:	bf00      	nop
 800c1c2:	e7fe      	b.n	800c1c2 <xTaskIncrementTick+0x46>
 800c1c4:	4b41      	ldr	r3, [pc, #260]	; (800c2cc <xTaskIncrementTick+0x150>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	60fb      	str	r3, [r7, #12]
 800c1ca:	4b41      	ldr	r3, [pc, #260]	; (800c2d0 <xTaskIncrementTick+0x154>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a3f      	ldr	r2, [pc, #252]	; (800c2cc <xTaskIncrementTick+0x150>)
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	4a3f      	ldr	r2, [pc, #252]	; (800c2d0 <xTaskIncrementTick+0x154>)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	4b3e      	ldr	r3, [pc, #248]	; (800c2d4 <xTaskIncrementTick+0x158>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	4a3d      	ldr	r2, [pc, #244]	; (800c2d4 <xTaskIncrementTick+0x158>)
 800c1e0:	6013      	str	r3, [r2, #0]
 800c1e2:	f000 fadb 	bl	800c79c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c1e6:	4b3c      	ldr	r3, [pc, #240]	; (800c2d8 <xTaskIncrementTick+0x15c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	693a      	ldr	r2, [r7, #16]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d349      	bcc.n	800c284 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1f0:	4b36      	ldr	r3, [pc, #216]	; (800c2cc <xTaskIncrementTick+0x150>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d104      	bne.n	800c204 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1fa:	4b37      	ldr	r3, [pc, #220]	; (800c2d8 <xTaskIncrementTick+0x15c>)
 800c1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c200:	601a      	str	r2, [r3, #0]
					break;
 800c202:	e03f      	b.n	800c284 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c204:	4b31      	ldr	r3, [pc, #196]	; (800c2cc <xTaskIncrementTick+0x150>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c214:	693a      	ldr	r2, [r7, #16]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d203      	bcs.n	800c224 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c21c:	4a2e      	ldr	r2, [pc, #184]	; (800c2d8 <xTaskIncrementTick+0x15c>)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c222:	e02f      	b.n	800c284 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	3304      	adds	r3, #4
 800c228:	4618      	mov	r0, r3
 800c22a:	f7fe fe2f 	bl	800ae8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c232:	2b00      	cmp	r3, #0
 800c234:	d004      	beq.n	800c240 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	3318      	adds	r3, #24
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fe fe26 	bl	800ae8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c244:	4b25      	ldr	r3, [pc, #148]	; (800c2dc <xTaskIncrementTick+0x160>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d903      	bls.n	800c254 <xTaskIncrementTick+0xd8>
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c250:	4a22      	ldr	r2, [pc, #136]	; (800c2dc <xTaskIncrementTick+0x160>)
 800c252:	6013      	str	r3, [r2, #0]
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c258:	4613      	mov	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	4413      	add	r3, r2
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4a1f      	ldr	r2, [pc, #124]	; (800c2e0 <xTaskIncrementTick+0x164>)
 800c262:	441a      	add	r2, r3
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	3304      	adds	r3, #4
 800c268:	4619      	mov	r1, r3
 800c26a:	4610      	mov	r0, r2
 800c26c:	f7fe fdb1 	bl	800add2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c274:	4b1b      	ldr	r3, [pc, #108]	; (800c2e4 <xTaskIncrementTick+0x168>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d3b8      	bcc.n	800c1f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c27e:	2301      	movs	r3, #1
 800c280:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c282:	e7b5      	b.n	800c1f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c284:	4b17      	ldr	r3, [pc, #92]	; (800c2e4 <xTaskIncrementTick+0x168>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28a:	4915      	ldr	r1, [pc, #84]	; (800c2e0 <xTaskIncrementTick+0x164>)
 800c28c:	4613      	mov	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	4413      	add	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	440b      	add	r3, r1
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d901      	bls.n	800c2a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c29c:	2301      	movs	r3, #1
 800c29e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c2a0:	4b11      	ldr	r3, [pc, #68]	; (800c2e8 <xTaskIncrementTick+0x16c>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d007      	beq.n	800c2b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	617b      	str	r3, [r7, #20]
 800c2ac:	e004      	b.n	800c2b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c2ae:	4b0f      	ldr	r3, [pc, #60]	; (800c2ec <xTaskIncrementTick+0x170>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	4a0d      	ldr	r2, [pc, #52]	; (800c2ec <xTaskIncrementTick+0x170>)
 800c2b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c2b8:	697b      	ldr	r3, [r7, #20]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3718      	adds	r7, #24
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	20001358 	.word	0x20001358
 800c2c8:	20001334 	.word	0x20001334
 800c2cc:	200012e8 	.word	0x200012e8
 800c2d0:	200012ec 	.word	0x200012ec
 800c2d4:	20001348 	.word	0x20001348
 800c2d8:	20001350 	.word	0x20001350
 800c2dc:	20001338 	.word	0x20001338
 800c2e0:	20000e60 	.word	0x20000e60
 800c2e4:	20000e5c 	.word	0x20000e5c
 800c2e8:	20001344 	.word	0x20001344
 800c2ec:	20001340 	.word	0x20001340

0800c2f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c2f6:	4b2a      	ldr	r3, [pc, #168]	; (800c3a0 <vTaskSwitchContext+0xb0>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d003      	beq.n	800c306 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c2fe:	4b29      	ldr	r3, [pc, #164]	; (800c3a4 <vTaskSwitchContext+0xb4>)
 800c300:	2201      	movs	r2, #1
 800c302:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c304:	e046      	b.n	800c394 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c306:	4b27      	ldr	r3, [pc, #156]	; (800c3a4 <vTaskSwitchContext+0xb4>)
 800c308:	2200      	movs	r2, #0
 800c30a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c30c:	4b26      	ldr	r3, [pc, #152]	; (800c3a8 <vTaskSwitchContext+0xb8>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	60fb      	str	r3, [r7, #12]
 800c312:	e010      	b.n	800c336 <vTaskSwitchContext+0x46>
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d10a      	bne.n	800c330 <vTaskSwitchContext+0x40>
	__asm volatile
 800c31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	607b      	str	r3, [r7, #4]
}
 800c32c:	bf00      	nop
 800c32e:	e7fe      	b.n	800c32e <vTaskSwitchContext+0x3e>
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	3b01      	subs	r3, #1
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	491d      	ldr	r1, [pc, #116]	; (800c3ac <vTaskSwitchContext+0xbc>)
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	4613      	mov	r3, r2
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	440b      	add	r3, r1
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d0e4      	beq.n	800c314 <vTaskSwitchContext+0x24>
 800c34a:	68fa      	ldr	r2, [r7, #12]
 800c34c:	4613      	mov	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4413      	add	r3, r2
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	4a15      	ldr	r2, [pc, #84]	; (800c3ac <vTaskSwitchContext+0xbc>)
 800c356:	4413      	add	r3, r2
 800c358:	60bb      	str	r3, [r7, #8]
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	605a      	str	r2, [r3, #4]
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	685a      	ldr	r2, [r3, #4]
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	3308      	adds	r3, #8
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d104      	bne.n	800c37a <vTaskSwitchContext+0x8a>
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	685a      	ldr	r2, [r3, #4]
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	605a      	str	r2, [r3, #4]
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	4a0b      	ldr	r2, [pc, #44]	; (800c3b0 <vTaskSwitchContext+0xc0>)
 800c382:	6013      	str	r3, [r2, #0]
 800c384:	4a08      	ldr	r2, [pc, #32]	; (800c3a8 <vTaskSwitchContext+0xb8>)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c38a:	4b09      	ldr	r3, [pc, #36]	; (800c3b0 <vTaskSwitchContext+0xc0>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	3354      	adds	r3, #84	; 0x54
 800c390:	4a08      	ldr	r2, [pc, #32]	; (800c3b4 <vTaskSwitchContext+0xc4>)
 800c392:	6013      	str	r3, [r2, #0]
}
 800c394:	bf00      	nop
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	20001358 	.word	0x20001358
 800c3a4:	20001344 	.word	0x20001344
 800c3a8:	20001338 	.word	0x20001338
 800c3ac:	20000e60 	.word	0x20000e60
 800c3b0:	20000e5c 	.word	0x20000e5c
 800c3b4:	20000100 	.word	0x20000100

0800c3b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d10a      	bne.n	800c3de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3cc:	f383 8811 	msr	BASEPRI, r3
 800c3d0:	f3bf 8f6f 	isb	sy
 800c3d4:	f3bf 8f4f 	dsb	sy
 800c3d8:	60fb      	str	r3, [r7, #12]
}
 800c3da:	bf00      	nop
 800c3dc:	e7fe      	b.n	800c3dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3de:	4b07      	ldr	r3, [pc, #28]	; (800c3fc <vTaskPlaceOnEventList+0x44>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	3318      	adds	r3, #24
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7fe fd17 	bl	800ae1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	6838      	ldr	r0, [r7, #0]
 800c3f0:	f000 fa80 	bl	800c8f4 <prvAddCurrentTaskToDelayedList>
}
 800c3f4:	bf00      	nop
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20000e5c 	.word	0x20000e5c

0800c400 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10a      	bne.n	800c428 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	617b      	str	r3, [r7, #20]
}
 800c424:	bf00      	nop
 800c426:	e7fe      	b.n	800c426 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c428:	4b0a      	ldr	r3, [pc, #40]	; (800c454 <vTaskPlaceOnEventListRestricted+0x54>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3318      	adds	r3, #24
 800c42e:	4619      	mov	r1, r3
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	f7fe fcce 	bl	800add2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d002      	beq.n	800c442 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c43c:	f04f 33ff 	mov.w	r3, #4294967295
 800c440:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	68b8      	ldr	r0, [r7, #8]
 800c446:	f000 fa55 	bl	800c8f4 <prvAddCurrentTaskToDelayedList>
	}
 800c44a:	bf00      	nop
 800c44c:	3718      	adds	r7, #24
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	20000e5c 	.word	0x20000e5c

0800c458 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10a      	bne.n	800c484 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	60fb      	str	r3, [r7, #12]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	3318      	adds	r3, #24
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fe fcff 	bl	800ae8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c48e:	4b1e      	ldr	r3, [pc, #120]	; (800c508 <xTaskRemoveFromEventList+0xb0>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d11d      	bne.n	800c4d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	3304      	adds	r3, #4
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe fcf6 	bl	800ae8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a4:	4b19      	ldr	r3, [pc, #100]	; (800c50c <xTaskRemoveFromEventList+0xb4>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d903      	bls.n	800c4b4 <xTaskRemoveFromEventList+0x5c>
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b0:	4a16      	ldr	r2, [pc, #88]	; (800c50c <xTaskRemoveFromEventList+0xb4>)
 800c4b2:	6013      	str	r3, [r2, #0]
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4413      	add	r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	4a13      	ldr	r2, [pc, #76]	; (800c510 <xTaskRemoveFromEventList+0xb8>)
 800c4c2:	441a      	add	r2, r3
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	f7fe fc81 	bl	800add2 <vListInsertEnd>
 800c4d0:	e005      	b.n	800c4de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	3318      	adds	r3, #24
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	480e      	ldr	r0, [pc, #56]	; (800c514 <xTaskRemoveFromEventList+0xbc>)
 800c4da:	f7fe fc7a 	bl	800add2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e2:	4b0d      	ldr	r3, [pc, #52]	; (800c518 <xTaskRemoveFromEventList+0xc0>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d905      	bls.n	800c4f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4f0:	4b0a      	ldr	r3, [pc, #40]	; (800c51c <xTaskRemoveFromEventList+0xc4>)
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	e001      	b.n	800c4fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c4fc:	697b      	ldr	r3, [r7, #20]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3718      	adds	r7, #24
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20001358 	.word	0x20001358
 800c50c:	20001338 	.word	0x20001338
 800c510:	20000e60 	.word	0x20000e60
 800c514:	200012f0 	.word	0x200012f0
 800c518:	20000e5c 	.word	0x20000e5c
 800c51c:	20001344 	.word	0x20001344

0800c520 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c528:	4b06      	ldr	r3, [pc, #24]	; (800c544 <vTaskInternalSetTimeOutState+0x24>)
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c530:	4b05      	ldr	r3, [pc, #20]	; (800c548 <vTaskInternalSetTimeOutState+0x28>)
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	605a      	str	r2, [r3, #4]
}
 800c538:	bf00      	nop
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr
 800c544:	20001348 	.word	0x20001348
 800c548:	20001334 	.word	0x20001334

0800c54c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b088      	sub	sp, #32
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10a      	bne.n	800c572 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c560:	f383 8811 	msr	BASEPRI, r3
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	613b      	str	r3, [r7, #16]
}
 800c56e:	bf00      	nop
 800c570:	e7fe      	b.n	800c570 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d10a      	bne.n	800c58e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57c:	f383 8811 	msr	BASEPRI, r3
 800c580:	f3bf 8f6f 	isb	sy
 800c584:	f3bf 8f4f 	dsb	sy
 800c588:	60fb      	str	r3, [r7, #12]
}
 800c58a:	bf00      	nop
 800c58c:	e7fe      	b.n	800c58c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c58e:	f000 fe81 	bl	800d294 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c592:	4b1d      	ldr	r3, [pc, #116]	; (800c608 <xTaskCheckForTimeOut+0xbc>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	685b      	ldr	r3, [r3, #4]
 800c59c:	69ba      	ldr	r2, [r7, #24]
 800c59e:	1ad3      	subs	r3, r2, r3
 800c5a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5aa:	d102      	bne.n	800c5b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	61fb      	str	r3, [r7, #28]
 800c5b0:	e023      	b.n	800c5fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	4b15      	ldr	r3, [pc, #84]	; (800c60c <xTaskCheckForTimeOut+0xc0>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d007      	beq.n	800c5ce <xTaskCheckForTimeOut+0x82>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	69ba      	ldr	r2, [r7, #24]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d302      	bcc.n	800c5ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	61fb      	str	r3, [r7, #28]
 800c5cc:	e015      	b.n	800c5fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	697a      	ldr	r2, [r7, #20]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d20b      	bcs.n	800c5f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	1ad2      	subs	r2, r2, r3
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff ff9b 	bl	800c520 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	61fb      	str	r3, [r7, #28]
 800c5ee:	e004      	b.n	800c5fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c5fa:	f000 fe7b 	bl	800d2f4 <vPortExitCritical>

	return xReturn;
 800c5fe:	69fb      	ldr	r3, [r7, #28]
}
 800c600:	4618      	mov	r0, r3
 800c602:	3720      	adds	r7, #32
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	20001334 	.word	0x20001334
 800c60c:	20001348 	.word	0x20001348

0800c610 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c610:	b480      	push	{r7}
 800c612:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c614:	4b03      	ldr	r3, [pc, #12]	; (800c624 <vTaskMissedYield+0x14>)
 800c616:	2201      	movs	r2, #1
 800c618:	601a      	str	r2, [r3, #0]
}
 800c61a:	bf00      	nop
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr
 800c624:	20001344 	.word	0x20001344

0800c628 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c630:	f000 f852 	bl	800c6d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c634:	4b06      	ldr	r3, [pc, #24]	; (800c650 <prvIdleTask+0x28>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d9f9      	bls.n	800c630 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c63c:	4b05      	ldr	r3, [pc, #20]	; (800c654 <prvIdleTask+0x2c>)
 800c63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c64c:	e7f0      	b.n	800c630 <prvIdleTask+0x8>
 800c64e:	bf00      	nop
 800c650:	20000e60 	.word	0x20000e60
 800c654:	e000ed04 	.word	0xe000ed04

0800c658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c65e:	2300      	movs	r3, #0
 800c660:	607b      	str	r3, [r7, #4]
 800c662:	e00c      	b.n	800c67e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	4613      	mov	r3, r2
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	4413      	add	r3, r2
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	4a12      	ldr	r2, [pc, #72]	; (800c6b8 <prvInitialiseTaskLists+0x60>)
 800c670:	4413      	add	r3, r2
 800c672:	4618      	mov	r0, r3
 800c674:	f7fe fb80 	bl	800ad78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	3301      	adds	r3, #1
 800c67c:	607b      	str	r3, [r7, #4]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b37      	cmp	r3, #55	; 0x37
 800c682:	d9ef      	bls.n	800c664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c684:	480d      	ldr	r0, [pc, #52]	; (800c6bc <prvInitialiseTaskLists+0x64>)
 800c686:	f7fe fb77 	bl	800ad78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c68a:	480d      	ldr	r0, [pc, #52]	; (800c6c0 <prvInitialiseTaskLists+0x68>)
 800c68c:	f7fe fb74 	bl	800ad78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c690:	480c      	ldr	r0, [pc, #48]	; (800c6c4 <prvInitialiseTaskLists+0x6c>)
 800c692:	f7fe fb71 	bl	800ad78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c696:	480c      	ldr	r0, [pc, #48]	; (800c6c8 <prvInitialiseTaskLists+0x70>)
 800c698:	f7fe fb6e 	bl	800ad78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c69c:	480b      	ldr	r0, [pc, #44]	; (800c6cc <prvInitialiseTaskLists+0x74>)
 800c69e:	f7fe fb6b 	bl	800ad78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c6a2:	4b0b      	ldr	r3, [pc, #44]	; (800c6d0 <prvInitialiseTaskLists+0x78>)
 800c6a4:	4a05      	ldr	r2, [pc, #20]	; (800c6bc <prvInitialiseTaskLists+0x64>)
 800c6a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c6a8:	4b0a      	ldr	r3, [pc, #40]	; (800c6d4 <prvInitialiseTaskLists+0x7c>)
 800c6aa:	4a05      	ldr	r2, [pc, #20]	; (800c6c0 <prvInitialiseTaskLists+0x68>)
 800c6ac:	601a      	str	r2, [r3, #0]
}
 800c6ae:	bf00      	nop
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	20000e60 	.word	0x20000e60
 800c6bc:	200012c0 	.word	0x200012c0
 800c6c0:	200012d4 	.word	0x200012d4
 800c6c4:	200012f0 	.word	0x200012f0
 800c6c8:	20001304 	.word	0x20001304
 800c6cc:	2000131c 	.word	0x2000131c
 800c6d0:	200012e8 	.word	0x200012e8
 800c6d4:	200012ec 	.word	0x200012ec

0800c6d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6de:	e019      	b.n	800c714 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c6e0:	f000 fdd8 	bl	800d294 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6e4:	4b10      	ldr	r3, [pc, #64]	; (800c728 <prvCheckTasksWaitingTermination+0x50>)
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	3304      	adds	r3, #4
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7fe fbcb 	bl	800ae8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c6f6:	4b0d      	ldr	r3, [pc, #52]	; (800c72c <prvCheckTasksWaitingTermination+0x54>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	4a0b      	ldr	r2, [pc, #44]	; (800c72c <prvCheckTasksWaitingTermination+0x54>)
 800c6fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c700:	4b0b      	ldr	r3, [pc, #44]	; (800c730 <prvCheckTasksWaitingTermination+0x58>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	3b01      	subs	r3, #1
 800c706:	4a0a      	ldr	r2, [pc, #40]	; (800c730 <prvCheckTasksWaitingTermination+0x58>)
 800c708:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c70a:	f000 fdf3 	bl	800d2f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 f810 	bl	800c734 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c714:	4b06      	ldr	r3, [pc, #24]	; (800c730 <prvCheckTasksWaitingTermination+0x58>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1e1      	bne.n	800c6e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c71c:	bf00      	nop
 800c71e:	bf00      	nop
 800c720:	3708      	adds	r7, #8
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	20001304 	.word	0x20001304
 800c72c:	20001330 	.word	0x20001330
 800c730:	20001318 	.word	0x20001318

0800c734 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	3354      	adds	r3, #84	; 0x54
 800c740:	4618      	mov	r0, r3
 800c742:	f001 fe63 	bl	800e40c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d108      	bne.n	800c762 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c754:	4618      	mov	r0, r3
 800c756:	f000 ff8b 	bl	800d670 <vPortFree>
				vPortFree( pxTCB );
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 ff88 	bl	800d670 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c760:	e018      	b.n	800c794 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d103      	bne.n	800c774 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 ff7f 	bl	800d670 <vPortFree>
	}
 800c772:	e00f      	b.n	800c794 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d00a      	beq.n	800c794 <prvDeleteTCB+0x60>
	__asm volatile
 800c77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	60fb      	str	r3, [r7, #12]
}
 800c790:	bf00      	nop
 800c792:	e7fe      	b.n	800c792 <prvDeleteTCB+0x5e>
	}
 800c794:	bf00      	nop
 800c796:	3710      	adds	r7, #16
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7a2:	4b0c      	ldr	r3, [pc, #48]	; (800c7d4 <prvResetNextTaskUnblockTime+0x38>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d104      	bne.n	800c7b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7ac:	4b0a      	ldr	r3, [pc, #40]	; (800c7d8 <prvResetNextTaskUnblockTime+0x3c>)
 800c7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c7b4:	e008      	b.n	800c7c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7b6:	4b07      	ldr	r3, [pc, #28]	; (800c7d4 <prvResetNextTaskUnblockTime+0x38>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	4a04      	ldr	r2, [pc, #16]	; (800c7d8 <prvResetNextTaskUnblockTime+0x3c>)
 800c7c6:	6013      	str	r3, [r2, #0]
}
 800c7c8:	bf00      	nop
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr
 800c7d4:	200012e8 	.word	0x200012e8
 800c7d8:	20001350 	.word	0x20001350

0800c7dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c7e2:	4b0b      	ldr	r3, [pc, #44]	; (800c810 <xTaskGetSchedulerState+0x34>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d102      	bne.n	800c7f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	607b      	str	r3, [r7, #4]
 800c7ee:	e008      	b.n	800c802 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7f0:	4b08      	ldr	r3, [pc, #32]	; (800c814 <xTaskGetSchedulerState+0x38>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d102      	bne.n	800c7fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	607b      	str	r3, [r7, #4]
 800c7fc:	e001      	b.n	800c802 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c7fe:	2300      	movs	r3, #0
 800c800:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c802:	687b      	ldr	r3, [r7, #4]
	}
 800c804:	4618      	mov	r0, r3
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr
 800c810:	2000133c 	.word	0x2000133c
 800c814:	20001358 	.word	0x20001358

0800c818 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b086      	sub	sp, #24
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c824:	2300      	movs	r3, #0
 800c826:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d056      	beq.n	800c8dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c82e:	4b2e      	ldr	r3, [pc, #184]	; (800c8e8 <xTaskPriorityDisinherit+0xd0>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	693a      	ldr	r2, [r7, #16]
 800c834:	429a      	cmp	r2, r3
 800c836:	d00a      	beq.n	800c84e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83c:	f383 8811 	msr	BASEPRI, r3
 800c840:	f3bf 8f6f 	isb	sy
 800c844:	f3bf 8f4f 	dsb	sy
 800c848:	60fb      	str	r3, [r7, #12]
}
 800c84a:	bf00      	nop
 800c84c:	e7fe      	b.n	800c84c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10a      	bne.n	800c86c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	60bb      	str	r3, [r7, #8]
}
 800c868:	bf00      	nop
 800c86a:	e7fe      	b.n	800c86a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c870:	1e5a      	subs	r2, r3, #1
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c87e:	429a      	cmp	r2, r3
 800c880:	d02c      	beq.n	800c8dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c886:	2b00      	cmp	r3, #0
 800c888:	d128      	bne.n	800c8dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	3304      	adds	r3, #4
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fe fafc 	bl	800ae8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ac:	4b0f      	ldr	r3, [pc, #60]	; (800c8ec <xTaskPriorityDisinherit+0xd4>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d903      	bls.n	800c8bc <xTaskPriorityDisinherit+0xa4>
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b8:	4a0c      	ldr	r2, [pc, #48]	; (800c8ec <xTaskPriorityDisinherit+0xd4>)
 800c8ba:	6013      	str	r3, [r2, #0]
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	4a09      	ldr	r2, [pc, #36]	; (800c8f0 <xTaskPriorityDisinherit+0xd8>)
 800c8ca:	441a      	add	r2, r3
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	3304      	adds	r3, #4
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	4610      	mov	r0, r2
 800c8d4:	f7fe fa7d 	bl	800add2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8dc:	697b      	ldr	r3, [r7, #20]
	}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3718      	adds	r7, #24
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	20000e5c 	.word	0x20000e5c
 800c8ec:	20001338 	.word	0x20001338
 800c8f0:	20000e60 	.word	0x20000e60

0800c8f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c8fe:	4b21      	ldr	r3, [pc, #132]	; (800c984 <prvAddCurrentTaskToDelayedList+0x90>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c904:	4b20      	ldr	r3, [pc, #128]	; (800c988 <prvAddCurrentTaskToDelayedList+0x94>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	3304      	adds	r3, #4
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fe fabe 	bl	800ae8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c916:	d10a      	bne.n	800c92e <prvAddCurrentTaskToDelayedList+0x3a>
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d007      	beq.n	800c92e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c91e:	4b1a      	ldr	r3, [pc, #104]	; (800c988 <prvAddCurrentTaskToDelayedList+0x94>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	3304      	adds	r3, #4
 800c924:	4619      	mov	r1, r3
 800c926:	4819      	ldr	r0, [pc, #100]	; (800c98c <prvAddCurrentTaskToDelayedList+0x98>)
 800c928:	f7fe fa53 	bl	800add2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c92c:	e026      	b.n	800c97c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4413      	add	r3, r2
 800c934:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c936:	4b14      	ldr	r3, [pc, #80]	; (800c988 <prvAddCurrentTaskToDelayedList+0x94>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68ba      	ldr	r2, [r7, #8]
 800c93c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	429a      	cmp	r2, r3
 800c944:	d209      	bcs.n	800c95a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c946:	4b12      	ldr	r3, [pc, #72]	; (800c990 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	4b0f      	ldr	r3, [pc, #60]	; (800c988 <prvAddCurrentTaskToDelayedList+0x94>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	3304      	adds	r3, #4
 800c950:	4619      	mov	r1, r3
 800c952:	4610      	mov	r0, r2
 800c954:	f7fe fa61 	bl	800ae1a <vListInsert>
}
 800c958:	e010      	b.n	800c97c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c95a:	4b0e      	ldr	r3, [pc, #56]	; (800c994 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	4b0a      	ldr	r3, [pc, #40]	; (800c988 <prvAddCurrentTaskToDelayedList+0x94>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	3304      	adds	r3, #4
 800c964:	4619      	mov	r1, r3
 800c966:	4610      	mov	r0, r2
 800c968:	f7fe fa57 	bl	800ae1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c96c:	4b0a      	ldr	r3, [pc, #40]	; (800c998 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	68ba      	ldr	r2, [r7, #8]
 800c972:	429a      	cmp	r2, r3
 800c974:	d202      	bcs.n	800c97c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c976:	4a08      	ldr	r2, [pc, #32]	; (800c998 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	6013      	str	r3, [r2, #0]
}
 800c97c:	bf00      	nop
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	20001334 	.word	0x20001334
 800c988:	20000e5c 	.word	0x20000e5c
 800c98c:	2000131c 	.word	0x2000131c
 800c990:	200012ec 	.word	0x200012ec
 800c994:	200012e8 	.word	0x200012e8
 800c998:	20001350 	.word	0x20001350

0800c99c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b08a      	sub	sp, #40	; 0x28
 800c9a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c9a6:	f000 fb07 	bl	800cfb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c9aa:	4b1c      	ldr	r3, [pc, #112]	; (800ca1c <xTimerCreateTimerTask+0x80>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d021      	beq.n	800c9f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c9ba:	1d3a      	adds	r2, r7, #4
 800c9bc:	f107 0108 	add.w	r1, r7, #8
 800c9c0:	f107 030c 	add.w	r3, r7, #12
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fe f9bd 	bl	800ad44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c9ca:	6879      	ldr	r1, [r7, #4]
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	9202      	str	r2, [sp, #8]
 800c9d2:	9301      	str	r3, [sp, #4]
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	2300      	movs	r3, #0
 800c9da:	460a      	mov	r2, r1
 800c9dc:	4910      	ldr	r1, [pc, #64]	; (800ca20 <xTimerCreateTimerTask+0x84>)
 800c9de:	4811      	ldr	r0, [pc, #68]	; (800ca24 <xTimerCreateTimerTask+0x88>)
 800c9e0:	f7ff f8e8 	bl	800bbb4 <xTaskCreateStatic>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	4a10      	ldr	r2, [pc, #64]	; (800ca28 <xTimerCreateTimerTask+0x8c>)
 800c9e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c9ea:	4b0f      	ldr	r3, [pc, #60]	; (800ca28 <xTimerCreateTimerTask+0x8c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10a      	bne.n	800ca12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca00:	f383 8811 	msr	BASEPRI, r3
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	613b      	str	r3, [r7, #16]
}
 800ca0e:	bf00      	nop
 800ca10:	e7fe      	b.n	800ca10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ca12:	697b      	ldr	r3, [r7, #20]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3718      	adds	r7, #24
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	2000138c 	.word	0x2000138c
 800ca20:	0800e5c0 	.word	0x0800e5c0
 800ca24:	0800cb61 	.word	0x0800cb61
 800ca28:	20001390 	.word	0x20001390

0800ca2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b08a      	sub	sp, #40	; 0x28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
 800ca38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d10a      	bne.n	800ca5a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ca44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	623b      	str	r3, [r7, #32]
}
 800ca56:	bf00      	nop
 800ca58:	e7fe      	b.n	800ca58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca5a:	4b1a      	ldr	r3, [pc, #104]	; (800cac4 <xTimerGenericCommand+0x98>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d02a      	beq.n	800cab8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	2b05      	cmp	r3, #5
 800ca72:	dc18      	bgt.n	800caa6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca74:	f7ff feb2 	bl	800c7dc <xTaskGetSchedulerState>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	d109      	bne.n	800ca92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca7e:	4b11      	ldr	r3, [pc, #68]	; (800cac4 <xTimerGenericCommand+0x98>)
 800ca80:	6818      	ldr	r0, [r3, #0]
 800ca82:	f107 0110 	add.w	r1, r7, #16
 800ca86:	2300      	movs	r3, #0
 800ca88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca8a:	f7fe fbd1 	bl	800b230 <xQueueGenericSend>
 800ca8e:	6278      	str	r0, [r7, #36]	; 0x24
 800ca90:	e012      	b.n	800cab8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca92:	4b0c      	ldr	r3, [pc, #48]	; (800cac4 <xTimerGenericCommand+0x98>)
 800ca94:	6818      	ldr	r0, [r3, #0]
 800ca96:	f107 0110 	add.w	r1, r7, #16
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f7fe fbc7 	bl	800b230 <xQueueGenericSend>
 800caa2:	6278      	str	r0, [r7, #36]	; 0x24
 800caa4:	e008      	b.n	800cab8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800caa6:	4b07      	ldr	r3, [pc, #28]	; (800cac4 <xTimerGenericCommand+0x98>)
 800caa8:	6818      	ldr	r0, [r3, #0]
 800caaa:	f107 0110 	add.w	r1, r7, #16
 800caae:	2300      	movs	r3, #0
 800cab0:	683a      	ldr	r2, [r7, #0]
 800cab2:	f7fe fcbb 	bl	800b42c <xQueueGenericSendFromISR>
 800cab6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3728      	adds	r7, #40	; 0x28
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	2000138c 	.word	0x2000138c

0800cac8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af02      	add	r7, sp, #8
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cad2:	4b22      	ldr	r3, [pc, #136]	; (800cb5c <prvProcessExpiredTimer+0x94>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	3304      	adds	r3, #4
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fe f9d3 	bl	800ae8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800caec:	f003 0304 	and.w	r3, r3, #4
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d022      	beq.n	800cb3a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	699a      	ldr	r2, [r3, #24]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	18d1      	adds	r1, r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	683a      	ldr	r2, [r7, #0]
 800cb00:	6978      	ldr	r0, [r7, #20]
 800cb02:	f000 f8d1 	bl	800cca8 <prvInsertTimerInActiveList>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d01f      	beq.n	800cb4c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	2300      	movs	r3, #0
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	2100      	movs	r1, #0
 800cb16:	6978      	ldr	r0, [r7, #20]
 800cb18:	f7ff ff88 	bl	800ca2c <xTimerGenericCommand>
 800cb1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d113      	bne.n	800cb4c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb28:	f383 8811 	msr	BASEPRI, r3
 800cb2c:	f3bf 8f6f 	isb	sy
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	60fb      	str	r3, [r7, #12]
}
 800cb36:	bf00      	nop
 800cb38:	e7fe      	b.n	800cb38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb40:	f023 0301 	bic.w	r3, r3, #1
 800cb44:	b2da      	uxtb	r2, r3
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	6a1b      	ldr	r3, [r3, #32]
 800cb50:	6978      	ldr	r0, [r7, #20]
 800cb52:	4798      	blx	r3
}
 800cb54:	bf00      	nop
 800cb56:	3718      	adds	r7, #24
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	20001384 	.word	0x20001384

0800cb60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb68:	f107 0308 	add.w	r3, r7, #8
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f000 f857 	bl	800cc20 <prvGetNextExpireTime>
 800cb72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	4619      	mov	r1, r3
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f000 f803 	bl	800cb84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb7e:	f000 f8d5 	bl	800cd2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb82:	e7f1      	b.n	800cb68 <prvTimerTask+0x8>

0800cb84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cb8e:	f7ff fa39 	bl	800c004 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb92:	f107 0308 	add.w	r3, r7, #8
 800cb96:	4618      	mov	r0, r3
 800cb98:	f000 f866 	bl	800cc68 <prvSampleTimeNow>
 800cb9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d130      	bne.n	800cc06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10a      	bne.n	800cbc0 <prvProcessTimerOrBlockTask+0x3c>
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d806      	bhi.n	800cbc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cbb2:	f7ff fa35 	bl	800c020 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cbb6:	68f9      	ldr	r1, [r7, #12]
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f7ff ff85 	bl	800cac8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cbbe:	e024      	b.n	800cc0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d008      	beq.n	800cbd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cbc6:	4b13      	ldr	r3, [pc, #76]	; (800cc14 <prvProcessTimerOrBlockTask+0x90>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d101      	bne.n	800cbd4 <prvProcessTimerOrBlockTask+0x50>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e000      	b.n	800cbd6 <prvProcessTimerOrBlockTask+0x52>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cbd8:	4b0f      	ldr	r3, [pc, #60]	; (800cc18 <prvProcessTimerOrBlockTask+0x94>)
 800cbda:	6818      	ldr	r0, [r3, #0]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	f7fe ffb1 	bl	800bb4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cbea:	f7ff fa19 	bl	800c020 <xTaskResumeAll>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10a      	bne.n	800cc0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cbf4:	4b09      	ldr	r3, [pc, #36]	; (800cc1c <prvProcessTimerOrBlockTask+0x98>)
 800cbf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbfa:	601a      	str	r2, [r3, #0]
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	f3bf 8f6f 	isb	sy
}
 800cc04:	e001      	b.n	800cc0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc06:	f7ff fa0b 	bl	800c020 <xTaskResumeAll>
}
 800cc0a:	bf00      	nop
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	20001388 	.word	0x20001388
 800cc18:	2000138c 	.word	0x2000138c
 800cc1c:	e000ed04 	.word	0xe000ed04

0800cc20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc28:	4b0e      	ldr	r3, [pc, #56]	; (800cc64 <prvGetNextExpireTime+0x44>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d101      	bne.n	800cc36 <prvGetNextExpireTime+0x16>
 800cc32:	2201      	movs	r2, #1
 800cc34:	e000      	b.n	800cc38 <prvGetNextExpireTime+0x18>
 800cc36:	2200      	movs	r2, #0
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d105      	bne.n	800cc50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc44:	4b07      	ldr	r3, [pc, #28]	; (800cc64 <prvGetNextExpireTime+0x44>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	60fb      	str	r3, [r7, #12]
 800cc4e:	e001      	b.n	800cc54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc50:	2300      	movs	r3, #0
 800cc52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc54:	68fb      	ldr	r3, [r7, #12]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	20001384 	.word	0x20001384

0800cc68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc70:	f7ff fa74 	bl	800c15c <xTaskGetTickCount>
 800cc74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc76:	4b0b      	ldr	r3, [pc, #44]	; (800cca4 <prvSampleTimeNow+0x3c>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d205      	bcs.n	800cc8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc80:	f000 f936 	bl	800cef0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	601a      	str	r2, [r3, #0]
 800cc8a:	e002      	b.n	800cc92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cc92:	4a04      	ldr	r2, [pc, #16]	; (800cca4 <prvSampleTimeNow+0x3c>)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cc98:	68fb      	ldr	r3, [r7, #12]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	20001394 	.word	0x20001394

0800cca8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b086      	sub	sp, #24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
 800ccb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d812      	bhi.n	800ccf4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	1ad2      	subs	r2, r2, r3
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	699b      	ldr	r3, [r3, #24]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d302      	bcc.n	800cce2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	617b      	str	r3, [r7, #20]
 800cce0:	e01b      	b.n	800cd1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cce2:	4b10      	ldr	r3, [pc, #64]	; (800cd24 <prvInsertTimerInActiveList+0x7c>)
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	3304      	adds	r3, #4
 800ccea:	4619      	mov	r1, r3
 800ccec:	4610      	mov	r0, r2
 800ccee:	f7fe f894 	bl	800ae1a <vListInsert>
 800ccf2:	e012      	b.n	800cd1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d206      	bcs.n	800cd0a <prvInsertTimerInActiveList+0x62>
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d302      	bcc.n	800cd0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd04:	2301      	movs	r3, #1
 800cd06:	617b      	str	r3, [r7, #20]
 800cd08:	e007      	b.n	800cd1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd0a:	4b07      	ldr	r3, [pc, #28]	; (800cd28 <prvInsertTimerInActiveList+0x80>)
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	3304      	adds	r3, #4
 800cd12:	4619      	mov	r1, r3
 800cd14:	4610      	mov	r0, r2
 800cd16:	f7fe f880 	bl	800ae1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd1a:	697b      	ldr	r3, [r7, #20]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3718      	adds	r7, #24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	20001388 	.word	0x20001388
 800cd28:	20001384 	.word	0x20001384

0800cd2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08e      	sub	sp, #56	; 0x38
 800cd30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd32:	e0ca      	b.n	800ceca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	da18      	bge.n	800cd6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd3a:	1d3b      	adds	r3, r7, #4
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d10a      	bne.n	800cd5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	61fb      	str	r3, [r7, #28]
}
 800cd58:	bf00      	nop
 800cd5a:	e7fe      	b.n	800cd5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd62:	6850      	ldr	r0, [r2, #4]
 800cd64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd66:	6892      	ldr	r2, [r2, #8]
 800cd68:	4611      	mov	r1, r2
 800cd6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f2c0 80aa 	blt.w	800cec8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7a:	695b      	ldr	r3, [r3, #20]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d004      	beq.n	800cd8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd82:	3304      	adds	r3, #4
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fe f881 	bl	800ae8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd8a:	463b      	mov	r3, r7
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7ff ff6b 	bl	800cc68 <prvSampleTimeNow>
 800cd92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b09      	cmp	r3, #9
 800cd98:	f200 8097 	bhi.w	800ceca <prvProcessReceivedCommands+0x19e>
 800cd9c:	a201      	add	r2, pc, #4	; (adr r2, 800cda4 <prvProcessReceivedCommands+0x78>)
 800cd9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda2:	bf00      	nop
 800cda4:	0800cdcd 	.word	0x0800cdcd
 800cda8:	0800cdcd 	.word	0x0800cdcd
 800cdac:	0800cdcd 	.word	0x0800cdcd
 800cdb0:	0800ce41 	.word	0x0800ce41
 800cdb4:	0800ce55 	.word	0x0800ce55
 800cdb8:	0800ce9f 	.word	0x0800ce9f
 800cdbc:	0800cdcd 	.word	0x0800cdcd
 800cdc0:	0800cdcd 	.word	0x0800cdcd
 800cdc4:	0800ce41 	.word	0x0800ce41
 800cdc8:	0800ce55 	.word	0x0800ce55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdd2:	f043 0301 	orr.w	r3, r3, #1
 800cdd6:	b2da      	uxtb	r2, r3
 800cdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde2:	699b      	ldr	r3, [r3, #24]
 800cde4:	18d1      	adds	r1, r2, r3
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdec:	f7ff ff5c 	bl	800cca8 <prvInsertTimerInActiveList>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d069      	beq.n	800ceca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf8:	6a1b      	ldr	r3, [r3, #32]
 800cdfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce04:	f003 0304 	and.w	r3, r3, #4
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d05e      	beq.n	800ceca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce10:	699b      	ldr	r3, [r3, #24]
 800ce12:	441a      	add	r2, r3
 800ce14:	2300      	movs	r3, #0
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce1e:	f7ff fe05 	bl	800ca2c <xTimerGenericCommand>
 800ce22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce24:	6a3b      	ldr	r3, [r7, #32]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d14f      	bne.n	800ceca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ce2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	61bb      	str	r3, [r7, #24]
}
 800ce3c:	bf00      	nop
 800ce3e:	e7fe      	b.n	800ce3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce46:	f023 0301 	bic.w	r3, r3, #1
 800ce4a:	b2da      	uxtb	r2, r3
 800ce4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ce52:	e03a      	b.n	800ceca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce5a:	f043 0301 	orr.w	r3, r3, #1
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	699b      	ldr	r3, [r3, #24]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d10a      	bne.n	800ce8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ce74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce78:	f383 8811 	msr	BASEPRI, r3
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f3bf 8f4f 	dsb	sy
 800ce84:	617b      	str	r3, [r7, #20]
}
 800ce86:	bf00      	nop
 800ce88:	e7fe      	b.n	800ce88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ce8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8c:	699a      	ldr	r2, [r3, #24]
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce90:	18d1      	adds	r1, r2, r3
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce98:	f7ff ff06 	bl	800cca8 <prvInsertTimerInActiveList>
					break;
 800ce9c:	e015      	b.n	800ceca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ce9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cea4:	f003 0302 	and.w	r3, r3, #2
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d103      	bne.n	800ceb4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ceac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceae:	f000 fbdf 	bl	800d670 <vPortFree>
 800ceb2:	e00a      	b.n	800ceca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ceb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ceba:	f023 0301 	bic.w	r3, r3, #1
 800cebe:	b2da      	uxtb	r2, r3
 800cec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cec6:	e000      	b.n	800ceca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cec8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ceca:	4b08      	ldr	r3, [pc, #32]	; (800ceec <prvProcessReceivedCommands+0x1c0>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	1d39      	adds	r1, r7, #4
 800ced0:	2200      	movs	r2, #0
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fe fbd2 	bl	800b67c <xQueueReceive>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	f47f af2a 	bne.w	800cd34 <prvProcessReceivedCommands+0x8>
	}
}
 800cee0:	bf00      	nop
 800cee2:	bf00      	nop
 800cee4:	3730      	adds	r7, #48	; 0x30
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	2000138c 	.word	0x2000138c

0800cef0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b088      	sub	sp, #32
 800cef4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cef6:	e048      	b.n	800cf8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cef8:	4b2d      	ldr	r3, [pc, #180]	; (800cfb0 <prvSwitchTimerLists+0xc0>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf02:	4b2b      	ldr	r3, [pc, #172]	; (800cfb0 <prvSwitchTimerLists+0xc0>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	68db      	ldr	r3, [r3, #12]
 800cf08:	68db      	ldr	r3, [r3, #12]
 800cf0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	3304      	adds	r3, #4
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fd ffbb 	bl	800ae8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf24:	f003 0304 	and.w	r3, r3, #4
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d02e      	beq.n	800cf8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	699b      	ldr	r3, [r3, #24]
 800cf30:	693a      	ldr	r2, [r7, #16]
 800cf32:	4413      	add	r3, r2
 800cf34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf36:	68ba      	ldr	r2, [r7, #8]
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d90e      	bls.n	800cf5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf4a:	4b19      	ldr	r3, [pc, #100]	; (800cfb0 <prvSwitchTimerLists+0xc0>)
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	3304      	adds	r3, #4
 800cf52:	4619      	mov	r1, r3
 800cf54:	4610      	mov	r0, r2
 800cf56:	f7fd ff60 	bl	800ae1a <vListInsert>
 800cf5a:	e016      	b.n	800cf8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	9300      	str	r3, [sp, #0]
 800cf60:	2300      	movs	r3, #0
 800cf62:	693a      	ldr	r2, [r7, #16]
 800cf64:	2100      	movs	r1, #0
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f7ff fd60 	bl	800ca2c <xTimerGenericCommand>
 800cf6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d10a      	bne.n	800cf8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf78:	f383 8811 	msr	BASEPRI, r3
 800cf7c:	f3bf 8f6f 	isb	sy
 800cf80:	f3bf 8f4f 	dsb	sy
 800cf84:	603b      	str	r3, [r7, #0]
}
 800cf86:	bf00      	nop
 800cf88:	e7fe      	b.n	800cf88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf8a:	4b09      	ldr	r3, [pc, #36]	; (800cfb0 <prvSwitchTimerLists+0xc0>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d1b1      	bne.n	800cef8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cf94:	4b06      	ldr	r3, [pc, #24]	; (800cfb0 <prvSwitchTimerLists+0xc0>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cf9a:	4b06      	ldr	r3, [pc, #24]	; (800cfb4 <prvSwitchTimerLists+0xc4>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4a04      	ldr	r2, [pc, #16]	; (800cfb0 <prvSwitchTimerLists+0xc0>)
 800cfa0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cfa2:	4a04      	ldr	r2, [pc, #16]	; (800cfb4 <prvSwitchTimerLists+0xc4>)
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	6013      	str	r3, [r2, #0]
}
 800cfa8:	bf00      	nop
 800cfaa:	3718      	adds	r7, #24
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	20001384 	.word	0x20001384
 800cfb4:	20001388 	.word	0x20001388

0800cfb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cfbe:	f000 f969 	bl	800d294 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cfc2:	4b15      	ldr	r3, [pc, #84]	; (800d018 <prvCheckForValidListAndQueue+0x60>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d120      	bne.n	800d00c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cfca:	4814      	ldr	r0, [pc, #80]	; (800d01c <prvCheckForValidListAndQueue+0x64>)
 800cfcc:	f7fd fed4 	bl	800ad78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cfd0:	4813      	ldr	r0, [pc, #76]	; (800d020 <prvCheckForValidListAndQueue+0x68>)
 800cfd2:	f7fd fed1 	bl	800ad78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cfd6:	4b13      	ldr	r3, [pc, #76]	; (800d024 <prvCheckForValidListAndQueue+0x6c>)
 800cfd8:	4a10      	ldr	r2, [pc, #64]	; (800d01c <prvCheckForValidListAndQueue+0x64>)
 800cfda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cfdc:	4b12      	ldr	r3, [pc, #72]	; (800d028 <prvCheckForValidListAndQueue+0x70>)
 800cfde:	4a10      	ldr	r2, [pc, #64]	; (800d020 <prvCheckForValidListAndQueue+0x68>)
 800cfe0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	9300      	str	r3, [sp, #0]
 800cfe6:	4b11      	ldr	r3, [pc, #68]	; (800d02c <prvCheckForValidListAndQueue+0x74>)
 800cfe8:	4a11      	ldr	r2, [pc, #68]	; (800d030 <prvCheckForValidListAndQueue+0x78>)
 800cfea:	2110      	movs	r1, #16
 800cfec:	200a      	movs	r0, #10
 800cfee:	f7fd ffdf 	bl	800afb0 <xQueueGenericCreateStatic>
 800cff2:	4603      	mov	r3, r0
 800cff4:	4a08      	ldr	r2, [pc, #32]	; (800d018 <prvCheckForValidListAndQueue+0x60>)
 800cff6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cff8:	4b07      	ldr	r3, [pc, #28]	; (800d018 <prvCheckForValidListAndQueue+0x60>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d005      	beq.n	800d00c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d000:	4b05      	ldr	r3, [pc, #20]	; (800d018 <prvCheckForValidListAndQueue+0x60>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	490b      	ldr	r1, [pc, #44]	; (800d034 <prvCheckForValidListAndQueue+0x7c>)
 800d006:	4618      	mov	r0, r3
 800d008:	f7fe fd4c 	bl	800baa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d00c:	f000 f972 	bl	800d2f4 <vPortExitCritical>
}
 800d010:	bf00      	nop
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	2000138c 	.word	0x2000138c
 800d01c:	2000135c 	.word	0x2000135c
 800d020:	20001370 	.word	0x20001370
 800d024:	20001384 	.word	0x20001384
 800d028:	20001388 	.word	0x20001388
 800d02c:	20001438 	.word	0x20001438
 800d030:	20001398 	.word	0x20001398
 800d034:	0800e5c8 	.word	0x0800e5c8

0800d038 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d038:	b480      	push	{r7}
 800d03a:	b085      	sub	sp, #20
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	3b04      	subs	r3, #4
 800d048:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	3b04      	subs	r3, #4
 800d056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	f023 0201 	bic.w	r2, r3, #1
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	3b04      	subs	r3, #4
 800d066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d068:	4a0c      	ldr	r2, [pc, #48]	; (800d09c <pxPortInitialiseStack+0x64>)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	3b14      	subs	r3, #20
 800d072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3b04      	subs	r3, #4
 800d07e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f06f 0202 	mvn.w	r2, #2
 800d086:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	3b20      	subs	r3, #32
 800d08c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d08e:	68fb      	ldr	r3, [r7, #12]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3714      	adds	r7, #20
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr
 800d09c:	0800d0a1 	.word	0x0800d0a1

0800d0a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0aa:	4b12      	ldr	r3, [pc, #72]	; (800d0f4 <prvTaskExitError+0x54>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b2:	d00a      	beq.n	800d0ca <prvTaskExitError+0x2a>
	__asm volatile
 800d0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	60fb      	str	r3, [r7, #12]
}
 800d0c6:	bf00      	nop
 800d0c8:	e7fe      	b.n	800d0c8 <prvTaskExitError+0x28>
	__asm volatile
 800d0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ce:	f383 8811 	msr	BASEPRI, r3
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	60bb      	str	r3, [r7, #8]
}
 800d0dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d0de:	bf00      	nop
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d0fc      	beq.n	800d0e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0e6:	bf00      	nop
 800d0e8:	bf00      	nop
 800d0ea:	3714      	adds	r7, #20
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	20000098 	.word	0x20000098
	...

0800d100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d100:	4b07      	ldr	r3, [pc, #28]	; (800d120 <pxCurrentTCBConst2>)
 800d102:	6819      	ldr	r1, [r3, #0]
 800d104:	6808      	ldr	r0, [r1, #0]
 800d106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10a:	f380 8809 	msr	PSP, r0
 800d10e:	f3bf 8f6f 	isb	sy
 800d112:	f04f 0000 	mov.w	r0, #0
 800d116:	f380 8811 	msr	BASEPRI, r0
 800d11a:	4770      	bx	lr
 800d11c:	f3af 8000 	nop.w

0800d120 <pxCurrentTCBConst2>:
 800d120:	20000e5c 	.word	0x20000e5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d124:	bf00      	nop
 800d126:	bf00      	nop

0800d128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d128:	4808      	ldr	r0, [pc, #32]	; (800d14c <prvPortStartFirstTask+0x24>)
 800d12a:	6800      	ldr	r0, [r0, #0]
 800d12c:	6800      	ldr	r0, [r0, #0]
 800d12e:	f380 8808 	msr	MSP, r0
 800d132:	f04f 0000 	mov.w	r0, #0
 800d136:	f380 8814 	msr	CONTROL, r0
 800d13a:	b662      	cpsie	i
 800d13c:	b661      	cpsie	f
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	df00      	svc	0
 800d148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d14a:	bf00      	nop
 800d14c:	e000ed08 	.word	0xe000ed08

0800d150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d156:	4b46      	ldr	r3, [pc, #280]	; (800d270 <xPortStartScheduler+0x120>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a46      	ldr	r2, [pc, #280]	; (800d274 <xPortStartScheduler+0x124>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d10a      	bne.n	800d176 <xPortStartScheduler+0x26>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	613b      	str	r3, [r7, #16]
}
 800d172:	bf00      	nop
 800d174:	e7fe      	b.n	800d174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d176:	4b3e      	ldr	r3, [pc, #248]	; (800d270 <xPortStartScheduler+0x120>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a3f      	ldr	r2, [pc, #252]	; (800d278 <xPortStartScheduler+0x128>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d10a      	bne.n	800d196 <xPortStartScheduler+0x46>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	60fb      	str	r3, [r7, #12]
}
 800d192:	bf00      	nop
 800d194:	e7fe      	b.n	800d194 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d196:	4b39      	ldr	r3, [pc, #228]	; (800d27c <xPortStartScheduler+0x12c>)
 800d198:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	22ff      	movs	r2, #255	; 0xff
 800d1a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d1b8:	b2da      	uxtb	r2, r3
 800d1ba:	4b31      	ldr	r3, [pc, #196]	; (800d280 <xPortStartScheduler+0x130>)
 800d1bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d1be:	4b31      	ldr	r3, [pc, #196]	; (800d284 <xPortStartScheduler+0x134>)
 800d1c0:	2207      	movs	r2, #7
 800d1c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1c4:	e009      	b.n	800d1da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d1c6:	4b2f      	ldr	r3, [pc, #188]	; (800d284 <xPortStartScheduler+0x134>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	3b01      	subs	r3, #1
 800d1cc:	4a2d      	ldr	r2, [pc, #180]	; (800d284 <xPortStartScheduler+0x134>)
 800d1ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1d0:	78fb      	ldrb	r3, [r7, #3]
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	005b      	lsls	r3, r3, #1
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1da:	78fb      	ldrb	r3, [r7, #3]
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1e2:	2b80      	cmp	r3, #128	; 0x80
 800d1e4:	d0ef      	beq.n	800d1c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1e6:	4b27      	ldr	r3, [pc, #156]	; (800d284 <xPortStartScheduler+0x134>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f1c3 0307 	rsb	r3, r3, #7
 800d1ee:	2b04      	cmp	r3, #4
 800d1f0:	d00a      	beq.n	800d208 <xPortStartScheduler+0xb8>
	__asm volatile
 800d1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f6:	f383 8811 	msr	BASEPRI, r3
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	60bb      	str	r3, [r7, #8]
}
 800d204:	bf00      	nop
 800d206:	e7fe      	b.n	800d206 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d208:	4b1e      	ldr	r3, [pc, #120]	; (800d284 <xPortStartScheduler+0x134>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	021b      	lsls	r3, r3, #8
 800d20e:	4a1d      	ldr	r2, [pc, #116]	; (800d284 <xPortStartScheduler+0x134>)
 800d210:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d212:	4b1c      	ldr	r3, [pc, #112]	; (800d284 <xPortStartScheduler+0x134>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d21a:	4a1a      	ldr	r2, [pc, #104]	; (800d284 <xPortStartScheduler+0x134>)
 800d21c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	b2da      	uxtb	r2, r3
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d226:	4b18      	ldr	r3, [pc, #96]	; (800d288 <xPortStartScheduler+0x138>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a17      	ldr	r2, [pc, #92]	; (800d288 <xPortStartScheduler+0x138>)
 800d22c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d232:	4b15      	ldr	r3, [pc, #84]	; (800d288 <xPortStartScheduler+0x138>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4a14      	ldr	r2, [pc, #80]	; (800d288 <xPortStartScheduler+0x138>)
 800d238:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d23c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d23e:	f000 f8dd 	bl	800d3fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d242:	4b12      	ldr	r3, [pc, #72]	; (800d28c <xPortStartScheduler+0x13c>)
 800d244:	2200      	movs	r2, #0
 800d246:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d248:	f000 f8fc 	bl	800d444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d24c:	4b10      	ldr	r3, [pc, #64]	; (800d290 <xPortStartScheduler+0x140>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a0f      	ldr	r2, [pc, #60]	; (800d290 <xPortStartScheduler+0x140>)
 800d252:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d256:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d258:	f7ff ff66 	bl	800d128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d25c:	f7ff f848 	bl	800c2f0 <vTaskSwitchContext>
	prvTaskExitError();
 800d260:	f7ff ff1e 	bl	800d0a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d264:	2300      	movs	r3, #0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3718      	adds	r7, #24
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	e000ed00 	.word	0xe000ed00
 800d274:	410fc271 	.word	0x410fc271
 800d278:	410fc270 	.word	0x410fc270
 800d27c:	e000e400 	.word	0xe000e400
 800d280:	20001488 	.word	0x20001488
 800d284:	2000148c 	.word	0x2000148c
 800d288:	e000ed20 	.word	0xe000ed20
 800d28c:	20000098 	.word	0x20000098
 800d290:	e000ef34 	.word	0xe000ef34

0800d294 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
	__asm volatile
 800d29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	607b      	str	r3, [r7, #4]
}
 800d2ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d2ae:	4b0f      	ldr	r3, [pc, #60]	; (800d2ec <vPortEnterCritical+0x58>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	4a0d      	ldr	r2, [pc, #52]	; (800d2ec <vPortEnterCritical+0x58>)
 800d2b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d2b8:	4b0c      	ldr	r3, [pc, #48]	; (800d2ec <vPortEnterCritical+0x58>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d10f      	bne.n	800d2e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2c0:	4b0b      	ldr	r3, [pc, #44]	; (800d2f0 <vPortEnterCritical+0x5c>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00a      	beq.n	800d2e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ce:	f383 8811 	msr	BASEPRI, r3
 800d2d2:	f3bf 8f6f 	isb	sy
 800d2d6:	f3bf 8f4f 	dsb	sy
 800d2da:	603b      	str	r3, [r7, #0]
}
 800d2dc:	bf00      	nop
 800d2de:	e7fe      	b.n	800d2de <vPortEnterCritical+0x4a>
	}
}
 800d2e0:	bf00      	nop
 800d2e2:	370c      	adds	r7, #12
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	20000098 	.word	0x20000098
 800d2f0:	e000ed04 	.word	0xe000ed04

0800d2f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d2fa:	4b12      	ldr	r3, [pc, #72]	; (800d344 <vPortExitCritical+0x50>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d10a      	bne.n	800d318 <vPortExitCritical+0x24>
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d306:	f383 8811 	msr	BASEPRI, r3
 800d30a:	f3bf 8f6f 	isb	sy
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	607b      	str	r3, [r7, #4]
}
 800d314:	bf00      	nop
 800d316:	e7fe      	b.n	800d316 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d318:	4b0a      	ldr	r3, [pc, #40]	; (800d344 <vPortExitCritical+0x50>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	3b01      	subs	r3, #1
 800d31e:	4a09      	ldr	r2, [pc, #36]	; (800d344 <vPortExitCritical+0x50>)
 800d320:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d322:	4b08      	ldr	r3, [pc, #32]	; (800d344 <vPortExitCritical+0x50>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d105      	bne.n	800d336 <vPortExitCritical+0x42>
 800d32a:	2300      	movs	r3, #0
 800d32c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	f383 8811 	msr	BASEPRI, r3
}
 800d334:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d336:	bf00      	nop
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	20000098 	.word	0x20000098
	...

0800d350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d350:	f3ef 8009 	mrs	r0, PSP
 800d354:	f3bf 8f6f 	isb	sy
 800d358:	4b15      	ldr	r3, [pc, #84]	; (800d3b0 <pxCurrentTCBConst>)
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	f01e 0f10 	tst.w	lr, #16
 800d360:	bf08      	it	eq
 800d362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36a:	6010      	str	r0, [r2, #0]
 800d36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d370:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d374:	f380 8811 	msr	BASEPRI, r0
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	f7fe ffb6 	bl	800c2f0 <vTaskSwitchContext>
 800d384:	f04f 0000 	mov.w	r0, #0
 800d388:	f380 8811 	msr	BASEPRI, r0
 800d38c:	bc09      	pop	{r0, r3}
 800d38e:	6819      	ldr	r1, [r3, #0]
 800d390:	6808      	ldr	r0, [r1, #0]
 800d392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d396:	f01e 0f10 	tst.w	lr, #16
 800d39a:	bf08      	it	eq
 800d39c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d3a0:	f380 8809 	msr	PSP, r0
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	f3af 8000 	nop.w

0800d3b0 <pxCurrentTCBConst>:
 800d3b0:	20000e5c 	.word	0x20000e5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d3b4:	bf00      	nop
 800d3b6:	bf00      	nop

0800d3b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	607b      	str	r3, [r7, #4]
}
 800d3d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3d2:	f7fe fed3 	bl	800c17c <xTaskIncrementTick>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d003      	beq.n	800d3e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3dc:	4b06      	ldr	r3, [pc, #24]	; (800d3f8 <xPortSysTickHandler+0x40>)
 800d3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3e2:	601a      	str	r2, [r3, #0]
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	f383 8811 	msr	BASEPRI, r3
}
 800d3ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d3f0:	bf00      	nop
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	e000ed04 	.word	0xe000ed04

0800d3fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d400:	4b0b      	ldr	r3, [pc, #44]	; (800d430 <vPortSetupTimerInterrupt+0x34>)
 800d402:	2200      	movs	r2, #0
 800d404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d406:	4b0b      	ldr	r3, [pc, #44]	; (800d434 <vPortSetupTimerInterrupt+0x38>)
 800d408:	2200      	movs	r2, #0
 800d40a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d40c:	4b0a      	ldr	r3, [pc, #40]	; (800d438 <vPortSetupTimerInterrupt+0x3c>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a0a      	ldr	r2, [pc, #40]	; (800d43c <vPortSetupTimerInterrupt+0x40>)
 800d412:	fba2 2303 	umull	r2, r3, r2, r3
 800d416:	099b      	lsrs	r3, r3, #6
 800d418:	4a09      	ldr	r2, [pc, #36]	; (800d440 <vPortSetupTimerInterrupt+0x44>)
 800d41a:	3b01      	subs	r3, #1
 800d41c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d41e:	4b04      	ldr	r3, [pc, #16]	; (800d430 <vPortSetupTimerInterrupt+0x34>)
 800d420:	2207      	movs	r2, #7
 800d422:	601a      	str	r2, [r3, #0]
}
 800d424:	bf00      	nop
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	e000e010 	.word	0xe000e010
 800d434:	e000e018 	.word	0xe000e018
 800d438:	20000000 	.word	0x20000000
 800d43c:	10624dd3 	.word	0x10624dd3
 800d440:	e000e014 	.word	0xe000e014

0800d444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d444:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d454 <vPortEnableVFP+0x10>
 800d448:	6801      	ldr	r1, [r0, #0]
 800d44a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d44e:	6001      	str	r1, [r0, #0]
 800d450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d452:	bf00      	nop
 800d454:	e000ed88 	.word	0xe000ed88

0800d458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d45e:	f3ef 8305 	mrs	r3, IPSR
 800d462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2b0f      	cmp	r3, #15
 800d468:	d914      	bls.n	800d494 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d46a:	4a17      	ldr	r2, [pc, #92]	; (800d4c8 <vPortValidateInterruptPriority+0x70>)
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	4413      	add	r3, r2
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d474:	4b15      	ldr	r3, [pc, #84]	; (800d4cc <vPortValidateInterruptPriority+0x74>)
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	7afa      	ldrb	r2, [r7, #11]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d20a      	bcs.n	800d494 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	607b      	str	r3, [r7, #4]
}
 800d490:	bf00      	nop
 800d492:	e7fe      	b.n	800d492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d494:	4b0e      	ldr	r3, [pc, #56]	; (800d4d0 <vPortValidateInterruptPriority+0x78>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d49c:	4b0d      	ldr	r3, [pc, #52]	; (800d4d4 <vPortValidateInterruptPriority+0x7c>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d90a      	bls.n	800d4ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	603b      	str	r3, [r7, #0]
}
 800d4b6:	bf00      	nop
 800d4b8:	e7fe      	b.n	800d4b8 <vPortValidateInterruptPriority+0x60>
	}
 800d4ba:	bf00      	nop
 800d4bc:	3714      	adds	r7, #20
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop
 800d4c8:	e000e3f0 	.word	0xe000e3f0
 800d4cc:	20001488 	.word	0x20001488
 800d4d0:	e000ed0c 	.word	0xe000ed0c
 800d4d4:	2000148c 	.word	0x2000148c

0800d4d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b08a      	sub	sp, #40	; 0x28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4e4:	f7fe fd8e 	bl	800c004 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4e8:	4b5b      	ldr	r3, [pc, #364]	; (800d658 <pvPortMalloc+0x180>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d101      	bne.n	800d4f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d4f0:	f000 f920 	bl	800d734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d4f4:	4b59      	ldr	r3, [pc, #356]	; (800d65c <pvPortMalloc+0x184>)
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	4013      	ands	r3, r2
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f040 8093 	bne.w	800d628 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d01d      	beq.n	800d544 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d508:	2208      	movs	r2, #8
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4413      	add	r3, r2
 800d50e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f003 0307 	and.w	r3, r3, #7
 800d516:	2b00      	cmp	r3, #0
 800d518:	d014      	beq.n	800d544 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f023 0307 	bic.w	r3, r3, #7
 800d520:	3308      	adds	r3, #8
 800d522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f003 0307 	and.w	r3, r3, #7
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00a      	beq.n	800d544 <pvPortMalloc+0x6c>
	__asm volatile
 800d52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d532:	f383 8811 	msr	BASEPRI, r3
 800d536:	f3bf 8f6f 	isb	sy
 800d53a:	f3bf 8f4f 	dsb	sy
 800d53e:	617b      	str	r3, [r7, #20]
}
 800d540:	bf00      	nop
 800d542:	e7fe      	b.n	800d542 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d06e      	beq.n	800d628 <pvPortMalloc+0x150>
 800d54a:	4b45      	ldr	r3, [pc, #276]	; (800d660 <pvPortMalloc+0x188>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	429a      	cmp	r2, r3
 800d552:	d869      	bhi.n	800d628 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d554:	4b43      	ldr	r3, [pc, #268]	; (800d664 <pvPortMalloc+0x18c>)
 800d556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d558:	4b42      	ldr	r3, [pc, #264]	; (800d664 <pvPortMalloc+0x18c>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d55e:	e004      	b.n	800d56a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	429a      	cmp	r2, r3
 800d572:	d903      	bls.n	800d57c <pvPortMalloc+0xa4>
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1f1      	bne.n	800d560 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d57c:	4b36      	ldr	r3, [pc, #216]	; (800d658 <pvPortMalloc+0x180>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d582:	429a      	cmp	r2, r3
 800d584:	d050      	beq.n	800d628 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2208      	movs	r2, #8
 800d58c:	4413      	add	r3, r2
 800d58e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59a:	685a      	ldr	r2, [r3, #4]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	1ad2      	subs	r2, r2, r3
 800d5a0:	2308      	movs	r3, #8
 800d5a2:	005b      	lsls	r3, r3, #1
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d91f      	bls.n	800d5e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	f003 0307 	and.w	r3, r3, #7
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00a      	beq.n	800d5d0 <pvPortMalloc+0xf8>
	__asm volatile
 800d5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5be:	f383 8811 	msr	BASEPRI, r3
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	f3bf 8f4f 	dsb	sy
 800d5ca:	613b      	str	r3, [r7, #16]
}
 800d5cc:	bf00      	nop
 800d5ce:	e7fe      	b.n	800d5ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d2:	685a      	ldr	r2, [r3, #4]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	1ad2      	subs	r2, r2, r3
 800d5d8:	69bb      	ldr	r3, [r7, #24]
 800d5da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5e2:	69b8      	ldr	r0, [r7, #24]
 800d5e4:	f000 f908 	bl	800d7f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5e8:	4b1d      	ldr	r3, [pc, #116]	; (800d660 <pvPortMalloc+0x188>)
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	1ad3      	subs	r3, r2, r3
 800d5f2:	4a1b      	ldr	r2, [pc, #108]	; (800d660 <pvPortMalloc+0x188>)
 800d5f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5f6:	4b1a      	ldr	r3, [pc, #104]	; (800d660 <pvPortMalloc+0x188>)
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	4b1b      	ldr	r3, [pc, #108]	; (800d668 <pvPortMalloc+0x190>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d203      	bcs.n	800d60a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d602:	4b17      	ldr	r3, [pc, #92]	; (800d660 <pvPortMalloc+0x188>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a18      	ldr	r2, [pc, #96]	; (800d668 <pvPortMalloc+0x190>)
 800d608:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	685a      	ldr	r2, [r3, #4]
 800d60e:	4b13      	ldr	r3, [pc, #76]	; (800d65c <pvPortMalloc+0x184>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	431a      	orrs	r2, r3
 800d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d616:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	2200      	movs	r2, #0
 800d61c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d61e:	4b13      	ldr	r3, [pc, #76]	; (800d66c <pvPortMalloc+0x194>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	3301      	adds	r3, #1
 800d624:	4a11      	ldr	r2, [pc, #68]	; (800d66c <pvPortMalloc+0x194>)
 800d626:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d628:	f7fe fcfa 	bl	800c020 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	f003 0307 	and.w	r3, r3, #7
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00a      	beq.n	800d64c <pvPortMalloc+0x174>
	__asm volatile
 800d636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63a:	f383 8811 	msr	BASEPRI, r3
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	60fb      	str	r3, [r7, #12]
}
 800d648:	bf00      	nop
 800d64a:	e7fe      	b.n	800d64a <pvPortMalloc+0x172>
	return pvReturn;
 800d64c:	69fb      	ldr	r3, [r7, #28]
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3728      	adds	r7, #40	; 0x28
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	20005098 	.word	0x20005098
 800d65c:	200050ac 	.word	0x200050ac
 800d660:	2000509c 	.word	0x2000509c
 800d664:	20005090 	.word	0x20005090
 800d668:	200050a0 	.word	0x200050a0
 800d66c:	200050a4 	.word	0x200050a4

0800d670 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b086      	sub	sp, #24
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d04d      	beq.n	800d71e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d682:	2308      	movs	r3, #8
 800d684:	425b      	negs	r3, r3
 800d686:	697a      	ldr	r2, [r7, #20]
 800d688:	4413      	add	r3, r2
 800d68a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	4b24      	ldr	r3, [pc, #144]	; (800d728 <vPortFree+0xb8>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4013      	ands	r3, r2
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d10a      	bne.n	800d6b4 <vPortFree+0x44>
	__asm volatile
 800d69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	60fb      	str	r3, [r7, #12]
}
 800d6b0:	bf00      	nop
 800d6b2:	e7fe      	b.n	800d6b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00a      	beq.n	800d6d2 <vPortFree+0x62>
	__asm volatile
 800d6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c0:	f383 8811 	msr	BASEPRI, r3
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	f3bf 8f4f 	dsb	sy
 800d6cc:	60bb      	str	r3, [r7, #8]
}
 800d6ce:	bf00      	nop
 800d6d0:	e7fe      	b.n	800d6d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	685a      	ldr	r2, [r3, #4]
 800d6d6:	4b14      	ldr	r3, [pc, #80]	; (800d728 <vPortFree+0xb8>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4013      	ands	r3, r2
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d01e      	beq.n	800d71e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d11a      	bne.n	800d71e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	685a      	ldr	r2, [r3, #4]
 800d6ec:	4b0e      	ldr	r3, [pc, #56]	; (800d728 <vPortFree+0xb8>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	43db      	mvns	r3, r3
 800d6f2:	401a      	ands	r2, r3
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d6f8:	f7fe fc84 	bl	800c004 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	685a      	ldr	r2, [r3, #4]
 800d700:	4b0a      	ldr	r3, [pc, #40]	; (800d72c <vPortFree+0xbc>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4413      	add	r3, r2
 800d706:	4a09      	ldr	r2, [pc, #36]	; (800d72c <vPortFree+0xbc>)
 800d708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d70a:	6938      	ldr	r0, [r7, #16]
 800d70c:	f000 f874 	bl	800d7f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d710:	4b07      	ldr	r3, [pc, #28]	; (800d730 <vPortFree+0xc0>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	3301      	adds	r3, #1
 800d716:	4a06      	ldr	r2, [pc, #24]	; (800d730 <vPortFree+0xc0>)
 800d718:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d71a:	f7fe fc81 	bl	800c020 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d71e:	bf00      	nop
 800d720:	3718      	adds	r7, #24
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	200050ac 	.word	0x200050ac
 800d72c:	2000509c 	.word	0x2000509c
 800d730:	200050a8 	.word	0x200050a8

0800d734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d734:	b480      	push	{r7}
 800d736:	b085      	sub	sp, #20
 800d738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d73a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d73e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d740:	4b27      	ldr	r3, [pc, #156]	; (800d7e0 <prvHeapInit+0xac>)
 800d742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f003 0307 	and.w	r3, r3, #7
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d00c      	beq.n	800d768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	3307      	adds	r3, #7
 800d752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f023 0307 	bic.w	r3, r3, #7
 800d75a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d75c:	68ba      	ldr	r2, [r7, #8]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	1ad3      	subs	r3, r2, r3
 800d762:	4a1f      	ldr	r2, [pc, #124]	; (800d7e0 <prvHeapInit+0xac>)
 800d764:	4413      	add	r3, r2
 800d766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d76c:	4a1d      	ldr	r2, [pc, #116]	; (800d7e4 <prvHeapInit+0xb0>)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d772:	4b1c      	ldr	r3, [pc, #112]	; (800d7e4 <prvHeapInit+0xb0>)
 800d774:	2200      	movs	r2, #0
 800d776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	68ba      	ldr	r2, [r7, #8]
 800d77c:	4413      	add	r3, r2
 800d77e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d780:	2208      	movs	r2, #8
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	1a9b      	subs	r3, r3, r2
 800d786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f023 0307 	bic.w	r3, r3, #7
 800d78e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	4a15      	ldr	r2, [pc, #84]	; (800d7e8 <prvHeapInit+0xb4>)
 800d794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d796:	4b14      	ldr	r3, [pc, #80]	; (800d7e8 <prvHeapInit+0xb4>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2200      	movs	r2, #0
 800d79c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d79e:	4b12      	ldr	r3, [pc, #72]	; (800d7e8 <prvHeapInit+0xb4>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	68fa      	ldr	r2, [r7, #12]
 800d7ae:	1ad2      	subs	r2, r2, r3
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7b4:	4b0c      	ldr	r3, [pc, #48]	; (800d7e8 <prvHeapInit+0xb4>)
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	4a0a      	ldr	r2, [pc, #40]	; (800d7ec <prvHeapInit+0xb8>)
 800d7c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	4a09      	ldr	r2, [pc, #36]	; (800d7f0 <prvHeapInit+0xbc>)
 800d7ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7cc:	4b09      	ldr	r3, [pc, #36]	; (800d7f4 <prvHeapInit+0xc0>)
 800d7ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d7d2:	601a      	str	r2, [r3, #0]
}
 800d7d4:	bf00      	nop
 800d7d6:	3714      	adds	r7, #20
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr
 800d7e0:	20001490 	.word	0x20001490
 800d7e4:	20005090 	.word	0x20005090
 800d7e8:	20005098 	.word	0x20005098
 800d7ec:	200050a0 	.word	0x200050a0
 800d7f0:	2000509c 	.word	0x2000509c
 800d7f4:	200050ac 	.word	0x200050ac

0800d7f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d800:	4b28      	ldr	r3, [pc, #160]	; (800d8a4 <prvInsertBlockIntoFreeList+0xac>)
 800d802:	60fb      	str	r3, [r7, #12]
 800d804:	e002      	b.n	800d80c <prvInsertBlockIntoFreeList+0x14>
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	60fb      	str	r3, [r7, #12]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	429a      	cmp	r2, r3
 800d814:	d8f7      	bhi.n	800d806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	4413      	add	r3, r2
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	429a      	cmp	r2, r3
 800d826:	d108      	bne.n	800d83a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	441a      	add	r2, r3
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	441a      	add	r2, r3
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d118      	bne.n	800d880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	4b15      	ldr	r3, [pc, #84]	; (800d8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	429a      	cmp	r2, r3
 800d858:	d00d      	beq.n	800d876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	685a      	ldr	r2, [r3, #4]
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	441a      	add	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	601a      	str	r2, [r3, #0]
 800d874:	e008      	b.n	800d888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d876:	4b0c      	ldr	r3, [pc, #48]	; (800d8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	601a      	str	r2, [r3, #0]
 800d87e:	e003      	b.n	800d888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d002      	beq.n	800d896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d896:	bf00      	nop
 800d898:	3714      	adds	r7, #20
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	20005090 	.word	0x20005090
 800d8a8:	20005098 	.word	0x20005098

0800d8ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	4912      	ldr	r1, [pc, #72]	; (800d8fc <MX_USB_DEVICE_Init+0x50>)
 800d8b4:	4812      	ldr	r0, [pc, #72]	; (800d900 <MX_USB_DEVICE_Init+0x54>)
 800d8b6:	f7fb fc57 	bl	8009168 <USBD_Init>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d001      	beq.n	800d8c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d8c0:	f7f3 fc84 	bl	80011cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d8c4:	490f      	ldr	r1, [pc, #60]	; (800d904 <MX_USB_DEVICE_Init+0x58>)
 800d8c6:	480e      	ldr	r0, [pc, #56]	; (800d900 <MX_USB_DEVICE_Init+0x54>)
 800d8c8:	f7fb fc7e 	bl	80091c8 <USBD_RegisterClass>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d001      	beq.n	800d8d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d8d2:	f7f3 fc7b 	bl	80011cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d8d6:	490c      	ldr	r1, [pc, #48]	; (800d908 <MX_USB_DEVICE_Init+0x5c>)
 800d8d8:	4809      	ldr	r0, [pc, #36]	; (800d900 <MX_USB_DEVICE_Init+0x54>)
 800d8da:	f7fb fbb5 	bl	8009048 <USBD_CDC_RegisterInterface>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d001      	beq.n	800d8e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d8e4:	f7f3 fc72 	bl	80011cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d8e8:	4805      	ldr	r0, [pc, #20]	; (800d900 <MX_USB_DEVICE_Init+0x54>)
 800d8ea:	f7fb fca3 	bl	8009234 <USBD_Start>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d001      	beq.n	800d8f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d8f4:	f7f3 fc6a 	bl	80011cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d8f8:	bf00      	nop
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	200000b0 	.word	0x200000b0
 800d900:	200050b0 	.word	0x200050b0
 800d904:	20000018 	.word	0x20000018
 800d908:	2000009c 	.word	0x2000009c

0800d90c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d910:	2200      	movs	r2, #0
 800d912:	4905      	ldr	r1, [pc, #20]	; (800d928 <CDC_Init_FS+0x1c>)
 800d914:	4805      	ldr	r0, [pc, #20]	; (800d92c <CDC_Init_FS+0x20>)
 800d916:	f7fb fbb1 	bl	800907c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d91a:	4905      	ldr	r1, [pc, #20]	; (800d930 <CDC_Init_FS+0x24>)
 800d91c:	4803      	ldr	r0, [pc, #12]	; (800d92c <CDC_Init_FS+0x20>)
 800d91e:	f7fb fbcf 	bl	80090c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d922:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d924:	4618      	mov	r0, r3
 800d926:	bd80      	pop	{r7, pc}
 800d928:	20005b8c 	.word	0x20005b8c
 800d92c:	200050b0 	.word	0x200050b0
 800d930:	2000538c 	.word	0x2000538c

0800d934 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d934:	b480      	push	{r7}
 800d936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d938:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	4603      	mov	r3, r0
 800d94c:	6039      	str	r1, [r7, #0]
 800d94e:	71fb      	strb	r3, [r7, #7]
 800d950:	4613      	mov	r3, r2
 800d952:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d954:	79fb      	ldrb	r3, [r7, #7]
 800d956:	2b23      	cmp	r3, #35	; 0x23
 800d958:	f200 808c 	bhi.w	800da74 <CDC_Control_FS+0x130>
 800d95c:	a201      	add	r2, pc, #4	; (adr r2, 800d964 <CDC_Control_FS+0x20>)
 800d95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d962:	bf00      	nop
 800d964:	0800da75 	.word	0x0800da75
 800d968:	0800da75 	.word	0x0800da75
 800d96c:	0800da75 	.word	0x0800da75
 800d970:	0800da75 	.word	0x0800da75
 800d974:	0800da75 	.word	0x0800da75
 800d978:	0800da75 	.word	0x0800da75
 800d97c:	0800da75 	.word	0x0800da75
 800d980:	0800da75 	.word	0x0800da75
 800d984:	0800da75 	.word	0x0800da75
 800d988:	0800da75 	.word	0x0800da75
 800d98c:	0800da75 	.word	0x0800da75
 800d990:	0800da75 	.word	0x0800da75
 800d994:	0800da75 	.word	0x0800da75
 800d998:	0800da75 	.word	0x0800da75
 800d99c:	0800da75 	.word	0x0800da75
 800d9a0:	0800da75 	.word	0x0800da75
 800d9a4:	0800da75 	.word	0x0800da75
 800d9a8:	0800da75 	.word	0x0800da75
 800d9ac:	0800da75 	.word	0x0800da75
 800d9b0:	0800da75 	.word	0x0800da75
 800d9b4:	0800da75 	.word	0x0800da75
 800d9b8:	0800da75 	.word	0x0800da75
 800d9bc:	0800da75 	.word	0x0800da75
 800d9c0:	0800da75 	.word	0x0800da75
 800d9c4:	0800da75 	.word	0x0800da75
 800d9c8:	0800da75 	.word	0x0800da75
 800d9cc:	0800da75 	.word	0x0800da75
 800d9d0:	0800da75 	.word	0x0800da75
 800d9d4:	0800da75 	.word	0x0800da75
 800d9d8:	0800da75 	.word	0x0800da75
 800d9dc:	0800da75 	.word	0x0800da75
 800d9e0:	0800da75 	.word	0x0800da75
 800d9e4:	0800d9f5 	.word	0x0800d9f5
 800d9e8:	0800da2f 	.word	0x0800da2f
 800d9ec:	0800da75 	.word	0x0800da75
 800d9f0:	0800da75 	.word	0x0800da75
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	usbVcpParameters[0] = pbuf[0];
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	781a      	ldrb	r2, [r3, #0]
 800d9f8:	4b22      	ldr	r3, [pc, #136]	; (800da84 <CDC_Control_FS+0x140>)
 800d9fa:	701a      	strb	r2, [r3, #0]
    	usbVcpParameters[1] = pbuf[1];
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	785a      	ldrb	r2, [r3, #1]
 800da00:	4b20      	ldr	r3, [pc, #128]	; (800da84 <CDC_Control_FS+0x140>)
 800da02:	705a      	strb	r2, [r3, #1]
    	usbVcpParameters[2] = pbuf[2];
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	789a      	ldrb	r2, [r3, #2]
 800da08:	4b1e      	ldr	r3, [pc, #120]	; (800da84 <CDC_Control_FS+0x140>)
 800da0a:	709a      	strb	r2, [r3, #2]
    	usbVcpParameters[3] = pbuf[3];
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	78da      	ldrb	r2, [r3, #3]
 800da10:	4b1c      	ldr	r3, [pc, #112]	; (800da84 <CDC_Control_FS+0x140>)
 800da12:	70da      	strb	r2, [r3, #3]
    	usbVcpParameters[4] = pbuf[4];
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	791a      	ldrb	r2, [r3, #4]
 800da18:	4b1a      	ldr	r3, [pc, #104]	; (800da84 <CDC_Control_FS+0x140>)
 800da1a:	711a      	strb	r2, [r3, #4]
    	usbVcpParameters[5] = pbuf[5];
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	795a      	ldrb	r2, [r3, #5]
 800da20:	4b18      	ldr	r3, [pc, #96]	; (800da84 <CDC_Control_FS+0x140>)
 800da22:	715a      	strb	r2, [r3, #5]
    	usbVcpParameters[6] = pbuf[6];
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	799a      	ldrb	r2, [r3, #6]
 800da28:	4b16      	ldr	r3, [pc, #88]	; (800da84 <CDC_Control_FS+0x140>)
 800da2a:	719a      	strb	r2, [r3, #6]

    break;
 800da2c:	e023      	b.n	800da76 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = usbVcpParameters[0];
 800da2e:	4b15      	ldr	r3, [pc, #84]	; (800da84 <CDC_Control_FS+0x140>)
 800da30:	781a      	ldrb	r2, [r3, #0]
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = usbVcpParameters[1];
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	3301      	adds	r3, #1
 800da3a:	4a12      	ldr	r2, [pc, #72]	; (800da84 <CDC_Control_FS+0x140>)
 800da3c:	7852      	ldrb	r2, [r2, #1]
 800da3e:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = usbVcpParameters[2];
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	3302      	adds	r3, #2
 800da44:	4a0f      	ldr	r2, [pc, #60]	; (800da84 <CDC_Control_FS+0x140>)
 800da46:	7892      	ldrb	r2, [r2, #2]
 800da48:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = usbVcpParameters[3];
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	3303      	adds	r3, #3
 800da4e:	4a0d      	ldr	r2, [pc, #52]	; (800da84 <CDC_Control_FS+0x140>)
 800da50:	78d2      	ldrb	r2, [r2, #3]
 800da52:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = usbVcpParameters[4];
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	3304      	adds	r3, #4
 800da58:	4a0a      	ldr	r2, [pc, #40]	; (800da84 <CDC_Control_FS+0x140>)
 800da5a:	7912      	ldrb	r2, [r2, #4]
 800da5c:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = usbVcpParameters[5];
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	3305      	adds	r3, #5
 800da62:	4a08      	ldr	r2, [pc, #32]	; (800da84 <CDC_Control_FS+0x140>)
 800da64:	7952      	ldrb	r2, [r2, #5]
 800da66:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = usbVcpParameters[6];
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	3306      	adds	r3, #6
 800da6c:	4a05      	ldr	r2, [pc, #20]	; (800da84 <CDC_Control_FS+0x140>)
 800da6e:	7992      	ldrb	r2, [r2, #6]
 800da70:	701a      	strb	r2, [r3, #0]

    break;
 800da72:	e000      	b.n	800da76 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800da74:	bf00      	nop
  }

  return (USBD_OK);
 800da76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800da78:	4618      	mov	r0, r3
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr
 800da84:	20000648 	.word	0x20000648

0800da88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800da92:	6879      	ldr	r1, [r7, #4]
 800da94:	4805      	ldr	r0, [pc, #20]	; (800daac <CDC_Receive_FS+0x24>)
 800da96:	f7fb fb13 	bl	80090c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800da9a:	4804      	ldr	r0, [pc, #16]	; (800daac <CDC_Receive_FS+0x24>)
 800da9c:	f7fb fb2e 	bl	80090fc <USBD_CDC_ReceivePacket>

//  PDM_USB_Process(Buf, *Len);

  return (USBD_OK);
 800daa0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	200050b0 	.word	0x200050b0

0800dab0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b087      	sub	sp, #28
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	4613      	mov	r3, r2
 800dabc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dabe:	2300      	movs	r3, #0
 800dac0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dac2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	371c      	adds	r7, #28
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
	...

0800dad4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
 800dada:	4603      	mov	r3, r0
 800dadc:	6039      	str	r1, [r7, #0]
 800dade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	2212      	movs	r2, #18
 800dae4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dae6:	4b03      	ldr	r3, [pc, #12]	; (800daf4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dae8:	4618      	mov	r0, r3
 800daea:	370c      	adds	r7, #12
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr
 800daf4:	200000cc 	.word	0x200000cc

0800daf8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	4603      	mov	r3, r0
 800db00:	6039      	str	r1, [r7, #0]
 800db02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	2204      	movs	r2, #4
 800db08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db0a:	4b03      	ldr	r3, [pc, #12]	; (800db18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	200000e0 	.word	0x200000e0

0800db1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	4603      	mov	r3, r0
 800db24:	6039      	str	r1, [r7, #0]
 800db26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db28:	79fb      	ldrb	r3, [r7, #7]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d105      	bne.n	800db3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800db2e:	683a      	ldr	r2, [r7, #0]
 800db30:	4907      	ldr	r1, [pc, #28]	; (800db50 <USBD_FS_ProductStrDescriptor+0x34>)
 800db32:	4808      	ldr	r0, [pc, #32]	; (800db54 <USBD_FS_ProductStrDescriptor+0x38>)
 800db34:	f7fc fd2a 	bl	800a58c <USBD_GetString>
 800db38:	e004      	b.n	800db44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800db3a:	683a      	ldr	r2, [r7, #0]
 800db3c:	4904      	ldr	r1, [pc, #16]	; (800db50 <USBD_FS_ProductStrDescriptor+0x34>)
 800db3e:	4805      	ldr	r0, [pc, #20]	; (800db54 <USBD_FS_ProductStrDescriptor+0x38>)
 800db40:	f7fc fd24 	bl	800a58c <USBD_GetString>
  }
  return USBD_StrDesc;
 800db44:	4b02      	ldr	r3, [pc, #8]	; (800db50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800db46:	4618      	mov	r0, r3
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	2000638c 	.word	0x2000638c
 800db54:	0800e5d0 	.word	0x0800e5d0

0800db58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	4603      	mov	r3, r0
 800db60:	6039      	str	r1, [r7, #0]
 800db62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800db64:	683a      	ldr	r2, [r7, #0]
 800db66:	4904      	ldr	r1, [pc, #16]	; (800db78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800db68:	4804      	ldr	r0, [pc, #16]	; (800db7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800db6a:	f7fc fd0f 	bl	800a58c <USBD_GetString>
  return USBD_StrDesc;
 800db6e:	4b02      	ldr	r3, [pc, #8]	; (800db78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800db70:	4618      	mov	r0, r3
 800db72:	3708      	adds	r7, #8
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	2000638c 	.word	0x2000638c
 800db7c:	0800e5e8 	.word	0x0800e5e8

0800db80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	4603      	mov	r3, r0
 800db88:	6039      	str	r1, [r7, #0]
 800db8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	221a      	movs	r2, #26
 800db90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800db92:	f000 f843 	bl	800dc1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800db96:	4b02      	ldr	r3, [pc, #8]	; (800dba0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3708      	adds	r7, #8
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	200000e4 	.word	0x200000e4

0800dba4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	4603      	mov	r3, r0
 800dbac:	6039      	str	r1, [r7, #0]
 800dbae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dbb0:	79fb      	ldrb	r3, [r7, #7]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d105      	bne.n	800dbc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dbb6:	683a      	ldr	r2, [r7, #0]
 800dbb8:	4907      	ldr	r1, [pc, #28]	; (800dbd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dbba:	4808      	ldr	r0, [pc, #32]	; (800dbdc <USBD_FS_ConfigStrDescriptor+0x38>)
 800dbbc:	f7fc fce6 	bl	800a58c <USBD_GetString>
 800dbc0:	e004      	b.n	800dbcc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dbc2:	683a      	ldr	r2, [r7, #0]
 800dbc4:	4904      	ldr	r1, [pc, #16]	; (800dbd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dbc6:	4805      	ldr	r0, [pc, #20]	; (800dbdc <USBD_FS_ConfigStrDescriptor+0x38>)
 800dbc8:	f7fc fce0 	bl	800a58c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbcc:	4b02      	ldr	r3, [pc, #8]	; (800dbd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3708      	adds	r7, #8
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	2000638c 	.word	0x2000638c
 800dbdc:	0800e5fc 	.word	0x0800e5fc

0800dbe0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	6039      	str	r1, [r7, #0]
 800dbea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dbec:	79fb      	ldrb	r3, [r7, #7]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d105      	bne.n	800dbfe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dbf2:	683a      	ldr	r2, [r7, #0]
 800dbf4:	4907      	ldr	r1, [pc, #28]	; (800dc14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dbf6:	4808      	ldr	r0, [pc, #32]	; (800dc18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dbf8:	f7fc fcc8 	bl	800a58c <USBD_GetString>
 800dbfc:	e004      	b.n	800dc08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dbfe:	683a      	ldr	r2, [r7, #0]
 800dc00:	4904      	ldr	r1, [pc, #16]	; (800dc14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc02:	4805      	ldr	r0, [pc, #20]	; (800dc18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc04:	f7fc fcc2 	bl	800a58c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc08:	4b02      	ldr	r3, [pc, #8]	; (800dc14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3708      	adds	r7, #8
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	2000638c 	.word	0x2000638c
 800dc18:	0800e608 	.word	0x0800e608

0800dc1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dc22:	4b0f      	ldr	r3, [pc, #60]	; (800dc60 <Get_SerialNum+0x44>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dc28:	4b0e      	ldr	r3, [pc, #56]	; (800dc64 <Get_SerialNum+0x48>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dc2e:	4b0e      	ldr	r3, [pc, #56]	; (800dc68 <Get_SerialNum+0x4c>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dc34:	68fa      	ldr	r2, [r7, #12]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	4413      	add	r3, r2
 800dc3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d009      	beq.n	800dc56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dc42:	2208      	movs	r2, #8
 800dc44:	4909      	ldr	r1, [pc, #36]	; (800dc6c <Get_SerialNum+0x50>)
 800dc46:	68f8      	ldr	r0, [r7, #12]
 800dc48:	f000 f814 	bl	800dc74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dc4c:	2204      	movs	r2, #4
 800dc4e:	4908      	ldr	r1, [pc, #32]	; (800dc70 <Get_SerialNum+0x54>)
 800dc50:	68b8      	ldr	r0, [r7, #8]
 800dc52:	f000 f80f 	bl	800dc74 <IntToUnicode>
  }
}
 800dc56:	bf00      	nop
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	1fff7a10 	.word	0x1fff7a10
 800dc64:	1fff7a14 	.word	0x1fff7a14
 800dc68:	1fff7a18 	.word	0x1fff7a18
 800dc6c:	200000e6 	.word	0x200000e6
 800dc70:	200000f6 	.word	0x200000f6

0800dc74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b087      	sub	sp, #28
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dc86:	2300      	movs	r3, #0
 800dc88:	75fb      	strb	r3, [r7, #23]
 800dc8a:	e027      	b.n	800dcdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	0f1b      	lsrs	r3, r3, #28
 800dc90:	2b09      	cmp	r3, #9
 800dc92:	d80b      	bhi.n	800dcac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	0f1b      	lsrs	r3, r3, #28
 800dc98:	b2da      	uxtb	r2, r3
 800dc9a:	7dfb      	ldrb	r3, [r7, #23]
 800dc9c:	005b      	lsls	r3, r3, #1
 800dc9e:	4619      	mov	r1, r3
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	440b      	add	r3, r1
 800dca4:	3230      	adds	r2, #48	; 0x30
 800dca6:	b2d2      	uxtb	r2, r2
 800dca8:	701a      	strb	r2, [r3, #0]
 800dcaa:	e00a      	b.n	800dcc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	0f1b      	lsrs	r3, r3, #28
 800dcb0:	b2da      	uxtb	r2, r3
 800dcb2:	7dfb      	ldrb	r3, [r7, #23]
 800dcb4:	005b      	lsls	r3, r3, #1
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	440b      	add	r3, r1
 800dcbc:	3237      	adds	r2, #55	; 0x37
 800dcbe:	b2d2      	uxtb	r2, r2
 800dcc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	011b      	lsls	r3, r3, #4
 800dcc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dcc8:	7dfb      	ldrb	r3, [r7, #23]
 800dcca:	005b      	lsls	r3, r3, #1
 800dccc:	3301      	adds	r3, #1
 800dcce:	68ba      	ldr	r2, [r7, #8]
 800dcd0:	4413      	add	r3, r2
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dcd6:	7dfb      	ldrb	r3, [r7, #23]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	75fb      	strb	r3, [r7, #23]
 800dcdc:	7dfa      	ldrb	r2, [r7, #23]
 800dcde:	79fb      	ldrb	r3, [r7, #7]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d3d3      	bcc.n	800dc8c <IntToUnicode+0x18>
  }
}
 800dce4:	bf00      	nop
 800dce6:	bf00      	nop
 800dce8:	371c      	adds	r7, #28
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr
	...

0800dcf4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b0a0      	sub	sp, #128	; 0x80
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dcfc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800dd00:	2200      	movs	r2, #0
 800dd02:	601a      	str	r2, [r3, #0]
 800dd04:	605a      	str	r2, [r3, #4]
 800dd06:	609a      	str	r2, [r3, #8]
 800dd08:	60da      	str	r2, [r3, #12]
 800dd0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dd0c:	f107 0310 	add.w	r3, r7, #16
 800dd10:	225c      	movs	r2, #92	; 0x5c
 800dd12:	2100      	movs	r1, #0
 800dd14:	4618      	mov	r0, r3
 800dd16:	f000 fb63 	bl	800e3e0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dd22:	d161      	bne.n	800dde8 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800dd24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 800dd2a:	2308      	movs	r3, #8
 800dd2c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800dd2e:	23c0      	movs	r3, #192	; 0xc0
 800dd30:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800dd32:	2302      	movs	r3, #2
 800dd34:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800dd36:	2304      	movs	r3, #4
 800dd38:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800dd3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd42:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dd44:	f107 0310 	add.w	r3, r7, #16
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7f7 f96f 	bl	800502c <HAL_RCCEx_PeriphCLKConfig>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 800dd54:	f7f3 fa3a 	bl	80011cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd58:	2300      	movs	r3, #0
 800dd5a:	60fb      	str	r3, [r7, #12]
 800dd5c:	4b24      	ldr	r3, [pc, #144]	; (800ddf0 <HAL_PCD_MspInit+0xfc>)
 800dd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd60:	4a23      	ldr	r2, [pc, #140]	; (800ddf0 <HAL_PCD_MspInit+0xfc>)
 800dd62:	f043 0301 	orr.w	r3, r3, #1
 800dd66:	6313      	str	r3, [r2, #48]	; 0x30
 800dd68:	4b21      	ldr	r3, [pc, #132]	; (800ddf0 <HAL_PCD_MspInit+0xfc>)
 800dd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd6c:	f003 0301 	and.w	r3, r3, #1
 800dd70:	60fb      	str	r3, [r7, #12]
 800dd72:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dd74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd78:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800dd86:	4619      	mov	r1, r3
 800dd88:	481a      	ldr	r0, [pc, #104]	; (800ddf4 <HAL_PCD_MspInit+0x100>)
 800dd8a:	f7f5 f9d3 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dd8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dd92:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd94:	2302      	movs	r3, #2
 800dd96:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd9c:	2303      	movs	r3, #3
 800dd9e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dda0:	230a      	movs	r3, #10
 800dda2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dda4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800dda8:	4619      	mov	r1, r3
 800ddaa:	4812      	ldr	r0, [pc, #72]	; (800ddf4 <HAL_PCD_MspInit+0x100>)
 800ddac:	f7f5 f9c2 	bl	8003134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ddb0:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <HAL_PCD_MspInit+0xfc>)
 800ddb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddb4:	4a0e      	ldr	r2, [pc, #56]	; (800ddf0 <HAL_PCD_MspInit+0xfc>)
 800ddb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddba:	6353      	str	r3, [r2, #52]	; 0x34
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	60bb      	str	r3, [r7, #8]
 800ddc0:	4b0b      	ldr	r3, [pc, #44]	; (800ddf0 <HAL_PCD_MspInit+0xfc>)
 800ddc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddc4:	4a0a      	ldr	r2, [pc, #40]	; (800ddf0 <HAL_PCD_MspInit+0xfc>)
 800ddc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ddca:	6453      	str	r3, [r2, #68]	; 0x44
 800ddcc:	4b08      	ldr	r3, [pc, #32]	; (800ddf0 <HAL_PCD_MspInit+0xfc>)
 800ddce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddd4:	60bb      	str	r3, [r7, #8]
 800ddd6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ddd8:	2200      	movs	r2, #0
 800ddda:	2105      	movs	r1, #5
 800dddc:	2043      	movs	r0, #67	; 0x43
 800ddde:	f7f4 fe79 	bl	8002ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dde2:	2043      	movs	r0, #67	; 0x43
 800dde4:	f7f4 fe92 	bl	8002b0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dde8:	bf00      	nop
 800ddea:	3780      	adds	r7, #128	; 0x80
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	40023800 	.word	0x40023800
 800ddf4:	40020000 	.word	0x40020000

0800ddf8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800de0c:	4619      	mov	r1, r3
 800de0e:	4610      	mov	r0, r2
 800de10:	f7fb fa5d 	bl	80092ce <USBD_LL_SetupStage>
}
 800de14:	bf00      	nop
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	460b      	mov	r3, r1
 800de26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800de2e:	78fa      	ldrb	r2, [r7, #3]
 800de30:	6879      	ldr	r1, [r7, #4]
 800de32:	4613      	mov	r3, r2
 800de34:	00db      	lsls	r3, r3, #3
 800de36:	4413      	add	r3, r2
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	440b      	add	r3, r1
 800de3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	78fb      	ldrb	r3, [r7, #3]
 800de44:	4619      	mov	r1, r3
 800de46:	f7fb fa97 	bl	8009378 <USBD_LL_DataOutStage>
}
 800de4a:	bf00      	nop
 800de4c:	3708      	adds	r7, #8
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de52:	b580      	push	{r7, lr}
 800de54:	b082      	sub	sp, #8
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
 800de5a:	460b      	mov	r3, r1
 800de5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800de64:	78fa      	ldrb	r2, [r7, #3]
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	4613      	mov	r3, r2
 800de6a:	00db      	lsls	r3, r3, #3
 800de6c:	4413      	add	r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	440b      	add	r3, r1
 800de72:	334c      	adds	r3, #76	; 0x4c
 800de74:	681a      	ldr	r2, [r3, #0]
 800de76:	78fb      	ldrb	r3, [r7, #3]
 800de78:	4619      	mov	r1, r3
 800de7a:	f7fb fb30 	bl	80094de <USBD_LL_DataInStage>
}
 800de7e:	bf00      	nop
 800de80:	3708      	adds	r7, #8
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}

0800de86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de86:	b580      	push	{r7, lr}
 800de88:	b082      	sub	sp, #8
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de94:	4618      	mov	r0, r3
 800de96:	f7fb fc64 	bl	8009762 <USBD_LL_SOF>
}
 800de9a:	bf00      	nop
 800de9c:	3708      	adds	r7, #8
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}

0800dea2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dea2:	b580      	push	{r7, lr}
 800dea4:	b084      	sub	sp, #16
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800deaa:	2301      	movs	r3, #1
 800deac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d102      	bne.n	800debc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800deb6:	2300      	movs	r3, #0
 800deb8:	73fb      	strb	r3, [r7, #15]
 800deba:	e008      	b.n	800dece <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	d102      	bne.n	800deca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dec4:	2301      	movs	r3, #1
 800dec6:	73fb      	strb	r3, [r7, #15]
 800dec8:	e001      	b.n	800dece <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800deca:	f7f3 f97f 	bl	80011cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ded4:	7bfa      	ldrb	r2, [r7, #15]
 800ded6:	4611      	mov	r1, r2
 800ded8:	4618      	mov	r0, r3
 800deda:	f7fb fc04 	bl	80096e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7fb fbac 	bl	8009642 <USBD_LL_Reset>
}
 800deea:	bf00      	nop
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
	...

0800def4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df02:	4618      	mov	r0, r3
 800df04:	f7fb fbff 	bl	8009706 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	6812      	ldr	r2, [r2, #0]
 800df16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df1a:	f043 0301 	orr.w	r3, r3, #1
 800df1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6a1b      	ldr	r3, [r3, #32]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d005      	beq.n	800df34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df28:	4b04      	ldr	r3, [pc, #16]	; (800df3c <HAL_PCD_SuspendCallback+0x48>)
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	4a03      	ldr	r2, [pc, #12]	; (800df3c <HAL_PCD_SuspendCallback+0x48>)
 800df2e:	f043 0306 	orr.w	r3, r3, #6
 800df32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800df34:	bf00      	nop
 800df36:	3708      	adds	r7, #8
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	e000ed00 	.word	0xe000ed00

0800df40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df4e:	4618      	mov	r0, r3
 800df50:	f7fb fbef 	bl	8009732 <USBD_LL_Resume>
}
 800df54:	bf00      	nop
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	460b      	mov	r3, r1
 800df66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df6e:	78fa      	ldrb	r2, [r7, #3]
 800df70:	4611      	mov	r1, r2
 800df72:	4618      	mov	r0, r3
 800df74:	f7fb fc47 	bl	8009806 <USBD_LL_IsoOUTIncomplete>
}
 800df78:	bf00      	nop
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	460b      	mov	r3, r1
 800df8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df92:	78fa      	ldrb	r2, [r7, #3]
 800df94:	4611      	mov	r1, r2
 800df96:	4618      	mov	r0, r3
 800df98:	f7fb fc03 	bl	80097a2 <USBD_LL_IsoINIncomplete>
}
 800df9c:	bf00      	nop
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7fb fc59 	bl	800986a <USBD_LL_DevConnected>
}
 800dfb8:	bf00      	nop
 800dfba:	3708      	adds	r7, #8
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fb fc56 	bl	8009880 <USBD_LL_DevDisconnected>
}
 800dfd4:	bf00      	nop
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d13c      	bne.n	800e066 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dfec:	4a20      	ldr	r2, [pc, #128]	; (800e070 <USBD_LL_Init+0x94>)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a1e      	ldr	r2, [pc, #120]	; (800e070 <USBD_LL_Init+0x94>)
 800dff8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dffc:	4b1c      	ldr	r3, [pc, #112]	; (800e070 <USBD_LL_Init+0x94>)
 800dffe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e002:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e004:	4b1a      	ldr	r3, [pc, #104]	; (800e070 <USBD_LL_Init+0x94>)
 800e006:	2206      	movs	r2, #6
 800e008:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e00a:	4b19      	ldr	r3, [pc, #100]	; (800e070 <USBD_LL_Init+0x94>)
 800e00c:	2202      	movs	r2, #2
 800e00e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e010:	4b17      	ldr	r3, [pc, #92]	; (800e070 <USBD_LL_Init+0x94>)
 800e012:	2200      	movs	r2, #0
 800e014:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e016:	4b16      	ldr	r3, [pc, #88]	; (800e070 <USBD_LL_Init+0x94>)
 800e018:	2202      	movs	r2, #2
 800e01a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e01c:	4b14      	ldr	r3, [pc, #80]	; (800e070 <USBD_LL_Init+0x94>)
 800e01e:	2200      	movs	r2, #0
 800e020:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e022:	4b13      	ldr	r3, [pc, #76]	; (800e070 <USBD_LL_Init+0x94>)
 800e024:	2200      	movs	r2, #0
 800e026:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e028:	4b11      	ldr	r3, [pc, #68]	; (800e070 <USBD_LL_Init+0x94>)
 800e02a:	2200      	movs	r2, #0
 800e02c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e02e:	4b10      	ldr	r3, [pc, #64]	; (800e070 <USBD_LL_Init+0x94>)
 800e030:	2201      	movs	r2, #1
 800e032:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e034:	4b0e      	ldr	r3, [pc, #56]	; (800e070 <USBD_LL_Init+0x94>)
 800e036:	2200      	movs	r2, #0
 800e038:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e03a:	480d      	ldr	r0, [pc, #52]	; (800e070 <USBD_LL_Init+0x94>)
 800e03c:	f7f5 fb84 	bl	8003748 <HAL_PCD_Init>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d001      	beq.n	800e04a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e046:	f7f3 f8c1 	bl	80011cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e04a:	2180      	movs	r1, #128	; 0x80
 800e04c:	4808      	ldr	r0, [pc, #32]	; (800e070 <USBD_LL_Init+0x94>)
 800e04e:	f7f6 fe10 	bl	8004c72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e052:	2240      	movs	r2, #64	; 0x40
 800e054:	2100      	movs	r1, #0
 800e056:	4806      	ldr	r0, [pc, #24]	; (800e070 <USBD_LL_Init+0x94>)
 800e058:	f7f6 fdc4 	bl	8004be4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e05c:	2280      	movs	r2, #128	; 0x80
 800e05e:	2101      	movs	r1, #1
 800e060:	4803      	ldr	r0, [pc, #12]	; (800e070 <USBD_LL_Init+0x94>)
 800e062:	f7f6 fdbf 	bl	8004be4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e066:	2300      	movs	r3, #0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	2000658c 	.word	0x2000658c

0800e074 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e07c:	2300      	movs	r3, #0
 800e07e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e080:	2300      	movs	r3, #0
 800e082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7f5 fc80 	bl	8003990 <HAL_PCD_Start>
 800e090:	4603      	mov	r3, r0
 800e092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e094:	7bfb      	ldrb	r3, [r7, #15]
 800e096:	4618      	mov	r0, r3
 800e098:	f000 f942 	bl	800e320 <USBD_Get_USB_Status>
 800e09c:	4603      	mov	r3, r0
 800e09e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b084      	sub	sp, #16
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
 800e0b2:	4608      	mov	r0, r1
 800e0b4:	4611      	mov	r1, r2
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	70fb      	strb	r3, [r7, #3]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	70bb      	strb	r3, [r7, #2]
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e0d2:	78bb      	ldrb	r3, [r7, #2]
 800e0d4:	883a      	ldrh	r2, [r7, #0]
 800e0d6:	78f9      	ldrb	r1, [r7, #3]
 800e0d8:	f7f6 f97e 	bl	80043d8 <HAL_PCD_EP_Open>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0e0:	7bfb      	ldrb	r3, [r7, #15]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f000 f91c 	bl	800e320 <USBD_Get_USB_Status>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b084      	sub	sp, #16
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
 800e0fe:	460b      	mov	r3, r1
 800e100:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e102:	2300      	movs	r3, #0
 800e104:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e106:	2300      	movs	r3, #0
 800e108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e110:	78fa      	ldrb	r2, [r7, #3]
 800e112:	4611      	mov	r1, r2
 800e114:	4618      	mov	r0, r3
 800e116:	f7f6 f9c7 	bl	80044a8 <HAL_PCD_EP_Close>
 800e11a:	4603      	mov	r3, r0
 800e11c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e11e:	7bfb      	ldrb	r3, [r7, #15]
 800e120:	4618      	mov	r0, r3
 800e122:	f000 f8fd 	bl	800e320 <USBD_Get_USB_Status>
 800e126:	4603      	mov	r3, r0
 800e128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e12a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	460b      	mov	r3, r1
 800e13e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e140:	2300      	movs	r3, #0
 800e142:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e144:	2300      	movs	r3, #0
 800e146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e14e:	78fa      	ldrb	r2, [r7, #3]
 800e150:	4611      	mov	r1, r2
 800e152:	4618      	mov	r0, r3
 800e154:	f7f6 fa9f 	bl	8004696 <HAL_PCD_EP_SetStall>
 800e158:	4603      	mov	r3, r0
 800e15a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
 800e15e:	4618      	mov	r0, r3
 800e160:	f000 f8de 	bl	800e320 <USBD_Get_USB_Status>
 800e164:	4603      	mov	r3, r0
 800e166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e168:	7bbb      	ldrb	r3, [r7, #14]
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}

0800e172 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e172:	b580      	push	{r7, lr}
 800e174:	b084      	sub	sp, #16
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
 800e17a:	460b      	mov	r3, r1
 800e17c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e17e:	2300      	movs	r3, #0
 800e180:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e182:	2300      	movs	r3, #0
 800e184:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e18c:	78fa      	ldrb	r2, [r7, #3]
 800e18e:	4611      	mov	r1, r2
 800e190:	4618      	mov	r0, r3
 800e192:	f7f6 fae4 	bl	800475e <HAL_PCD_EP_ClrStall>
 800e196:	4603      	mov	r3, r0
 800e198:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e19a:	7bfb      	ldrb	r3, [r7, #15]
 800e19c:	4618      	mov	r0, r3
 800e19e:	f000 f8bf 	bl	800e320 <USBD_Get_USB_Status>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b085      	sub	sp, #20
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e1c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	da0b      	bge.n	800e1e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e1cc:	78fb      	ldrb	r3, [r7, #3]
 800e1ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1d2:	68f9      	ldr	r1, [r7, #12]
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	00db      	lsls	r3, r3, #3
 800e1d8:	4413      	add	r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	440b      	add	r3, r1
 800e1de:	333e      	adds	r3, #62	; 0x3e
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	e00b      	b.n	800e1fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e1e4:	78fb      	ldrb	r3, [r7, #3]
 800e1e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1ea:	68f9      	ldr	r1, [r7, #12]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	00db      	lsls	r3, r3, #3
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	440b      	add	r3, r1
 800e1f6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e1fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3714      	adds	r7, #20
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	460b      	mov	r3, r1
 800e212:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e214:	2300      	movs	r3, #0
 800e216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e218:	2300      	movs	r3, #0
 800e21a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e222:	78fa      	ldrb	r2, [r7, #3]
 800e224:	4611      	mov	r1, r2
 800e226:	4618      	mov	r0, r3
 800e228:	f7f6 f8b1 	bl	800438e <HAL_PCD_SetAddress>
 800e22c:	4603      	mov	r3, r0
 800e22e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e230:	7bfb      	ldrb	r3, [r7, #15]
 800e232:	4618      	mov	r0, r3
 800e234:	f000 f874 	bl	800e320 <USBD_Get_USB_Status>
 800e238:	4603      	mov	r3, r0
 800e23a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e23c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3710      	adds	r7, #16
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b086      	sub	sp, #24
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	60f8      	str	r0, [r7, #12]
 800e24e:	607a      	str	r2, [r7, #4]
 800e250:	603b      	str	r3, [r7, #0]
 800e252:	460b      	mov	r3, r1
 800e254:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e256:	2300      	movs	r3, #0
 800e258:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e25a:	2300      	movs	r3, #0
 800e25c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e264:	7af9      	ldrb	r1, [r7, #11]
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	f7f6 f9ca 	bl	8004602 <HAL_PCD_EP_Transmit>
 800e26e:	4603      	mov	r3, r0
 800e270:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e272:	7dfb      	ldrb	r3, [r7, #23]
 800e274:	4618      	mov	r0, r3
 800e276:	f000 f853 	bl	800e320 <USBD_Get_USB_Status>
 800e27a:	4603      	mov	r3, r0
 800e27c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e27e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e280:	4618      	mov	r0, r3
 800e282:	3718      	adds	r7, #24
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b086      	sub	sp, #24
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	607a      	str	r2, [r7, #4]
 800e292:	603b      	str	r3, [r7, #0]
 800e294:	460b      	mov	r3, r1
 800e296:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e298:	2300      	movs	r3, #0
 800e29a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e29c:	2300      	movs	r3, #0
 800e29e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e2a6:	7af9      	ldrb	r1, [r7, #11]
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	f7f6 f946 	bl	800453c <HAL_PCD_EP_Receive>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2b4:	7dfb      	ldrb	r3, [r7, #23]
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f000 f832 	bl	800e320 <USBD_Get_USB_Status>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3718      	adds	r7, #24
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b082      	sub	sp, #8
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2dc:	78fa      	ldrb	r2, [r7, #3]
 800e2de:	4611      	mov	r1, r2
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7f6 f976 	bl	80045d2 <HAL_PCD_EP_GetRxCount>
 800e2e6:	4603      	mov	r3, r0
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b083      	sub	sp, #12
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e2f8:	4b03      	ldr	r3, [pc, #12]	; (800e308 <USBD_static_malloc+0x18>)
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	370c      	adds	r7, #12
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	20006a98 	.word	0x20006a98

0800e30c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]

}
 800e314:	bf00      	nop
 800e316:	370c      	adds	r7, #12
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e320:	b480      	push	{r7}
 800e322:	b085      	sub	sp, #20
 800e324:	af00      	add	r7, sp, #0
 800e326:	4603      	mov	r3, r0
 800e328:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e32a:	2300      	movs	r3, #0
 800e32c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e32e:	79fb      	ldrb	r3, [r7, #7]
 800e330:	2b03      	cmp	r3, #3
 800e332:	d817      	bhi.n	800e364 <USBD_Get_USB_Status+0x44>
 800e334:	a201      	add	r2, pc, #4	; (adr r2, 800e33c <USBD_Get_USB_Status+0x1c>)
 800e336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e33a:	bf00      	nop
 800e33c:	0800e34d 	.word	0x0800e34d
 800e340:	0800e353 	.word	0x0800e353
 800e344:	0800e359 	.word	0x0800e359
 800e348:	0800e35f 	.word	0x0800e35f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e34c:	2300      	movs	r3, #0
 800e34e:	73fb      	strb	r3, [r7, #15]
    break;
 800e350:	e00b      	b.n	800e36a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e352:	2303      	movs	r3, #3
 800e354:	73fb      	strb	r3, [r7, #15]
    break;
 800e356:	e008      	b.n	800e36a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e358:	2301      	movs	r3, #1
 800e35a:	73fb      	strb	r3, [r7, #15]
    break;
 800e35c:	e005      	b.n	800e36a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e35e:	2303      	movs	r3, #3
 800e360:	73fb      	strb	r3, [r7, #15]
    break;
 800e362:	e002      	b.n	800e36a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e364:	2303      	movs	r3, #3
 800e366:	73fb      	strb	r3, [r7, #15]
    break;
 800e368:	bf00      	nop
  }
  return usb_status;
 800e36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3714      	adds	r7, #20
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <__libc_init_array>:
 800e378:	b570      	push	{r4, r5, r6, lr}
 800e37a:	4d0d      	ldr	r5, [pc, #52]	; (800e3b0 <__libc_init_array+0x38>)
 800e37c:	4c0d      	ldr	r4, [pc, #52]	; (800e3b4 <__libc_init_array+0x3c>)
 800e37e:	1b64      	subs	r4, r4, r5
 800e380:	10a4      	asrs	r4, r4, #2
 800e382:	2600      	movs	r6, #0
 800e384:	42a6      	cmp	r6, r4
 800e386:	d109      	bne.n	800e39c <__libc_init_array+0x24>
 800e388:	4d0b      	ldr	r5, [pc, #44]	; (800e3b8 <__libc_init_array+0x40>)
 800e38a:	4c0c      	ldr	r4, [pc, #48]	; (800e3bc <__libc_init_array+0x44>)
 800e38c:	f000 f8f2 	bl	800e574 <_init>
 800e390:	1b64      	subs	r4, r4, r5
 800e392:	10a4      	asrs	r4, r4, #2
 800e394:	2600      	movs	r6, #0
 800e396:	42a6      	cmp	r6, r4
 800e398:	d105      	bne.n	800e3a6 <__libc_init_array+0x2e>
 800e39a:	bd70      	pop	{r4, r5, r6, pc}
 800e39c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3a0:	4798      	blx	r3
 800e3a2:	3601      	adds	r6, #1
 800e3a4:	e7ee      	b.n	800e384 <__libc_init_array+0xc>
 800e3a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3aa:	4798      	blx	r3
 800e3ac:	3601      	adds	r6, #1
 800e3ae:	e7f2      	b.n	800e396 <__libc_init_array+0x1e>
 800e3b0:	0800e6ec 	.word	0x0800e6ec
 800e3b4:	0800e6ec 	.word	0x0800e6ec
 800e3b8:	0800e6ec 	.word	0x0800e6ec
 800e3bc:	0800e6f0 	.word	0x0800e6f0

0800e3c0 <__retarget_lock_acquire_recursive>:
 800e3c0:	4770      	bx	lr

0800e3c2 <__retarget_lock_release_recursive>:
 800e3c2:	4770      	bx	lr

0800e3c4 <memcpy>:
 800e3c4:	440a      	add	r2, r1
 800e3c6:	4291      	cmp	r1, r2
 800e3c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3cc:	d100      	bne.n	800e3d0 <memcpy+0xc>
 800e3ce:	4770      	bx	lr
 800e3d0:	b510      	push	{r4, lr}
 800e3d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3da:	4291      	cmp	r1, r2
 800e3dc:	d1f9      	bne.n	800e3d2 <memcpy+0xe>
 800e3de:	bd10      	pop	{r4, pc}

0800e3e0 <memset>:
 800e3e0:	4402      	add	r2, r0
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d100      	bne.n	800e3ea <memset+0xa>
 800e3e8:	4770      	bx	lr
 800e3ea:	f803 1b01 	strb.w	r1, [r3], #1
 800e3ee:	e7f9      	b.n	800e3e4 <memset+0x4>

0800e3f0 <cleanup_glue>:
 800e3f0:	b538      	push	{r3, r4, r5, lr}
 800e3f2:	460c      	mov	r4, r1
 800e3f4:	6809      	ldr	r1, [r1, #0]
 800e3f6:	4605      	mov	r5, r0
 800e3f8:	b109      	cbz	r1, 800e3fe <cleanup_glue+0xe>
 800e3fa:	f7ff fff9 	bl	800e3f0 <cleanup_glue>
 800e3fe:	4621      	mov	r1, r4
 800e400:	4628      	mov	r0, r5
 800e402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e406:	f000 b869 	b.w	800e4dc <_free_r>
	...

0800e40c <_reclaim_reent>:
 800e40c:	4b2c      	ldr	r3, [pc, #176]	; (800e4c0 <_reclaim_reent+0xb4>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4283      	cmp	r3, r0
 800e412:	b570      	push	{r4, r5, r6, lr}
 800e414:	4604      	mov	r4, r0
 800e416:	d051      	beq.n	800e4bc <_reclaim_reent+0xb0>
 800e418:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e41a:	b143      	cbz	r3, 800e42e <_reclaim_reent+0x22>
 800e41c:	68db      	ldr	r3, [r3, #12]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d14a      	bne.n	800e4b8 <_reclaim_reent+0xac>
 800e422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e424:	6819      	ldr	r1, [r3, #0]
 800e426:	b111      	cbz	r1, 800e42e <_reclaim_reent+0x22>
 800e428:	4620      	mov	r0, r4
 800e42a:	f000 f857 	bl	800e4dc <_free_r>
 800e42e:	6961      	ldr	r1, [r4, #20]
 800e430:	b111      	cbz	r1, 800e438 <_reclaim_reent+0x2c>
 800e432:	4620      	mov	r0, r4
 800e434:	f000 f852 	bl	800e4dc <_free_r>
 800e438:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e43a:	b111      	cbz	r1, 800e442 <_reclaim_reent+0x36>
 800e43c:	4620      	mov	r0, r4
 800e43e:	f000 f84d 	bl	800e4dc <_free_r>
 800e442:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e444:	b111      	cbz	r1, 800e44c <_reclaim_reent+0x40>
 800e446:	4620      	mov	r0, r4
 800e448:	f000 f848 	bl	800e4dc <_free_r>
 800e44c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e44e:	b111      	cbz	r1, 800e456 <_reclaim_reent+0x4a>
 800e450:	4620      	mov	r0, r4
 800e452:	f000 f843 	bl	800e4dc <_free_r>
 800e456:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e458:	b111      	cbz	r1, 800e460 <_reclaim_reent+0x54>
 800e45a:	4620      	mov	r0, r4
 800e45c:	f000 f83e 	bl	800e4dc <_free_r>
 800e460:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e462:	b111      	cbz	r1, 800e46a <_reclaim_reent+0x5e>
 800e464:	4620      	mov	r0, r4
 800e466:	f000 f839 	bl	800e4dc <_free_r>
 800e46a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e46c:	b111      	cbz	r1, 800e474 <_reclaim_reent+0x68>
 800e46e:	4620      	mov	r0, r4
 800e470:	f000 f834 	bl	800e4dc <_free_r>
 800e474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e476:	b111      	cbz	r1, 800e47e <_reclaim_reent+0x72>
 800e478:	4620      	mov	r0, r4
 800e47a:	f000 f82f 	bl	800e4dc <_free_r>
 800e47e:	69a3      	ldr	r3, [r4, #24]
 800e480:	b1e3      	cbz	r3, 800e4bc <_reclaim_reent+0xb0>
 800e482:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e484:	4620      	mov	r0, r4
 800e486:	4798      	blx	r3
 800e488:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e48a:	b1b9      	cbz	r1, 800e4bc <_reclaim_reent+0xb0>
 800e48c:	4620      	mov	r0, r4
 800e48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e492:	f7ff bfad 	b.w	800e3f0 <cleanup_glue>
 800e496:	5949      	ldr	r1, [r1, r5]
 800e498:	b941      	cbnz	r1, 800e4ac <_reclaim_reent+0xa0>
 800e49a:	3504      	adds	r5, #4
 800e49c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e49e:	2d80      	cmp	r5, #128	; 0x80
 800e4a0:	68d9      	ldr	r1, [r3, #12]
 800e4a2:	d1f8      	bne.n	800e496 <_reclaim_reent+0x8a>
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f000 f819 	bl	800e4dc <_free_r>
 800e4aa:	e7ba      	b.n	800e422 <_reclaim_reent+0x16>
 800e4ac:	680e      	ldr	r6, [r1, #0]
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	f000 f814 	bl	800e4dc <_free_r>
 800e4b4:	4631      	mov	r1, r6
 800e4b6:	e7ef      	b.n	800e498 <_reclaim_reent+0x8c>
 800e4b8:	2500      	movs	r5, #0
 800e4ba:	e7ef      	b.n	800e49c <_reclaim_reent+0x90>
 800e4bc:	bd70      	pop	{r4, r5, r6, pc}
 800e4be:	bf00      	nop
 800e4c0:	20000100 	.word	0x20000100

0800e4c4 <__malloc_lock>:
 800e4c4:	4801      	ldr	r0, [pc, #4]	; (800e4cc <__malloc_lock+0x8>)
 800e4c6:	f7ff bf7b 	b.w	800e3c0 <__retarget_lock_acquire_recursive>
 800e4ca:	bf00      	nop
 800e4cc:	20006cb8 	.word	0x20006cb8

0800e4d0 <__malloc_unlock>:
 800e4d0:	4801      	ldr	r0, [pc, #4]	; (800e4d8 <__malloc_unlock+0x8>)
 800e4d2:	f7ff bf76 	b.w	800e3c2 <__retarget_lock_release_recursive>
 800e4d6:	bf00      	nop
 800e4d8:	20006cb8 	.word	0x20006cb8

0800e4dc <_free_r>:
 800e4dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4de:	2900      	cmp	r1, #0
 800e4e0:	d044      	beq.n	800e56c <_free_r+0x90>
 800e4e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4e6:	9001      	str	r0, [sp, #4]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	f1a1 0404 	sub.w	r4, r1, #4
 800e4ee:	bfb8      	it	lt
 800e4f0:	18e4      	addlt	r4, r4, r3
 800e4f2:	f7ff ffe7 	bl	800e4c4 <__malloc_lock>
 800e4f6:	4a1e      	ldr	r2, [pc, #120]	; (800e570 <_free_r+0x94>)
 800e4f8:	9801      	ldr	r0, [sp, #4]
 800e4fa:	6813      	ldr	r3, [r2, #0]
 800e4fc:	b933      	cbnz	r3, 800e50c <_free_r+0x30>
 800e4fe:	6063      	str	r3, [r4, #4]
 800e500:	6014      	str	r4, [r2, #0]
 800e502:	b003      	add	sp, #12
 800e504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e508:	f7ff bfe2 	b.w	800e4d0 <__malloc_unlock>
 800e50c:	42a3      	cmp	r3, r4
 800e50e:	d908      	bls.n	800e522 <_free_r+0x46>
 800e510:	6825      	ldr	r5, [r4, #0]
 800e512:	1961      	adds	r1, r4, r5
 800e514:	428b      	cmp	r3, r1
 800e516:	bf01      	itttt	eq
 800e518:	6819      	ldreq	r1, [r3, #0]
 800e51a:	685b      	ldreq	r3, [r3, #4]
 800e51c:	1949      	addeq	r1, r1, r5
 800e51e:	6021      	streq	r1, [r4, #0]
 800e520:	e7ed      	b.n	800e4fe <_free_r+0x22>
 800e522:	461a      	mov	r2, r3
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	b10b      	cbz	r3, 800e52c <_free_r+0x50>
 800e528:	42a3      	cmp	r3, r4
 800e52a:	d9fa      	bls.n	800e522 <_free_r+0x46>
 800e52c:	6811      	ldr	r1, [r2, #0]
 800e52e:	1855      	adds	r5, r2, r1
 800e530:	42a5      	cmp	r5, r4
 800e532:	d10b      	bne.n	800e54c <_free_r+0x70>
 800e534:	6824      	ldr	r4, [r4, #0]
 800e536:	4421      	add	r1, r4
 800e538:	1854      	adds	r4, r2, r1
 800e53a:	42a3      	cmp	r3, r4
 800e53c:	6011      	str	r1, [r2, #0]
 800e53e:	d1e0      	bne.n	800e502 <_free_r+0x26>
 800e540:	681c      	ldr	r4, [r3, #0]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	6053      	str	r3, [r2, #4]
 800e546:	4421      	add	r1, r4
 800e548:	6011      	str	r1, [r2, #0]
 800e54a:	e7da      	b.n	800e502 <_free_r+0x26>
 800e54c:	d902      	bls.n	800e554 <_free_r+0x78>
 800e54e:	230c      	movs	r3, #12
 800e550:	6003      	str	r3, [r0, #0]
 800e552:	e7d6      	b.n	800e502 <_free_r+0x26>
 800e554:	6825      	ldr	r5, [r4, #0]
 800e556:	1961      	adds	r1, r4, r5
 800e558:	428b      	cmp	r3, r1
 800e55a:	bf04      	itt	eq
 800e55c:	6819      	ldreq	r1, [r3, #0]
 800e55e:	685b      	ldreq	r3, [r3, #4]
 800e560:	6063      	str	r3, [r4, #4]
 800e562:	bf04      	itt	eq
 800e564:	1949      	addeq	r1, r1, r5
 800e566:	6021      	streq	r1, [r4, #0]
 800e568:	6054      	str	r4, [r2, #4]
 800e56a:	e7ca      	b.n	800e502 <_free_r+0x26>
 800e56c:	b003      	add	sp, #12
 800e56e:	bd30      	pop	{r4, r5, pc}
 800e570:	20006cbc 	.word	0x20006cbc

0800e574 <_init>:
 800e574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e576:	bf00      	nop
 800e578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e57a:	bc08      	pop	{r3}
 800e57c:	469e      	mov	lr, r3
 800e57e:	4770      	bx	lr

0800e580 <_fini>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	bf00      	nop
 800e584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e586:	bc08      	pop	{r3}
 800e588:	469e      	mov	lr, r3
 800e58a:	4770      	bx	lr
