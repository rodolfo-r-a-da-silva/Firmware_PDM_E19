
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbcc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800fd90  0800fd90  0001fd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdf8  0800fdf8  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdf8  0800fdf8  0001fdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe00  0800fe00  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe00  0800fe00  0001fe00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe04  0800fe04  0001fe04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800fe08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002450  20000160  0800ff68  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 0000c000  200025b0  0800ff68  000225b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022694  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e1f  00000000  00000000  00042824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00047648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  00049030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000295a1  00000000  00000000  0004a7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024492  00000000  00000000  00073d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6d5e  00000000  00000000  00098213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017ef71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d58  00000000  00000000  0017efc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000160 	.word	0x20000160
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800fd78 	.word	0x0800fd78

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000164 	.word	0x20000164
 8000200:	0800fd78 	.word	0x0800fd78

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f003 fe26 	bl	800415c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f874 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fd62 	bl	8000fdc <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 fd0a 	bl	8000f30 <MX_DMA_Init>
  MX_ADC1_Init();
 800051c:	f000 f8e0 	bl	80006e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000520:	f000 f96a 	bl	80007f8 <MX_ADC2_Init>
  MX_TIM7_Init();
 8000524:	f000 fc2e 	bl	8000d84 <MX_TIM7_Init>
  MX_CAN1_Init();
 8000528:	f000 f9f0 	bl	800090c <MX_CAN1_Init>
  MX_TIM1_Init();
 800052c:	f000 fa66 	bl	80009fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000530:	f000 fb04 	bl	8000b3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000534:	f000 fb78 	bl	8000c28 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000538:	f000 fc58 	bl	8000dec <MX_TIM8_Init>
  MX_I2C1_Init();
 800053c:	f000 fa30 	bl	80009a0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000540:	f00e fd6e 	bl	800f020 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000544:	f000 fa18 	bl	8000978 <MX_CRC_Init>
  MX_TIM6_Init();
 8000548:	f000 fbe6 	bl	8000d18 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  PDM_Init(&hcan1, &hi2c1);
 800054c:	4922      	ldr	r1, [pc, #136]	; (80005d8 <main+0xd0>)
 800054e:	4823      	ldr	r0, [pc, #140]	; (80005dc <main+0xd4>)
 8000550:	f000 fefe 	bl	8001350 <PDM_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Convert ADC values to data channels
	  if(flagReading[1] == Data_Read_Ready)
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <main+0xd8>)
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d102      	bne.n	8000562 <main+0x5a>
		  PDM_Data_Conversion(&htim6);
 800055c:	4821      	ldr	r0, [pc, #132]	; (80005e4 <main+0xdc>)
 800055e:	f002 fded 	bl	800313c <PDM_Data_Conversion>

	  //Transmit 10 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg10Hz >= DATA_FREQ_10HZ)
 8000562:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <main+0xe0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800056a:	d306      	bcc.n	800057a <main+0x72>
	  {
		  accMsg10Hz = 0;
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <main+0xe0>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_10Hz);
 8000572:	2101      	movs	r1, #1
 8000574:	4819      	ldr	r0, [pc, #100]	; (80005dc <main+0xd4>)
 8000576:	f000 fea5 	bl	80012c4 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 25 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg25Hz >= DATA_FREQ_25HZ)
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <main+0xe4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000582:	d306      	bcc.n	8000592 <main+0x8a>
	  {
		  accMsg25Hz = 0;
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <main+0xe4>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_25Hz);
 800058a:	2102      	movs	r1, #2
 800058c:	4813      	ldr	r0, [pc, #76]	; (80005dc <main+0xd4>)
 800058e:	f000 fe99 	bl	80012c4 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 50 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg50Hz >= DATA_FREQ_50HZ)
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <main+0xe8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2bc7      	cmp	r3, #199	; 0xc7
 8000598:	d906      	bls.n	80005a8 <main+0xa0>
	  {
		  accMsg50Hz = 0;
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <main+0xe8>)
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_50Hz);
 80005a0:	2103      	movs	r1, #3
 80005a2:	480e      	ldr	r0, [pc, #56]	; (80005dc <main+0xd4>)
 80005a4:	f000 fe8e 	bl	80012c4 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 80 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg80Hz >= DATA_FREQ_80HZ)
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <main+0xec>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b7c      	cmp	r3, #124	; 0x7c
 80005ae:	d906      	bls.n	80005be <main+0xb6>
	  {
		  accMsg80Hz = 0;
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <main+0xec>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_80Hz);
 80005b6:	2104      	movs	r1, #4
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <main+0xd4>)
 80005ba:	f000 fe83 	bl	80012c4 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 100 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg100Hz >= DATA_FREQ_100HZ)
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <main+0xf0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b63      	cmp	r3, #99	; 0x63
 80005c4:	d9c6      	bls.n	8000554 <main+0x4c>
	  {
		  accMsg100Hz = 0;
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <main+0xf0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_100Hz);
 80005cc:	2105      	movs	r1, #5
 80005ce:	4803      	ldr	r0, [pc, #12]	; (80005dc <main+0xd4>)
 80005d0:	f000 fe78 	bl	80012c4 <PDM_CAN_Transmit_Data>
	  if(flagReading[1] == Data_Read_Ready)
 80005d4:	e7be      	b.n	8000554 <main+0x4c>
 80005d6:	bf00      	nop
 80005d8:	200002fc 	.word	0x200002fc
 80005dc:	200002cc 	.word	0x200002cc
 80005e0:	200007cc 	.word	0x200007cc
 80005e4:	20000428 	.word	0x20000428
 80005e8:	20000934 	.word	0x20000934
 80005ec:	20000938 	.word	0x20000938
 80005f0:	2000093c 	.word	0x2000093c
 80005f4:	20000940 	.word	0x20000940
 80005f8:	20000944 	.word	0x20000944

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2234      	movs	r2, #52	; 0x34
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f00f faae 	bl	800fb6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <SystemClock_Config+0xdc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a2b      	ldr	r2, [pc, #172]	; (80006d8 <SystemClock_Config+0xdc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <SystemClock_Config+0xdc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemClock_Config+0xe0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a25      	ldr	r2, [pc, #148]	; (80006dc <SystemClock_Config+0xe0>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemClock_Config+0xe0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000670:	23b4      	movs	r3, #180	; 0xb4
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4618      	mov	r0, r3
 8000686:	f008 ff43 	bl	8009510 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000690:	f000 fdd0 	bl	8001234 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000694:	f008 f88c 	bl	80087b0 <HAL_PWREx_EnableOverDrive>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800069e:	f000 fdc9 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2105      	movs	r1, #5
 80006c0:	4618      	mov	r0, r3
 80006c2:	f008 f8c5 	bl	8008850 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006cc:	f000 fdb2 	bl	8001234 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	; 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f2:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <MX_ADC1_Init+0x108>)
 80006f4:	4a3d      	ldr	r2, [pc, #244]	; (80007ec <MX_ADC1_Init+0x10c>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f8:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <MX_ADC1_Init+0x108>)
 80006fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000700:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000708:	2201      	movs	r2, #1
 800070a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800070c:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <MX_ADC1_Init+0x108>)
 800070e:	2201      	movs	r2, #1
 8000710:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071a:	4b33      	ldr	r3, [pc, #204]	; (80007e8 <MX_ADC1_Init+0x108>)
 800071c:	2200      	movs	r2, #0
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000720:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000722:	4a33      	ldr	r2, [pc, #204]	; (80007f0 <MX_ADC1_Init+0x110>)
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000726:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800072c:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <MX_ADC1_Init+0x108>)
 800072e:	2205      	movs	r2, #5
 8000730:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000734:	2201      	movs	r2, #1
 8000736:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_ADC1_Init+0x108>)
 800073c:	2201      	movs	r2, #1
 800073e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000740:	4829      	ldr	r0, [pc, #164]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000742:	f003 fda1 	bl	8004288 <HAL_ADC_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800074c:	f000 fd72 	bl	8001234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000750:	2305      	movs	r3, #5
 8000752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000758:	2307      	movs	r3, #7
 800075a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4821      	ldr	r0, [pc, #132]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000762:	f003 ff03 	bl	800456c <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800076c:	f000 fd62 	bl	8001234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000770:	2306      	movs	r3, #6
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	481a      	ldr	r0, [pc, #104]	; (80007e8 <MX_ADC1_Init+0x108>)
 800077e:	f003 fef5 	bl	800456c <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000788:	f000 fd54 	bl	8001234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800078c:	2307      	movs	r3, #7
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000790:	2303      	movs	r3, #3
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4813      	ldr	r0, [pc, #76]	; (80007e8 <MX_ADC1_Init+0x108>)
 800079a:	f003 fee7 	bl	800456c <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80007a4:	f000 fd46 	bl	8001234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007a8:	230e      	movs	r3, #14
 80007aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <MX_ADC1_Init+0x108>)
 80007b6:	f003 fed9 	bl	800456c <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80007c0:	f000 fd38 	bl	8001234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_ADC1_Init+0x114>)
 80007c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80007c8:	2305      	movs	r3, #5
 80007ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_ADC1_Init+0x108>)
 80007d2:	f003 fecb 	bl	800456c <HAL_ADC_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80007dc:	f000 fd2a 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000017c 	.word	0x2000017c
 80007ec:	40012000 	.word	0x40012000
 80007f0:	0f000001 	.word	0x0f000001
 80007f4:	10000012 	.word	0x10000012

080007f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007fe:	463b      	mov	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800080a:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <MX_ADC2_Init+0x108>)
 800080c:	4a3d      	ldr	r2, [pc, #244]	; (8000904 <MX_ADC2_Init+0x10c>)
 800080e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000810:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <MX_ADC2_Init+0x108>)
 8000812:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000816:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000818:	4b39      	ldr	r3, [pc, #228]	; (8000900 <MX_ADC2_Init+0x108>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <MX_ADC2_Init+0x108>)
 8000820:	2201      	movs	r2, #1
 8000822:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000824:	4b36      	ldr	r3, [pc, #216]	; (8000900 <MX_ADC2_Init+0x108>)
 8000826:	2201      	movs	r2, #1
 8000828:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <MX_ADC2_Init+0x108>)
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000832:	4b33      	ldr	r3, [pc, #204]	; (8000900 <MX_ADC2_Init+0x108>)
 8000834:	2200      	movs	r2, #0
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000838:	4b31      	ldr	r3, [pc, #196]	; (8000900 <MX_ADC2_Init+0x108>)
 800083a:	4a33      	ldr	r2, [pc, #204]	; (8000908 <MX_ADC2_Init+0x110>)
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <MX_ADC2_Init+0x108>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8000844:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <MX_ADC2_Init+0x108>)
 8000846:	2205      	movs	r2, #5
 8000848:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_ADC2_Init+0x108>)
 800084c:	2201      	movs	r2, #1
 800084e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <MX_ADC2_Init+0x108>)
 8000854:	2201      	movs	r2, #1
 8000856:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000858:	4829      	ldr	r0, [pc, #164]	; (8000900 <MX_ADC2_Init+0x108>)
 800085a:	f003 fd15 	bl	8004288 <HAL_ADC_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000864:	f000 fce6 	bl	8001234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000868:	2300      	movs	r3, #0
 800086a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000870:	2307      	movs	r3, #7
 8000872:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	4821      	ldr	r0, [pc, #132]	; (8000900 <MX_ADC2_Init+0x108>)
 800087a:	f003 fe77 	bl	800456c <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000884:	f000 fcd6 	bl	8001234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000888:	2301      	movs	r3, #1
 800088a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	481a      	ldr	r0, [pc, #104]	; (8000900 <MX_ADC2_Init+0x108>)
 8000896:	f003 fe69 	bl	800456c <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80008a0:	f000 fcc8 	bl	8001234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80008a8:	2303      	movs	r3, #3
 80008aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4813      	ldr	r0, [pc, #76]	; (8000900 <MX_ADC2_Init+0x108>)
 80008b2:	f003 fe5b 	bl	800456c <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80008bc:	f000 fcba 	bl	8001234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008c0:	2303      	movs	r3, #3
 80008c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	4619      	mov	r1, r3
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <MX_ADC2_Init+0x108>)
 80008ce:	f003 fe4d 	bl	800456c <HAL_ADC_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80008d8:	f000 fcac 	bl	8001234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008dc:	2304      	movs	r3, #4
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80008e0:	2305      	movs	r3, #5
 80008e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_ADC2_Init+0x108>)
 80008ea:	f003 fe3f 	bl	800456c <HAL_ADC_ConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80008f4:	f000 fc9e 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200001c4 	.word	0x200001c4
 8000904:	40012100 	.word	0x40012100
 8000908:	0f000001 	.word	0x0f000001

0800090c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_CAN1_Init+0x64>)
 8000912:	4a18      	ldr	r2, [pc, #96]	; (8000974 <MX_CAN1_Init+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_CAN1_Init+0x64>)
 8000918:	2205      	movs	r2, #5
 800091a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_CAN1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_CAN1_Init+0x64>)
 8000924:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000928:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_CAN1_Init+0x64>)
 800092c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000930:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_CAN1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_CAN1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_CAN1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_CAN1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_CAN1_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_CAN1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_CAN1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_CAN1_Init+0x64>)
 800095e:	f004 f8b5 	bl	8004acc <HAL_CAN_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000968:	f000 fc64 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200002cc 	.word	0x200002cc
 8000974:	40006400 	.word	0x40006400

08000978 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_CRC_Init+0x20>)
 800097e:	4a07      	ldr	r2, [pc, #28]	; (800099c <MX_CRC_Init+0x24>)
 8000980:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_CRC_Init+0x20>)
 8000984:	f004 ffd7 	bl	8005936 <HAL_CRC_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800098e:	f000 fc51 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200002f4 	.word	0x200002f4
 800099c:	40023000 	.word	0x40023000

080009a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009a6:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <MX_I2C1_Init+0x54>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009ac:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_I2C1_Init+0x58>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009de:	f005 fe23 	bl	8006628 <HAL_I2C_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e8:	f000 fc24 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200002fc 	.word	0x200002fc
 80009f4:	40005400 	.word	0x40005400
 80009f8:	00061a80 	.word	0x00061a80

080009fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b096      	sub	sp, #88	; 0x58
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
 8000a2a:	615a      	str	r2, [r3, #20]
 8000a2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2220      	movs	r2, #32
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f00f f899 	bl	800fb6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a3c:	4a3e      	ldr	r2, [pc, #248]	; (8000b38 <MX_TIM1_Init+0x13c>)
 8000a3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1799;
 8000a40:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a42:	f240 7207 	movw	r2, #1799	; 0x707
 8000a46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a4e:	4b39      	ldr	r3, [pc, #228]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a56:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a5c:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a68:	4832      	ldr	r0, [pc, #200]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a6a:	f008 ffef 	bl	8009a4c <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a74:	f000 fbde 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a82:	4619      	mov	r1, r3
 8000a84:	482b      	ldr	r0, [pc, #172]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a86:	f009 fdf3 	bl	800a670 <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a90:	f000 fbd0 	bl	8001234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a94:	4827      	ldr	r0, [pc, #156]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a96:	f009 f8c8 	bl	8009c2a <HAL_TIM_PWM_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000aa0:	f000 fbc8 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4820      	ldr	r0, [pc, #128]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000ab4:	f00a fd58 	bl	800b568 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000abe:	f000 fbb9 	bl	8001234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac2:	2360      	movs	r3, #96	; 0x60
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	220c      	movs	r2, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4814      	ldr	r0, [pc, #80]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000ae4:	f009 fd02 	bl	800a4ec <HAL_TIM_PWM_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000aee:	f000 fba1 	bl	8001234 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000b16:	f00a fda3 	bl	800b660 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b20:	f000 fb88 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b24:	4803      	ldr	r0, [pc, #12]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000b26:	f003 f8ed 	bl	8003d04 <HAL_TIM_MspPostInit>

}
 8000b2a:	bf00      	nop
 8000b2c:	3758      	adds	r7, #88	; 0x58
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000350 	.word	0x20000350
 8000b38:	40010000 	.word	0x40010000

08000b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b6c:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 8000b74:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b76:	f240 3283 	movw	r2, #899	; 0x383
 8000b7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b82:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b96:	4823      	ldr	r0, [pc, #140]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b98:	f008 ff58 	bl	8009a4c <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ba2:	f000 fb47 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481c      	ldr	r0, [pc, #112]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000bb4:	f009 fd5c 	bl	800a670 <HAL_TIM_ConfigClockSource>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000bbe:	f000 fb39 	bl	8001234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bc2:	4818      	ldr	r0, [pc, #96]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000bc4:	f009 f831 	bl	8009c2a <HAL_TIM_PWM_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bce:	f000 fb31 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bda:	f107 0320 	add.w	r3, r7, #32
 8000bde:	4619      	mov	r1, r3
 8000be0:	4810      	ldr	r0, [pc, #64]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000be2:	f00a fcc1 	bl	800b568 <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000bec:	f000 fb22 	bl	8001234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf0:	2360      	movs	r3, #96	; 0x60
 8000bf2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2208      	movs	r2, #8
 8000c04:	4619      	mov	r1, r3
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000c08:	f009 fc70 	bl	800a4ec <HAL_TIM_PWM_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c12:	f000 fb0f 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000c18:	f003 f874 	bl	8003d04 <HAL_TIM_MspPostInit>

}
 8000c1c:	bf00      	nop
 8000c1e:	3738      	adds	r7, #56	; 0x38
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000398 	.word	0x20000398

08000c28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	; 0x38
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c58:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c5a:	4a2e      	ldr	r2, [pc, #184]	; (8000d14 <MX_TIM3_Init+0xec>)
 8000c5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c60:	f240 3283 	movw	r2, #899	; 0x383
 8000c64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c6c:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c80:	4823      	ldr	r0, [pc, #140]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c82:	f008 fee3 	bl	8009a4c <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c8c:	f000 fad2 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	481c      	ldr	r0, [pc, #112]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c9e:	f009 fce7 	bl	800a670 <HAL_TIM_ConfigClockSource>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ca8:	f000 fac4 	bl	8001234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cac:	4818      	ldr	r0, [pc, #96]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000cae:	f008 ffbc 	bl	8009c2a <HAL_TIM_PWM_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000cb8:	f000 fabc 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cc4:	f107 0320 	add.w	r3, r7, #32
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4811      	ldr	r0, [pc, #68]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000ccc:	f00a fc4c 	bl	800b568 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000cd6:	f000 faad 	bl	8001234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cda:	2360      	movs	r3, #96	; 0x60
 8000cdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	220c      	movs	r2, #12
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4807      	ldr	r0, [pc, #28]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000cf2:	f009 fbfb 	bl	800a4ec <HAL_TIM_PWM_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000cfc:	f000 fa9a 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000d02:	f002 ffff 	bl	8003d04 <HAL_TIM_MspPostInit>

}
 8000d06:	bf00      	nop
 8000d08:	3738      	adds	r7, #56	; 0x38
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200003e0 	.word	0x200003e0
 8000d14:	40000400 	.word	0x40000400

08000d18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d28:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <MX_TIM6_Init+0x68>)
 8000d2a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d2e:	2259      	movs	r2, #89	; 0x59
 8000d30:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xfffe;
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d3a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d48:	f008 fe80 	bl	8009a4c <HAL_TIM_Base_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d52:	f000 fa6f 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d5e:	463b      	mov	r3, r7
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d64:	f00a fc00 	bl	800b568 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d6e:	f000 fa61 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000428 	.word	0x20000428
 8000d80:	40001000 	.word	0x40001000

08000d84 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <MX_TIM7_Init+0x64>)
 8000d96:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000d9a:	2259      	movs	r2, #89	; 0x59
 8000d9c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000da6:	2263      	movs	r2, #99	; 0x63
 8000da8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000db2:	f008 fe4b 	bl	8009a4c <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8000dbc:	f000 fa3a 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000dce:	f00a fbcb 	bl	800b568 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000dd8:	f000 fa2c 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000470 	.word	0x20000470
 8000de8:	40001400 	.word	0x40001400

08000dec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b096      	sub	sp, #88	; 0x58
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2220      	movs	r2, #32
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00e fea1 	bl	800fb6c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e2c:	4a3f      	ldr	r2, [pc, #252]	; (8000f2c <MX_TIM8_Init+0x140>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1799;
 8000e30:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e32:	f240 7207 	movw	r2, #1799	; 0x707
 8000e36:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000e3e:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e44:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e58:	4833      	ldr	r0, [pc, #204]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e5a:	f008 fdf7 	bl	8009a4c <HAL_TIM_Base_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000e64:	f000 f9e6 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e72:	4619      	mov	r1, r3
 8000e74:	482c      	ldr	r0, [pc, #176]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e76:	f009 fbfb 	bl	800a670 <HAL_TIM_ConfigClockSource>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000e80:	f000 f9d8 	bl	8001234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e84:	4828      	ldr	r0, [pc, #160]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e86:	f008 fed0 	bl	8009c2a <HAL_TIM_PWM_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000e90:	f000 f9d0 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4821      	ldr	r0, [pc, #132]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000ea4:	f00a fb60 	bl	800b568 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000eae:	f000 f9c1 	bl	8001234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb2:	2360      	movs	r3, #96	; 0x60
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4814      	ldr	r0, [pc, #80]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000ed8:	f009 fb08 	bl	800a4ec <HAL_TIM_PWM_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000ee2:	f000 f9a7 	bl	8001234 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000efa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000f0a:	f00a fba9 	bl	800b660 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8000f14:	f000 f98e 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000f1a:	f002 fef3 	bl	8003d04 <HAL_TIM_MspPostInit>

}
 8000f1e:	bf00      	nop
 8000f20:	3758      	adds	r7, #88	; 0x58
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200004b8 	.word	0x200004b8
 8000f2c:	40010400 	.word	0x40010400

08000f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <MX_DMA_Init+0xa8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a26      	ldr	r2, [pc, #152]	; (8000fd8 <MX_DMA_Init+0xa8>)
 8000f40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <MX_DMA_Init+0xa8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_DMA_Init+0xa8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a1f      	ldr	r2, [pc, #124]	; (8000fd8 <MX_DMA_Init+0xa8>)
 8000f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_DMA_Init+0xa8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	200c      	movs	r0, #12
 8000f74:	f004 fc9b 	bl	80058ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f78:	200c      	movs	r0, #12
 8000f7a:	f004 fcb4 	bl	80058e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	200d      	movs	r0, #13
 8000f84:	f004 fc93 	bl	80058ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f88:	200d      	movs	r0, #13
 8000f8a:	f004 fcac 	bl	80058e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2038      	movs	r0, #56	; 0x38
 8000f94:	f004 fc8b 	bl	80058ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f98:	2038      	movs	r0, #56	; 0x38
 8000f9a:	f004 fca4 	bl	80058e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	203a      	movs	r0, #58	; 0x3a
 8000fa4:	f004 fc83 	bl	80058ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fa8:	203a      	movs	r0, #58	; 0x3a
 8000faa:	f004 fc9c 	bl	80058e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	203b      	movs	r0, #59	; 0x3b
 8000fb4:	f004 fc7b 	bl	80058ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fb8:	203b      	movs	r0, #59	; 0x3b
 8000fba:	f004 fc94 	bl	80058e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	203c      	movs	r0, #60	; 0x3c
 8000fc4:	f004 fc73 	bl	80058ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000fc8:	203c      	movs	r0, #60	; 0x3c
 8000fca:	f004 fc8c 	bl	80058e6 <HAL_NVIC_EnableIRQ>

}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08e      	sub	sp, #56	; 0x38
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
 8000ff6:	4b88      	ldr	r3, [pc, #544]	; (8001218 <MX_GPIO_Init+0x23c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a87      	ldr	r2, [pc, #540]	; (8001218 <MX_GPIO_Init+0x23c>)
 8000ffc:	f043 0310 	orr.w	r3, r3, #16
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b85      	ldr	r3, [pc, #532]	; (8001218 <MX_GPIO_Init+0x23c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	623b      	str	r3, [r7, #32]
 800100c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	4b81      	ldr	r3, [pc, #516]	; (8001218 <MX_GPIO_Init+0x23c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a80      	ldr	r2, [pc, #512]	; (8001218 <MX_GPIO_Init+0x23c>)
 8001018:	f043 0320 	orr.w	r3, r3, #32
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b7e      	ldr	r3, [pc, #504]	; (8001218 <MX_GPIO_Init+0x23c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0320 	and.w	r3, r3, #32
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	4b7a      	ldr	r3, [pc, #488]	; (8001218 <MX_GPIO_Init+0x23c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a79      	ldr	r2, [pc, #484]	; (8001218 <MX_GPIO_Init+0x23c>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b77      	ldr	r3, [pc, #476]	; (8001218 <MX_GPIO_Init+0x23c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	4b73      	ldr	r3, [pc, #460]	; (8001218 <MX_GPIO_Init+0x23c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a72      	ldr	r2, [pc, #456]	; (8001218 <MX_GPIO_Init+0x23c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b70      	ldr	r3, [pc, #448]	; (8001218 <MX_GPIO_Init+0x23c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b6c      	ldr	r3, [pc, #432]	; (8001218 <MX_GPIO_Init+0x23c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a6b      	ldr	r2, [pc, #428]	; (8001218 <MX_GPIO_Init+0x23c>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b69      	ldr	r3, [pc, #420]	; (8001218 <MX_GPIO_Init+0x23c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b65      	ldr	r3, [pc, #404]	; (8001218 <MX_GPIO_Init+0x23c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a64      	ldr	r2, [pc, #400]	; (8001218 <MX_GPIO_Init+0x23c>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b62      	ldr	r3, [pc, #392]	; (8001218 <MX_GPIO_Init+0x23c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <MX_GPIO_Init+0x23c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a5d      	ldr	r2, [pc, #372]	; (8001218 <MX_GPIO_Init+0x23c>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b5b      	ldr	r3, [pc, #364]	; (8001218 <MX_GPIO_Init+0x23c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b57      	ldr	r3, [pc, #348]	; (8001218 <MX_GPIO_Init+0x23c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a56      	ldr	r2, [pc, #344]	; (8001218 <MX_GPIO_Init+0x23c>)
 80010c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b54      	ldr	r3, [pc, #336]	; (8001218 <MX_GPIO_Init+0x23c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FAULTRST_Pin|SEL1_Pin|SEL0_Pin|SEN_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	213c      	movs	r1, #60	; 0x3c
 80010d6:	4851      	ldr	r0, [pc, #324]	; (800121c <MX_GPIO_Init+0x240>)
 80010d8:	f005 fa5a 	bl	8006590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80010e2:	484f      	ldr	r0, [pc, #316]	; (8001220 <MX_GPIO_Init+0x244>)
 80010e4:	f005 fa54 	bl	8006590 <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80010ee:	484d      	ldr	r0, [pc, #308]	; (8001224 <MX_GPIO_Init+0x248>)
 80010f0:	f005 fa4e 	bl	8006590 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : FAULTRST_Pin SEL1_Pin SEL0_Pin SEN_Pin */
  GPIO_InitStruct.Pin = FAULTRST_Pin|SEL1_Pin|SEL0_Pin|SEN_Pin;
 80010f4:	233c      	movs	r3, #60	; 0x3c
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010f8:	2311      	movs	r3, #17
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001108:	4619      	mov	r1, r3
 800110a:	4844      	ldr	r0, [pc, #272]	; (800121c <MX_GPIO_Init+0x240>)
 800110c:	f004 ffa0 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 8001110:	230f      	movs	r3, #15
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001114:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001122:	4619      	mov	r1, r3
 8001124:	4840      	ldr	r0, [pc, #256]	; (8001228 <MX_GPIO_Init+0x24c>)
 8001126:	f004 ff93 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 800112a:	f24f 0330 	movw	r3, #61488	; 0xf030
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001130:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	4619      	mov	r1, r3
 8001140:	483a      	ldr	r0, [pc, #232]	; (800122c <MX_GPIO_Init+0x250>)
 8001142:	f004 ff85 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 8001146:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800114c:	2311      	movs	r3, #17
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	4830      	ldr	r0, [pc, #192]	; (8001220 <MX_GPIO_Init+0x244>)
 8001160:	f004 ff76 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 8001164:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800116a:	2311      	movs	r3, #17
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	4619      	mov	r1, r3
 800117c:	4829      	ldr	r0, [pc, #164]	; (8001224 <MX_GPIO_Init+0x248>)
 800117e:	f004 ff67 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 8001182:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001188:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4825      	ldr	r0, [pc, #148]	; (8001230 <MX_GPIO_Init+0x254>)
 800119a:	f004 ff59 	bl	8006050 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2101      	movs	r1, #1
 80011a2:	2006      	movs	r0, #6
 80011a4:	f004 fb83 	bl	80058ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011a8:	2006      	movs	r0, #6
 80011aa:	f004 fb9c 	bl	80058e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2101      	movs	r1, #1
 80011b2:	2007      	movs	r0, #7
 80011b4:	f004 fb7b 	bl	80058ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011b8:	2007      	movs	r0, #7
 80011ba:	f004 fb94 	bl	80058e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2101      	movs	r1, #1
 80011c2:	2008      	movs	r0, #8
 80011c4:	f004 fb73 	bl	80058ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011c8:	2008      	movs	r0, #8
 80011ca:	f004 fb8c 	bl	80058e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2101      	movs	r1, #1
 80011d2:	2009      	movs	r0, #9
 80011d4:	f004 fb6b 	bl	80058ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011d8:	2009      	movs	r0, #9
 80011da:	f004 fb84 	bl	80058e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2101      	movs	r1, #1
 80011e2:	200a      	movs	r0, #10
 80011e4:	f004 fb63 	bl	80058ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011e8:	200a      	movs	r0, #10
 80011ea:	f004 fb7c 	bl	80058e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2101      	movs	r1, #1
 80011f2:	2017      	movs	r0, #23
 80011f4:	f004 fb5b 	bl	80058ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011f8:	2017      	movs	r0, #23
 80011fa:	f004 fb74 	bl	80058e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2101      	movs	r1, #1
 8001202:	2028      	movs	r0, #40	; 0x28
 8001204:	f004 fb53 	bl	80058ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001208:	2028      	movs	r0, #40	; 0x28
 800120a:	f004 fb6c 	bl	80058e6 <HAL_NVIC_EnableIRQ>

}
 800120e:	bf00      	nop
 8001210:	3738      	adds	r7, #56	; 0x38
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40021000 	.word	0x40021000
 8001220:	40020c00 	.word	0x40020c00
 8001224:	40021800 	.word	0x40021800
 8001228:	40021400 	.word	0x40021400
 800122c:	40020400 	.word	0x40020400
 8001230:	40020800 	.word	0x40020800

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>
	...

08001240 <PDM_CAN_Init>:
//													2: 250	kbps
//													3: 500	kbps
//													4: 1000 kbps
//Returns HAL_CAN_Start status
HAL_StatusTypeDef PDM_CAN_Init(CAN_HandleTypeDef *hcan, PDM_CAN_Config* filter_struct)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af02      	add	r7, sp, #8
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	//Deinitialize CAN bus for new configuration
	HAL_CAN_DeInit(hcan);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f003 fd39 	bl	8004cc2 <HAL_CAN_DeInit>

	//Sets CAN prescaler to match selected baud rate
	//If CAN bus is configured as disabled, leaves the function without initialization
	switch(filter_struct->baudRate)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	3b01      	subs	r3, #1
 8001256:	2b03      	cmp	r3, #3
 8001258:	d81a      	bhi.n	8001290 <PDM_CAN_Init+0x50>
 800125a:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <PDM_CAN_Init+0x20>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	08001271 	.word	0x08001271
 8001264:	08001279 	.word	0x08001279
 8001268:	08001281 	.word	0x08001281
 800126c:	08001289 	.word	0x08001289
	{
	case CAN_125kbps:
		hcan->Init.Prescaler = 40;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2228      	movs	r2, #40	; 0x28
 8001274:	605a      	str	r2, [r3, #4]
		break;
 8001276:	e00d      	b.n	8001294 <PDM_CAN_Init+0x54>

	case CAN_250kbps:
		hcan->Init.Prescaler = 20;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2214      	movs	r2, #20
 800127c:	605a      	str	r2, [r3, #4]
		break;
 800127e:	e009      	b.n	8001294 <PDM_CAN_Init+0x54>

	case CAN_500kbps:
		hcan->Init.Prescaler = 10;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	220a      	movs	r2, #10
 8001284:	605a      	str	r2, [r3, #4]
		break;
 8001286:	e005      	b.n	8001294 <PDM_CAN_Init+0x54>

	case CAN_1000kbps:
		hcan->Init.Prescaler = 5;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2205      	movs	r2, #5
 800128c:	605a      	str	r2, [r3, #4]
		break;
 800128e:	e001      	b.n	8001294 <PDM_CAN_Init+0x54>

		default:
			return HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	e012      	b.n	80012ba <PDM_CAN_Init+0x7a>
	}

	//Reinitialize CAN bus
	HAL_CAN_Init(hcan);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f003 fc19 	bl	8004acc <HAL_CAN_Init>

	PDM_CAN_Filter_Config(hcan, 0, CAN_CONFIG_FILTER, CAN_CONFIG_MASK, CAN_ID_EXT);
 800129a:	2304      	movs	r3, #4
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2300      	movs	r3, #0
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f823 	bl	80012f0 <PDM_CAN_Filter_Config>

	//Initialize receive callbacks
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012aa:	2102      	movs	r1, #2
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f003 ffaa 	bl	8005206 <HAL_CAN_ActivateNotification>

	//Starts CAN bus communication and leaves the function
	return HAL_CAN_Start(hcan);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f003 fe08 	bl	8004ec8 <HAL_CAN_Start>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop

080012c4 <PDM_CAN_Transmit_Data>:
//													3: 50 Hz transmission
//													4: 80 Hz transmission
//													5: 100 Hz transmission
//Returns HAL_CAN_AddTxMessage status
HAL_StatusTypeDef PDM_CAN_Transmit_Data(CAN_HandleTypeDef* hcan, uint8_t data_freq)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret_val = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]

	return ret_val;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
	}

	return ret_val;
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <PDM_CAN_Process_Rx_Data>:

//Process received data to set PWM output duty cycle
void PDM_CAN_Process_Rx_Data()
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
	return;
 80012e6:	bf00      	nop
}
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <PDM_CAN_Filter_Config>:
//CAN_HandleTypeDef *hcan - CAN handler struct pointer
//PWM_Control_Struct *pwm_struct - control struct for PWM output
//uint8_t pwm_out_number - number of PWM output
//Returns HAL_CAN_ConfigFilter status
static HAL_StatusTypeDef PDM_CAN_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t filter_nbr, uint32_t filter_id, uint32_t filter_mask, uint32_t filter_ide)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08e      	sub	sp, #56	; 0x38
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	460b      	mov	r3, r1
 80012fe:	72fb      	strb	r3, [r7, #11]
	CAN_FilterTypeDef canFilterConfig;

	//Sets CAN filter configuration
	canFilterConfig.FilterBank = filter_nbr;
 8001300:	7afb      	ldrb	r3, [r7, #11]
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
	canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001308:	2301      	movs	r3, #1
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
	canFilterConfig.FilterIdHigh = filter_id >> 13;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	0b5b      	lsrs	r3, r3, #13
 8001310:	613b      	str	r3, [r7, #16]
	canFilterConfig.FilterIdLow = (filter_id << 3) | (filter_ide & 0x0004);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	00da      	lsls	r2, r3, #3
 8001316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	4313      	orrs	r3, r2
 800131e:	617b      	str	r3, [r7, #20]
	canFilterConfig.FilterMaskIdHigh = filter_mask >> 13;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	0b5b      	lsrs	r3, r3, #13
 8001324:	61bb      	str	r3, [r7, #24]
	canFilterConfig.FilterMaskIdLow = (filter_mask << 3) | 0x0004;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	61fb      	str	r3, [r7, #28]
	canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
	canFilterConfig.FilterActivation = ENABLE;
 8001334:	2301      	movs	r3, #1
 8001336:	633b      	str	r3, [r7, #48]	; 0x30

	//Loads CAN filter configuration into filter bank
	return HAL_CAN_ConfigFilter(hcan, &canFilterConfig);
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4619      	mov	r1, r3
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f003 fce2 	bl	8004d08 <HAL_CAN_ConfigFilter>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3738      	adds	r7, #56	; 0x38
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <PDM_Init>:

//Initialize PDM
//Loads from EEPROM
//Initializes PWM
void PDM_Init(CAN_HandleTypeDef *hcan, I2C_HandleTypeDef *hi2c)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	//Sets all outputs to zero
	Output_Reset_State();
 800135a:	f000 fd41 	bl	8001de0 <Output_Reset_State>

	//Weak function for data overwriting during initialization
	PDM_Hard_Code_Config();
 800135e:	f000 fc1f 	bl	8001ba0 <PDM_Hard_Code_Config>
	//Loads both normal output and PWM output parameters
//	Output_Cfg_Load_From_EEPROM(hi2c);
//	PWM_Output_Cfg_Load_From_EEPROM(hi2c);

	//Initializes each PWM able output
	PDM_PWM_Init(hcan, &pwmOutStruct[0], 0);
 8001362:	2200      	movs	r2, #0
 8001364:	4922      	ldr	r1, [pc, #136]	; (80013f0 <PDM_Init+0xa0>)
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 ffba 	bl	80022e0 <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[1], 1);
 800136c:	2201      	movs	r2, #1
 800136e:	4921      	ldr	r1, [pc, #132]	; (80013f4 <PDM_Init+0xa4>)
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 ffb5 	bl	80022e0 <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[2], 2);
 8001376:	2202      	movs	r2, #2
 8001378:	491f      	ldr	r1, [pc, #124]	; (80013f8 <PDM_Init+0xa8>)
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 ffb0 	bl	80022e0 <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[3], 3);
 8001380:	2203      	movs	r2, #3
 8001382:	491e      	ldr	r1, [pc, #120]	; (80013fc <PDM_Init+0xac>)
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 ffab 	bl	80022e0 <PDM_PWM_Init>

	//Checks input pin levels
	PDM_Input_Process();
 800138a:	f000 fdbf 	bl	8001f0c <PDM_Input_Process>

	//Initializes CAN bus
	PDM_CAN_Init(hcan, &canConfig);
 800138e:	491c      	ldr	r1, [pc, #112]	; (8001400 <PDM_Init+0xb0>)
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff55 	bl	8001240 <PDM_CAN_Init>

	//Initializes CAN ID buffer
	__PDM_ID_BUFFER_INIT();
 8001396:	2300      	movs	r3, #0
 8001398:	81fb      	strh	r3, [r7, #14]
 800139a:	e009      	b.n	80013b0 <PDM_Init+0x60>
 800139c:	89fb      	ldrh	r3, [r7, #14]
 800139e:	89fa      	ldrh	r2, [r7, #14]
 80013a0:	0052      	lsls	r2, r2, #1
 80013a2:	b291      	uxth	r1, r2
 80013a4:	4a17      	ldr	r2, [pc, #92]	; (8001404 <PDM_Init+0xb4>)
 80013a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80013aa:	89fb      	ldrh	r3, [r7, #14]
 80013ac:	3301      	adds	r3, #1
 80013ae:	81fb      	strh	r3, [r7, #14]
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	2b1d      	cmp	r3, #29
 80013b4:	d9f2      	bls.n	800139c <PDM_Init+0x4c>

	//Sets outputs based on input levels
	PDM_Output_Process();
 80013b6:	f000 fea9 	bl	800210c <PDM_Output_Process>

	//Starts Multisense data conversion
	flagReading[0] = Data_Read_Ready;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <PDM_Init+0xb8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
	flagReading[1] = Data_Read_Ready;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <PDM_Init+0xb8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	705a      	strb	r2, [r3, #1]
	PDM_Data_Conversion(&htim6);
 80013c6:	4811      	ldr	r0, [pc, #68]	; (800140c <PDM_Init+0xbc>)
 80013c8:	f001 feb8 	bl	800313c <PDM_Data_Conversion>

	//Initializes timers and ADC conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcBuffer[5], 5);
 80013cc:	2205      	movs	r2, #5
 80013ce:	4910      	ldr	r1, [pc, #64]	; (8001410 <PDM_Init+0xc0>)
 80013d0:	4810      	ldr	r0, [pc, #64]	; (8001414 <PDM_Init+0xc4>)
 80013d2:	f002 ff9d 	bl	8004310 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &adcBuffer[0], 5);
 80013d6:	2205      	movs	r2, #5
 80013d8:	490f      	ldr	r1, [pc, #60]	; (8001418 <PDM_Init+0xc8>)
 80013da:	4810      	ldr	r0, [pc, #64]	; (800141c <PDM_Init+0xcc>)
 80013dc:	f002 ff98 	bl	8004310 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim7);
 80013e0:	480f      	ldr	r0, [pc, #60]	; (8001420 <PDM_Init+0xd0>)
 80013e2:	f008 fb83 	bl	8009aec <HAL_TIM_Base_Start_IT>

	return;
 80013e6:	bf00      	nop
}
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200008b4 	.word	0x200008b4
 80013f4:	200008d4 	.word	0x200008d4
 80013f8:	200008f4 	.word	0x200008f4
 80013fc:	20000914 	.word	0x20000914
 8001400:	200006a4 	.word	0x200006a4
 8001404:	20000778 	.word	0x20000778
 8001408:	200007cc 	.word	0x200007cc
 800140c:	20000428 	.word	0x20000428
 8001410:	200007be 	.word	0x200007be
 8001414:	2000017c 	.word	0x2000017c
 8001418:	200007b4 	.word	0x200007b4
 800141c:	200001c4 	.word	0x200001c4
 8001420:	20000470 	.word	0x20000470

08001424 <PDM_USB_Process>:

void PDM_USB_Process(uint8_t *Data, uint16_t Size)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
	return;
 8001430:	bf00      	nop
}
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <PDM_PWM_Load_SoftStart_From_EEPROM>:
{
	return;
}

HAL_StatusTypeDef PDM_PWM_Load_SoftStart_From_EEPROM(I2C_HandleTypeDef*hi2c, PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	4613      	mov	r3, r2
 8001448:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer;
	uint16_t buffer_address = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	82fb      	strh	r3, [r7, #22]
	HAL_StatusTypeDef retVal = HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	757b      	strb	r3, [r7, #21]

	switch(pwm_out_number)
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d817      	bhi.n	8001488 <PDM_PWM_Load_SoftStart_From_EEPROM+0x4c>
 8001458:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <PDM_PWM_Load_SoftStart_From_EEPROM+0x24>)
 800145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145e:	bf00      	nop
 8001460:	08001471 	.word	0x08001471
 8001464:	08001477 	.word	0x08001477
 8001468:	0800147d 	.word	0x0800147d
 800146c:	08001483 	.word	0x08001483
	{
	case 0:
		buffer_address = EEPROM_PWM1_SST1_ADDRESS;
 8001470:	2300      	movs	r3, #0
 8001472:	82fb      	strh	r3, [r7, #22]
		break;
 8001474:	e008      	b.n	8001488 <PDM_PWM_Load_SoftStart_From_EEPROM+0x4c>

	case 1:
		buffer_address = EEPROM_PWM2_SST1_ADDRESS;
 8001476:	2300      	movs	r3, #0
 8001478:	82fb      	strh	r3, [r7, #22]
		break;
 800147a:	e005      	b.n	8001488 <PDM_PWM_Load_SoftStart_From_EEPROM+0x4c>

	case 2:
		buffer_address = EEPROM_PWM3_SST1_ADDRESS;
 800147c:	2300      	movs	r3, #0
 800147e:	82fb      	strh	r3, [r7, #22]
		break;
 8001480:	e002      	b.n	8001488 <PDM_PWM_Load_SoftStart_From_EEPROM+0x4c>

	case 3:
		buffer_address = EEPROM_PWM4_SST1_ADDRESS;
 8001482:	2300      	movs	r3, #0
 8001484:	82fb      	strh	r3, [r7, #22]
		break;
 8001486:	bf00      	nop
	}



	switch(pwm_struct->pwmFrequency)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	885b      	ldrh	r3, [r3, #2]
 800148c:	f240 3283 	movw	r2, #899	; 0x383
 8001490:	4293      	cmp	r3, r2
 8001492:	d062      	beq.n	800155a <PDM_PWM_Load_SoftStart_From_EEPROM+0x11e>
 8001494:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001498:	f280 80e3 	bge.w	8001662 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 800149c:	f240 1267 	movw	r2, #359	; 0x167
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d067      	beq.n	8001574 <PDM_PWM_Load_SoftStart_From_EEPROM+0x138>
 80014a4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80014a8:	f280 80db 	bge.w	8001662 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 80014ac:	2bb3      	cmp	r3, #179	; 0xb3
 80014ae:	d06d      	beq.n	800158c <PDM_PWM_Load_SoftStart_From_EEPROM+0x150>
 80014b0:	2bb3      	cmp	r3, #179	; 0xb3
 80014b2:	f300 80d6 	bgt.w	8001662 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 80014b6:	2b77      	cmp	r3, #119	; 0x77
 80014b8:	d073      	beq.n	80015a2 <PDM_PWM_Load_SoftStart_From_EEPROM+0x166>
 80014ba:	2b77      	cmp	r3, #119	; 0x77
 80014bc:	f300 80d1 	bgt.w	8001662 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 80014c0:	2b23      	cmp	r3, #35	; 0x23
 80014c2:	dc47      	bgt.n	8001554 <PDM_PWM_Load_SoftStart_From_EEPROM+0x118>
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	f2c0 80cc 	blt.w	8001662 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 80014ca:	3b05      	subs	r3, #5
 80014cc:	2b1e      	cmp	r3, #30
 80014ce:	f200 80c8 	bhi.w	8001662 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 80014d2:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <PDM_PWM_Load_SoftStart_From_EEPROM+0x9c>)
 80014d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d8:	0800164d 	.word	0x0800164d
 80014dc:	08001663 	.word	0x08001663
 80014e0:	08001663 	.word	0x08001663
 80014e4:	08001633 	.word	0x08001633
 80014e8:	08001663 	.word	0x08001663
 80014ec:	08001663 	.word	0x08001663
 80014f0:	0800160f 	.word	0x0800160f
 80014f4:	08001663 	.word	0x08001663
 80014f8:	08001663 	.word	0x08001663
 80014fc:	08001663 	.word	0x08001663
 8001500:	08001663 	.word	0x08001663
 8001504:	08001663 	.word	0x08001663
 8001508:	080015f9 	.word	0x080015f9
 800150c:	08001663 	.word	0x08001663
 8001510:	08001663 	.word	0x08001663
 8001514:	08001663 	.word	0x08001663
 8001518:	08001663 	.word	0x08001663
 800151c:	08001663 	.word	0x08001663
 8001520:	08001663 	.word	0x08001663
 8001524:	08001663 	.word	0x08001663
 8001528:	08001663 	.word	0x08001663
 800152c:	08001663 	.word	0x08001663
 8001530:	08001663 	.word	0x08001663
 8001534:	08001663 	.word	0x08001663
 8001538:	08001663 	.word	0x08001663
 800153c:	08001663 	.word	0x08001663
 8001540:	08001663 	.word	0x08001663
 8001544:	08001663 	.word	0x08001663
 8001548:	08001663 	.word	0x08001663
 800154c:	08001663 	.word	0x08001663
 8001550:	080015d5 	.word	0x080015d5
 8001554:	2b59      	cmp	r3, #89	; 0x59
 8001556:	d036      	beq.n	80015c6 <PDM_PWM_Load_SoftStart_From_EEPROM+0x18a>
	case PWM_FREQ_15000HZ:
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 15000) / 1000;
		break;

	default:
		break;
 8001558:	e083      	b.n	8001662 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 100) / 1000;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	885b      	ldrh	r3, [r3, #2]
 8001560:	4a44      	ldr	r2, [pc, #272]	; (8001674 <PDM_PWM_Load_SoftStart_From_EEPROM+0x238>)
 8001562:	fb82 1203 	smull	r1, r2, r2, r3
 8001566:	1092      	asrs	r2, r2, #2
 8001568:	17db      	asrs	r3, r3, #31
 800156a:	1ad2      	subs	r2, r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	609a      	str	r2, [r3, #8]
		break;
 8001572:	e077      	b.n	8001664 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 250) / 1000;
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	885b      	ldrh	r3, [r3, #2]
 800157a:	2b00      	cmp	r3, #0
 800157c:	da00      	bge.n	8001580 <PDM_PWM_Load_SoftStart_From_EEPROM+0x144>
 800157e:	3303      	adds	r3, #3
 8001580:	109b      	asrs	r3, r3, #2
 8001582:	461a      	mov	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	609a      	str	r2, [r3, #8]
		break;
 800158a:	e06b      	b.n	8001664 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 500) / 1000;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	885b      	ldrh	r3, [r3, #2]
 8001592:	0fda      	lsrs	r2, r3, #31
 8001594:	4413      	add	r3, r2
 8001596:	105b      	asrs	r3, r3, #1
 8001598:	461a      	mov	r2, r3
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	609a      	str	r2, [r3, #8]
		break;
 80015a0:	e060      	b.n	8001664 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 750) / 1000;
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	885b      	ldrh	r3, [r3, #2]
 80015a8:	461a      	mov	r2, r3
 80015aa:	f240 23ee 	movw	r3, #750	; 0x2ee
 80015ae:	fb02 f303 	mul.w	r3, r2, r3
 80015b2:	4a31      	ldr	r2, [pc, #196]	; (8001678 <PDM_PWM_Load_SoftStart_From_EEPROM+0x23c>)
 80015b4:	fb82 1203 	smull	r1, r2, r2, r3
 80015b8:	1192      	asrs	r2, r2, #6
 80015ba:	17db      	asrs	r3, r3, #31
 80015bc:	1ad2      	subs	r2, r2, r3
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	609a      	str	r2, [r3, #8]
		break;
 80015c4:	e04e      	b.n	8001664 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 1000) / 1000;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	885a      	ldrh	r2, [r3, #2]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	609a      	str	r2, [r3, #8]
		break;
 80015d2:	e047      	b.n	8001664 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 2500) / 1000;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	885b      	ldrh	r3, [r3, #2]
 80015da:	461a      	mov	r2, r3
 80015dc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4a24      	ldr	r2, [pc, #144]	; (8001678 <PDM_PWM_Load_SoftStart_From_EEPROM+0x23c>)
 80015e6:	fb82 1203 	smull	r1, r2, r2, r3
 80015ea:	1192      	asrs	r2, r2, #6
 80015ec:	17db      	asrs	r3, r3, #31
 80015ee:	1ad2      	subs	r2, r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	609a      	str	r2, [r3, #8]
		break;
 80015f6:	e035      	b.n	8001664 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 5000) / 1000;
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	885b      	ldrh	r3, [r3, #2]
 80015fe:	461a      	mov	r2, r3
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	441a      	add	r2, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	609a      	str	r2, [r3, #8]
		break;
 800160c:	e02a      	b.n	8001664 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 7500) / 1000;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	885b      	ldrh	r3, [r3, #2]
 8001614:	461a      	mov	r2, r3
 8001616:	f641 534c 	movw	r3, #7500	; 0x1d4c
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	4a16      	ldr	r2, [pc, #88]	; (8001678 <PDM_PWM_Load_SoftStart_From_EEPROM+0x23c>)
 8001620:	fb82 1203 	smull	r1, r2, r2, r3
 8001624:	1192      	asrs	r2, r2, #6
 8001626:	17db      	asrs	r3, r3, #31
 8001628:	1ad2      	subs	r2, r2, r3
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	609a      	str	r2, [r3, #8]
		break;
 8001630:	e018      	b.n	8001664 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 10000) / 1000;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	885b      	ldrh	r3, [r3, #2]
 8001638:	461a      	mov	r2, r3
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	461a      	mov	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	609a      	str	r2, [r3, #8]
		break;
 800164a:	e00b      	b.n	8001664 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 15000) / 1000;
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	885b      	ldrh	r3, [r3, #2]
 8001652:	461a      	mov	r2, r3
 8001654:	4613      	mov	r3, r2
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	1a9a      	subs	r2, r3, r2
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	609a      	str	r2, [r3, #8]
		break;
 8001660:	e000      	b.n	8001664 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		break;
 8001662:	bf00      	nop
	}

	return retVal;
 8001664:	7d7b      	ldrb	r3, [r7, #21]
}
 8001666:	4618      	mov	r0, r3
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	66666667 	.word	0x66666667
 8001678:	10624dd3 	.word	0x10624dd3

0800167c <PDM_PWM_Map_Load_From_EEPROM>:

HAL_StatusTypeDef PDM_PWM_Map_Load_From_EEPROM(I2C_HandleTypeDef* hi2c, PWM_Control_Struct* pwm_struct, uint16_t mem_address)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	f6ad 7dac 	subw	sp, sp, #4012	; 0xfac
 8001682:	af04      	add	r7, sp, #16
 8001684:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001688:	f6a3 738c 	subw	r3, r3, #3980	; 0xf8c
 800168c:	6018      	str	r0, [r3, #0]
 800168e:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001692:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001696:	6019      	str	r1, [r3, #0]
 8001698:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800169c:	f6a3 7392 	subw	r3, r3, #3986	; 0xf92
 80016a0:	801a      	strh	r2, [r3, #0]
	uint8_t buffer[EEPROM_PWM_CFG_MAX_SIZE];
	uint16_t bufferAddress = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8a7 3f90 	strh.w	r3, [r7, #3984]	; 0xf90
	HAL_StatusTypeDef retVal = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 3f8f 	strb.w	r3, [r7, #3983]	; 0xf8f

	if(pwm_struct->outputType != OutType_Map)
 80016ae:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80016b2:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	791b      	ldrb	r3, [r3, #4]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d002      	beq.n	80016c4 <PDM_PWM_Map_Load_From_EEPROM+0x48>
		return retVal;
 80016be:	f897 3f8f 	ldrb.w	r3, [r7, #3983]	; 0xf8f
 80016c2:	e268      	b.n	8001b96 <PDM_PWM_Map_Load_From_EEPROM+0x51a>

	retVal = HAL_I2C_Mem_Read(hi2c, EEPROM_I2C_ADDRESS, mem_address, 2, buffer, sizeof(buffer), EEPROM_TIMEOUT);
 80016c4:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80016c8:	f6a3 7392 	subw	r3, r3, #3986	; 0xf92
 80016cc:	881a      	ldrh	r2, [r3, #0]
 80016ce:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80016d2:	f6a3 708c 	subw	r0, r3, #3980	; 0xf8c
 80016d6:	230a      	movs	r3, #10
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	f640 737f 	movw	r3, #3967	; 0xf7f
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2302      	movs	r3, #2
 80016e8:	21a0      	movs	r1, #160	; 0xa0
 80016ea:	6800      	ldr	r0, [r0, #0]
 80016ec:	f005 f8e0 	bl	80068b0 <HAL_I2C_Mem_Read>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 3f8f 	strb.w	r3, [r7, #3983]	; 0xf8f

	if(pwm_struct->pwmMapStruct != NULL)
 80016f6:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80016fa:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 823e 	beq.w	8001b84 <PDM_PWM_Map_Load_From_EEPROM+0x508>
	{
		pwm_struct->pwmMapStruct->mapLengths[0] = buffer[0];
 8001708:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800170c:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 8001718:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	711a      	strb	r2, [r3, #4]
		pwm_struct->pwmMapStruct->mapLengths[1] = buffer[1];
 8001720:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001724:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 8001730:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 8001734:	7852      	ldrb	r2, [r2, #1]
 8001736:	715a      	strb	r2, [r3, #5]

		bufferAddress += 2;
 8001738:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 800173c:	3302      	adds	r3, #2
 800173e:	f8a7 3f90 	strh.w	r3, [r7, #3984]	; 0xf90

		if((pwm_struct->pwmMapStruct->mapLengths[0] > PWM_TABLE_MAX_SIZE)
 8001742:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001746:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	791b      	ldrb	r3, [r3, #4]
 8001750:	2b10      	cmp	r3, #16
 8001752:	d808      	bhi.n	8001766 <PDM_PWM_Map_Load_From_EEPROM+0xea>
				|| (pwm_struct->pwmMapStruct->mapLengths[1] > PWM_TABLE_MAX_SIZE))
 8001754:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001758:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	795b      	ldrb	r3, [r3, #5]
 8001762:	2b10      	cmp	r3, #16
 8001764:	d906      	bls.n	8001774 <PDM_PWM_Map_Load_From_EEPROM+0xf8>
			pwm_struct->outputType = OutType_Error;
 8001766:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800176a:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2204      	movs	r2, #4
 8001772:	711a      	strb	r2, [r3, #4]

		if(pwm_struct->outputType == OutType_Map)
 8001774:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001778:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	791b      	ldrb	r3, [r3, #4]
 8001780:	2b02      	cmp	r3, #2
 8001782:	f040 80a4 	bne.w	80018ce <PDM_PWM_Map_Load_From_EEPROM+0x252>
		{
			pwm_struct->pwmMapStruct->dutyCycleMap = malloc(pwm_struct->pwmMapStruct->mapLengths[0] * sizeof(uint16_t*));
 8001786:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800178a:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	791b      	ldrb	r3, [r3, #4]
 8001794:	009a      	lsls	r2, r3, #2
 8001796:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800179a:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	699c      	ldr	r4, [r3, #24]
 80017a2:	4610      	mov	r0, r2
 80017a4:	f00e f9d2 	bl	800fb4c <malloc>
 80017a8:	4603      	mov	r3, r0
 80017aa:	6163      	str	r3, [r4, #20]
			pwm_struct->pwmMapStruct->commandVarStep[0] = malloc(pwm_struct->pwmMapStruct->mapLengths[0] * sizeof(int16_t));
 80017ac:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80017b0:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	791b      	ldrb	r3, [r3, #4]
 80017ba:	005a      	lsls	r2, r3, #1
 80017bc:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80017c0:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699c      	ldr	r4, [r3, #24]
 80017c8:	4610      	mov	r0, r2
 80017ca:	f00e f9bf 	bl	800fb4c <malloc>
 80017ce:	4603      	mov	r3, r0
 80017d0:	60e3      	str	r3, [r4, #12]
			pwm_struct->pwmMapStruct->commandVarStep[1] = malloc(pwm_struct->pwmMapStruct->mapLengths[1] * sizeof(int16_t));
 80017d2:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80017d6:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	795b      	ldrb	r3, [r3, #5]
 80017e0:	005a      	lsls	r2, r3, #1
 80017e2:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80017e6:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699c      	ldr	r4, [r3, #24]
 80017ee:	4610      	mov	r0, r2
 80017f0:	f00e f9ac 	bl	800fb4c <malloc>
 80017f4:	4603      	mov	r3, r0
 80017f6:	6123      	str	r3, [r4, #16]

			if((pwm_struct->pwmMapStruct->dutyCycleMap == NULL)
 80017f8:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80017fc:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d011      	beq.n	800182e <PDM_PWM_Map_Load_From_EEPROM+0x1b2>
					|| (pwm_struct->pwmMapStruct->commandVarStep[0] == NULL)
 800180a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800180e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <PDM_PWM_Map_Load_From_EEPROM+0x1b2>
					|| (pwm_struct->pwmMapStruct->commandVarStep[1] == NULL))
 800181c:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001820:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d106      	bne.n	800183c <PDM_PWM_Map_Load_From_EEPROM+0x1c0>
				pwm_struct->outputType = OutType_Error;
 800182e:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001832:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2204      	movs	r2, #4
 800183a:	711a      	strb	r2, [r3, #4]

			for(uint8_t i = 0; (i < pwm_struct->pwmMapStruct->mapLengths[0]) && (pwm_struct->outputType == OutType_Map); i++)
 800183c:	2300      	movs	r3, #0
 800183e:	f887 3f97 	strb.w	r3, [r7, #3991]	; 0xf97
 8001842:	e031      	b.n	80018a8 <PDM_PWM_Map_Load_From_EEPROM+0x22c>
			{
				pwm_struct->pwmMapStruct->dutyCycleMap[i] = malloc(pwm_struct->pwmMapStruct->mapLengths[1] * sizeof(uint16_t));
 8001844:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001848:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	795b      	ldrb	r3, [r3, #5]
 8001852:	0059      	lsls	r1, r3, #1
 8001854:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001858:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	f897 3f97 	ldrb.w	r3, [r7, #3991]	; 0xf97
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	18d4      	adds	r4, r2, r3
 800186a:	4608      	mov	r0, r1
 800186c:	f00e f96e 	bl	800fb4c <malloc>
 8001870:	4603      	mov	r3, r0
 8001872:	6023      	str	r3, [r4, #0]

				if(pwm_struct->pwmMapStruct->dutyCycleMap[i] == NULL)
 8001874:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001878:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	f897 3f97 	ldrb.w	r3, [r7, #3991]	; 0xf97
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d106      	bne.n	800189e <PDM_PWM_Map_Load_From_EEPROM+0x222>
					pwm_struct->outputType = OutType_Error;
 8001890:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001894:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2204      	movs	r2, #4
 800189c:	711a      	strb	r2, [r3, #4]
			for(uint8_t i = 0; (i < pwm_struct->pwmMapStruct->mapLengths[0]) && (pwm_struct->outputType == OutType_Map); i++)
 800189e:	f897 3f97 	ldrb.w	r3, [r7, #3991]	; 0xf97
 80018a2:	3301      	adds	r3, #1
 80018a4:	f887 3f97 	strb.w	r3, [r7, #3991]	; 0xf97
 80018a8:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80018ac:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	791b      	ldrb	r3, [r3, #4]
 80018b6:	f897 2f97 	ldrb.w	r2, [r7, #3991]	; 0xf97
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d207      	bcs.n	80018ce <PDM_PWM_Map_Load_From_EEPROM+0x252>
 80018be:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80018c2:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	791b      	ldrb	r3, [r3, #4]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d0ba      	beq.n	8001844 <PDM_PWM_Map_Load_From_EEPROM+0x1c8>
			}
		}

		if(pwm_struct->outputType == OutType_Map)
 80018ce:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80018d2:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	791b      	ldrb	r3, [r3, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	f040 8159 	bne.w	8001b92 <PDM_PWM_Map_Load_From_EEPROM+0x516>
		{
			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3f96 	strb.w	r3, [r7, #3990]	; 0xf96
 80018e6:	e045      	b.n	8001974 <PDM_PWM_Map_Load_From_EEPROM+0x2f8>
			{
				pwm_struct->pwmMapStruct->commandVarStep[0][i]  = buffer[(i * 2) + bufferAddress] << 8;
 80018e8:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 80018ec:	005a      	lsls	r2, r3, #1
 80018ee:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 80018f2:	4413      	add	r3, r2
 80018f4:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 80018f8:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	0219      	lsls	r1, r3, #8
 8001900:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001904:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	b20a      	sxth	r2, r1
 8001918:	801a      	strh	r2, [r3, #0]
				pwm_struct->pwmMapStruct->commandVarStep[0][i] |= buffer[(i * 2) + 1 + bufferAddress];
 800191a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800191e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001934:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001940:	4413      	add	r3, r2
 8001942:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 8001946:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	b21a      	sxth	r2, r3
 800194e:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001952:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	68d8      	ldr	r0, [r3, #12]
 800195c:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4403      	add	r3, r0
 8001964:	430a      	orrs	r2, r1
 8001966:	b212      	sxth	r2, r2
 8001968:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 800196a:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 800196e:	3301      	adds	r3, #1
 8001970:	f887 3f96 	strb.w	r3, [r7, #3990]	; 0xf96
 8001974:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001978:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	791b      	ldrb	r3, [r3, #4]
 8001982:	f897 2f96 	ldrb.w	r2, [r7, #3990]	; 0xf96
 8001986:	429a      	cmp	r2, r3
 8001988:	d3ae      	bcc.n	80018e8 <PDM_PWM_Map_Load_From_EEPROM+0x26c>
			}

			bufferAddress += pwm_struct->pwmMapStruct->mapLengths[0] * 2;
 800198a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800198e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	791b      	ldrb	r3, [r3, #4]
 8001998:	b29b      	uxth	r3, r3
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	b29a      	uxth	r2, r3
 800199e:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 80019a2:	4413      	add	r3, r2
 80019a4:	f8a7 3f90 	strh.w	r3, [r7, #3984]	; 0xf90

			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[1]; i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 3f95 	strb.w	r3, [r7, #3989]	; 0xf95
 80019ae:	e045      	b.n	8001a3c <PDM_PWM_Map_Load_From_EEPROM+0x3c0>
			{
				pwm_struct->pwmMapStruct->commandVarStep[1][i]  = buffer[(i * 2) + bufferAddress] << 8;
 80019b0:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 80019b4:	005a      	lsls	r2, r3, #1
 80019b6:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 80019ba:	4413      	add	r3, r2
 80019bc:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 80019c0:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	0219      	lsls	r1, r3, #8
 80019c8:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80019cc:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	b20a      	sxth	r2, r1
 80019e0:	801a      	strh	r2, [r3, #0]
				pwm_struct->pwmMapStruct->commandVarStep[1][i] |= buffer[(i * 2) + 1 + bufferAddress];
 80019e2:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80019e6:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80019fc:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001a08:	4413      	add	r3, r2
 8001a0a:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 8001a0e:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 8001a12:	5cd3      	ldrb	r3, [r2, r3]
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001a1a:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	6918      	ldr	r0, [r3, #16]
 8001a24:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4403      	add	r3, r0
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	b212      	sxth	r2, r2
 8001a30:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[1]; i++)
 8001a32:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 8001a36:	3301      	adds	r3, #1
 8001a38:	f887 3f95 	strb.w	r3, [r7, #3989]	; 0xf95
 8001a3c:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001a40:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	795b      	ldrb	r3, [r3, #5]
 8001a4a:	f897 2f95 	ldrb.w	r2, [r7, #3989]	; 0xf95
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d3ae      	bcc.n	80019b0 <PDM_PWM_Map_Load_From_EEPROM+0x334>
			}

			bufferAddress += pwm_struct->pwmMapStruct->mapLengths[1] * 2;
 8001a52:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001a56:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	795b      	ldrb	r3, [r3, #5]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f8a7 3f90 	strh.w	r3, [r7, #3984]	; 0xf90

			for(uint8_t x = 0; x < pwm_struct->pwmMapStruct->mapLengths[0]; x++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 3f94 	strb.w	r3, [r7, #3988]	; 0xf94
 8001a76:	e078      	b.n	8001b6a <PDM_PWM_Map_Load_From_EEPROM+0x4ee>
			{
				for(uint8_t y = 0; y < pwm_struct->pwmMapStruct->mapLengths[1]; y++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 3f93 	strb.w	r3, [r7, #3987]	; 0xf93
 8001a7e:	e064      	b.n	8001b4a <PDM_PWM_Map_Load_From_EEPROM+0x4ce>
				{
					pwm_struct->pwmMapStruct->dutyCycleMap[x][y]  = buffer[(((10 * x) + y) * 2) + bufferAddress] << 8;
 8001a80:	f897 2f94 	ldrb.w	r2, [r7, #3988]	; 0xf94
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001a92:	4413      	add	r3, r2
 8001a94:	005a      	lsls	r2, r3, #1
 8001a96:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 8001aa0:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 8001aa4:	5cd3      	ldrb	r3, [r2, r3]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001aac:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	6959      	ldr	r1, [r3, #20]
 8001ab6:	f897 3f94 	ldrb.w	r3, [r7, #3988]	; 0xf94
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	6819      	ldr	r1, [r3, #0]
 8001ac0:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	440b      	add	r3, r1
 8001ac8:	0212      	lsls	r2, r2, #8
 8001aca:	b292      	uxth	r2, r2
 8001acc:	801a      	strh	r2, [r3, #0]
					pwm_struct->pwmMapStruct->dutyCycleMap[x][y] |= buffer[(((10 * x) + y) * 2) + 1 + bufferAddress];
 8001ace:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001ad2:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	f897 3f94 	ldrb.w	r3, [r7, #3988]	; 0xf94
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	8819      	ldrh	r1, [r3, #0]
 8001af0:	f897 2f94 	ldrb.w	r2, [r7, #3988]	; 0xf94
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	461a      	mov	r2, r3
 8001afe:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 8001b12:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001b1e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	6958      	ldr	r0, [r3, #20]
 8001b28:	f897 3f94 	ldrb.w	r3, [r7, #3988]	; 0xf94
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4403      	add	r3, r0
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4403      	add	r3, r0
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	801a      	strh	r2, [r3, #0]
				for(uint8_t y = 0; y < pwm_struct->pwmMapStruct->mapLengths[1]; y++)
 8001b40:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001b44:	3301      	adds	r3, #1
 8001b46:	f887 3f93 	strb.w	r3, [r7, #3987]	; 0xf93
 8001b4a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001b4e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	795b      	ldrb	r3, [r3, #5]
 8001b58:	f897 2f93 	ldrb.w	r2, [r7, #3987]	; 0xf93
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d38f      	bcc.n	8001a80 <PDM_PWM_Map_Load_From_EEPROM+0x404>
			for(uint8_t x = 0; x < pwm_struct->pwmMapStruct->mapLengths[0]; x++)
 8001b60:	f897 3f94 	ldrb.w	r3, [r7, #3988]	; 0xf94
 8001b64:	3301      	adds	r3, #1
 8001b66:	f887 3f94 	strb.w	r3, [r7, #3988]	; 0xf94
 8001b6a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001b6e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	791b      	ldrb	r3, [r3, #4]
 8001b78:	f897 2f94 	ldrb.w	r2, [r7, #3988]	; 0xf94
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f4ff af7b 	bcc.w	8001a78 <PDM_PWM_Map_Load_From_EEPROM+0x3fc>
 8001b82:	e006      	b.n	8001b92 <PDM_PWM_Map_Load_From_EEPROM+0x516>
			}
		}
	}

	else
		pwm_struct->outputType = OutType_Error;
 8001b84:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001b88:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	711a      	strb	r2, [r3, #4]

	return retVal;
 8001b92:	f897 3f8f 	ldrb.w	r3, [r7, #3983]	; 0xf8f
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	f607 779c 	addw	r7, r7, #3996	; 0xf9c
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}

08001ba0 <PDM_Hard_Code_Config>:

//Use for configuration without or with partial EEPROM data
__weak void PDM_Hard_Code_Config()
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
	//Output 1 - Bomba de Combustível
	outputStruct[0].outEnable[0] = Output_Enabled;
 8001ba6:	4b8a      	ldr	r3, [pc, #552]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	731a      	strb	r2, [r3, #12]
	outputStruct[0].inputEnable[0] = 0x0021;
 8001bac:	4b88      	ldr	r3, [pc, #544]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001bae:	2221      	movs	r2, #33	; 0x21
 8001bb0:	801a      	strh	r2, [r3, #0]
	outputStruct[0].inputLevels[0] = 0x0000;
 8001bb2:	4b87      	ldr	r3, [pc, #540]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	809a      	strh	r2, [r3, #4]
	pwmOutStruct[0].pwmFrequency = PWM_FREQ_10000HZ;
 8001bb8:	4b86      	ldr	r3, [pc, #536]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001bba:	2208      	movs	r2, #8
 8001bbc:	805a      	strh	r2, [r3, #2]
	pwmOutStruct[0].outputType = OutType_Preset;
 8001bbe:	4b85      	ldr	r3, [pc, #532]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	711a      	strb	r2, [r3, #4]
	pwmOutStruct[0].presetEnable[0] = 0x0021;
 8001bc4:	4b83      	ldr	r3, [pc, #524]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001bc6:	2221      	movs	r2, #33	; 0x21
 8001bc8:	80da      	strh	r2, [r3, #6]
	pwmOutStruct[0].presetInputs[0] = 0x0000;
 8001bca:	4b82      	ldr	r3, [pc, #520]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	815a      	strh	r2, [r3, #10]
	pwmOutStruct[0].presetDutyCycle[0] = 1000;
 8001bd0:	4b80      	ldr	r3, [pc, #512]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001bd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bd6:	81da      	strh	r2, [r3, #14]

	//Output 2 - Ventoinha Esquerda
	outputStruct[1].outEnable[0] = Output_Enabled;
 8001bd8:	4b7d      	ldr	r3, [pc, #500]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	769a      	strb	r2, [r3, #26]
	outputStruct[1].inputEnable[0] = 0x0024;
 8001bde:	4b7c      	ldr	r3, [pc, #496]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001be0:	2224      	movs	r2, #36	; 0x24
 8001be2:	81da      	strh	r2, [r3, #14]
	outputStruct[1].inputLevels[0] = 0x0000;
 8001be4:	4b7a      	ldr	r3, [pc, #488]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	825a      	strh	r2, [r3, #18]
	pwmOutStruct[1].pwmFrequency = PWM_FREQ_10000HZ;
 8001bea:	4b7a      	ldr	r3, [pc, #488]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001bec:	2208      	movs	r2, #8
 8001bee:	845a      	strh	r2, [r3, #34]	; 0x22
	pwmOutStruct[1].outputType = OutType_Preset;
 8001bf0:	4b78      	ldr	r3, [pc, #480]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pwmOutStruct[1].presetEnable[0] = 0x0024;
 8001bf8:	4b76      	ldr	r3, [pc, #472]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001bfa:	2224      	movs	r2, #36	; 0x24
 8001bfc:	84da      	strh	r2, [r3, #38]	; 0x26
	pwmOutStruct[1].presetInputs[0] = 0x0000;
 8001bfe:	4b75      	ldr	r3, [pc, #468]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	855a      	strh	r2, [r3, #42]	; 0x2a
	pwmOutStruct[1].presetDutyCycle[0] = 1000;
 8001c04:	4b73      	ldr	r3, [pc, #460]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001c06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c0a:	85da      	strh	r2, [r3, #46]	; 0x2e

	//Output 3 - Ventoinha Direita
	outputStruct[2].outEnable[0] = Output_Enabled;
 8001c0c:	4b70      	ldr	r3, [pc, #448]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	outputStruct[2].inputEnable[0] = 0x0024;
 8001c14:	4b6e      	ldr	r3, [pc, #440]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001c16:	2224      	movs	r2, #36	; 0x24
 8001c18:	839a      	strh	r2, [r3, #28]
	outputStruct[2].inputLevels[0] = 0x0000;
 8001c1a:	4b6d      	ldr	r3, [pc, #436]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	841a      	strh	r2, [r3, #32]
	pwmOutStruct[2].pwmFrequency = PWM_FREQ_10000HZ;
 8001c20:	4b6c      	ldr	r3, [pc, #432]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001c22:	2208      	movs	r2, #8
 8001c24:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pwmOutStruct[2].outputType = OutType_Preset;
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	pwmOutStruct[2].presetEnable[0] = 0x0024;
 8001c30:	4b68      	ldr	r3, [pc, #416]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001c32:	2224      	movs	r2, #36	; 0x24
 8001c34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	pwmOutStruct[2].presetInputs[0] = 0x0000;
 8001c38:	4b66      	ldr	r3, [pc, #408]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	pwmOutStruct[2].presetDutyCycle[0] = 1000;
 8001c40:	4b64      	ldr	r3, [pc, #400]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001c42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c46:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	//Output 4 - Fueltech
	outputStruct[3].outEnable[0] = Output_Enabled;
 8001c4a:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	outputStruct[3].inputEnable[0] = 0x0020;
 8001c52:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001c54:	2220      	movs	r2, #32
 8001c56:	855a      	strh	r2, [r3, #42]	; 0x2a
	outputStruct[3].inputLevels[0] = 0x0000;
 8001c58:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	85da      	strh	r2, [r3, #46]	; 0x2e
	pwmOutStruct[3].pwmFrequency = PWM_FREQ_10000HZ;
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001c60:	2208      	movs	r2, #8
 8001c62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	pwmOutStruct[3].outputType = OutType_Preset;
 8001c66:	4b5b      	ldr	r3, [pc, #364]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	pwmOutStruct[3].presetEnable[0] = 0x0020;
 8001c6e:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001c70:	2220      	movs	r2, #32
 8001c72:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	pwmOutStruct[3].presetInputs[0] = 0x0000;
 8001c76:	4b57      	ldr	r3, [pc, #348]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	pwmOutStruct[3].presetDutyCycle[0] = 1000;
 8001c7e:	4b55      	ldr	r3, [pc, #340]	; (8001dd4 <PDM_Hard_Code_Config+0x234>)
 8001c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c84:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	//Output 5 - WBO2
	outputStruct[4].outEnable[0] = Output_Enabled;
 8001c88:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	outputStruct[4].inputEnable[0] = 0x0021;
 8001c90:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001c92:	2221      	movs	r2, #33	; 0x21
 8001c94:	871a      	strh	r2, [r3, #56]	; 0x38
	outputStruct[4].inputLevels[0] = 0x0000;
 8001c96:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	879a      	strh	r2, [r3, #60]	; 0x3c

	//Output 6 - CMP e Pressão de Combustível
	outputStruct[5].outEnable[0] = Output_Enabled;
 8001c9c:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	outputStruct[5].inputEnable[0] = 0x0020;
 8001ca4:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	outputStruct[5].inputLevels[0] = 0x0000;
 8001cac:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	//Output 7 - Pressão de Óleo e Pressão do Shifter
	outputStruct[6].outEnable[0] = Output_Enabled;
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	outputStruct[6].inputEnable[0] = 0x0020;
 8001cbc:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	outputStruct[6].inputLevels[0] = 0x0000;
 8001cc4:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	//Output 8 - Relay de Partida
	outputStruct[7].outEnable[0] = Output_Enabled;
 8001ccc:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	outputStruct[7].inputEnable[0] = 0x0028;
 8001cd4:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001cd6:	2228      	movs	r2, #40	; 0x28
 8001cd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	outputStruct[7].inputLevels[0] = 0x0000;
 8001cdc:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	//Output 9 - Brake Light
	outputStruct[8].outEnable[0] = Output_Enabled;
 8001ce4:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	outputStruct[8].inputEnable[0] = 0x0000;
 8001cec:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	outputStruct[8].inputLevels[0] = 0x0000;
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

	//Output 10 - Solenóides
	outputStruct[9].outEnable[0] = Output_Enabled;
 8001cfc:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	outputStruct[9].inputEnable[0] = 0x0020;
 8001d04:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d06:	2220      	movs	r2, #32
 8001d08:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	outputStruct[9].inputLevels[0] = 0x0000;
 8001d0c:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	//Output 11 - Veloc. Roda F
	outputStruct[10].outEnable[0] = Output_Enabled;
 8001d14:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	outputStruct[10].inputEnable[0] = 0x0020;
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	outputStruct[10].inputLevels[0] = 0x0000;
 8001d24:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

	//Output 12 - Veloc. Roda R
	outputStruct[11].outEnable[0] = Output_Enabled;
 8001d2c:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	outputStruct[11].inputEnable[0] = 0x0020;
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d36:	2220      	movs	r2, #32
 8001d38:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	outputStruct[11].inputLevels[0] = 0x0000;
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

	//Output 13 - Bobina
	outputStruct[12].outEnable[0] = Output_Enabled;
 8001d44:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	outputStruct[12].inputEnable[0] = 0x0020;
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	outputStruct[12].inputLevels[0] = 0x0000;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	//Output 14 - Bico Injetor
	outputStruct[13].outEnable[0] = Output_Enabled;
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	outputStruct[13].inputEnable[0] = 0x0020;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d66:	2220      	movs	r2, #32
 8001d68:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	outputStruct[13].inputLevels[0] = 0x0000;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

	//Output 15 - Buck DRS
	outputStruct[14].outEnable[0] = Output_Enabled;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	outputStruct[14].inputEnable[0] = 0x0028;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d7e:	2228      	movs	r2, #40	; 0x28
 8001d80:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	outputStruct[14].inputLevels[0] = 0x0008;
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d86:	2208      	movs	r2, #8
 8001d88:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

	//Output 16 - Buck DAQ
	outputStruct[15].outEnable[0] = Output_Enabled;
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
	outputStruct[15].inputEnable[0] = 0x0028;
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d96:	2228      	movs	r2, #40	; 0x28
 8001d98:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
	outputStruct[15].inputLevels[0] = 0x0008;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <PDM_Hard_Code_Config+0x230>)
 8001d9e:	2208      	movs	r2, #8
 8001da0:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6

	canConfig.baudRate = CAN_1000kbps;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <PDM_Hard_Code_Config+0x238>)
 8001da6:	2204      	movs	r2, #4
 8001da8:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < 16; i++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	71fb      	strb	r3, [r7, #7]
 8001dae:	e006      	b.n	8001dbe <PDM_Hard_Code_Config+0x21e>
		dataFreqBuffer[i] = Data_Freq_50Hz;
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <PDM_Hard_Code_Config+0x23c>)
 8001db4:	2103      	movs	r1, #3
 8001db6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 16; i++)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	71fb      	strb	r3, [r7, #7]
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d9f5      	bls.n	8001db0 <PDM_Hard_Code_Config+0x210>

	return;
 8001dc4:	bf00      	nop
}
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	200007d4 	.word	0x200007d4
 8001dd4:	200008b4 	.word	0x200008b4
 8001dd8:	200006a4 	.word	0x200006a4
 8001ddc:	2000071c 	.word	0x2000071c

08001de0 <Output_Reset_State>:

static void Output_Reset_State()
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAULTRST_GPIO_Port, FAULTRST_Pin, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2104      	movs	r1, #4
 8001dea:	4840      	ldr	r0, [pc, #256]	; (8001eec <Output_Reset_State+0x10c>)
 8001dec:	f004 fbd0 	bl	8006590 <HAL_GPIO_WritePin>

	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	71fb      	strb	r3, [r7, #7]
 8001df4:	e00e      	b.n	8001e14 <Output_Reset_State+0x34>
		memset(&outputStruct[i], '\0', sizeof(Output_Control_Struct));
 8001df6:	79fa      	ldrb	r2, [r7, #7]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	1a9b      	subs	r3, r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4a3b      	ldr	r2, [pc, #236]	; (8001ef0 <Output_Reset_State+0x110>)
 8001e02:	4413      	add	r3, r2
 8001e04:	220e      	movs	r2, #14
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00d feaf 	bl	800fb6c <memset>
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	3301      	adds	r3, #1
 8001e12:	71fb      	strb	r3, [r7, #7]
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2b0f      	cmp	r3, #15
 8001e18:	d9ed      	bls.n	8001df6 <Output_Reset_State+0x16>

	//Starts PWM timers
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001e1a:	210c      	movs	r1, #12
 8001e1c:	4835      	ldr	r0, [pc, #212]	; (8001ef4 <Output_Reset_State+0x114>)
 8001e1e:	f007 ff5d 	bl	8009cdc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8001e22:	2104      	movs	r1, #4
 8001e24:	4834      	ldr	r0, [pc, #208]	; (8001ef8 <Output_Reset_State+0x118>)
 8001e26:	f009 f907 	bl	800b038 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001e2a:	2108      	movs	r1, #8
 8001e2c:	4833      	ldr	r0, [pc, #204]	; (8001efc <Output_Reset_State+0x11c>)
 8001e2e:	f007 ff55 	bl	8009cdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001e32:	210c      	movs	r1, #12
 8001e34:	4832      	ldr	r0, [pc, #200]	; (8001f00 <Output_Reset_State+0x120>)
 8001e36:	f007 ff51 	bl	8009cdc <HAL_TIM_PWM_Start>

	//Zeroes all the PWM outputs duty cycles
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <Output_Reset_State+0x114>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001e42:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <Output_Reset_State+0x118>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2200      	movs	r2, #0
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001e4a:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <Output_Reset_State+0x11c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001e52:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <Output_Reset_State+0x120>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40

	//Sets all normal outputs to zero
	HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e60:	4828      	ldr	r0, [pc, #160]	; (8001f04 <Output_Reset_State+0x124>)
 8001e62:	f004 fb95 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e6c:	4825      	ldr	r0, [pc, #148]	; (8001f04 <Output_Reset_State+0x124>)
 8001e6e:	f004 fb8f 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e78:	4822      	ldr	r0, [pc, #136]	; (8001f04 <Output_Reset_State+0x124>)
 8001e7a:	f004 fb89 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e84:	481f      	ldr	r0, [pc, #124]	; (8001f04 <Output_Reset_State+0x124>)
 8001e86:	f004 fb83 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e90:	481c      	ldr	r0, [pc, #112]	; (8001f04 <Output_Reset_State+0x124>)
 8001e92:	f004 fb7d 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, GPIO_PIN_RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e9c:	4819      	ldr	r0, [pc, #100]	; (8001f04 <Output_Reset_State+0x124>)
 8001e9e:	f004 fb77 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ea8:	4816      	ldr	r0, [pc, #88]	; (8001f04 <Output_Reset_State+0x124>)
 8001eaa:	f004 fb71 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, GPIO_PIN_RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb4:	4813      	ldr	r0, [pc, #76]	; (8001f04 <Output_Reset_State+0x124>)
 8001eb6:	f004 fb6b 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2108      	movs	r1, #8
 8001ebe:	4812      	ldr	r0, [pc, #72]	; (8001f08 <Output_Reset_State+0x128>)
 8001ec0:	f004 fb66 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	480f      	ldr	r0, [pc, #60]	; (8001f08 <Output_Reset_State+0x128>)
 8001eca:	f004 fb61 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2120      	movs	r1, #32
 8001ed2:	480d      	ldr	r0, [pc, #52]	; (8001f08 <Output_Reset_State+0x128>)
 8001ed4:	f004 fb5c 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, GPIO_PIN_RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2110      	movs	r1, #16
 8001edc:	480a      	ldr	r0, [pc, #40]	; (8001f08 <Output_Reset_State+0x128>)
 8001ede:	f004 fb57 	bl	8006590 <HAL_GPIO_WritePin>

	return;
 8001ee2:	bf00      	nop
}
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	200007d4 	.word	0x200007d4
 8001ef4:	200003e0 	.word	0x200003e0
 8001ef8:	200004b8 	.word	0x200004b8
 8001efc:	20000398 	.word	0x20000398
 8001f00:	20000350 	.word	0x20000350
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40021800 	.word	0x40021800

08001f0c <PDM_Input_Process>:

#include <pdm.h>

//Process input pin levels
void PDM_Input_Process()
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	inputLevels = 0x0000;
 8001f10:	4b7a      	ldr	r3, [pc, #488]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	801a      	strh	r2, [r3, #0]

	inputLevels  =  HAL_GPIO_ReadPin(INPUT1_GPIO_Port, INPUT1_Pin);
 8001f16:	2101      	movs	r1, #1
 8001f18:	4879      	ldr	r0, [pc, #484]	; (8002100 <PDM_Input_Process+0x1f4>)
 8001f1a:	f004 fb21 	bl	8006560 <HAL_GPIO_ReadPin>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b76      	ldr	r3, [pc, #472]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001f24:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT2_GPIO_Port, INPUT2_Pin) << 1);
 8001f26:	2102      	movs	r1, #2
 8001f28:	4875      	ldr	r0, [pc, #468]	; (8002100 <PDM_Input_Process+0x1f4>)
 8001f2a:	f004 fb19 	bl	8006560 <HAL_GPIO_ReadPin>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	4b71      	ldr	r3, [pc, #452]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	4b6e      	ldr	r3, [pc, #440]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001f42:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT3_GPIO_Port, INPUT3_Pin) << 2);
 8001f44:	2104      	movs	r1, #4
 8001f46:	486e      	ldr	r0, [pc, #440]	; (8002100 <PDM_Input_Process+0x1f4>)
 8001f48:	f004 fb0a 	bl	8006560 <HAL_GPIO_ReadPin>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	b21a      	sxth	r2, r3
 8001f52:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b21b      	sxth	r3, r3
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	b21b      	sxth	r3, r3
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001f60:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT4_GPIO_Port, INPUT4_Pin) << 3);
 8001f62:	2108      	movs	r1, #8
 8001f64:	4866      	ldr	r0, [pc, #408]	; (8002100 <PDM_Input_Process+0x1f4>)
 8001f66:	f004 fafb 	bl	8006560 <HAL_GPIO_ReadPin>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	4b62      	ldr	r3, [pc, #392]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b5f      	ldr	r3, [pc, #380]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001f7e:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT5_GPIO_Port, INPUT5_Pin) << 4);
 8001f80:	2110      	movs	r1, #16
 8001f82:	4860      	ldr	r0, [pc, #384]	; (8002104 <PDM_Input_Process+0x1f8>)
 8001f84:	f004 faec 	bl	8006560 <HAL_GPIO_ReadPin>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	b21a      	sxth	r2, r3
 8001f8e:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b58      	ldr	r3, [pc, #352]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001f9c:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT6_GPIO_Port, INPUT6_Pin) << 5);
 8001f9e:	2120      	movs	r1, #32
 8001fa0:	4858      	ldr	r0, [pc, #352]	; (8002104 <PDM_Input_Process+0x1f8>)
 8001fa2:	f004 fadd 	bl	8006560 <HAL_GPIO_ReadPin>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	015b      	lsls	r3, r3, #5
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	4b53      	ldr	r3, [pc, #332]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b21b      	sxth	r3, r3
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	4b50      	ldr	r3, [pc, #320]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001fba:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT7_GPIO_Port, INPUT7_Pin) << 6);
 8001fbc:	2140      	movs	r1, #64	; 0x40
 8001fbe:	4852      	ldr	r0, [pc, #328]	; (8002108 <PDM_Input_Process+0x1fc>)
 8001fc0:	f004 face 	bl	8006560 <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	019b      	lsls	r3, r3, #6
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4b49      	ldr	r3, [pc, #292]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001fd8:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT8_GPIO_Port, INPUT8_Pin) << 7);
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	484a      	ldr	r0, [pc, #296]	; (8002108 <PDM_Input_Process+0x1fc>)
 8001fde:	f004 fabf 	bl	8006560 <HAL_GPIO_ReadPin>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	01db      	lsls	r3, r3, #7
 8001fe6:	b21a      	sxth	r2, r3
 8001fe8:	4b44      	ldr	r3, [pc, #272]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	4b41      	ldr	r3, [pc, #260]	; (80020fc <PDM_Input_Process+0x1f0>)
 8001ff6:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT9_GPIO_Port, INPUT9_Pin) << 8);
 8001ff8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ffc:	4842      	ldr	r0, [pc, #264]	; (8002108 <PDM_Input_Process+0x1fc>)
 8001ffe:	f004 faaf 	bl	8006560 <HAL_GPIO_ReadPin>
 8002002:	4603      	mov	r3, r0
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <PDM_Input_Process+0x1f0>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	b21b      	sxth	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b21b      	sxth	r3, r3
 8002012:	b29a      	uxth	r2, r3
 8002014:	4b39      	ldr	r3, [pc, #228]	; (80020fc <PDM_Input_Process+0x1f0>)
 8002016:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT10_GPIO_Port, INPUT10_Pin) << 9);
 8002018:	f44f 7100 	mov.w	r1, #512	; 0x200
 800201c:	483a      	ldr	r0, [pc, #232]	; (8002108 <PDM_Input_Process+0x1fc>)
 800201e:	f004 fa9f 	bl	8006560 <HAL_GPIO_ReadPin>
 8002022:	4603      	mov	r3, r0
 8002024:	025b      	lsls	r3, r3, #9
 8002026:	b21a      	sxth	r2, r3
 8002028:	4b34      	ldr	r3, [pc, #208]	; (80020fc <PDM_Input_Process+0x1f0>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b21b      	sxth	r3, r3
 800202e:	4313      	orrs	r3, r2
 8002030:	b21b      	sxth	r3, r3
 8002032:	b29a      	uxth	r2, r3
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <PDM_Input_Process+0x1f0>)
 8002036:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT11_GPIO_Port, INPUT11_Pin) << 10);
 8002038:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800203c:	4832      	ldr	r0, [pc, #200]	; (8002108 <PDM_Input_Process+0x1fc>)
 800203e:	f004 fa8f 	bl	8006560 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	029b      	lsls	r3, r3, #10
 8002046:	b21a      	sxth	r2, r3
 8002048:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <PDM_Input_Process+0x1f0>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b21b      	sxth	r3, r3
 800204e:	4313      	orrs	r3, r2
 8002050:	b21b      	sxth	r3, r3
 8002052:	b29a      	uxth	r2, r3
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <PDM_Input_Process+0x1f0>)
 8002056:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT12_GPIO_Port, INPUT12_Pin) << 11);
 8002058:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800205c:	482a      	ldr	r0, [pc, #168]	; (8002108 <PDM_Input_Process+0x1fc>)
 800205e:	f004 fa7f 	bl	8006560 <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	02db      	lsls	r3, r3, #11
 8002066:	b21a      	sxth	r2, r3
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <PDM_Input_Process+0x1f0>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b21b      	sxth	r3, r3
 800206e:	4313      	orrs	r3, r2
 8002070:	b21b      	sxth	r3, r3
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b21      	ldr	r3, [pc, #132]	; (80020fc <PDM_Input_Process+0x1f0>)
 8002076:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT13_GPIO_Port, INPUT13_Pin) << 12);
 8002078:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800207c:	4821      	ldr	r0, [pc, #132]	; (8002104 <PDM_Input_Process+0x1f8>)
 800207e:	f004 fa6f 	bl	8006560 <HAL_GPIO_ReadPin>
 8002082:	4603      	mov	r3, r0
 8002084:	031b      	lsls	r3, r3, #12
 8002086:	b21a      	sxth	r2, r3
 8002088:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <PDM_Input_Process+0x1f0>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b21b      	sxth	r3, r3
 800208e:	4313      	orrs	r3, r2
 8002090:	b21b      	sxth	r3, r3
 8002092:	b29a      	uxth	r2, r3
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <PDM_Input_Process+0x1f0>)
 8002096:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT14_GPIO_Port, INPUT14_Pin) << 13);
 8002098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800209c:	4819      	ldr	r0, [pc, #100]	; (8002104 <PDM_Input_Process+0x1f8>)
 800209e:	f004 fa5f 	bl	8006560 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	035b      	lsls	r3, r3, #13
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <PDM_Input_Process+0x1f0>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <PDM_Input_Process+0x1f0>)
 80020b6:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT15_GPIO_Port, INPUT15_Pin) << 14);
 80020b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020bc:	4811      	ldr	r0, [pc, #68]	; (8002104 <PDM_Input_Process+0x1f8>)
 80020be:	f004 fa4f 	bl	8006560 <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	039b      	lsls	r3, r3, #14
 80020c6:	b21a      	sxth	r2, r3
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <PDM_Input_Process+0x1f0>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	4313      	orrs	r3, r2
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <PDM_Input_Process+0x1f0>)
 80020d6:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT16_GPIO_Port, INPUT16_Pin) << 15);
 80020d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020dc:	4809      	ldr	r0, [pc, #36]	; (8002104 <PDM_Input_Process+0x1f8>)
 80020de:	f004 fa3f 	bl	8006560 <HAL_GPIO_ReadPin>
 80020e2:	4603      	mov	r3, r0
 80020e4:	03db      	lsls	r3, r3, #15
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <PDM_Input_Process+0x1f0>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b01      	ldr	r3, [pc, #4]	; (80020fc <PDM_Input_Process+0x1f0>)
 80020f6:	801a      	strh	r2, [r3, #0]

	return;
 80020f8:	bf00      	nop
}
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200007d0 	.word	0x200007d0
 8002100:	40021400 	.word	0x40021400
 8002104:	40020400 	.word	0x40020400
 8002108:	40020800 	.word	0x40020800

0800210c <PDM_Output_Process>:

//Process output pin levels
void PDM_Output_Process()
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
	GPIO_PinState output_levels[NBR_OF_OUTPUTS];

	//Process input conditions and safety flags for each output
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]
 8002116:	e062      	b.n	80021de <PDM_Output_Process+0xd2>
	{
		if((((flagDriverSafety >> i) & 0x01) == 0)
 8002118:	4b68      	ldr	r3, [pc, #416]	; (80022bc <PDM_Output_Process+0x1b0>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	fa42 f303 	asr.w	r3, r2, r3
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d14f      	bne.n	80021cc <PDM_Output_Process+0xc0>
				&& (__PDM_INPUT_CONDITION_COMPARE(outputStruct[i].inputEnable[0], outputStruct[i].inputLevels[0], outputStruct[i].outEnable[0])
 800212c:	7dfa      	ldrb	r2, [r7, #23]
 800212e:	4964      	ldr	r1, [pc, #400]	; (80022c0 <PDM_Output_Process+0x1b4>)
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	440b      	add	r3, r1
 800213a:	3304      	adds	r3, #4
 800213c:	881a      	ldrh	r2, [r3, #0]
 800213e:	4b61      	ldr	r3, [pc, #388]	; (80022c4 <PDM_Output_Process+0x1b8>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	4053      	eors	r3, r2
 8002144:	b299      	uxth	r1, r3
 8002146:	7dfa      	ldrb	r2, [r7, #23]
 8002148:	485d      	ldr	r0, [pc, #372]	; (80022c0 <PDM_Output_Process+0x1b4>)
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4403      	add	r3, r0
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	400b      	ands	r3, r1
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <PDM_Output_Process+0x68>
 800215e:	7dfa      	ldrb	r2, [r7, #23]
 8002160:	4957      	ldr	r1, [pc, #348]	; (80022c0 <PDM_Output_Process+0x1b4>)
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	440b      	add	r3, r1
 800216c:	330c      	adds	r3, #12
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d024      	beq.n	80021be <PDM_Output_Process+0xb2>
				||  __PDM_INPUT_CONDITION_COMPARE(outputStruct[i].inputEnable[1], outputStruct[i].inputLevels[1], outputStruct[i].outEnable[1])))
 8002174:	7dfa      	ldrb	r2, [r7, #23]
 8002176:	4952      	ldr	r1, [pc, #328]	; (80022c0 <PDM_Output_Process+0x1b4>)
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	440b      	add	r3, r1
 8002182:	3306      	adds	r3, #6
 8002184:	881a      	ldrh	r2, [r3, #0]
 8002186:	4b4f      	ldr	r3, [pc, #316]	; (80022c4 <PDM_Output_Process+0x1b8>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	4053      	eors	r3, r2
 800218c:	b299      	uxth	r1, r3
 800218e:	7dfa      	ldrb	r2, [r7, #23]
 8002190:	484b      	ldr	r0, [pc, #300]	; (80022c0 <PDM_Output_Process+0x1b4>)
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4403      	add	r3, r0
 800219c:	3302      	adds	r3, #2
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	400b      	ands	r3, r1
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d111      	bne.n	80021cc <PDM_Output_Process+0xc0>
 80021a8:	7dfa      	ldrb	r2, [r7, #23]
 80021aa:	4945      	ldr	r1, [pc, #276]	; (80022c0 <PDM_Output_Process+0x1b4>)
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	440b      	add	r3, r1
 80021b6:	330d      	adds	r3, #13
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d106      	bne.n	80021cc <PDM_Output_Process+0xc0>
			output_levels[i] = GPIO_PIN_SET;
 80021be:	7dfb      	ldrb	r3, [r7, #23]
 80021c0:	3318      	adds	r3, #24
 80021c2:	443b      	add	r3, r7
 80021c4:	2201      	movs	r2, #1
 80021c6:	f803 2c14 	strb.w	r2, [r3, #-20]
 80021ca:	e005      	b.n	80021d8 <PDM_Output_Process+0xcc>
		else
			output_levels[i] = GPIO_PIN_RESET;
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	3318      	adds	r3, #24
 80021d0:	443b      	add	r3, r7
 80021d2:	2200      	movs	r2, #0
 80021d4:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	3301      	adds	r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	2b0f      	cmp	r3, #15
 80021e2:	d999      	bls.n	8002118 <PDM_Output_Process+0xc>
	}

	HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, output_levels[4]);
 80021e4:	7a3b      	ldrb	r3, [r7, #8]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ec:	4836      	ldr	r0, [pc, #216]	; (80022c8 <PDM_Output_Process+0x1bc>)
 80021ee:	f004 f9cf 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, output_levels[5]);
 80021f2:	7a7b      	ldrb	r3, [r7, #9]
 80021f4:	461a      	mov	r2, r3
 80021f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021fa:	4833      	ldr	r0, [pc, #204]	; (80022c8 <PDM_Output_Process+0x1bc>)
 80021fc:	f004 f9c8 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, output_levels[6]);
 8002200:	7abb      	ldrb	r3, [r7, #10]
 8002202:	461a      	mov	r2, r3
 8002204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002208:	482f      	ldr	r0, [pc, #188]	; (80022c8 <PDM_Output_Process+0x1bc>)
 800220a:	f004 f9c1 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, output_levels[7]);
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	461a      	mov	r2, r3
 8002212:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002216:	482c      	ldr	r0, [pc, #176]	; (80022c8 <PDM_Output_Process+0x1bc>)
 8002218:	f004 f9ba 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, output_levels[8]);
 800221c:	7b3b      	ldrb	r3, [r7, #12]
 800221e:	461a      	mov	r2, r3
 8002220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002224:	4828      	ldr	r0, [pc, #160]	; (80022c8 <PDM_Output_Process+0x1bc>)
 8002226:	f004 f9b3 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, output_levels[9]);
 800222a:	7b7b      	ldrb	r3, [r7, #13]
 800222c:	461a      	mov	r2, r3
 800222e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002232:	4825      	ldr	r0, [pc, #148]	; (80022c8 <PDM_Output_Process+0x1bc>)
 8002234:	f004 f9ac 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, output_levels[10]);
 8002238:	7bbb      	ldrb	r3, [r7, #14]
 800223a:	461a      	mov	r2, r3
 800223c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002240:	4821      	ldr	r0, [pc, #132]	; (80022c8 <PDM_Output_Process+0x1bc>)
 8002242:	f004 f9a5 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, output_levels[11]);
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	461a      	mov	r2, r3
 800224a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800224e:	481e      	ldr	r0, [pc, #120]	; (80022c8 <PDM_Output_Process+0x1bc>)
 8002250:	f004 f99e 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, output_levels[12]);
 8002254:	7c3b      	ldrb	r3, [r7, #16]
 8002256:	461a      	mov	r2, r3
 8002258:	2108      	movs	r1, #8
 800225a:	481c      	ldr	r0, [pc, #112]	; (80022cc <PDM_Output_Process+0x1c0>)
 800225c:	f004 f998 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, output_levels[13]);
 8002260:	7c7b      	ldrb	r3, [r7, #17]
 8002262:	461a      	mov	r2, r3
 8002264:	2104      	movs	r1, #4
 8002266:	4819      	ldr	r0, [pc, #100]	; (80022cc <PDM_Output_Process+0x1c0>)
 8002268:	f004 f992 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, output_levels[14]);
 800226c:	7cbb      	ldrb	r3, [r7, #18]
 800226e:	461a      	mov	r2, r3
 8002270:	2120      	movs	r1, #32
 8002272:	4816      	ldr	r0, [pc, #88]	; (80022cc <PDM_Output_Process+0x1c0>)
 8002274:	f004 f98c 	bl	8006590 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, output_levels[15]);
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	461a      	mov	r2, r3
 800227c:	2110      	movs	r1, #16
 800227e:	4813      	ldr	r0, [pc, #76]	; (80022cc <PDM_Output_Process+0x1c0>)
 8002280:	f004 f986 	bl	8006590 <HAL_GPIO_WritePin>
	PDM_PWM_Output_Process(&pwmOutStruct[0], 0, output_levels[0]);
 8002284:	793b      	ldrb	r3, [r7, #4]
 8002286:	461a      	mov	r2, r3
 8002288:	2100      	movs	r1, #0
 800228a:	4811      	ldr	r0, [pc, #68]	; (80022d0 <PDM_Output_Process+0x1c4>)
 800228c:	f000 f8e6 	bl	800245c <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[1], 1, output_levels[1]);
 8002290:	797b      	ldrb	r3, [r7, #5]
 8002292:	461a      	mov	r2, r3
 8002294:	2101      	movs	r1, #1
 8002296:	480f      	ldr	r0, [pc, #60]	; (80022d4 <PDM_Output_Process+0x1c8>)
 8002298:	f000 f8e0 	bl	800245c <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[2], 2, output_levels[2]);
 800229c:	79bb      	ldrb	r3, [r7, #6]
 800229e:	461a      	mov	r2, r3
 80022a0:	2102      	movs	r1, #2
 80022a2:	480d      	ldr	r0, [pc, #52]	; (80022d8 <PDM_Output_Process+0x1cc>)
 80022a4:	f000 f8da 	bl	800245c <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[3], 3, output_levels[3]);
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	461a      	mov	r2, r3
 80022ac:	2103      	movs	r1, #3
 80022ae:	480b      	ldr	r0, [pc, #44]	; (80022dc <PDM_Output_Process+0x1d0>)
 80022b0:	f000 f8d4 	bl	800245c <PDM_PWM_Output_Process>

	return;
 80022b4:	bf00      	nop
}
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200007c8 	.word	0x200007c8
 80022c0:	200007d4 	.word	0x200007d4
 80022c4:	200007d0 	.word	0x200007d0
 80022c8:	40020c00 	.word	0x40020c00
 80022cc:	40021800 	.word	0x40021800
 80022d0:	200008b4 	.word	0x200008b4
 80022d4:	200008d4 	.word	0x200008d4
 80022d8:	200008f4 	.word	0x200008f4
 80022dc:	20000914 	.word	0x20000914

080022e0 <PDM_PWM_Init>:
static HAL_StatusTypeDef PWM_SoftStart(PWM_Control_Struct *pwm_struct);
static uint16_t PWM_Map_Duty_Cycle_Set(PDM_PWM_Map_Struct* pwm_map_struct);

//Initializes PWM output and sets its CAN bus filter
void PDM_PWM_Init(CAN_HandleTypeDef *hcan, PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	4613      	mov	r3, r2
 80022ec:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef* htim;
	uint16_t timChannel = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	837b      	strh	r3, [r7, #26]
	uint16_t prescaler = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	833b      	strh	r3, [r7, #24]
	uint16_t memAddress = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	82fb      	strh	r3, [r7, #22]

	//Sets the verify bit of the PWM output to sign if PWM is enabled
	dataIdBuffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] |= (pwmPinStatus >> pwm_out_number) & 0x01;
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	331a      	adds	r3, #26
 80022fe:	4a4e      	ldr	r2, [pc, #312]	; (8002438 <PDM_PWM_Init+0x158>)
 8002300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002304:	b21a      	sxth	r2, r3
 8002306:	4b4d      	ldr	r3, [pc, #308]	; (800243c <PDM_PWM_Init+0x15c>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	fa41 f303 	asr.w	r3, r1, r3
 8002312:	b21b      	sxth	r3, r3
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	b21b      	sxth	r3, r3
 800231a:	4313      	orrs	r3, r2
 800231c:	b21a      	sxth	r2, r3
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	331a      	adds	r3, #26
 8002322:	b291      	uxth	r1, r2
 8002324:	4a44      	ldr	r2, [pc, #272]	; (8002438 <PDM_PWM_Init+0x158>)
 8002326:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d87d      	bhi.n	800242c <PDM_PWM_Init+0x14c>
 8002330:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <PDM_PWM_Init+0x58>)
 8002332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002336:	bf00      	nop
 8002338:	08002349 	.word	0x08002349
 800233c:	08002353 	.word	0x08002353
 8002340:	0800235d 	.word	0x0800235d
 8002344:	08002367 	.word	0x08002367
 8002348:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <PDM_PWM_Init+0x160>)
 800234a:	61fb      	str	r3, [r7, #28]
 800234c:	230c      	movs	r3, #12
 800234e:	837b      	strh	r3, [r7, #26]
 8002350:	e00d      	b.n	800236e <PDM_PWM_Init+0x8e>
 8002352:	4b3c      	ldr	r3, [pc, #240]	; (8002444 <PDM_PWM_Init+0x164>)
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	2304      	movs	r3, #4
 8002358:	837b      	strh	r3, [r7, #26]
 800235a:	e008      	b.n	800236e <PDM_PWM_Init+0x8e>
 800235c:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <PDM_PWM_Init+0x168>)
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	2308      	movs	r3, #8
 8002362:	837b      	strh	r3, [r7, #26]
 8002364:	e003      	b.n	800236e <PDM_PWM_Init+0x8e>
 8002366:	4b39      	ldr	r3, [pc, #228]	; (800244c <PDM_PWM_Init+0x16c>)
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	230c      	movs	r3, #12
 800236c:	837b      	strh	r3, [r7, #26]
 800236e:	bf00      	nop

	if(pwm_struct->pwmFrequency == 0)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	885b      	ldrh	r3, [r3, #2]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d103      	bne.n	8002380 <PDM_PWM_Init+0xa0>
		pwm_struct->pwmFrequency = PWM_FREQ_100HZ;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f240 3283 	movw	r2, #899	; 0x383
 800237e:	805a      	strh	r2, [r3, #2]

	//Sets the PWM frequency
	if((htim->Instance == TIM1) || (htim->Instance == TIM8))
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a32      	ldr	r2, [pc, #200]	; (8002450 <PDM_PWM_Init+0x170>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d004      	beq.n	8002394 <PDM_PWM_Init+0xb4>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a31      	ldr	r2, [pc, #196]	; (8002454 <PDM_PWM_Init+0x174>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d106      	bne.n	80023a2 <PDM_PWM_Init+0xc2>
		prescaler = (pwm_struct->pwmFrequency * 2) + 1;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	885b      	ldrh	r3, [r3, #2]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	b29b      	uxth	r3, r3
 800239c:	3301      	adds	r3, #1
 800239e:	833b      	strh	r3, [r7, #24]
 80023a0:	e002      	b.n	80023a8 <PDM_PWM_Init+0xc8>
	else
		prescaler = pwm_struct->pwmFrequency;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	885b      	ldrh	r3, [r3, #2]
 80023a6:	833b      	strh	r3, [r7, #24]

	__HAL_TIM_SET_PRESCALER(htim, prescaler);
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	8b3a      	ldrh	r2, [r7, #24]
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28

	//Zero the duty cycle
	pwm_struct->dutyCycle = 0;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2200      	movs	r2, #0
 80023b4:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(htim, timChannel, 0);
 80023b6:	8b7b      	ldrh	r3, [r7, #26]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d104      	bne.n	80023c6 <PDM_PWM_Init+0xe6>
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2200      	movs	r2, #0
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34
 80023c4:	e013      	b.n	80023ee <PDM_PWM_Init+0x10e>
 80023c6:	8b7b      	ldrh	r3, [r7, #26]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d104      	bne.n	80023d6 <PDM_PWM_Init+0xf6>
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2300      	movs	r3, #0
 80023d2:	6393      	str	r3, [r2, #56]	; 0x38
 80023d4:	e00b      	b.n	80023ee <PDM_PWM_Init+0x10e>
 80023d6:	8b7b      	ldrh	r3, [r7, #26]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d104      	bne.n	80023e6 <PDM_PWM_Init+0x106>
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2300      	movs	r3, #0
 80023e2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80023e4:	e003      	b.n	80023ee <PDM_PWM_Init+0x10e>
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	2300      	movs	r3, #0
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40

	//Deallocates all pointers
	PWM_DeAlloc(pwm_struct);
 80023ee:	68b8      	ldr	r0, [r7, #8]
 80023f0:	f000 f952 	bl	8002698 <PWM_DeAlloc>

	if(pwm_struct->softStart == SoftStart_Enabled)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	795b      	ldrb	r3, [r3, #5]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <PDM_PWM_Init+0x128>
		PDM_PWM_Load_SoftStart_From_EEPROM(&hi2c1, pwm_struct, pwm_out_number);
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	461a      	mov	r2, r3
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	4815      	ldr	r0, [pc, #84]	; (8002458 <PDM_PWM_Init+0x178>)
 8002404:	f7ff f81a 	bl	800143c <PDM_PWM_Load_SoftStart_From_EEPROM>

	//Configures 3D map or Artificial Neural Network
	if(pwm_struct->outputType == OutType_Map)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	791b      	ldrb	r3, [r3, #4]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d105      	bne.n	800241c <PDM_PWM_Init+0x13c>
		PDM_PWM_Map_Load_From_EEPROM(&hi2c1, pwm_struct, memAddress);
 8002410:	8afb      	ldrh	r3, [r7, #22]
 8002412:	461a      	mov	r2, r3
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	4810      	ldr	r0, [pc, #64]	; (8002458 <PDM_PWM_Init+0x178>)
 8002418:	f7ff f930 	bl	800167c <PDM_PWM_Map_Load_From_EEPROM>

	//Deallocates all pointers if there is any allocation problem
	if(pwm_struct->outputType == OutType_Error)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	791b      	ldrb	r3, [r3, #4]
 8002420:	2b04      	cmp	r3, #4
 8002422:	d105      	bne.n	8002430 <PDM_PWM_Init+0x150>
		PWM_DeAlloc(pwm_struct);
 8002424:	68b8      	ldr	r0, [r7, #8]
 8002426:	f000 f937 	bl	8002698 <PWM_DeAlloc>

	return;
 800242a:	e001      	b.n	8002430 <PDM_PWM_Init+0x150>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 800242c:	bf00      	nop
 800242e:	e000      	b.n	8002432 <PDM_PWM_Init+0x152>
	return;
 8002430:	bf00      	nop
}
 8002432:	3720      	adds	r7, #32
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000778 	.word	0x20000778
 800243c:	200007ce 	.word	0x200007ce
 8002440:	200003e0 	.word	0x200003e0
 8002444:	200004b8 	.word	0x200004b8
 8002448:	20000398 	.word	0x20000398
 800244c:	20000350 	.word	0x20000350
 8002450:	40010000 	.word	0x40010000
 8002454:	40010400 	.word	0x40010400
 8002458:	200002fc 	.word	0x200002fc

0800245c <PDM_PWM_Output_Process>:

//Process input conditions and command variables and sets the PWM output duty cycle
void PDM_PWM_Output_Process(PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number, GPIO_PinState output_level)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
 8002468:	4613      	mov	r3, r2
 800246a:	70bb      	strb	r3, [r7, #2]
	uint8_t softStart = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
	uint16_t timChannel;
	TIM_HandleTypeDef* htim;

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	2b03      	cmp	r3, #3
 8002474:	f200 80fe 	bhi.w	8002674 <PDM_PWM_Output_Process+0x218>
 8002478:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <PDM_PWM_Output_Process+0x24>)
 800247a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247e:	bf00      	nop
 8002480:	08002491 	.word	0x08002491
 8002484:	0800249b 	.word	0x0800249b
 8002488:	080024a5 	.word	0x080024a5
 800248c:	080024af 	.word	0x080024af
 8002490:	4b7a      	ldr	r3, [pc, #488]	; (800267c <PDM_PWM_Output_Process+0x220>)
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	230c      	movs	r3, #12
 8002496:	81bb      	strh	r3, [r7, #12]
 8002498:	e00d      	b.n	80024b6 <PDM_PWM_Output_Process+0x5a>
 800249a:	4b79      	ldr	r3, [pc, #484]	; (8002680 <PDM_PWM_Output_Process+0x224>)
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	2304      	movs	r3, #4
 80024a0:	81bb      	strh	r3, [r7, #12]
 80024a2:	e008      	b.n	80024b6 <PDM_PWM_Output_Process+0x5a>
 80024a4:	4b77      	ldr	r3, [pc, #476]	; (8002684 <PDM_PWM_Output_Process+0x228>)
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	2308      	movs	r3, #8
 80024aa:	81bb      	strh	r3, [r7, #12]
 80024ac:	e003      	b.n	80024b6 <PDM_PWM_Output_Process+0x5a>
 80024ae:	4b76      	ldr	r3, [pc, #472]	; (8002688 <PDM_PWM_Output_Process+0x22c>)
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	230c      	movs	r3, #12
 80024b4:	81bb      	strh	r3, [r7, #12]
 80024b6:	bf00      	nop

	if((output_level == GPIO_PIN_SET)
 80024b8:	78bb      	ldrb	r3, [r7, #2]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d15c      	bne.n	8002578 <PDM_PWM_Output_Process+0x11c>
			&& (((flagDriverSafety >> pwm_out_number) & 0x01) == 0)
 80024be:	4b73      	ldr	r3, [pc, #460]	; (800268c <PDM_PWM_Output_Process+0x230>)
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	fa42 f303 	asr.w	r3, r2, r3
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d152      	bne.n	8002578 <PDM_PWM_Output_Process+0x11c>
			&& (pwm_struct->outputType != OutType_Error))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d04e      	beq.n	8002578 <PDM_PWM_Output_Process+0x11c>
	{
		if((pwm_struct->softStart == SoftStart_Enabled) && (pwm_struct->softStartStruct != NULL) && (pwm_struct->dutyCycle == 0))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	795b      	ldrb	r3, [r3, #5]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d109      	bne.n	80024f6 <PDM_PWM_Output_Process+0x9a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <PDM_PWM_Output_Process+0x9a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <PDM_PWM_Output_Process+0x9a>
			softStart = 1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]

		//Sets duty cycle to 100% if the output is set as standard
		if(pwm_struct->outputType == OutType_Standard)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	791b      	ldrb	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d104      	bne.n	8002508 <PDM_PWM_Output_Process+0xac>
			pwm_struct->dutyCycle = 1000;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002504:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8002506:	e03a      	b.n	800257e <PDM_PWM_Output_Process+0x122>

		//Checks if the inputs match the first PWM preset
		else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct->presetEnable[0], pwm_struct->presetInputs[0], Output_Enabled))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	895a      	ldrh	r2, [r3, #10]
 800250c:	4b60      	ldr	r3, [pc, #384]	; (8002690 <PDM_PWM_Output_Process+0x234>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	4053      	eors	r3, r2
 8002512:	b29a      	uxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	88db      	ldrh	r3, [r3, #6]
 8002518:	4013      	ands	r3, r2
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d104      	bne.n	800252a <PDM_PWM_Output_Process+0xce>
			pwm_struct->dutyCycle = pwm_struct->presetDutyCycle[0];
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	89da      	ldrh	r2, [r3, #14]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8002528:	e029      	b.n	800257e <PDM_PWM_Output_Process+0x122>

		//Checks if the inputs match the second PWM preset
		else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct->presetEnable[1], pwm_struct->presetInputs[1], Output_Enabled))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	899a      	ldrh	r2, [r3, #12]
 800252e:	4b58      	ldr	r3, [pc, #352]	; (8002690 <PDM_PWM_Output_Process+0x234>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	4053      	eors	r3, r2
 8002534:	b29a      	uxth	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	891b      	ldrh	r3, [r3, #8]
 800253a:	4013      	ands	r3, r2
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d104      	bne.n	800254c <PDM_PWM_Output_Process+0xf0>
			pwm_struct->dutyCycle = pwm_struct->presetDutyCycle[1];
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	8a1a      	ldrh	r2, [r3, #16]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 800254a:	e018      	b.n	800257e <PDM_PWM_Output_Process+0x122>

		//Sets duty cycle based on the 3D map if enabled
		else if((pwm_struct->outputType == OutType_Map) && (pwm_struct->pwmMapStruct != NULL))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	791b      	ldrb	r3, [r3, #4]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d10d      	bne.n	8002570 <PDM_PWM_Output_Process+0x114>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d009      	beq.n	8002570 <PDM_PWM_Output_Process+0x114>
			pwm_struct->dutyCycle = PWM_Map_Duty_Cycle_Set(pwm_struct->pwmMapStruct);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f97f 	bl	8002864 <PWM_Map_Duty_Cycle_Set>
 8002566:	4603      	mov	r3, r0
 8002568:	461a      	mov	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 800256e:	e006      	b.n	800257e <PDM_PWM_Output_Process+0x122>

		else
			pwm_struct->dutyCycle = 0;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8002576:	e002      	b.n	800257e <PDM_PWM_Output_Process+0x122>
	}

	else
		pwm_struct->dutyCycle = 0;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	801a      	strh	r2, [r3, #0]

	if(softStart == 0)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d123      	bne.n	80025cc <PDM_PWM_Output_Process+0x170>
		__HAL_TIM_SET_COMPARE(htim, timChannel, pwm_struct->dutyCycle);
 8002584:	89bb      	ldrh	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <PDM_PWM_Output_Process+0x13a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	881a      	ldrh	r2, [r3, #0]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	635a      	str	r2, [r3, #52]	; 0x34
 8002594:	e066      	b.n	8002664 <PDM_PWM_Output_Process+0x208>
 8002596:	89bb      	ldrh	r3, [r7, #12]
 8002598:	2b04      	cmp	r3, #4
 800259a:	d106      	bne.n	80025aa <PDM_PWM_Output_Process+0x14e>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8819      	ldrh	r1, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	460b      	mov	r3, r1
 80025a6:	6393      	str	r3, [r2, #56]	; 0x38
 80025a8:	e05c      	b.n	8002664 <PDM_PWM_Output_Process+0x208>
 80025aa:	89bb      	ldrh	r3, [r7, #12]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d106      	bne.n	80025be <PDM_PWM_Output_Process+0x162>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8819      	ldrh	r1, [r3, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	460b      	mov	r3, r1
 80025ba:	63d3      	str	r3, [r2, #60]	; 0x3c
 80025bc:	e052      	b.n	8002664 <PDM_PWM_Output_Process+0x208>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	8819      	ldrh	r1, [r3, #0]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	460b      	mov	r3, r1
 80025c8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ca:	e04b      	b.n	8002664 <PDM_PWM_Output_Process+0x208>

	else
	{
		if(PWM_SoftStart(pwm_struct) == HAL_OK)
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f8f9 	bl	80027c4 <PWM_SoftStart>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d122      	bne.n	800261e <PDM_PWM_Output_Process+0x1c2>
		{
			if(pwm_out_number == 1)
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d10f      	bne.n	80025fe <PDM_PWM_Output_Process+0x1a2>
			{
				HAL_TIMEx_PWMN_Stop(htim, timChannel);
 80025de:	89bb      	ldrh	r3, [r7, #12]
 80025e0:	4619      	mov	r1, r3
 80025e2:	68b8      	ldr	r0, [r7, #8]
 80025e4:	f008 fde2 	bl	800b1ac <HAL_TIMEx_PWMN_Stop>
				HAL_TIMEx_PWMN_Start_DMA(htim, timChannel, (uint32_t*) pwm_struct->softStartStruct->dutyCycleBuffer, pwm_struct->softStartStruct->dutyCycles);
 80025e8:	89b9      	ldrh	r1, [r7, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	68b8      	ldr	r0, [r7, #8]
 80025f8:	f008 fe36 	bl	800b268 <HAL_TIMEx_PWMN_Start_DMA>
 80025fc:	e032      	b.n	8002664 <PDM_PWM_Output_Process+0x208>
			}

			else
			{
				HAL_TIM_PWM_Stop(htim, timChannel);
 80025fe:	89bb      	ldrh	r3, [r7, #12]
 8002600:	4619      	mov	r1, r3
 8002602:	68b8      	ldr	r0, [r7, #8]
 8002604:	f007 fc32 	bl	8009e6c <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start_DMA(htim, timChannel, (uint32_t*) pwm_struct->softStartStruct->dutyCycleBuffer, pwm_struct->softStartStruct->dutyCycles);
 8002608:	89b9      	ldrh	r1, [r7, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	68b8      	ldr	r0, [r7, #8]
 8002618:	f007 fc98 	bl	8009f4c <HAL_TIM_PWM_Start_DMA>
 800261c:	e022      	b.n	8002664 <PDM_PWM_Output_Process+0x208>
			}
		}

		else
			__HAL_TIM_SET_COMPARE(htim, timChannel, pwm_struct->dutyCycle);
 800261e:	89bb      	ldrh	r3, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d105      	bne.n	8002630 <PDM_PWM_Output_Process+0x1d4>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	881a      	ldrh	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	635a      	str	r2, [r3, #52]	; 0x34
 800262e:	e019      	b.n	8002664 <PDM_PWM_Output_Process+0x208>
 8002630:	89bb      	ldrh	r3, [r7, #12]
 8002632:	2b04      	cmp	r3, #4
 8002634:	d106      	bne.n	8002644 <PDM_PWM_Output_Process+0x1e8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	8819      	ldrh	r1, [r3, #0]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	460b      	mov	r3, r1
 8002640:	6393      	str	r3, [r2, #56]	; 0x38
 8002642:	e00f      	b.n	8002664 <PDM_PWM_Output_Process+0x208>
 8002644:	89bb      	ldrh	r3, [r7, #12]
 8002646:	2b08      	cmp	r3, #8
 8002648:	d106      	bne.n	8002658 <PDM_PWM_Output_Process+0x1fc>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	8819      	ldrh	r1, [r3, #0]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	460b      	mov	r3, r1
 8002654:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002656:	e005      	b.n	8002664 <PDM_PWM_Output_Process+0x208>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	8819      	ldrh	r1, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	460b      	mov	r3, r1
 8002662:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//Stores output duty cycle inside the data buffer to be sent via CAN/USB
	dataBuffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] = pwm_struct->dutyCycle;
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	331a      	adds	r3, #26
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	8811      	ldrh	r1, [r2, #0]
 800266c:	4a09      	ldr	r2, [pc, #36]	; (8002694 <PDM_PWM_Output_Process+0x238>)
 800266e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return;
 8002672:	e000      	b.n	8002676 <PDM_PWM_Output_Process+0x21a>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8002674:	bf00      	nop
}
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	200003e0 	.word	0x200003e0
 8002680:	200004b8 	.word	0x200004b8
 8002684:	20000398 	.word	0x20000398
 8002688:	20000350 	.word	0x20000350
 800268c:	200007c8 	.word	0x200007c8
 8002690:	200007d0 	.word	0x200007d0
 8002694:	2000073c 	.word	0x2000073c

08002698 <PWM_DeAlloc>:

static void PWM_DeAlloc(PWM_Control_Struct *pwm_struct)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	if(pwm_struct->softStartStruct != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d019      	beq.n	80026dc <PWM_DeAlloc+0x44>
	{

		if(pwm_struct->softStartStruct->dutyCycleBuffer != NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <PWM_DeAlloc+0x2e>
		{
			free(pwm_struct->softStartStruct->dutyCycleBuffer);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f00d fa4f 	bl	800fb5c <free>
			pwm_struct->softStartStruct->dutyCycleBuffer = NULL;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	2200      	movs	r2, #0
 80026c4:	605a      	str	r2, [r3, #4]
		}

		free(pwm_struct->softStartStruct);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f00d fa46 	bl	800fb5c <free>
		pwm_struct->softStartStruct = NULL;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
		pwm_struct->softStart = SoftStart_Disabled;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	715a      	strb	r2, [r3, #5]
	}

	if(pwm_struct->pwmMapStruct != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d05b      	beq.n	800279c <PWM_DeAlloc+0x104>
	{
		if(pwm_struct->pwmMapStruct->commandVarStep[0] != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <PWM_DeAlloc+0x6a>
		{
			free(pwm_struct->pwmMapStruct->commandVarStep[0]);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f00d fa31 	bl	800fb5c <free>
			pwm_struct->pwmMapStruct->commandVarStep[0] = NULL;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
		}

		if(pwm_struct->pwmMapStruct->commandVarStep[1] != NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d009      	beq.n	8002720 <PWM_DeAlloc+0x88>
		{
			free(pwm_struct->pwmMapStruct->commandVarStep[1]);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	4618      	mov	r0, r3
 8002714:	f00d fa22 	bl	800fb5c <free>
			pwm_struct->pwmMapStruct->commandVarStep[1] = NULL;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
		}

		for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	e01d      	b.n	8002762 <PWM_DeAlloc+0xca>
		{
			if(pwm_struct->pwmMapStruct->dutyCycleMap[i] != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d011      	beq.n	800275c <PWM_DeAlloc+0xc4>
			{
				free(pwm_struct->pwmMapStruct->dutyCycleMap[i]);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f00d fa08 	bl	800fb5c <free>
				pwm_struct->pwmMapStruct->dutyCycleMap[i] = NULL;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	3301      	adds	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	791b      	ldrb	r3, [r3, #4]
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	429a      	cmp	r2, r3
 800276c:	d3db      	bcc.n	8002726 <PWM_DeAlloc+0x8e>
			}
		}

		if(pwm_struct->pwmMapStruct->dutyCycleMap != NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d009      	beq.n	800278c <PWM_DeAlloc+0xf4>
		{
			free(pwm_struct->pwmMapStruct->dutyCycleMap);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	4618      	mov	r0, r3
 8002780:	f00d f9ec 	bl	800fb5c <free>
			pwm_struct->pwmMapStruct->dutyCycleMap = NULL;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2200      	movs	r2, #0
 800278a:	615a      	str	r2, [r3, #20]
		}

		free(pwm_struct->pwmMapStruct);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	4618      	mov	r0, r3
 8002792:	f00d f9e3 	bl	800fb5c <free>
		pwm_struct->pwmMapStruct = NULL;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
	}

	if((pwm_struct->presetEnable[0] != 0)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	88db      	ldrh	r3, [r3, #6]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d103      	bne.n	80027ac <PWM_DeAlloc+0x114>
			|| (pwm_struct->presetEnable[1] != 0))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	891b      	ldrh	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <PWM_DeAlloc+0x11c>
		pwm_struct->outputType = OutType_Preset;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	711a      	strb	r2, [r3, #4]
 80027b2:	e002      	b.n	80027ba <PWM_DeAlloc+0x122>

	else
		pwm_struct->outputType = OutType_Standard;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	711a      	strb	r2, [r3, #4]

	return;
 80027ba:	bf00      	nop
}
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <PWM_SoftStart>:

//Sets the PWM soft start buffer
static HAL_StatusTypeDef PWM_SoftStart(PWM_Control_Struct *pwm_struct)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal = HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]

	pwm_struct->softStartStruct->dutyCycles = (pwm_struct->softStartStruct->slope * pwm_struct->dutyCycle) / 1000;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	8812      	ldrh	r2, [r2, #0]
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	4a20      	ldr	r2, [pc, #128]	; (8002860 <PWM_SoftStart+0x9c>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	099a      	lsrs	r2, r3, #6
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	b292      	uxth	r2, r2
 80027ec:	801a      	strh	r2, [r3, #0]

	pwm_struct->softStartStruct->dutyCycleBuffer = malloc(pwm_struct->softStartStruct->dutyCycles * sizeof(uint16_t));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	005a      	lsls	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69dc      	ldr	r4, [r3, #28]
 80027fa:	4610      	mov	r0, r2
 80027fc:	f00d f9a6 	bl	800fb4c <malloc>
 8002800:	4603      	mov	r3, r0
 8002802:	6063      	str	r3, [r4, #4]

	if(pwm_struct->softStartStruct->dutyCycleBuffer != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d020      	beq.n	8002850 <PWM_SoftStart+0x8c>
	{
		for(uint16_t i = 0; i < pwm_struct->softStartStruct->dutyCycles; i++)
 800280e:	2300      	movs	r3, #0
 8002810:	81bb      	strh	r3, [r7, #12]
 8002812:	e014      	b.n	800283e <PWM_SoftStart+0x7a>
			pwm_struct->softStartStruct->dutyCycleBuffer[i] = __PDM_LINEAR_INTERPOLATION(i, 0, pwm_struct->softStartStruct->dutyCycles,
 8002814:	89bb      	ldrh	r3, [r7, #12]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	8812      	ldrh	r2, [r2, #0]
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	69d2      	ldr	r2, [r2, #28]
 8002822:	8812      	ldrh	r2, [r2, #0]
 8002824:	fb93 f1f2 	sdiv	r1, r3, r2
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	89bb      	ldrh	r3, [r7, #12]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	b28a      	uxth	r2, r1
 8002836:	801a      	strh	r2, [r3, #0]
		for(uint16_t i = 0; i < pwm_struct->softStartStruct->dutyCycles; i++)
 8002838:	89bb      	ldrh	r3, [r7, #12]
 800283a:	3301      	adds	r3, #1
 800283c:	81bb      	strh	r3, [r7, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	89ba      	ldrh	r2, [r7, #12]
 8002846:	429a      	cmp	r2, r3
 8002848:	d3e4      	bcc.n	8002814 <PWM_SoftStart+0x50>
																							0, pwm_struct->dutyCycle);

		retVal = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	e001      	b.n	8002854 <PWM_SoftStart+0x90>
	}

	else
		retVal = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]

	return retVal;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bd90      	pop	{r4, r7, pc}
 800285e:	bf00      	nop
 8002860:	10624dd3 	.word	0x10624dd3

08002864 <PWM_Map_Duty_Cycle_Set>:

//Sets PWM output duty cycle using its command variables
static uint16_t PWM_Map_Duty_Cycle_Set(PDM_PWM_Map_Struct* pwm_map_struct)
{
 8002864:	b4b0      	push	{r4, r5, r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	uint16_t retVal = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	81fb      	strh	r3, [r7, #14]

	//Checks if both command variables out of the column and line limits and attributes the map's closest corner value
	if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287e:	429a      	cmp	r2, r3
 8002880:	dc0e      	bgt.n	80028a0 <PWM_Map_Duty_Cycle_Set+0x3c>
		&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002890:	429a      	cmp	r2, r3
 8002892:	dc05      	bgt.n	80028a0 <PWM_Map_Duty_Cycle_Set+0x3c>

		retVal = pwm_map_struct->dutyCycleMap[0][0];
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	81fb      	strh	r3, [r7, #14]
 800289e:	e37e      	b.n	8002f9e <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1])
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68d9      	ldr	r1, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	791b      	ldrb	r3, [r3, #4]
 80028ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80028b2:	3b01      	subs	r3, #1
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	440b      	add	r3, r1
 80028b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028bc:	429a      	cmp	r2, r3
 80028be:	db15      	blt.n	80028ec <PWM_Map_Duty_Cycle_Set+0x88>
			 && (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	dc0c      	bgt.n	80028ec <PWM_Map_Duty_Cycle_Set+0x88>

		retVal = pwm_map_struct->dutyCycleMap[pwm_map_struct->mapLengths[0] - 1][0];
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	791b      	ldrb	r3, [r3, #4]
 80028da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028de:	3b01      	subs	r3, #1
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	81fb      	strh	r3, [r7, #14]
 80028ea:	e358      	b.n	8002f9e <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	dc1c      	bgt.n	8002938 <PWM_Map_Duty_Cycle_Set+0xd4>
			 && (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1]))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6919      	ldr	r1, [r3, #16]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	795b      	ldrb	r3, [r3, #5]
 800290c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002910:	3b01      	subs	r3, #1
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	440b      	add	r3, r1
 8002916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800291a:	429a      	cmp	r2, r3
 800291c:	db0c      	blt.n	8002938 <PWM_Map_Duty_Cycle_Set+0xd4>

		retVal = pwm_map_struct->dutyCycleMap[0][pwm_map_struct->mapLengths[1] - 1];
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	795b      	ldrb	r3, [r3, #5]
 8002928:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800292c:	3b01      	subs	r3, #1
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	81fb      	strh	r3, [r7, #14]
 8002936:	e332      	b.n	8002f9e <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1])
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68d9      	ldr	r1, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	791b      	ldrb	r3, [r3, #4]
 8002946:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800294a:	3b01      	subs	r3, #1
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	440b      	add	r3, r1
 8002950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002954:	429a      	cmp	r2, r3
 8002956:	db23      	blt.n	80029a0 <PWM_Map_Duty_Cycle_Set+0x13c>
			 && (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1]))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6919      	ldr	r1, [r3, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	795b      	ldrb	r3, [r3, #5]
 8002966:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800296a:	3b01      	subs	r3, #1
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	440b      	add	r3, r1
 8002970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002974:	429a      	cmp	r2, r3
 8002976:	db13      	blt.n	80029a0 <PWM_Map_Duty_Cycle_Set+0x13c>

		retVal = pwm_map_struct->dutyCycleMap[pwm_map_struct->mapLengths[0] - 1][pwm_map_struct->mapLengths[1] - 1];
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	791b      	ldrb	r3, [r3, #4]
 8002980:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002984:	3b01      	subs	r3, #1
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	795b      	ldrb	r3, [r3, #5]
 8002990:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002994:	3b01      	subs	r3, #1
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	81fb      	strh	r3, [r7, #14]
 800299e:	e2fe      	b.n	8002f9e <PWM_Map_Duty_Cycle_Set+0x73a>

	//Check if the command variable point is outside the lines (y limits) of the 3D map or there is only 1 variable input
	else if((pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0])
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	dd14      	ble.n	80029dc <PWM_Map_Duty_Cycle_Set+0x178>
			|| (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1])
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6919      	ldr	r1, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	795b      	ldrb	r3, [r3, #5]
 80029c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80029c4:	3b01      	subs	r3, #1
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	440b      	add	r3, r1
 80029ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	da04      	bge.n	80029dc <PWM_Map_Duty_Cycle_Set+0x178>
			|| (pwm_map_struct->mapLengths[1] == 1))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	795b      	ldrb	r3, [r3, #5]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	f040 80c4 	bne.w	8002b64 <PWM_Map_Duty_Cycle_Set+0x300>
	{
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 80029dc:	2300      	movs	r3, #0
 80029de:	737b      	strb	r3, [r7, #13]
 80029e0:	e0b8      	b.n	8002b54 <PWM_Map_Duty_Cycle_Set+0x2f0>
		{
			//Checks if the command variable point is inside the x, x + 1 column
			if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][x])
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68d9      	ldr	r1, [r3, #12]
 80029ec:	7b7b      	ldrb	r3, [r7, #13]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	440b      	add	r3, r1
 80029f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	f2c0 80a9 	blt.w	8002b4e <PWM_Map_Duty_Cycle_Set+0x2ea>
				&& (pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][x + 1]))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68d9      	ldr	r1, [r3, #12]
 8002a06:	7b7b      	ldrb	r3, [r7, #13]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	f300 809b 	bgt.w	8002b4e <PWM_Map_Duty_Cycle_Set+0x2ea>
			{
				//Checks if the command variable point is above or below the lines (y limits) of the 3D map then sets duty cycle via linear interpolation
				if((pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]) || (pwm_map_struct->mapLengths[1] == 1))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	dd03      	ble.n	8002a32 <PWM_Map_Duty_Cycle_Set+0x1ce>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	795b      	ldrb	r3, [r3, #5]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d13c      	bne.n	8002aac <PWM_Map_Duty_Cycle_Set+0x248>
				{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	7b7b      	ldrb	r3, [r7, #13]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a48:	1acb      	subs	r3, r1, r3
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6951      	ldr	r1, [r2, #20]
 8002a4e:	7b7a      	ldrb	r2, [r7, #13]
 8002a50:	3201      	adds	r2, #1
 8002a52:	0092      	lsls	r2, r2, #2
 8002a54:	440a      	add	r2, r1
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	8812      	ldrh	r2, [r2, #0]
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6951      	ldr	r1, [r2, #20]
 8002a60:	7b7a      	ldrb	r2, [r7, #13]
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	440a      	add	r2, r1
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	8812      	ldrh	r2, [r2, #0]
 8002a6a:	1a82      	subs	r2, r0, r2
 8002a6c:	fb03 f202 	mul.w	r2, r3, r2
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68d9      	ldr	r1, [r3, #12]
 8002a74:	7b7b      	ldrb	r3, [r7, #13]
 8002a76:	3301      	adds	r3, #1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a80:	4618      	mov	r0, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68d9      	ldr	r1, [r3, #12]
 8002a86:	7b7b      	ldrb	r3, [r7, #13]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a90:	1ac3      	subs	r3, r0, r3
 8002a92:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6959      	ldr	r1, [r3, #20]
 8002a9c:	7b7b      	ldrb	r3, [r7, #13]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	81fb      	strh	r3, [r7, #14]
 8002aaa:	e050      	b.n	8002b4e <PWM_Map_Duty_Cycle_Set+0x2ea>
																  	   pwm_map_struct->commandVarStep[0][x],
																	   pwm_map_struct->commandVarStep[0][x + 1],
																	   pwm_map_struct->dutyCycleMap[x][0],
																	   pwm_map_struct->dutyCycleMap[x + 1][0]);
				}else{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	7b7b      	ldrb	r3, [r7, #13]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac2:	1aca      	subs	r2, r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6959      	ldr	r1, [r3, #20]
 8002ac8:	7b7b      	ldrb	r3, [r7, #13]
 8002aca:	3301      	adds	r3, #1
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	795b      	ldrb	r3, [r3, #5]
 8002ad6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002ada:	3b01      	subs	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	440b      	add	r3, r1
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6959      	ldr	r1, [r3, #20]
 8002ae8:	7b7b      	ldrb	r3, [r7, #13]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	6819      	ldr	r1, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	795b      	ldrb	r3, [r3, #5]
 8002af4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002af8:	3b01      	subs	r3, #1
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	440b      	add	r3, r1
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	1ac3      	subs	r3, r0, r3
 8002b02:	fb03 f202 	mul.w	r2, r3, r2
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68d9      	ldr	r1, [r3, #12]
 8002b0a:	7b7b      	ldrb	r3, [r7, #13]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	440b      	add	r3, r1
 8002b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b16:	4618      	mov	r0, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68d9      	ldr	r1, [r3, #12]
 8002b1c:	7b7b      	ldrb	r3, [r7, #13]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	440b      	add	r3, r1
 8002b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b26:	1ac3      	subs	r3, r0, r3
 8002b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6959      	ldr	r1, [r3, #20]
 8002b32:	7b7b      	ldrb	r3, [r7, #13]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	795b      	ldrb	r3, [r3, #5]
 8002b3e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002b42:	3b01      	subs	r3, #1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	440b      	add	r3, r1
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	81fb      	strh	r3, [r7, #14]
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002b4e:	7b7b      	ldrb	r3, [r7, #13]
 8002b50:	3301      	adds	r3, #1
 8002b52:	737b      	strb	r3, [r7, #13]
 8002b54:	7b7a      	ldrb	r2, [r7, #13]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	791b      	ldrb	r3, [r3, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	f6ff af40 	blt.w	80029e2 <PWM_Map_Duty_Cycle_Set+0x17e>
 8002b62:	e21c      	b.n	8002f9e <PWM_Map_Duty_Cycle_Set+0x73a>
			}
		}
	}

	//Check if the command variable point is outside the columns (x limits) of the 3D map
	else if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	dd10      	ble.n	8002b98 <PWM_Map_Duty_Cycle_Set+0x334>
			|| (pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1]))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68d9      	ldr	r1, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	791b      	ldrb	r3, [r3, #4]
 8002b84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	440b      	add	r3, r1
 8002b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	f2c0 80c0 	blt.w	8002d18 <PWM_Map_Duty_Cycle_Set+0x4b4>
	{
		for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	733b      	strb	r3, [r7, #12]
 8002b9c:	e0b4      	b.n	8002d08 <PWM_Map_Duty_Cycle_Set+0x4a4>
		{
			//Checks if the command variable point is inside the y, y + 1 line
			if((pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][y])
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6919      	ldr	r1, [r3, #16]
 8002ba8:	7b3b      	ldrb	r3, [r7, #12]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	440b      	add	r3, r1
 8002bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	f2c0 80a5 	blt.w	8002d02 <PWM_Map_Duty_Cycle_Set+0x49e>
				&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][y + 1]))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6919      	ldr	r1, [r3, #16]
 8002bc2:	7b3b      	ldrb	r3, [r7, #12]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	440b      	add	r3, r1
 8002bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	f300 8097 	bgt.w	8002d02 <PWM_Map_Duty_Cycle_Set+0x49e>
			{
				//Checks if the command variable point is to the left or to the right of the 3D map then sets duty cycle via linear interpolation
				if(pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	dc3c      	bgt.n	8002c60 <PWM_Map_Duty_Cycle_Set+0x3fc>
				{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[1],
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bec:	4619      	mov	r1, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	7b3b      	ldrb	r3, [r7, #12]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfc:	1acb      	subs	r3, r1, r3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6952      	ldr	r2, [r2, #20]
 8002c02:	6811      	ldr	r1, [r2, #0]
 8002c04:	7b3a      	ldrb	r2, [r7, #12]
 8002c06:	3201      	adds	r2, #1
 8002c08:	0052      	lsls	r2, r2, #1
 8002c0a:	440a      	add	r2, r1
 8002c0c:	8812      	ldrh	r2, [r2, #0]
 8002c0e:	4610      	mov	r0, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6952      	ldr	r2, [r2, #20]
 8002c14:	6811      	ldr	r1, [r2, #0]
 8002c16:	7b3a      	ldrb	r2, [r7, #12]
 8002c18:	0052      	lsls	r2, r2, #1
 8002c1a:	440a      	add	r2, r1
 8002c1c:	8812      	ldrh	r2, [r2, #0]
 8002c1e:	1a82      	subs	r2, r0, r2
 8002c20:	fb03 f202 	mul.w	r2, r3, r2
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6919      	ldr	r1, [r3, #16]
 8002c28:	7b3b      	ldrb	r3, [r7, #12]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	440b      	add	r3, r1
 8002c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c34:	4618      	mov	r0, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6919      	ldr	r1, [r3, #16]
 8002c3a:	7b3b      	ldrb	r3, [r7, #12]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	440b      	add	r3, r1
 8002c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c44:	1ac3      	subs	r3, r0, r3
 8002c46:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	7b3b      	ldrb	r3, [r7, #12]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	440b      	add	r3, r1
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	81fb      	strh	r3, [r7, #14]
 8002c5e:	e050      	b.n	8002d02 <PWM_Map_Duty_Cycle_Set+0x49e>
																  	   pwm_map_struct->commandVarStep[1][y],
																	   pwm_map_struct->commandVarStep[1][y + 1],
																	   pwm_map_struct->dutyCycleMap[0][y],
																	   pwm_map_struct->dutyCycleMap[0][y + 1]);
				}else{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[1],
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c66:	4619      	mov	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	7b3b      	ldrb	r3, [r7, #12]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c76:	1aca      	subs	r2, r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6959      	ldr	r1, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	791b      	ldrb	r3, [r3, #4]
 8002c80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c84:	3b01      	subs	r3, #1
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	7b3b      	ldrb	r3, [r7, #12]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	440b      	add	r3, r1
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6959      	ldr	r1, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	791b      	ldrb	r3, [r3, #4]
 8002ca0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	6819      	ldr	r1, [r3, #0]
 8002cac:	7b3b      	ldrb	r3, [r7, #12]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	440b      	add	r3, r1
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	1ac3      	subs	r3, r0, r3
 8002cb6:	fb03 f202 	mul.w	r2, r3, r2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6919      	ldr	r1, [r3, #16]
 8002cbe:	7b3b      	ldrb	r3, [r7, #12]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	440b      	add	r3, r1
 8002cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6919      	ldr	r1, [r3, #16]
 8002cd0:	7b3b      	ldrb	r3, [r7, #12]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cda:	1ac3      	subs	r3, r0, r3
 8002cdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6959      	ldr	r1, [r3, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	791b      	ldrb	r3, [r3, #4]
 8002cea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	7b3b      	ldrb	r3, [r7, #12]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	440b      	add	r3, r1
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	81fb      	strh	r3, [r7, #14]
		for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002d02:	7b3b      	ldrb	r3, [r7, #12]
 8002d04:	3301      	adds	r3, #1
 8002d06:	733b      	strb	r3, [r7, #12]
 8002d08:	7b3a      	ldrb	r2, [r7, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	795b      	ldrb	r3, [r3, #5]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f6ff af44 	blt.w	8002b9e <PWM_Map_Duty_Cycle_Set+0x33a>
 8002d16:	e142      	b.n	8002f9e <PWM_Map_Duty_Cycle_Set+0x73a>
	}

	//Since the command variable point is inside the map's boundary, sets duty cycle via bilinear interpolation
	else
	{
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	72fb      	strb	r3, [r7, #11]
 8002d1c:	e138      	b.n	8002f90 <PWM_Map_Duty_Cycle_Set+0x72c>
		{
			//Checks if the command variable point is inside the x, x + 1 column
			if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][x])
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68d9      	ldr	r1, [r3, #12]
 8002d28:	7afb      	ldrb	r3, [r7, #11]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	440b      	add	r3, r1
 8002d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	f2c0 8129 	blt.w	8002f8a <PWM_Map_Duty_Cycle_Set+0x726>
				&& (pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][x + 1]))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68d9      	ldr	r1, [r3, #12]
 8002d42:	7afb      	ldrb	r3, [r7, #11]
 8002d44:	3301      	adds	r3, #1
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	440b      	add	r3, r1
 8002d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	f300 811b 	bgt.w	8002f8a <PWM_Map_Duty_Cycle_Set+0x726>
			{
				for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002d54:	2300      	movs	r3, #0
 8002d56:	72bb      	strb	r3, [r7, #10]
 8002d58:	e110      	b.n	8002f7c <PWM_Map_Duty_Cycle_Set+0x718>
				{
					//Checks if the command variable point is inside the y, y + 1 line
					if((pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][y])
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6919      	ldr	r1, [r3, #16]
 8002d64:	7abb      	ldrb	r3, [r7, #10]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	440b      	add	r3, r1
 8002d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	f2c0 8101 	blt.w	8002f76 <PWM_Map_Duty_Cycle_Set+0x712>
						&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][y + 1]))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6919      	ldr	r1, [r3, #16]
 8002d7e:	7abb      	ldrb	r3, [r7, #10]
 8002d80:	3301      	adds	r3, #1
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	440b      	add	r3, r1
 8002d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	f300 80f3 	bgt.w	8002f76 <PWM_Map_Duty_Cycle_Set+0x712>
					{
						retVal = __PDM_BILINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d96:	4619      	mov	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	7abb      	ldrb	r3, [r7, #10]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da6:	1acb      	subs	r3, r1, r3
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002dae:	4610      	mov	r0, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68d1      	ldr	r1, [r2, #12]
 8002db4:	7afa      	ldrb	r2, [r7, #11]
 8002db6:	0052      	lsls	r2, r2, #1
 8002db8:	440a      	add	r2, r1
 8002dba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002dbe:	1a82      	subs	r2, r0, r2
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	6948      	ldr	r0, [r1, #20]
 8002dc4:	7af9      	ldrb	r1, [r7, #11]
 8002dc6:	3101      	adds	r1, #1
 8002dc8:	0089      	lsls	r1, r1, #2
 8002dca:	4401      	add	r1, r0
 8002dcc:	6808      	ldr	r0, [r1, #0]
 8002dce:	7ab9      	ldrb	r1, [r7, #10]
 8002dd0:	3101      	adds	r1, #1
 8002dd2:	0049      	lsls	r1, r1, #1
 8002dd4:	4401      	add	r1, r0
 8002dd6:	8809      	ldrh	r1, [r1, #0]
 8002dd8:	460c      	mov	r4, r1
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	6948      	ldr	r0, [r1, #20]
 8002dde:	7af9      	ldrb	r1, [r7, #11]
 8002de0:	0089      	lsls	r1, r1, #2
 8002de2:	4401      	add	r1, r0
 8002de4:	6808      	ldr	r0, [r1, #0]
 8002de6:	7ab9      	ldrb	r1, [r7, #10]
 8002de8:	3101      	adds	r1, #1
 8002dea:	0049      	lsls	r1, r1, #1
 8002dec:	4401      	add	r1, r0
 8002dee:	8809      	ldrh	r1, [r1, #0]
 8002df0:	1a61      	subs	r1, r4, r1
 8002df2:	fb02 f101 	mul.w	r1, r2, r1
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68d0      	ldr	r0, [r2, #12]
 8002dfa:	7afa      	ldrb	r2, [r7, #11]
 8002dfc:	3201      	adds	r2, #1
 8002dfe:	0052      	lsls	r2, r2, #1
 8002e00:	4402      	add	r2, r0
 8002e02:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e06:	4614      	mov	r4, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	68d0      	ldr	r0, [r2, #12]
 8002e0c:	7afa      	ldrb	r2, [r7, #11]
 8002e0e:	0052      	lsls	r2, r2, #1
 8002e10:	4402      	add	r2, r0
 8002e12:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e16:	1aa2      	subs	r2, r4, r2
 8002e18:	fb91 f2f2 	sdiv	r2, r1, r2
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	6948      	ldr	r0, [r1, #20]
 8002e20:	7af9      	ldrb	r1, [r7, #11]
 8002e22:	0089      	lsls	r1, r1, #2
 8002e24:	4401      	add	r1, r0
 8002e26:	6808      	ldr	r0, [r1, #0]
 8002e28:	7ab9      	ldrb	r1, [r7, #10]
 8002e2a:	3101      	adds	r1, #1
 8002e2c:	0049      	lsls	r1, r1, #1
 8002e2e:	4401      	add	r1, r0
 8002e30:	8809      	ldrh	r1, [r1, #0]
 8002e32:	4411      	add	r1, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002e3a:	4614      	mov	r4, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68d0      	ldr	r0, [r2, #12]
 8002e40:	7afa      	ldrb	r2, [r7, #11]
 8002e42:	0052      	lsls	r2, r2, #1
 8002e44:	4402      	add	r2, r0
 8002e46:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e4a:	1aa2      	subs	r2, r4, r2
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	6944      	ldr	r4, [r0, #20]
 8002e50:	7af8      	ldrb	r0, [r7, #11]
 8002e52:	3001      	adds	r0, #1
 8002e54:	0080      	lsls	r0, r0, #2
 8002e56:	4420      	add	r0, r4
 8002e58:	6804      	ldr	r4, [r0, #0]
 8002e5a:	7ab8      	ldrb	r0, [r7, #10]
 8002e5c:	0040      	lsls	r0, r0, #1
 8002e5e:	4420      	add	r0, r4
 8002e60:	8800      	ldrh	r0, [r0, #0]
 8002e62:	4605      	mov	r5, r0
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	6944      	ldr	r4, [r0, #20]
 8002e68:	7af8      	ldrb	r0, [r7, #11]
 8002e6a:	0080      	lsls	r0, r0, #2
 8002e6c:	4420      	add	r0, r4
 8002e6e:	6804      	ldr	r4, [r0, #0]
 8002e70:	7ab8      	ldrb	r0, [r7, #10]
 8002e72:	0040      	lsls	r0, r0, #1
 8002e74:	4420      	add	r0, r4
 8002e76:	8800      	ldrh	r0, [r0, #0]
 8002e78:	1a28      	subs	r0, r5, r0
 8002e7a:	fb02 f000 	mul.w	r0, r2, r0
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68d4      	ldr	r4, [r2, #12]
 8002e82:	7afa      	ldrb	r2, [r7, #11]
 8002e84:	3201      	adds	r2, #1
 8002e86:	0052      	lsls	r2, r2, #1
 8002e88:	4422      	add	r2, r4
 8002e8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e8e:	4615      	mov	r5, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68d4      	ldr	r4, [r2, #12]
 8002e94:	7afa      	ldrb	r2, [r7, #11]
 8002e96:	0052      	lsls	r2, r2, #1
 8002e98:	4422      	add	r2, r4
 8002e9a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e9e:	1aaa      	subs	r2, r5, r2
 8002ea0:	fb90 f2f2 	sdiv	r2, r0, r2
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	6944      	ldr	r4, [r0, #20]
 8002ea8:	7af8      	ldrb	r0, [r7, #11]
 8002eaa:	0080      	lsls	r0, r0, #2
 8002eac:	4420      	add	r0, r4
 8002eae:	6804      	ldr	r4, [r0, #0]
 8002eb0:	7ab8      	ldrb	r0, [r7, #10]
 8002eb2:	0040      	lsls	r0, r0, #1
 8002eb4:	4420      	add	r0, r4
 8002eb6:	8800      	ldrh	r0, [r0, #0]
 8002eb8:	4402      	add	r2, r0
 8002eba:	1a8a      	subs	r2, r1, r2
 8002ebc:	fb03 f202 	mul.w	r2, r3, r2
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6919      	ldr	r1, [r3, #16]
 8002ec4:	7abb      	ldrb	r3, [r7, #10]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	440b      	add	r3, r1
 8002ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6919      	ldr	r1, [r3, #16]
 8002ed6:	7abb      	ldrb	r3, [r7, #10]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	440b      	add	r3, r1
 8002edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee0:	1ac3      	subs	r3, r0, r3
 8002ee2:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68d9      	ldr	r1, [r3, #12]
 8002ef4:	7afb      	ldrb	r3, [r7, #11]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	440b      	add	r3, r1
 8002efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002efe:	1ac3      	subs	r3, r0, r3
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6948      	ldr	r0, [r1, #20]
 8002f04:	7af9      	ldrb	r1, [r7, #11]
 8002f06:	3101      	adds	r1, #1
 8002f08:	0089      	lsls	r1, r1, #2
 8002f0a:	4401      	add	r1, r0
 8002f0c:	6808      	ldr	r0, [r1, #0]
 8002f0e:	7ab9      	ldrb	r1, [r7, #10]
 8002f10:	0049      	lsls	r1, r1, #1
 8002f12:	4401      	add	r1, r0
 8002f14:	8809      	ldrh	r1, [r1, #0]
 8002f16:	460c      	mov	r4, r1
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	6948      	ldr	r0, [r1, #20]
 8002f1c:	7af9      	ldrb	r1, [r7, #11]
 8002f1e:	0089      	lsls	r1, r1, #2
 8002f20:	4401      	add	r1, r0
 8002f22:	6808      	ldr	r0, [r1, #0]
 8002f24:	7ab9      	ldrb	r1, [r7, #10]
 8002f26:	0049      	lsls	r1, r1, #1
 8002f28:	4401      	add	r1, r0
 8002f2a:	8809      	ldrh	r1, [r1, #0]
 8002f2c:	1a61      	subs	r1, r4, r1
 8002f2e:	fb03 f101 	mul.w	r1, r3, r1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68d8      	ldr	r0, [r3, #12]
 8002f36:	7afb      	ldrb	r3, [r7, #11]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4403      	add	r3, r0
 8002f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f42:	461c      	mov	r4, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68d8      	ldr	r0, [r3, #12]
 8002f48:	7afb      	ldrb	r3, [r7, #11]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4403      	add	r3, r0
 8002f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f52:	1ae3      	subs	r3, r4, r3
 8002f54:	fb91 f3f3 	sdiv	r3, r1, r3
 8002f58:	b299      	uxth	r1, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6958      	ldr	r0, [r3, #20]
 8002f5e:	7afb      	ldrb	r3, [r7, #11]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4403      	add	r3, r0
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	7abb      	ldrb	r3, [r7, #10]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4403      	add	r3, r0
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	440b      	add	r3, r1
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	81fb      	strh	r3, [r7, #14]
				for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002f76:	7abb      	ldrb	r3, [r7, #10]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	72bb      	strb	r3, [r7, #10]
 8002f7c:	7aba      	ldrb	r2, [r7, #10]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	795b      	ldrb	r3, [r3, #5]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	429a      	cmp	r2, r3
 8002f86:	f6ff aee8 	blt.w	8002d5a <PWM_Map_Duty_Cycle_Set+0x4f6>
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	72fb      	strb	r3, [r7, #11]
 8002f90:	7afa      	ldrb	r2, [r7, #11]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	791b      	ldrb	r3, [r3, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	f6ff aec0 	blt.w	8002d1e <PWM_Map_Duty_Cycle_Set+0x4ba>
				}
			}
		}
	}

	return retVal;
 8002f9e:	89fb      	ldrh	r3, [r7, #14]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bcb0      	pop	{r4, r5, r7}
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_CAN_RxFifo0MsgPendingCallback>:

#include "pdm.h"
#include "stdlib.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxMessage, canRxData) == HAL_OK)
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002fb8:	2100      	movs	r1, #0
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f002 f811 	bl	8004fe2 <HAL_CAN_GetRxMessage>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		PDM_CAN_Process_Rx_Data();
 8002fc6:	f7fe f98c 	bl	80012e2 <PDM_CAN_Process_Rx_Data>

		HAL_GPIO_TogglePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin);
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002fce:	f003 faf8 	bl	80065c2 <HAL_GPIO_TogglePin>
	}

	return;
 8002fd2:	bf00      	nop
 8002fd4:	bf00      	nop
}
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000680 	.word	0x20000680
 8002fe0:	20000688 	.word	0x20000688
 8002fe4:	40021800 	.word	0x40021800

08002fe8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	80fb      	strh	r3, [r7, #6]
	PDM_Input_Process();
 8002ff2:	f7fe ff8b 	bl	8001f0c <PDM_Input_Process>

	PDM_Output_Process();
 8002ff6:	f7ff f889 	bl	800210c <PDM_Output_Process>

	return;
 8002ffa:	bf00      	nop
}
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a40      	ldr	r2, [pc, #256]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d106      	bne.n	8003024 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_TIM_Base_Stop_IT(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f006 fdd8 	bl	8009bcc <HAL_TIM_Base_Stop_IT>
		flagReading[1] = Data_Read_Ready;
 800301c:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800301e:	2200      	movs	r2, #0
 8003020:	705a      	strb	r2, [r3, #1]
//			HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
//			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, pwmOutStruct[3].dutyCycle);
//		}
//	}

	return;
 8003022:	e073      	b.n	800310c <HAL_TIM_PeriodElapsedCallback+0x108>
	else if(htim->Instance == TIM7)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a3c      	ldr	r2, [pc, #240]	; (800311c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d16e      	bne.n	800310c <HAL_TIM_PeriodElapsedCallback+0x108>
		accMsg10Hz++;
 800302e:	4b3c      	ldr	r3, [pc, #240]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	4a3a      	ldr	r2, [pc, #232]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003036:	6013      	str	r3, [r2, #0]
		accMsg25Hz++;
 8003038:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	4a39      	ldr	r2, [pc, #228]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003040:	6013      	str	r3, [r2, #0]
		accMsg50Hz++;
 8003042:	4b39      	ldr	r3, [pc, #228]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	4a37      	ldr	r2, [pc, #220]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800304a:	6013      	str	r3, [r2, #0]
		accMsg80Hz++,
 800304c:	4b37      	ldr	r3, [pc, #220]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	4a36      	ldr	r2, [pc, #216]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003054:	6013      	str	r3, [r2, #0]
		accMsg100Hz++;
 8003056:	4b36      	ldr	r3, [pc, #216]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3301      	adds	r3, #1
 800305c:	4a34      	ldr	r2, [pc, #208]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800305e:	6013      	str	r3, [r2, #0]
		accUsbData++;
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	4a33      	ldr	r2, [pc, #204]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003068:	6013      	str	r3, [r2, #0]
		accOutputFuse[0]++;
 800306a:	4b33      	ldr	r3, [pc, #204]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3301      	adds	r3, #1
 8003070:	4a31      	ldr	r2, [pc, #196]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003072:	6013      	str	r3, [r2, #0]
		accOutputFuse[1]++;
 8003074:	4b30      	ldr	r3, [pc, #192]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	3301      	adds	r3, #1
 800307a:	4a2f      	ldr	r2, [pc, #188]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800307c:	6053      	str	r3, [r2, #4]
		accOutputFuse[2]++;
 800307e:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	3301      	adds	r3, #1
 8003084:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003086:	6093      	str	r3, [r2, #8]
		accOutputFuse[3]++;
 8003088:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	3301      	adds	r3, #1
 800308e:	4a2a      	ldr	r2, [pc, #168]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003090:	60d3      	str	r3, [r2, #12]
		accOutputFuse[4]++;
 8003092:	4b29      	ldr	r3, [pc, #164]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	3301      	adds	r3, #1
 8003098:	4a27      	ldr	r2, [pc, #156]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800309a:	6113      	str	r3, [r2, #16]
		accOutputFuse[5]++;
 800309c:	4b26      	ldr	r3, [pc, #152]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	3301      	adds	r3, #1
 80030a2:	4a25      	ldr	r2, [pc, #148]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030a4:	6153      	str	r3, [r2, #20]
		accOutputFuse[6]++;
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	3301      	adds	r3, #1
 80030ac:	4a22      	ldr	r2, [pc, #136]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030ae:	6193      	str	r3, [r2, #24]
		accOutputFuse[7]++;
 80030b0:	4b21      	ldr	r3, [pc, #132]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	3301      	adds	r3, #1
 80030b6:	4a20      	ldr	r2, [pc, #128]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030b8:	61d3      	str	r3, [r2, #28]
		accOutputFuse[8]++;
 80030ba:	4b1f      	ldr	r3, [pc, #124]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	3301      	adds	r3, #1
 80030c0:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030c2:	6213      	str	r3, [r2, #32]
		accOutputFuse[9]++;
 80030c4:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	3301      	adds	r3, #1
 80030ca:	4a1b      	ldr	r2, [pc, #108]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030cc:	6253      	str	r3, [r2, #36]	; 0x24
		accOutputFuse[10]++;
 80030ce:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	3301      	adds	r3, #1
 80030d4:	4a18      	ldr	r2, [pc, #96]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030d6:	6293      	str	r3, [r2, #40]	; 0x28
		accOutputFuse[11]++;
 80030d8:	4b17      	ldr	r3, [pc, #92]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	3301      	adds	r3, #1
 80030de:	4a16      	ldr	r2, [pc, #88]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030e0:	62d3      	str	r3, [r2, #44]	; 0x2c
		accOutputFuse[12]++;
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	3301      	adds	r3, #1
 80030e8:	4a13      	ldr	r2, [pc, #76]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030ea:	6313      	str	r3, [r2, #48]	; 0x30
		accOutputFuse[13]++;
 80030ec:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	3301      	adds	r3, #1
 80030f2:	4a11      	ldr	r2, [pc, #68]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030f4:	6353      	str	r3, [r2, #52]	; 0x34
		accOutputFuse[14]++;
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	3301      	adds	r3, #1
 80030fc:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030fe:	6393      	str	r3, [r2, #56]	; 0x38
		accOutputFuse[15]++;
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003104:	3301      	adds	r3, #1
 8003106:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003108:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 800310a:	bf00      	nop
 800310c:	bf00      	nop
}
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40001000 	.word	0x40001000
 8003118:	200007cc 	.word	0x200007cc
 800311c:	40001400 	.word	0x40001400
 8003120:	20000934 	.word	0x20000934
 8003124:	20000938 	.word	0x20000938
 8003128:	2000093c 	.word	0x2000093c
 800312c:	20000940 	.word	0x20000940
 8003130:	20000944 	.word	0x20000944
 8003134:	20000948 	.word	0x20000948
 8003138:	2000094c 	.word	0x2000094c

0800313c <PDM_Data_Conversion>:


//Reads ADC value and converts into data
//Returns HAL_TIM_Base_Start_IT status
HAL_StatusTypeDef PDM_Data_Conversion(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	uint8_t flag_fuse = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef retVal = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	72fb      	strb	r3, [r7, #11]

	flagReading[1] = Data_Read_Waiting;
 800314c:	4baa      	ldr	r3, [pc, #680]	; (80033f8 <PDM_Data_Conversion+0x2bc>)
 800314e:	2201      	movs	r2, #1
 8003150:	705a      	strb	r2, [r3, #1]

	//Convert ADC value based on selected reading and sets delay for next reading
	switch(flagReading[0])
 8003152:	4ba9      	ldr	r3, [pc, #676]	; (80033f8 <PDM_Data_Conversion+0x2bc>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	3b02      	subs	r3, #2
 8003158:	2b03      	cmp	r3, #3
 800315a:	f200 81f4 	bhi.w	8003546 <PDM_Data_Conversion+0x40a>
 800315e:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <PDM_Data_Conversion+0x28>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	08003175 	.word	0x08003175
 8003168:	080032a7 	.word	0x080032a7
 800316c:	080033f3 	.word	0x080033f3
 8003170:	080034c7 	.word	0x080034c7
	{
	case Data_Read_Current0:

		for(uint8_t i = 0; i < 8; i++)
 8003174:	2300      	movs	r3, #0
 8003176:	73bb      	strb	r3, [r7, #14]
 8003178:	e072      	b.n	8003260 <PDM_Data_Conversion+0x124>
		{
			//Convert ADC into current
			dataBuffer[i * 2] = adcBuffer[i];//__PDM_CONVERT_CURRENT(adcBuffer[i]);
 800317a:	7bba      	ldrb	r2, [r7, #14]
 800317c:	7bbb      	ldrb	r3, [r7, #14]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	499e      	ldr	r1, [pc, #632]	; (80033fc <PDM_Data_Conversion+0x2c0>)
 8003182:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8003186:	4a9e      	ldr	r2, [pc, #632]	; (8003400 <PDM_Data_Conversion+0x2c4>)
 8003188:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((dataBuffer[i * 2] <= outputStruct[i * 2].currentThresholds)
 800318c:	7bbb      	ldrb	r3, [r7, #14]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4a9b      	ldr	r2, [pc, #620]	; (8003400 <PDM_Data_Conversion+0x2c4>)
 8003192:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003196:	7bbb      	ldrb	r3, [r7, #14]
 8003198:	005a      	lsls	r2, r3, #1
 800319a:	489a      	ldr	r0, [pc, #616]	; (8003404 <PDM_Data_Conversion+0x2c8>)
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4403      	add	r3, r0
 80031a6:	3308      	adds	r3, #8
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	4299      	cmp	r1, r3
 80031ac:	d90b      	bls.n	80031c6 <PDM_Data_Conversion+0x8a>
					|| (outputStruct[i * 2].timeoutOutputFuse == 0))
 80031ae:	7bbb      	ldrb	r3, [r7, #14]
 80031b0:	005a      	lsls	r2, r3, #1
 80031b2:	4994      	ldr	r1, [pc, #592]	; (8003404 <PDM_Data_Conversion+0x2c8>)
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	440b      	add	r3, r1
 80031be:	330a      	adds	r3, #10
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <PDM_Data_Conversion+0x98>
				accOutputFuse[i * 2] = 0;
 80031c6:	7bbb      	ldrb	r3, [r7, #14]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4a8f      	ldr	r2, [pc, #572]	; (8003408 <PDM_Data_Conversion+0x2cc>)
 80031cc:	2100      	movs	r1, #0
 80031ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80031d2:	e020      	b.n	8003216 <PDM_Data_Conversion+0xda>

			else if(accOutputFuse[i * 2] > outputStruct[i * 2].timeoutOutputFuse)
 80031d4:	7bbb      	ldrb	r3, [r7, #14]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4a8b      	ldr	r2, [pc, #556]	; (8003408 <PDM_Data_Conversion+0x2cc>)
 80031da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031de:	7bbb      	ldrb	r3, [r7, #14]
 80031e0:	005a      	lsls	r2, r3, #1
 80031e2:	4888      	ldr	r0, [pc, #544]	; (8003404 <PDM_Data_Conversion+0x2c8>)
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4403      	add	r3, r0
 80031ee:	330a      	adds	r3, #10
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	4299      	cmp	r1, r3
 80031f4:	d90f      	bls.n	8003216 <PDM_Data_Conversion+0xda>
			{
				flag_fuse = 1;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
				flagDriverSafety |= 1 << (i * 2);
 80031fa:	7bbb      	ldrb	r3, [r7, #14]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	2201      	movs	r2, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	b21a      	sxth	r2, r3
 8003206:	4b81      	ldr	r3, [pc, #516]	; (800340c <PDM_Data_Conversion+0x2d0>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b21b      	sxth	r3, r3
 800320c:	4313      	orrs	r3, r2
 800320e:	b21b      	sxth	r3, r3
 8003210:	b29a      	uxth	r2, r3
 8003212:	4b7e      	ldr	r3, [pc, #504]	; (800340c <PDM_Data_Conversion+0x2d0>)
 8003214:	801a      	strh	r2, [r3, #0]
			}

			if(adcBuffer[i] < ADC_THRESHOLD_HIGH)
 8003216:	7bbb      	ldrb	r3, [r7, #14]
 8003218:	4a78      	ldr	r2, [pc, #480]	; (80033fc <PDM_Data_Conversion+0x2c0>)
 800321a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800321e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003222:	d20d      	bcs.n	8003240 <PDM_Data_Conversion+0x104>
				dataIdBuffer[i * 2] |= 1;
 8003224:	7bbb      	ldrb	r3, [r7, #14]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4a79      	ldr	r2, [pc, #484]	; (8003410 <PDM_Data_Conversion+0x2d4>)
 800322a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800322e:	7bbb      	ldrb	r3, [r7, #14]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	b291      	uxth	r1, r2
 8003238:	4a75      	ldr	r2, [pc, #468]	; (8003410 <PDM_Data_Conversion+0x2d4>)
 800323a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800323e:	e00c      	b.n	800325a <PDM_Data_Conversion+0x11e>
			else
				dataIdBuffer[i * 2] &= 0xFFFE;
 8003240:	7bbb      	ldrb	r3, [r7, #14]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4a72      	ldr	r2, [pc, #456]	; (8003410 <PDM_Data_Conversion+0x2d4>)
 8003246:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800324a:	7bbb      	ldrb	r3, [r7, #14]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	b291      	uxth	r1, r2
 8003254:	4a6e      	ldr	r2, [pc, #440]	; (8003410 <PDM_Data_Conversion+0x2d4>)
 8003256:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 800325a:	7bbb      	ldrb	r3, [r7, #14]
 800325c:	3301      	adds	r3, #1
 800325e:	73bb      	strb	r3, [r7, #14]
 8003260:	7bbb      	ldrb	r3, [r7, #14]
 8003262:	2b07      	cmp	r3, #7
 8003264:	d989      	bls.n	800317a <PDM_Data_Conversion+0x3e>
		}

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003266:	2201      	movs	r2, #1
 8003268:	2120      	movs	r1, #32
 800326a:	486a      	ldr	r0, [pc, #424]	; (8003414 <PDM_Data_Conversion+0x2d8>)
 800326c:	f003 f990 	bl	8006590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8003270:	2200      	movs	r2, #0
 8003272:	2110      	movs	r1, #16
 8003274:	4867      	ldr	r0, [pc, #412]	; (8003414 <PDM_Data_Conversion+0x2d8>)
 8003276:	f003 f98b 	bl	8006590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 800327a:	2201      	movs	r2, #1
 800327c:	2108      	movs	r1, #8
 800327e:	4865      	ldr	r0, [pc, #404]	; (8003414 <PDM_Data_Conversion+0x2d8>)
 8003280:	f003 f986 	bl	8006590 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Current1;
 8003284:	4b5c      	ldr	r3, [pc, #368]	; (80033f8 <PDM_Data_Conversion+0x2bc>)
 8003286:	2203      	movs	r2, #3
 8003288:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2200      	movs	r2, #0
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_CURR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032a2:	60da      	str	r2, [r3, #12]

		break;
 80032a4:	e16f      	b.n	8003586 <PDM_Data_Conversion+0x44a>

	case Data_Read_Current1:

		for(uint8_t i = 0; i < 8; i++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	737b      	strb	r3, [r7, #13]
 80032aa:	e07e      	b.n	80033aa <PDM_Data_Conversion+0x26e>
		{
			//Convert ADC into current
			dataBuffer[(i * 2) + 1] = adcBuffer[i];//__PDM_CONVERT_CURRENT(adcBuffer[i]);
 80032ac:	7b7a      	ldrb	r2, [r7, #13]
 80032ae:	7b7b      	ldrb	r3, [r7, #13]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	3301      	adds	r3, #1
 80032b4:	4951      	ldr	r1, [pc, #324]	; (80033fc <PDM_Data_Conversion+0x2c0>)
 80032b6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80032ba:	4a51      	ldr	r2, [pc, #324]	; (8003400 <PDM_Data_Conversion+0x2c4>)
 80032bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((dataBuffer[(i * 2) + 1] <= outputStruct[(i * 2) + 1].currentThresholds)
 80032c0:	7b7b      	ldrb	r3, [r7, #13]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a4e      	ldr	r2, [pc, #312]	; (8003400 <PDM_Data_Conversion+0x2c4>)
 80032c8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80032cc:	7b7b      	ldrb	r3, [r7, #13]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	484c      	ldr	r0, [pc, #304]	; (8003404 <PDM_Data_Conversion+0x2c8>)
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4403      	add	r3, r0
 80032de:	3308      	adds	r3, #8
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	4299      	cmp	r1, r3
 80032e4:	d90c      	bls.n	8003300 <PDM_Data_Conversion+0x1c4>
					|| (outputStruct[(i * 2) + 1].timeoutOutputFuse == 0))
 80032e6:	7b7b      	ldrb	r3, [r7, #13]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	4945      	ldr	r1, [pc, #276]	; (8003404 <PDM_Data_Conversion+0x2c8>)
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	440b      	add	r3, r1
 80032f8:	330a      	adds	r3, #10
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d107      	bne.n	8003310 <PDM_Data_Conversion+0x1d4>
				accOutputFuse[(i * 2) + 1] = 0;
 8003300:	7b7b      	ldrb	r3, [r7, #13]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	3301      	adds	r3, #1
 8003306:	4a40      	ldr	r2, [pc, #256]	; (8003408 <PDM_Data_Conversion+0x2cc>)
 8003308:	2100      	movs	r1, #0
 800330a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800330e:	e023      	b.n	8003358 <PDM_Data_Conversion+0x21c>

			else if(accOutputFuse[(i * 2) + 1] > outputStruct[(i * 2) + 1].timeoutOutputFuse)
 8003310:	7b7b      	ldrb	r3, [r7, #13]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	3301      	adds	r3, #1
 8003316:	4a3c      	ldr	r2, [pc, #240]	; (8003408 <PDM_Data_Conversion+0x2cc>)
 8003318:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800331c:	7b7b      	ldrb	r3, [r7, #13]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	4838      	ldr	r0, [pc, #224]	; (8003404 <PDM_Data_Conversion+0x2c8>)
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4403      	add	r3, r0
 800332e:	330a      	adds	r3, #10
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	4299      	cmp	r1, r3
 8003334:	d910      	bls.n	8003358 <PDM_Data_Conversion+0x21c>
			{
				flag_fuse = 1;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
				flagDriverSafety |= 1 << ((i * 2) + 1);
 800333a:	7b7b      	ldrb	r3, [r7, #13]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	3301      	adds	r3, #1
 8003340:	2201      	movs	r2, #1
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	b21a      	sxth	r2, r3
 8003348:	4b30      	ldr	r3, [pc, #192]	; (800340c <PDM_Data_Conversion+0x2d0>)
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b21b      	sxth	r3, r3
 800334e:	4313      	orrs	r3, r2
 8003350:	b21b      	sxth	r3, r3
 8003352:	b29a      	uxth	r2, r3
 8003354:	4b2d      	ldr	r3, [pc, #180]	; (800340c <PDM_Data_Conversion+0x2d0>)
 8003356:	801a      	strh	r2, [r3, #0]
			}

			if(adcBuffer[i] < ADC_THRESHOLD_HIGH)
 8003358:	7b7b      	ldrb	r3, [r7, #13]
 800335a:	4a28      	ldr	r2, [pc, #160]	; (80033fc <PDM_Data_Conversion+0x2c0>)
 800335c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003360:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003364:	d20f      	bcs.n	8003386 <PDM_Data_Conversion+0x24a>
				dataIdBuffer[(i * 2) + 1] |= 1;
 8003366:	7b7b      	ldrb	r3, [r7, #13]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	3301      	adds	r3, #1
 800336c:	4a28      	ldr	r2, [pc, #160]	; (8003410 <PDM_Data_Conversion+0x2d4>)
 800336e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003372:	7b7b      	ldrb	r3, [r7, #13]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	3301      	adds	r3, #1
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	b291      	uxth	r1, r2
 800337e:	4a24      	ldr	r2, [pc, #144]	; (8003410 <PDM_Data_Conversion+0x2d4>)
 8003380:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003384:	e00e      	b.n	80033a4 <PDM_Data_Conversion+0x268>
			else
				dataIdBuffer[(i * 2) + 1] &= 0xFFFE;
 8003386:	7b7b      	ldrb	r3, [r7, #13]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	3301      	adds	r3, #1
 800338c:	4a20      	ldr	r2, [pc, #128]	; (8003410 <PDM_Data_Conversion+0x2d4>)
 800338e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003392:	7b7b      	ldrb	r3, [r7, #13]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	3301      	adds	r3, #1
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	b291      	uxth	r1, r2
 800339e:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <PDM_Data_Conversion+0x2d4>)
 80033a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 80033a4:	7b7b      	ldrb	r3, [r7, #13]
 80033a6:	3301      	adds	r3, #1
 80033a8:	737b      	strb	r3, [r7, #13]
 80033aa:	7b7b      	ldrb	r3, [r7, #13]
 80033ac:	2b07      	cmp	r3, #7
 80033ae:	f67f af7d 	bls.w	80032ac <PDM_Data_Conversion+0x170>
		}

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80033b2:	2201      	movs	r2, #1
 80033b4:	2120      	movs	r1, #32
 80033b6:	4817      	ldr	r0, [pc, #92]	; (8003414 <PDM_Data_Conversion+0x2d8>)
 80033b8:	f003 f8ea 	bl	8006590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 80033bc:	2201      	movs	r2, #1
 80033be:	2110      	movs	r1, #16
 80033c0:	4814      	ldr	r0, [pc, #80]	; (8003414 <PDM_Data_Conversion+0x2d8>)
 80033c2:	f003 f8e5 	bl	8006590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 80033c6:	2200      	movs	r2, #0
 80033c8:	2108      	movs	r1, #8
 80033ca:	4812      	ldr	r0, [pc, #72]	; (8003414 <PDM_Data_Conversion+0x2d8>)
 80033cc:	f003 f8e0 	bl	8006590 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Temperature;
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <PDM_Data_Conversion+0x2bc>)
 80033d2:	2204      	movs	r2, #4
 80033d4:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2200      	movs	r2, #0
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_TEMP);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033ee:	60da      	str	r2, [r3, #12]

		break;
 80033f0:	e0c9      	b.n	8003586 <PDM_Data_Conversion+0x44a>

	case Data_Read_Temperature:

		for(uint8_t i = 0; i < 8; i++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	733b      	strb	r3, [r7, #12]
 80033f6:	e043      	b.n	8003480 <PDM_Data_Conversion+0x344>
 80033f8:	200007cc 	.word	0x200007cc
 80033fc:	200007b4 	.word	0x200007b4
 8003400:	2000073c 	.word	0x2000073c
 8003404:	200007d4 	.word	0x200007d4
 8003408:	2000094c 	.word	0x2000094c
 800340c:	200007c8 	.word	0x200007c8
 8003410:	20000778 	.word	0x20000778
 8003414:	40021000 	.word	0x40021000
		{
			//Convert ADC into temperature
			dataBuffer[16 + i] = adcBuffer[i];//__PDM_CONVERT_TEMPERATURE(adcBuffer[i], adcBuffer[8]);
 8003418:	7b3a      	ldrb	r2, [r7, #12]
 800341a:	7b3b      	ldrb	r3, [r7, #12]
 800341c:	3310      	adds	r3, #16
 800341e:	4963      	ldr	r1, [pc, #396]	; (80035ac <PDM_Data_Conversion+0x470>)
 8003420:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8003424:	4a62      	ldr	r2, [pc, #392]	; (80035b0 <PDM_Data_Conversion+0x474>)
 8003426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((adcBuffer[i] < ADC_THRESHOLD_LOW) || (adcBuffer[i] > ADC_THRESHOLD_HIGH))
 800342a:	7b3b      	ldrb	r3, [r7, #12]
 800342c:	4a5f      	ldr	r2, [pc, #380]	; (80035ac <PDM_Data_Conversion+0x470>)
 800342e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003432:	2b09      	cmp	r3, #9
 8003434:	d906      	bls.n	8003444 <PDM_Data_Conversion+0x308>
 8003436:	7b3b      	ldrb	r3, [r7, #12]
 8003438:	4a5c      	ldr	r2, [pc, #368]	; (80035ac <PDM_Data_Conversion+0x470>)
 800343a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800343e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003442:	d90d      	bls.n	8003460 <PDM_Data_Conversion+0x324>
				dataIdBuffer[16 + i] |= 1;
 8003444:	7b3b      	ldrb	r3, [r7, #12]
 8003446:	3310      	adds	r3, #16
 8003448:	4a5a      	ldr	r2, [pc, #360]	; (80035b4 <PDM_Data_Conversion+0x478>)
 800344a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800344e:	7b3b      	ldrb	r3, [r7, #12]
 8003450:	3310      	adds	r3, #16
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	b291      	uxth	r1, r2
 8003458:	4a56      	ldr	r2, [pc, #344]	; (80035b4 <PDM_Data_Conversion+0x478>)
 800345a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800345e:	e00c      	b.n	800347a <PDM_Data_Conversion+0x33e>
			else
				dataIdBuffer[16 + i] &= 0xFFFE;
 8003460:	7b3b      	ldrb	r3, [r7, #12]
 8003462:	3310      	adds	r3, #16
 8003464:	4a53      	ldr	r2, [pc, #332]	; (80035b4 <PDM_Data_Conversion+0x478>)
 8003466:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800346a:	7b3b      	ldrb	r3, [r7, #12]
 800346c:	3310      	adds	r3, #16
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	b291      	uxth	r1, r2
 8003474:	4a4f      	ldr	r2, [pc, #316]	; (80035b4 <PDM_Data_Conversion+0x478>)
 8003476:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 800347a:	7b3b      	ldrb	r3, [r7, #12]
 800347c:	3301      	adds	r3, #1
 800347e:	733b      	strb	r3, [r7, #12]
 8003480:	7b3b      	ldrb	r3, [r7, #12]
 8003482:	2b07      	cmp	r3, #7
 8003484:	d9c8      	bls.n	8003418 <PDM_Data_Conversion+0x2dc>
		}

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003486:	2201      	movs	r2, #1
 8003488:	2120      	movs	r1, #32
 800348a:	484b      	ldr	r0, [pc, #300]	; (80035b8 <PDM_Data_Conversion+0x47c>)
 800348c:	f003 f880 	bl	8006590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 8003490:	2201      	movs	r2, #1
 8003492:	2110      	movs	r1, #16
 8003494:	4848      	ldr	r0, [pc, #288]	; (80035b8 <PDM_Data_Conversion+0x47c>)
 8003496:	f003 f87b 	bl	8006590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 800349a:	2201      	movs	r2, #1
 800349c:	2108      	movs	r1, #8
 800349e:	4846      	ldr	r0, [pc, #280]	; (80035b8 <PDM_Data_Conversion+0x47c>)
 80034a0:	f003 f876 	bl	8006590 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Voltage;
 80034a4:	4b45      	ldr	r3, [pc, #276]	; (80035bc <PDM_Data_Conversion+0x480>)
 80034a6:	2205      	movs	r2, #5
 80034a8:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_VOLT);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034c2:	60da      	str	r2, [r3, #12]

		break;
 80034c4:	e05f      	b.n	8003586 <PDM_Data_Conversion+0x44a>

	case Data_Read_Voltage:

		//Convert ADC into voltage if the ADC value is valid
		if((adcBuffer[1] < ADC_THRESHOLD_LOW) || (adcBuffer[1] > ADC_THRESHOLD_HIGH))
 80034c6:	4b39      	ldr	r3, [pc, #228]	; (80035ac <PDM_Data_Conversion+0x470>)
 80034c8:	885b      	ldrh	r3, [r3, #2]
 80034ca:	2b09      	cmp	r3, #9
 80034cc:	d904      	bls.n	80034d8 <PDM_Data_Conversion+0x39c>
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <PDM_Data_Conversion+0x470>)
 80034d0:	885b      	ldrh	r3, [r3, #2]
 80034d2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80034d6:	d907      	bls.n	80034e8 <PDM_Data_Conversion+0x3ac>
			dataIdBuffer[24] &= 0xFFFE;
 80034d8:	4b36      	ldr	r3, [pc, #216]	; (80035b4 <PDM_Data_Conversion+0x478>)
 80034da:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <PDM_Data_Conversion+0x478>)
 80034e4:	861a      	strh	r2, [r3, #48]	; 0x30
 80034e6:	e006      	b.n	80034f6 <PDM_Data_Conversion+0x3ba>
		else
			dataIdBuffer[24] |= 1;
 80034e8:	4b32      	ldr	r3, [pc, #200]	; (80035b4 <PDM_Data_Conversion+0x478>)
 80034ea:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	4b30      	ldr	r3, [pc, #192]	; (80035b4 <PDM_Data_Conversion+0x478>)
 80034f4:	861a      	strh	r2, [r3, #48]	; 0x30

		dataBuffer[24] = adcBuffer[0] - adcBuffer[8];//__PDM_CONVERT_VOLTAGE(adcBuffer[0], adcBuffer[8]);
 80034f6:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <PDM_Data_Conversion+0x470>)
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <PDM_Data_Conversion+0x470>)
 80034fc:	8a1b      	ldrh	r3, [r3, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	b29a      	uxth	r2, r3
 8003502:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <PDM_Data_Conversion+0x474>)
 8003504:	861a      	strh	r2, [r3, #48]	; 0x30

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003506:	2201      	movs	r2, #1
 8003508:	2120      	movs	r1, #32
 800350a:	482b      	ldr	r0, [pc, #172]	; (80035b8 <PDM_Data_Conversion+0x47c>)
 800350c:	f003 f840 	bl	8006590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8003510:	2200      	movs	r2, #0
 8003512:	2110      	movs	r1, #16
 8003514:	4828      	ldr	r0, [pc, #160]	; (80035b8 <PDM_Data_Conversion+0x47c>)
 8003516:	f003 f83b 	bl	8006590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 800351a:	2200      	movs	r2, #0
 800351c:	2108      	movs	r1, #8
 800351e:	4826      	ldr	r0, [pc, #152]	; (80035b8 <PDM_Data_Conversion+0x47c>)
 8003520:	f003 f836 	bl	8006590 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Current0;
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <PDM_Data_Conversion+0x480>)
 8003526:	2202      	movs	r2, #2
 8003528:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_CURR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003542:	60da      	str	r2, [r3, #12]

		break;
 8003544:	e01f      	b.n	8003586 <PDM_Data_Conversion+0x44a>

	default:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003546:	2201      	movs	r2, #1
 8003548:	2120      	movs	r1, #32
 800354a:	481b      	ldr	r0, [pc, #108]	; (80035b8 <PDM_Data_Conversion+0x47c>)
 800354c:	f003 f820 	bl	8006590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8003550:	2200      	movs	r2, #0
 8003552:	2110      	movs	r1, #16
 8003554:	4818      	ldr	r0, [pc, #96]	; (80035b8 <PDM_Data_Conversion+0x47c>)
 8003556:	f003 f81b 	bl	8006590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 800355a:	2200      	movs	r2, #0
 800355c:	2108      	movs	r1, #8
 800355e:	4816      	ldr	r0, [pc, #88]	; (80035b8 <PDM_Data_Conversion+0x47c>)
 8003560:	f003 f816 	bl	8006590 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Current0;
 8003564:	4b15      	ldr	r3, [pc, #84]	; (80035bc <PDM_Data_Conversion+0x480>)
 8003566:	2202      	movs	r2, #2
 8003568:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_CURR);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800357a:	62da      	str	r2, [r3, #44]	; 0x2c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003582:	60da      	str	r2, [r3, #12]

		break;
 8003584:	bf00      	nop
	}

	//Convert ADC into MCU temperature
	dataBuffer[25] = adcBuffer[9];//__PDM_CONVERT_MCU_TEMPERATURE(adcBuffer[9]);
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <PDM_Data_Conversion+0x470>)
 8003588:	8a5a      	ldrh	r2, [r3, #18]
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <PDM_Data_Conversion+0x474>)
 800358c:	865a      	strh	r2, [r3, #50]	; 0x32

	//Start readings timer
	retVal = HAL_TIM_Base_Start_IT(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f006 faac 	bl	8009aec <HAL_TIM_Base_Start_IT>
 8003594:	4603      	mov	r3, r0
 8003596:	72fb      	strb	r3, [r7, #11]

	//If there is any virtual fuse tripped
	if(flag_fuse != 0)
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <PDM_Data_Conversion+0x466>
		PDM_Output_Process();
 800359e:	f7fe fdb5 	bl	800210c <PDM_Output_Process>

	return retVal;
 80035a2:	7afb      	ldrb	r3, [r7, #11]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	200007b4 	.word	0x200007b4
 80035b0:	2000073c 	.word	0x2000073c
 80035b4:	20000778 	.word	0x20000778
 80035b8:	40021000 	.word	0x40021000
 80035bc:	200007cc 	.word	0x200007cc

080035c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_MspInit+0x4c>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4a0f      	ldr	r2, [pc, #60]	; (800360c <HAL_MspInit+0x4c>)
 80035d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d4:	6453      	str	r3, [r2, #68]	; 0x44
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <HAL_MspInit+0x4c>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_MspInit+0x4c>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	4a08      	ldr	r2, [pc, #32]	; (800360c <HAL_MspInit+0x4c>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_MspInit+0x4c>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800

08003610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6b      	ldr	r2, [pc, #428]	; (80037dc <HAL_ADC_MspInit+0x1cc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d172      	bne.n	8003718 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	4b6a      	ldr	r3, [pc, #424]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	4a69      	ldr	r2, [pc, #420]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003640:	6453      	str	r3, [r2, #68]	; 0x44
 8003642:	4b67      	ldr	r3, [pc, #412]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	4b63      	ldr	r3, [pc, #396]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	4a62      	ldr	r2, [pc, #392]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6313      	str	r3, [r2, #48]	; 0x30
 800365e:	4b60      	ldr	r3, [pc, #384]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	4b5c      	ldr	r3, [pc, #368]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a5b      	ldr	r2, [pc, #364]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 8003674:	f043 0304 	orr.w	r3, r3, #4
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b59      	ldr	r3, [pc, #356]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 8003686:	23e0      	movs	r3, #224	; 0xe0
 8003688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800368a:	2303      	movs	r3, #3
 800368c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003692:	f107 031c 	add.w	r3, r7, #28
 8003696:	4619      	mov	r1, r3
 8003698:	4852      	ldr	r0, [pc, #328]	; (80037e4 <HAL_ADC_MspInit+0x1d4>)
 800369a:	f002 fcd9 	bl	8006050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ANALOG9_Pin;
 800369e:	2310      	movs	r3, #16
 80036a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036a2:	2303      	movs	r3, #3
 80036a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 80036aa:	f107 031c 	add.w	r3, r7, #28
 80036ae:	4619      	mov	r1, r3
 80036b0:	484d      	ldr	r0, [pc, #308]	; (80037e8 <HAL_ADC_MspInit+0x1d8>)
 80036b2:	f002 fccd 	bl	8006050 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80036b6:	4b4d      	ldr	r3, [pc, #308]	; (80037ec <HAL_ADC_MspInit+0x1dc>)
 80036b8:	4a4d      	ldr	r2, [pc, #308]	; (80037f0 <HAL_ADC_MspInit+0x1e0>)
 80036ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80036bc:	4b4b      	ldr	r3, [pc, #300]	; (80037ec <HAL_ADC_MspInit+0x1dc>)
 80036be:	2200      	movs	r2, #0
 80036c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036c2:	4b4a      	ldr	r3, [pc, #296]	; (80037ec <HAL_ADC_MspInit+0x1dc>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036c8:	4b48      	ldr	r3, [pc, #288]	; (80037ec <HAL_ADC_MspInit+0x1dc>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80036ce:	4b47      	ldr	r3, [pc, #284]	; (80037ec <HAL_ADC_MspInit+0x1dc>)
 80036d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036d6:	4b45      	ldr	r3, [pc, #276]	; (80037ec <HAL_ADC_MspInit+0x1dc>)
 80036d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036de:	4b43      	ldr	r3, [pc, #268]	; (80037ec <HAL_ADC_MspInit+0x1dc>)
 80036e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80036e6:	4b41      	ldr	r3, [pc, #260]	; (80037ec <HAL_ADC_MspInit+0x1dc>)
 80036e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80036ee:	4b3f      	ldr	r3, [pc, #252]	; (80037ec <HAL_ADC_MspInit+0x1dc>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036f4:	4b3d      	ldr	r3, [pc, #244]	; (80037ec <HAL_ADC_MspInit+0x1dc>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036fa:	483c      	ldr	r0, [pc, #240]	; (80037ec <HAL_ADC_MspInit+0x1dc>)
 80036fc:	f002 f938 	bl	8005970 <HAL_DMA_Init>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003706:	f7fd fd95 	bl	8001234 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a37      	ldr	r2, [pc, #220]	; (80037ec <HAL_ADC_MspInit+0x1dc>)
 800370e:	639a      	str	r2, [r3, #56]	; 0x38
 8003710:	4a36      	ldr	r2, [pc, #216]	; (80037ec <HAL_ADC_MspInit+0x1dc>)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003716:	e05d      	b.n	80037d4 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a35      	ldr	r2, [pc, #212]	; (80037f4 <HAL_ADC_MspInit+0x1e4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d158      	bne.n	80037d4 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	4a2d      	ldr	r2, [pc, #180]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 800372c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003730:	6453      	str	r3, [r2, #68]	; 0x44
 8003732:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_ADC_MspInit+0x1d0>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin
 800375a:	231f      	movs	r3, #31
 800375c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800375e:	2303      	movs	r3, #3
 8003760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003766:	f107 031c 	add.w	r3, r7, #28
 800376a:	4619      	mov	r1, r3
 800376c:	481d      	ldr	r0, [pc, #116]	; (80037e4 <HAL_ADC_MspInit+0x1d4>)
 800376e:	f002 fc6f 	bl	8006050 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003772:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <HAL_ADC_MspInit+0x1e8>)
 8003774:	4a21      	ldr	r2, [pc, #132]	; (80037fc <HAL_ADC_MspInit+0x1ec>)
 8003776:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003778:	4b1f      	ldr	r3, [pc, #124]	; (80037f8 <HAL_ADC_MspInit+0x1e8>)
 800377a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800377e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003780:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_ADC_MspInit+0x1e8>)
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003786:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <HAL_ADC_MspInit+0x1e8>)
 8003788:	2200      	movs	r2, #0
 800378a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800378c:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <HAL_ADC_MspInit+0x1e8>)
 800378e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003792:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003794:	4b18      	ldr	r3, [pc, #96]	; (80037f8 <HAL_ADC_MspInit+0x1e8>)
 8003796:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800379a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800379c:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <HAL_ADC_MspInit+0x1e8>)
 800379e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037a2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_ADC_MspInit+0x1e8>)
 80037a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037aa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_ADC_MspInit+0x1e8>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <HAL_ADC_MspInit+0x1e8>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80037b8:	480f      	ldr	r0, [pc, #60]	; (80037f8 <HAL_ADC_MspInit+0x1e8>)
 80037ba:	f002 f8d9 	bl	8005970 <HAL_DMA_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 80037c4:	f7fd fd36 	bl	8001234 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <HAL_ADC_MspInit+0x1e8>)
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38
 80037ce:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <HAL_ADC_MspInit+0x1e8>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80037d4:	bf00      	nop
 80037d6:	3730      	adds	r7, #48	; 0x30
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40012000 	.word	0x40012000
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40020000 	.word	0x40020000
 80037e8:	40020800 	.word	0x40020800
 80037ec:	2000020c 	.word	0x2000020c
 80037f0:	40026410 	.word	0x40026410
 80037f4:	40012100 	.word	0x40012100
 80037f8:	2000026c 	.word	0x2000026c
 80037fc:	40026440 	.word	0x40026440

08003800 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 0314 	add.w	r3, r7, #20
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_CAN_MspInit+0x94>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d134      	bne.n	800388c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	4b1c      	ldr	r3, [pc, #112]	; (8003898 <HAL_CAN_MspInit+0x98>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	4a1b      	ldr	r2, [pc, #108]	; (8003898 <HAL_CAN_MspInit+0x98>)
 800382c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003830:	6413      	str	r3, [r2, #64]	; 0x40
 8003832:	4b19      	ldr	r3, [pc, #100]	; (8003898 <HAL_CAN_MspInit+0x98>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <HAL_CAN_MspInit+0x98>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	4a14      	ldr	r2, [pc, #80]	; (8003898 <HAL_CAN_MspInit+0x98>)
 8003848:	f043 0302 	orr.w	r3, r3, #2
 800384c:	6313      	str	r3, [r2, #48]	; 0x30
 800384e:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_CAN_MspInit+0x98>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800385a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800385e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003860:	2302      	movs	r3, #2
 8003862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003868:	2303      	movs	r3, #3
 800386a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800386c:	2309      	movs	r3, #9
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	4619      	mov	r1, r3
 8003876:	4809      	ldr	r0, [pc, #36]	; (800389c <HAL_CAN_MspInit+0x9c>)
 8003878:	f002 fbea 	bl	8006050 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 800387c:	2200      	movs	r2, #0
 800387e:	2102      	movs	r1, #2
 8003880:	2014      	movs	r0, #20
 8003882:	f002 f814 	bl	80058ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003886:	2014      	movs	r0, #20
 8003888:	f002 f82d 	bl	80058e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800388c:	bf00      	nop
 800388e:	3728      	adds	r7, #40	; 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40006400 	.word	0x40006400
 8003898:	40023800 	.word	0x40023800
 800389c:	40020400 	.word	0x40020400

080038a0 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <HAL_CAN_MspDeInit+0x38>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d10d      	bne.n	80038ce <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_CAN_MspDeInit+0x3c>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <HAL_CAN_MspDeInit+0x3c>)
 80038b8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80038be:	f44f 7140 	mov.w	r1, #768	; 0x300
 80038c2:	4807      	ldr	r0, [pc, #28]	; (80038e0 <HAL_CAN_MspDeInit+0x40>)
 80038c4:	f002 fd58 	bl	8006378 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 80038c8:	2014      	movs	r0, #20
 80038ca:	f002 f81a 	bl	8005902 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40006400 	.word	0x40006400
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40020400 	.word	0x40020400

080038e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0b      	ldr	r2, [pc, #44]	; (8003920 <HAL_CRC_MspInit+0x3c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d10d      	bne.n	8003912 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_CRC_MspInit+0x40>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4a09      	ldr	r2, [pc, #36]	; (8003924 <HAL_CRC_MspInit+0x40>)
 8003900:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003904:	6313      	str	r3, [r2, #48]	; 0x30
 8003906:	4b07      	ldr	r3, [pc, #28]	; (8003924 <HAL_CRC_MspInit+0x40>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40023000 	.word	0x40023000
 8003924:	40023800 	.word	0x40023800

08003928 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a19      	ldr	r2, [pc, #100]	; (80039ac <HAL_I2C_MspInit+0x84>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d12b      	bne.n	80039a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <HAL_I2C_MspInit+0x88>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <HAL_I2C_MspInit+0x88>)
 8003954:	f043 0302 	orr.w	r3, r3, #2
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <HAL_I2C_MspInit+0x88>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003966:	23c0      	movs	r3, #192	; 0xc0
 8003968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800396a:	2312      	movs	r3, #18
 800396c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003972:	2303      	movs	r3, #3
 8003974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003976:	2304      	movs	r3, #4
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397a:	f107 0314 	add.w	r3, r7, #20
 800397e:	4619      	mov	r1, r3
 8003980:	480c      	ldr	r0, [pc, #48]	; (80039b4 <HAL_I2C_MspInit+0x8c>)
 8003982:	f002 fb65 	bl	8006050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_I2C_MspInit+0x88>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <HAL_I2C_MspInit+0x88>)
 8003990:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_I2C_MspInit+0x88>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80039a2:	bf00      	nop
 80039a4:	3728      	adds	r7, #40	; 0x28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40005400 	.word	0x40005400
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40020400 	.word	0x40020400

080039b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a98      	ldr	r2, [pc, #608]	; (8003c28 <HAL_TIM_Base_MspInit+0x270>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d152      	bne.n	8003a70 <HAL_TIM_Base_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	4b97      	ldr	r3, [pc, #604]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	4a96      	ldr	r2, [pc, #600]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6453      	str	r3, [r2, #68]	; 0x44
 80039da:	4b94      	ldr	r3, [pc, #592]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	61fb      	str	r3, [r7, #28]
 80039e4:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 80039e6:	4b92      	ldr	r3, [pc, #584]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 80039e8:	4a92      	ldr	r2, [pc, #584]	; (8003c34 <HAL_TIM_Base_MspInit+0x27c>)
 80039ea:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 80039ec:	4b90      	ldr	r3, [pc, #576]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 80039ee:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80039f2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039f4:	4b8e      	ldr	r3, [pc, #568]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80039fa:	4b8d      	ldr	r3, [pc, #564]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8003a00:	4b8b      	ldr	r3, [pc, #556]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 8003a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a06:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a08:	4b89      	ldr	r3, [pc, #548]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 8003a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a0e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a10:	4b87      	ldr	r3, [pc, #540]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 8003a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a16:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8003a18:	4b85      	ldr	r3, [pc, #532]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8003a1e:	4b84      	ldr	r3, [pc, #528]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a24:	4b82      	ldr	r3, [pc, #520]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8003a2a:	4881      	ldr	r0, [pc, #516]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 8003a2c:	f001 ffa0 	bl	8005970 <HAL_DMA_Init>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8003a36:	f7fd fbfd 	bl	8001234 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a7c      	ldr	r2, [pc, #496]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a40:	4a7b      	ldr	r2, [pc, #492]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a79      	ldr	r2, [pc, #484]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
 8003a4c:	4a78      	ldr	r2, [pc, #480]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a76      	ldr	r2, [pc, #472]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 8003a56:	635a      	str	r2, [r3, #52]	; 0x34
 8003a58:	4a75      	ldr	r2, [pc, #468]	; (8003c30 <HAL_TIM_Base_MspInit+0x278>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2100      	movs	r1, #0
 8003a62:	2019      	movs	r0, #25
 8003a64:	f001 ff23 	bl	80058ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003a68:	2019      	movs	r0, #25
 8003a6a:	f001 ff3c 	bl	80058e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003a6e:	e13c      	b.n	8003cea <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a78:	d14c      	bne.n	8003b14 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	4b6b      	ldr	r3, [pc, #428]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	4a6a      	ldr	r2, [pc, #424]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8a:	4b68      	ldr	r3, [pc, #416]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8003a96:	4b68      	ldr	r3, [pc, #416]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003a98:	4a68      	ldr	r2, [pc, #416]	; (8003c3c <HAL_TIM_Base_MspInit+0x284>)
 8003a9a:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8003a9c:	4b66      	ldr	r3, [pc, #408]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003a9e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003aa2:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aa4:	4b64      	ldr	r3, [pc, #400]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aaa:	4b63      	ldr	r3, [pc, #396]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003ab0:	4b61      	ldr	r3, [pc, #388]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab6:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ab8:	4b5f      	ldr	r3, [pc, #380]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003abe:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ac0:	4b5d      	ldr	r3, [pc, #372]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ac6:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 8003ac8:	4b5b      	ldr	r3, [pc, #364]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003ace:	4b5a      	ldr	r3, [pc, #360]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ad4:	4b58      	ldr	r3, [pc, #352]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8003ada:	4857      	ldr	r0, [pc, #348]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003adc:	f001 ff48 	bl	8005970 <HAL_DMA_Init>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_TIM_Base_MspInit+0x132>
      Error_Handler();
 8003ae6:	f7fd fba5 	bl	8001234 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003aee:	621a      	str	r2, [r3, #32]
 8003af0:	4a51      	ldr	r2, [pc, #324]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a4f      	ldr	r2, [pc, #316]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003afa:	62da      	str	r2, [r3, #44]	; 0x2c
 8003afc:	4a4e      	ldr	r2, [pc, #312]	; (8003c38 <HAL_TIM_Base_MspInit+0x280>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2100      	movs	r1, #0
 8003b06:	201c      	movs	r0, #28
 8003b08:	f001 fed1 	bl	80058ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b0c:	201c      	movs	r0, #28
 8003b0e:	f001 feea 	bl	80058e6 <HAL_NVIC_EnableIRQ>
}
 8003b12:	e0ea      	b.n	8003cea <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM3)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a49      	ldr	r2, [pc, #292]	; (8003c40 <HAL_TIM_Base_MspInit+0x288>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d14c      	bne.n	8003bb8 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	4b42      	ldr	r3, [pc, #264]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a41      	ldr	r2, [pc, #260]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 8003b28:	f043 0302 	orr.w	r3, r3, #2
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8003b3a:	4b42      	ldr	r3, [pc, #264]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b3c:	4a42      	ldr	r2, [pc, #264]	; (8003c48 <HAL_TIM_Base_MspInit+0x290>)
 8003b3e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8003b40:	4b40      	ldr	r3, [pc, #256]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b42:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003b46:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b48:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b4e:	4b3d      	ldr	r3, [pc, #244]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8003b54:	4b3b      	ldr	r3, [pc, #236]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b5a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b5c:	4b39      	ldr	r3, [pc, #228]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b62:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b64:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b6a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8003b6c:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003b72:	4b34      	ldr	r3, [pc, #208]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b78:	4b32      	ldr	r3, [pc, #200]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8003b7e:	4831      	ldr	r0, [pc, #196]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b80:	f001 fef6 	bl	8005970 <HAL_DMA_Init>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_TIM_Base_MspInit+0x1d6>
      Error_Handler();
 8003b8a:	f7fd fb53 	bl	8001234 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a2c      	ldr	r2, [pc, #176]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
 8003b94:	4a2b      	ldr	r2, [pc, #172]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a29      	ldr	r2, [pc, #164]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003b9e:	621a      	str	r2, [r3, #32]
 8003ba0:	4a28      	ldr	r2, [pc, #160]	; (8003c44 <HAL_TIM_Base_MspInit+0x28c>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2100      	movs	r1, #0
 8003baa:	201d      	movs	r0, #29
 8003bac:	f001 fe7f 	bl	80058ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003bb0:	201d      	movs	r0, #29
 8003bb2:	f001 fe98 	bl	80058e6 <HAL_NVIC_EnableIRQ>
}
 8003bb6:	e098      	b.n	8003cea <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM6)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a23      	ldr	r2, [pc, #140]	; (8003c4c <HAL_TIM_Base_MspInit+0x294>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d116      	bne.n	8003bf0 <HAL_TIM_Base_MspInit+0x238>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 8003bcc:	f043 0310 	orr.w	r3, r3, #16
 8003bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd2:	4b16      	ldr	r3, [pc, #88]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003bde:	2200      	movs	r2, #0
 8003be0:	2100      	movs	r1, #0
 8003be2:	2036      	movs	r0, #54	; 0x36
 8003be4:	f001 fe63 	bl	80058ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003be8:	2036      	movs	r0, #54	; 0x36
 8003bea:	f001 fe7c 	bl	80058e6 <HAL_NVIC_EnableIRQ>
}
 8003bee:	e07c      	b.n	8003cea <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM7)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <HAL_TIM_Base_MspInit+0x298>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d12c      	bne.n	8003c54 <HAL_TIM_Base_MspInit+0x29c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	4a0a      	ldr	r2, [pc, #40]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 8003c04:	f043 0320 	orr.w	r3, r3, #32
 8003c08:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <HAL_TIM_Base_MspInit+0x274>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003c16:	2200      	movs	r2, #0
 8003c18:	2100      	movs	r1, #0
 8003c1a:	2037      	movs	r0, #55	; 0x37
 8003c1c:	f001 fe47 	bl	80058ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003c20:	2037      	movs	r0, #55	; 0x37
 8003c22:	f001 fe60 	bl	80058e6 <HAL_NVIC_EnableIRQ>
}
 8003c26:	e060      	b.n	8003cea <HAL_TIM_Base_MspInit+0x332>
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	20000500 	.word	0x20000500
 8003c34:	40026470 	.word	0x40026470
 8003c38:	20000560 	.word	0x20000560
 8003c3c:	40026028 	.word	0x40026028
 8003c40:	40000400 	.word	0x40000400
 8003c44:	200005c0 	.word	0x200005c0
 8003c48:	40026040 	.word	0x40026040
 8003c4c:	40001000 	.word	0x40001000
 8003c50:	40001400 	.word	0x40001400
  else if(htim_base->Instance==TIM8)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <HAL_TIM_Base_MspInit+0x33c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d145      	bne.n	8003cea <HAL_TIM_Base_MspInit+0x332>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <HAL_TIM_Base_MspInit+0x340>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	4a24      	ldr	r2, [pc, #144]	; (8003cf8 <HAL_TIM_Base_MspInit+0x340>)
 8003c68:	f043 0302 	orr.w	r3, r3, #2
 8003c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6e:	4b22      	ldr	r3, [pc, #136]	; (8003cf8 <HAL_TIM_Base_MspInit+0x340>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch2.Instance = DMA2_Stream3;
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_TIM_Base_MspInit+0x344>)
 8003c7c:	4a20      	ldr	r2, [pc, #128]	; (8003d00 <HAL_TIM_Base_MspInit+0x348>)
 8003c7e:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Channel = DMA_CHANNEL_7;
 8003c80:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <HAL_TIM_Base_MspInit+0x344>)
 8003c82:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003c86:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c88:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <HAL_TIM_Base_MspInit+0x344>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <HAL_TIM_Base_MspInit+0x344>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_TIM_Base_MspInit+0x344>)
 8003c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c9a:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c9c:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <HAL_TIM_Base_MspInit+0x344>)
 8003c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ca2:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ca4:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <HAL_TIM_Base_MspInit+0x344>)
 8003ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003caa:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8003cac:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <HAL_TIM_Base_MspInit+0x344>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003cb2:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_TIM_Base_MspInit+0x344>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cb8:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <HAL_TIM_Base_MspInit+0x344>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8003cbe:	480f      	ldr	r0, [pc, #60]	; (8003cfc <HAL_TIM_Base_MspInit+0x344>)
 8003cc0:	f001 fe56 	bl	8005970 <HAL_DMA_Init>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_TIM_Base_MspInit+0x316>
      Error_Handler();
 8003cca:	f7fd fab3 	bl	8001234 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <HAL_TIM_Base_MspInit+0x344>)
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28
 8003cd4:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <HAL_TIM_Base_MspInit+0x344>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2100      	movs	r1, #0
 8003cde:	202c      	movs	r0, #44	; 0x2c
 8003ce0:	f001 fde5 	bl	80058ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003ce4:	202c      	movs	r0, #44	; 0x2c
 8003ce6:	f001 fdfe 	bl	80058e6 <HAL_NVIC_EnableIRQ>
}
 8003cea:	bf00      	nop
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40010400 	.word	0x40010400
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	20000620 	.word	0x20000620
 8003d00:	40026458 	.word	0x40026458

08003d04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08c      	sub	sp, #48	; 0x30
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d0c:	f107 031c 	add.w	r3, r7, #28
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a49      	ldr	r2, [pc, #292]	; (8003e48 <HAL_TIM_MspPostInit+0x144>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d11f      	bne.n	8003d66 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	4b48      	ldr	r3, [pc, #288]	; (8003e4c <HAL_TIM_MspPostInit+0x148>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	4a47      	ldr	r2, [pc, #284]	; (8003e4c <HAL_TIM_MspPostInit+0x148>)
 8003d30:	f043 0310 	orr.w	r3, r3, #16
 8003d34:	6313      	str	r3, [r2, #48]	; 0x30
 8003d36:	4b45      	ldr	r3, [pc, #276]	; (8003e4c <HAL_TIM_MspPostInit+0x148>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 8003d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d48:	2312      	movs	r3, #18
 8003d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d50:	2300      	movs	r3, #0
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d54:	2301      	movs	r3, #1
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 8003d58:	f107 031c 	add.w	r3, r7, #28
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	483c      	ldr	r0, [pc, #240]	; (8003e50 <HAL_TIM_MspPostInit+0x14c>)
 8003d60:	f002 f976 	bl	8006050 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003d64:	e06b      	b.n	8003e3e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6e:	d11f      	bne.n	8003db0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	4b35      	ldr	r3, [pc, #212]	; (8003e4c <HAL_TIM_MspPostInit+0x148>)
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	4a34      	ldr	r2, [pc, #208]	; (8003e4c <HAL_TIM_MspPostInit+0x148>)
 8003d7a:	f043 0302 	orr.w	r3, r3, #2
 8003d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d80:	4b32      	ldr	r3, [pc, #200]	; (8003e4c <HAL_TIM_MspPostInit+0x148>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 8003d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d92:	2312      	movs	r3, #18
 8003d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 8003da2:	f107 031c 	add.w	r3, r7, #28
 8003da6:	4619      	mov	r1, r3
 8003da8:	482a      	ldr	r0, [pc, #168]	; (8003e54 <HAL_TIM_MspPostInit+0x150>)
 8003daa:	f002 f951 	bl	8006050 <HAL_GPIO_Init>
}
 8003dae:	e046      	b.n	8003e3e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <HAL_TIM_MspPostInit+0x154>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d11e      	bne.n	8003df8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <HAL_TIM_MspPostInit+0x148>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <HAL_TIM_MspPostInit+0x148>)
 8003dc4:	f043 0302 	orr.w	r3, r3, #2
 8003dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dca:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <HAL_TIM_MspPostInit+0x148>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dda:	2312      	movs	r3, #18
 8003ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2300      	movs	r3, #0
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003de6:	2302      	movs	r3, #2
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 8003dea:	f107 031c 	add.w	r3, r7, #28
 8003dee:	4619      	mov	r1, r3
 8003df0:	4818      	ldr	r0, [pc, #96]	; (8003e54 <HAL_TIM_MspPostInit+0x150>)
 8003df2:	f002 f92d 	bl	8006050 <HAL_GPIO_Init>
}
 8003df6:	e022      	b.n	8003e3e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <HAL_TIM_MspPostInit+0x158>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d11d      	bne.n	8003e3e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <HAL_TIM_MspPostInit+0x148>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	4a10      	ldr	r2, [pc, #64]	; (8003e4c <HAL_TIM_MspPostInit+0x148>)
 8003e0c:	f043 0302 	orr.w	r3, r3, #2
 8003e10:	6313      	str	r3, [r2, #48]	; 0x30
 8003e12:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <HAL_TIM_MspPostInit+0x148>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e22:	2312      	movs	r3, #18
 8003e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 8003e32:	f107 031c 	add.w	r3, r7, #28
 8003e36:	4619      	mov	r1, r3
 8003e38:	4806      	ldr	r0, [pc, #24]	; (8003e54 <HAL_TIM_MspPostInit+0x150>)
 8003e3a:	f002 f909 	bl	8006050 <HAL_GPIO_Init>
}
 8003e3e:	bf00      	nop
 8003e40:	3730      	adds	r7, #48	; 0x30
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40020400 	.word	0x40020400
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40010400 	.word	0x40010400

08003e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e64:	e7fe      	b.n	8003e64 <NMI_Handler+0x4>

08003e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e66:	b480      	push	{r7}
 8003e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e6a:	e7fe      	b.n	8003e6a <HardFault_Handler+0x4>

08003e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e70:	e7fe      	b.n	8003e70 <MemManage_Handler+0x4>

08003e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e76:	e7fe      	b.n	8003e76 <BusFault_Handler+0x4>

08003e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e7c:	e7fe      	b.n	8003e7c <UsageFault_Handler+0x4>

08003e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eac:	f000 f9a8 	bl	8004200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eb0:	bf00      	nop
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT1_Pin);
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f002 fb9d 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT2_Pin);
 8003ec6:	2002      	movs	r0, #2
 8003ec8:	f002 fb96 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003ecc:	bf00      	nop
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT3_Pin);
 8003ed4:	2004      	movs	r0, #4
 8003ed6:	f002 fb8f 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}

08003ede <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT4_Pin);
 8003ee2:	2008      	movs	r0, #8
 8003ee4:	f002 fb88 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}

08003eec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT5_Pin);
 8003ef0:	2010      	movs	r0, #16
 8003ef2:	f002 fb81 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8003f00:	4802      	ldr	r0, [pc, #8]	; (8003f0c <DMA1_Stream1_IRQHandler+0x10>)
 8003f02:	f001 fe3b 	bl	8005b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000560 	.word	0x20000560

08003f10 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8003f14:	4802      	ldr	r0, [pc, #8]	; (8003f20 <DMA1_Stream2_IRQHandler+0x10>)
 8003f16:	f001 fe31 	bl	8005b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	200005c0 	.word	0x200005c0

08003f24 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003f28:	4802      	ldr	r0, [pc, #8]	; (8003f34 <CAN1_RX0_IRQHandler+0x10>)
 8003f2a:	f001 f992 	bl	8005252 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	200002cc 	.word	0x200002cc

08003f38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT6_Pin);
 8003f3c:	2020      	movs	r0, #32
 8003f3e:	f002 fb5b 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT7_Pin);
 8003f42:	2040      	movs	r0, #64	; 0x40
 8003f44:	f002 fb58 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT8_Pin);
 8003f48:	2080      	movs	r0, #128	; 0x80
 8003f4a:	f002 fb55 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT9_Pin);
 8003f4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f52:	f002 fb51 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT10_Pin);
 8003f56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003f5a:	f002 fb4d 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f68:	4802      	ldr	r0, [pc, #8]	; (8003f74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003f6a:	f006 f9b7 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000350 	.word	0x20000350

08003f78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f7c:	4802      	ldr	r0, [pc, #8]	; (8003f88 <TIM2_IRQHandler+0x10>)
 8003f7e:	f006 f9ad 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000398 	.word	0x20000398

08003f8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f90:	4802      	ldr	r0, [pc, #8]	; (8003f9c <TIM3_IRQHandler+0x10>)
 8003f92:	f006 f9a3 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200003e0 	.word	0x200003e0

08003fa0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT11_Pin);
 8003fa4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003fa8:	f002 fb26 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT12_Pin);
 8003fac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003fb0:	f002 fb22 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT13_Pin);
 8003fb4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003fb8:	f002 fb1e 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT14_Pin);
 8003fbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003fc0:	f002 fb1a 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT15_Pin);
 8003fc4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003fc8:	f002 fb16 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT16_Pin);
 8003fcc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003fd0:	f002 fb12 	bl	80065f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fd4:	bf00      	nop
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003fdc:	4802      	ldr	r0, [pc, #8]	; (8003fe8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003fde:	f006 f97d 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	200004b8 	.word	0x200004b8

08003fec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ff0:	4802      	ldr	r0, [pc, #8]	; (8003ffc <TIM6_DAC_IRQHandler+0x10>)
 8003ff2:	f006 f973 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ff6:	bf00      	nop
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000428 	.word	0x20000428

08004000 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004004:	4802      	ldr	r0, [pc, #8]	; (8004010 <TIM7_IRQHandler+0x10>)
 8004006:	f006 f969 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000470 	.word	0x20000470

08004014 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004018:	4802      	ldr	r0, [pc, #8]	; (8004024 <DMA2_Stream0_IRQHandler+0x10>)
 800401a:	f001 fdaf 	bl	8005b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800401e:	bf00      	nop
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	2000020c 	.word	0x2000020c

08004028 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800402c:	4802      	ldr	r0, [pc, #8]	; (8004038 <DMA2_Stream2_IRQHandler+0x10>)
 800402e:	f001 fda5 	bl	8005b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	2000026c 	.word	0x2000026c

0800403c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8004040:	4802      	ldr	r0, [pc, #8]	; (800404c <DMA2_Stream3_IRQHandler+0x10>)
 8004042:	f001 fd9b 	bl	8005b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000620 	.word	0x20000620

08004050 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8004054:	4802      	ldr	r0, [pc, #8]	; (8004060 <DMA2_Stream4_IRQHandler+0x10>)
 8004056:	f001 fd91 	bl	8005b7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000500 	.word	0x20000500

08004064 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004068:	4802      	ldr	r0, [pc, #8]	; (8004074 <OTG_FS_IRQHandler+0x10>)
 800406a:	f003 fa22 	bl	80074b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20001e74 	.word	0x20001e74

08004078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004080:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <_sbrk+0x5c>)
 8004082:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <_sbrk+0x60>)
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800408c:	4b13      	ldr	r3, [pc, #76]	; (80040dc <_sbrk+0x64>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <_sbrk+0x64>)
 8004096:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <_sbrk+0x68>)
 8004098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800409a:	4b10      	ldr	r3, [pc, #64]	; (80040dc <_sbrk+0x64>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d207      	bcs.n	80040b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040a8:	f00b fd26 	bl	800faf8 <__errno>
 80040ac:	4603      	mov	r3, r0
 80040ae:	220c      	movs	r2, #12
 80040b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	e009      	b.n	80040cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040b8:	4b08      	ldr	r3, [pc, #32]	; (80040dc <_sbrk+0x64>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040be:	4b07      	ldr	r3, [pc, #28]	; (80040dc <_sbrk+0x64>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	4a05      	ldr	r2, [pc, #20]	; (80040dc <_sbrk+0x64>)
 80040c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040ca:	68fb      	ldr	r3, [r7, #12]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20020000 	.word	0x20020000
 80040d8:	00004000 	.word	0x00004000
 80040dc:	2000098c 	.word	0x2000098c
 80040e0:	200025b0 	.word	0x200025b0

080040e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040e8:	4b06      	ldr	r3, [pc, #24]	; (8004104 <SystemInit+0x20>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	4a05      	ldr	r2, [pc, #20]	; (8004104 <SystemInit+0x20>)
 80040f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004140 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800410c:	480d      	ldr	r0, [pc, #52]	; (8004144 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800410e:	490e      	ldr	r1, [pc, #56]	; (8004148 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004110:	4a0e      	ldr	r2, [pc, #56]	; (800414c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004114:	e002      	b.n	800411c <LoopCopyDataInit>

08004116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800411a:	3304      	adds	r3, #4

0800411c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800411c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800411e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004120:	d3f9      	bcc.n	8004116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004122:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004124:	4c0b      	ldr	r4, [pc, #44]	; (8004154 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004128:	e001      	b.n	800412e <LoopFillZerobss>

0800412a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800412a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800412c:	3204      	adds	r2, #4

0800412e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800412e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004130:	d3fb      	bcc.n	800412a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004132:	f7ff ffd7 	bl	80040e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004136:	f00b fce5 	bl	800fb04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800413a:	f7fc f9e5 	bl	8000508 <main>
  bx  lr    
 800413e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004148:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 800414c:	0800fe08 	.word	0x0800fe08
  ldr r2, =_sbss
 8004150:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8004154:	200025b0 	.word	0x200025b0

08004158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004158:	e7fe      	b.n	8004158 <ADC_IRQHandler>
	...

0800415c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004160:	4b0e      	ldr	r3, [pc, #56]	; (800419c <HAL_Init+0x40>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a0d      	ldr	r2, [pc, #52]	; (800419c <HAL_Init+0x40>)
 8004166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800416a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <HAL_Init+0x40>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a0a      	ldr	r2, [pc, #40]	; (800419c <HAL_Init+0x40>)
 8004172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004178:	4b08      	ldr	r3, [pc, #32]	; (800419c <HAL_Init+0x40>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a07      	ldr	r2, [pc, #28]	; (800419c <HAL_Init+0x40>)
 800417e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004184:	2003      	movs	r0, #3
 8004186:	f001 fb87 	bl	8005898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800418a:	200f      	movs	r0, #15
 800418c:	f000 f808 	bl	80041a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004190:	f7ff fa16 	bl	80035c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40023c00 	.word	0x40023c00

080041a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041a8:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <HAL_InitTick+0x54>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_InitTick+0x58>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	4619      	mov	r1, r3
 80041b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 fbad 	bl	800591e <HAL_SYSTICK_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e00e      	b.n	80041ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b0f      	cmp	r3, #15
 80041d2:	d80a      	bhi.n	80041ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041d4:	2200      	movs	r2, #0
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	f001 fb67 	bl	80058ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041e0:	4a06      	ldr	r2, [pc, #24]	; (80041fc <HAL_InitTick+0x5c>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e000      	b.n	80041ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000000 	.word	0x20000000
 80041f8:	20000008 	.word	0x20000008
 80041fc:	20000004 	.word	0x20000004

08004200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_IncTick+0x20>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_IncTick+0x24>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4413      	add	r3, r2
 8004210:	4a04      	ldr	r2, [pc, #16]	; (8004224 <HAL_IncTick+0x24>)
 8004212:	6013      	str	r3, [r2, #0]
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000008 	.word	0x20000008
 8004224:	20000990 	.word	0x20000990

08004228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return uwTick;
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HAL_GetTick+0x14>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000990 	.word	0x20000990

08004240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004248:	f7ff ffee 	bl	8004228 <HAL_GetTick>
 800424c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d005      	beq.n	8004266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <HAL_Delay+0x44>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004266:	bf00      	nop
 8004268:	f7ff ffde 	bl	8004228 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	429a      	cmp	r2, r3
 8004276:	d8f7      	bhi.n	8004268 <HAL_Delay+0x28>
  {
  }
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000008 	.word	0x20000008

08004288 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e033      	b.n	8004306 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff f9b2 	bl	8003610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d118      	bne.n	80042f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042ce:	f023 0302 	bic.w	r3, r3, #2
 80042d2:	f043 0202 	orr.w	r2, r3, #2
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fa78 	bl	80047d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	f043 0201 	orr.w	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
 80042f6:	e001      	b.n	80042fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004304:	7bfb      	ldrb	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_ADC_Start_DMA+0x1e>
 800432a:	2302      	movs	r3, #2
 800432c:	e0e9      	b.n	8004502 <HAL_ADC_Start_DMA+0x1f2>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b01      	cmp	r3, #1
 8004342:	d018      	beq.n	8004376 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004354:	4b6d      	ldr	r3, [pc, #436]	; (800450c <HAL_ADC_Start_DMA+0x1fc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6d      	ldr	r2, [pc, #436]	; (8004510 <HAL_ADC_Start_DMA+0x200>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	0c9a      	lsrs	r2, r3, #18
 8004360:	4613      	mov	r3, r2
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	4413      	add	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004368:	e002      	b.n	8004370 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3b01      	subs	r3, #1
 800436e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f9      	bne.n	800436a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004384:	d107      	bne.n	8004396 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004394:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	f040 80a1 	bne.w	80044e8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e4:	d106      	bne.n	80043f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	f023 0206 	bic.w	r2, r3, #6
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	645a      	str	r2, [r3, #68]	; 0x44
 80043f2:	e002      	b.n	80043fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004402:	4b44      	ldr	r3, [pc, #272]	; (8004514 <HAL_ADC_Start_DMA+0x204>)
 8004404:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	4a43      	ldr	r2, [pc, #268]	; (8004518 <HAL_ADC_Start_DMA+0x208>)
 800440c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	4a42      	ldr	r2, [pc, #264]	; (800451c <HAL_ADC_Start_DMA+0x20c>)
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441a:	4a41      	ldr	r2, [pc, #260]	; (8004520 <HAL_ADC_Start_DMA+0x210>)
 800441c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004426:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004436:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004446:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	334c      	adds	r3, #76	; 0x4c
 8004452:	4619      	mov	r1, r3
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f001 fb38 	bl	8005acc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2b00      	cmp	r3, #0
 8004466:	d12a      	bne.n	80044be <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2d      	ldr	r2, [pc, #180]	; (8004524 <HAL_ADC_Start_DMA+0x214>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d015      	beq.n	800449e <HAL_ADC_Start_DMA+0x18e>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2c      	ldr	r2, [pc, #176]	; (8004528 <HAL_ADC_Start_DMA+0x218>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d105      	bne.n	8004488 <HAL_ADC_Start_DMA+0x178>
 800447c:	4b25      	ldr	r3, [pc, #148]	; (8004514 <HAL_ADC_Start_DMA+0x204>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a27      	ldr	r2, [pc, #156]	; (800452c <HAL_ADC_Start_DMA+0x21c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d136      	bne.n	8004500 <HAL_ADC_Start_DMA+0x1f0>
 8004492:	4b20      	ldr	r3, [pc, #128]	; (8004514 <HAL_ADC_Start_DMA+0x204>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b00      	cmp	r3, #0
 800449c:	d130      	bne.n	8004500 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d129      	bne.n	8004500 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044ba:	609a      	str	r2, [r3, #8]
 80044bc:	e020      	b.n	8004500 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a18      	ldr	r2, [pc, #96]	; (8004524 <HAL_ADC_Start_DMA+0x214>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d11b      	bne.n	8004500 <HAL_ADC_Start_DMA+0x1f0>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d114      	bne.n	8004500 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044e4:	609a      	str	r2, [r3, #8]
 80044e6:	e00b      	b.n	8004500 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f043 0210 	orr.w	r2, r3, #16
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	f043 0201 	orr.w	r2, r3, #1
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000000 	.word	0x20000000
 8004510:	431bde83 	.word	0x431bde83
 8004514:	40012300 	.word	0x40012300
 8004518:	080049c9 	.word	0x080049c9
 800451c:	08004a83 	.word	0x08004a83
 8004520:	08004a9f 	.word	0x08004a9f
 8004524:	40012000 	.word	0x40012000
 8004528:	40012100 	.word	0x40012100
 800452c:	40012200 	.word	0x40012200

08004530 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x1c>
 8004584:	2302      	movs	r3, #2
 8004586:	e113      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x244>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b09      	cmp	r3, #9
 8004596:	d925      	bls.n	80045e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68d9      	ldr	r1, [r3, #12]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	4613      	mov	r3, r2
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4413      	add	r3, r2
 80045ac:	3b1e      	subs	r3, #30
 80045ae:	2207      	movs	r2, #7
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43da      	mvns	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	400a      	ands	r2, r1
 80045bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68d9      	ldr	r1, [r3, #12]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	4618      	mov	r0, r3
 80045d0:	4603      	mov	r3, r0
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4403      	add	r3, r0
 80045d6:	3b1e      	subs	r3, #30
 80045d8:	409a      	lsls	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	60da      	str	r2, [r3, #12]
 80045e2:	e022      	b.n	800462a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6919      	ldr	r1, [r3, #16]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	4613      	mov	r3, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	4413      	add	r3, r2
 80045f8:	2207      	movs	r2, #7
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43da      	mvns	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	400a      	ands	r2, r1
 8004606:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6919      	ldr	r1, [r3, #16]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	4618      	mov	r0, r3
 800461a:	4603      	mov	r3, r0
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	4403      	add	r3, r0
 8004620:	409a      	lsls	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b06      	cmp	r3, #6
 8004630:	d824      	bhi.n	800467c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	3b05      	subs	r3, #5
 8004644:	221f      	movs	r2, #31
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43da      	mvns	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	400a      	ands	r2, r1
 8004652:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	4618      	mov	r0, r3
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	3b05      	subs	r3, #5
 800466e:	fa00 f203 	lsl.w	r2, r0, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	635a      	str	r2, [r3, #52]	; 0x34
 800467a:	e04c      	b.n	8004716 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b0c      	cmp	r3, #12
 8004682:	d824      	bhi.n	80046ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	3b23      	subs	r3, #35	; 0x23
 8004696:	221f      	movs	r2, #31
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43da      	mvns	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	400a      	ands	r2, r1
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	4618      	mov	r0, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	3b23      	subs	r3, #35	; 0x23
 80046c0:	fa00 f203 	lsl.w	r2, r0, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
 80046cc:	e023      	b.n	8004716 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	3b41      	subs	r3, #65	; 0x41
 80046e0:	221f      	movs	r2, #31
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43da      	mvns	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	400a      	ands	r2, r1
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	4618      	mov	r0, r3
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	3b41      	subs	r3, #65	; 0x41
 800470a:	fa00 f203 	lsl.w	r2, r0, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004716:	4b29      	ldr	r3, [pc, #164]	; (80047bc <HAL_ADC_ConfigChannel+0x250>)
 8004718:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a28      	ldr	r2, [pc, #160]	; (80047c0 <HAL_ADC_ConfigChannel+0x254>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d10f      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x1d8>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b12      	cmp	r3, #18
 800472a:	d10b      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1d      	ldr	r2, [pc, #116]	; (80047c0 <HAL_ADC_ConfigChannel+0x254>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d12b      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x23a>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1c      	ldr	r2, [pc, #112]	; (80047c4 <HAL_ADC_ConfigChannel+0x258>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d003      	beq.n	8004760 <HAL_ADC_ConfigChannel+0x1f4>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b11      	cmp	r3, #17
 800475e:	d122      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a11      	ldr	r2, [pc, #68]	; (80047c4 <HAL_ADC_ConfigChannel+0x258>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d111      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004782:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_ADC_ConfigChannel+0x25c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a11      	ldr	r2, [pc, #68]	; (80047cc <HAL_ADC_ConfigChannel+0x260>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	0c9a      	lsrs	r2, r3, #18
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004798:	e002      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	3b01      	subs	r3, #1
 800479e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f9      	bne.n	800479a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40012300 	.word	0x40012300
 80047c0:	40012000 	.word	0x40012000
 80047c4:	10000012 	.word	0x10000012
 80047c8:	20000000 	.word	0x20000000
 80047cc:	431bde83 	.word	0x431bde83

080047d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047d8:	4b79      	ldr	r3, [pc, #484]	; (80049c0 <ADC_Init+0x1f0>)
 80047da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004804:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	021a      	lsls	r2, r3, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004828:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6859      	ldr	r1, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6899      	ldr	r1, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <ADC_Init+0x1f4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d022      	beq.n	80048ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004876:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6899      	ldr	r1, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6899      	ldr	r1, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	e00f      	b.n	80048ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0202 	bic.w	r2, r2, #2
 80048dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6899      	ldr	r1, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	7e1b      	ldrb	r3, [r3, #24]
 80048e8:	005a      	lsls	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01b      	beq.n	8004934 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800490a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800491a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6859      	ldr	r1, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	3b01      	subs	r3, #1
 8004928:	035a      	lsls	r2, r3, #13
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	e007      	b.n	8004944 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004942:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	3b01      	subs	r3, #1
 8004960:	051a      	lsls	r2, r3, #20
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6899      	ldr	r1, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004986:	025a      	lsls	r2, r3, #9
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6899      	ldr	r1, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	029a      	lsls	r2, r3, #10
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40012300 	.word	0x40012300
 80049c4:	0f000001 	.word	0x0f000001

080049c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d13c      	bne.n	8004a5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d12b      	bne.n	8004a54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d127      	bne.n	8004a54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d006      	beq.n	8004a20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d119      	bne.n	8004a54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0220 	bic.w	r2, r2, #32
 8004a2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d105      	bne.n	8004a54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	f043 0201 	orr.w	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f7ff fd6b 	bl	8004530 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a5a:	e00e      	b.n	8004a7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff fd75 	bl	8004558 <HAL_ADC_ErrorCallback>
}
 8004a6e:	e004      	b.n	8004a7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	4798      	blx	r3
}
 8004a7a:	bf00      	nop
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7ff fd57 	bl	8004544 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2240      	movs	r2, #64	; 0x40
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	f043 0204 	orr.w	r2, r3, #4
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff fd4a 	bl	8004558 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e0ed      	b.n	8004cba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fe fe88 	bl	8003800 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b00:	f7ff fb92 	bl	8004228 <HAL_GetTick>
 8004b04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b06:	e012      	b.n	8004b2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b08:	f7ff fb8e 	bl	8004228 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b0a      	cmp	r3, #10
 8004b14:	d90b      	bls.n	8004b2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2205      	movs	r2, #5
 8004b26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e0c5      	b.n	8004cba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0e5      	beq.n	8004b08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0202 	bic.w	r2, r2, #2
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b4c:	f7ff fb6c 	bl	8004228 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b52:	e012      	b.n	8004b7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b54:	f7ff fb68 	bl	8004228 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b0a      	cmp	r3, #10
 8004b60:	d90b      	bls.n	8004b7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2205      	movs	r2, #5
 8004b72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e09f      	b.n	8004cba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e5      	bne.n	8004b54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	7e1b      	ldrb	r3, [r3, #24]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d108      	bne.n	8004ba2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	e007      	b.n	8004bb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7e5b      	ldrb	r3, [r3, #25]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d108      	bne.n	8004bcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e007      	b.n	8004bdc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	7e9b      	ldrb	r3, [r3, #26]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d108      	bne.n	8004bf6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0220 	orr.w	r2, r2, #32
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	e007      	b.n	8004c06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0220 	bic.w	r2, r2, #32
 8004c04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	7edb      	ldrb	r3, [r3, #27]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d108      	bne.n	8004c20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0210 	bic.w	r2, r2, #16
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	e007      	b.n	8004c30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0210 	orr.w	r2, r2, #16
 8004c2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	7f1b      	ldrb	r3, [r3, #28]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d108      	bne.n	8004c4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0208 	orr.w	r2, r2, #8
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e007      	b.n	8004c5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0208 	bic.w	r2, r2, #8
 8004c58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	7f5b      	ldrb	r3, [r3, #29]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d108      	bne.n	8004c74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0204 	orr.w	r2, r2, #4
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	e007      	b.n	8004c84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0204 	bic.w	r2, r2, #4
 8004c82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	ea42 0103 	orr.w	r1, r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	1e5a      	subs	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e015      	b.n	8004d00 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f93b 	bl	8004f50 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fe fde0 	bl	80038a0 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cee:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d1e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d003      	beq.n	8004d2e <HAL_CAN_ConfigFilter+0x26>
 8004d26:	7cfb      	ldrb	r3, [r7, #19]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	f040 80be 	bne.w	8004eaa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004d2e:	4b65      	ldr	r3, [pc, #404]	; (8004ec4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004d30:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d38:	f043 0201 	orr.w	r2, r3, #1
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	2201      	movs	r2, #1
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	401a      	ands	r2, r3
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d123      	bne.n	8004dd8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004db2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	3248      	adds	r2, #72	; 0x48
 8004db8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dcc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dce:	6979      	ldr	r1, [r7, #20]
 8004dd0:	3348      	adds	r3, #72	; 0x48
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	440b      	add	r3, r1
 8004dd6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d122      	bne.n	8004e26 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	3248      	adds	r2, #72	; 0x48
 8004e06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e1c:	6979      	ldr	r1, [r7, #20]
 8004e1e:	3348      	adds	r3, #72	; 0x48
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	440b      	add	r3, r1
 8004e24:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	401a      	ands	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004e40:	e007      	b.n	8004e52 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	43db      	mvns	r3, r3
 8004e64:	401a      	ands	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004e6c:	e007      	b.n	8004e7e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d107      	bne.n	8004e96 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e9c:	f023 0201 	bic.w	r2, r3, #1
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e006      	b.n	8004eb8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40006400 	.word	0x40006400

08004ec8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d12e      	bne.n	8004f3a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ef4:	f7ff f998 	bl	8004228 <HAL_GetTick>
 8004ef8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004efa:	e012      	b.n	8004f22 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004efc:	f7ff f994 	bl	8004228 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b0a      	cmp	r3, #10
 8004f08:	d90b      	bls.n	8004f22 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2205      	movs	r2, #5
 8004f1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e012      	b.n	8004f48 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e5      	bne.n	8004efc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e006      	b.n	8004f48 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
  }
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d133      	bne.n	8004fcc <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f74:	f7ff f958 	bl	8004228 <HAL_GetTick>
 8004f78:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f7a:	e012      	b.n	8004fa2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f7c:	f7ff f954 	bl	8004228 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b0a      	cmp	r3, #10
 8004f88:	d90b      	bls.n	8004fa2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2205      	movs	r2, #5
 8004f9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e01b      	b.n	8004fda <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0e5      	beq.n	8004f7c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0202 	bic.w	r2, r2, #2
 8004fbe:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e006      	b.n	8004fda <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
  }
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b087      	sub	sp, #28
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
 8004fee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ff6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d003      	beq.n	8005006 <HAL_CAN_GetRxMessage+0x24>
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	2b02      	cmp	r3, #2
 8005002:	f040 80f3 	bne.w	80051ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10e      	bne.n	800502a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d116      	bne.n	8005048 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e0e7      	b.n	80051fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d107      	bne.n	8005048 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0d8      	b.n	80051fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	331b      	adds	r3, #27
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	4413      	add	r3, r2
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0204 	and.w	r2, r3, #4
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10c      	bne.n	8005080 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	331b      	adds	r3, #27
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	4413      	add	r3, r2
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	0d5b      	lsrs	r3, r3, #21
 8005076:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	e00b      	b.n	8005098 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	331b      	adds	r3, #27
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	4413      	add	r3, r2
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	08db      	lsrs	r3, r3, #3
 8005090:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	331b      	adds	r3, #27
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	4413      	add	r3, r2
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0202 	and.w	r2, r3, #2
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	331b      	adds	r3, #27
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	4413      	add	r3, r2
 80050ba:	3304      	adds	r3, #4
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 020f 	and.w	r2, r3, #15
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	331b      	adds	r3, #27
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	4413      	add	r3, r2
 80050d2:	3304      	adds	r3, #4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	0a1b      	lsrs	r3, r3, #8
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	331b      	adds	r3, #27
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	4413      	add	r3, r2
 80050ea:	3304      	adds	r3, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	0c1b      	lsrs	r3, r3, #16
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	4413      	add	r3, r2
 8005100:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	b2da      	uxtb	r2, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	4413      	add	r3, r2
 8005116:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	0a1a      	lsrs	r2, r3, #8
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	4413      	add	r3, r2
 8005130:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	0c1a      	lsrs	r2, r3, #16
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	3302      	adds	r3, #2
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	4413      	add	r3, r2
 800514a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	0e1a      	lsrs	r2, r3, #24
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	3303      	adds	r3, #3
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	4413      	add	r3, r2
 8005164:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	3304      	adds	r3, #4
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	4413      	add	r3, r2
 800517c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	0a1a      	lsrs	r2, r3, #8
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	3305      	adds	r3, #5
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	4413      	add	r3, r2
 8005196:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	0c1a      	lsrs	r2, r3, #16
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	3306      	adds	r3, #6
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	0e1a      	lsrs	r2, r3, #24
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	3307      	adds	r3, #7
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d108      	bne.n	80051d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0220 	orr.w	r2, r2, #32
 80051d4:	60da      	str	r2, [r3, #12]
 80051d6:	e007      	b.n	80051e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0220 	orr.w	r2, r2, #32
 80051e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e006      	b.n	80051fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
  }
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005216:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005218:	7bfb      	ldrb	r3, [r7, #15]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d002      	beq.n	8005224 <HAL_CAN_ActivateNotification+0x1e>
 800521e:	7bfb      	ldrb	r3, [r7, #15]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d109      	bne.n	8005238 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6959      	ldr	r1, [r3, #20]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	e006      	b.n	8005246 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
  }
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b08a      	sub	sp, #40	; 0x28
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800525a:	2300      	movs	r3, #0
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d07c      	beq.n	8005392 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d023      	beq.n	80052ea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2201      	movs	r2, #1
 80052a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f983 	bl	80055c0 <HAL_CAN_TxMailbox0CompleteCallback>
 80052ba:	e016      	b.n	80052ea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
 80052ce:	e00c      	b.n	80052ea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
 80052e2:	e002      	b.n	80052ea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f989 	bl	80055fc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d024      	beq.n	800533e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f963 	bl	80055d4 <HAL_CAN_TxMailbox1CompleteCallback>
 800530e:	e016      	b.n	800533e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
 8005322:	e00c      	b.n	800533e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
 8005336:	e002      	b.n	800533e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f969 	bl	8005610 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d024      	beq.n	8005392 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005350:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f943 	bl	80055e8 <HAL_CAN_TxMailbox2CompleteCallback>
 8005362:	e016      	b.n	8005392 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d004      	beq.n	8005378 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
 8005376:	e00c      	b.n	8005392 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
 800538a:	e002      	b.n	8005392 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f949 	bl	8005624 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00c      	beq.n	80053b6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2210      	movs	r2, #16
 80053b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00b      	beq.n	80053d8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d006      	beq.n	80053d8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2208      	movs	r2, #8
 80053d0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f930 	bl	8005638 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7fd fddb 	bl	8002fac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00c      	beq.n	800541a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b00      	cmp	r3, #0
 8005408:	d007      	beq.n	800541a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005410:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2210      	movs	r2, #16
 8005418:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00b      	beq.n	800543c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d006      	beq.n	800543c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2208      	movs	r2, #8
 8005434:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f912 	bl	8005660 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f8f9 	bl	800564c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00b      	beq.n	800547c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	d006      	beq.n	800547c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2210      	movs	r2, #16
 8005474:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8fc 	bl	8005674 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d006      	beq.n	800549e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2208      	movs	r2, #8
 8005496:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f8f5 	bl	8005688 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d07b      	beq.n	80055a0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d072      	beq.n	8005598 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d008      	beq.n	80054ce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	f043 0301 	orr.w	r3, r3, #1
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d008      	beq.n	80054ea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	f043 0302 	orr.w	r3, r3, #2
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	f043 0304 	orr.w	r3, r3, #4
 8005504:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800550c:	2b00      	cmp	r3, #0
 800550e:	d043      	beq.n	8005598 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005516:	2b00      	cmp	r3, #0
 8005518:	d03e      	beq.n	8005598 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005520:	2b60      	cmp	r3, #96	; 0x60
 8005522:	d02b      	beq.n	800557c <HAL_CAN_IRQHandler+0x32a>
 8005524:	2b60      	cmp	r3, #96	; 0x60
 8005526:	d82e      	bhi.n	8005586 <HAL_CAN_IRQHandler+0x334>
 8005528:	2b50      	cmp	r3, #80	; 0x50
 800552a:	d022      	beq.n	8005572 <HAL_CAN_IRQHandler+0x320>
 800552c:	2b50      	cmp	r3, #80	; 0x50
 800552e:	d82a      	bhi.n	8005586 <HAL_CAN_IRQHandler+0x334>
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d019      	beq.n	8005568 <HAL_CAN_IRQHandler+0x316>
 8005534:	2b40      	cmp	r3, #64	; 0x40
 8005536:	d826      	bhi.n	8005586 <HAL_CAN_IRQHandler+0x334>
 8005538:	2b30      	cmp	r3, #48	; 0x30
 800553a:	d010      	beq.n	800555e <HAL_CAN_IRQHandler+0x30c>
 800553c:	2b30      	cmp	r3, #48	; 0x30
 800553e:	d822      	bhi.n	8005586 <HAL_CAN_IRQHandler+0x334>
 8005540:	2b10      	cmp	r3, #16
 8005542:	d002      	beq.n	800554a <HAL_CAN_IRQHandler+0x2f8>
 8005544:	2b20      	cmp	r3, #32
 8005546:	d005      	beq.n	8005554 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005548:	e01d      	b.n	8005586 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	f043 0308 	orr.w	r3, r3, #8
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005552:	e019      	b.n	8005588 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	f043 0310 	orr.w	r3, r3, #16
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800555c:	e014      	b.n	8005588 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	f043 0320 	orr.w	r3, r3, #32
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005566:	e00f      	b.n	8005588 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005570:	e00a      	b.n	8005588 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800557a:	e005      	b.n	8005588 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005584:	e000      	b.n	8005588 <HAL_CAN_IRQHandler+0x336>
            break;
 8005586:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005596:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2204      	movs	r2, #4
 800559e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d008      	beq.n	80055b8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f872 	bl	800569c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80055b8:	bf00      	nop
 80055ba:	3728      	adds	r7, #40	; 0x28
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056c0:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <__NVIC_SetPriorityGrouping+0x44>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056cc:	4013      	ands	r3, r2
 80056ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056e2:	4a04      	ldr	r2, [pc, #16]	; (80056f4 <__NVIC_SetPriorityGrouping+0x44>)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	60d3      	str	r3, [r2, #12]
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	e000ed00 	.word	0xe000ed00

080056f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056fc:	4b04      	ldr	r3, [pc, #16]	; (8005710 <__NVIC_GetPriorityGrouping+0x18>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	0a1b      	lsrs	r3, r3, #8
 8005702:	f003 0307 	and.w	r3, r3, #7
}
 8005706:	4618      	mov	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	e000ed00 	.word	0xe000ed00

08005714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800571e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005722:	2b00      	cmp	r3, #0
 8005724:	db0b      	blt.n	800573e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	f003 021f 	and.w	r2, r3, #31
 800572c:	4907      	ldr	r1, [pc, #28]	; (800574c <__NVIC_EnableIRQ+0x38>)
 800572e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	2001      	movs	r0, #1
 8005736:	fa00 f202 	lsl.w	r2, r0, r2
 800573a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	e000e100 	.word	0xe000e100

08005750 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800575a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575e:	2b00      	cmp	r3, #0
 8005760:	db12      	blt.n	8005788 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	f003 021f 	and.w	r2, r3, #31
 8005768:	490a      	ldr	r1, [pc, #40]	; (8005794 <__NVIC_DisableIRQ+0x44>)
 800576a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	2001      	movs	r0, #1
 8005772:	fa00 f202 	lsl.w	r2, r0, r2
 8005776:	3320      	adds	r3, #32
 8005778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800577c:	f3bf 8f4f 	dsb	sy
}
 8005780:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005782:	f3bf 8f6f 	isb	sy
}
 8005786:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	e000e100 	.word	0xe000e100

08005798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	6039      	str	r1, [r7, #0]
 80057a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	db0a      	blt.n	80057c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	490c      	ldr	r1, [pc, #48]	; (80057e4 <__NVIC_SetPriority+0x4c>)
 80057b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b6:	0112      	lsls	r2, r2, #4
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	440b      	add	r3, r1
 80057bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057c0:	e00a      	b.n	80057d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	4908      	ldr	r1, [pc, #32]	; (80057e8 <__NVIC_SetPriority+0x50>)
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	3b04      	subs	r3, #4
 80057d0:	0112      	lsls	r2, r2, #4
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	440b      	add	r3, r1
 80057d6:	761a      	strb	r2, [r3, #24]
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	e000e100 	.word	0xe000e100
 80057e8:	e000ed00 	.word	0xe000ed00

080057ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b089      	sub	sp, #36	; 0x24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f1c3 0307 	rsb	r3, r3, #7
 8005806:	2b04      	cmp	r3, #4
 8005808:	bf28      	it	cs
 800580a:	2304      	movcs	r3, #4
 800580c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	3304      	adds	r3, #4
 8005812:	2b06      	cmp	r3, #6
 8005814:	d902      	bls.n	800581c <NVIC_EncodePriority+0x30>
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	3b03      	subs	r3, #3
 800581a:	e000      	b.n	800581e <NVIC_EncodePriority+0x32>
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005820:	f04f 32ff 	mov.w	r2, #4294967295
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43da      	mvns	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	401a      	ands	r2, r3
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005834:	f04f 31ff 	mov.w	r1, #4294967295
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	fa01 f303 	lsl.w	r3, r1, r3
 800583e:	43d9      	mvns	r1, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005844:	4313      	orrs	r3, r2
         );
}
 8005846:	4618      	mov	r0, r3
 8005848:	3724      	adds	r7, #36	; 0x24
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3b01      	subs	r3, #1
 8005860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005864:	d301      	bcc.n	800586a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005866:	2301      	movs	r3, #1
 8005868:	e00f      	b.n	800588a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800586a:	4a0a      	ldr	r2, [pc, #40]	; (8005894 <SysTick_Config+0x40>)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3b01      	subs	r3, #1
 8005870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005872:	210f      	movs	r1, #15
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	f7ff ff8e 	bl	8005798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <SysTick_Config+0x40>)
 800587e:	2200      	movs	r2, #0
 8005880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005882:	4b04      	ldr	r3, [pc, #16]	; (8005894 <SysTick_Config+0x40>)
 8005884:	2207      	movs	r2, #7
 8005886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	e000e010 	.word	0xe000e010

08005898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff ff05 	bl	80056b0 <__NVIC_SetPriorityGrouping>
}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b086      	sub	sp, #24
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	4603      	mov	r3, r0
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	607a      	str	r2, [r7, #4]
 80058ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058c0:	f7ff ff1a 	bl	80056f8 <__NVIC_GetPriorityGrouping>
 80058c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	6978      	ldr	r0, [r7, #20]
 80058cc:	f7ff ff8e 	bl	80057ec <NVIC_EncodePriority>
 80058d0:	4602      	mov	r2, r0
 80058d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058d6:	4611      	mov	r1, r2
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff ff5d 	bl	8005798 <__NVIC_SetPriority>
}
 80058de:	bf00      	nop
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	4603      	mov	r3, r0
 80058ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff ff0d 	bl	8005714 <__NVIC_EnableIRQ>
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b082      	sub	sp, #8
 8005906:	af00      	add	r7, sp, #0
 8005908:	4603      	mov	r3, r0
 800590a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800590c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff ff1d 	bl	8005750 <__NVIC_DisableIRQ>
}
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff ff94 	bl	8005854 <SysTick_Config>
 800592c:	4603      	mov	r3, r0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e00e      	b.n	8005966 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	795b      	ldrb	r3, [r3, #5]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d105      	bne.n	800595e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7fd ffc3 	bl	80038e4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800597c:	f7fe fc54 	bl	8004228 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e099      	b.n	8005ac0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059ac:	e00f      	b.n	80059ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059ae:	f7fe fc3b 	bl	8004228 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b05      	cmp	r3, #5
 80059ba:	d908      	bls.n	80059ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2203      	movs	r2, #3
 80059c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e078      	b.n	8005ac0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e8      	bne.n	80059ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4b38      	ldr	r3, [pc, #224]	; (8005ac8 <HAL_DMA_Init+0x158>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d107      	bne.n	8005a38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a30:	4313      	orrs	r3, r2
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 0307 	bic.w	r3, r3, #7
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d117      	bne.n	8005a92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00e      	beq.n	8005a92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fa6f 	bl	8005f58 <DMA_CheckFifoParam>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2240      	movs	r2, #64	; 0x40
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e016      	b.n	8005ac0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fa26 	bl	8005eec <DMA_CalcBaseAndBitshift>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa8:	223f      	movs	r2, #63	; 0x3f
 8005aaa:	409a      	lsls	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	f010803f 	.word	0xf010803f

08005acc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_DMA_Start_IT+0x26>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e040      	b.n	8005b74 <HAL_DMA_Start_IT+0xa8>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d12f      	bne.n	8005b66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f9b8 	bl	8005e90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b24:	223f      	movs	r2, #63	; 0x3f
 8005b26:	409a      	lsls	r2, r3
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0216 	orr.w	r2, r2, #22
 8005b3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d007      	beq.n	8005b54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0208 	orr.w	r2, r2, #8
 8005b52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	e005      	b.n	8005b72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b6e:	2302      	movs	r3, #2
 8005b70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b88:	4b8e      	ldr	r3, [pc, #568]	; (8005dc4 <HAL_DMA_IRQHandler+0x248>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a8e      	ldr	r2, [pc, #568]	; (8005dc8 <HAL_DMA_IRQHandler+0x24c>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	0a9b      	lsrs	r3, r3, #10
 8005b94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba6:	2208      	movs	r2, #8
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01a      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d013      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0204 	bic.w	r2, r2, #4
 8005bce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd4:	2208      	movs	r2, #8
 8005bd6:	409a      	lsls	r2, r3
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be0:	f043 0201 	orr.w	r2, r3, #1
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bec:	2201      	movs	r2, #1
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d012      	beq.n	8005c1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00b      	beq.n	8005c1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	409a      	lsls	r2, r3
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	f043 0202 	orr.w	r2, r3, #2
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c22:	2204      	movs	r2, #4
 8005c24:	409a      	lsls	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d012      	beq.n	8005c54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00b      	beq.n	8005c54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c40:	2204      	movs	r2, #4
 8005c42:	409a      	lsls	r2, r3
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4c:	f043 0204 	orr.w	r2, r3, #4
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c58:	2210      	movs	r2, #16
 8005c5a:	409a      	lsls	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d043      	beq.n	8005cec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d03c      	beq.n	8005cec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c76:	2210      	movs	r2, #16
 8005c78:	409a      	lsls	r2, r3
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d018      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d108      	bne.n	8005cac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d024      	beq.n	8005cec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4798      	blx	r3
 8005caa:	e01f      	b.n	8005cec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01b      	beq.n	8005cec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4798      	blx	r3
 8005cbc:	e016      	b.n	8005cec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d107      	bne.n	8005cdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0208 	bic.w	r2, r2, #8
 8005cda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	409a      	lsls	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 808f 	beq.w	8005e1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8087 	beq.w	8005e1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d12:	2220      	movs	r2, #32
 8005d14:	409a      	lsls	r2, r3
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b05      	cmp	r3, #5
 8005d24:	d136      	bne.n	8005d94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0216 	bic.w	r2, r2, #22
 8005d34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <HAL_DMA_IRQHandler+0x1da>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0208 	bic.w	r2, r2, #8
 8005d64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6a:	223f      	movs	r2, #63	; 0x3f
 8005d6c:	409a      	lsls	r2, r3
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d07e      	beq.n	8005e88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
        }
        return;
 8005d92:	e079      	b.n	8005e88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01d      	beq.n	8005dde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10d      	bne.n	8005dcc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d031      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	4798      	blx	r3
 8005dc0:	e02c      	b.n	8005e1c <HAL_DMA_IRQHandler+0x2a0>
 8005dc2:	bf00      	nop
 8005dc4:	20000000 	.word	0x20000000
 8005dc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d023      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
 8005ddc:	e01e      	b.n	8005e1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10f      	bne.n	8005e0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0210 	bic.w	r2, r2, #16
 8005dfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d032      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d022      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2205      	movs	r2, #5
 8005e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0201 	bic.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60bb      	str	r3, [r7, #8]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d307      	bcc.n	8005e64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f2      	bne.n	8005e48 <HAL_DMA_IRQHandler+0x2cc>
 8005e62:	e000      	b.n	8005e66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d005      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
 8005e86:	e000      	b.n	8005e8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e88:	bf00      	nop
    }
  }
}
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005eac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d108      	bne.n	8005ed0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ece:	e007      	b.n	8005ee0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	60da      	str	r2, [r3, #12]
}
 8005ee0:	bf00      	nop
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	3b10      	subs	r3, #16
 8005efc:	4a14      	ldr	r2, [pc, #80]	; (8005f50 <DMA_CalcBaseAndBitshift+0x64>)
 8005efe:	fba2 2303 	umull	r2, r3, r2, r3
 8005f02:	091b      	lsrs	r3, r3, #4
 8005f04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f06:	4a13      	ldr	r2, [pc, #76]	; (8005f54 <DMA_CalcBaseAndBitshift+0x68>)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d909      	bls.n	8005f2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f22:	f023 0303 	bic.w	r3, r3, #3
 8005f26:	1d1a      	adds	r2, r3, #4
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	659a      	str	r2, [r3, #88]	; 0x58
 8005f2c:	e007      	b.n	8005f3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f36:	f023 0303 	bic.w	r3, r3, #3
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	aaaaaaab 	.word	0xaaaaaaab
 8005f54:	0800fdf0 	.word	0x0800fdf0

08005f58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d11f      	bne.n	8005fb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d856      	bhi.n	8006026 <DMA_CheckFifoParam+0xce>
 8005f78:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <DMA_CheckFifoParam+0x28>)
 8005f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7e:	bf00      	nop
 8005f80:	08005f91 	.word	0x08005f91
 8005f84:	08005fa3 	.word	0x08005fa3
 8005f88:	08005f91 	.word	0x08005f91
 8005f8c:	08006027 	.word	0x08006027
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d046      	beq.n	800602a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa0:	e043      	b.n	800602a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005faa:	d140      	bne.n	800602e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb0:	e03d      	b.n	800602e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fba:	d121      	bne.n	8006000 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d837      	bhi.n	8006032 <DMA_CheckFifoParam+0xda>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <DMA_CheckFifoParam+0x70>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005fd9 	.word	0x08005fd9
 8005fcc:	08005fdf 	.word	0x08005fdf
 8005fd0:	08005fd9 	.word	0x08005fd9
 8005fd4:	08005ff1 	.word	0x08005ff1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
      break;
 8005fdc:	e030      	b.n	8006040 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d025      	beq.n	8006036 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fee:	e022      	b.n	8006036 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ff8:	d11f      	bne.n	800603a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ffe:	e01c      	b.n	800603a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b02      	cmp	r3, #2
 8006004:	d903      	bls.n	800600e <DMA_CheckFifoParam+0xb6>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b03      	cmp	r3, #3
 800600a:	d003      	beq.n	8006014 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800600c:	e018      	b.n	8006040 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	73fb      	strb	r3, [r7, #15]
      break;
 8006012:	e015      	b.n	8006040 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00e      	beq.n	800603e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]
      break;
 8006024:	e00b      	b.n	800603e <DMA_CheckFifoParam+0xe6>
      break;
 8006026:	bf00      	nop
 8006028:	e00a      	b.n	8006040 <DMA_CheckFifoParam+0xe8>
      break;
 800602a:	bf00      	nop
 800602c:	e008      	b.n	8006040 <DMA_CheckFifoParam+0xe8>
      break;
 800602e:	bf00      	nop
 8006030:	e006      	b.n	8006040 <DMA_CheckFifoParam+0xe8>
      break;
 8006032:	bf00      	nop
 8006034:	e004      	b.n	8006040 <DMA_CheckFifoParam+0xe8>
      break;
 8006036:	bf00      	nop
 8006038:	e002      	b.n	8006040 <DMA_CheckFifoParam+0xe8>
      break;   
 800603a:	bf00      	nop
 800603c:	e000      	b.n	8006040 <DMA_CheckFifoParam+0xe8>
      break;
 800603e:	bf00      	nop
    }
  } 
  
  return status; 
 8006040:	7bfb      	ldrb	r3, [r7, #15]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop

08006050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006050:	b480      	push	{r7}
 8006052:	b089      	sub	sp, #36	; 0x24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800605a:	2300      	movs	r3, #0
 800605c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800605e:	2300      	movs	r3, #0
 8006060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006062:	2300      	movs	r3, #0
 8006064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	e165      	b.n	8006338 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800606c:	2201      	movs	r2, #1
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4013      	ands	r3, r2
 800607e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	429a      	cmp	r2, r3
 8006086:	f040 8154 	bne.w	8006332 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b01      	cmp	r3, #1
 8006094:	d005      	beq.n	80060a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d130      	bne.n	8006104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	2203      	movs	r2, #3
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	43db      	mvns	r3, r3
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	4013      	ands	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060d8:	2201      	movs	r2, #1
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	43db      	mvns	r3, r3
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	4013      	ands	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	091b      	lsrs	r3, r3, #4
 80060ee:	f003 0201 	and.w	r2, r3, #1
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f003 0303 	and.w	r3, r3, #3
 800610c:	2b03      	cmp	r3, #3
 800610e:	d017      	beq.n	8006140 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	2203      	movs	r2, #3
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	43db      	mvns	r3, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4013      	ands	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	4313      	orrs	r3, r2
 8006138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f003 0303 	and.w	r3, r3, #3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d123      	bne.n	8006194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	08da      	lsrs	r2, r3, #3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3208      	adds	r2, #8
 8006154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	220f      	movs	r2, #15
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	43db      	mvns	r3, r3
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4013      	ands	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	fa02 f303 	lsl.w	r3, r2, r3
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	4313      	orrs	r3, r2
 8006184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	08da      	lsrs	r2, r3, #3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3208      	adds	r2, #8
 800618e:	69b9      	ldr	r1, [r7, #24]
 8006190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	2203      	movs	r2, #3
 80061a0:	fa02 f303 	lsl.w	r3, r2, r3
 80061a4:	43db      	mvns	r3, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4013      	ands	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f003 0203 	and.w	r2, r3, #3
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4313      	orrs	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 80ae 	beq.w	8006332 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	4b5d      	ldr	r3, [pc, #372]	; (8006350 <HAL_GPIO_Init+0x300>)
 80061dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061de:	4a5c      	ldr	r2, [pc, #368]	; (8006350 <HAL_GPIO_Init+0x300>)
 80061e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061e4:	6453      	str	r3, [r2, #68]	; 0x44
 80061e6:	4b5a      	ldr	r3, [pc, #360]	; (8006350 <HAL_GPIO_Init+0x300>)
 80061e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061f2:	4a58      	ldr	r2, [pc, #352]	; (8006354 <HAL_GPIO_Init+0x304>)
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	089b      	lsrs	r3, r3, #2
 80061f8:	3302      	adds	r3, #2
 80061fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	220f      	movs	r2, #15
 800620a:	fa02 f303 	lsl.w	r3, r2, r3
 800620e:	43db      	mvns	r3, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	4013      	ands	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a4f      	ldr	r2, [pc, #316]	; (8006358 <HAL_GPIO_Init+0x308>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d025      	beq.n	800626a <HAL_GPIO_Init+0x21a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a4e      	ldr	r2, [pc, #312]	; (800635c <HAL_GPIO_Init+0x30c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d01f      	beq.n	8006266 <HAL_GPIO_Init+0x216>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a4d      	ldr	r2, [pc, #308]	; (8006360 <HAL_GPIO_Init+0x310>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d019      	beq.n	8006262 <HAL_GPIO_Init+0x212>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a4c      	ldr	r2, [pc, #304]	; (8006364 <HAL_GPIO_Init+0x314>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d013      	beq.n	800625e <HAL_GPIO_Init+0x20e>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a4b      	ldr	r2, [pc, #300]	; (8006368 <HAL_GPIO_Init+0x318>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00d      	beq.n	800625a <HAL_GPIO_Init+0x20a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a4a      	ldr	r2, [pc, #296]	; (800636c <HAL_GPIO_Init+0x31c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d007      	beq.n	8006256 <HAL_GPIO_Init+0x206>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a49      	ldr	r2, [pc, #292]	; (8006370 <HAL_GPIO_Init+0x320>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d101      	bne.n	8006252 <HAL_GPIO_Init+0x202>
 800624e:	2306      	movs	r3, #6
 8006250:	e00c      	b.n	800626c <HAL_GPIO_Init+0x21c>
 8006252:	2307      	movs	r3, #7
 8006254:	e00a      	b.n	800626c <HAL_GPIO_Init+0x21c>
 8006256:	2305      	movs	r3, #5
 8006258:	e008      	b.n	800626c <HAL_GPIO_Init+0x21c>
 800625a:	2304      	movs	r3, #4
 800625c:	e006      	b.n	800626c <HAL_GPIO_Init+0x21c>
 800625e:	2303      	movs	r3, #3
 8006260:	e004      	b.n	800626c <HAL_GPIO_Init+0x21c>
 8006262:	2302      	movs	r3, #2
 8006264:	e002      	b.n	800626c <HAL_GPIO_Init+0x21c>
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <HAL_GPIO_Init+0x21c>
 800626a:	2300      	movs	r3, #0
 800626c:	69fa      	ldr	r2, [r7, #28]
 800626e:	f002 0203 	and.w	r2, r2, #3
 8006272:	0092      	lsls	r2, r2, #2
 8006274:	4093      	lsls	r3, r2
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	4313      	orrs	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800627c:	4935      	ldr	r1, [pc, #212]	; (8006354 <HAL_GPIO_Init+0x304>)
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	089b      	lsrs	r3, r3, #2
 8006282:	3302      	adds	r3, #2
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800628a:	4b3a      	ldr	r3, [pc, #232]	; (8006374 <HAL_GPIO_Init+0x324>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	43db      	mvns	r3, r3
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	4013      	ands	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062ae:	4a31      	ldr	r2, [pc, #196]	; (8006374 <HAL_GPIO_Init+0x324>)
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062b4:	4b2f      	ldr	r3, [pc, #188]	; (8006374 <HAL_GPIO_Init+0x324>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	43db      	mvns	r3, r3
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	4013      	ands	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062d8:	4a26      	ldr	r2, [pc, #152]	; (8006374 <HAL_GPIO_Init+0x324>)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062de:	4b25      	ldr	r3, [pc, #148]	; (8006374 <HAL_GPIO_Init+0x324>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	43db      	mvns	r3, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4013      	ands	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006302:	4a1c      	ldr	r2, [pc, #112]	; (8006374 <HAL_GPIO_Init+0x324>)
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006308:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <HAL_GPIO_Init+0x324>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	43db      	mvns	r3, r3
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	4013      	ands	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800632c:	4a11      	ldr	r2, [pc, #68]	; (8006374 <HAL_GPIO_Init+0x324>)
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	3301      	adds	r3, #1
 8006336:	61fb      	str	r3, [r7, #28]
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	2b0f      	cmp	r3, #15
 800633c:	f67f ae96 	bls.w	800606c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	3724      	adds	r7, #36	; 0x24
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40023800 	.word	0x40023800
 8006354:	40013800 	.word	0x40013800
 8006358:	40020000 	.word	0x40020000
 800635c:	40020400 	.word	0x40020400
 8006360:	40020800 	.word	0x40020800
 8006364:	40020c00 	.word	0x40020c00
 8006368:	40021000 	.word	0x40021000
 800636c:	40021400 	.word	0x40021400
 8006370:	40021800 	.word	0x40021800
 8006374:	40013c00 	.word	0x40013c00

08006378 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	e0c7      	b.n	8006524 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006394:	2201      	movs	r2, #1
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	4013      	ands	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	f040 80b7 	bne.w	800651e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80063b0:	4a62      	ldr	r2, [pc, #392]	; (800653c <HAL_GPIO_DeInit+0x1c4>)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	089b      	lsrs	r3, r3, #2
 80063b6:	3302      	adds	r3, #2
 80063b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063bc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f003 0303 	and.w	r3, r3, #3
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	220f      	movs	r2, #15
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	4013      	ands	r3, r2
 80063d0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a5a      	ldr	r2, [pc, #360]	; (8006540 <HAL_GPIO_DeInit+0x1c8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d025      	beq.n	8006426 <HAL_GPIO_DeInit+0xae>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a59      	ldr	r2, [pc, #356]	; (8006544 <HAL_GPIO_DeInit+0x1cc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01f      	beq.n	8006422 <HAL_GPIO_DeInit+0xaa>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a58      	ldr	r2, [pc, #352]	; (8006548 <HAL_GPIO_DeInit+0x1d0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d019      	beq.n	800641e <HAL_GPIO_DeInit+0xa6>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a57      	ldr	r2, [pc, #348]	; (800654c <HAL_GPIO_DeInit+0x1d4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d013      	beq.n	800641a <HAL_GPIO_DeInit+0xa2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a56      	ldr	r2, [pc, #344]	; (8006550 <HAL_GPIO_DeInit+0x1d8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00d      	beq.n	8006416 <HAL_GPIO_DeInit+0x9e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a55      	ldr	r2, [pc, #340]	; (8006554 <HAL_GPIO_DeInit+0x1dc>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d007      	beq.n	8006412 <HAL_GPIO_DeInit+0x9a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a54      	ldr	r2, [pc, #336]	; (8006558 <HAL_GPIO_DeInit+0x1e0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d101      	bne.n	800640e <HAL_GPIO_DeInit+0x96>
 800640a:	2306      	movs	r3, #6
 800640c:	e00c      	b.n	8006428 <HAL_GPIO_DeInit+0xb0>
 800640e:	2307      	movs	r3, #7
 8006410:	e00a      	b.n	8006428 <HAL_GPIO_DeInit+0xb0>
 8006412:	2305      	movs	r3, #5
 8006414:	e008      	b.n	8006428 <HAL_GPIO_DeInit+0xb0>
 8006416:	2304      	movs	r3, #4
 8006418:	e006      	b.n	8006428 <HAL_GPIO_DeInit+0xb0>
 800641a:	2303      	movs	r3, #3
 800641c:	e004      	b.n	8006428 <HAL_GPIO_DeInit+0xb0>
 800641e:	2302      	movs	r3, #2
 8006420:	e002      	b.n	8006428 <HAL_GPIO_DeInit+0xb0>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <HAL_GPIO_DeInit+0xb0>
 8006426:	2300      	movs	r3, #0
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	f002 0203 	and.w	r2, r2, #3
 800642e:	0092      	lsls	r2, r2, #2
 8006430:	4093      	lsls	r3, r2
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	429a      	cmp	r2, r3
 8006436:	d132      	bne.n	800649e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006438:	4b48      	ldr	r3, [pc, #288]	; (800655c <HAL_GPIO_DeInit+0x1e4>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	43db      	mvns	r3, r3
 8006440:	4946      	ldr	r1, [pc, #280]	; (800655c <HAL_GPIO_DeInit+0x1e4>)
 8006442:	4013      	ands	r3, r2
 8006444:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006446:	4b45      	ldr	r3, [pc, #276]	; (800655c <HAL_GPIO_DeInit+0x1e4>)
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	43db      	mvns	r3, r3
 800644e:	4943      	ldr	r1, [pc, #268]	; (800655c <HAL_GPIO_DeInit+0x1e4>)
 8006450:	4013      	ands	r3, r2
 8006452:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006454:	4b41      	ldr	r3, [pc, #260]	; (800655c <HAL_GPIO_DeInit+0x1e4>)
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	43db      	mvns	r3, r3
 800645c:	493f      	ldr	r1, [pc, #252]	; (800655c <HAL_GPIO_DeInit+0x1e4>)
 800645e:	4013      	ands	r3, r2
 8006460:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006462:	4b3e      	ldr	r3, [pc, #248]	; (800655c <HAL_GPIO_DeInit+0x1e4>)
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	43db      	mvns	r3, r3
 800646a:	493c      	ldr	r1, [pc, #240]	; (800655c <HAL_GPIO_DeInit+0x1e4>)
 800646c:	4013      	ands	r3, r2
 800646e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	220f      	movs	r2, #15
 800647a:	fa02 f303 	lsl.w	r3, r2, r3
 800647e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006480:	4a2e      	ldr	r2, [pc, #184]	; (800653c <HAL_GPIO_DeInit+0x1c4>)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	089b      	lsrs	r3, r3, #2
 8006486:	3302      	adds	r3, #2
 8006488:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	43da      	mvns	r2, r3
 8006490:	482a      	ldr	r0, [pc, #168]	; (800653c <HAL_GPIO_DeInit+0x1c4>)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	089b      	lsrs	r3, r3, #2
 8006496:	400a      	ands	r2, r1
 8006498:	3302      	adds	r3, #2
 800649a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	2103      	movs	r1, #3
 80064a8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ac:	43db      	mvns	r3, r3
 80064ae:	401a      	ands	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	08da      	lsrs	r2, r3, #3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3208      	adds	r2, #8
 80064bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f003 0307 	and.w	r3, r3, #7
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	220f      	movs	r2, #15
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	43db      	mvns	r3, r3
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	08d2      	lsrs	r2, r2, #3
 80064d4:	4019      	ands	r1, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3208      	adds	r2, #8
 80064da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	2103      	movs	r1, #3
 80064e8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ec:	43db      	mvns	r3, r3
 80064ee:	401a      	ands	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	2101      	movs	r1, #1
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006500:	43db      	mvns	r3, r3
 8006502:	401a      	ands	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	2103      	movs	r1, #3
 8006512:	fa01 f303 	lsl.w	r3, r1, r3
 8006516:	43db      	mvns	r3, r3
 8006518:	401a      	ands	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	3301      	adds	r3, #1
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2b0f      	cmp	r3, #15
 8006528:	f67f af34 	bls.w	8006394 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	40013800 	.word	0x40013800
 8006540:	40020000 	.word	0x40020000
 8006544:	40020400 	.word	0x40020400
 8006548:	40020800 	.word	0x40020800
 800654c:	40020c00 	.word	0x40020c00
 8006550:	40021000 	.word	0x40021000
 8006554:	40021400 	.word	0x40021400
 8006558:	40021800 	.word	0x40021800
 800655c:	40013c00 	.word	0x40013c00

08006560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	887b      	ldrh	r3, [r7, #2]
 8006572:	4013      	ands	r3, r2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006578:	2301      	movs	r3, #1
 800657a:	73fb      	strb	r3, [r7, #15]
 800657c:	e001      	b.n	8006582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006582:	7bfb      	ldrb	r3, [r7, #15]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	807b      	strh	r3, [r7, #2]
 800659c:	4613      	mov	r3, r2
 800659e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065a0:	787b      	ldrb	r3, [r7, #1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065a6:	887a      	ldrh	r2, [r7, #2]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065ac:	e003      	b.n	80065b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065ae:	887b      	ldrh	r3, [r7, #2]
 80065b0:	041a      	lsls	r2, r3, #16
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	619a      	str	r2, [r3, #24]
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80065d4:	887a      	ldrh	r2, [r7, #2]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4013      	ands	r3, r2
 80065da:	041a      	lsls	r2, r3, #16
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	43d9      	mvns	r1, r3
 80065e0:	887b      	ldrh	r3, [r7, #2]
 80065e2:	400b      	ands	r3, r1
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	619a      	str	r2, [r3, #24]
}
 80065ea:	bf00      	nop
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
	...

080065f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006602:	4b08      	ldr	r3, [pc, #32]	; (8006624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006604:	695a      	ldr	r2, [r3, #20]
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800660e:	4a05      	ldr	r2, [pc, #20]	; (8006624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006610:	88fb      	ldrh	r3, [r7, #6]
 8006612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006614:	88fb      	ldrh	r3, [r7, #6]
 8006616:	4618      	mov	r0, r3
 8006618:	f7fc fce6 	bl	8002fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40013c00 	.word	0x40013c00

08006628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e12b      	b.n	8006892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fd f96a 	bl	8003928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2224      	movs	r2, #36	; 0x24
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0201 	bic.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800667a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800668a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800668c:	f002 f9d2 	bl	8008a34 <HAL_RCC_GetPCLK1Freq>
 8006690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	4a81      	ldr	r2, [pc, #516]	; (800689c <HAL_I2C_Init+0x274>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d807      	bhi.n	80066ac <HAL_I2C_Init+0x84>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4a80      	ldr	r2, [pc, #512]	; (80068a0 <HAL_I2C_Init+0x278>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	bf94      	ite	ls
 80066a4:	2301      	movls	r3, #1
 80066a6:	2300      	movhi	r3, #0
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	e006      	b.n	80066ba <HAL_I2C_Init+0x92>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4a7d      	ldr	r2, [pc, #500]	; (80068a4 <HAL_I2C_Init+0x27c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	bf94      	ite	ls
 80066b4:	2301      	movls	r3, #1
 80066b6:	2300      	movhi	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e0e7      	b.n	8006892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4a78      	ldr	r2, [pc, #480]	; (80068a8 <HAL_I2C_Init+0x280>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	0c9b      	lsrs	r3, r3, #18
 80066cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	430a      	orrs	r2, r1
 80066e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	4a6a      	ldr	r2, [pc, #424]	; (800689c <HAL_I2C_Init+0x274>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d802      	bhi.n	80066fc <HAL_I2C_Init+0xd4>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	3301      	adds	r3, #1
 80066fa:	e009      	b.n	8006710 <HAL_I2C_Init+0xe8>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006702:	fb02 f303 	mul.w	r3, r2, r3
 8006706:	4a69      	ldr	r2, [pc, #420]	; (80068ac <HAL_I2C_Init+0x284>)
 8006708:	fba2 2303 	umull	r2, r3, r2, r3
 800670c:	099b      	lsrs	r3, r3, #6
 800670e:	3301      	adds	r3, #1
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	430b      	orrs	r3, r1
 8006716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006722:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	495c      	ldr	r1, [pc, #368]	; (800689c <HAL_I2C_Init+0x274>)
 800672c:	428b      	cmp	r3, r1
 800672e:	d819      	bhi.n	8006764 <HAL_I2C_Init+0x13c>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	1e59      	subs	r1, r3, #1
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	fbb1 f3f3 	udiv	r3, r1, r3
 800673e:	1c59      	adds	r1, r3, #1
 8006740:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006744:	400b      	ands	r3, r1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <HAL_I2C_Init+0x138>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	1e59      	subs	r1, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	fbb1 f3f3 	udiv	r3, r1, r3
 8006758:	3301      	adds	r3, #1
 800675a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800675e:	e051      	b.n	8006804 <HAL_I2C_Init+0x1dc>
 8006760:	2304      	movs	r3, #4
 8006762:	e04f      	b.n	8006804 <HAL_I2C_Init+0x1dc>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d111      	bne.n	8006790 <HAL_I2C_Init+0x168>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	1e58      	subs	r0, r3, #1
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6859      	ldr	r1, [r3, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	440b      	add	r3, r1
 800677a:	fbb0 f3f3 	udiv	r3, r0, r3
 800677e:	3301      	adds	r3, #1
 8006780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006784:	2b00      	cmp	r3, #0
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	e012      	b.n	80067b6 <HAL_I2C_Init+0x18e>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	1e58      	subs	r0, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6859      	ldr	r1, [r3, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	440b      	add	r3, r1
 800679e:	0099      	lsls	r1, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067a6:	3301      	adds	r3, #1
 80067a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bf0c      	ite	eq
 80067b0:	2301      	moveq	r3, #1
 80067b2:	2300      	movne	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_I2C_Init+0x196>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e022      	b.n	8006804 <HAL_I2C_Init+0x1dc>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10e      	bne.n	80067e4 <HAL_I2C_Init+0x1bc>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1e58      	subs	r0, r3, #1
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	440b      	add	r3, r1
 80067d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80067d8:	3301      	adds	r3, #1
 80067da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e2:	e00f      	b.n	8006804 <HAL_I2C_Init+0x1dc>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	1e58      	subs	r0, r3, #1
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6859      	ldr	r1, [r3, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	0099      	lsls	r1, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80067fa:	3301      	adds	r3, #1
 80067fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	6809      	ldr	r1, [r1, #0]
 8006808:	4313      	orrs	r3, r2
 800680a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	69da      	ldr	r2, [r3, #28]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6911      	ldr	r1, [r2, #16]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	68d2      	ldr	r2, [r2, #12]
 800683e:	4311      	orrs	r1, r2
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6812      	ldr	r2, [r2, #0]
 8006844:	430b      	orrs	r3, r1
 8006846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	000186a0 	.word	0x000186a0
 80068a0:	001e847f 	.word	0x001e847f
 80068a4:	003d08ff 	.word	0x003d08ff
 80068a8:	431bde83 	.word	0x431bde83
 80068ac:	10624dd3 	.word	0x10624dd3

080068b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08c      	sub	sp, #48	; 0x30
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	4608      	mov	r0, r1
 80068ba:	4611      	mov	r1, r2
 80068bc:	461a      	mov	r2, r3
 80068be:	4603      	mov	r3, r0
 80068c0:	817b      	strh	r3, [r7, #10]
 80068c2:	460b      	mov	r3, r1
 80068c4:	813b      	strh	r3, [r7, #8]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068ca:	f7fd fcad 	bl	8004228 <HAL_GetTick>
 80068ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b20      	cmp	r3, #32
 80068da:	f040 8208 	bne.w	8006cee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	2319      	movs	r3, #25
 80068e4:	2201      	movs	r2, #1
 80068e6:	497b      	ldr	r1, [pc, #492]	; (8006ad4 <HAL_I2C_Mem_Read+0x224>)
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 faef 	bl	8006ecc <I2C_WaitOnFlagUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80068f4:	2302      	movs	r3, #2
 80068f6:	e1fb      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_I2C_Mem_Read+0x56>
 8006902:	2302      	movs	r3, #2
 8006904:	e1f4      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x440>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b01      	cmp	r3, #1
 800691a:	d007      	beq.n	800692c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f042 0201 	orr.w	r2, r2, #1
 800692a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800693a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2222      	movs	r2, #34	; 0x22
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2240      	movs	r2, #64	; 0x40
 8006948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800695c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4a5b      	ldr	r2, [pc, #364]	; (8006ad8 <HAL_I2C_Mem_Read+0x228>)
 800696c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800696e:	88f8      	ldrh	r0, [r7, #6]
 8006970:	893a      	ldrh	r2, [r7, #8]
 8006972:	8979      	ldrh	r1, [r7, #10]
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	4603      	mov	r3, r0
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f9bc 	bl	8006cfc <I2C_RequestMemoryRead>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e1b0      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006992:	2b00      	cmp	r3, #0
 8006994:	d113      	bne.n	80069be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006996:	2300      	movs	r3, #0
 8006998:	623b      	str	r3, [r7, #32]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	623b      	str	r3, [r7, #32]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	623b      	str	r3, [r7, #32]
 80069aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	e184      	b.n	8006cc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d11b      	bne.n	80069fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069d6:	2300      	movs	r3, #0
 80069d8:	61fb      	str	r3, [r7, #28]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	61fb      	str	r3, [r7, #28]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	61fb      	str	r3, [r7, #28]
 80069ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	e164      	b.n	8006cc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d11b      	bne.n	8006a3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a26:	2300      	movs	r3, #0
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	61bb      	str	r3, [r7, #24]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	e144      	b.n	8006cc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a54:	e138      	b.n	8006cc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	f200 80f1 	bhi.w	8006c42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d123      	bne.n	8006ab0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 fb44 	bl	80070fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e139      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006aae:	e10b      	b.n	8006cc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d14e      	bne.n	8006b56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abe:	2200      	movs	r2, #0
 8006ac0:	4906      	ldr	r1, [pc, #24]	; (8006adc <HAL_I2C_Mem_Read+0x22c>)
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fa02 	bl	8006ecc <I2C_WaitOnFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d008      	beq.n	8006ae0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e10e      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x440>
 8006ad2:	bf00      	nop
 8006ad4:	00100002 	.word	0x00100002
 8006ad8:	ffff0000 	.word	0xffff0000
 8006adc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	691a      	ldr	r2, [r3, #16]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b54:	e0b8      	b.n	8006cc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	4966      	ldr	r1, [pc, #408]	; (8006cf8 <HAL_I2C_Mem_Read+0x448>)
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 f9b3 	bl	8006ecc <I2C_WaitOnFlagUntilTimeout>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0bf      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	2200      	movs	r2, #0
 8006bba:	494f      	ldr	r1, [pc, #316]	; (8006cf8 <HAL_I2C_Mem_Read+0x448>)
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f985 	bl	8006ecc <I2C_WaitOnFlagUntilTimeout>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e091      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691a      	ldr	r2, [r3, #16]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c40:	e042      	b.n	8006cc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fa57 	bl	80070fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e04c      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	b2d2      	uxtb	r2, r2
 8006c62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c72:	3b01      	subs	r3, #1
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	f003 0304 	and.w	r3, r3, #4
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d118      	bne.n	8006cc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f47f aec2 	bne.w	8006a56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	e000      	b.n	8006cf0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006cee:	2302      	movs	r3, #2
  }
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3728      	adds	r7, #40	; 0x28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	00010004 	.word	0x00010004

08006cfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b088      	sub	sp, #32
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	4608      	mov	r0, r1
 8006d06:	4611      	mov	r1, r2
 8006d08:	461a      	mov	r2, r3
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	817b      	strh	r3, [r7, #10]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	813b      	strh	r3, [r7, #8]
 8006d12:	4613      	mov	r3, r2
 8006d14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 f8c2 	bl	8006ecc <I2C_WaitOnFlagUntilTimeout>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00d      	beq.n	8006d6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d5c:	d103      	bne.n	8006d66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e0aa      	b.n	8006ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d6a:	897b      	ldrh	r3, [r7, #10]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	6a3a      	ldr	r2, [r7, #32]
 8006d7e:	4952      	ldr	r1, [pc, #328]	; (8006ec8 <I2C_RequestMemoryRead+0x1cc>)
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 f8fa 	bl	8006f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e097      	b.n	8006ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da8:	6a39      	ldr	r1, [r7, #32]
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f964 	bl	8007078 <I2C_WaitOnTXEFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00d      	beq.n	8006dd2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d107      	bne.n	8006dce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e076      	b.n	8006ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006dd2:	88fb      	ldrh	r3, [r7, #6]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d105      	bne.n	8006de4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006dd8:	893b      	ldrh	r3, [r7, #8]
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	611a      	str	r2, [r3, #16]
 8006de2:	e021      	b.n	8006e28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006de4:	893b      	ldrh	r3, [r7, #8]
 8006de6:	0a1b      	lsrs	r3, r3, #8
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df4:	6a39      	ldr	r1, [r7, #32]
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f93e 	bl	8007078 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00d      	beq.n	8006e1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d107      	bne.n	8006e1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e050      	b.n	8006ec0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e1e:	893b      	ldrh	r3, [r7, #8]
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2a:	6a39      	ldr	r1, [r7, #32]
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f923 	bl	8007078 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00d      	beq.n	8006e54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d107      	bne.n	8006e50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e035      	b.n	8006ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 f82b 	bl	8006ecc <I2C_WaitOnFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00d      	beq.n	8006e98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8a:	d103      	bne.n	8006e94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e013      	b.n	8006ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e98:	897b      	ldrh	r3, [r7, #10]
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f043 0301 	orr.w	r3, r3, #1
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	6a3a      	ldr	r2, [r7, #32]
 8006eac:	4906      	ldr	r1, [pc, #24]	; (8006ec8 <I2C_RequestMemoryRead+0x1cc>)
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 f863 	bl	8006f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	00010002 	.word	0x00010002

08006ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006edc:	e025      	b.n	8006f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee4:	d021      	beq.n	8006f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ee6:	f7fd f99f 	bl	8004228 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d302      	bcc.n	8006efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d116      	bne.n	8006f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	f043 0220 	orr.w	r2, r3, #32
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e023      	b.n	8006f72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	0c1b      	lsrs	r3, r3, #16
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d10d      	bne.n	8006f50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	43da      	mvns	r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	bf0c      	ite	eq
 8006f46:	2301      	moveq	r3, #1
 8006f48:	2300      	movne	r3, #0
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	e00c      	b.n	8006f6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	43da      	mvns	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bf0c      	ite	eq
 8006f62:	2301      	moveq	r3, #1
 8006f64:	2300      	movne	r3, #0
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d0b6      	beq.n	8006ede <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
 8006f86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f88:	e051      	b.n	800702e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f98:	d123      	bne.n	8006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fa8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	f043 0204 	orr.w	r2, r3, #4
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e046      	b.n	8007070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d021      	beq.n	800702e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fea:	f7fd f91d 	bl	8004228 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d302      	bcc.n	8007000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d116      	bne.n	800702e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2220      	movs	r2, #32
 800700a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	f043 0220 	orr.w	r2, r3, #32
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e020      	b.n	8007070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	0c1b      	lsrs	r3, r3, #16
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b01      	cmp	r3, #1
 8007036:	d10c      	bne.n	8007052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	43da      	mvns	r2, r3
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	4013      	ands	r3, r2
 8007044:	b29b      	uxth	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	bf14      	ite	ne
 800704a:	2301      	movne	r3, #1
 800704c:	2300      	moveq	r3, #0
 800704e:	b2db      	uxtb	r3, r3
 8007050:	e00b      	b.n	800706a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	43da      	mvns	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	4013      	ands	r3, r2
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	bf14      	ite	ne
 8007064:	2301      	movne	r3, #1
 8007066:	2300      	moveq	r3, #0
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d18d      	bne.n	8006f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007084:	e02d      	b.n	80070e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 f88d 	bl	80071a6 <I2C_IsAcknowledgeFailed>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e02d      	b.n	80070f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709c:	d021      	beq.n	80070e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800709e:	f7fd f8c3 	bl	8004228 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d302      	bcc.n	80070b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d116      	bne.n	80070e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	f043 0220 	orr.w	r2, r3, #32
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e007      	b.n	80070f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ec:	2b80      	cmp	r3, #128	; 0x80
 80070ee:	d1ca      	bne.n	8007086 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007106:	e042      	b.n	800718e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	f003 0310 	and.w	r3, r3, #16
 8007112:	2b10      	cmp	r3, #16
 8007114:	d119      	bne.n	800714a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f06f 0210 	mvn.w	r2, #16
 800711e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2220      	movs	r2, #32
 800712a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e029      	b.n	800719e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800714a:	f7fd f86d 	bl	8004228 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	429a      	cmp	r2, r3
 8007158:	d302      	bcc.n	8007160 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d116      	bne.n	800718e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2220      	movs	r2, #32
 800716a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	f043 0220 	orr.w	r2, r3, #32
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e007      	b.n	800719e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007198:	2b40      	cmp	r3, #64	; 0x40
 800719a:	d1b5      	bne.n	8007108 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071bc:	d11b      	bne.n	80071f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f043 0204 	orr.w	r2, r3, #4
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007206:	b08f      	sub	sp, #60	; 0x3c
 8007208:	af0a      	add	r7, sp, #40	; 0x28
 800720a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e116      	b.n	8007444 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d106      	bne.n	8007236 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f008 f91f 	bl	800f474 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2203      	movs	r2, #3
 800723a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007246:	2b00      	cmp	r3, #0
 8007248:	d102      	bne.n	8007250 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4618      	mov	r0, r3
 8007256:	f004 fc2e 	bl	800bab6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	603b      	str	r3, [r7, #0]
 8007260:	687e      	ldr	r6, [r7, #4]
 8007262:	466d      	mov	r5, sp
 8007264:	f106 0410 	add.w	r4, r6, #16
 8007268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800726a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800726c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800726e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007270:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007274:	e885 0003 	stmia.w	r5, {r0, r1}
 8007278:	1d33      	adds	r3, r6, #4
 800727a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800727c:	6838      	ldr	r0, [r7, #0]
 800727e:	f004 fb05 	bl	800b88c <USB_CoreInit>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e0d7      	b.n	8007444 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2100      	movs	r1, #0
 800729a:	4618      	mov	r0, r3
 800729c:	f004 fc1c 	bl	800bad8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]
 80072a4:	e04a      	b.n	800733c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072a6:	7bfa      	ldrb	r2, [r7, #15]
 80072a8:	6879      	ldr	r1, [r7, #4]
 80072aa:	4613      	mov	r3, r2
 80072ac:	00db      	lsls	r3, r3, #3
 80072ae:	4413      	add	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	440b      	add	r3, r1
 80072b4:	333d      	adds	r3, #61	; 0x3d
 80072b6:	2201      	movs	r2, #1
 80072b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072ba:	7bfa      	ldrb	r2, [r7, #15]
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	440b      	add	r3, r1
 80072c8:	333c      	adds	r3, #60	; 0x3c
 80072ca:	7bfa      	ldrb	r2, [r7, #15]
 80072cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80072ce:	7bfa      	ldrb	r2, [r7, #15]
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	b298      	uxth	r0, r3
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	4613      	mov	r3, r2
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	440b      	add	r3, r1
 80072e0:	3344      	adds	r3, #68	; 0x44
 80072e2:	4602      	mov	r2, r0
 80072e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072e6:	7bfa      	ldrb	r2, [r7, #15]
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	3340      	adds	r3, #64	; 0x40
 80072f6:	2200      	movs	r2, #0
 80072f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80072fa:	7bfa      	ldrb	r2, [r7, #15]
 80072fc:	6879      	ldr	r1, [r7, #4]
 80072fe:	4613      	mov	r3, r2
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	4413      	add	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	3348      	adds	r3, #72	; 0x48
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800730e:	7bfa      	ldrb	r2, [r7, #15]
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	4613      	mov	r3, r2
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	334c      	adds	r3, #76	; 0x4c
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007322:	7bfa      	ldrb	r2, [r7, #15]
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	3354      	adds	r3, #84	; 0x54
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	3301      	adds	r3, #1
 800733a:	73fb      	strb	r3, [r7, #15]
 800733c:	7bfa      	ldrb	r2, [r7, #15]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	429a      	cmp	r2, r3
 8007344:	d3af      	bcc.n	80072a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
 800734a:	e044      	b.n	80073d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800734c:	7bfa      	ldrb	r2, [r7, #15]
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	4613      	mov	r3, r2
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	4413      	add	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	440b      	add	r3, r1
 800735a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800735e:	2200      	movs	r2, #0
 8007360:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007362:	7bfa      	ldrb	r2, [r7, #15]
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	4613      	mov	r3, r2
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	440b      	add	r3, r1
 8007370:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007374:	7bfa      	ldrb	r2, [r7, #15]
 8007376:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007378:	7bfa      	ldrb	r2, [r7, #15]
 800737a:	6879      	ldr	r1, [r7, #4]
 800737c:	4613      	mov	r3, r2
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	440b      	add	r3, r1
 8007386:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800738a:	2200      	movs	r2, #0
 800738c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800738e:	7bfa      	ldrb	r2, [r7, #15]
 8007390:	6879      	ldr	r1, [r7, #4]
 8007392:	4613      	mov	r3, r2
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	440b      	add	r3, r1
 800739c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073a4:	7bfa      	ldrb	r2, [r7, #15]
 80073a6:	6879      	ldr	r1, [r7, #4]
 80073a8:	4613      	mov	r3, r2
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	440b      	add	r3, r1
 80073b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073ba:	7bfa      	ldrb	r2, [r7, #15]
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	3301      	adds	r3, #1
 80073d4:	73fb      	strb	r3, [r7, #15]
 80073d6:	7bfa      	ldrb	r2, [r7, #15]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d3b5      	bcc.n	800734c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	687e      	ldr	r6, [r7, #4]
 80073e8:	466d      	mov	r5, sp
 80073ea:	f106 0410 	add.w	r4, r6, #16
 80073ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80073fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80073fe:	1d33      	adds	r3, r6, #4
 8007400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007402:	6838      	ldr	r0, [r7, #0]
 8007404:	f004 fbb4 	bl	800bb70 <USB_DevInit>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2202      	movs	r2, #2
 8007412:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e014      	b.n	8007444 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	2b01      	cmp	r3, #1
 8007430:	d102      	bne.n	8007438 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 f98c 	bl	8008750 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f005 fcf6 	bl	800ce2e <USB_DevDisconnect>

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800744c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_PCD_Start+0x1c>
 8007464:	2302      	movs	r3, #2
 8007466:	e020      	b.n	80074aa <HAL_PCD_Start+0x5e>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007474:	2b01      	cmp	r3, #1
 8007476:	d109      	bne.n	800748c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800747c:	2b01      	cmp	r3, #1
 800747e:	d005      	beq.n	800748c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4618      	mov	r0, r3
 8007492:	f004 faff 	bl	800ba94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f005 fca6 	bl	800cdec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80074b2:	b590      	push	{r4, r7, lr}
 80074b4:	b08d      	sub	sp, #52	; 0x34
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f005 fd64 	bl	800cf96 <USB_GetMode>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f040 84b7 	bne.w	8007e44 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f005 fcc8 	bl	800ce70 <USB_ReadInterrupts>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 84ad 	beq.w	8007e42 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	0a1b      	lsrs	r3, r3, #8
 80074f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4618      	mov	r0, r3
 8007502:	f005 fcb5 	bl	800ce70 <USB_ReadInterrupts>
 8007506:	4603      	mov	r3, r0
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b02      	cmp	r3, #2
 800750e:	d107      	bne.n	8007520 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695a      	ldr	r2, [r3, #20]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f002 0202 	and.w	r2, r2, #2
 800751e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f005 fca3 	bl	800ce70 <USB_ReadInterrupts>
 800752a:	4603      	mov	r3, r0
 800752c:	f003 0310 	and.w	r3, r3, #16
 8007530:	2b10      	cmp	r3, #16
 8007532:	d161      	bne.n	80075f8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	699a      	ldr	r2, [r3, #24]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 0210 	bic.w	r2, r2, #16
 8007542:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	f003 020f 	and.w	r2, r3, #15
 8007550:	4613      	mov	r3, r2
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	4413      	add	r3, r2
 8007560:	3304      	adds	r3, #4
 8007562:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	0c5b      	lsrs	r3, r3, #17
 8007568:	f003 030f 	and.w	r3, r3, #15
 800756c:	2b02      	cmp	r3, #2
 800756e:	d124      	bne.n	80075ba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007576:	4013      	ands	r3, r2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d035      	beq.n	80075e8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	091b      	lsrs	r3, r3, #4
 8007584:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800758a:	b29b      	uxth	r3, r3
 800758c:	461a      	mov	r2, r3
 800758e:	6a38      	ldr	r0, [r7, #32]
 8007590:	f005 fada 	bl	800cb48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	691a      	ldr	r2, [r3, #16]
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	091b      	lsrs	r3, r3, #4
 800759c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075a0:	441a      	add	r2, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	6a1a      	ldr	r2, [r3, #32]
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	091b      	lsrs	r3, r3, #4
 80075ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075b2:	441a      	add	r2, r3
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	621a      	str	r2, [r3, #32]
 80075b8:	e016      	b.n	80075e8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	0c5b      	lsrs	r3, r3, #17
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	2b06      	cmp	r3, #6
 80075c4:	d110      	bne.n	80075e8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80075cc:	2208      	movs	r2, #8
 80075ce:	4619      	mov	r1, r3
 80075d0:	6a38      	ldr	r0, [r7, #32]
 80075d2:	f005 fab9 	bl	800cb48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	6a1a      	ldr	r2, [r3, #32]
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	091b      	lsrs	r3, r3, #4
 80075de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075e2:	441a      	add	r2, r3
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	699a      	ldr	r2, [r3, #24]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0210 	orr.w	r2, r2, #16
 80075f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f005 fc37 	bl	800ce70 <USB_ReadInterrupts>
 8007602:	4603      	mov	r3, r0
 8007604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007608:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800760c:	f040 80a7 	bne.w	800775e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4618      	mov	r0, r3
 800761a:	f005 fc3c 	bl	800ce96 <USB_ReadDevAllOutEpInterrupt>
 800761e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007620:	e099      	b.n	8007756 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 808e 	beq.w	800774a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	4611      	mov	r1, r2
 8007638:	4618      	mov	r0, r3
 800763a:	f005 fc60 	bl	800cefe <USB_ReadDevOutEPInterrupt>
 800763e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00c      	beq.n	8007664 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007656:	461a      	mov	r2, r3
 8007658:	2301      	movs	r3, #1
 800765a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800765c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fef0 	bl	8008444 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f003 0308 	and.w	r3, r3, #8
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00c      	beq.n	8007688 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767a:	461a      	mov	r2, r3
 800767c:	2308      	movs	r3, #8
 800767e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 ffc6 	bl	8008614 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f003 0310 	and.w	r3, r3, #16
 800768e:	2b00      	cmp	r3, #0
 8007690:	d008      	beq.n	80076a4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769e:	461a      	mov	r2, r3
 80076a0:	2310      	movs	r3, #16
 80076a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d030      	beq.n	8007710 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b6:	2b80      	cmp	r3, #128	; 0x80
 80076b8:	d109      	bne.n	80076ce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076cc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80076ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d0:	4613      	mov	r3, r2
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	4413      	add	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	4413      	add	r3, r2
 80076e0:	3304      	adds	r3, #4
 80076e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	78db      	ldrb	r3, [r3, #3]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d108      	bne.n	80076fe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2200      	movs	r2, #0
 80076f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f007 ffef 	bl	800f6dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770a:	461a      	mov	r2, r3
 800770c:	2302      	movs	r3, #2
 800770e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b00      	cmp	r3, #0
 8007718:	d008      	beq.n	800772c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007726:	461a      	mov	r2, r3
 8007728:	2320      	movs	r3, #32
 800772a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d009      	beq.n	800774a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007742:	461a      	mov	r2, r3
 8007744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007748:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	3301      	adds	r3, #1
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	085b      	lsrs	r3, r3, #1
 8007754:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	2b00      	cmp	r3, #0
 800775a:	f47f af62 	bne.w	8007622 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f005 fb84 	bl	800ce70 <USB_ReadInterrupts>
 8007768:	4603      	mov	r3, r0
 800776a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800776e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007772:	f040 80db 	bne.w	800792c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f005 fba5 	bl	800ceca <USB_ReadDevAllInEpInterrupt>
 8007780:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007786:	e0cd      	b.n	8007924 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 80c2 	beq.w	8007918 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779a:	b2d2      	uxtb	r2, r2
 800779c:	4611      	mov	r1, r2
 800779e:	4618      	mov	r0, r3
 80077a0:	f005 fbcb 	bl	800cf3a <USB_ReadDevInEPInterrupt>
 80077a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d057      	beq.n	8007860 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	f003 030f 	and.w	r3, r3, #15
 80077b6:	2201      	movs	r2, #1
 80077b8:	fa02 f303 	lsl.w	r3, r2, r3
 80077bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	43db      	mvns	r3, r3
 80077ca:	69f9      	ldr	r1, [r7, #28]
 80077cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077d0:	4013      	ands	r3, r2
 80077d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	461a      	mov	r2, r3
 80077e2:	2301      	movs	r3, #1
 80077e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d132      	bne.n	8007854 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f2:	4613      	mov	r3, r2
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	440b      	add	r3, r1
 80077fc:	334c      	adds	r3, #76	; 0x4c
 80077fe:	6819      	ldr	r1, [r3, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007804:	4613      	mov	r3, r2
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	4413      	add	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4403      	add	r3, r0
 800780e:	3348      	adds	r3, #72	; 0x48
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4419      	add	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007818:	4613      	mov	r3, r2
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	4413      	add	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4403      	add	r3, r0
 8007822:	334c      	adds	r3, #76	; 0x4c
 8007824:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d113      	bne.n	8007854 <HAL_PCD_IRQHandler+0x3a2>
 800782c:	6879      	ldr	r1, [r7, #4]
 800782e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007830:	4613      	mov	r3, r2
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	440b      	add	r3, r1
 800783a:	3354      	adds	r3, #84	; 0x54
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d108      	bne.n	8007854 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800784c:	461a      	mov	r2, r3
 800784e:	2101      	movs	r1, #1
 8007850:	f005 fbd2 	bl	800cff8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	b2db      	uxtb	r3, r3
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f007 feb9 	bl	800f5d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f003 0308 	and.w	r3, r3, #8
 8007866:	2b00      	cmp	r3, #0
 8007868:	d008      	beq.n	800787c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007876:	461a      	mov	r2, r3
 8007878:	2308      	movs	r3, #8
 800787a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f003 0310 	and.w	r3, r3, #16
 8007882:	2b00      	cmp	r3, #0
 8007884:	d008      	beq.n	8007898 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007892:	461a      	mov	r2, r3
 8007894:	2310      	movs	r3, #16
 8007896:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d008      	beq.n	80078b4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ae:	461a      	mov	r2, r3
 80078b0:	2340      	movs	r3, #64	; 0x40
 80078b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d023      	beq.n	8007906 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80078be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078c0:	6a38      	ldr	r0, [r7, #32]
 80078c2:	f004 fab3 	bl	800be2c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80078c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c8:	4613      	mov	r3, r2
 80078ca:	00db      	lsls	r3, r3, #3
 80078cc:	4413      	add	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	3338      	adds	r3, #56	; 0x38
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	4413      	add	r3, r2
 80078d6:	3304      	adds	r3, #4
 80078d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	78db      	ldrb	r3, [r3, #3]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d108      	bne.n	80078f4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2200      	movs	r2, #0
 80078e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f007 ff06 	bl	800f700 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007900:	461a      	mov	r2, r3
 8007902:	2302      	movs	r3, #2
 8007904:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fd08 	bl	8008328 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	3301      	adds	r3, #1
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	085b      	lsrs	r3, r3, #1
 8007922:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007926:	2b00      	cmp	r3, #0
 8007928:	f47f af2e 	bne.w	8007788 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4618      	mov	r0, r3
 8007932:	f005 fa9d 	bl	800ce70 <USB_ReadInterrupts>
 8007936:	4603      	mov	r3, r0
 8007938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800793c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007940:	d122      	bne.n	8007988 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	69fa      	ldr	r2, [r7, #28]
 800794c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007950:	f023 0301 	bic.w	r3, r3, #1
 8007954:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800795c:	2b01      	cmp	r3, #1
 800795e:	d108      	bne.n	8007972 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007968:	2100      	movs	r1, #0
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 ff14 	bl	8008798 <HAL_PCDEx_LPM_Callback>
 8007970:	e002      	b.n	8007978 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f007 fea4 	bl	800f6c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	695a      	ldr	r2, [r3, #20]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4618      	mov	r0, r3
 800798e:	f005 fa6f 	bl	800ce70 <USB_ReadInterrupts>
 8007992:	4603      	mov	r3, r0
 8007994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800799c:	d112      	bne.n	80079c4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d102      	bne.n	80079b4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f007 fe60 	bl	800f674 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	695a      	ldr	r2, [r3, #20]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80079c2:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f005 fa51 	bl	800ce70 <USB_ReadInterrupts>
 80079ce:	4603      	mov	r3, r0
 80079d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079d8:	d121      	bne.n	8007a1e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	695a      	ldr	r2, [r3, #20]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80079e8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d111      	bne.n	8007a18 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a02:	089b      	lsrs	r3, r3, #2
 8007a04:	f003 020f 	and.w	r2, r3, #15
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007a0e:	2101      	movs	r1, #1
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fec1 	bl	8008798 <HAL_PCDEx_LPM_Callback>
 8007a16:	e002      	b.n	8007a1e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f007 fe2b 	bl	800f674 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f005 fa24 	bl	800ce70 <USB_ReadInterrupts>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a32:	f040 80b7 	bne.w	8007ba4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	69fa      	ldr	r2, [r7, #28]
 8007a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a44:	f023 0301 	bic.w	r3, r3, #1
 8007a48:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2110      	movs	r1, #16
 8007a50:	4618      	mov	r0, r3
 8007a52:	f004 f9eb 	bl	800be2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a56:	2300      	movs	r3, #0
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a5a:	e046      	b.n	8007aea <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a68:	461a      	mov	r2, r3
 8007a6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a6e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a80:	0151      	lsls	r1, r2, #5
 8007a82:	69fa      	ldr	r2, [r7, #28]
 8007a84:	440a      	add	r2, r1
 8007a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007aa2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ab4:	0151      	lsls	r1, r2, #5
 8007ab6:	69fa      	ldr	r2, [r7, #28]
 8007ab8:	440a      	add	r2, r1
 8007aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007abe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ac2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ad4:	0151      	lsls	r1, r2, #5
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	440a      	add	r2, r1
 8007ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ade:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ae2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d3b3      	bcc.n	8007a5c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	69fa      	ldr	r2, [r7, #28]
 8007afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b02:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007b06:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d016      	beq.n	8007b3e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b1a:	69fa      	ldr	r2, [r7, #28]
 8007b1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b20:	f043 030b 	orr.w	r3, r3, #11
 8007b24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b30:	69fa      	ldr	r2, [r7, #28]
 8007b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b36:	f043 030b 	orr.w	r3, r3, #11
 8007b3a:	6453      	str	r3, [r2, #68]	; 0x44
 8007b3c:	e015      	b.n	8007b6a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007b50:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007b54:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b64:	f043 030b 	orr.w	r3, r3, #11
 8007b68:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69fa      	ldr	r2, [r7, #28]
 8007b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b78:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b7c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f005 fa32 	bl	800cff8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695a      	ldr	r2, [r3, #20]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f005 f961 	bl	800ce70 <USB_ReadInterrupts>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bb8:	d124      	bne.n	8007c04 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f005 f9f7 	bl	800cfb2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f004 f9ac 	bl	800bf26 <USB_GetDevSpeed>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681c      	ldr	r4, [r3, #0]
 8007bda:	f000 ff1f 	bl	8008a1c <HAL_RCC_GetHCLKFreq>
 8007bde:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	4620      	mov	r0, r4
 8007bea:	f003 feb1 	bl	800b950 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f007 fd17 	bl	800f622 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695a      	ldr	r2, [r3, #20]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f005 f931 	bl	800ce70 <USB_ReadInterrupts>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	f003 0308 	and.w	r3, r3, #8
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d10a      	bne.n	8007c2e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f007 fcf4 	bl	800f606 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	695a      	ldr	r2, [r3, #20]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f002 0208 	and.w	r2, r2, #8
 8007c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f005 f91c 	bl	800ce70 <USB_ReadInterrupts>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3e:	2b80      	cmp	r3, #128	; 0x80
 8007c40:	d122      	bne.n	8007c88 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c4e:	2301      	movs	r3, #1
 8007c50:	627b      	str	r3, [r7, #36]	; 0x24
 8007c52:	e014      	b.n	8007c7e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007c54:	6879      	ldr	r1, [r7, #4]
 8007c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d105      	bne.n	8007c78 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fb27 	bl	80082c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d3e5      	bcc.n	8007c54 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f005 f8ef 	bl	800ce70 <USB_ReadInterrupts>
 8007c92:	4603      	mov	r3, r0
 8007c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c9c:	d13b      	bne.n	8007d16 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ca2:	e02b      	b.n	8007cfc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb8:	4613      	mov	r3, r2
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	3340      	adds	r3, #64	; 0x40
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d115      	bne.n	8007cf6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007cca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	da12      	bge.n	8007cf6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	4413      	add	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	440b      	add	r3, r1
 8007cde:	333f      	adds	r3, #63	; 0x3f
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fae8 	bl	80082c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d3ce      	bcc.n	8007ca4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	695a      	ldr	r2, [r3, #20]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f005 f8a8 	bl	800ce70 <USB_ReadInterrupts>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d2a:	d155      	bne.n	8007dd8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d30:	e045      	b.n	8007dbe <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d46:	4613      	mov	r3, r2
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d12e      	bne.n	8007db8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007d5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	da2b      	bge.n	8007db8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007d6c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d121      	bne.n	8007db8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007d74:	6879      	ldr	r1, [r7, #4]
 8007d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d78:	4613      	mov	r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	440b      	add	r3, r1
 8007d82:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007d86:	2201      	movs	r2, #1
 8007d88:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10a      	bne.n	8007db8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	69fa      	ldr	r2, [r7, #28]
 8007dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007db4:	6053      	str	r3, [r2, #4]
            break;
 8007db6:	e007      	b.n	8007dc8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	3301      	adds	r3, #1
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d3b4      	bcc.n	8007d32 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695a      	ldr	r2, [r3, #20]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f005 f847 	bl	800ce70 <USB_ReadInterrupts>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dec:	d10a      	bne.n	8007e04 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f007 fc98 	bl	800f724 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	695a      	ldr	r2, [r3, #20]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007e02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f005 f831 	bl	800ce70 <USB_ReadInterrupts>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d115      	bne.n	8007e44 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f007 fc88 	bl	800f740 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6859      	ldr	r1, [r3, #4]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	605a      	str	r2, [r3, #4]
 8007e40:	e000      	b.n	8007e44 <HAL_PCD_IRQHandler+0x992>
      return;
 8007e42:	bf00      	nop
    }
  }
}
 8007e44:	3734      	adds	r7, #52	; 0x34
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd90      	pop	{r4, r7, pc}

08007e4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	460b      	mov	r3, r1
 8007e54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d101      	bne.n	8007e64 <HAL_PCD_SetAddress+0x1a>
 8007e60:	2302      	movs	r3, #2
 8007e62:	e013      	b.n	8007e8c <HAL_PCD_SetAddress+0x42>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	78fa      	ldrb	r2, [r7, #3]
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f004 ff8f 	bl	800cda0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	4608      	mov	r0, r1
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	70fb      	strb	r3, [r7, #3]
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	803b      	strh	r3, [r7, #0]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	da0f      	bge.n	8007eda <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	f003 020f 	and.w	r2, r3, #15
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	3338      	adds	r3, #56	; 0x38
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	4413      	add	r3, r2
 8007ece:	3304      	adds	r3, #4
 8007ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	705a      	strb	r2, [r3, #1]
 8007ed8:	e00f      	b.n	8007efa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007eda:	78fb      	ldrb	r3, [r7, #3]
 8007edc:	f003 020f 	and.w	r2, r3, #15
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	4413      	add	r3, r2
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007f06:	883a      	ldrh	r2, [r7, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	78ba      	ldrb	r2, [r7, #2]
 8007f10:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	785b      	ldrb	r3, [r3, #1]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d004      	beq.n	8007f24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007f24:	78bb      	ldrb	r3, [r7, #2]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d102      	bne.n	8007f30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d101      	bne.n	8007f3e <HAL_PCD_EP_Open+0xaa>
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e00e      	b.n	8007f5c <HAL_PCD_EP_Open+0xc8>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68f9      	ldr	r1, [r7, #12]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f004 f80f 	bl	800bf70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	da0f      	bge.n	8007f98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	f003 020f 	and.w	r2, r3, #15
 8007f7e:	4613      	mov	r3, r2
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	3338      	adds	r3, #56	; 0x38
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2201      	movs	r2, #1
 8007f94:	705a      	strb	r2, [r3, #1]
 8007f96:	e00f      	b.n	8007fb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	f003 020f 	and.w	r2, r3, #15
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	00db      	lsls	r3, r3, #3
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	3304      	adds	r3, #4
 8007fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d101      	bne.n	8007fd2 <HAL_PCD_EP_Close+0x6e>
 8007fce:	2302      	movs	r3, #2
 8007fd0:	e00e      	b.n	8007ff0 <HAL_PCD_EP_Close+0x8c>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68f9      	ldr	r1, [r7, #12]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f004 f84d 	bl	800c080 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	607a      	str	r2, [r7, #4]
 8008002:	603b      	str	r3, [r7, #0]
 8008004:	460b      	mov	r3, r1
 8008006:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008008:	7afb      	ldrb	r3, [r7, #11]
 800800a:	f003 020f 	and.w	r2, r3, #15
 800800e:	4613      	mov	r3, r2
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	4413      	add	r3, r2
 800801e:	3304      	adds	r3, #4
 8008020:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2200      	movs	r2, #0
 8008032:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	2200      	movs	r2, #0
 8008038:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800803a:	7afb      	ldrb	r3, [r7, #11]
 800803c:	f003 030f 	and.w	r3, r3, #15
 8008040:	b2da      	uxtb	r2, r3
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d102      	bne.n	8008054 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008054:	7afb      	ldrb	r3, [r7, #11]
 8008056:	f003 030f 	and.w	r3, r3, #15
 800805a:	2b00      	cmp	r3, #0
 800805c:	d109      	bne.n	8008072 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	461a      	mov	r2, r3
 800806a:	6979      	ldr	r1, [r7, #20]
 800806c:	f004 fb2c 	bl	800c6c8 <USB_EP0StartXfer>
 8008070:	e008      	b.n	8008084 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6818      	ldr	r0, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	461a      	mov	r2, r3
 800807e:	6979      	ldr	r1, [r7, #20]
 8008080:	f004 f8da 	bl	800c238 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	460b      	mov	r3, r1
 8008098:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800809a:	78fb      	ldrb	r3, [r7, #3]
 800809c:	f003 020f 	and.w	r2, r3, #15
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	4613      	mov	r3, r2
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	440b      	add	r3, r1
 80080ac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80080b0:	681b      	ldr	r3, [r3, #0]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b086      	sub	sp, #24
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
 80080ca:	460b      	mov	r3, r1
 80080cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080ce:	7afb      	ldrb	r3, [r7, #11]
 80080d0:	f003 020f 	and.w	r2, r3, #15
 80080d4:	4613      	mov	r3, r2
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	4413      	add	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	3338      	adds	r3, #56	; 0x38
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4413      	add	r3, r2
 80080e2:	3304      	adds	r3, #4
 80080e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2200      	movs	r2, #0
 80080f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2201      	movs	r2, #1
 80080fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080fe:	7afb      	ldrb	r3, [r7, #11]
 8008100:	f003 030f 	and.w	r3, r3, #15
 8008104:	b2da      	uxtb	r2, r3
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d102      	bne.n	8008118 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	f003 030f 	and.w	r3, r3, #15
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6818      	ldr	r0, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	b2db      	uxtb	r3, r3
 800812c:	461a      	mov	r2, r3
 800812e:	6979      	ldr	r1, [r7, #20]
 8008130:	f004 faca 	bl	800c6c8 <USB_EP0StartXfer>
 8008134:	e008      	b.n	8008148 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	b2db      	uxtb	r3, r3
 8008140:	461a      	mov	r2, r3
 8008142:	6979      	ldr	r1, [r7, #20]
 8008144:	f004 f878 	bl	800c238 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800815e:	78fb      	ldrb	r3, [r7, #3]
 8008160:	f003 020f 	and.w	r2, r3, #15
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	429a      	cmp	r2, r3
 800816a:	d901      	bls.n	8008170 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e050      	b.n	8008212 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008174:	2b00      	cmp	r3, #0
 8008176:	da0f      	bge.n	8008198 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	f003 020f 	and.w	r2, r3, #15
 800817e:	4613      	mov	r3, r2
 8008180:	00db      	lsls	r3, r3, #3
 8008182:	4413      	add	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	3338      	adds	r3, #56	; 0x38
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	4413      	add	r3, r2
 800818c:	3304      	adds	r3, #4
 800818e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	705a      	strb	r2, [r3, #1]
 8008196:	e00d      	b.n	80081b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008198:	78fa      	ldrb	r2, [r7, #3]
 800819a:	4613      	mov	r3, r2
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	4413      	add	r3, r2
 80081aa:	3304      	adds	r3, #4
 80081ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2201      	movs	r2, #1
 80081b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	f003 030f 	and.w	r3, r3, #15
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_PCD_EP_SetStall+0x82>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e01e      	b.n	8008212 <HAL_PCD_EP_SetStall+0xc0>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68f9      	ldr	r1, [r7, #12]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f004 fd08 	bl	800cbf8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	f003 030f 	and.w	r3, r3, #15
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10a      	bne.n	8008208 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6818      	ldr	r0, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	b2d9      	uxtb	r1, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008202:	461a      	mov	r2, r3
 8008204:	f004 fef8 	bl	800cff8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	460b      	mov	r3, r1
 8008224:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008226:	78fb      	ldrb	r3, [r7, #3]
 8008228:	f003 020f 	and.w	r2, r3, #15
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	429a      	cmp	r2, r3
 8008232:	d901      	bls.n	8008238 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e042      	b.n	80082be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800823c:	2b00      	cmp	r3, #0
 800823e:	da0f      	bge.n	8008260 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	f003 020f 	and.w	r2, r3, #15
 8008246:	4613      	mov	r3, r2
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	4413      	add	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	3338      	adds	r3, #56	; 0x38
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	4413      	add	r3, r2
 8008254:	3304      	adds	r3, #4
 8008256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2201      	movs	r2, #1
 800825c:	705a      	strb	r2, [r3, #1]
 800825e:	e00f      	b.n	8008280 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	f003 020f 	and.w	r2, r3, #15
 8008266:	4613      	mov	r3, r2
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	4413      	add	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	4413      	add	r3, r2
 8008276:	3304      	adds	r3, #4
 8008278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	b2da      	uxtb	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008298:	2b01      	cmp	r3, #1
 800829a:	d101      	bne.n	80082a0 <HAL_PCD_EP_ClrStall+0x86>
 800829c:	2302      	movs	r3, #2
 800829e:	e00e      	b.n	80082be <HAL_PCD_EP_ClrStall+0xa4>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68f9      	ldr	r1, [r7, #12]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f004 fd10 	bl	800ccd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80082d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da0c      	bge.n	80082f4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082da:	78fb      	ldrb	r3, [r7, #3]
 80082dc:	f003 020f 	and.w	r2, r3, #15
 80082e0:	4613      	mov	r3, r2
 80082e2:	00db      	lsls	r3, r3, #3
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	3338      	adds	r3, #56	; 0x38
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	4413      	add	r3, r2
 80082ee:	3304      	adds	r3, #4
 80082f0:	60fb      	str	r3, [r7, #12]
 80082f2:	e00c      	b.n	800830e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082f4:	78fb      	ldrb	r3, [r7, #3]
 80082f6:	f003 020f 	and.w	r2, r3, #15
 80082fa:	4613      	mov	r3, r2
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	4413      	add	r3, r2
 800830a:	3304      	adds	r3, #4
 800830c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68f9      	ldr	r1, [r7, #12]
 8008314:	4618      	mov	r0, r3
 8008316:	f004 fb2f 	bl	800c978 <USB_EPStopXfer>
 800831a:	4603      	mov	r3, r0
 800831c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800831e:	7afb      	ldrb	r3, [r7, #11]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08a      	sub	sp, #40	; 0x28
 800832c:	af02      	add	r7, sp, #8
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	4613      	mov	r3, r2
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	4413      	add	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	3338      	adds	r3, #56	; 0x38
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	4413      	add	r3, r2
 800834c:	3304      	adds	r3, #4
 800834e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a1a      	ldr	r2, [r3, #32]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	429a      	cmp	r2, r3
 800835a:	d901      	bls.n	8008360 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e06c      	b.n	800843a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	699a      	ldr	r2, [r3, #24]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	69fa      	ldr	r2, [r7, #28]
 8008372:	429a      	cmp	r2, r3
 8008374:	d902      	bls.n	800837c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	3303      	adds	r3, #3
 8008380:	089b      	lsrs	r3, r3, #2
 8008382:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008384:	e02b      	b.n	80083de <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	69fa      	ldr	r2, [r7, #28]
 8008398:	429a      	cmp	r2, r3
 800839a:	d902      	bls.n	80083a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	3303      	adds	r3, #3
 80083a6:	089b      	lsrs	r3, r3, #2
 80083a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6919      	ldr	r1, [r3, #16]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	4603      	mov	r3, r0
 80083c0:	6978      	ldr	r0, [r7, #20]
 80083c2:	f004 fb83 	bl	800cacc <USB_WritePacket>

    ep->xfer_buff  += len;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	441a      	add	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6a1a      	ldr	r2, [r3, #32]
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	441a      	add	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d809      	bhi.n	8008408 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6a1a      	ldr	r2, [r3, #32]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d203      	bcs.n	8008408 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1be      	bne.n	8008386 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	699a      	ldr	r2, [r3, #24]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6a1b      	ldr	r3, [r3, #32]
 8008410:	429a      	cmp	r2, r3
 8008412:	d811      	bhi.n	8008438 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	f003 030f 	and.w	r3, r3, #15
 800841a:	2201      	movs	r2, #1
 800841c:	fa02 f303 	lsl.w	r3, r2, r3
 8008420:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	43db      	mvns	r3, r3
 800842e:	6939      	ldr	r1, [r7, #16]
 8008430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008434:	4013      	ands	r3, r2
 8008436:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3720      	adds	r7, #32
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	333c      	adds	r3, #60	; 0x3c
 800845c:	3304      	adds	r3, #4
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d17b      	bne.n	8008572 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	2b00      	cmp	r3, #0
 8008482:	d015      	beq.n	80084b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	4a61      	ldr	r2, [pc, #388]	; (800860c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008488:	4293      	cmp	r3, r2
 800848a:	f240 80b9 	bls.w	8008600 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 80b3 	beq.w	8008600 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a6:	461a      	mov	r2, r3
 80084a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ac:	6093      	str	r3, [r2, #8]
 80084ae:	e0a7      	b.n	8008600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d009      	beq.n	80084ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c6:	461a      	mov	r2, r3
 80084c8:	2320      	movs	r3, #32
 80084ca:	6093      	str	r3, [r2, #8]
 80084cc:	e098      	b.n	8008600 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f040 8093 	bne.w	8008600 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	4a4b      	ldr	r2, [pc, #300]	; (800860c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d90f      	bls.n	8008502 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f8:	461a      	mov	r2, r3
 80084fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084fe:	6093      	str	r3, [r2, #8]
 8008500:	e07e      	b.n	8008600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	4613      	mov	r3, r2
 8008506:	00db      	lsls	r3, r3, #3
 8008508:	4413      	add	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	4413      	add	r3, r2
 8008514:	3304      	adds	r3, #4
 8008516:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	69da      	ldr	r2, [r3, #28]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	0159      	lsls	r1, r3, #5
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	440b      	add	r3, r1
 8008524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d114      	bne.n	8008564 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d109      	bne.n	8008556 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800854c:	461a      	mov	r2, r3
 800854e:	2101      	movs	r1, #1
 8008550:	f004 fd52 	bl	800cff8 <USB_EP0_OutStart>
 8008554:	e006      	b.n	8008564 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	691a      	ldr	r2, [r3, #16]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	441a      	add	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f007 f816 	bl	800f59c <HAL_PCD_DataOutStageCallback>
 8008570:	e046      	b.n	8008600 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	4a26      	ldr	r2, [pc, #152]	; (8008610 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d124      	bne.n	80085c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00a      	beq.n	800859a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008590:	461a      	mov	r2, r3
 8008592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008596:	6093      	str	r3, [r2, #8]
 8008598:	e032      	b.n	8008600 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	f003 0320 	and.w	r3, r3, #32
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d008      	beq.n	80085b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b0:	461a      	mov	r2, r3
 80085b2:	2320      	movs	r3, #32
 80085b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f006 ffed 	bl	800f59c <HAL_PCD_DataOutStageCallback>
 80085c2:	e01d      	b.n	8008600 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d114      	bne.n	80085f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	4613      	mov	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	440b      	add	r3, r1
 80085d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d108      	bne.n	80085f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80085ec:	461a      	mov	r2, r3
 80085ee:	2100      	movs	r1, #0
 80085f0:	f004 fd02 	bl	800cff8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f006 ffce 	bl	800f59c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3720      	adds	r7, #32
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	4f54300a 	.word	0x4f54300a
 8008610:	4f54310a 	.word	0x4f54310a

08008614 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	333c      	adds	r3, #60	; 0x3c
 800862c:	3304      	adds	r3, #4
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	4a15      	ldr	r2, [pc, #84]	; (800869c <PCD_EP_OutSetupPacket_int+0x88>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d90e      	bls.n	8008668 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008650:	2b00      	cmp	r3, #0
 8008652:	d009      	beq.n	8008668 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008660:	461a      	mov	r2, r3
 8008662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008666:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f006 ff85 	bl	800f578 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	4a0a      	ldr	r2, [pc, #40]	; (800869c <PCD_EP_OutSetupPacket_int+0x88>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d90c      	bls.n	8008690 <PCD_EP_OutSetupPacket_int+0x7c>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d108      	bne.n	8008690 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008688:	461a      	mov	r2, r3
 800868a:	2101      	movs	r1, #1
 800868c:	f004 fcb4 	bl	800cff8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	4f54300a 	.word	0x4f54300a

080086a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
 80086ac:	4613      	mov	r3, r2
 80086ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80086b8:	78fb      	ldrb	r3, [r7, #3]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d107      	bne.n	80086ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80086be:	883b      	ldrh	r3, [r7, #0]
 80086c0:	0419      	lsls	r1, r3, #16
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	629a      	str	r2, [r3, #40]	; 0x28
 80086cc:	e028      	b.n	8008720 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	4413      	add	r3, r2
 80086da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]
 80086e0:	e00d      	b.n	80086fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	7bfb      	ldrb	r3, [r7, #15]
 80086e8:	3340      	adds	r3, #64	; 0x40
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	0c1b      	lsrs	r3, r3, #16
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	4413      	add	r3, r2
 80086f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	3301      	adds	r3, #1
 80086fc:	73fb      	strb	r3, [r7, #15]
 80086fe:	7bfa      	ldrb	r2, [r7, #15]
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	3b01      	subs	r3, #1
 8008704:	429a      	cmp	r2, r3
 8008706:	d3ec      	bcc.n	80086e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008708:	883b      	ldrh	r3, [r7, #0]
 800870a:	0418      	lsls	r0, r3, #16
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6819      	ldr	r1, [r3, #0]
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	3b01      	subs	r3, #1
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	4302      	orrs	r2, r0
 8008718:	3340      	adds	r3, #64	; 0x40
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	440b      	add	r3, r1
 800871e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	460b      	mov	r3, r1
 8008738:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	887a      	ldrh	r2, [r7, #2]
 8008740:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800877e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008782:	f043 0303 	orr.w	r3, r3, #3
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80087ba:	2300      	movs	r3, #0
 80087bc:	603b      	str	r3, [r7, #0]
 80087be:	4b20      	ldr	r3, [pc, #128]	; (8008840 <HAL_PWREx_EnableOverDrive+0x90>)
 80087c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c2:	4a1f      	ldr	r2, [pc, #124]	; (8008840 <HAL_PWREx_EnableOverDrive+0x90>)
 80087c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087c8:	6413      	str	r3, [r2, #64]	; 0x40
 80087ca:	4b1d      	ldr	r3, [pc, #116]	; (8008840 <HAL_PWREx_EnableOverDrive+0x90>)
 80087cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80087d6:	4b1b      	ldr	r3, [pc, #108]	; (8008844 <HAL_PWREx_EnableOverDrive+0x94>)
 80087d8:	2201      	movs	r2, #1
 80087da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087dc:	f7fb fd24 	bl	8004228 <HAL_GetTick>
 80087e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80087e2:	e009      	b.n	80087f8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80087e4:	f7fb fd20 	bl	8004228 <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087f2:	d901      	bls.n	80087f8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e01f      	b.n	8008838 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80087f8:	4b13      	ldr	r3, [pc, #76]	; (8008848 <HAL_PWREx_EnableOverDrive+0x98>)
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008804:	d1ee      	bne.n	80087e4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008806:	4b11      	ldr	r3, [pc, #68]	; (800884c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008808:	2201      	movs	r2, #1
 800880a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800880c:	f7fb fd0c 	bl	8004228 <HAL_GetTick>
 8008810:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008812:	e009      	b.n	8008828 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008814:	f7fb fd08 	bl	8004228 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008822:	d901      	bls.n	8008828 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e007      	b.n	8008838 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008828:	4b07      	ldr	r3, [pc, #28]	; (8008848 <HAL_PWREx_EnableOverDrive+0x98>)
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008834:	d1ee      	bne.n	8008814 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40023800 	.word	0x40023800
 8008844:	420e0040 	.word	0x420e0040
 8008848:	40007000 	.word	0x40007000
 800884c:	420e0044 	.word	0x420e0044

08008850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e0cc      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008864:	4b68      	ldr	r3, [pc, #416]	; (8008a08 <HAL_RCC_ClockConfig+0x1b8>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 030f 	and.w	r3, r3, #15
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d90c      	bls.n	800888c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008872:	4b65      	ldr	r3, [pc, #404]	; (8008a08 <HAL_RCC_ClockConfig+0x1b8>)
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800887a:	4b63      	ldr	r3, [pc, #396]	; (8008a08 <HAL_RCC_ClockConfig+0x1b8>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	429a      	cmp	r2, r3
 8008886:	d001      	beq.n	800888c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e0b8      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b00      	cmp	r3, #0
 8008896:	d020      	beq.n	80088da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d005      	beq.n	80088b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088a4:	4b59      	ldr	r3, [pc, #356]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	4a58      	ldr	r2, [pc, #352]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 80088aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0308 	and.w	r3, r3, #8
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088bc:	4b53      	ldr	r3, [pc, #332]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	4a52      	ldr	r2, [pc, #328]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 80088c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80088c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088c8:	4b50      	ldr	r3, [pc, #320]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	494d      	ldr	r1, [pc, #308]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d044      	beq.n	8008970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d107      	bne.n	80088fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088ee:	4b47      	ldr	r3, [pc, #284]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d119      	bne.n	800892e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e07f      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d003      	beq.n	800890e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800890a:	2b03      	cmp	r3, #3
 800890c:	d107      	bne.n	800891e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800890e:	4b3f      	ldr	r3, [pc, #252]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d109      	bne.n	800892e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e06f      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800891e:	4b3b      	ldr	r3, [pc, #236]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e067      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800892e:	4b37      	ldr	r3, [pc, #220]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f023 0203 	bic.w	r2, r3, #3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	4934      	ldr	r1, [pc, #208]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 800893c:	4313      	orrs	r3, r2
 800893e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008940:	f7fb fc72 	bl	8004228 <HAL_GetTick>
 8008944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008946:	e00a      	b.n	800895e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008948:	f7fb fc6e 	bl	8004228 <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	f241 3288 	movw	r2, #5000	; 0x1388
 8008956:	4293      	cmp	r3, r2
 8008958:	d901      	bls.n	800895e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e04f      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800895e:	4b2b      	ldr	r3, [pc, #172]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 020c 	and.w	r2, r3, #12
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	429a      	cmp	r2, r3
 800896e:	d1eb      	bne.n	8008948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008970:	4b25      	ldr	r3, [pc, #148]	; (8008a08 <HAL_RCC_ClockConfig+0x1b8>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 030f 	and.w	r3, r3, #15
 8008978:	683a      	ldr	r2, [r7, #0]
 800897a:	429a      	cmp	r2, r3
 800897c:	d20c      	bcs.n	8008998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800897e:	4b22      	ldr	r3, [pc, #136]	; (8008a08 <HAL_RCC_ClockConfig+0x1b8>)
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	b2d2      	uxtb	r2, r2
 8008984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008986:	4b20      	ldr	r3, [pc, #128]	; (8008a08 <HAL_RCC_ClockConfig+0x1b8>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 030f 	and.w	r3, r3, #15
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	429a      	cmp	r2, r3
 8008992:	d001      	beq.n	8008998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e032      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0304 	and.w	r3, r3, #4
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d008      	beq.n	80089b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089a4:	4b19      	ldr	r3, [pc, #100]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	4916      	ldr	r1, [pc, #88]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0308 	and.w	r3, r3, #8
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d009      	beq.n	80089d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089c2:	4b12      	ldr	r3, [pc, #72]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	00db      	lsls	r3, r3, #3
 80089d0:	490e      	ldr	r1, [pc, #56]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80089d6:	f000 fb6b 	bl	80090b0 <HAL_RCC_GetSysClockFreq>
 80089da:	4602      	mov	r2, r0
 80089dc:	4b0b      	ldr	r3, [pc, #44]	; (8008a0c <HAL_RCC_ClockConfig+0x1bc>)
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	091b      	lsrs	r3, r3, #4
 80089e2:	f003 030f 	and.w	r3, r3, #15
 80089e6:	490a      	ldr	r1, [pc, #40]	; (8008a10 <HAL_RCC_ClockConfig+0x1c0>)
 80089e8:	5ccb      	ldrb	r3, [r1, r3]
 80089ea:	fa22 f303 	lsr.w	r3, r2, r3
 80089ee:	4a09      	ldr	r2, [pc, #36]	; (8008a14 <HAL_RCC_ClockConfig+0x1c4>)
 80089f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <HAL_RCC_ClockConfig+0x1c8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fb fbd2 	bl	80041a0 <HAL_InitTick>

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	40023c00 	.word	0x40023c00
 8008a0c:	40023800 	.word	0x40023800
 8008a10:	0800fdd8 	.word	0x0800fdd8
 8008a14:	20000000 	.word	0x20000000
 8008a18:	20000004 	.word	0x20000004

08008a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a20:	4b03      	ldr	r3, [pc, #12]	; (8008a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a22:	681b      	ldr	r3, [r3, #0]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	20000000 	.word	0x20000000

08008a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008a38:	f7ff fff0 	bl	8008a1c <HAL_RCC_GetHCLKFreq>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	4b05      	ldr	r3, [pc, #20]	; (8008a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	0a9b      	lsrs	r3, r3, #10
 8008a44:	f003 0307 	and.w	r3, r3, #7
 8008a48:	4903      	ldr	r1, [pc, #12]	; (8008a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a4a:	5ccb      	ldrb	r3, [r1, r3]
 8008a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	40023800 	.word	0x40023800
 8008a58:	0800fde8 	.word	0x0800fde8

08008a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08c      	sub	sp, #48	; 0x30
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0301 	and.w	r3, r3, #1
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d010      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008a94:	4b6f      	ldr	r3, [pc, #444]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a9a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa2:	496c      	ldr	r1, [pc, #432]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d010      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008ac2:	4b64      	ldr	r3, [pc, #400]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ac8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad0:	4960      	ldr	r1, [pc, #384]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d017      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008af0:	4b58      	ldr	r3, [pc, #352]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008af6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afe:	4955      	ldr	r1, [pc, #340]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b00:	4313      	orrs	r3, r2
 8008b02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b0e:	d101      	bne.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8008b10:	2301      	movs	r3, #1
 8008b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0308 	and.w	r3, r3, #8
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d017      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008b2c:	4b49      	ldr	r3, [pc, #292]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3a:	4946      	ldr	r1, [pc, #280]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b4a:	d101      	bne.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0320 	and.w	r3, r3, #32
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 808a 	beq.w	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60bb      	str	r3, [r7, #8]
 8008b6e:	4b39      	ldr	r3, [pc, #228]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	4a38      	ldr	r2, [pc, #224]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b78:	6413      	str	r3, [r2, #64]	; 0x40
 8008b7a:	4b36      	ldr	r3, [pc, #216]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b82:	60bb      	str	r3, [r7, #8]
 8008b84:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008b86:	4b34      	ldr	r3, [pc, #208]	; (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a33      	ldr	r2, [pc, #204]	; (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b92:	f7fb fb49 	bl	8004228 <HAL_GetTick>
 8008b96:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b98:	e008      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b9a:	f7fb fb45 	bl	8004228 <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d901      	bls.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e278      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008bac:	4b2a      	ldr	r3, [pc, #168]	; (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d0f0      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008bb8:	4b26      	ldr	r3, [pc, #152]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bc0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d02f      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bd0:	6a3a      	ldr	r2, [r7, #32]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d028      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bd6:	4b1f      	ldr	r3, [pc, #124]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bde:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008be0:	4b1e      	ldr	r3, [pc, #120]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008be2:	2201      	movs	r2, #1
 8008be4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008be6:	4b1d      	ldr	r3, [pc, #116]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008bec:	4a19      	ldr	r2, [pc, #100]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008bf2:	4b18      	ldr	r3, [pc, #96]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d114      	bne.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008bfe:	f7fb fb13 	bl	8004228 <HAL_GetTick>
 8008c02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c04:	e00a      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c06:	f7fb fb0f 	bl	8004228 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d901      	bls.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e240      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c1c:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d0ee      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c34:	d114      	bne.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8008c36:	4b07      	ldr	r3, [pc, #28]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c4a:	4902      	ldr	r1, [pc, #8]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	608b      	str	r3, [r1, #8]
 8008c50:	e00c      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8008c52:	bf00      	nop
 8008c54:	40023800 	.word	0x40023800
 8008c58:	40007000 	.word	0x40007000
 8008c5c:	42470e40 	.word	0x42470e40
 8008c60:	4b4a      	ldr	r3, [pc, #296]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	4a49      	ldr	r2, [pc, #292]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008c6a:	6093      	str	r3, [r2, #8]
 8008c6c:	4b47      	ldr	r3, [pc, #284]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c78:	4944      	ldr	r1, [pc, #272]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0310 	and.w	r3, r3, #16
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d004      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8008c90:	4b3f      	ldr	r3, [pc, #252]	; (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8008c92:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00a      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008ca0:	4b3a      	ldr	r3, [pc, #232]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ca6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cae:	4937      	ldr	r1, [pc, #220]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008cc2:	4b32      	ldr	r3, [pc, #200]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cc8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cd0:	492e      	ldr	r1, [pc, #184]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d011      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008ce4:	4b29      	ldr	r3, [pc, #164]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cea:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf2:	4926      	ldr	r1, [pc, #152]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d02:	d101      	bne.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8008d04:	2301      	movs	r3, #1
 8008d06:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00a      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008d14:	4b1d      	ldr	r3, [pc, #116]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d22:	491a      	ldr	r1, [pc, #104]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d011      	beq.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8008d36:	4b15      	ldr	r3, [pc, #84]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d3c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d44:	4911      	ldr	r1, [pc, #68]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d54:	d101      	bne.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8008d56:	2301      	movs	r3, #1
 8008d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d005      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d68:	f040 80ff 	bne.w	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008d6c:	4b09      	ldr	r3, [pc, #36]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008d72:	f7fb fa59 	bl	8004228 <HAL_GetTick>
 8008d76:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d78:	e00e      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008d7a:	f7fb fa55 	bl	8004228 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d907      	bls.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e188      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008d8c:	40023800 	.word	0x40023800
 8008d90:	424711e0 	.word	0x424711e0
 8008d94:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d98:	4b7e      	ldr	r3, [pc, #504]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1ea      	bne.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d003      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d009      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d028      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d124      	bne.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008dcc:	4b71      	ldr	r3, [pc, #452]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dd2:	0c1b      	lsrs	r3, r3, #16
 8008dd4:	f003 0303 	and.w	r3, r3, #3
 8008dd8:	3301      	adds	r3, #1
 8008dda:	005b      	lsls	r3, r3, #1
 8008ddc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008dde:	4b6d      	ldr	r3, [pc, #436]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008de4:	0e1b      	lsrs	r3, r3, #24
 8008de6:	f003 030f 	and.w	r3, r3, #15
 8008dea:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	019b      	lsls	r3, r3, #6
 8008df6:	431a      	orrs	r2, r3
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	085b      	lsrs	r3, r3, #1
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	041b      	lsls	r3, r3, #16
 8008e00:	431a      	orrs	r2, r3
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	061b      	lsls	r3, r3, #24
 8008e06:	431a      	orrs	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	071b      	lsls	r3, r3, #28
 8008e0e:	4961      	ldr	r1, [pc, #388]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e10:	4313      	orrs	r3, r2
 8008e12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0304 	and.w	r3, r3, #4
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d004      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e2a:	d00a      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d035      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e40:	d130      	bne.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008e42:	4b54      	ldr	r3, [pc, #336]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e48:	0c1b      	lsrs	r3, r3, #16
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	3301      	adds	r3, #1
 8008e50:	005b      	lsls	r3, r3, #1
 8008e52:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008e54:	4b4f      	ldr	r3, [pc, #316]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e5a:	0f1b      	lsrs	r3, r3, #28
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	019b      	lsls	r3, r3, #6
 8008e6c:	431a      	orrs	r2, r3
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	085b      	lsrs	r3, r3, #1
 8008e72:	3b01      	subs	r3, #1
 8008e74:	041b      	lsls	r3, r3, #16
 8008e76:	431a      	orrs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	061b      	lsls	r3, r3, #24
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	071b      	lsls	r3, r3, #28
 8008e84:	4943      	ldr	r1, [pc, #268]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008e8c:	4b41      	ldr	r3, [pc, #260]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e92:	f023 021f 	bic.w	r2, r3, #31
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	493d      	ldr	r1, [pc, #244]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d029      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eb8:	d124      	bne.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008eba:	4b36      	ldr	r3, [pc, #216]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ec0:	0c1b      	lsrs	r3, r3, #16
 8008ec2:	f003 0303 	and.w	r3, r3, #3
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008ecc:	4b31      	ldr	r3, [pc, #196]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ed2:	0f1b      	lsrs	r3, r3, #28
 8008ed4:	f003 0307 	and.w	r3, r3, #7
 8008ed8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	019b      	lsls	r3, r3, #6
 8008ee4:	431a      	orrs	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	085b      	lsrs	r3, r3, #1
 8008eec:	3b01      	subs	r3, #1
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	061b      	lsls	r3, r3, #24
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	071b      	lsls	r3, r3, #28
 8008efc:	4925      	ldr	r1, [pc, #148]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d016      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	019b      	lsls	r3, r3, #6
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	085b      	lsrs	r3, r3, #1
 8008f22:	3b01      	subs	r3, #1
 8008f24:	041b      	lsls	r3, r3, #16
 8008f26:	431a      	orrs	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	061b      	lsls	r3, r3, #24
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	071b      	lsls	r3, r3, #28
 8008f36:	4917      	ldr	r1, [pc, #92]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008f3e:	4b16      	ldr	r3, [pc, #88]	; (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8008f40:	2201      	movs	r2, #1
 8008f42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f44:	f7fb f970 	bl	8004228 <HAL_GetTick>
 8008f48:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008f4a:	e008      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008f4c:	f7fb f96c 	bl	8004228 <HAL_GetTick>
 8008f50:	4602      	mov	r2, r0
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d901      	bls.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e09f      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008f5e:	4b0d      	ldr	r3, [pc, #52]	; (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d0f0      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8008f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	f040 8095 	bne.w	800909c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008f72:	4b0a      	ldr	r3, [pc, #40]	; (8008f9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f78:	f7fb f956 	bl	8004228 <HAL_GetTick>
 8008f7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008f7e:	e00f      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008f80:	f7fb f952 	bl	8004228 <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d908      	bls.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e085      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008f92:	bf00      	nop
 8008f94:	40023800 	.word	0x40023800
 8008f98:	42470068 	.word	0x42470068
 8008f9c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008fa0:	4b41      	ldr	r3, [pc, #260]	; (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fac:	d0e8      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d003      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d009      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d02b      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d127      	bne.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008fd6:	4b34      	ldr	r3, [pc, #208]	; (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fdc:	0c1b      	lsrs	r3, r3, #16
 8008fde:	f003 0303 	and.w	r3, r3, #3
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	005b      	lsls	r3, r3, #1
 8008fe6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	699a      	ldr	r2, [r3, #24]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	019b      	lsls	r3, r3, #6
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	085b      	lsrs	r3, r3, #1
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	041b      	lsls	r3, r3, #16
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009002:	061b      	lsls	r3, r3, #24
 8009004:	4928      	ldr	r1, [pc, #160]	; (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009006:	4313      	orrs	r3, r2
 8009008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800900c:	4b26      	ldr	r3, [pc, #152]	; (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800900e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009012:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901a:	3b01      	subs	r3, #1
 800901c:	021b      	lsls	r3, r3, #8
 800901e:	4922      	ldr	r1, [pc, #136]	; (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009020:	4313      	orrs	r3, r2
 8009022:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800902e:	2b00      	cmp	r3, #0
 8009030:	d01d      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800903a:	d118      	bne.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800903c:	4b1a      	ldr	r3, [pc, #104]	; (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800903e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009042:	0e1b      	lsrs	r3, r3, #24
 8009044:	f003 030f 	and.w	r3, r3, #15
 8009048:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	699a      	ldr	r2, [r3, #24]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	019b      	lsls	r3, r3, #6
 8009054:	431a      	orrs	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	085b      	lsrs	r3, r3, #1
 800905c:	3b01      	subs	r3, #1
 800905e:	041b      	lsls	r3, r3, #16
 8009060:	431a      	orrs	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	061b      	lsls	r3, r3, #24
 8009066:	4910      	ldr	r1, [pc, #64]	; (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009068:	4313      	orrs	r3, r2
 800906a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800906e:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8009070:	2201      	movs	r2, #1
 8009072:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009074:	f7fb f8d8 	bl	8004228 <HAL_GetTick>
 8009078:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800907a:	e008      	b.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800907c:	f7fb f8d4 	bl	8004228 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d901      	bls.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e007      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800908e:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800909a:	d1ef      	bne.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3730      	adds	r7, #48	; 0x30
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	40023800 	.word	0x40023800
 80090ac:	42470070 	.word	0x42470070

080090b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090b4:	b0ae      	sub	sp, #184	; 0xb8
 80090b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80090be:	2300      	movs	r3, #0
 80090c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80090d0:	2300      	movs	r3, #0
 80090d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80090d6:	4bcb      	ldr	r3, [pc, #812]	; (8009404 <HAL_RCC_GetSysClockFreq+0x354>)
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f003 030c 	and.w	r3, r3, #12
 80090de:	2b0c      	cmp	r3, #12
 80090e0:	f200 8206 	bhi.w	80094f0 <HAL_RCC_GetSysClockFreq+0x440>
 80090e4:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80090e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ea:	bf00      	nop
 80090ec:	08009121 	.word	0x08009121
 80090f0:	080094f1 	.word	0x080094f1
 80090f4:	080094f1 	.word	0x080094f1
 80090f8:	080094f1 	.word	0x080094f1
 80090fc:	08009129 	.word	0x08009129
 8009100:	080094f1 	.word	0x080094f1
 8009104:	080094f1 	.word	0x080094f1
 8009108:	080094f1 	.word	0x080094f1
 800910c:	08009131 	.word	0x08009131
 8009110:	080094f1 	.word	0x080094f1
 8009114:	080094f1 	.word	0x080094f1
 8009118:	080094f1 	.word	0x080094f1
 800911c:	08009321 	.word	0x08009321
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009120:	4bb9      	ldr	r3, [pc, #740]	; (8009408 <HAL_RCC_GetSysClockFreq+0x358>)
 8009122:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8009126:	e1e7      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009128:	4bb8      	ldr	r3, [pc, #736]	; (800940c <HAL_RCC_GetSysClockFreq+0x35c>)
 800912a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800912e:	e1e3      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009130:	4bb4      	ldr	r3, [pc, #720]	; (8009404 <HAL_RCC_GetSysClockFreq+0x354>)
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800913c:	4bb1      	ldr	r3, [pc, #708]	; (8009404 <HAL_RCC_GetSysClockFreq+0x354>)
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d071      	beq.n	800922c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009148:	4bae      	ldr	r3, [pc, #696]	; (8009404 <HAL_RCC_GetSysClockFreq+0x354>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	099b      	lsrs	r3, r3, #6
 800914e:	2200      	movs	r2, #0
 8009150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009154:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800915c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009160:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009164:	2300      	movs	r3, #0
 8009166:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800916a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800916e:	4622      	mov	r2, r4
 8009170:	462b      	mov	r3, r5
 8009172:	f04f 0000 	mov.w	r0, #0
 8009176:	f04f 0100 	mov.w	r1, #0
 800917a:	0159      	lsls	r1, r3, #5
 800917c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009180:	0150      	lsls	r0, r2, #5
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4621      	mov	r1, r4
 8009188:	1a51      	subs	r1, r2, r1
 800918a:	6439      	str	r1, [r7, #64]	; 0x40
 800918c:	4629      	mov	r1, r5
 800918e:	eb63 0301 	sbc.w	r3, r3, r1
 8009192:	647b      	str	r3, [r7, #68]	; 0x44
 8009194:	f04f 0200 	mov.w	r2, #0
 8009198:	f04f 0300 	mov.w	r3, #0
 800919c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80091a0:	4649      	mov	r1, r9
 80091a2:	018b      	lsls	r3, r1, #6
 80091a4:	4641      	mov	r1, r8
 80091a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091aa:	4641      	mov	r1, r8
 80091ac:	018a      	lsls	r2, r1, #6
 80091ae:	4641      	mov	r1, r8
 80091b0:	1a51      	subs	r1, r2, r1
 80091b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80091b4:	4649      	mov	r1, r9
 80091b6:	eb63 0301 	sbc.w	r3, r3, r1
 80091ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091bc:	f04f 0200 	mov.w	r2, #0
 80091c0:	f04f 0300 	mov.w	r3, #0
 80091c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80091c8:	4649      	mov	r1, r9
 80091ca:	00cb      	lsls	r3, r1, #3
 80091cc:	4641      	mov	r1, r8
 80091ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091d2:	4641      	mov	r1, r8
 80091d4:	00ca      	lsls	r2, r1, #3
 80091d6:	4610      	mov	r0, r2
 80091d8:	4619      	mov	r1, r3
 80091da:	4603      	mov	r3, r0
 80091dc:	4622      	mov	r2, r4
 80091de:	189b      	adds	r3, r3, r2
 80091e0:	633b      	str	r3, [r7, #48]	; 0x30
 80091e2:	462b      	mov	r3, r5
 80091e4:	460a      	mov	r2, r1
 80091e6:	eb42 0303 	adc.w	r3, r2, r3
 80091ea:	637b      	str	r3, [r7, #52]	; 0x34
 80091ec:	f04f 0200 	mov.w	r2, #0
 80091f0:	f04f 0300 	mov.w	r3, #0
 80091f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80091f8:	4629      	mov	r1, r5
 80091fa:	024b      	lsls	r3, r1, #9
 80091fc:	4621      	mov	r1, r4
 80091fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009202:	4621      	mov	r1, r4
 8009204:	024a      	lsls	r2, r1, #9
 8009206:	4610      	mov	r0, r2
 8009208:	4619      	mov	r1, r3
 800920a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800920e:	2200      	movs	r2, #0
 8009210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009214:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009218:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800921c:	f7f6 fff2 	bl	8000204 <__aeabi_uldivmod>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4613      	mov	r3, r2
 8009226:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800922a:	e067      	b.n	80092fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800922c:	4b75      	ldr	r3, [pc, #468]	; (8009404 <HAL_RCC_GetSysClockFreq+0x354>)
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	099b      	lsrs	r3, r3, #6
 8009232:	2200      	movs	r2, #0
 8009234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009238:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800923c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009244:	67bb      	str	r3, [r7, #120]	; 0x78
 8009246:	2300      	movs	r3, #0
 8009248:	67fb      	str	r3, [r7, #124]	; 0x7c
 800924a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800924e:	4622      	mov	r2, r4
 8009250:	462b      	mov	r3, r5
 8009252:	f04f 0000 	mov.w	r0, #0
 8009256:	f04f 0100 	mov.w	r1, #0
 800925a:	0159      	lsls	r1, r3, #5
 800925c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009260:	0150      	lsls	r0, r2, #5
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	4621      	mov	r1, r4
 8009268:	1a51      	subs	r1, r2, r1
 800926a:	62b9      	str	r1, [r7, #40]	; 0x28
 800926c:	4629      	mov	r1, r5
 800926e:	eb63 0301 	sbc.w	r3, r3, r1
 8009272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009274:	f04f 0200 	mov.w	r2, #0
 8009278:	f04f 0300 	mov.w	r3, #0
 800927c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8009280:	4649      	mov	r1, r9
 8009282:	018b      	lsls	r3, r1, #6
 8009284:	4641      	mov	r1, r8
 8009286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800928a:	4641      	mov	r1, r8
 800928c:	018a      	lsls	r2, r1, #6
 800928e:	4641      	mov	r1, r8
 8009290:	ebb2 0a01 	subs.w	sl, r2, r1
 8009294:	4649      	mov	r1, r9
 8009296:	eb63 0b01 	sbc.w	fp, r3, r1
 800929a:	f04f 0200 	mov.w	r2, #0
 800929e:	f04f 0300 	mov.w	r3, #0
 80092a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092ae:	4692      	mov	sl, r2
 80092b0:	469b      	mov	fp, r3
 80092b2:	4623      	mov	r3, r4
 80092b4:	eb1a 0303 	adds.w	r3, sl, r3
 80092b8:	623b      	str	r3, [r7, #32]
 80092ba:	462b      	mov	r3, r5
 80092bc:	eb4b 0303 	adc.w	r3, fp, r3
 80092c0:	627b      	str	r3, [r7, #36]	; 0x24
 80092c2:	f04f 0200 	mov.w	r2, #0
 80092c6:	f04f 0300 	mov.w	r3, #0
 80092ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80092ce:	4629      	mov	r1, r5
 80092d0:	028b      	lsls	r3, r1, #10
 80092d2:	4621      	mov	r1, r4
 80092d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80092d8:	4621      	mov	r1, r4
 80092da:	028a      	lsls	r2, r1, #10
 80092dc:	4610      	mov	r0, r2
 80092de:	4619      	mov	r1, r3
 80092e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092e4:	2200      	movs	r2, #0
 80092e6:	673b      	str	r3, [r7, #112]	; 0x70
 80092e8:	677a      	str	r2, [r7, #116]	; 0x74
 80092ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80092ee:	f7f6 ff89 	bl	8000204 <__aeabi_uldivmod>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4613      	mov	r3, r2
 80092f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80092fc:	4b41      	ldr	r3, [pc, #260]	; (8009404 <HAL_RCC_GetSysClockFreq+0x354>)
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	0c1b      	lsrs	r3, r3, #16
 8009302:	f003 0303 	and.w	r3, r3, #3
 8009306:	3301      	adds	r3, #1
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800930e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009312:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009316:	fbb2 f3f3 	udiv	r3, r2, r3
 800931a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800931e:	e0eb      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009320:	4b38      	ldr	r3, [pc, #224]	; (8009404 <HAL_RCC_GetSysClockFreq+0x354>)
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009328:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800932c:	4b35      	ldr	r3, [pc, #212]	; (8009404 <HAL_RCC_GetSysClockFreq+0x354>)
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d06b      	beq.n	8009410 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009338:	4b32      	ldr	r3, [pc, #200]	; (8009404 <HAL_RCC_GetSysClockFreq+0x354>)
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	099b      	lsrs	r3, r3, #6
 800933e:	2200      	movs	r2, #0
 8009340:	66bb      	str	r3, [r7, #104]	; 0x68
 8009342:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800934a:	663b      	str	r3, [r7, #96]	; 0x60
 800934c:	2300      	movs	r3, #0
 800934e:	667b      	str	r3, [r7, #100]	; 0x64
 8009350:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009354:	4622      	mov	r2, r4
 8009356:	462b      	mov	r3, r5
 8009358:	f04f 0000 	mov.w	r0, #0
 800935c:	f04f 0100 	mov.w	r1, #0
 8009360:	0159      	lsls	r1, r3, #5
 8009362:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009366:	0150      	lsls	r0, r2, #5
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4621      	mov	r1, r4
 800936e:	1a51      	subs	r1, r2, r1
 8009370:	61b9      	str	r1, [r7, #24]
 8009372:	4629      	mov	r1, r5
 8009374:	eb63 0301 	sbc.w	r3, r3, r1
 8009378:	61fb      	str	r3, [r7, #28]
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	f04f 0300 	mov.w	r3, #0
 8009382:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8009386:	4659      	mov	r1, fp
 8009388:	018b      	lsls	r3, r1, #6
 800938a:	4651      	mov	r1, sl
 800938c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009390:	4651      	mov	r1, sl
 8009392:	018a      	lsls	r2, r1, #6
 8009394:	4651      	mov	r1, sl
 8009396:	ebb2 0801 	subs.w	r8, r2, r1
 800939a:	4659      	mov	r1, fp
 800939c:	eb63 0901 	sbc.w	r9, r3, r1
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	f04f 0300 	mov.w	r3, #0
 80093a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093b4:	4690      	mov	r8, r2
 80093b6:	4699      	mov	r9, r3
 80093b8:	4623      	mov	r3, r4
 80093ba:	eb18 0303 	adds.w	r3, r8, r3
 80093be:	613b      	str	r3, [r7, #16]
 80093c0:	462b      	mov	r3, r5
 80093c2:	eb49 0303 	adc.w	r3, r9, r3
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	f04f 0300 	mov.w	r3, #0
 80093d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80093d4:	4629      	mov	r1, r5
 80093d6:	024b      	lsls	r3, r1, #9
 80093d8:	4621      	mov	r1, r4
 80093da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80093de:	4621      	mov	r1, r4
 80093e0:	024a      	lsls	r2, r1, #9
 80093e2:	4610      	mov	r0, r2
 80093e4:	4619      	mov	r1, r3
 80093e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093ea:	2200      	movs	r2, #0
 80093ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80093ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80093f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80093f4:	f7f6 ff06 	bl	8000204 <__aeabi_uldivmod>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4613      	mov	r3, r2
 80093fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009402:	e065      	b.n	80094d0 <HAL_RCC_GetSysClockFreq+0x420>
 8009404:	40023800 	.word	0x40023800
 8009408:	00f42400 	.word	0x00f42400
 800940c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009410:	4b3d      	ldr	r3, [pc, #244]	; (8009508 <HAL_RCC_GetSysClockFreq+0x458>)
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	099b      	lsrs	r3, r3, #6
 8009416:	2200      	movs	r2, #0
 8009418:	4618      	mov	r0, r3
 800941a:	4611      	mov	r1, r2
 800941c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009420:	653b      	str	r3, [r7, #80]	; 0x50
 8009422:	2300      	movs	r3, #0
 8009424:	657b      	str	r3, [r7, #84]	; 0x54
 8009426:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800942a:	4642      	mov	r2, r8
 800942c:	464b      	mov	r3, r9
 800942e:	f04f 0000 	mov.w	r0, #0
 8009432:	f04f 0100 	mov.w	r1, #0
 8009436:	0159      	lsls	r1, r3, #5
 8009438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800943c:	0150      	lsls	r0, r2, #5
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4641      	mov	r1, r8
 8009444:	1a51      	subs	r1, r2, r1
 8009446:	60b9      	str	r1, [r7, #8]
 8009448:	4649      	mov	r1, r9
 800944a:	eb63 0301 	sbc.w	r3, r3, r1
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	f04f 0300 	mov.w	r3, #0
 8009458:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800945c:	4659      	mov	r1, fp
 800945e:	018b      	lsls	r3, r1, #6
 8009460:	4651      	mov	r1, sl
 8009462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009466:	4651      	mov	r1, sl
 8009468:	018a      	lsls	r2, r1, #6
 800946a:	4651      	mov	r1, sl
 800946c:	1a54      	subs	r4, r2, r1
 800946e:	4659      	mov	r1, fp
 8009470:	eb63 0501 	sbc.w	r5, r3, r1
 8009474:	f04f 0200 	mov.w	r2, #0
 8009478:	f04f 0300 	mov.w	r3, #0
 800947c:	00eb      	lsls	r3, r5, #3
 800947e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009482:	00e2      	lsls	r2, r4, #3
 8009484:	4614      	mov	r4, r2
 8009486:	461d      	mov	r5, r3
 8009488:	4643      	mov	r3, r8
 800948a:	18e3      	adds	r3, r4, r3
 800948c:	603b      	str	r3, [r7, #0]
 800948e:	464b      	mov	r3, r9
 8009490:	eb45 0303 	adc.w	r3, r5, r3
 8009494:	607b      	str	r3, [r7, #4]
 8009496:	f04f 0200 	mov.w	r2, #0
 800949a:	f04f 0300 	mov.w	r3, #0
 800949e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80094a2:	4629      	mov	r1, r5
 80094a4:	028b      	lsls	r3, r1, #10
 80094a6:	4621      	mov	r1, r4
 80094a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80094ac:	4621      	mov	r1, r4
 80094ae:	028a      	lsls	r2, r1, #10
 80094b0:	4610      	mov	r0, r2
 80094b2:	4619      	mov	r1, r3
 80094b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094b8:	2200      	movs	r2, #0
 80094ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80094bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80094be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80094c2:	f7f6 fe9f 	bl	8000204 <__aeabi_uldivmod>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4613      	mov	r3, r2
 80094cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80094d0:	4b0d      	ldr	r3, [pc, #52]	; (8009508 <HAL_RCC_GetSysClockFreq+0x458>)
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	0f1b      	lsrs	r3, r3, #28
 80094d6:	f003 0307 	and.w	r3, r3, #7
 80094da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80094de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80094e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80094e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80094ee:	e003      	b.n	80094f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80094f0:	4b06      	ldr	r3, [pc, #24]	; (800950c <HAL_RCC_GetSysClockFreq+0x45c>)
 80094f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80094f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80094f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	37b8      	adds	r7, #184	; 0xb8
 8009500:	46bd      	mov	sp, r7
 8009502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009506:	bf00      	nop
 8009508:	40023800 	.word	0x40023800
 800950c:	00f42400 	.word	0x00f42400

08009510 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e28d      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 8083 	beq.w	8009636 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009530:	4b94      	ldr	r3, [pc, #592]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f003 030c 	and.w	r3, r3, #12
 8009538:	2b04      	cmp	r3, #4
 800953a:	d019      	beq.n	8009570 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800953c:	4b91      	ldr	r3, [pc, #580]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009544:	2b08      	cmp	r3, #8
 8009546:	d106      	bne.n	8009556 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009548:	4b8e      	ldr	r3, [pc, #568]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009554:	d00c      	beq.n	8009570 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009556:	4b8b      	ldr	r3, [pc, #556]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800955e:	2b0c      	cmp	r3, #12
 8009560:	d112      	bne.n	8009588 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009562:	4b88      	ldr	r3, [pc, #544]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800956a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800956e:	d10b      	bne.n	8009588 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009570:	4b84      	ldr	r3, [pc, #528]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d05b      	beq.n	8009634 <HAL_RCC_OscConfig+0x124>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d157      	bne.n	8009634 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e25a      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009590:	d106      	bne.n	80095a0 <HAL_RCC_OscConfig+0x90>
 8009592:	4b7c      	ldr	r3, [pc, #496]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a7b      	ldr	r2, [pc, #492]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800959c:	6013      	str	r3, [r2, #0]
 800959e:	e01d      	b.n	80095dc <HAL_RCC_OscConfig+0xcc>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095a8:	d10c      	bne.n	80095c4 <HAL_RCC_OscConfig+0xb4>
 80095aa:	4b76      	ldr	r3, [pc, #472]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a75      	ldr	r2, [pc, #468]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 80095b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095b4:	6013      	str	r3, [r2, #0]
 80095b6:	4b73      	ldr	r3, [pc, #460]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a72      	ldr	r2, [pc, #456]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 80095bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	e00b      	b.n	80095dc <HAL_RCC_OscConfig+0xcc>
 80095c4:	4b6f      	ldr	r3, [pc, #444]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a6e      	ldr	r2, [pc, #440]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 80095ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	4b6c      	ldr	r3, [pc, #432]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a6b      	ldr	r2, [pc, #428]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 80095d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d013      	beq.n	800960c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e4:	f7fa fe20 	bl	8004228 <HAL_GetTick>
 80095e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095ea:	e008      	b.n	80095fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095ec:	f7fa fe1c 	bl	8004228 <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	2b64      	cmp	r3, #100	; 0x64
 80095f8:	d901      	bls.n	80095fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e21f      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095fe:	4b61      	ldr	r3, [pc, #388]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d0f0      	beq.n	80095ec <HAL_RCC_OscConfig+0xdc>
 800960a:	e014      	b.n	8009636 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800960c:	f7fa fe0c 	bl	8004228 <HAL_GetTick>
 8009610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009612:	e008      	b.n	8009626 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009614:	f7fa fe08 	bl	8004228 <HAL_GetTick>
 8009618:	4602      	mov	r2, r0
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	2b64      	cmp	r3, #100	; 0x64
 8009620:	d901      	bls.n	8009626 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e20b      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009626:	4b57      	ldr	r3, [pc, #348]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1f0      	bne.n	8009614 <HAL_RCC_OscConfig+0x104>
 8009632:	e000      	b.n	8009636 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0302 	and.w	r3, r3, #2
 800963e:	2b00      	cmp	r3, #0
 8009640:	d06f      	beq.n	8009722 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009642:	4b50      	ldr	r3, [pc, #320]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	f003 030c 	and.w	r3, r3, #12
 800964a:	2b00      	cmp	r3, #0
 800964c:	d017      	beq.n	800967e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800964e:	4b4d      	ldr	r3, [pc, #308]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009656:	2b08      	cmp	r3, #8
 8009658:	d105      	bne.n	8009666 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800965a:	4b4a      	ldr	r3, [pc, #296]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00b      	beq.n	800967e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009666:	4b47      	ldr	r3, [pc, #284]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800966e:	2b0c      	cmp	r3, #12
 8009670:	d11c      	bne.n	80096ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009672:	4b44      	ldr	r3, [pc, #272]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d116      	bne.n	80096ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800967e:	4b41      	ldr	r3, [pc, #260]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 0302 	and.w	r3, r3, #2
 8009686:	2b00      	cmp	r3, #0
 8009688:	d005      	beq.n	8009696 <HAL_RCC_OscConfig+0x186>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d001      	beq.n	8009696 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e1d3      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009696:	4b3b      	ldr	r3, [pc, #236]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	4937      	ldr	r1, [pc, #220]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 80096a6:	4313      	orrs	r3, r2
 80096a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096aa:	e03a      	b.n	8009722 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d020      	beq.n	80096f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80096b4:	4b34      	ldr	r3, [pc, #208]	; (8009788 <HAL_RCC_OscConfig+0x278>)
 80096b6:	2201      	movs	r2, #1
 80096b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ba:	f7fa fdb5 	bl	8004228 <HAL_GetTick>
 80096be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096c0:	e008      	b.n	80096d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096c2:	f7fa fdb1 	bl	8004228 <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d901      	bls.n	80096d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e1b4      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096d4:	4b2b      	ldr	r3, [pc, #172]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0302 	and.w	r3, r3, #2
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0f0      	beq.n	80096c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096e0:	4b28      	ldr	r3, [pc, #160]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	00db      	lsls	r3, r3, #3
 80096ee:	4925      	ldr	r1, [pc, #148]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 80096f0:	4313      	orrs	r3, r2
 80096f2:	600b      	str	r3, [r1, #0]
 80096f4:	e015      	b.n	8009722 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80096f6:	4b24      	ldr	r3, [pc, #144]	; (8009788 <HAL_RCC_OscConfig+0x278>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096fc:	f7fa fd94 	bl	8004228 <HAL_GetTick>
 8009700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009702:	e008      	b.n	8009716 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009704:	f7fa fd90 	bl	8004228 <HAL_GetTick>
 8009708:	4602      	mov	r2, r0
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	2b02      	cmp	r3, #2
 8009710:	d901      	bls.n	8009716 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009712:	2303      	movs	r3, #3
 8009714:	e193      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009716:	4b1b      	ldr	r3, [pc, #108]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1f0      	bne.n	8009704 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0308 	and.w	r3, r3, #8
 800972a:	2b00      	cmp	r3, #0
 800972c:	d036      	beq.n	800979c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d016      	beq.n	8009764 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009736:	4b15      	ldr	r3, [pc, #84]	; (800978c <HAL_RCC_OscConfig+0x27c>)
 8009738:	2201      	movs	r2, #1
 800973a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800973c:	f7fa fd74 	bl	8004228 <HAL_GetTick>
 8009740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009742:	e008      	b.n	8009756 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009744:	f7fa fd70 	bl	8004228 <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	2b02      	cmp	r3, #2
 8009750:	d901      	bls.n	8009756 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009752:	2303      	movs	r3, #3
 8009754:	e173      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009756:	4b0b      	ldr	r3, [pc, #44]	; (8009784 <HAL_RCC_OscConfig+0x274>)
 8009758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800975a:	f003 0302 	and.w	r3, r3, #2
 800975e:	2b00      	cmp	r3, #0
 8009760:	d0f0      	beq.n	8009744 <HAL_RCC_OscConfig+0x234>
 8009762:	e01b      	b.n	800979c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009764:	4b09      	ldr	r3, [pc, #36]	; (800978c <HAL_RCC_OscConfig+0x27c>)
 8009766:	2200      	movs	r2, #0
 8009768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800976a:	f7fa fd5d 	bl	8004228 <HAL_GetTick>
 800976e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009770:	e00e      	b.n	8009790 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009772:	f7fa fd59 	bl	8004228 <HAL_GetTick>
 8009776:	4602      	mov	r2, r0
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	2b02      	cmp	r3, #2
 800977e:	d907      	bls.n	8009790 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009780:	2303      	movs	r3, #3
 8009782:	e15c      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
 8009784:	40023800 	.word	0x40023800
 8009788:	42470000 	.word	0x42470000
 800978c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009790:	4b8a      	ldr	r3, [pc, #552]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 8009792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009794:	f003 0302 	and.w	r3, r3, #2
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1ea      	bne.n	8009772 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 0304 	and.w	r3, r3, #4
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 8097 	beq.w	80098d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80097aa:	2300      	movs	r3, #0
 80097ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097ae:	4b83      	ldr	r3, [pc, #524]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 80097b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10f      	bne.n	80097da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097ba:	2300      	movs	r3, #0
 80097bc:	60bb      	str	r3, [r7, #8]
 80097be:	4b7f      	ldr	r3, [pc, #508]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 80097c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c2:	4a7e      	ldr	r2, [pc, #504]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 80097c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097c8:	6413      	str	r3, [r2, #64]	; 0x40
 80097ca:	4b7c      	ldr	r3, [pc, #496]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 80097cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097d2:	60bb      	str	r3, [r7, #8]
 80097d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80097d6:	2301      	movs	r3, #1
 80097d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097da:	4b79      	ldr	r3, [pc, #484]	; (80099c0 <HAL_RCC_OscConfig+0x4b0>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d118      	bne.n	8009818 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80097e6:	4b76      	ldr	r3, [pc, #472]	; (80099c0 <HAL_RCC_OscConfig+0x4b0>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a75      	ldr	r2, [pc, #468]	; (80099c0 <HAL_RCC_OscConfig+0x4b0>)
 80097ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097f2:	f7fa fd19 	bl	8004228 <HAL_GetTick>
 80097f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097f8:	e008      	b.n	800980c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097fa:	f7fa fd15 	bl	8004228 <HAL_GetTick>
 80097fe:	4602      	mov	r2, r0
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	2b02      	cmp	r3, #2
 8009806:	d901      	bls.n	800980c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e118      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800980c:	4b6c      	ldr	r3, [pc, #432]	; (80099c0 <HAL_RCC_OscConfig+0x4b0>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009814:	2b00      	cmp	r3, #0
 8009816:	d0f0      	beq.n	80097fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d106      	bne.n	800982e <HAL_RCC_OscConfig+0x31e>
 8009820:	4b66      	ldr	r3, [pc, #408]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 8009822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009824:	4a65      	ldr	r2, [pc, #404]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 8009826:	f043 0301 	orr.w	r3, r3, #1
 800982a:	6713      	str	r3, [r2, #112]	; 0x70
 800982c:	e01c      	b.n	8009868 <HAL_RCC_OscConfig+0x358>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	2b05      	cmp	r3, #5
 8009834:	d10c      	bne.n	8009850 <HAL_RCC_OscConfig+0x340>
 8009836:	4b61      	ldr	r3, [pc, #388]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 8009838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983a:	4a60      	ldr	r2, [pc, #384]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 800983c:	f043 0304 	orr.w	r3, r3, #4
 8009840:	6713      	str	r3, [r2, #112]	; 0x70
 8009842:	4b5e      	ldr	r3, [pc, #376]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 8009844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009846:	4a5d      	ldr	r2, [pc, #372]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 8009848:	f043 0301 	orr.w	r3, r3, #1
 800984c:	6713      	str	r3, [r2, #112]	; 0x70
 800984e:	e00b      	b.n	8009868 <HAL_RCC_OscConfig+0x358>
 8009850:	4b5a      	ldr	r3, [pc, #360]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 8009852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009854:	4a59      	ldr	r2, [pc, #356]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 8009856:	f023 0301 	bic.w	r3, r3, #1
 800985a:	6713      	str	r3, [r2, #112]	; 0x70
 800985c:	4b57      	ldr	r3, [pc, #348]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 800985e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009860:	4a56      	ldr	r2, [pc, #344]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 8009862:	f023 0304 	bic.w	r3, r3, #4
 8009866:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d015      	beq.n	800989c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009870:	f7fa fcda 	bl	8004228 <HAL_GetTick>
 8009874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009876:	e00a      	b.n	800988e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009878:	f7fa fcd6 	bl	8004228 <HAL_GetTick>
 800987c:	4602      	mov	r2, r0
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	f241 3288 	movw	r2, #5000	; 0x1388
 8009886:	4293      	cmp	r3, r2
 8009888:	d901      	bls.n	800988e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	e0d7      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800988e:	4b4b      	ldr	r3, [pc, #300]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 8009890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009892:	f003 0302 	and.w	r3, r3, #2
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0ee      	beq.n	8009878 <HAL_RCC_OscConfig+0x368>
 800989a:	e014      	b.n	80098c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800989c:	f7fa fcc4 	bl	8004228 <HAL_GetTick>
 80098a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098a2:	e00a      	b.n	80098ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098a4:	f7fa fcc0 	bl	8004228 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d901      	bls.n	80098ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80098b6:	2303      	movs	r3, #3
 80098b8:	e0c1      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098ba:	4b40      	ldr	r3, [pc, #256]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 80098bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098be:	f003 0302 	and.w	r3, r3, #2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1ee      	bne.n	80098a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80098c6:	7dfb      	ldrb	r3, [r7, #23]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d105      	bne.n	80098d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098cc:	4b3b      	ldr	r3, [pc, #236]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 80098ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d0:	4a3a      	ldr	r2, [pc, #232]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 80098d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 80ad 	beq.w	8009a3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098e2:	4b36      	ldr	r3, [pc, #216]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f003 030c 	and.w	r3, r3, #12
 80098ea:	2b08      	cmp	r3, #8
 80098ec:	d060      	beq.n	80099b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d145      	bne.n	8009982 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098f6:	4b33      	ldr	r3, [pc, #204]	; (80099c4 <HAL_RCC_OscConfig+0x4b4>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098fc:	f7fa fc94 	bl	8004228 <HAL_GetTick>
 8009900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009902:	e008      	b.n	8009916 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009904:	f7fa fc90 	bl	8004228 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	2b02      	cmp	r3, #2
 8009910:	d901      	bls.n	8009916 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e093      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009916:	4b29      	ldr	r3, [pc, #164]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1f0      	bne.n	8009904 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	69da      	ldr	r2, [r3, #28]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	431a      	orrs	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009930:	019b      	lsls	r3, r3, #6
 8009932:	431a      	orrs	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009938:	085b      	lsrs	r3, r3, #1
 800993a:	3b01      	subs	r3, #1
 800993c:	041b      	lsls	r3, r3, #16
 800993e:	431a      	orrs	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009944:	061b      	lsls	r3, r3, #24
 8009946:	431a      	orrs	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994c:	071b      	lsls	r3, r3, #28
 800994e:	491b      	ldr	r1, [pc, #108]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 8009950:	4313      	orrs	r3, r2
 8009952:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009954:	4b1b      	ldr	r3, [pc, #108]	; (80099c4 <HAL_RCC_OscConfig+0x4b4>)
 8009956:	2201      	movs	r2, #1
 8009958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800995a:	f7fa fc65 	bl	8004228 <HAL_GetTick>
 800995e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009960:	e008      	b.n	8009974 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009962:	f7fa fc61 	bl	8004228 <HAL_GetTick>
 8009966:	4602      	mov	r2, r0
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	2b02      	cmp	r3, #2
 800996e:	d901      	bls.n	8009974 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e064      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009974:	4b11      	ldr	r3, [pc, #68]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0f0      	beq.n	8009962 <HAL_RCC_OscConfig+0x452>
 8009980:	e05c      	b.n	8009a3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009982:	4b10      	ldr	r3, [pc, #64]	; (80099c4 <HAL_RCC_OscConfig+0x4b4>)
 8009984:	2200      	movs	r2, #0
 8009986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009988:	f7fa fc4e 	bl	8004228 <HAL_GetTick>
 800998c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800998e:	e008      	b.n	80099a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009990:	f7fa fc4a 	bl	8004228 <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	2b02      	cmp	r3, #2
 800999c:	d901      	bls.n	80099a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800999e:	2303      	movs	r3, #3
 80099a0:	e04d      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099a2:	4b06      	ldr	r3, [pc, #24]	; (80099bc <HAL_RCC_OscConfig+0x4ac>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1f0      	bne.n	8009990 <HAL_RCC_OscConfig+0x480>
 80099ae:	e045      	b.n	8009a3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d107      	bne.n	80099c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e040      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
 80099bc:	40023800 	.word	0x40023800
 80099c0:	40007000 	.word	0x40007000
 80099c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80099c8:	4b1f      	ldr	r3, [pc, #124]	; (8009a48 <HAL_RCC_OscConfig+0x538>)
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d030      	beq.n	8009a38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d129      	bne.n	8009a38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d122      	bne.n	8009a38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80099f8:	4013      	ands	r3, r2
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80099fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d119      	bne.n	8009a38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0e:	085b      	lsrs	r3, r3, #1
 8009a10:	3b01      	subs	r3, #1
 8009a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d10f      	bne.n	8009a38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d107      	bne.n	8009a38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d001      	beq.n	8009a3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e000      	b.n	8009a3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	40023800 	.word	0x40023800

08009a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e041      	b.n	8009ae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d106      	bne.n	8009a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7f9 ffa0 	bl	80039b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3304      	adds	r3, #4
 8009a88:	4619      	mov	r1, r3
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	f000 ffc4 	bl	800aa18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
	...

08009aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d001      	beq.n	8009b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e04e      	b.n	8009ba2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2202      	movs	r2, #2
 8009b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68da      	ldr	r2, [r3, #12]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f042 0201 	orr.w	r2, r2, #1
 8009b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a23      	ldr	r2, [pc, #140]	; (8009bb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d022      	beq.n	8009b6c <HAL_TIM_Base_Start_IT+0x80>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b2e:	d01d      	beq.n	8009b6c <HAL_TIM_Base_Start_IT+0x80>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a1f      	ldr	r2, [pc, #124]	; (8009bb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d018      	beq.n	8009b6c <HAL_TIM_Base_Start_IT+0x80>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a1e      	ldr	r2, [pc, #120]	; (8009bb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d013      	beq.n	8009b6c <HAL_TIM_Base_Start_IT+0x80>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a1c      	ldr	r2, [pc, #112]	; (8009bbc <HAL_TIM_Base_Start_IT+0xd0>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d00e      	beq.n	8009b6c <HAL_TIM_Base_Start_IT+0x80>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a1b      	ldr	r2, [pc, #108]	; (8009bc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d009      	beq.n	8009b6c <HAL_TIM_Base_Start_IT+0x80>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a19      	ldr	r2, [pc, #100]	; (8009bc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d004      	beq.n	8009b6c <HAL_TIM_Base_Start_IT+0x80>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a18      	ldr	r2, [pc, #96]	; (8009bc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d111      	bne.n	8009b90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f003 0307 	and.w	r3, r3, #7
 8009b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b06      	cmp	r3, #6
 8009b7c:	d010      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f042 0201 	orr.w	r2, r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b8e:	e007      	b.n	8009ba0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f042 0201 	orr.w	r2, r2, #1
 8009b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	40010000 	.word	0x40010000
 8009bb4:	40000400 	.word	0x40000400
 8009bb8:	40000800 	.word	0x40000800
 8009bbc:	40000c00 	.word	0x40000c00
 8009bc0:	40010400 	.word	0x40010400
 8009bc4:	40014000 	.word	0x40014000
 8009bc8:	40001800 	.word	0x40001800

08009bcc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68da      	ldr	r2, [r3, #12]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f022 0201 	bic.w	r2, r2, #1
 8009be2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6a1a      	ldr	r2, [r3, #32]
 8009bea:	f241 1311 	movw	r3, #4369	; 0x1111
 8009bee:	4013      	ands	r3, r2
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10f      	bne.n	8009c14 <HAL_TIM_Base_Stop_IT+0x48>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6a1a      	ldr	r2, [r3, #32]
 8009bfa:	f240 4344 	movw	r3, #1092	; 0x444
 8009bfe:	4013      	ands	r3, r2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d107      	bne.n	8009c14 <HAL_TIM_Base_Stop_IT+0x48>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f022 0201 	bic.w	r2, r2, #1
 8009c12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e041      	b.n	8009cc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d106      	bne.n	8009c56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f839 	bl	8009cc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2202      	movs	r2, #2
 8009c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	3304      	adds	r3, #4
 8009c66:	4619      	mov	r1, r3
 8009c68:	4610      	mov	r0, r2
 8009c6a:	f000 fed5 	bl	800aa18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d109      	bne.n	8009d00 <HAL_TIM_PWM_Start+0x24>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	bf14      	ite	ne
 8009cf8:	2301      	movne	r3, #1
 8009cfa:	2300      	moveq	r3, #0
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	e022      	b.n	8009d46 <HAL_TIM_PWM_Start+0x6a>
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	d109      	bne.n	8009d1a <HAL_TIM_PWM_Start+0x3e>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	bf14      	ite	ne
 8009d12:	2301      	movne	r3, #1
 8009d14:	2300      	moveq	r3, #0
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	e015      	b.n	8009d46 <HAL_TIM_PWM_Start+0x6a>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b08      	cmp	r3, #8
 8009d1e:	d109      	bne.n	8009d34 <HAL_TIM_PWM_Start+0x58>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	bf14      	ite	ne
 8009d2c:	2301      	movne	r3, #1
 8009d2e:	2300      	moveq	r3, #0
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	e008      	b.n	8009d46 <HAL_TIM_PWM_Start+0x6a>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	bf14      	ite	ne
 8009d40:	2301      	movne	r3, #1
 8009d42:	2300      	moveq	r3, #0
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e07c      	b.n	8009e48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d104      	bne.n	8009d5e <HAL_TIM_PWM_Start+0x82>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2202      	movs	r2, #2
 8009d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d5c:	e013      	b.n	8009d86 <HAL_TIM_PWM_Start+0xaa>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b04      	cmp	r3, #4
 8009d62:	d104      	bne.n	8009d6e <HAL_TIM_PWM_Start+0x92>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d6c:	e00b      	b.n	8009d86 <HAL_TIM_PWM_Start+0xaa>
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b08      	cmp	r3, #8
 8009d72:	d104      	bne.n	8009d7e <HAL_TIM_PWM_Start+0xa2>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2202      	movs	r2, #2
 8009d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d7c:	e003      	b.n	8009d86 <HAL_TIM_PWM_Start+0xaa>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2202      	movs	r2, #2
 8009d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f001 f92c 	bl	800afec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a2d      	ldr	r2, [pc, #180]	; (8009e50 <HAL_TIM_PWM_Start+0x174>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d004      	beq.n	8009da8 <HAL_TIM_PWM_Start+0xcc>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a2c      	ldr	r2, [pc, #176]	; (8009e54 <HAL_TIM_PWM_Start+0x178>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d101      	bne.n	8009dac <HAL_TIM_PWM_Start+0xd0>
 8009da8:	2301      	movs	r3, #1
 8009daa:	e000      	b.n	8009dae <HAL_TIM_PWM_Start+0xd2>
 8009dac:	2300      	movs	r3, #0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d007      	beq.n	8009dc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a22      	ldr	r2, [pc, #136]	; (8009e50 <HAL_TIM_PWM_Start+0x174>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d022      	beq.n	8009e12 <HAL_TIM_PWM_Start+0x136>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dd4:	d01d      	beq.n	8009e12 <HAL_TIM_PWM_Start+0x136>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a1f      	ldr	r2, [pc, #124]	; (8009e58 <HAL_TIM_PWM_Start+0x17c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d018      	beq.n	8009e12 <HAL_TIM_PWM_Start+0x136>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a1d      	ldr	r2, [pc, #116]	; (8009e5c <HAL_TIM_PWM_Start+0x180>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d013      	beq.n	8009e12 <HAL_TIM_PWM_Start+0x136>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a1c      	ldr	r2, [pc, #112]	; (8009e60 <HAL_TIM_PWM_Start+0x184>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d00e      	beq.n	8009e12 <HAL_TIM_PWM_Start+0x136>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a16      	ldr	r2, [pc, #88]	; (8009e54 <HAL_TIM_PWM_Start+0x178>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d009      	beq.n	8009e12 <HAL_TIM_PWM_Start+0x136>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a18      	ldr	r2, [pc, #96]	; (8009e64 <HAL_TIM_PWM_Start+0x188>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d004      	beq.n	8009e12 <HAL_TIM_PWM_Start+0x136>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a16      	ldr	r2, [pc, #88]	; (8009e68 <HAL_TIM_PWM_Start+0x18c>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d111      	bne.n	8009e36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	f003 0307 	and.w	r3, r3, #7
 8009e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2b06      	cmp	r3, #6
 8009e22:	d010      	beq.n	8009e46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f042 0201 	orr.w	r2, r2, #1
 8009e32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e34:	e007      	b.n	8009e46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f042 0201 	orr.w	r2, r2, #1
 8009e44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	40010000 	.word	0x40010000
 8009e54:	40010400 	.word	0x40010400
 8009e58:	40000400 	.word	0x40000400
 8009e5c:	40000800 	.word	0x40000800
 8009e60:	40000c00 	.word	0x40000c00
 8009e64:	40014000 	.word	0x40014000
 8009e68:	40001800 	.word	0x40001800

08009e6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f001 f8b4 	bl	800afec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a2e      	ldr	r2, [pc, #184]	; (8009f44 <HAL_TIM_PWM_Stop+0xd8>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d004      	beq.n	8009e98 <HAL_TIM_PWM_Stop+0x2c>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a2d      	ldr	r2, [pc, #180]	; (8009f48 <HAL_TIM_PWM_Stop+0xdc>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d101      	bne.n	8009e9c <HAL_TIM_PWM_Stop+0x30>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e000      	b.n	8009e9e <HAL_TIM_PWM_Stop+0x32>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d017      	beq.n	8009ed2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	6a1a      	ldr	r2, [r3, #32]
 8009ea8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009eac:	4013      	ands	r3, r2
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10f      	bne.n	8009ed2 <HAL_TIM_PWM_Stop+0x66>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6a1a      	ldr	r2, [r3, #32]
 8009eb8:	f240 4344 	movw	r3, #1092	; 0x444
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d107      	bne.n	8009ed2 <HAL_TIM_PWM_Stop+0x66>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6a1a      	ldr	r2, [r3, #32]
 8009ed8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009edc:	4013      	ands	r3, r2
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10f      	bne.n	8009f02 <HAL_TIM_PWM_Stop+0x96>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6a1a      	ldr	r2, [r3, #32]
 8009ee8:	f240 4344 	movw	r3, #1092	; 0x444
 8009eec:	4013      	ands	r3, r2
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d107      	bne.n	8009f02 <HAL_TIM_PWM_Stop+0x96>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f022 0201 	bic.w	r2, r2, #1
 8009f00:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d104      	bne.n	8009f12 <HAL_TIM_PWM_Stop+0xa6>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f10:	e013      	b.n	8009f3a <HAL_TIM_PWM_Stop+0xce>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	d104      	bne.n	8009f22 <HAL_TIM_PWM_Stop+0xb6>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f20:	e00b      	b.n	8009f3a <HAL_TIM_PWM_Stop+0xce>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b08      	cmp	r3, #8
 8009f26:	d104      	bne.n	8009f32 <HAL_TIM_PWM_Stop+0xc6>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f30:	e003      	b.n	8009f3a <HAL_TIM_PWM_Stop+0xce>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	40010000 	.word	0x40010000
 8009f48:	40010400 	.word	0x40010400

08009f4c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d109      	bne.n	8009f78 <HAL_TIM_PWM_Start_DMA+0x2c>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	bf0c      	ite	eq
 8009f70:	2301      	moveq	r3, #1
 8009f72:	2300      	movne	r3, #0
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	e022      	b.n	8009fbe <HAL_TIM_PWM_Start_DMA+0x72>
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2b04      	cmp	r3, #4
 8009f7c:	d109      	bne.n	8009f92 <HAL_TIM_PWM_Start_DMA+0x46>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	bf0c      	ite	eq
 8009f8a:	2301      	moveq	r3, #1
 8009f8c:	2300      	movne	r3, #0
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	e015      	b.n	8009fbe <HAL_TIM_PWM_Start_DMA+0x72>
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2b08      	cmp	r3, #8
 8009f96:	d109      	bne.n	8009fac <HAL_TIM_PWM_Start_DMA+0x60>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	bf0c      	ite	eq
 8009fa4:	2301      	moveq	r3, #1
 8009fa6:	2300      	movne	r3, #0
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	e008      	b.n	8009fbe <HAL_TIM_PWM_Start_DMA+0x72>
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	bf0c      	ite	eq
 8009fb8:	2301      	moveq	r3, #1
 8009fba:	2300      	movne	r3, #0
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	e171      	b.n	800a2aa <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d109      	bne.n	8009fe0 <HAL_TIM_PWM_Start_DMA+0x94>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	bf0c      	ite	eq
 8009fd8:	2301      	moveq	r3, #1
 8009fda:	2300      	movne	r3, #0
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	e022      	b.n	800a026 <HAL_TIM_PWM_Start_DMA+0xda>
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2b04      	cmp	r3, #4
 8009fe4:	d109      	bne.n	8009ffa <HAL_TIM_PWM_Start_DMA+0xae>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	bf0c      	ite	eq
 8009ff2:	2301      	moveq	r3, #1
 8009ff4:	2300      	movne	r3, #0
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	e015      	b.n	800a026 <HAL_TIM_PWM_Start_DMA+0xda>
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2b08      	cmp	r3, #8
 8009ffe:	d109      	bne.n	800a014 <HAL_TIM_PWM_Start_DMA+0xc8>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b01      	cmp	r3, #1
 800a00a:	bf0c      	ite	eq
 800a00c:	2301      	moveq	r3, #1
 800a00e:	2300      	movne	r3, #0
 800a010:	b2db      	uxtb	r3, r3
 800a012:	e008      	b.n	800a026 <HAL_TIM_PWM_Start_DMA+0xda>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	bf0c      	ite	eq
 800a020:	2301      	moveq	r3, #1
 800a022:	2300      	movne	r3, #0
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d024      	beq.n	800a074 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d104      	bne.n	800a03a <HAL_TIM_PWM_Start_DMA+0xee>
 800a030:	887b      	ldrh	r3, [r7, #2]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e137      	b.n	800a2aa <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d104      	bne.n	800a04a <HAL_TIM_PWM_Start_DMA+0xfe>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2202      	movs	r2, #2
 800a044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a048:	e016      	b.n	800a078 <HAL_TIM_PWM_Start_DMA+0x12c>
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b04      	cmp	r3, #4
 800a04e:	d104      	bne.n	800a05a <HAL_TIM_PWM_Start_DMA+0x10e>
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2202      	movs	r2, #2
 800a054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a058:	e00e      	b.n	800a078 <HAL_TIM_PWM_Start_DMA+0x12c>
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2b08      	cmp	r3, #8
 800a05e:	d104      	bne.n	800a06a <HAL_TIM_PWM_Start_DMA+0x11e>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2202      	movs	r2, #2
 800a064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a068:	e006      	b.n	800a078 <HAL_TIM_PWM_Start_DMA+0x12c>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2202      	movs	r2, #2
 800a06e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a072:	e001      	b.n	800a078 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e118      	b.n	800a2aa <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	2b0c      	cmp	r3, #12
 800a07c:	f200 80ae 	bhi.w	800a1dc <HAL_TIM_PWM_Start_DMA+0x290>
 800a080:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800a082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a086:	bf00      	nop
 800a088:	0800a0bd 	.word	0x0800a0bd
 800a08c:	0800a1dd 	.word	0x0800a1dd
 800a090:	0800a1dd 	.word	0x0800a1dd
 800a094:	0800a1dd 	.word	0x0800a1dd
 800a098:	0800a105 	.word	0x0800a105
 800a09c:	0800a1dd 	.word	0x0800a1dd
 800a0a0:	0800a1dd 	.word	0x0800a1dd
 800a0a4:	0800a1dd 	.word	0x0800a1dd
 800a0a8:	0800a14d 	.word	0x0800a14d
 800a0ac:	0800a1dd 	.word	0x0800a1dd
 800a0b0:	0800a1dd 	.word	0x0800a1dd
 800a0b4:	0800a1dd 	.word	0x0800a1dd
 800a0b8:	0800a195 	.word	0x0800a195
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	4a7c      	ldr	r2, [pc, #496]	; (800a2b4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800a0c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	4a7b      	ldr	r2, [pc, #492]	; (800a2b8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800a0ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d0:	4a7a      	ldr	r2, [pc, #488]	; (800a2bc <HAL_TIM_PWM_Start_DMA+0x370>)
 800a0d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a0d8:	6879      	ldr	r1, [r7, #4]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3334      	adds	r3, #52	; 0x34
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	887b      	ldrh	r3, [r7, #2]
 800a0e4:	f7fb fcf2 	bl	8005acc <HAL_DMA_Start_IT>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e0db      	b.n	800a2aa <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68da      	ldr	r2, [r3, #12]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a100:	60da      	str	r2, [r3, #12]
      break;
 800a102:	e06e      	b.n	800a1e2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a108:	4a6a      	ldr	r2, [pc, #424]	; (800a2b4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800a10a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a110:	4a69      	ldr	r2, [pc, #420]	; (800a2b8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800a112:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a118:	4a68      	ldr	r2, [pc, #416]	; (800a2bc <HAL_TIM_PWM_Start_DMA+0x370>)
 800a11a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a120:	6879      	ldr	r1, [r7, #4]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3338      	adds	r3, #56	; 0x38
 800a128:	461a      	mov	r2, r3
 800a12a:	887b      	ldrh	r3, [r7, #2]
 800a12c:	f7fb fcce 	bl	8005acc <HAL_DMA_Start_IT>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	e0b7      	b.n	800a2aa <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68da      	ldr	r2, [r3, #12]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a148:	60da      	str	r2, [r3, #12]
      break;
 800a14a:	e04a      	b.n	800a1e2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a150:	4a58      	ldr	r2, [pc, #352]	; (800a2b4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800a152:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a158:	4a57      	ldr	r2, [pc, #348]	; (800a2b8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800a15a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a160:	4a56      	ldr	r2, [pc, #344]	; (800a2bc <HAL_TIM_PWM_Start_DMA+0x370>)
 800a162:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a168:	6879      	ldr	r1, [r7, #4]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	333c      	adds	r3, #60	; 0x3c
 800a170:	461a      	mov	r2, r3
 800a172:	887b      	ldrh	r3, [r7, #2]
 800a174:	f7fb fcaa 	bl	8005acc <HAL_DMA_Start_IT>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e093      	b.n	800a2aa <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68da      	ldr	r2, [r3, #12]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a190:	60da      	str	r2, [r3, #12]
      break;
 800a192:	e026      	b.n	800a1e2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a198:	4a46      	ldr	r2, [pc, #280]	; (800a2b4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800a19a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a0:	4a45      	ldr	r2, [pc, #276]	; (800a2b8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800a1a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a8:	4a44      	ldr	r2, [pc, #272]	; (800a2bc <HAL_TIM_PWM_Start_DMA+0x370>)
 800a1aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a1b0:	6879      	ldr	r1, [r7, #4]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3340      	adds	r3, #64	; 0x40
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	887b      	ldrh	r3, [r7, #2]
 800a1bc:	f7fb fc86 	bl	8005acc <HAL_DMA_Start_IT>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d001      	beq.n	800a1ca <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e06f      	b.n	800a2aa <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68da      	ldr	r2, [r3, #12]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a1d8:	60da      	str	r2, [r3, #12]
      break;
 800a1da:	e002      	b.n	800a1e2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	75fb      	strb	r3, [r7, #23]
      break;
 800a1e0:	bf00      	nop
  }

  if (status == HAL_OK)
 800a1e2:	7dfb      	ldrb	r3, [r7, #23]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d15f      	bne.n	800a2a8 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	68b9      	ldr	r1, [r7, #8]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 fefb 	bl	800afec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a31      	ldr	r2, [pc, #196]	; (800a2c0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d004      	beq.n	800a20a <HAL_TIM_PWM_Start_DMA+0x2be>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a2f      	ldr	r2, [pc, #188]	; (800a2c4 <HAL_TIM_PWM_Start_DMA+0x378>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d101      	bne.n	800a20e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800a20a:	2301      	movs	r3, #1
 800a20c:	e000      	b.n	800a210 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800a20e:	2300      	movs	r3, #0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d007      	beq.n	800a224 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a222:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a25      	ldr	r2, [pc, #148]	; (800a2c0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d022      	beq.n	800a274 <HAL_TIM_PWM_Start_DMA+0x328>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a236:	d01d      	beq.n	800a274 <HAL_TIM_PWM_Start_DMA+0x328>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a22      	ldr	r2, [pc, #136]	; (800a2c8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d018      	beq.n	800a274 <HAL_TIM_PWM_Start_DMA+0x328>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a21      	ldr	r2, [pc, #132]	; (800a2cc <HAL_TIM_PWM_Start_DMA+0x380>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d013      	beq.n	800a274 <HAL_TIM_PWM_Start_DMA+0x328>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a1f      	ldr	r2, [pc, #124]	; (800a2d0 <HAL_TIM_PWM_Start_DMA+0x384>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d00e      	beq.n	800a274 <HAL_TIM_PWM_Start_DMA+0x328>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a1a      	ldr	r2, [pc, #104]	; (800a2c4 <HAL_TIM_PWM_Start_DMA+0x378>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d009      	beq.n	800a274 <HAL_TIM_PWM_Start_DMA+0x328>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a1b      	ldr	r2, [pc, #108]	; (800a2d4 <HAL_TIM_PWM_Start_DMA+0x388>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d004      	beq.n	800a274 <HAL_TIM_PWM_Start_DMA+0x328>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a1a      	ldr	r2, [pc, #104]	; (800a2d8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d111      	bne.n	800a298 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f003 0307 	and.w	r3, r3, #7
 800a27e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	2b06      	cmp	r3, #6
 800a284:	d010      	beq.n	800a2a8 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f042 0201 	orr.w	r2, r2, #1
 800a294:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a296:	e007      	b.n	800a2a8 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f042 0201 	orr.w	r2, r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a2a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3718      	adds	r7, #24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	0800a909 	.word	0x0800a909
 800a2b8:	0800a9b1 	.word	0x0800a9b1
 800a2bc:	0800a877 	.word	0x0800a877
 800a2c0:	40010000 	.word	0x40010000
 800a2c4:	40010400 	.word	0x40010400
 800a2c8:	40000400 	.word	0x40000400
 800a2cc:	40000800 	.word	0x40000800
 800a2d0:	40000c00 	.word	0x40000c00
 800a2d4:	40014000 	.word	0x40014000
 800a2d8:	40001800 	.word	0x40001800

0800a2dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	f003 0302 	and.w	r3, r3, #2
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d122      	bne.n	800a338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f003 0302 	and.w	r3, r3, #2
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d11b      	bne.n	800a338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f06f 0202 	mvn.w	r2, #2
 800a308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	f003 0303 	and.w	r3, r3, #3
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fa77 	bl	800a812 <HAL_TIM_IC_CaptureCallback>
 800a324:	e005      	b.n	800a332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fa69 	bl	800a7fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fa7a 	bl	800a826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	f003 0304 	and.w	r3, r3, #4
 800a342:	2b04      	cmp	r3, #4
 800a344:	d122      	bne.n	800a38c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f003 0304 	and.w	r3, r3, #4
 800a350:	2b04      	cmp	r3, #4
 800a352:	d11b      	bne.n	800a38c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f06f 0204 	mvn.w	r2, #4
 800a35c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2202      	movs	r2, #2
 800a362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fa4d 	bl	800a812 <HAL_TIM_IC_CaptureCallback>
 800a378:	e005      	b.n	800a386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fa3f 	bl	800a7fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fa50 	bl	800a826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	f003 0308 	and.w	r3, r3, #8
 800a396:	2b08      	cmp	r3, #8
 800a398:	d122      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	f003 0308 	and.w	r3, r3, #8
 800a3a4:	2b08      	cmp	r3, #8
 800a3a6:	d11b      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f06f 0208 	mvn.w	r2, #8
 800a3b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2204      	movs	r2, #4
 800a3b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	f003 0303 	and.w	r3, r3, #3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d003      	beq.n	800a3ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fa23 	bl	800a812 <HAL_TIM_IC_CaptureCallback>
 800a3cc:	e005      	b.n	800a3da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fa15 	bl	800a7fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 fa26 	bl	800a826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	f003 0310 	and.w	r3, r3, #16
 800a3ea:	2b10      	cmp	r3, #16
 800a3ec:	d122      	bne.n	800a434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f003 0310 	and.w	r3, r3, #16
 800a3f8:	2b10      	cmp	r3, #16
 800a3fa:	d11b      	bne.n	800a434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f06f 0210 	mvn.w	r2, #16
 800a404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2208      	movs	r2, #8
 800a40a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f9f9 	bl	800a812 <HAL_TIM_IC_CaptureCallback>
 800a420:	e005      	b.n	800a42e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f9eb 	bl	800a7fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 f9fc 	bl	800a826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d10e      	bne.n	800a460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d107      	bne.n	800a460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f06f 0201 	mvn.w	r2, #1
 800a458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f7f8 fdd2 	bl	8003004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a46a:	2b80      	cmp	r3, #128	; 0x80
 800a46c:	d10e      	bne.n	800a48c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a478:	2b80      	cmp	r3, #128	; 0x80
 800a47a:	d107      	bne.n	800a48c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f001 f946 	bl	800b718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a496:	2b40      	cmp	r3, #64	; 0x40
 800a498:	d10e      	bne.n	800a4b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a4:	2b40      	cmp	r3, #64	; 0x40
 800a4a6:	d107      	bne.n	800a4b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f9cb 	bl	800a84e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	f003 0320 	and.w	r3, r3, #32
 800a4c2:	2b20      	cmp	r3, #32
 800a4c4:	d10e      	bne.n	800a4e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	f003 0320 	and.w	r3, r3, #32
 800a4d0:	2b20      	cmp	r3, #32
 800a4d2:	d107      	bne.n	800a4e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f06f 0220 	mvn.w	r2, #32
 800a4dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f001 f910 	bl	800b704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4e4:	bf00      	nop
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a502:	2b01      	cmp	r3, #1
 800a504:	d101      	bne.n	800a50a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a506:	2302      	movs	r3, #2
 800a508:	e0ae      	b.n	800a668 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2201      	movs	r2, #1
 800a50e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b0c      	cmp	r3, #12
 800a516:	f200 809f 	bhi.w	800a658 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a51a:	a201      	add	r2, pc, #4	; (adr r2, 800a520 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a520:	0800a555 	.word	0x0800a555
 800a524:	0800a659 	.word	0x0800a659
 800a528:	0800a659 	.word	0x0800a659
 800a52c:	0800a659 	.word	0x0800a659
 800a530:	0800a595 	.word	0x0800a595
 800a534:	0800a659 	.word	0x0800a659
 800a538:	0800a659 	.word	0x0800a659
 800a53c:	0800a659 	.word	0x0800a659
 800a540:	0800a5d7 	.word	0x0800a5d7
 800a544:	0800a659 	.word	0x0800a659
 800a548:	0800a659 	.word	0x0800a659
 800a54c:	0800a659 	.word	0x0800a659
 800a550:	0800a617 	.word	0x0800a617
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68b9      	ldr	r1, [r7, #8]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 fafc 	bl	800ab58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	699a      	ldr	r2, [r3, #24]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f042 0208 	orr.w	r2, r2, #8
 800a56e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	699a      	ldr	r2, [r3, #24]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 0204 	bic.w	r2, r2, #4
 800a57e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6999      	ldr	r1, [r3, #24]
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	691a      	ldr	r2, [r3, #16]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	619a      	str	r2, [r3, #24]
      break;
 800a592:	e064      	b.n	800a65e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 fb4c 	bl	800ac38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	699a      	ldr	r2, [r3, #24]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	699a      	ldr	r2, [r3, #24]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6999      	ldr	r1, [r3, #24]
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	021a      	lsls	r2, r3, #8
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	619a      	str	r2, [r3, #24]
      break;
 800a5d4:	e043      	b.n	800a65e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68b9      	ldr	r1, [r7, #8]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 fba1 	bl	800ad24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	69da      	ldr	r2, [r3, #28]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f042 0208 	orr.w	r2, r2, #8
 800a5f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69da      	ldr	r2, [r3, #28]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f022 0204 	bic.w	r2, r2, #4
 800a600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	69d9      	ldr	r1, [r3, #28]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	691a      	ldr	r2, [r3, #16]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	61da      	str	r2, [r3, #28]
      break;
 800a614:	e023      	b.n	800a65e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68b9      	ldr	r1, [r7, #8]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 fbf5 	bl	800ae0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	69da      	ldr	r2, [r3, #28]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	69da      	ldr	r2, [r3, #28]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	69d9      	ldr	r1, [r3, #28]
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	021a      	lsls	r2, r3, #8
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	430a      	orrs	r2, r1
 800a654:	61da      	str	r2, [r3, #28]
      break;
 800a656:	e002      	b.n	800a65e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	75fb      	strb	r3, [r7, #23]
      break;
 800a65c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a666:	7dfb      	ldrb	r3, [r7, #23]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a684:	2b01      	cmp	r3, #1
 800a686:	d101      	bne.n	800a68c <HAL_TIM_ConfigClockSource+0x1c>
 800a688:	2302      	movs	r3, #2
 800a68a:	e0b4      	b.n	800a7f6 <HAL_TIM_ConfigClockSource+0x186>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2202      	movs	r2, #2
 800a698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a6aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68ba      	ldr	r2, [r7, #8]
 800a6ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c4:	d03e      	beq.n	800a744 <HAL_TIM_ConfigClockSource+0xd4>
 800a6c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ca:	f200 8087 	bhi.w	800a7dc <HAL_TIM_ConfigClockSource+0x16c>
 800a6ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6d2:	f000 8086 	beq.w	800a7e2 <HAL_TIM_ConfigClockSource+0x172>
 800a6d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6da:	d87f      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x16c>
 800a6dc:	2b70      	cmp	r3, #112	; 0x70
 800a6de:	d01a      	beq.n	800a716 <HAL_TIM_ConfigClockSource+0xa6>
 800a6e0:	2b70      	cmp	r3, #112	; 0x70
 800a6e2:	d87b      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x16c>
 800a6e4:	2b60      	cmp	r3, #96	; 0x60
 800a6e6:	d050      	beq.n	800a78a <HAL_TIM_ConfigClockSource+0x11a>
 800a6e8:	2b60      	cmp	r3, #96	; 0x60
 800a6ea:	d877      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x16c>
 800a6ec:	2b50      	cmp	r3, #80	; 0x50
 800a6ee:	d03c      	beq.n	800a76a <HAL_TIM_ConfigClockSource+0xfa>
 800a6f0:	2b50      	cmp	r3, #80	; 0x50
 800a6f2:	d873      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x16c>
 800a6f4:	2b40      	cmp	r3, #64	; 0x40
 800a6f6:	d058      	beq.n	800a7aa <HAL_TIM_ConfigClockSource+0x13a>
 800a6f8:	2b40      	cmp	r3, #64	; 0x40
 800a6fa:	d86f      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x16c>
 800a6fc:	2b30      	cmp	r3, #48	; 0x30
 800a6fe:	d064      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0x15a>
 800a700:	2b30      	cmp	r3, #48	; 0x30
 800a702:	d86b      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x16c>
 800a704:	2b20      	cmp	r3, #32
 800a706:	d060      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0x15a>
 800a708:	2b20      	cmp	r3, #32
 800a70a:	d867      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x16c>
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d05c      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0x15a>
 800a710:	2b10      	cmp	r3, #16
 800a712:	d05a      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0x15a>
 800a714:	e062      	b.n	800a7dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6818      	ldr	r0, [r3, #0]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	6899      	ldr	r1, [r3, #8]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	f000 fc41 	bl	800afac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a738:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	609a      	str	r2, [r3, #8]
      break;
 800a742:	e04f      	b.n	800a7e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6818      	ldr	r0, [r3, #0]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	6899      	ldr	r1, [r3, #8]
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	f000 fc2a 	bl	800afac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	689a      	ldr	r2, [r3, #8]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a766:	609a      	str	r2, [r3, #8]
      break;
 800a768:	e03c      	b.n	800a7e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6818      	ldr	r0, [r3, #0]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	6859      	ldr	r1, [r3, #4]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	461a      	mov	r2, r3
 800a778:	f000 fb9e 	bl	800aeb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2150      	movs	r1, #80	; 0x50
 800a782:	4618      	mov	r0, r3
 800a784:	f000 fbf7 	bl	800af76 <TIM_ITRx_SetConfig>
      break;
 800a788:	e02c      	b.n	800a7e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6818      	ldr	r0, [r3, #0]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	6859      	ldr	r1, [r3, #4]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	461a      	mov	r2, r3
 800a798:	f000 fbbd 	bl	800af16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2160      	movs	r1, #96	; 0x60
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 fbe7 	bl	800af76 <TIM_ITRx_SetConfig>
      break;
 800a7a8:	e01c      	b.n	800a7e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6818      	ldr	r0, [r3, #0]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	6859      	ldr	r1, [r3, #4]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f000 fb7e 	bl	800aeb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2140      	movs	r1, #64	; 0x40
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 fbd7 	bl	800af76 <TIM_ITRx_SetConfig>
      break;
 800a7c8:	e00c      	b.n	800a7e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	4610      	mov	r0, r2
 800a7d6:	f000 fbce 	bl	800af76 <TIM_ITRx_SetConfig>
      break;
 800a7da:	e003      	b.n	800a7e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	73fb      	strb	r3, [r7, #15]
      break;
 800a7e0:	e000      	b.n	800a7e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a7e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a806:	bf00      	nop
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a81a:	bf00      	nop
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a826:	b480      	push	{r7}
 800a828:	b083      	sub	sp, #12
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a82e:	bf00      	nop
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a842:	bf00      	nop
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a84e:	b480      	push	{r7}
 800a850:	b083      	sub	sp, #12
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a856:	bf00      	nop
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a86a:	bf00      	nop
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b084      	sub	sp, #16
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a882:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d107      	bne.n	800a89e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2201      	movs	r2, #1
 800a892:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a89c:	e02a      	b.n	800a8f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d107      	bne.n	800a8b8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8b6:	e01d      	b.n	800a8f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d107      	bne.n	800a8d2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2204      	movs	r2, #4
 800a8c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8d0:	e010      	b.n	800a8f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d107      	bne.n	800a8ec <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2208      	movs	r2, #8
 800a8e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8ea:	e003      	b.n	800a8f4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f7ff ffb4 	bl	800a862 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	771a      	strb	r2, [r3, #28]
}
 800a900:	bf00      	nop
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a914:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d10b      	bne.n	800a938 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2201      	movs	r2, #1
 800a924:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d136      	bne.n	800a99c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a936:	e031      	b.n	800a99c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d10b      	bne.n	800a95a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2202      	movs	r2, #2
 800a946:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	69db      	ldr	r3, [r3, #28]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d125      	bne.n	800a99c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a958:	e020      	b.n	800a99c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	429a      	cmp	r2, r3
 800a962:	d10b      	bne.n	800a97c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2204      	movs	r2, #4
 800a968:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	69db      	ldr	r3, [r3, #28]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d114      	bne.n	800a99c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a97a:	e00f      	b.n	800a99c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	429a      	cmp	r2, r3
 800a984:	d10a      	bne.n	800a99c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2208      	movs	r2, #8
 800a98a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	69db      	ldr	r3, [r3, #28]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d103      	bne.n	800a99c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f7ff ff42 	bl	800a826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	771a      	strb	r2, [r3, #28]
}
 800a9a8:	bf00      	nop
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9bc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d103      	bne.n	800a9d0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	771a      	strb	r2, [r3, #28]
 800a9ce:	e019      	b.n	800aa04 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d103      	bne.n	800a9e2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2202      	movs	r2, #2
 800a9de:	771a      	strb	r2, [r3, #28]
 800a9e0:	e010      	b.n	800aa04 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d103      	bne.n	800a9f4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2204      	movs	r2, #4
 800a9f0:	771a      	strb	r2, [r3, #28]
 800a9f2:	e007      	b.n	800aa04 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d102      	bne.n	800aa04 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2208      	movs	r2, #8
 800aa02:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f7ff ff18 	bl	800a83a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	771a      	strb	r2, [r3, #28]
}
 800aa10:	bf00      	nop
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a40      	ldr	r2, [pc, #256]	; (800ab2c <TIM_Base_SetConfig+0x114>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d013      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa36:	d00f      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a3d      	ldr	r2, [pc, #244]	; (800ab30 <TIM_Base_SetConfig+0x118>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d00b      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a3c      	ldr	r2, [pc, #240]	; (800ab34 <TIM_Base_SetConfig+0x11c>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d007      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a3b      	ldr	r2, [pc, #236]	; (800ab38 <TIM_Base_SetConfig+0x120>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d003      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a3a      	ldr	r2, [pc, #232]	; (800ab3c <TIM_Base_SetConfig+0x124>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d108      	bne.n	800aa6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a2f      	ldr	r2, [pc, #188]	; (800ab2c <TIM_Base_SetConfig+0x114>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d02b      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa78:	d027      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a2c      	ldr	r2, [pc, #176]	; (800ab30 <TIM_Base_SetConfig+0x118>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d023      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a2b      	ldr	r2, [pc, #172]	; (800ab34 <TIM_Base_SetConfig+0x11c>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d01f      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a2a      	ldr	r2, [pc, #168]	; (800ab38 <TIM_Base_SetConfig+0x120>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d01b      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a29      	ldr	r2, [pc, #164]	; (800ab3c <TIM_Base_SetConfig+0x124>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d017      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a28      	ldr	r2, [pc, #160]	; (800ab40 <TIM_Base_SetConfig+0x128>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d013      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a27      	ldr	r2, [pc, #156]	; (800ab44 <TIM_Base_SetConfig+0x12c>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00f      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a26      	ldr	r2, [pc, #152]	; (800ab48 <TIM_Base_SetConfig+0x130>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d00b      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a25      	ldr	r2, [pc, #148]	; (800ab4c <TIM_Base_SetConfig+0x134>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d007      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a24      	ldr	r2, [pc, #144]	; (800ab50 <TIM_Base_SetConfig+0x138>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d003      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a23      	ldr	r2, [pc, #140]	; (800ab54 <TIM_Base_SetConfig+0x13c>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d108      	bne.n	800aadc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	4313      	orrs	r3, r2
 800aada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	695b      	ldr	r3, [r3, #20]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	689a      	ldr	r2, [r3, #8]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a0a      	ldr	r2, [pc, #40]	; (800ab2c <TIM_Base_SetConfig+0x114>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d003      	beq.n	800ab10 <TIM_Base_SetConfig+0xf8>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a0c      	ldr	r2, [pc, #48]	; (800ab3c <TIM_Base_SetConfig+0x124>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d103      	bne.n	800ab18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	691a      	ldr	r2, [r3, #16]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	615a      	str	r2, [r3, #20]
}
 800ab1e:	bf00      	nop
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	40010000 	.word	0x40010000
 800ab30:	40000400 	.word	0x40000400
 800ab34:	40000800 	.word	0x40000800
 800ab38:	40000c00 	.word	0x40000c00
 800ab3c:	40010400 	.word	0x40010400
 800ab40:	40014000 	.word	0x40014000
 800ab44:	40014400 	.word	0x40014400
 800ab48:	40014800 	.word	0x40014800
 800ab4c:	40001800 	.word	0x40001800
 800ab50:	40001c00 	.word	0x40001c00
 800ab54:	40002000 	.word	0x40002000

0800ab58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b087      	sub	sp, #28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	f023 0201 	bic.w	r2, r3, #1
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	699b      	ldr	r3, [r3, #24]
 800ab7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f023 0303 	bic.w	r3, r3, #3
 800ab8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f023 0302 	bic.w	r3, r3, #2
 800aba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a20      	ldr	r2, [pc, #128]	; (800ac30 <TIM_OC1_SetConfig+0xd8>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d003      	beq.n	800abbc <TIM_OC1_SetConfig+0x64>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a1f      	ldr	r2, [pc, #124]	; (800ac34 <TIM_OC1_SetConfig+0xdc>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d10c      	bne.n	800abd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	f023 0308 	bic.w	r3, r3, #8
 800abc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	4313      	orrs	r3, r2
 800abcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	f023 0304 	bic.w	r3, r3, #4
 800abd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a15      	ldr	r2, [pc, #84]	; (800ac30 <TIM_OC1_SetConfig+0xd8>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d003      	beq.n	800abe6 <TIM_OC1_SetConfig+0x8e>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a14      	ldr	r2, [pc, #80]	; (800ac34 <TIM_OC1_SetConfig+0xdc>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d111      	bne.n	800ac0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	695b      	ldr	r3, [r3, #20]
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	697a      	ldr	r2, [r7, #20]
 800ac22:	621a      	str	r2, [r3, #32]
}
 800ac24:	bf00      	nop
 800ac26:	371c      	adds	r7, #28
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	40010000 	.word	0x40010000
 800ac34:	40010400 	.word	0x40010400

0800ac38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	f023 0210 	bic.w	r2, r3, #16
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	021b      	lsls	r3, r3, #8
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f023 0320 	bic.w	r3, r3, #32
 800ac82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	011b      	lsls	r3, r3, #4
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a22      	ldr	r2, [pc, #136]	; (800ad1c <TIM_OC2_SetConfig+0xe4>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d003      	beq.n	800aca0 <TIM_OC2_SetConfig+0x68>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a21      	ldr	r2, [pc, #132]	; (800ad20 <TIM_OC2_SetConfig+0xe8>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d10d      	bne.n	800acbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	011b      	lsls	r3, r3, #4
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4a17      	ldr	r2, [pc, #92]	; (800ad1c <TIM_OC2_SetConfig+0xe4>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d003      	beq.n	800accc <TIM_OC2_SetConfig+0x94>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a16      	ldr	r2, [pc, #88]	; (800ad20 <TIM_OC2_SetConfig+0xe8>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d113      	bne.n	800acf4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	693a      	ldr	r2, [r7, #16]
 800acf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	621a      	str	r2, [r3, #32]
}
 800ad0e:	bf00      	nop
 800ad10:	371c      	adds	r7, #28
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	40010000 	.word	0x40010000
 800ad20:	40010400 	.word	0x40010400

0800ad24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a1b      	ldr	r3, [r3, #32]
 800ad3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	69db      	ldr	r3, [r3, #28]
 800ad4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f023 0303 	bic.w	r3, r3, #3
 800ad5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	021b      	lsls	r3, r3, #8
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a21      	ldr	r2, [pc, #132]	; (800ae04 <TIM_OC3_SetConfig+0xe0>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d003      	beq.n	800ad8a <TIM_OC3_SetConfig+0x66>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a20      	ldr	r2, [pc, #128]	; (800ae08 <TIM_OC3_SetConfig+0xe4>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d10d      	bne.n	800ada6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ada4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a16      	ldr	r2, [pc, #88]	; (800ae04 <TIM_OC3_SetConfig+0xe0>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d003      	beq.n	800adb6 <TIM_OC3_SetConfig+0x92>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4a15      	ldr	r2, [pc, #84]	; (800ae08 <TIM_OC3_SetConfig+0xe4>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d113      	bne.n	800adde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800adc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	011b      	lsls	r3, r3, #4
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	4313      	orrs	r3, r2
 800add0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	011b      	lsls	r3, r3, #4
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	4313      	orrs	r3, r2
 800addc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	685a      	ldr	r2, [r3, #4]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	621a      	str	r2, [r3, #32]
}
 800adf8:	bf00      	nop
 800adfa:	371c      	adds	r7, #28
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	40010000 	.word	0x40010000
 800ae08:	40010400 	.word	0x40010400

0800ae0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	021b      	lsls	r3, r3, #8
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	031b      	lsls	r3, r3, #12
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a12      	ldr	r2, [pc, #72]	; (800aeb0 <TIM_OC4_SetConfig+0xa4>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d003      	beq.n	800ae74 <TIM_OC4_SetConfig+0x68>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a11      	ldr	r2, [pc, #68]	; (800aeb4 <TIM_OC4_SetConfig+0xa8>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d109      	bne.n	800ae88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	019b      	lsls	r3, r3, #6
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	685a      	ldr	r2, [r3, #4]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	693a      	ldr	r2, [r7, #16]
 800aea0:	621a      	str	r2, [r3, #32]
}
 800aea2:	bf00      	nop
 800aea4:	371c      	adds	r7, #28
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	40010000 	.word	0x40010000
 800aeb4:	40010400 	.word	0x40010400

0800aeb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b087      	sub	sp, #28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6a1b      	ldr	r3, [r3, #32]
 800aec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	f023 0201 	bic.w	r2, r3, #1
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	011b      	lsls	r3, r3, #4
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f023 030a 	bic.w	r3, r3, #10
 800aef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	621a      	str	r2, [r3, #32]
}
 800af0a:	bf00      	nop
 800af0c:	371c      	adds	r7, #28
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af16:	b480      	push	{r7}
 800af18:	b087      	sub	sp, #28
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	f023 0210 	bic.w	r2, r3, #16
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6a1b      	ldr	r3, [r3, #32]
 800af38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	031b      	lsls	r3, r3, #12
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	4313      	orrs	r3, r2
 800af4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	621a      	str	r2, [r3, #32]
}
 800af6a:	bf00      	nop
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af76:	b480      	push	{r7}
 800af78:	b085      	sub	sp, #20
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	4313      	orrs	r3, r2
 800af94:	f043 0307 	orr.w	r3, r3, #7
 800af98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	609a      	str	r2, [r3, #8]
}
 800afa0:	bf00      	nop
 800afa2:	3714      	adds	r7, #20
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afac:	b480      	push	{r7}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
 800afb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	021a      	lsls	r2, r3, #8
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	431a      	orrs	r2, r3
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	609a      	str	r2, [r3, #8]
}
 800afe0:	bf00      	nop
 800afe2:	371c      	adds	r7, #28
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	f003 031f 	and.w	r3, r3, #31
 800affe:	2201      	movs	r2, #1
 800b000:	fa02 f303 	lsl.w	r3, r2, r3
 800b004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6a1a      	ldr	r2, [r3, #32]
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	43db      	mvns	r3, r3
 800b00e:	401a      	ands	r2, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6a1a      	ldr	r2, [r3, #32]
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f003 031f 	and.w	r3, r3, #31
 800b01e:	6879      	ldr	r1, [r7, #4]
 800b020:	fa01 f303 	lsl.w	r3, r1, r3
 800b024:	431a      	orrs	r2, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	621a      	str	r2, [r3, #32]
}
 800b02a:	bf00      	nop
 800b02c:	371c      	adds	r7, #28
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
	...

0800b038 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d109      	bne.n	800b05c <HAL_TIMEx_PWMN_Start+0x24>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	2b01      	cmp	r3, #1
 800b052:	bf14      	ite	ne
 800b054:	2301      	movne	r3, #1
 800b056:	2300      	moveq	r3, #0
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	e022      	b.n	800b0a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	2b04      	cmp	r3, #4
 800b060:	d109      	bne.n	800b076 <HAL_TIMEx_PWMN_Start+0x3e>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	bf14      	ite	ne
 800b06e:	2301      	movne	r3, #1
 800b070:	2300      	moveq	r3, #0
 800b072:	b2db      	uxtb	r3, r3
 800b074:	e015      	b.n	800b0a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b08      	cmp	r3, #8
 800b07a:	d109      	bne.n	800b090 <HAL_TIMEx_PWMN_Start+0x58>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b082:	b2db      	uxtb	r3, r3
 800b084:	2b01      	cmp	r3, #1
 800b086:	bf14      	ite	ne
 800b088:	2301      	movne	r3, #1
 800b08a:	2300      	moveq	r3, #0
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	e008      	b.n	800b0a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2b01      	cmp	r3, #1
 800b09a:	bf14      	ite	ne
 800b09c:	2301      	movne	r3, #1
 800b09e:	2300      	moveq	r3, #0
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e06d      	b.n	800b186 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d104      	bne.n	800b0ba <HAL_TIMEx_PWMN_Start+0x82>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0b8:	e013      	b.n	800b0e2 <HAL_TIMEx_PWMN_Start+0xaa>
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	2b04      	cmp	r3, #4
 800b0be:	d104      	bne.n	800b0ca <HAL_TIMEx_PWMN_Start+0x92>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0c8:	e00b      	b.n	800b0e2 <HAL_TIMEx_PWMN_Start+0xaa>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b08      	cmp	r3, #8
 800b0ce:	d104      	bne.n	800b0da <HAL_TIMEx_PWMN_Start+0xa2>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2202      	movs	r2, #2
 800b0d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0d8:	e003      	b.n	800b0e2 <HAL_TIMEx_PWMN_Start+0xaa>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2202      	movs	r2, #2
 800b0de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2204      	movs	r2, #4
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 fba9 	bl	800b842 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b0fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a22      	ldr	r2, [pc, #136]	; (800b190 <HAL_TIMEx_PWMN_Start+0x158>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d022      	beq.n	800b150 <HAL_TIMEx_PWMN_Start+0x118>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b112:	d01d      	beq.n	800b150 <HAL_TIMEx_PWMN_Start+0x118>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a1e      	ldr	r2, [pc, #120]	; (800b194 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d018      	beq.n	800b150 <HAL_TIMEx_PWMN_Start+0x118>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a1d      	ldr	r2, [pc, #116]	; (800b198 <HAL_TIMEx_PWMN_Start+0x160>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d013      	beq.n	800b150 <HAL_TIMEx_PWMN_Start+0x118>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a1b      	ldr	r2, [pc, #108]	; (800b19c <HAL_TIMEx_PWMN_Start+0x164>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d00e      	beq.n	800b150 <HAL_TIMEx_PWMN_Start+0x118>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a1a      	ldr	r2, [pc, #104]	; (800b1a0 <HAL_TIMEx_PWMN_Start+0x168>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d009      	beq.n	800b150 <HAL_TIMEx_PWMN_Start+0x118>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a18      	ldr	r2, [pc, #96]	; (800b1a4 <HAL_TIMEx_PWMN_Start+0x16c>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d004      	beq.n	800b150 <HAL_TIMEx_PWMN_Start+0x118>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a17      	ldr	r2, [pc, #92]	; (800b1a8 <HAL_TIMEx_PWMN_Start+0x170>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d111      	bne.n	800b174 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	f003 0307 	and.w	r3, r3, #7
 800b15a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b06      	cmp	r3, #6
 800b160:	d010      	beq.n	800b184 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f042 0201 	orr.w	r2, r2, #1
 800b170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b172:	e007      	b.n	800b184 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f042 0201 	orr.w	r2, r2, #1
 800b182:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	40010000 	.word	0x40010000
 800b194:	40000400 	.word	0x40000400
 800b198:	40000800 	.word	0x40000800
 800b19c:	40000c00 	.word	0x40000c00
 800b1a0:	40010400 	.word	0x40010400
 800b1a4:	40014000 	.word	0x40014000
 800b1a8:	40001800 	.word	0x40001800

0800b1ac <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 fb3f 	bl	800b842 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	6a1a      	ldr	r2, [r3, #32]
 800b1ca:	f241 1311 	movw	r3, #4369	; 0x1111
 800b1ce:	4013      	ands	r3, r2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10f      	bne.n	800b1f4 <HAL_TIMEx_PWMN_Stop+0x48>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6a1a      	ldr	r2, [r3, #32]
 800b1da:	f240 4344 	movw	r3, #1092	; 0x444
 800b1de:	4013      	ands	r3, r2
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d107      	bne.n	800b1f4 <HAL_TIMEx_PWMN_Stop+0x48>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b1f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	6a1a      	ldr	r2, [r3, #32]
 800b1fa:	f241 1311 	movw	r3, #4369	; 0x1111
 800b1fe:	4013      	ands	r3, r2
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10f      	bne.n	800b224 <HAL_TIMEx_PWMN_Stop+0x78>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6a1a      	ldr	r2, [r3, #32]
 800b20a:	f240 4344 	movw	r3, #1092	; 0x444
 800b20e:	4013      	ands	r3, r2
 800b210:	2b00      	cmp	r3, #0
 800b212:	d107      	bne.n	800b224 <HAL_TIMEx_PWMN_Stop+0x78>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f022 0201 	bic.w	r2, r2, #1
 800b222:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d104      	bne.n	800b234 <HAL_TIMEx_PWMN_Stop+0x88>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2201      	movs	r2, #1
 800b22e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b232:	e013      	b.n	800b25c <HAL_TIMEx_PWMN_Stop+0xb0>
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	2b04      	cmp	r3, #4
 800b238:	d104      	bne.n	800b244 <HAL_TIMEx_PWMN_Stop+0x98>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b242:	e00b      	b.n	800b25c <HAL_TIMEx_PWMN_Stop+0xb0>
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	2b08      	cmp	r3, #8
 800b248:	d104      	bne.n	800b254 <HAL_TIMEx_PWMN_Stop+0xa8>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2201      	movs	r2, #1
 800b24e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b252:	e003      	b.n	800b25c <HAL_TIMEx_PWMN_Stop+0xb0>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b086      	sub	sp, #24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800b276:	2300      	movs	r3, #0
 800b278:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d109      	bne.n	800b294 <HAL_TIMEx_PWMN_Start_DMA+0x2c>
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b02      	cmp	r3, #2
 800b28a:	bf0c      	ite	eq
 800b28c:	2301      	moveq	r3, #1
 800b28e:	2300      	movne	r3, #0
 800b290:	b2db      	uxtb	r3, r3
 800b292:	e022      	b.n	800b2da <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2b04      	cmp	r3, #4
 800b298:	d109      	bne.n	800b2ae <HAL_TIMEx_PWMN_Start_DMA+0x46>
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	bf0c      	ite	eq
 800b2a6:	2301      	moveq	r3, #1
 800b2a8:	2300      	movne	r3, #0
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	e015      	b.n	800b2da <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	2b08      	cmp	r3, #8
 800b2b2:	d109      	bne.n	800b2c8 <HAL_TIMEx_PWMN_Start_DMA+0x60>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	bf0c      	ite	eq
 800b2c0:	2301      	moveq	r3, #1
 800b2c2:	2300      	movne	r3, #0
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	e008      	b.n	800b2da <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	bf0c      	ite	eq
 800b2d4:	2301      	moveq	r3, #1
 800b2d6:	2300      	movne	r3, #0
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <HAL_TIMEx_PWMN_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800b2de:	2302      	movs	r3, #2
 800b2e0:	e129      	b.n	800b536 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d109      	bne.n	800b2fc <HAL_TIMEx_PWMN_Start_DMA+0x94>
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	bf0c      	ite	eq
 800b2f4:	2301      	moveq	r3, #1
 800b2f6:	2300      	movne	r3, #0
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	e022      	b.n	800b342 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2b04      	cmp	r3, #4
 800b300:	d109      	bne.n	800b316 <HAL_TIMEx_PWMN_Start_DMA+0xae>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	bf0c      	ite	eq
 800b30e:	2301      	moveq	r3, #1
 800b310:	2300      	movne	r3, #0
 800b312:	b2db      	uxtb	r3, r3
 800b314:	e015      	b.n	800b342 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	2b08      	cmp	r3, #8
 800b31a:	d109      	bne.n	800b330 <HAL_TIMEx_PWMN_Start_DMA+0xc8>
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b322:	b2db      	uxtb	r3, r3
 800b324:	2b01      	cmp	r3, #1
 800b326:	bf0c      	ite	eq
 800b328:	2301      	moveq	r3, #1
 800b32a:	2300      	movne	r3, #0
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	e008      	b.n	800b342 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b336:	b2db      	uxtb	r3, r3
 800b338:	2b01      	cmp	r3, #1
 800b33a:	bf0c      	ite	eq
 800b33c:	2301      	moveq	r3, #1
 800b33e:	2300      	movne	r3, #0
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d024      	beq.n	800b390 <HAL_TIMEx_PWMN_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d104      	bne.n	800b356 <HAL_TIMEx_PWMN_Start_DMA+0xee>
 800b34c:	887b      	ldrh	r3, [r7, #2]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <HAL_TIMEx_PWMN_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e0ef      	b.n	800b536 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d104      	bne.n	800b366 <HAL_TIMEx_PWMN_Start_DMA+0xfe>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2202      	movs	r2, #2
 800b360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b364:	e016      	b.n	800b394 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	2b04      	cmp	r3, #4
 800b36a:	d104      	bne.n	800b376 <HAL_TIMEx_PWMN_Start_DMA+0x10e>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2202      	movs	r2, #2
 800b370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b374:	e00e      	b.n	800b394 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	2b08      	cmp	r3, #8
 800b37a:	d104      	bne.n	800b386 <HAL_TIMEx_PWMN_Start_DMA+0x11e>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2202      	movs	r2, #2
 800b380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b384:	e006      	b.n	800b394 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2202      	movs	r2, #2
 800b38a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b38e:	e001      	b.n	800b394 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	e0d0      	b.n	800b536 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
  }

  switch (Channel)
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	2b08      	cmp	r3, #8
 800b398:	d051      	beq.n	800b43e <HAL_TIMEx_PWMN_Start_DMA+0x1d6>
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	2b08      	cmp	r3, #8
 800b39e:	d872      	bhi.n	800b486 <HAL_TIMEx_PWMN_Start_DMA+0x21e>
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d003      	beq.n	800b3ae <HAL_TIMEx_PWMN_Start_DMA+0x146>
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2b04      	cmp	r3, #4
 800b3aa:	d024      	beq.n	800b3f6 <HAL_TIMEx_PWMN_Start_DMA+0x18e>
 800b3ac:	e06b      	b.n	800b486 <HAL_TIMEx_PWMN_Start_DMA+0x21e>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b2:	4a63      	ldr	r2, [pc, #396]	; (800b540 <HAL_TIMEx_PWMN_Start_DMA+0x2d8>)
 800b3b4:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ba:	4a62      	ldr	r2, [pc, #392]	; (800b544 <HAL_TIMEx_PWMN_Start_DMA+0x2dc>)
 800b3bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c2:	4a61      	ldr	r2, [pc, #388]	; (800b548 <HAL_TIMEx_PWMN_Start_DMA+0x2e0>)
 800b3c4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b3ca:	6879      	ldr	r1, [r7, #4]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3334      	adds	r3, #52	; 0x34
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	887b      	ldrh	r3, [r7, #2]
 800b3d6:	f7fa fb79 	bl	8005acc <HAL_DMA_Start_IT>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <HAL_TIMEx_PWMN_Start_DMA+0x17c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e0a8      	b.n	800b536 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68da      	ldr	r2, [r3, #12]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3f2:	60da      	str	r2, [r3, #12]
      break;
 800b3f4:	e04a      	b.n	800b48c <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fa:	4a51      	ldr	r2, [pc, #324]	; (800b540 <HAL_TIMEx_PWMN_Start_DMA+0x2d8>)
 800b3fc:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b402:	4a50      	ldr	r2, [pc, #320]	; (800b544 <HAL_TIMEx_PWMN_Start_DMA+0x2dc>)
 800b404:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40a:	4a4f      	ldr	r2, [pc, #316]	; (800b548 <HAL_TIMEx_PWMN_Start_DMA+0x2e0>)
 800b40c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b412:	6879      	ldr	r1, [r7, #4]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3338      	adds	r3, #56	; 0x38
 800b41a:	461a      	mov	r2, r3
 800b41c:	887b      	ldrh	r3, [r7, #2]
 800b41e:	f7fa fb55 	bl	8005acc <HAL_DMA_Start_IT>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <HAL_TIMEx_PWMN_Start_DMA+0x1c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	e084      	b.n	800b536 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	68da      	ldr	r2, [r3, #12]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b43a:	60da      	str	r2, [r3, #12]
      break;
 800b43c:	e026      	b.n	800b48c <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	4a3f      	ldr	r2, [pc, #252]	; (800b540 <HAL_TIMEx_PWMN_Start_DMA+0x2d8>)
 800b444:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44a:	4a3e      	ldr	r2, [pc, #248]	; (800b544 <HAL_TIMEx_PWMN_Start_DMA+0x2dc>)
 800b44c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	4a3d      	ldr	r2, [pc, #244]	; (800b548 <HAL_TIMEx_PWMN_Start_DMA+0x2e0>)
 800b454:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b45a:	6879      	ldr	r1, [r7, #4]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	333c      	adds	r3, #60	; 0x3c
 800b462:	461a      	mov	r2, r3
 800b464:	887b      	ldrh	r3, [r7, #2]
 800b466:	f7fa fb31 	bl	8005acc <HAL_DMA_Start_IT>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <HAL_TIMEx_PWMN_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	e060      	b.n	800b536 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68da      	ldr	r2, [r3, #12]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b482:	60da      	str	r2, [r3, #12]
      break;
 800b484:	e002      	b.n	800b48c <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    default:
      status = HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	75fb      	strb	r3, [r7, #23]
      break;
 800b48a:	bf00      	nop
  }

  if (status == HAL_OK)
 800b48c:	7dfb      	ldrb	r3, [r7, #23]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d150      	bne.n	800b534 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
  {
    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2204      	movs	r2, #4
 800b498:	68b9      	ldr	r1, [r7, #8]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 f9d1 	bl	800b842 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a25      	ldr	r2, [pc, #148]	; (800b54c <HAL_TIMEx_PWMN_Start_DMA+0x2e4>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d022      	beq.n	800b500 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4c2:	d01d      	beq.n	800b500 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a21      	ldr	r2, [pc, #132]	; (800b550 <HAL_TIMEx_PWMN_Start_DMA+0x2e8>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d018      	beq.n	800b500 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a20      	ldr	r2, [pc, #128]	; (800b554 <HAL_TIMEx_PWMN_Start_DMA+0x2ec>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d013      	beq.n	800b500 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a1e      	ldr	r2, [pc, #120]	; (800b558 <HAL_TIMEx_PWMN_Start_DMA+0x2f0>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d00e      	beq.n	800b500 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a1d      	ldr	r2, [pc, #116]	; (800b55c <HAL_TIMEx_PWMN_Start_DMA+0x2f4>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d009      	beq.n	800b500 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a1b      	ldr	r2, [pc, #108]	; (800b560 <HAL_TIMEx_PWMN_Start_DMA+0x2f8>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d004      	beq.n	800b500 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a1a      	ldr	r2, [pc, #104]	; (800b564 <HAL_TIMEx_PWMN_Start_DMA+0x2fc>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d111      	bne.n	800b524 <HAL_TIMEx_PWMN_Start_DMA+0x2bc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	f003 0307 	and.w	r3, r3, #7
 800b50a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	2b06      	cmp	r3, #6
 800b510:	d010      	beq.n	800b534 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
      {
        __HAL_TIM_ENABLE(htim);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f042 0201 	orr.w	r2, r2, #1
 800b520:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b522:	e007      	b.n	800b534 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f042 0201 	orr.w	r2, r2, #1
 800b532:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b534:	7dfb      	ldrb	r3, [r7, #23]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3718      	adds	r7, #24
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	0800b72d 	.word	0x0800b72d
 800b544:	0800a9b1 	.word	0x0800a9b1
 800b548:	0800b7d5 	.word	0x0800b7d5
 800b54c:	40010000 	.word	0x40010000
 800b550:	40000400 	.word	0x40000400
 800b554:	40000800 	.word	0x40000800
 800b558:	40000c00 	.word	0x40000c00
 800b55c:	40010400 	.word	0x40010400
 800b560:	40014000 	.word	0x40014000
 800b564:	40001800 	.word	0x40001800

0800b568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d101      	bne.n	800b580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b57c:	2302      	movs	r3, #2
 800b57e:	e05a      	b.n	800b636 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2202      	movs	r2, #2
 800b58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a21      	ldr	r2, [pc, #132]	; (800b644 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d022      	beq.n	800b60a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5cc:	d01d      	beq.n	800b60a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a1d      	ldr	r2, [pc, #116]	; (800b648 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d018      	beq.n	800b60a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a1b      	ldr	r2, [pc, #108]	; (800b64c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d013      	beq.n	800b60a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a1a      	ldr	r2, [pc, #104]	; (800b650 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d00e      	beq.n	800b60a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a18      	ldr	r2, [pc, #96]	; (800b654 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d009      	beq.n	800b60a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a17      	ldr	r2, [pc, #92]	; (800b658 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d004      	beq.n	800b60a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a15      	ldr	r2, [pc, #84]	; (800b65c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d10c      	bne.n	800b624 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	4313      	orrs	r3, r2
 800b61a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	40010000 	.word	0x40010000
 800b648:	40000400 	.word	0x40000400
 800b64c:	40000800 	.word	0x40000800
 800b650:	40000c00 	.word	0x40000c00
 800b654:	40010400 	.word	0x40010400
 800b658:	40014000 	.word	0x40014000
 800b65c:	40001800 	.word	0x40001800

0800b660 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b66a:	2300      	movs	r3, #0
 800b66c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b674:	2b01      	cmp	r3, #1
 800b676:	d101      	bne.n	800b67c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b678:	2302      	movs	r3, #2
 800b67a:	e03d      	b.n	800b6f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	4313      	orrs	r3, r2
 800b690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	69db      	ldr	r3, [r3, #28]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b720:	bf00      	nop
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <TIM_DMADelayPulseNCplt>:
  * @brief  TIM DMA Delay Pulse complete callback (complementary channel).
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseNCplt(DMA_HandleTypeDef *hdma)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b738:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	429a      	cmp	r2, r3
 800b742:	d10b      	bne.n	800b75c <TIM_DMADelayPulseNCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2201      	movs	r2, #1
 800b748:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	69db      	ldr	r3, [r3, #28]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d136      	bne.n	800b7c0 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2201      	movs	r2, #1
 800b756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b75a:	e031      	b.n	800b7c0 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	429a      	cmp	r2, r3
 800b764:	d10b      	bne.n	800b77e <TIM_DMADelayPulseNCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2202      	movs	r2, #2
 800b76a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	69db      	ldr	r3, [r3, #28]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d125      	bne.n	800b7c0 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2201      	movs	r2, #1
 800b778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b77c:	e020      	b.n	800b7c0 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	429a      	cmp	r2, r3
 800b786:	d10b      	bne.n	800b7a0 <TIM_DMADelayPulseNCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2204      	movs	r2, #4
 800b78c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	69db      	ldr	r3, [r3, #28]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d114      	bne.n	800b7c0 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b79e:	e00f      	b.n	800b7c0 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d10a      	bne.n	800b7c0 <TIM_DMADelayPulseNCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2208      	movs	r2, #8
 800b7ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	69db      	ldr	r3, [r3, #28]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d103      	bne.n	800b7c0 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f7ff f830 	bl	800a826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	771a      	strb	r2, [r3, #28]
}
 800b7cc:	bf00      	nop
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <TIM_DMAErrorCCxN>:
  * @brief  TIM DMA error callback (complementary channel)
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAErrorCCxN(DMA_HandleTypeDef *hdma)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d107      	bne.n	800b7fc <TIM_DMAErrorCCxN+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7fa:	e018      	b.n	800b82e <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	429a      	cmp	r2, r3
 800b804:	d107      	bne.n	800b816 <TIM_DMAErrorCCxN+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2202      	movs	r2, #2
 800b80a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b814:	e00b      	b.n	800b82e <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d106      	bne.n	800b82e <TIM_DMAErrorCCxN+0x5a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2204      	movs	r2, #4
 800b824:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2201      	movs	r2, #1
 800b82a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f7ff f817 	bl	800a862 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2200      	movs	r2, #0
 800b838:	771a      	strb	r2, [r3, #28]
}
 800b83a:	bf00      	nop
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b842:	b480      	push	{r7}
 800b844:	b087      	sub	sp, #28
 800b846:	af00      	add	r7, sp, #0
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	60b9      	str	r1, [r7, #8]
 800b84c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	f003 031f 	and.w	r3, r3, #31
 800b854:	2204      	movs	r2, #4
 800b856:	fa02 f303 	lsl.w	r3, r2, r3
 800b85a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6a1a      	ldr	r2, [r3, #32]
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	43db      	mvns	r3, r3
 800b864:	401a      	ands	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6a1a      	ldr	r2, [r3, #32]
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	f003 031f 	and.w	r3, r3, #31
 800b874:	6879      	ldr	r1, [r7, #4]
 800b876:	fa01 f303 	lsl.w	r3, r1, r3
 800b87a:	431a      	orrs	r2, r3
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	621a      	str	r2, [r3, #32]
}
 800b880:	bf00      	nop
 800b882:	371c      	adds	r7, #28
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b88c:	b084      	sub	sp, #16
 800b88e:	b580      	push	{r7, lr}
 800b890:	b084      	sub	sp, #16
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
 800b896:	f107 001c 	add.w	r0, r7, #28
 800b89a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d122      	bne.n	800b8ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b8b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d105      	bne.n	800b8de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f001 fbe8 	bl	800d0b4 <USB_CoreReset>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	73fb      	strb	r3, [r7, #15]
 800b8e8:	e01a      	b.n	800b920 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f001 fbdc 	bl	800d0b4 <USB_CoreReset>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b902:	2b00      	cmp	r3, #0
 800b904:	d106      	bne.n	800b914 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	639a      	str	r2, [r3, #56]	; 0x38
 800b912:	e005      	b.n	800b920 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b918:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b922:	2b01      	cmp	r3, #1
 800b924:	d10b      	bne.n	800b93e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	f043 0206 	orr.w	r2, r3, #6
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	f043 0220 	orr.w	r2, r3, #32
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b940:	4618      	mov	r0, r3
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b94a:	b004      	add	sp, #16
 800b94c:	4770      	bx	lr
	...

0800b950 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b950:	b480      	push	{r7}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	4613      	mov	r3, r2
 800b95c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b95e:	79fb      	ldrb	r3, [r7, #7]
 800b960:	2b02      	cmp	r3, #2
 800b962:	d165      	bne.n	800ba30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	4a41      	ldr	r2, [pc, #260]	; (800ba6c <USB_SetTurnaroundTime+0x11c>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d906      	bls.n	800b97a <USB_SetTurnaroundTime+0x2a>
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	4a40      	ldr	r2, [pc, #256]	; (800ba70 <USB_SetTurnaroundTime+0x120>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d202      	bcs.n	800b97a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b974:	230f      	movs	r3, #15
 800b976:	617b      	str	r3, [r7, #20]
 800b978:	e062      	b.n	800ba40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	4a3c      	ldr	r2, [pc, #240]	; (800ba70 <USB_SetTurnaroundTime+0x120>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d306      	bcc.n	800b990 <USB_SetTurnaroundTime+0x40>
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	4a3b      	ldr	r2, [pc, #236]	; (800ba74 <USB_SetTurnaroundTime+0x124>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d202      	bcs.n	800b990 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b98a:	230e      	movs	r3, #14
 800b98c:	617b      	str	r3, [r7, #20]
 800b98e:	e057      	b.n	800ba40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	4a38      	ldr	r2, [pc, #224]	; (800ba74 <USB_SetTurnaroundTime+0x124>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d306      	bcc.n	800b9a6 <USB_SetTurnaroundTime+0x56>
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	4a37      	ldr	r2, [pc, #220]	; (800ba78 <USB_SetTurnaroundTime+0x128>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d202      	bcs.n	800b9a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b9a0:	230d      	movs	r3, #13
 800b9a2:	617b      	str	r3, [r7, #20]
 800b9a4:	e04c      	b.n	800ba40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	4a33      	ldr	r2, [pc, #204]	; (800ba78 <USB_SetTurnaroundTime+0x128>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d306      	bcc.n	800b9bc <USB_SetTurnaroundTime+0x6c>
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	4a32      	ldr	r2, [pc, #200]	; (800ba7c <USB_SetTurnaroundTime+0x12c>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d802      	bhi.n	800b9bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b9b6:	230c      	movs	r3, #12
 800b9b8:	617b      	str	r3, [r7, #20]
 800b9ba:	e041      	b.n	800ba40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	4a2f      	ldr	r2, [pc, #188]	; (800ba7c <USB_SetTurnaroundTime+0x12c>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d906      	bls.n	800b9d2 <USB_SetTurnaroundTime+0x82>
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	4a2e      	ldr	r2, [pc, #184]	; (800ba80 <USB_SetTurnaroundTime+0x130>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d802      	bhi.n	800b9d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b9cc:	230b      	movs	r3, #11
 800b9ce:	617b      	str	r3, [r7, #20]
 800b9d0:	e036      	b.n	800ba40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	4a2a      	ldr	r2, [pc, #168]	; (800ba80 <USB_SetTurnaroundTime+0x130>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d906      	bls.n	800b9e8 <USB_SetTurnaroundTime+0x98>
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	4a29      	ldr	r2, [pc, #164]	; (800ba84 <USB_SetTurnaroundTime+0x134>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d802      	bhi.n	800b9e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b9e2:	230a      	movs	r3, #10
 800b9e4:	617b      	str	r3, [r7, #20]
 800b9e6:	e02b      	b.n	800ba40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	4a26      	ldr	r2, [pc, #152]	; (800ba84 <USB_SetTurnaroundTime+0x134>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d906      	bls.n	800b9fe <USB_SetTurnaroundTime+0xae>
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	4a25      	ldr	r2, [pc, #148]	; (800ba88 <USB_SetTurnaroundTime+0x138>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d202      	bcs.n	800b9fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b9f8:	2309      	movs	r3, #9
 800b9fa:	617b      	str	r3, [r7, #20]
 800b9fc:	e020      	b.n	800ba40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	4a21      	ldr	r2, [pc, #132]	; (800ba88 <USB_SetTurnaroundTime+0x138>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d306      	bcc.n	800ba14 <USB_SetTurnaroundTime+0xc4>
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	4a20      	ldr	r2, [pc, #128]	; (800ba8c <USB_SetTurnaroundTime+0x13c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d802      	bhi.n	800ba14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ba0e:	2308      	movs	r3, #8
 800ba10:	617b      	str	r3, [r7, #20]
 800ba12:	e015      	b.n	800ba40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	4a1d      	ldr	r2, [pc, #116]	; (800ba8c <USB_SetTurnaroundTime+0x13c>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d906      	bls.n	800ba2a <USB_SetTurnaroundTime+0xda>
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	4a1c      	ldr	r2, [pc, #112]	; (800ba90 <USB_SetTurnaroundTime+0x140>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d202      	bcs.n	800ba2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ba24:	2307      	movs	r3, #7
 800ba26:	617b      	str	r3, [r7, #20]
 800ba28:	e00a      	b.n	800ba40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ba2a:	2306      	movs	r3, #6
 800ba2c:	617b      	str	r3, [r7, #20]
 800ba2e:	e007      	b.n	800ba40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ba30:	79fb      	ldrb	r3, [r7, #7]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d102      	bne.n	800ba3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ba36:	2309      	movs	r3, #9
 800ba38:	617b      	str	r3, [r7, #20]
 800ba3a:	e001      	b.n	800ba40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ba3c:	2309      	movs	r3, #9
 800ba3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	68da      	ldr	r2, [r3, #12]
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	029b      	lsls	r3, r3, #10
 800ba54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ba58:	431a      	orrs	r2, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	371c      	adds	r7, #28
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr
 800ba6c:	00d8acbf 	.word	0x00d8acbf
 800ba70:	00e4e1c0 	.word	0x00e4e1c0
 800ba74:	00f42400 	.word	0x00f42400
 800ba78:	01067380 	.word	0x01067380
 800ba7c:	011a499f 	.word	0x011a499f
 800ba80:	01312cff 	.word	0x01312cff
 800ba84:	014ca43f 	.word	0x014ca43f
 800ba88:	016e3600 	.word	0x016e3600
 800ba8c:	01a6ab1f 	.word	0x01a6ab1f
 800ba90:	01e84800 	.word	0x01e84800

0800ba94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	f043 0201 	orr.w	r2, r3, #1
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bab6:	b480      	push	{r7}
 800bab8:	b083      	sub	sp, #12
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	f023 0201 	bic.w	r2, r3, #1
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	460b      	mov	r3, r1
 800bae2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bae4:	2300      	movs	r3, #0
 800bae6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800baf4:	78fb      	ldrb	r3, [r7, #3]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d115      	bne.n	800bb26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bb06:	2001      	movs	r0, #1
 800bb08:	f7f8 fb9a 	bl	8004240 <HAL_Delay>
      ms++;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f001 fa3f 	bl	800cf96 <USB_GetMode>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d01e      	beq.n	800bb5c <USB_SetCurrentMode+0x84>
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2b31      	cmp	r3, #49	; 0x31
 800bb22:	d9f0      	bls.n	800bb06 <USB_SetCurrentMode+0x2e>
 800bb24:	e01a      	b.n	800bb5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bb26:	78fb      	ldrb	r3, [r7, #3]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d115      	bne.n	800bb58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bb38:	2001      	movs	r0, #1
 800bb3a:	f7f8 fb81 	bl	8004240 <HAL_Delay>
      ms++;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	3301      	adds	r3, #1
 800bb42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f001 fa26 	bl	800cf96 <USB_GetMode>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d005      	beq.n	800bb5c <USB_SetCurrentMode+0x84>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b31      	cmp	r3, #49	; 0x31
 800bb54:	d9f0      	bls.n	800bb38 <USB_SetCurrentMode+0x60>
 800bb56:	e001      	b.n	800bb5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e005      	b.n	800bb68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2b32      	cmp	r3, #50	; 0x32
 800bb60:	d101      	bne.n	800bb66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e000      	b.n	800bb68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb70:	b084      	sub	sp, #16
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b086      	sub	sp, #24
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bb7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	613b      	str	r3, [r7, #16]
 800bb8e:	e009      	b.n	800bba4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	3340      	adds	r3, #64	; 0x40
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4413      	add	r3, r2
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	3301      	adds	r3, #1
 800bba2:	613b      	str	r3, [r7, #16]
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	2b0e      	cmp	r3, #14
 800bba8:	d9f2      	bls.n	800bb90 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bbaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d11c      	bne.n	800bbea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbbe:	f043 0302 	orr.w	r3, r3, #2
 800bbc2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	601a      	str	r2, [r3, #0]
 800bbe8:	e005      	b.n	800bbf6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	2300      	movs	r3, #0
 800bc00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc08:	4619      	mov	r1, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc10:	461a      	mov	r2, r3
 800bc12:	680b      	ldr	r3, [r1, #0]
 800bc14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d10c      	bne.n	800bc36 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d104      	bne.n	800bc2c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bc22:	2100      	movs	r1, #0
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f965 	bl	800bef4 <USB_SetDevSpeed>
 800bc2a:	e008      	b.n	800bc3e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bc2c:	2101      	movs	r1, #1
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f960 	bl	800bef4 <USB_SetDevSpeed>
 800bc34:	e003      	b.n	800bc3e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bc36:	2103      	movs	r1, #3
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f95b 	bl	800bef4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bc3e:	2110      	movs	r1, #16
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 f8f3 	bl	800be2c <USB_FlushTxFifo>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 f91f 	bl	800be94 <USB_FlushRxFifo>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc66:	461a      	mov	r2, r3
 800bc68:	2300      	movs	r3, #0
 800bc6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc72:	461a      	mov	r2, r3
 800bc74:	2300      	movs	r3, #0
 800bc76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc7e:	461a      	mov	r2, r3
 800bc80:	2300      	movs	r3, #0
 800bc82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc84:	2300      	movs	r3, #0
 800bc86:	613b      	str	r3, [r7, #16]
 800bc88:	e043      	b.n	800bd12 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	015a      	lsls	r2, r3, #5
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	4413      	add	r3, r2
 800bc92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bca0:	d118      	bne.n	800bcd4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10a      	bne.n	800bcbe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	015a      	lsls	r2, r3, #5
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcba:	6013      	str	r3, [r2, #0]
 800bcbc:	e013      	b.n	800bce6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	015a      	lsls	r2, r3, #5
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcca:	461a      	mov	r2, r3
 800bccc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bcd0:	6013      	str	r3, [r2, #0]
 800bcd2:	e008      	b.n	800bce6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	015a      	lsls	r2, r3, #5
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	4413      	add	r3, r2
 800bcdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce0:	461a      	mov	r2, r3
 800bce2:	2300      	movs	r3, #0
 800bce4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	015a      	lsls	r2, r3, #5
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	4413      	add	r3, r2
 800bcee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	015a      	lsls	r2, r3, #5
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	4413      	add	r3, r2
 800bd00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd04:	461a      	mov	r2, r3
 800bd06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	613b      	str	r3, [r7, #16]
 800bd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d3b7      	bcc.n	800bc8a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	613b      	str	r3, [r7, #16]
 800bd1e:	e043      	b.n	800bda8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	015a      	lsls	r2, r3, #5
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	4413      	add	r3, r2
 800bd28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd36:	d118      	bne.n	800bd6a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d10a      	bne.n	800bd54 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	015a      	lsls	r2, r3, #5
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	4413      	add	r3, r2
 800bd46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	e013      	b.n	800bd7c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	015a      	lsls	r2, r3, #5
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd60:	461a      	mov	r2, r3
 800bd62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd66:	6013      	str	r3, [r2, #0]
 800bd68:	e008      	b.n	800bd7c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	015a      	lsls	r2, r3, #5
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	4413      	add	r3, r2
 800bd72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd76:	461a      	mov	r2, r3
 800bd78:	2300      	movs	r3, #0
 800bd7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	015a      	lsls	r2, r3, #5
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	4413      	add	r3, r2
 800bd84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd88:	461a      	mov	r2, r3
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	015a      	lsls	r2, r3, #5
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	4413      	add	r3, r2
 800bd96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bda0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	3301      	adds	r3, #1
 800bda6:	613b      	str	r3, [r7, #16]
 800bda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d3b7      	bcc.n	800bd20 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bdd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d105      	bne.n	800bde4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	699b      	ldr	r3, [r3, #24]
 800bddc:	f043 0210 	orr.w	r2, r3, #16
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	699a      	ldr	r2, [r3, #24]
 800bde8:	4b0f      	ldr	r3, [pc, #60]	; (800be28 <USB_DevInit+0x2b8>)
 800bdea:	4313      	orrs	r3, r2
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bdf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d005      	beq.n	800be02 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	699b      	ldr	r3, [r3, #24]
 800bdfa:	f043 0208 	orr.w	r2, r3, #8
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800be02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be04:	2b01      	cmp	r3, #1
 800be06:	d107      	bne.n	800be18 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be10:	f043 0304 	orr.w	r3, r3, #4
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800be18:	7dfb      	ldrb	r3, [r7, #23]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3718      	adds	r7, #24
 800be1e:	46bd      	mov	sp, r7
 800be20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be24:	b004      	add	sp, #16
 800be26:	4770      	bx	lr
 800be28:	803c3800 	.word	0x803c3800

0800be2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be36:	2300      	movs	r3, #0
 800be38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	3301      	adds	r3, #1
 800be3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4a13      	ldr	r2, [pc, #76]	; (800be90 <USB_FlushTxFifo+0x64>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d901      	bls.n	800be4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800be48:	2303      	movs	r3, #3
 800be4a:	e01b      	b.n	800be84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	691b      	ldr	r3, [r3, #16]
 800be50:	2b00      	cmp	r3, #0
 800be52:	daf2      	bge.n	800be3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800be54:	2300      	movs	r3, #0
 800be56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	019b      	lsls	r3, r3, #6
 800be5c:	f043 0220 	orr.w	r2, r3, #32
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	3301      	adds	r3, #1
 800be68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	4a08      	ldr	r2, [pc, #32]	; (800be90 <USB_FlushTxFifo+0x64>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d901      	bls.n	800be76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800be72:	2303      	movs	r3, #3
 800be74:	e006      	b.n	800be84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	f003 0320 	and.w	r3, r3, #32
 800be7e:	2b20      	cmp	r3, #32
 800be80:	d0f0      	beq.n	800be64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3714      	adds	r7, #20
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr
 800be90:	00030d40 	.word	0x00030d40

0800be94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be9c:	2300      	movs	r3, #0
 800be9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	3301      	adds	r3, #1
 800bea4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	4a11      	ldr	r2, [pc, #68]	; (800bef0 <USB_FlushRxFifo+0x5c>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d901      	bls.n	800beb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	e018      	b.n	800bee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	daf2      	bge.n	800bea0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800beba:	2300      	movs	r3, #0
 800bebc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2210      	movs	r2, #16
 800bec2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	3301      	adds	r3, #1
 800bec8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	4a08      	ldr	r2, [pc, #32]	; (800bef0 <USB_FlushRxFifo+0x5c>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d901      	bls.n	800bed6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bed2:	2303      	movs	r3, #3
 800bed4:	e006      	b.n	800bee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	f003 0310 	and.w	r3, r3, #16
 800bede:	2b10      	cmp	r3, #16
 800bee0:	d0f0      	beq.n	800bec4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3714      	adds	r7, #20
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr
 800bef0:	00030d40 	.word	0x00030d40

0800bef4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	78fb      	ldrb	r3, [r7, #3]
 800bf0e:	68f9      	ldr	r1, [r7, #12]
 800bf10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf14:	4313      	orrs	r3, r2
 800bf16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bf26:	b480      	push	{r7}
 800bf28:	b087      	sub	sp, #28
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	f003 0306 	and.w	r3, r3, #6
 800bf3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d102      	bne.n	800bf4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bf46:	2300      	movs	r3, #0
 800bf48:	75fb      	strb	r3, [r7, #23]
 800bf4a:	e00a      	b.n	800bf62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	d002      	beq.n	800bf58 <USB_GetDevSpeed+0x32>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2b06      	cmp	r3, #6
 800bf56:	d102      	bne.n	800bf5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bf58:	2302      	movs	r3, #2
 800bf5a:	75fb      	strb	r3, [r7, #23]
 800bf5c:	e001      	b.n	800bf62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bf5e:	230f      	movs	r3, #15
 800bf60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bf62:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	371c      	adds	r7, #28
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	785b      	ldrb	r3, [r3, #1]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d13a      	bne.n	800c002 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf92:	69da      	ldr	r2, [r3, #28]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	f003 030f 	and.w	r3, r3, #15
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	fa01 f303 	lsl.w	r3, r1, r3
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	68f9      	ldr	r1, [r7, #12]
 800bfa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	015a      	lsls	r2, r3, #5
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d155      	bne.n	800c070 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	015a      	lsls	r2, r3, #5
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	4413      	add	r3, r2
 800bfcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	791b      	ldrb	r3, [r3, #4]
 800bfde:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bfe0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	059b      	lsls	r3, r3, #22
 800bfe6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	68ba      	ldr	r2, [r7, #8]
 800bfec:	0151      	lsls	r1, r2, #5
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	440a      	add	r2, r1
 800bff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	e036      	b.n	800c070 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c008:	69da      	ldr	r2, [r3, #28]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	f003 030f 	and.w	r3, r3, #15
 800c012:	2101      	movs	r1, #1
 800c014:	fa01 f303 	lsl.w	r3, r1, r3
 800c018:	041b      	lsls	r3, r3, #16
 800c01a:	68f9      	ldr	r1, [r7, #12]
 800c01c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c020:	4313      	orrs	r3, r2
 800c022:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	015a      	lsls	r2, r3, #5
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	4413      	add	r3, r2
 800c02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c036:	2b00      	cmp	r3, #0
 800c038:	d11a      	bne.n	800c070 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	015a      	lsls	r2, r3, #5
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	4413      	add	r3, r2
 800c042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	791b      	ldrb	r3, [r3, #4]
 800c054:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c056:	430b      	orrs	r3, r1
 800c058:	4313      	orrs	r3, r2
 800c05a:	68ba      	ldr	r2, [r7, #8]
 800c05c:	0151      	lsls	r1, r2, #5
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	440a      	add	r2, r1
 800c062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c06a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c06e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3714      	adds	r7, #20
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
	...

0800c080 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	785b      	ldrb	r3, [r3, #1]
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d161      	bne.n	800c160 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	015a      	lsls	r2, r3, #5
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0b2:	d11f      	bne.n	800c0f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	015a      	lsls	r2, r3, #5
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	68ba      	ldr	r2, [r7, #8]
 800c0c4:	0151      	lsls	r1, r2, #5
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	440a      	add	r2, r1
 800c0ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	015a      	lsls	r2, r3, #5
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	4413      	add	r3, r2
 800c0dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	0151      	lsls	r1, r2, #5
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	440a      	add	r2, r1
 800c0ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	f003 030f 	and.w	r3, r3, #15
 800c104:	2101      	movs	r1, #1
 800c106:	fa01 f303 	lsl.w	r3, r1, r3
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	43db      	mvns	r3, r3
 800c10e:	68f9      	ldr	r1, [r7, #12]
 800c110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c114:	4013      	ands	r3, r2
 800c116:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c11e:	69da      	ldr	r2, [r3, #28]
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	f003 030f 	and.w	r3, r3, #15
 800c128:	2101      	movs	r1, #1
 800c12a:	fa01 f303 	lsl.w	r3, r1, r3
 800c12e:	b29b      	uxth	r3, r3
 800c130:	43db      	mvns	r3, r3
 800c132:	68f9      	ldr	r1, [r7, #12]
 800c134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c138:	4013      	ands	r3, r2
 800c13a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	015a      	lsls	r2, r3, #5
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	4413      	add	r3, r2
 800c144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	0159      	lsls	r1, r3, #5
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	440b      	add	r3, r1
 800c152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c156:	4619      	mov	r1, r3
 800c158:	4b35      	ldr	r3, [pc, #212]	; (800c230 <USB_DeactivateEndpoint+0x1b0>)
 800c15a:	4013      	ands	r3, r2
 800c15c:	600b      	str	r3, [r1, #0]
 800c15e:	e060      	b.n	800c222 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	015a      	lsls	r2, r3, #5
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	4413      	add	r3, r2
 800c168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c176:	d11f      	bne.n	800c1b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	015a      	lsls	r2, r3, #5
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	4413      	add	r3, r2
 800c180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68ba      	ldr	r2, [r7, #8]
 800c188:	0151      	lsls	r1, r2, #5
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	440a      	add	r2, r1
 800c18e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c192:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c196:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	015a      	lsls	r2, r3, #5
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	4413      	add	r3, r2
 800c1a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	0151      	lsls	r1, r2, #5
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	440a      	add	r2, r1
 800c1ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	f003 030f 	and.w	r3, r3, #15
 800c1c8:	2101      	movs	r1, #1
 800c1ca:	fa01 f303 	lsl.w	r3, r1, r3
 800c1ce:	041b      	lsls	r3, r3, #16
 800c1d0:	43db      	mvns	r3, r3
 800c1d2:	68f9      	ldr	r1, [r7, #12]
 800c1d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1d8:	4013      	ands	r3, r2
 800c1da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1e2:	69da      	ldr	r2, [r3, #28]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	f003 030f 	and.w	r3, r3, #15
 800c1ec:	2101      	movs	r1, #1
 800c1ee:	fa01 f303 	lsl.w	r3, r1, r3
 800c1f2:	041b      	lsls	r3, r3, #16
 800c1f4:	43db      	mvns	r3, r3
 800c1f6:	68f9      	ldr	r1, [r7, #12]
 800c1f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	015a      	lsls	r2, r3, #5
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	4413      	add	r3, r2
 800c208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	0159      	lsls	r1, r3, #5
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	440b      	add	r3, r1
 800c216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c21a:	4619      	mov	r1, r3
 800c21c:	4b05      	ldr	r3, [pc, #20]	; (800c234 <USB_DeactivateEndpoint+0x1b4>)
 800c21e:	4013      	ands	r3, r2
 800c220:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	3714      	adds	r7, #20
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr
 800c230:	ec337800 	.word	0xec337800
 800c234:	eff37800 	.word	0xeff37800

0800c238 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b08a      	sub	sp, #40	; 0x28
 800c23c:	af02      	add	r7, sp, #8
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	4613      	mov	r3, r2
 800c244:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	785b      	ldrb	r3, [r3, #1]
 800c254:	2b01      	cmp	r3, #1
 800c256:	f040 815c 	bne.w	800c512 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d132      	bne.n	800c2c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	015a      	lsls	r2, r3, #5
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	4413      	add	r3, r2
 800c26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	69ba      	ldr	r2, [r7, #24]
 800c272:	0151      	lsls	r1, r2, #5
 800c274:	69fa      	ldr	r2, [r7, #28]
 800c276:	440a      	add	r2, r1
 800c278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c27c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c280:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c284:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	015a      	lsls	r2, r3, #5
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	4413      	add	r3, r2
 800c28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	69ba      	ldr	r2, [r7, #24]
 800c296:	0151      	lsls	r1, r2, #5
 800c298:	69fa      	ldr	r2, [r7, #28]
 800c29a:	440a      	add	r2, r1
 800c29c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	015a      	lsls	r2, r3, #5
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	69ba      	ldr	r2, [r7, #24]
 800c2b6:	0151      	lsls	r1, r2, #5
 800c2b8:	69fa      	ldr	r2, [r7, #28]
 800c2ba:	440a      	add	r2, r1
 800c2bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2c0:	0cdb      	lsrs	r3, r3, #19
 800c2c2:	04db      	lsls	r3, r3, #19
 800c2c4:	6113      	str	r3, [r2, #16]
 800c2c6:	e074      	b.n	800c3b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	015a      	lsls	r2, r3, #5
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	69ba      	ldr	r2, [r7, #24]
 800c2d8:	0151      	lsls	r1, r2, #5
 800c2da:	69fa      	ldr	r2, [r7, #28]
 800c2dc:	440a      	add	r2, r1
 800c2de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2e2:	0cdb      	lsrs	r3, r3, #19
 800c2e4:	04db      	lsls	r3, r3, #19
 800c2e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	015a      	lsls	r2, r3, #5
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	69ba      	ldr	r2, [r7, #24]
 800c2f8:	0151      	lsls	r1, r2, #5
 800c2fa:	69fa      	ldr	r2, [r7, #28]
 800c2fc:	440a      	add	r2, r1
 800c2fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c302:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c306:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c30a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	015a      	lsls	r2, r3, #5
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	4413      	add	r3, r2
 800c314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c318:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	6999      	ldr	r1, [r3, #24]
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	440b      	add	r3, r1
 800c324:	1e59      	subs	r1, r3, #1
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c32e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c330:	4b9d      	ldr	r3, [pc, #628]	; (800c5a8 <USB_EPStartXfer+0x370>)
 800c332:	400b      	ands	r3, r1
 800c334:	69b9      	ldr	r1, [r7, #24]
 800c336:	0148      	lsls	r0, r1, #5
 800c338:	69f9      	ldr	r1, [r7, #28]
 800c33a:	4401      	add	r1, r0
 800c33c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c340:	4313      	orrs	r3, r2
 800c342:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	015a      	lsls	r2, r3, #5
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	4413      	add	r3, r2
 800c34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c350:	691a      	ldr	r2, [r3, #16]
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	699b      	ldr	r3, [r3, #24]
 800c356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c35a:	69b9      	ldr	r1, [r7, #24]
 800c35c:	0148      	lsls	r0, r1, #5
 800c35e:	69f9      	ldr	r1, [r7, #28]
 800c360:	4401      	add	r1, r0
 800c362:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c366:	4313      	orrs	r3, r2
 800c368:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	791b      	ldrb	r3, [r3, #4]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d11f      	bne.n	800c3b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	015a      	lsls	r2, r3, #5
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	4413      	add	r3, r2
 800c37a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	69ba      	ldr	r2, [r7, #24]
 800c382:	0151      	lsls	r1, r2, #5
 800c384:	69fa      	ldr	r2, [r7, #28]
 800c386:	440a      	add	r2, r1
 800c388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c38c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c390:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	015a      	lsls	r2, r3, #5
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	4413      	add	r3, r2
 800c39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	69ba      	ldr	r2, [r7, #24]
 800c3a2:	0151      	lsls	r1, r2, #5
 800c3a4:	69fa      	ldr	r2, [r7, #28]
 800c3a6:	440a      	add	r2, r1
 800c3a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c3b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c3b2:	79fb      	ldrb	r3, [r7, #7]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d14b      	bne.n	800c450 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	695b      	ldr	r3, [r3, #20]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d009      	beq.n	800c3d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	015a      	lsls	r2, r3, #5
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	791b      	ldrb	r3, [r3, #4]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d128      	bne.n	800c42e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d110      	bne.n	800c40e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	015a      	lsls	r2, r3, #5
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	69ba      	ldr	r2, [r7, #24]
 800c3fc:	0151      	lsls	r1, r2, #5
 800c3fe:	69fa      	ldr	r2, [r7, #28]
 800c400:	440a      	add	r2, r1
 800c402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c406:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c40a:	6013      	str	r3, [r2, #0]
 800c40c:	e00f      	b.n	800c42e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	015a      	lsls	r2, r3, #5
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	4413      	add	r3, r2
 800c416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	69ba      	ldr	r2, [r7, #24]
 800c41e:	0151      	lsls	r1, r2, #5
 800c420:	69fa      	ldr	r2, [r7, #28]
 800c422:	440a      	add	r2, r1
 800c424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c42c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	015a      	lsls	r2, r3, #5
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	4413      	add	r3, r2
 800c436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	69ba      	ldr	r2, [r7, #24]
 800c43e:	0151      	lsls	r1, r2, #5
 800c440:	69fa      	ldr	r2, [r7, #28]
 800c442:	440a      	add	r2, r1
 800c444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c448:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c44c:	6013      	str	r3, [r2, #0]
 800c44e:	e133      	b.n	800c6b8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	015a      	lsls	r2, r3, #5
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	4413      	add	r3, r2
 800c458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	69ba      	ldr	r2, [r7, #24]
 800c460:	0151      	lsls	r1, r2, #5
 800c462:	69fa      	ldr	r2, [r7, #28]
 800c464:	440a      	add	r2, r1
 800c466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c46a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c46e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	791b      	ldrb	r3, [r3, #4]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d015      	beq.n	800c4a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	699b      	ldr	r3, [r3, #24]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 811b 	beq.w	800c6b8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	f003 030f 	and.w	r3, r3, #15
 800c492:	2101      	movs	r1, #1
 800c494:	fa01 f303 	lsl.w	r3, r1, r3
 800c498:	69f9      	ldr	r1, [r7, #28]
 800c49a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	634b      	str	r3, [r1, #52]	; 0x34
 800c4a2:	e109      	b.n	800c6b8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d110      	bne.n	800c4d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	015a      	lsls	r2, r3, #5
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	69ba      	ldr	r2, [r7, #24]
 800c4c4:	0151      	lsls	r1, r2, #5
 800c4c6:	69fa      	ldr	r2, [r7, #28]
 800c4c8:	440a      	add	r2, r1
 800c4ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c4d2:	6013      	str	r3, [r2, #0]
 800c4d4:	e00f      	b.n	800c4f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	015a      	lsls	r2, r3, #5
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	4413      	add	r3, r2
 800c4de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	69ba      	ldr	r2, [r7, #24]
 800c4e6:	0151      	lsls	r1, r2, #5
 800c4e8:	69fa      	ldr	r2, [r7, #28]
 800c4ea:	440a      	add	r2, r1
 800c4ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	6919      	ldr	r1, [r3, #16]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	781a      	ldrb	r2, [r3, #0]
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	699b      	ldr	r3, [r3, #24]
 800c502:	b298      	uxth	r0, r3
 800c504:	79fb      	ldrb	r3, [r7, #7]
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	4603      	mov	r3, r0
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	f000 fade 	bl	800cacc <USB_WritePacket>
 800c510:	e0d2      	b.n	800c6b8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	015a      	lsls	r2, r3, #5
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	4413      	add	r3, r2
 800c51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	69ba      	ldr	r2, [r7, #24]
 800c522:	0151      	lsls	r1, r2, #5
 800c524:	69fa      	ldr	r2, [r7, #28]
 800c526:	440a      	add	r2, r1
 800c528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c52c:	0cdb      	lsrs	r3, r3, #19
 800c52e:	04db      	lsls	r3, r3, #19
 800c530:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	015a      	lsls	r2, r3, #5
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	4413      	add	r3, r2
 800c53a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c53e:	691b      	ldr	r3, [r3, #16]
 800c540:	69ba      	ldr	r2, [r7, #24]
 800c542:	0151      	lsls	r1, r2, #5
 800c544:	69fa      	ldr	r2, [r7, #28]
 800c546:	440a      	add	r2, r1
 800c548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c54c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c550:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c554:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	699b      	ldr	r3, [r3, #24]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d126      	bne.n	800c5ac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	015a      	lsls	r2, r3, #5
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	4413      	add	r3, r2
 800c566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c56a:	691a      	ldr	r2, [r3, #16]
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c574:	69b9      	ldr	r1, [r7, #24]
 800c576:	0148      	lsls	r0, r1, #5
 800c578:	69f9      	ldr	r1, [r7, #28]
 800c57a:	4401      	add	r1, r0
 800c57c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c580:	4313      	orrs	r3, r2
 800c582:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	015a      	lsls	r2, r3, #5
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	4413      	add	r3, r2
 800c58c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	69ba      	ldr	r2, [r7, #24]
 800c594:	0151      	lsls	r1, r2, #5
 800c596:	69fa      	ldr	r2, [r7, #28]
 800c598:	440a      	add	r2, r1
 800c59a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c59e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5a2:	6113      	str	r3, [r2, #16]
 800c5a4:	e03a      	b.n	800c61c <USB_EPStartXfer+0x3e4>
 800c5a6:	bf00      	nop
 800c5a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	699a      	ldr	r2, [r3, #24]
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	1e5a      	subs	r2, r3, #1
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5c0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	8afa      	ldrh	r2, [r7, #22]
 800c5c8:	fb03 f202 	mul.w	r2, r3, r2
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	015a      	lsls	r2, r3, #5
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5dc:	691a      	ldr	r2, [r3, #16]
 800c5de:	8afb      	ldrh	r3, [r7, #22]
 800c5e0:	04d9      	lsls	r1, r3, #19
 800c5e2:	4b38      	ldr	r3, [pc, #224]	; (800c6c4 <USB_EPStartXfer+0x48c>)
 800c5e4:	400b      	ands	r3, r1
 800c5e6:	69b9      	ldr	r1, [r7, #24]
 800c5e8:	0148      	lsls	r0, r1, #5
 800c5ea:	69f9      	ldr	r1, [r7, #28]
 800c5ec:	4401      	add	r1, r0
 800c5ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	015a      	lsls	r2, r3, #5
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c602:	691a      	ldr	r2, [r3, #16]
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	69db      	ldr	r3, [r3, #28]
 800c608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c60c:	69b9      	ldr	r1, [r7, #24]
 800c60e:	0148      	lsls	r0, r1, #5
 800c610:	69f9      	ldr	r1, [r7, #28]
 800c612:	4401      	add	r1, r0
 800c614:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c618:	4313      	orrs	r3, r2
 800c61a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c61c:	79fb      	ldrb	r3, [r7, #7]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d10d      	bne.n	800c63e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d009      	beq.n	800c63e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	6919      	ldr	r1, [r3, #16]
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	015a      	lsls	r2, r3, #5
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	4413      	add	r3, r2
 800c636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c63a:	460a      	mov	r2, r1
 800c63c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	791b      	ldrb	r3, [r3, #4]
 800c642:	2b01      	cmp	r3, #1
 800c644:	d128      	bne.n	800c698 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c652:	2b00      	cmp	r3, #0
 800c654:	d110      	bne.n	800c678 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	015a      	lsls	r2, r3, #5
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	4413      	add	r3, r2
 800c65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	69ba      	ldr	r2, [r7, #24]
 800c666:	0151      	lsls	r1, r2, #5
 800c668:	69fa      	ldr	r2, [r7, #28]
 800c66a:	440a      	add	r2, r1
 800c66c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c670:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c674:	6013      	str	r3, [r2, #0]
 800c676:	e00f      	b.n	800c698 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	015a      	lsls	r2, r3, #5
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	4413      	add	r3, r2
 800c680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	69ba      	ldr	r2, [r7, #24]
 800c688:	0151      	lsls	r1, r2, #5
 800c68a:	69fa      	ldr	r2, [r7, #28]
 800c68c:	440a      	add	r2, r1
 800c68e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c696:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	015a      	lsls	r2, r3, #5
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	4413      	add	r3, r2
 800c6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	69ba      	ldr	r2, [r7, #24]
 800c6a8:	0151      	lsls	r1, r2, #5
 800c6aa:	69fa      	ldr	r2, [r7, #28]
 800c6ac:	440a      	add	r2, r1
 800c6ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c6b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3720      	adds	r7, #32
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	1ff80000 	.word	0x1ff80000

0800c6c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b087      	sub	sp, #28
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	785b      	ldrb	r3, [r3, #1]
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	f040 80ce 	bne.w	800c886 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	699b      	ldr	r3, [r3, #24]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d132      	bne.n	800c758 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	015a      	lsls	r2, r3, #5
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6fe:	691b      	ldr	r3, [r3, #16]
 800c700:	693a      	ldr	r2, [r7, #16]
 800c702:	0151      	lsls	r1, r2, #5
 800c704:	697a      	ldr	r2, [r7, #20]
 800c706:	440a      	add	r2, r1
 800c708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c70c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c710:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c714:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	015a      	lsls	r2, r3, #5
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	4413      	add	r3, r2
 800c71e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c722:	691b      	ldr	r3, [r3, #16]
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	0151      	lsls	r1, r2, #5
 800c728:	697a      	ldr	r2, [r7, #20]
 800c72a:	440a      	add	r2, r1
 800c72c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c734:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	015a      	lsls	r2, r3, #5
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	4413      	add	r3, r2
 800c73e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c742:	691b      	ldr	r3, [r3, #16]
 800c744:	693a      	ldr	r2, [r7, #16]
 800c746:	0151      	lsls	r1, r2, #5
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	440a      	add	r2, r1
 800c74c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c750:	0cdb      	lsrs	r3, r3, #19
 800c752:	04db      	lsls	r3, r3, #19
 800c754:	6113      	str	r3, [r2, #16]
 800c756:	e04e      	b.n	800c7f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	015a      	lsls	r2, r3, #5
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	4413      	add	r3, r2
 800c760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	693a      	ldr	r2, [r7, #16]
 800c768:	0151      	lsls	r1, r2, #5
 800c76a:	697a      	ldr	r2, [r7, #20]
 800c76c:	440a      	add	r2, r1
 800c76e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c772:	0cdb      	lsrs	r3, r3, #19
 800c774:	04db      	lsls	r3, r3, #19
 800c776:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	015a      	lsls	r2, r3, #5
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	4413      	add	r3, r2
 800c780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	693a      	ldr	r2, [r7, #16]
 800c788:	0151      	lsls	r1, r2, #5
 800c78a:	697a      	ldr	r2, [r7, #20]
 800c78c:	440a      	add	r2, r1
 800c78e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c792:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c796:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c79a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	699a      	ldr	r2, [r3, #24]
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d903      	bls.n	800c7b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	68da      	ldr	r2, [r3, #12]
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	015a      	lsls	r2, r3, #5
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	693a      	ldr	r2, [r7, #16]
 800c7c0:	0151      	lsls	r1, r2, #5
 800c7c2:	697a      	ldr	r2, [r7, #20]
 800c7c4:	440a      	add	r2, r1
 800c7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c7ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	015a      	lsls	r2, r3, #5
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7dc:	691a      	ldr	r2, [r3, #16]
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	699b      	ldr	r3, [r3, #24]
 800c7e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7e6:	6939      	ldr	r1, [r7, #16]
 800c7e8:	0148      	lsls	r0, r1, #5
 800c7ea:	6979      	ldr	r1, [r7, #20]
 800c7ec:	4401      	add	r1, r0
 800c7ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c7f6:	79fb      	ldrb	r3, [r7, #7]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d11e      	bne.n	800c83a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	695b      	ldr	r3, [r3, #20]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d009      	beq.n	800c818 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	015a      	lsls	r2, r3, #5
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	4413      	add	r3, r2
 800c80c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c810:	461a      	mov	r2, r3
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	695b      	ldr	r3, [r3, #20]
 800c816:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	015a      	lsls	r2, r3, #5
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	4413      	add	r3, r2
 800c820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	693a      	ldr	r2, [r7, #16]
 800c828:	0151      	lsls	r1, r2, #5
 800c82a:	697a      	ldr	r2, [r7, #20]
 800c82c:	440a      	add	r2, r1
 800c82e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c832:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c836:	6013      	str	r3, [r2, #0]
 800c838:	e097      	b.n	800c96a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	015a      	lsls	r2, r3, #5
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	4413      	add	r3, r2
 800c842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	693a      	ldr	r2, [r7, #16]
 800c84a:	0151      	lsls	r1, r2, #5
 800c84c:	697a      	ldr	r2, [r7, #20]
 800c84e:	440a      	add	r2, r1
 800c850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c854:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c858:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	699b      	ldr	r3, [r3, #24]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f000 8083 	beq.w	800c96a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c86a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	f003 030f 	and.w	r3, r3, #15
 800c874:	2101      	movs	r1, #1
 800c876:	fa01 f303 	lsl.w	r3, r1, r3
 800c87a:	6979      	ldr	r1, [r7, #20]
 800c87c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c880:	4313      	orrs	r3, r2
 800c882:	634b      	str	r3, [r1, #52]	; 0x34
 800c884:	e071      	b.n	800c96a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	015a      	lsls	r2, r3, #5
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	4413      	add	r3, r2
 800c88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	693a      	ldr	r2, [r7, #16]
 800c896:	0151      	lsls	r1, r2, #5
 800c898:	697a      	ldr	r2, [r7, #20]
 800c89a:	440a      	add	r2, r1
 800c89c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8a0:	0cdb      	lsrs	r3, r3, #19
 800c8a2:	04db      	lsls	r3, r3, #19
 800c8a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	015a      	lsls	r2, r3, #5
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	693a      	ldr	r2, [r7, #16]
 800c8b6:	0151      	lsls	r1, r2, #5
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	440a      	add	r2, r1
 800c8bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c8c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c8c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	699b      	ldr	r3, [r3, #24]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d003      	beq.n	800c8da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	68da      	ldr	r2, [r3, #12]
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	68da      	ldr	r2, [r3, #12]
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	015a      	lsls	r2, r3, #5
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ee:	691b      	ldr	r3, [r3, #16]
 800c8f0:	693a      	ldr	r2, [r7, #16]
 800c8f2:	0151      	lsls	r1, r2, #5
 800c8f4:	697a      	ldr	r2, [r7, #20]
 800c8f6:	440a      	add	r2, r1
 800c8f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c900:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	015a      	lsls	r2, r3, #5
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	4413      	add	r3, r2
 800c90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c90e:	691a      	ldr	r2, [r3, #16]
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	69db      	ldr	r3, [r3, #28]
 800c914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c918:	6939      	ldr	r1, [r7, #16]
 800c91a:	0148      	lsls	r0, r1, #5
 800c91c:	6979      	ldr	r1, [r7, #20]
 800c91e:	4401      	add	r1, r0
 800c920:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c924:	4313      	orrs	r3, r2
 800c926:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c928:	79fb      	ldrb	r3, [r7, #7]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d10d      	bne.n	800c94a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	691b      	ldr	r3, [r3, #16]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d009      	beq.n	800c94a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	6919      	ldr	r1, [r3, #16]
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	015a      	lsls	r2, r3, #5
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	4413      	add	r3, r2
 800c942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c946:	460a      	mov	r2, r1
 800c948:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	015a      	lsls	r2, r3, #5
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	4413      	add	r3, r2
 800c952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	0151      	lsls	r1, r2, #5
 800c95c:	697a      	ldr	r2, [r7, #20]
 800c95e:	440a      	add	r2, r1
 800c960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c964:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c968:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	371c      	adds	r7, #28
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c978:	b480      	push	{r7}
 800c97a:	b087      	sub	sp, #28
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c982:	2300      	movs	r3, #0
 800c984:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c986:	2300      	movs	r3, #0
 800c988:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	785b      	ldrb	r3, [r3, #1]
 800c992:	2b01      	cmp	r3, #1
 800c994:	d14a      	bne.n	800ca2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	015a      	lsls	r2, r3, #5
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	4413      	add	r3, r2
 800c9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9ae:	f040 8086 	bne.w	800cabe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	015a      	lsls	r2, r3, #5
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	7812      	ldrb	r2, [r2, #0]
 800c9c6:	0151      	lsls	r1, r2, #5
 800c9c8:	693a      	ldr	r2, [r7, #16]
 800c9ca:	440a      	add	r2, r1
 800c9cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c9d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	015a      	lsls	r2, r3, #5
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	4413      	add	r3, r2
 800c9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	683a      	ldr	r2, [r7, #0]
 800c9e8:	7812      	ldrb	r2, [r2, #0]
 800c9ea:	0151      	lsls	r1, r2, #5
 800c9ec:	693a      	ldr	r2, [r7, #16]
 800c9ee:	440a      	add	r2, r1
 800c9f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d902      	bls.n	800ca10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	75fb      	strb	r3, [r7, #23]
          break;
 800ca0e:	e056      	b.n	800cabe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	015a      	lsls	r2, r3, #5
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	4413      	add	r3, r2
 800ca1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca28:	d0e7      	beq.n	800c9fa <USB_EPStopXfer+0x82>
 800ca2a:	e048      	b.n	800cabe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	015a      	lsls	r2, r3, #5
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	4413      	add	r3, r2
 800ca36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca44:	d13b      	bne.n	800cabe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	015a      	lsls	r2, r3, #5
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	4413      	add	r3, r2
 800ca50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	683a      	ldr	r2, [r7, #0]
 800ca58:	7812      	ldrb	r2, [r2, #0]
 800ca5a:	0151      	lsls	r1, r2, #5
 800ca5c:	693a      	ldr	r2, [r7, #16]
 800ca5e:	440a      	add	r2, r1
 800ca60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ca68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	015a      	lsls	r2, r3, #5
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	4413      	add	r3, r2
 800ca74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	683a      	ldr	r2, [r7, #0]
 800ca7c:	7812      	ldrb	r2, [r2, #0]
 800ca7e:	0151      	lsls	r1, r2, #5
 800ca80:	693a      	ldr	r2, [r7, #16]
 800ca82:	440a      	add	r2, r1
 800ca84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	3301      	adds	r3, #1
 800ca92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d902      	bls.n	800caa4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	75fb      	strb	r3, [r7, #23]
          break;
 800caa2:	e00c      	b.n	800cabe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	015a      	lsls	r2, r3, #5
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	4413      	add	r3, r2
 800caae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cabc:	d0e7      	beq.n	800ca8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cabe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	371c      	adds	r7, #28
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cacc:	b480      	push	{r7}
 800cace:	b089      	sub	sp, #36	; 0x24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	4611      	mov	r1, r2
 800cad8:	461a      	mov	r2, r3
 800cada:	460b      	mov	r3, r1
 800cadc:	71fb      	strb	r3, [r7, #7]
 800cade:	4613      	mov	r3, r2
 800cae0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800caea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d123      	bne.n	800cb3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800caf2:	88bb      	ldrh	r3, [r7, #4]
 800caf4:	3303      	adds	r3, #3
 800caf6:	089b      	lsrs	r3, r3, #2
 800caf8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cafa:	2300      	movs	r3, #0
 800cafc:	61bb      	str	r3, [r7, #24]
 800cafe:	e018      	b.n	800cb32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cb00:	79fb      	ldrb	r3, [r7, #7]
 800cb02:	031a      	lsls	r2, r3, #12
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	4413      	add	r3, r2
 800cb08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	3301      	adds	r3, #1
 800cb18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	3301      	adds	r3, #1
 800cb24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	3301      	adds	r3, #1
 800cb30:	61bb      	str	r3, [r7, #24]
 800cb32:	69ba      	ldr	r2, [r7, #24]
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d3e2      	bcc.n	800cb00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3724      	adds	r7, #36	; 0x24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b08b      	sub	sp, #44	; 0x2c
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	4613      	mov	r3, r2
 800cb54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cb5e:	88fb      	ldrh	r3, [r7, #6]
 800cb60:	089b      	lsrs	r3, r3, #2
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cb66:	88fb      	ldrh	r3, [r7, #6]
 800cb68:	f003 0303 	and.w	r3, r3, #3
 800cb6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cb6e:	2300      	movs	r3, #0
 800cb70:	623b      	str	r3, [r7, #32]
 800cb72:	e014      	b.n	800cb9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	601a      	str	r2, [r3, #0]
    pDest++;
 800cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb82:	3301      	adds	r3, #1
 800cb84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb88:	3301      	adds	r3, #1
 800cb8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	3301      	adds	r3, #1
 800cb90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb94:	3301      	adds	r3, #1
 800cb96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cb98:	6a3b      	ldr	r3, [r7, #32]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	623b      	str	r3, [r7, #32]
 800cb9e:	6a3a      	ldr	r2, [r7, #32]
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d3e6      	bcc.n	800cb74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cba6:	8bfb      	ldrh	r3, [r7, #30]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d01e      	beq.n	800cbea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cbac:	2300      	movs	r3, #0
 800cbae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	f107 0310 	add.w	r3, r7, #16
 800cbbc:	6812      	ldr	r2, [r2, #0]
 800cbbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cbc0:	693a      	ldr	r2, [r7, #16]
 800cbc2:	6a3b      	ldr	r3, [r7, #32]
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	00db      	lsls	r3, r3, #3
 800cbc8:	fa22 f303 	lsr.w	r3, r2, r3
 800cbcc:	b2da      	uxtb	r2, r3
 800cbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd0:	701a      	strb	r2, [r3, #0]
      i++;
 800cbd2:	6a3b      	ldr	r3, [r7, #32]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	623b      	str	r3, [r7, #32]
      pDest++;
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbda:	3301      	adds	r3, #1
 800cbdc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cbde:	8bfb      	ldrh	r3, [r7, #30]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cbe4:	8bfb      	ldrh	r3, [r7, #30]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1ea      	bne.n	800cbc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	372c      	adds	r7, #44	; 0x2c
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	785b      	ldrb	r3, [r3, #1]
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d12c      	bne.n	800cc6e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	015a      	lsls	r2, r3, #5
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	db12      	blt.n	800cc4c <USB_EPSetStall+0x54>
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00f      	beq.n	800cc4c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	015a      	lsls	r2, r3, #5
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	4413      	add	r3, r2
 800cc34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68ba      	ldr	r2, [r7, #8]
 800cc3c:	0151      	lsls	r1, r2, #5
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	440a      	add	r2, r1
 800cc42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cc4a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	015a      	lsls	r2, r3, #5
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	4413      	add	r3, r2
 800cc54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	68ba      	ldr	r2, [r7, #8]
 800cc5c:	0151      	lsls	r1, r2, #5
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	440a      	add	r2, r1
 800cc62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc6a:	6013      	str	r3, [r2, #0]
 800cc6c:	e02b      	b.n	800ccc6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	015a      	lsls	r2, r3, #5
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	4413      	add	r3, r2
 800cc76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	db12      	blt.n	800cca6 <USB_EPSetStall+0xae>
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00f      	beq.n	800cca6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	015a      	lsls	r2, r3, #5
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	4413      	add	r3, r2
 800cc8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	0151      	lsls	r1, r2, #5
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	440a      	add	r2, r1
 800cc9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cca0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cca4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	015a      	lsls	r2, r3, #5
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	4413      	add	r3, r2
 800ccae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	0151      	lsls	r1, r2, #5
 800ccb8:	68fa      	ldr	r2, [r7, #12]
 800ccba:	440a      	add	r2, r1
 800ccbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ccc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ccc6:	2300      	movs	r3, #0
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3714      	adds	r7, #20
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	785b      	ldrb	r3, [r3, #1]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d128      	bne.n	800cd42 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	015a      	lsls	r2, r3, #5
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	0151      	lsls	r1, r2, #5
 800cd02:	68fa      	ldr	r2, [r7, #12]
 800cd04:	440a      	add	r2, r1
 800cd06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	791b      	ldrb	r3, [r3, #4]
 800cd14:	2b03      	cmp	r3, #3
 800cd16:	d003      	beq.n	800cd20 <USB_EPClearStall+0x4c>
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	791b      	ldrb	r3, [r3, #4]
 800cd1c:	2b02      	cmp	r3, #2
 800cd1e:	d138      	bne.n	800cd92 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	015a      	lsls	r2, r3, #5
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	4413      	add	r3, r2
 800cd28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68ba      	ldr	r2, [r7, #8]
 800cd30:	0151      	lsls	r1, r2, #5
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	440a      	add	r2, r1
 800cd36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd3e:	6013      	str	r3, [r2, #0]
 800cd40:	e027      	b.n	800cd92 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	015a      	lsls	r2, r3, #5
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	4413      	add	r3, r2
 800cd4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68ba      	ldr	r2, [r7, #8]
 800cd52:	0151      	lsls	r1, r2, #5
 800cd54:	68fa      	ldr	r2, [r7, #12]
 800cd56:	440a      	add	r2, r1
 800cd58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	791b      	ldrb	r3, [r3, #4]
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d003      	beq.n	800cd72 <USB_EPClearStall+0x9e>
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	791b      	ldrb	r3, [r3, #4]
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d10f      	bne.n	800cd92 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	015a      	lsls	r2, r3, #5
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	4413      	add	r3, r2
 800cd7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	68ba      	ldr	r2, [r7, #8]
 800cd82:	0151      	lsls	r1, r2, #5
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	440a      	add	r2, r1
 800cd88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd90:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3714      	adds	r7, #20
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	460b      	mov	r3, r1
 800cdaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdbe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cdc2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	78fb      	ldrb	r3, [r7, #3]
 800cdce:	011b      	lsls	r3, r3, #4
 800cdd0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cdd4:	68f9      	ldr	r1, [r7, #12]
 800cdd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdda:	4313      	orrs	r3, r2
 800cddc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3714      	adds	r7, #20
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b085      	sub	sp, #20
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ce06:	f023 0303 	bic.w	r3, r3, #3
 800ce0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce1a:	f023 0302 	bic.w	r3, r3, #2
 800ce1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce20:	2300      	movs	r3, #0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3714      	adds	r7, #20
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr

0800ce2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ce2e:	b480      	push	{r7}
 800ce30:	b085      	sub	sp, #20
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ce48:	f023 0303 	bic.w	r3, r3, #3
 800ce4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce5c:	f043 0302 	orr.w	r3, r3, #2
 800ce60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3714      	adds	r7, #20
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	695b      	ldr	r3, [r3, #20]
 800ce7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	699b      	ldr	r3, [r3, #24]
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	4013      	ands	r3, r2
 800ce86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ce88:	68fb      	ldr	r3, [r7, #12]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3714      	adds	r7, #20
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr

0800ce96 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce96:	b480      	push	{r7}
 800ce98:	b085      	sub	sp, #20
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceb2:	69db      	ldr	r3, [r3, #28]
 800ceb4:	68ba      	ldr	r2, [r7, #8]
 800ceb6:	4013      	ands	r3, r2
 800ceb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	0c1b      	lsrs	r3, r3, #16
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3714      	adds	r7, #20
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr

0800ceca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ceca:	b480      	push	{r7}
 800cecc:	b085      	sub	sp, #20
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cedc:	699b      	ldr	r3, [r3, #24]
 800cede:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cee6:	69db      	ldr	r3, [r3, #28]
 800cee8:	68ba      	ldr	r2, [r7, #8]
 800ceea:	4013      	ands	r3, r2
 800ceec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	b29b      	uxth	r3, r3
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3714      	adds	r7, #20
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr

0800cefe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cefe:	b480      	push	{r7}
 800cf00:	b085      	sub	sp, #20
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	460b      	mov	r3, r1
 800cf08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cf0e:	78fb      	ldrb	r3, [r7, #3]
 800cf10:	015a      	lsls	r2, r3, #5
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	4413      	add	r3, r2
 800cf16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf24:	695b      	ldr	r3, [r3, #20]
 800cf26:	68ba      	ldr	r2, [r7, #8]
 800cf28:	4013      	ands	r3, r2
 800cf2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cf2c:	68bb      	ldr	r3, [r7, #8]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3714      	adds	r7, #20
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr

0800cf3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cf3a:	b480      	push	{r7}
 800cf3c:	b087      	sub	sp, #28
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	460b      	mov	r3, r1
 800cf44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cf5e:	78fb      	ldrb	r3, [r7, #3]
 800cf60:	f003 030f 	and.w	r3, r3, #15
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	fa22 f303 	lsr.w	r3, r2, r3
 800cf6a:	01db      	lsls	r3, r3, #7
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	693a      	ldr	r2, [r7, #16]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cf74:	78fb      	ldrb	r3, [r7, #3]
 800cf76:	015a      	lsls	r2, r3, #5
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	4413      	add	r3, r2
 800cf7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	693a      	ldr	r2, [r7, #16]
 800cf84:	4013      	ands	r3, r2
 800cf86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cf88:	68bb      	ldr	r3, [r7, #8]
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	371c      	adds	r7, #28
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr

0800cf96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cf96:	b480      	push	{r7}
 800cf98:	b083      	sub	sp, #12
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	695b      	ldr	r3, [r3, #20]
 800cfa2:	f003 0301 	and.w	r3, r3, #1
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	370c      	adds	r7, #12
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr

0800cfb2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cfb2:	b480      	push	{r7}
 800cfb4:	b085      	sub	sp, #20
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfcc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cfd0:	f023 0307 	bic.w	r3, r3, #7
 800cfd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	68fa      	ldr	r2, [r7, #12]
 800cfe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfe8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cfea:	2300      	movs	r3, #0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3714      	adds	r7, #20
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b087      	sub	sp, #28
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	460b      	mov	r3, r1
 800d002:	607a      	str	r2, [r7, #4]
 800d004:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	333c      	adds	r3, #60	; 0x3c
 800d00e:	3304      	adds	r3, #4
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	4a26      	ldr	r2, [pc, #152]	; (800d0b0 <USB_EP0_OutStart+0xb8>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d90a      	bls.n	800d032 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d02c:	d101      	bne.n	800d032 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d02e:	2300      	movs	r3, #0
 800d030:	e037      	b.n	800d0a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d038:	461a      	mov	r2, r3
 800d03a:	2300      	movs	r3, #0
 800d03c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d044:	691b      	ldr	r3, [r3, #16]
 800d046:	697a      	ldr	r2, [r7, #20]
 800d048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d04c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d050:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d058:	691b      	ldr	r3, [r3, #16]
 800d05a:	697a      	ldr	r2, [r7, #20]
 800d05c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d060:	f043 0318 	orr.w	r3, r3, #24
 800d064:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d06c:	691b      	ldr	r3, [r3, #16]
 800d06e:	697a      	ldr	r2, [r7, #20]
 800d070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d074:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d078:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d07a:	7afb      	ldrb	r3, [r7, #11]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d10f      	bne.n	800d0a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d086:	461a      	mov	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d09a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d09e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	371c      	adds	r7, #28
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	4f54300a 	.word	0x4f54300a

0800d0b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	4a13      	ldr	r2, [pc, #76]	; (800d118 <USB_CoreReset+0x64>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d901      	bls.n	800d0d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d0ce:	2303      	movs	r3, #3
 800d0d0:	e01b      	b.n	800d10a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	691b      	ldr	r3, [r3, #16]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	daf2      	bge.n	800d0c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	691b      	ldr	r3, [r3, #16]
 800d0e2:	f043 0201 	orr.w	r2, r3, #1
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	4a09      	ldr	r2, [pc, #36]	; (800d118 <USB_CoreReset+0x64>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d901      	bls.n	800d0fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d0f8:	2303      	movs	r3, #3
 800d0fa:	e006      	b.n	800d10a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	f003 0301 	and.w	r3, r3, #1
 800d104:	2b01      	cmp	r3, #1
 800d106:	d0f0      	beq.n	800d0ea <USB_CoreReset+0x36>

  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3714      	adds	r7, #20
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	00030d40 	.word	0x00030d40

0800d11c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	460b      	mov	r3, r1
 800d126:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d128:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d12c:	f002 fca0 	bl	800fa70 <USBD_static_malloc>
 800d130:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d109      	bne.n	800d14c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	32b0      	adds	r2, #176	; 0xb0
 800d142:	2100      	movs	r1, #0
 800d144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d148:	2302      	movs	r3, #2
 800d14a:	e0d4      	b.n	800d2f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d14c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d150:	2100      	movs	r1, #0
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f002 fd0a 	bl	800fb6c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	32b0      	adds	r2, #176	; 0xb0
 800d162:	68f9      	ldr	r1, [r7, #12]
 800d164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	32b0      	adds	r2, #176	; 0xb0
 800d172:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	7c1b      	ldrb	r3, [r3, #16]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d138      	bne.n	800d1f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d184:	4b5e      	ldr	r3, [pc, #376]	; (800d300 <USBD_CDC_Init+0x1e4>)
 800d186:	7819      	ldrb	r1, [r3, #0]
 800d188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d18c:	2202      	movs	r2, #2
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f002 fb4b 	bl	800f82a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d194:	4b5a      	ldr	r3, [pc, #360]	; (800d300 <USBD_CDC_Init+0x1e4>)
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	f003 020f 	and.w	r2, r3, #15
 800d19c:	6879      	ldr	r1, [r7, #4]
 800d19e:	4613      	mov	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4413      	add	r3, r2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	440b      	add	r3, r1
 800d1a8:	3324      	adds	r3, #36	; 0x24
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d1ae:	4b55      	ldr	r3, [pc, #340]	; (800d304 <USBD_CDC_Init+0x1e8>)
 800d1b0:	7819      	ldrb	r1, [r3, #0]
 800d1b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1b6:	2202      	movs	r2, #2
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f002 fb36 	bl	800f82a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d1be:	4b51      	ldr	r3, [pc, #324]	; (800d304 <USBD_CDC_Init+0x1e8>)
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	f003 020f 	and.w	r2, r3, #15
 800d1c6:	6879      	ldr	r1, [r7, #4]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	440b      	add	r3, r1
 800d1d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d1da:	4b4b      	ldr	r3, [pc, #300]	; (800d308 <USBD_CDC_Init+0x1ec>)
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	f003 020f 	and.w	r2, r3, #15
 800d1e2:	6879      	ldr	r1, [r7, #4]
 800d1e4:	4613      	mov	r3, r2
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	4413      	add	r3, r2
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	440b      	add	r3, r1
 800d1ee:	3326      	adds	r3, #38	; 0x26
 800d1f0:	2210      	movs	r2, #16
 800d1f2:	801a      	strh	r2, [r3, #0]
 800d1f4:	e035      	b.n	800d262 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d1f6:	4b42      	ldr	r3, [pc, #264]	; (800d300 <USBD_CDC_Init+0x1e4>)
 800d1f8:	7819      	ldrb	r1, [r3, #0]
 800d1fa:	2340      	movs	r3, #64	; 0x40
 800d1fc:	2202      	movs	r2, #2
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f002 fb13 	bl	800f82a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d204:	4b3e      	ldr	r3, [pc, #248]	; (800d300 <USBD_CDC_Init+0x1e4>)
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	f003 020f 	and.w	r2, r3, #15
 800d20c:	6879      	ldr	r1, [r7, #4]
 800d20e:	4613      	mov	r3, r2
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	4413      	add	r3, r2
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	440b      	add	r3, r1
 800d218:	3324      	adds	r3, #36	; 0x24
 800d21a:	2201      	movs	r2, #1
 800d21c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d21e:	4b39      	ldr	r3, [pc, #228]	; (800d304 <USBD_CDC_Init+0x1e8>)
 800d220:	7819      	ldrb	r1, [r3, #0]
 800d222:	2340      	movs	r3, #64	; 0x40
 800d224:	2202      	movs	r2, #2
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f002 faff 	bl	800f82a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d22c:	4b35      	ldr	r3, [pc, #212]	; (800d304 <USBD_CDC_Init+0x1e8>)
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	f003 020f 	and.w	r2, r3, #15
 800d234:	6879      	ldr	r1, [r7, #4]
 800d236:	4613      	mov	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	440b      	add	r3, r1
 800d240:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d244:	2201      	movs	r2, #1
 800d246:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d248:	4b2f      	ldr	r3, [pc, #188]	; (800d308 <USBD_CDC_Init+0x1ec>)
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	f003 020f 	and.w	r2, r3, #15
 800d250:	6879      	ldr	r1, [r7, #4]
 800d252:	4613      	mov	r3, r2
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	4413      	add	r3, r2
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	440b      	add	r3, r1
 800d25c:	3326      	adds	r3, #38	; 0x26
 800d25e:	2210      	movs	r2, #16
 800d260:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d262:	4b29      	ldr	r3, [pc, #164]	; (800d308 <USBD_CDC_Init+0x1ec>)
 800d264:	7819      	ldrb	r1, [r3, #0]
 800d266:	2308      	movs	r3, #8
 800d268:	2203      	movs	r2, #3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f002 fadd 	bl	800f82a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d270:	4b25      	ldr	r3, [pc, #148]	; (800d308 <USBD_CDC_Init+0x1ec>)
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	f003 020f 	and.w	r2, r3, #15
 800d278:	6879      	ldr	r1, [r7, #4]
 800d27a:	4613      	mov	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	4413      	add	r3, r2
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	440b      	add	r3, r1
 800d284:	3324      	adds	r3, #36	; 0x24
 800d286:	2201      	movs	r2, #1
 800d288:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2200      	movs	r2, #0
 800d28e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d298:	687a      	ldr	r2, [r7, #4]
 800d29a:	33b0      	adds	r3, #176	; 0xb0
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	4413      	add	r3, r2
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d101      	bne.n	800d2c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d2c0:	2302      	movs	r3, #2
 800d2c2:	e018      	b.n	800d2f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	7c1b      	ldrb	r3, [r3, #16]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10a      	bne.n	800d2e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d2cc:	4b0d      	ldr	r3, [pc, #52]	; (800d304 <USBD_CDC_Init+0x1e8>)
 800d2ce:	7819      	ldrb	r1, [r3, #0]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d2d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f002 fb94 	bl	800fa08 <USBD_LL_PrepareReceive>
 800d2e0:	e008      	b.n	800d2f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d2e2:	4b08      	ldr	r3, [pc, #32]	; (800d304 <USBD_CDC_Init+0x1e8>)
 800d2e4:	7819      	ldrb	r1, [r3, #0]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d2ec:	2340      	movs	r3, #64	; 0x40
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f002 fb8a 	bl	800fa08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	20000093 	.word	0x20000093
 800d304:	20000094 	.word	0x20000094
 800d308:	20000095 	.word	0x20000095

0800d30c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	460b      	mov	r3, r1
 800d316:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d318:	4b3a      	ldr	r3, [pc, #232]	; (800d404 <USBD_CDC_DeInit+0xf8>)
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	4619      	mov	r1, r3
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f002 faa9 	bl	800f876 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d324:	4b37      	ldr	r3, [pc, #220]	; (800d404 <USBD_CDC_DeInit+0xf8>)
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	f003 020f 	and.w	r2, r3, #15
 800d32c:	6879      	ldr	r1, [r7, #4]
 800d32e:	4613      	mov	r3, r2
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4413      	add	r3, r2
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	440b      	add	r3, r1
 800d338:	3324      	adds	r3, #36	; 0x24
 800d33a:	2200      	movs	r2, #0
 800d33c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d33e:	4b32      	ldr	r3, [pc, #200]	; (800d408 <USBD_CDC_DeInit+0xfc>)
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	4619      	mov	r1, r3
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f002 fa96 	bl	800f876 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d34a:	4b2f      	ldr	r3, [pc, #188]	; (800d408 <USBD_CDC_DeInit+0xfc>)
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	f003 020f 	and.w	r2, r3, #15
 800d352:	6879      	ldr	r1, [r7, #4]
 800d354:	4613      	mov	r3, r2
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	4413      	add	r3, r2
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	440b      	add	r3, r1
 800d35e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d362:	2200      	movs	r2, #0
 800d364:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d366:	4b29      	ldr	r3, [pc, #164]	; (800d40c <USBD_CDC_DeInit+0x100>)
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	4619      	mov	r1, r3
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f002 fa82 	bl	800f876 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d372:	4b26      	ldr	r3, [pc, #152]	; (800d40c <USBD_CDC_DeInit+0x100>)
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	f003 020f 	and.w	r2, r3, #15
 800d37a:	6879      	ldr	r1, [r7, #4]
 800d37c:	4613      	mov	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4413      	add	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	440b      	add	r3, r1
 800d386:	3324      	adds	r3, #36	; 0x24
 800d388:	2200      	movs	r2, #0
 800d38a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d38c:	4b1f      	ldr	r3, [pc, #124]	; (800d40c <USBD_CDC_DeInit+0x100>)
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	f003 020f 	and.w	r2, r3, #15
 800d394:	6879      	ldr	r1, [r7, #4]
 800d396:	4613      	mov	r3, r2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4413      	add	r3, r2
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	440b      	add	r3, r1
 800d3a0:	3326      	adds	r3, #38	; 0x26
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	32b0      	adds	r2, #176	; 0xb0
 800d3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d01f      	beq.n	800d3f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	33b0      	adds	r3, #176	; 0xb0
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	4413      	add	r3, r2
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	32b0      	adds	r2, #176	; 0xb0
 800d3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f002 fb56 	bl	800fa8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	32b0      	adds	r2, #176	; 0xb0
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d3f8:	2300      	movs	r3, #0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3708      	adds	r7, #8
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	20000093 	.word	0x20000093
 800d408:	20000094 	.word	0x20000094
 800d40c:	20000095 	.word	0x20000095

0800d410 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	32b0      	adds	r2, #176	; 0xb0
 800d424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d428:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d42a:	2300      	movs	r3, #0
 800d42c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d42e:	2300      	movs	r3, #0
 800d430:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d432:	2300      	movs	r3, #0
 800d434:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d101      	bne.n	800d440 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d43c:	2303      	movs	r3, #3
 800d43e:	e0bf      	b.n	800d5c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d050      	beq.n	800d4ee <USBD_CDC_Setup+0xde>
 800d44c:	2b20      	cmp	r3, #32
 800d44e:	f040 80af 	bne.w	800d5b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	88db      	ldrh	r3, [r3, #6]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d03a      	beq.n	800d4d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	b25b      	sxtb	r3, r3
 800d460:	2b00      	cmp	r3, #0
 800d462:	da1b      	bge.n	800d49c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	33b0      	adds	r3, #176	; 0xb0
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	4413      	add	r3, r2
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	683a      	ldr	r2, [r7, #0]
 800d478:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d47a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	88d2      	ldrh	r2, [r2, #6]
 800d480:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	88db      	ldrh	r3, [r3, #6]
 800d486:	2b07      	cmp	r3, #7
 800d488:	bf28      	it	cs
 800d48a:	2307      	movcs	r3, #7
 800d48c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	89fa      	ldrh	r2, [r7, #14]
 800d492:	4619      	mov	r1, r3
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f001 fd43 	bl	800ef20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d49a:	e090      	b.n	800d5be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	785a      	ldrb	r2, [r3, #1]
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	88db      	ldrh	r3, [r3, #6]
 800d4aa:	2b3f      	cmp	r3, #63	; 0x3f
 800d4ac:	d803      	bhi.n	800d4b6 <USBD_CDC_Setup+0xa6>
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	88db      	ldrh	r3, [r3, #6]
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	e000      	b.n	800d4b8 <USBD_CDC_Setup+0xa8>
 800d4b6:	2240      	movs	r2, #64	; 0x40
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d4be:	6939      	ldr	r1, [r7, #16]
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f001 fd55 	bl	800ef78 <USBD_CtlPrepareRx>
      break;
 800d4ce:	e076      	b.n	800d5be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	33b0      	adds	r3, #176	; 0xb0
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	683a      	ldr	r2, [r7, #0]
 800d4e4:	7850      	ldrb	r0, [r2, #1]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	6839      	ldr	r1, [r7, #0]
 800d4ea:	4798      	blx	r3
      break;
 800d4ec:	e067      	b.n	800d5be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	785b      	ldrb	r3, [r3, #1]
 800d4f2:	2b0b      	cmp	r3, #11
 800d4f4:	d851      	bhi.n	800d59a <USBD_CDC_Setup+0x18a>
 800d4f6:	a201      	add	r2, pc, #4	; (adr r2, 800d4fc <USBD_CDC_Setup+0xec>)
 800d4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4fc:	0800d52d 	.word	0x0800d52d
 800d500:	0800d5a9 	.word	0x0800d5a9
 800d504:	0800d59b 	.word	0x0800d59b
 800d508:	0800d59b 	.word	0x0800d59b
 800d50c:	0800d59b 	.word	0x0800d59b
 800d510:	0800d59b 	.word	0x0800d59b
 800d514:	0800d59b 	.word	0x0800d59b
 800d518:	0800d59b 	.word	0x0800d59b
 800d51c:	0800d59b 	.word	0x0800d59b
 800d520:	0800d59b 	.word	0x0800d59b
 800d524:	0800d557 	.word	0x0800d557
 800d528:	0800d581 	.word	0x0800d581
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d532:	b2db      	uxtb	r3, r3
 800d534:	2b03      	cmp	r3, #3
 800d536:	d107      	bne.n	800d548 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d538:	f107 030a 	add.w	r3, r7, #10
 800d53c:	2202      	movs	r2, #2
 800d53e:	4619      	mov	r1, r3
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f001 fced 	bl	800ef20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d546:	e032      	b.n	800d5ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d548:	6839      	ldr	r1, [r7, #0]
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f001 fc77 	bl	800ee3e <USBD_CtlError>
            ret = USBD_FAIL;
 800d550:	2303      	movs	r3, #3
 800d552:	75fb      	strb	r3, [r7, #23]
          break;
 800d554:	e02b      	b.n	800d5ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	2b03      	cmp	r3, #3
 800d560:	d107      	bne.n	800d572 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d562:	f107 030d 	add.w	r3, r7, #13
 800d566:	2201      	movs	r2, #1
 800d568:	4619      	mov	r1, r3
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f001 fcd8 	bl	800ef20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d570:	e01d      	b.n	800d5ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d572:	6839      	ldr	r1, [r7, #0]
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f001 fc62 	bl	800ee3e <USBD_CtlError>
            ret = USBD_FAIL;
 800d57a:	2303      	movs	r3, #3
 800d57c:	75fb      	strb	r3, [r7, #23]
          break;
 800d57e:	e016      	b.n	800d5ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d586:	b2db      	uxtb	r3, r3
 800d588:	2b03      	cmp	r3, #3
 800d58a:	d00f      	beq.n	800d5ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d58c:	6839      	ldr	r1, [r7, #0]
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f001 fc55 	bl	800ee3e <USBD_CtlError>
            ret = USBD_FAIL;
 800d594:	2303      	movs	r3, #3
 800d596:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d598:	e008      	b.n	800d5ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d59a:	6839      	ldr	r1, [r7, #0]
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f001 fc4e 	bl	800ee3e <USBD_CtlError>
          ret = USBD_FAIL;
 800d5a2:	2303      	movs	r3, #3
 800d5a4:	75fb      	strb	r3, [r7, #23]
          break;
 800d5a6:	e002      	b.n	800d5ae <USBD_CDC_Setup+0x19e>
          break;
 800d5a8:	bf00      	nop
 800d5aa:	e008      	b.n	800d5be <USBD_CDC_Setup+0x1ae>
          break;
 800d5ac:	bf00      	nop
      }
      break;
 800d5ae:	e006      	b.n	800d5be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d5b0:	6839      	ldr	r1, [r7, #0]
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f001 fc43 	bl	800ee3e <USBD_CtlError>
      ret = USBD_FAIL;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	75fb      	strb	r3, [r7, #23]
      break;
 800d5bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800d5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3718      	adds	r7, #24
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	32b0      	adds	r2, #176	; 0xb0
 800d5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d101      	bne.n	800d5f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	e065      	b.n	800d6be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	32b0      	adds	r2, #176	; 0xb0
 800d5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d600:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d602:	78fb      	ldrb	r3, [r7, #3]
 800d604:	f003 020f 	and.w	r2, r3, #15
 800d608:	6879      	ldr	r1, [r7, #4]
 800d60a:	4613      	mov	r3, r2
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	4413      	add	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	440b      	add	r3, r1
 800d614:	3318      	adds	r3, #24
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d02f      	beq.n	800d67c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d61c:	78fb      	ldrb	r3, [r7, #3]
 800d61e:	f003 020f 	and.w	r2, r3, #15
 800d622:	6879      	ldr	r1, [r7, #4]
 800d624:	4613      	mov	r3, r2
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	4413      	add	r3, r2
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	440b      	add	r3, r1
 800d62e:	3318      	adds	r3, #24
 800d630:	681a      	ldr	r2, [r3, #0]
 800d632:	78fb      	ldrb	r3, [r7, #3]
 800d634:	f003 010f 	and.w	r1, r3, #15
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	460b      	mov	r3, r1
 800d63c:	00db      	lsls	r3, r3, #3
 800d63e:	440b      	add	r3, r1
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	4403      	add	r3, r0
 800d644:	3348      	adds	r3, #72	; 0x48
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	fbb2 f1f3 	udiv	r1, r2, r3
 800d64c:	fb01 f303 	mul.w	r3, r1, r3
 800d650:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d652:	2b00      	cmp	r3, #0
 800d654:	d112      	bne.n	800d67c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d656:	78fb      	ldrb	r3, [r7, #3]
 800d658:	f003 020f 	and.w	r2, r3, #15
 800d65c:	6879      	ldr	r1, [r7, #4]
 800d65e:	4613      	mov	r3, r2
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	4413      	add	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	440b      	add	r3, r1
 800d668:	3318      	adds	r3, #24
 800d66a:	2200      	movs	r2, #0
 800d66c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d66e:	78f9      	ldrb	r1, [r7, #3]
 800d670:	2300      	movs	r3, #0
 800d672:	2200      	movs	r2, #0
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f002 f9a6 	bl	800f9c6 <USBD_LL_Transmit>
 800d67a:	e01f      	b.n	800d6bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	2200      	movs	r2, #0
 800d680:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	33b0      	adds	r3, #176	; 0xb0
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	4413      	add	r3, r2
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	691b      	ldr	r3, [r3, #16]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d010      	beq.n	800d6bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	33b0      	adds	r3, #176	; 0xb0
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	691b      	ldr	r3, [r3, #16]
 800d6ac:	68ba      	ldr	r2, [r7, #8]
 800d6ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d6b8:	78fa      	ldrb	r2, [r7, #3]
 800d6ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d6bc:	2300      	movs	r3, #0
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3710      	adds	r7, #16
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b084      	sub	sp, #16
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
 800d6ce:	460b      	mov	r3, r1
 800d6d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	32b0      	adds	r2, #176	; 0xb0
 800d6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	32b0      	adds	r2, #176	; 0xb0
 800d6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d101      	bne.n	800d6f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	e01a      	b.n	800d72e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d6f8:	78fb      	ldrb	r3, [r7, #3]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f002 f9a4 	bl	800fa4a <USBD_LL_GetRxDataSize>
 800d702:	4602      	mov	r2, r0
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	33b0      	adds	r3, #176	; 0xb0
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4413      	add	r3, r2
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	68fa      	ldr	r2, [r7, #12]
 800d71e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d728:	4611      	mov	r1, r2
 800d72a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d72c:	2300      	movs	r3, #0
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d736:	b580      	push	{r7, lr}
 800d738:	b084      	sub	sp, #16
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	32b0      	adds	r2, #176	; 0xb0
 800d748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d74c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d101      	bne.n	800d758 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d754:	2303      	movs	r3, #3
 800d756:	e025      	b.n	800d7a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	33b0      	adds	r3, #176	; 0xb0
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	4413      	add	r3, r2
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d01a      	beq.n	800d7a2 <USBD_CDC_EP0_RxReady+0x6c>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d772:	2bff      	cmp	r3, #255	; 0xff
 800d774:	d015      	beq.n	800d7a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	33b0      	adds	r3, #176	; 0xb0
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	4413      	add	r3, r2
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d78e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d790:	68fa      	ldr	r2, [r7, #12]
 800d792:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d796:	b292      	uxth	r2, r2
 800d798:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	22ff      	movs	r2, #255	; 0xff
 800d79e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b086      	sub	sp, #24
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d7b4:	2182      	movs	r1, #130	; 0x82
 800d7b6:	4818      	ldr	r0, [pc, #96]	; (800d818 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d7b8:	f000 fd09 	bl	800e1ce <USBD_GetEpDesc>
 800d7bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d7be:	2101      	movs	r1, #1
 800d7c0:	4815      	ldr	r0, [pc, #84]	; (800d818 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d7c2:	f000 fd04 	bl	800e1ce <USBD_GetEpDesc>
 800d7c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d7c8:	2181      	movs	r1, #129	; 0x81
 800d7ca:	4813      	ldr	r0, [pc, #76]	; (800d818 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d7cc:	f000 fcff 	bl	800e1ce <USBD_GetEpDesc>
 800d7d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d002      	beq.n	800d7de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	2210      	movs	r2, #16
 800d7dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d006      	beq.n	800d7f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d7ec:	711a      	strb	r2, [r3, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d006      	beq.n	800d806 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d800:	711a      	strb	r2, [r3, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2243      	movs	r2, #67	; 0x43
 800d80a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d80c:	4b02      	ldr	r3, [pc, #8]	; (800d818 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	20000050 	.word	0x20000050

0800d81c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b086      	sub	sp, #24
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d824:	2182      	movs	r1, #130	; 0x82
 800d826:	4818      	ldr	r0, [pc, #96]	; (800d888 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d828:	f000 fcd1 	bl	800e1ce <USBD_GetEpDesc>
 800d82c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d82e:	2101      	movs	r1, #1
 800d830:	4815      	ldr	r0, [pc, #84]	; (800d888 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d832:	f000 fccc 	bl	800e1ce <USBD_GetEpDesc>
 800d836:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d838:	2181      	movs	r1, #129	; 0x81
 800d83a:	4813      	ldr	r0, [pc, #76]	; (800d888 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d83c:	f000 fcc7 	bl	800e1ce <USBD_GetEpDesc>
 800d840:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d002      	beq.n	800d84e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	2210      	movs	r2, #16
 800d84c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d006      	beq.n	800d862 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	2200      	movs	r2, #0
 800d858:	711a      	strb	r2, [r3, #4]
 800d85a:	2200      	movs	r2, #0
 800d85c:	f042 0202 	orr.w	r2, r2, #2
 800d860:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d006      	beq.n	800d876 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2200      	movs	r2, #0
 800d86c:	711a      	strb	r2, [r3, #4]
 800d86e:	2200      	movs	r2, #0
 800d870:	f042 0202 	orr.w	r2, r2, #2
 800d874:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2243      	movs	r2, #67	; 0x43
 800d87a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d87c:	4b02      	ldr	r3, [pc, #8]	; (800d888 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3718      	adds	r7, #24
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	20000050 	.word	0x20000050

0800d88c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d894:	2182      	movs	r1, #130	; 0x82
 800d896:	4818      	ldr	r0, [pc, #96]	; (800d8f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d898:	f000 fc99 	bl	800e1ce <USBD_GetEpDesc>
 800d89c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d89e:	2101      	movs	r1, #1
 800d8a0:	4815      	ldr	r0, [pc, #84]	; (800d8f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8a2:	f000 fc94 	bl	800e1ce <USBD_GetEpDesc>
 800d8a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d8a8:	2181      	movs	r1, #129	; 0x81
 800d8aa:	4813      	ldr	r0, [pc, #76]	; (800d8f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8ac:	f000 fc8f 	bl	800e1ce <USBD_GetEpDesc>
 800d8b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	2210      	movs	r2, #16
 800d8bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d006      	beq.n	800d8d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8cc:	711a      	strb	r2, [r3, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d006      	beq.n	800d8e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8e0:	711a      	strb	r2, [r3, #4]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2243      	movs	r2, #67	; 0x43
 800d8ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d8ec:	4b02      	ldr	r3, [pc, #8]	; (800d8f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3718      	adds	r7, #24
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	20000050 	.word	0x20000050

0800d8fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	220a      	movs	r2, #10
 800d908:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d90a:	4b03      	ldr	r3, [pc, #12]	; (800d918 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	370c      	adds	r7, #12
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr
 800d918:	2000000c 	.word	0x2000000c

0800d91c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d101      	bne.n	800d930 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d92c:	2303      	movs	r3, #3
 800d92e:	e009      	b.n	800d944 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	33b0      	adds	r3, #176	; 0xb0
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	4413      	add	r3, r2
 800d93e:	683a      	ldr	r2, [r7, #0]
 800d940:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d942:	2300      	movs	r3, #0
}
 800d944:	4618      	mov	r0, r3
 800d946:	370c      	adds	r7, #12
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d950:	b480      	push	{r7}
 800d952:	b087      	sub	sp, #28
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	32b0      	adds	r2, #176	; 0xb0
 800d966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d96a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d101      	bne.n	800d976 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d972:	2303      	movs	r3, #3
 800d974:	e008      	b.n	800d988 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	68ba      	ldr	r2, [r7, #8]
 800d97a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d986:	2300      	movs	r3, #0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	371c      	adds	r7, #28
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d994:	b480      	push	{r7}
 800d996:	b085      	sub	sp, #20
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	32b0      	adds	r2, #176	; 0xb0
 800d9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d101      	bne.n	800d9b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d9b4:	2303      	movs	r3, #3
 800d9b6:	e004      	b.n	800d9c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	683a      	ldr	r2, [r7, #0]
 800d9bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d9c0:	2300      	movs	r3, #0
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3714      	adds	r7, #20
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
	...

0800d9d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	32b0      	adds	r2, #176	; 0xb0
 800d9e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	32b0      	adds	r2, #176	; 0xb0
 800d9f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d101      	bne.n	800d9fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d9fa:	2303      	movs	r3, #3
 800d9fc:	e018      	b.n	800da30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	7c1b      	ldrb	r3, [r3, #16]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d10a      	bne.n	800da1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800da06:	4b0c      	ldr	r3, [pc, #48]	; (800da38 <USBD_CDC_ReceivePacket+0x68>)
 800da08:	7819      	ldrb	r1, [r3, #0]
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f001 fff7 	bl	800fa08 <USBD_LL_PrepareReceive>
 800da1a:	e008      	b.n	800da2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800da1c:	4b06      	ldr	r3, [pc, #24]	; (800da38 <USBD_CDC_ReceivePacket+0x68>)
 800da1e:	7819      	ldrb	r1, [r3, #0]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da26:	2340      	movs	r3, #64	; 0x40
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f001 ffed 	bl	800fa08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3710      	adds	r7, #16
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	20000094 	.word	0x20000094

0800da3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b086      	sub	sp, #24
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	4613      	mov	r3, r2
 800da48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d101      	bne.n	800da54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800da50:	2303      	movs	r3, #3
 800da52:	e01f      	b.n	800da94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2200      	movs	r2, #0
 800da58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2200      	movs	r2, #0
 800da60:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2200      	movs	r2, #0
 800da68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d003      	beq.n	800da7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2201      	movs	r2, #1
 800da7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	79fa      	ldrb	r2, [r7, #7]
 800da86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800da88:	68f8      	ldr	r0, [r7, #12]
 800da8a:	f001 fe67 	bl	800f75c <USBD_LL_Init>
 800da8e:	4603      	mov	r3, r0
 800da90:	75fb      	strb	r3, [r7, #23]

  return ret;
 800da92:	7dfb      	ldrb	r3, [r7, #23]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3718      	adds	r7, #24
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800daa6:	2300      	movs	r3, #0
 800daa8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d101      	bne.n	800dab4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dab0:	2303      	movs	r3, #3
 800dab2:	e025      	b.n	800db00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	683a      	ldr	r2, [r7, #0]
 800dab8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	32ae      	adds	r2, #174	; 0xae
 800dac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d00f      	beq.n	800daf0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	32ae      	adds	r2, #174	; 0xae
 800dada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae0:	f107 020e 	add.w	r2, r7, #14
 800dae4:	4610      	mov	r0, r2
 800dae6:	4798      	blx	r3
 800dae8:	4602      	mov	r2, r0
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800daf6:	1c5a      	adds	r2, r3, #1
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800dafe:	2300      	movs	r3, #0
}
 800db00:	4618      	mov	r0, r3
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f001 fe6f 	bl	800f7f4 <USBD_LL_Start>
 800db16:	4603      	mov	r3, r0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	370c      	adds	r7, #12
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr

0800db36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b084      	sub	sp, #16
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
 800db3e:	460b      	mov	r3, r1
 800db40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800db42:	2300      	movs	r3, #0
 800db44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d009      	beq.n	800db64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	78fa      	ldrb	r2, [r7, #3]
 800db5a:	4611      	mov	r1, r2
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	4798      	blx	r3
 800db60:	4603      	mov	r3, r0
 800db62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db64:	7bfb      	ldrb	r3, [r7, #15]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b084      	sub	sp, #16
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	460b      	mov	r3, r1
 800db78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800db7a:	2300      	movs	r3, #0
 800db7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	78fa      	ldrb	r2, [r7, #3]
 800db88:	4611      	mov	r1, r2
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	4798      	blx	r3
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d001      	beq.n	800db98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800db94:	2303      	movs	r3, #3
 800db96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db98:	7bfb      	ldrb	r3, [r7, #15]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b084      	sub	sp, #16
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
 800dbaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbb2:	6839      	ldr	r1, [r7, #0]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f001 f908 	bl	800edca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dbc8:	461a      	mov	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dbd6:	f003 031f 	and.w	r3, r3, #31
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	d01a      	beq.n	800dc14 <USBD_LL_SetupStage+0x72>
 800dbde:	2b02      	cmp	r3, #2
 800dbe0:	d822      	bhi.n	800dc28 <USBD_LL_SetupStage+0x86>
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d002      	beq.n	800dbec <USBD_LL_SetupStage+0x4a>
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d00a      	beq.n	800dc00 <USBD_LL_SetupStage+0x5e>
 800dbea:	e01d      	b.n	800dc28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f000 fb5f 	bl	800e2b8 <USBD_StdDevReq>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	73fb      	strb	r3, [r7, #15]
      break;
 800dbfe:	e020      	b.n	800dc42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc06:	4619      	mov	r1, r3
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 fbc7 	bl	800e39c <USBD_StdItfReq>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	73fb      	strb	r3, [r7, #15]
      break;
 800dc12:	e016      	b.n	800dc42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 fc29 	bl	800e474 <USBD_StdEPReq>
 800dc22:	4603      	mov	r3, r0
 800dc24:	73fb      	strb	r3, [r7, #15]
      break;
 800dc26:	e00c      	b.n	800dc42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dc2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	4619      	mov	r1, r3
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f001 fe3c 	bl	800f8b4 <USBD_LL_StallEP>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	73fb      	strb	r3, [r7, #15]
      break;
 800dc40:	bf00      	nop
  }

  return ret;
 800dc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3710      	adds	r7, #16
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	460b      	mov	r3, r1
 800dc56:	607a      	str	r2, [r7, #4]
 800dc58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dc5e:	7afb      	ldrb	r3, [r7, #11]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d16e      	bne.n	800dd42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dc6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dc72:	2b03      	cmp	r3, #3
 800dc74:	f040 8098 	bne.w	800dda8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	689a      	ldr	r2, [r3, #8]
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	68db      	ldr	r3, [r3, #12]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d913      	bls.n	800dcac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	689a      	ldr	r2, [r3, #8]
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	1ad2      	subs	r2, r2, r3
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	68da      	ldr	r2, [r3, #12]
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	bf28      	it	cs
 800dc9e:	4613      	movcs	r3, r2
 800dca0:	461a      	mov	r2, r3
 800dca2:	6879      	ldr	r1, [r7, #4]
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f001 f984 	bl	800efb2 <USBD_CtlContinueRx>
 800dcaa:	e07d      	b.n	800dda8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dcb2:	f003 031f 	and.w	r3, r3, #31
 800dcb6:	2b02      	cmp	r3, #2
 800dcb8:	d014      	beq.n	800dce4 <USBD_LL_DataOutStage+0x98>
 800dcba:	2b02      	cmp	r3, #2
 800dcbc:	d81d      	bhi.n	800dcfa <USBD_LL_DataOutStage+0xae>
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d002      	beq.n	800dcc8 <USBD_LL_DataOutStage+0x7c>
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d003      	beq.n	800dcce <USBD_LL_DataOutStage+0x82>
 800dcc6:	e018      	b.n	800dcfa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	75bb      	strb	r3, [r7, #22]
            break;
 800dccc:	e018      	b.n	800dd00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f000 fa5e 	bl	800e19a <USBD_CoreFindIF>
 800dcde:	4603      	mov	r3, r0
 800dce0:	75bb      	strb	r3, [r7, #22]
            break;
 800dce2:	e00d      	b.n	800dd00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	4619      	mov	r1, r3
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f000 fa60 	bl	800e1b4 <USBD_CoreFindEP>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	75bb      	strb	r3, [r7, #22]
            break;
 800dcf8:	e002      	b.n	800dd00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	75bb      	strb	r3, [r7, #22]
            break;
 800dcfe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dd00:	7dbb      	ldrb	r3, [r7, #22]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d119      	bne.n	800dd3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	2b03      	cmp	r3, #3
 800dd10:	d113      	bne.n	800dd3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dd12:	7dba      	ldrb	r2, [r7, #22]
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	32ae      	adds	r2, #174	; 0xae
 800dd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd1c:	691b      	ldr	r3, [r3, #16]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d00b      	beq.n	800dd3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dd22:	7dba      	ldrb	r2, [r7, #22]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dd2a:	7dba      	ldrb	r2, [r7, #22]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	32ae      	adds	r2, #174	; 0xae
 800dd30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd34:	691b      	ldr	r3, [r3, #16]
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dd3a:	68f8      	ldr	r0, [r7, #12]
 800dd3c:	f001 f94a 	bl	800efd4 <USBD_CtlSendStatus>
 800dd40:	e032      	b.n	800dda8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dd42:	7afb      	ldrb	r3, [r7, #11]
 800dd44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	68f8      	ldr	r0, [r7, #12]
 800dd4e:	f000 fa31 	bl	800e1b4 <USBD_CoreFindEP>
 800dd52:	4603      	mov	r3, r0
 800dd54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd56:	7dbb      	ldrb	r3, [r7, #22]
 800dd58:	2bff      	cmp	r3, #255	; 0xff
 800dd5a:	d025      	beq.n	800dda8 <USBD_LL_DataOutStage+0x15c>
 800dd5c:	7dbb      	ldrb	r3, [r7, #22]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d122      	bne.n	800dda8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	2b03      	cmp	r3, #3
 800dd6c:	d117      	bne.n	800dd9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dd6e:	7dba      	ldrb	r2, [r7, #22]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	32ae      	adds	r2, #174	; 0xae
 800dd74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd78:	699b      	ldr	r3, [r3, #24]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00f      	beq.n	800dd9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dd7e:	7dba      	ldrb	r2, [r7, #22]
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dd86:	7dba      	ldrb	r2, [r7, #22]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	32ae      	adds	r2, #174	; 0xae
 800dd8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd90:	699b      	ldr	r3, [r3, #24]
 800dd92:	7afa      	ldrb	r2, [r7, #11]
 800dd94:	4611      	mov	r1, r2
 800dd96:	68f8      	ldr	r0, [r7, #12]
 800dd98:	4798      	blx	r3
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dd9e:	7dfb      	ldrb	r3, [r7, #23]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d001      	beq.n	800dda8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dda4:	7dfb      	ldrb	r3, [r7, #23]
 800dda6:	e000      	b.n	800ddaa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3718      	adds	r7, #24
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b086      	sub	sp, #24
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	60f8      	str	r0, [r7, #12]
 800ddba:	460b      	mov	r3, r1
 800ddbc:	607a      	str	r2, [r7, #4]
 800ddbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ddc0:	7afb      	ldrb	r3, [r7, #11]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d16f      	bne.n	800dea6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	3314      	adds	r3, #20
 800ddca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ddd2:	2b02      	cmp	r3, #2
 800ddd4:	d15a      	bne.n	800de8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	689a      	ldr	r2, [r3, #8]
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d914      	bls.n	800de0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	689a      	ldr	r2, [r3, #8]
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	1ad2      	subs	r2, r2, r3
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	6879      	ldr	r1, [r7, #4]
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f001 f8ac 	bl	800ef56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ddfe:	2300      	movs	r3, #0
 800de00:	2200      	movs	r2, #0
 800de02:	2100      	movs	r1, #0
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f001 fdff 	bl	800fa08 <USBD_LL_PrepareReceive>
 800de0a:	e03f      	b.n	800de8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	68da      	ldr	r2, [r3, #12]
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	429a      	cmp	r2, r3
 800de16:	d11c      	bne.n	800de52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800de20:	429a      	cmp	r2, r3
 800de22:	d316      	bcc.n	800de52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	685a      	ldr	r2, [r3, #4]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800de2e:	429a      	cmp	r2, r3
 800de30:	d20f      	bcs.n	800de52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800de32:	2200      	movs	r2, #0
 800de34:	2100      	movs	r1, #0
 800de36:	68f8      	ldr	r0, [r7, #12]
 800de38:	f001 f88d 	bl	800ef56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2200      	movs	r2, #0
 800de40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de44:	2300      	movs	r3, #0
 800de46:	2200      	movs	r2, #0
 800de48:	2100      	movs	r1, #0
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f001 fddc 	bl	800fa08 <USBD_LL_PrepareReceive>
 800de50:	e01c      	b.n	800de8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	2b03      	cmp	r3, #3
 800de5c:	d10f      	bne.n	800de7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d009      	beq.n	800de7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de78:	68db      	ldr	r3, [r3, #12]
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800de7e:	2180      	movs	r1, #128	; 0x80
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f001 fd17 	bl	800f8b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f001 f8b7 	bl	800effa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d03a      	beq.n	800df0c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f7ff fe42 	bl	800db20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dea4:	e032      	b.n	800df0c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dea6:	7afb      	ldrb	r3, [r7, #11]
 800dea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800deac:	b2db      	uxtb	r3, r3
 800deae:	4619      	mov	r1, r3
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f000 f97f 	bl	800e1b4 <USBD_CoreFindEP>
 800deb6:	4603      	mov	r3, r0
 800deb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800deba:	7dfb      	ldrb	r3, [r7, #23]
 800debc:	2bff      	cmp	r3, #255	; 0xff
 800debe:	d025      	beq.n	800df0c <USBD_LL_DataInStage+0x15a>
 800dec0:	7dfb      	ldrb	r3, [r7, #23]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d122      	bne.n	800df0c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800decc:	b2db      	uxtb	r3, r3
 800dece:	2b03      	cmp	r3, #3
 800ded0:	d11c      	bne.n	800df0c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ded2:	7dfa      	ldrb	r2, [r7, #23]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	32ae      	adds	r2, #174	; 0xae
 800ded8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dedc:	695b      	ldr	r3, [r3, #20]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d014      	beq.n	800df0c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800dee2:	7dfa      	ldrb	r2, [r7, #23]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800deea:	7dfa      	ldrb	r2, [r7, #23]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	32ae      	adds	r2, #174	; 0xae
 800def0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800def4:	695b      	ldr	r3, [r3, #20]
 800def6:	7afa      	ldrb	r2, [r7, #11]
 800def8:	4611      	mov	r1, r2
 800defa:	68f8      	ldr	r0, [r7, #12]
 800defc:	4798      	blx	r3
 800defe:	4603      	mov	r3, r0
 800df00:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800df02:	7dbb      	ldrb	r3, [r7, #22]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d001      	beq.n	800df0c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800df08:	7dbb      	ldrb	r3, [r7, #22]
 800df0a:	e000      	b.n	800df0e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800df0c:	2300      	movs	r3, #0
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3718      	adds	r7, #24
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b084      	sub	sp, #16
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800df1e:	2300      	movs	r3, #0
 800df20:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2201      	movs	r2, #1
 800df26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2200      	movs	r2, #0
 800df2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2200      	movs	r2, #0
 800df44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d014      	beq.n	800df7c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00e      	beq.n	800df7c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	6852      	ldr	r2, [r2, #4]
 800df6a:	b2d2      	uxtb	r2, r2
 800df6c:	4611      	mov	r1, r2
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	4798      	blx	r3
 800df72:	4603      	mov	r3, r0
 800df74:	2b00      	cmp	r3, #0
 800df76:	d001      	beq.n	800df7c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800df78:	2303      	movs	r3, #3
 800df7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df7c:	2340      	movs	r3, #64	; 0x40
 800df7e:	2200      	movs	r2, #0
 800df80:	2100      	movs	r1, #0
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f001 fc51 	bl	800f82a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2240      	movs	r2, #64	; 0x40
 800df94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df98:	2340      	movs	r3, #64	; 0x40
 800df9a:	2200      	movs	r2, #0
 800df9c:	2180      	movs	r1, #128	; 0x80
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f001 fc43 	bl	800f82a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2240      	movs	r2, #64	; 0x40
 800dfae:	621a      	str	r2, [r3, #32]

  return ret;
 800dfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dfba:	b480      	push	{r7}
 800dfbc:	b083      	sub	sp, #12
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	78fa      	ldrb	r2, [r7, #3]
 800dfca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	370c      	adds	r7, #12
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr

0800dfda <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dfda:	b480      	push	{r7}
 800dfdc:	b083      	sub	sp, #12
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfe8:	b2da      	uxtb	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2204      	movs	r2, #4
 800dff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dff8:	2300      	movs	r3, #0
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	370c      	adds	r7, #12
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr

0800e006 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e006:	b480      	push	{r7}
 800e008:	b083      	sub	sp, #12
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e014:	b2db      	uxtb	r3, r3
 800e016:	2b04      	cmp	r3, #4
 800e018:	d106      	bne.n	800e028 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e020:	b2da      	uxtb	r2, r3
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e028:	2300      	movs	r3, #0
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	370c      	adds	r7, #12
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr

0800e036 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b082      	sub	sp, #8
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b03      	cmp	r3, #3
 800e048:	d110      	bne.n	800e06c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00b      	beq.n	800e06c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e05a:	69db      	ldr	r3, [r3, #28]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d005      	beq.n	800e06c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e066:	69db      	ldr	r3, [r3, #28]
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e076:	b580      	push	{r7, lr}
 800e078:	b082      	sub	sp, #8
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
 800e07e:	460b      	mov	r3, r1
 800e080:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	32ae      	adds	r2, #174	; 0xae
 800e08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d101      	bne.n	800e098 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e094:	2303      	movs	r3, #3
 800e096:	e01c      	b.n	800e0d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	2b03      	cmp	r3, #3
 800e0a2:	d115      	bne.n	800e0d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	32ae      	adds	r2, #174	; 0xae
 800e0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0b2:	6a1b      	ldr	r3, [r3, #32]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00b      	beq.n	800e0d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	32ae      	adds	r2, #174	; 0xae
 800e0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0c6:	6a1b      	ldr	r3, [r3, #32]
 800e0c8:	78fa      	ldrb	r2, [r7, #3]
 800e0ca:	4611      	mov	r1, r2
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e0d0:	2300      	movs	r3, #0
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b082      	sub	sp, #8
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	32ae      	adds	r2, #174	; 0xae
 800e0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d101      	bne.n	800e0fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e0f8:	2303      	movs	r3, #3
 800e0fa:	e01c      	b.n	800e136 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e102:	b2db      	uxtb	r3, r3
 800e104:	2b03      	cmp	r3, #3
 800e106:	d115      	bne.n	800e134 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	32ae      	adds	r2, #174	; 0xae
 800e112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d00b      	beq.n	800e134 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	32ae      	adds	r2, #174	; 0xae
 800e126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e12c:	78fa      	ldrb	r2, [r7, #3]
 800e12e:	4611      	mov	r1, r2
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3708      	adds	r7, #8
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e13e:	b480      	push	{r7}
 800e140:	b083      	sub	sp, #12
 800e142:	af00      	add	r7, sp, #0
 800e144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e146:	2300      	movs	r3, #0
}
 800e148:	4618      	mov	r0, r3
 800e14a:	370c      	adds	r7, #12
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr

0800e154 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2201      	movs	r2, #1
 800e164:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00e      	beq.n	800e190 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	6852      	ldr	r2, [r2, #4]
 800e17e:	b2d2      	uxtb	r2, r2
 800e180:	4611      	mov	r1, r2
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	4798      	blx	r3
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d001      	beq.n	800e190 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e18c:	2303      	movs	r3, #3
 800e18e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e190:	7bfb      	ldrb	r3, [r7, #15]
}
 800e192:	4618      	mov	r0, r3
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e19a:	b480      	push	{r7}
 800e19c:	b083      	sub	sp, #12
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e1a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	370c      	adds	r7, #12
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr

0800e1b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	460b      	mov	r3, r1
 800e1be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e1c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	370c      	adds	r7, #12
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr

0800e1ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b086      	sub	sp, #24
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	885b      	ldrh	r3, [r3, #2]
 800e1ea:	b29a      	uxth	r2, r3
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d920      	bls.n	800e238 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e1fe:	e013      	b.n	800e228 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e200:	f107 030a 	add.w	r3, r7, #10
 800e204:	4619      	mov	r1, r3
 800e206:	6978      	ldr	r0, [r7, #20]
 800e208:	f000 f81b 	bl	800e242 <USBD_GetNextDesc>
 800e20c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	785b      	ldrb	r3, [r3, #1]
 800e212:	2b05      	cmp	r3, #5
 800e214:	d108      	bne.n	800e228 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	789b      	ldrb	r3, [r3, #2]
 800e21e:	78fa      	ldrb	r2, [r7, #3]
 800e220:	429a      	cmp	r2, r3
 800e222:	d008      	beq.n	800e236 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e224:	2300      	movs	r3, #0
 800e226:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	885b      	ldrh	r3, [r3, #2]
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	897b      	ldrh	r3, [r7, #10]
 800e230:	429a      	cmp	r2, r3
 800e232:	d8e5      	bhi.n	800e200 <USBD_GetEpDesc+0x32>
 800e234:	e000      	b.n	800e238 <USBD_GetEpDesc+0x6a>
          break;
 800e236:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e238:	693b      	ldr	r3, [r7, #16]
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3718      	adds	r7, #24
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}

0800e242 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e242:	b480      	push	{r7}
 800e244:	b085      	sub	sp, #20
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
 800e24a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	881a      	ldrh	r2, [r3, #0]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	b29b      	uxth	r3, r3
 800e25a:	4413      	add	r3, r2
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	461a      	mov	r2, r3
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	4413      	add	r3, r2
 800e26c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e26e:	68fb      	ldr	r3, [r7, #12]
}
 800e270:	4618      	mov	r0, r3
 800e272:	3714      	adds	r7, #20
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b087      	sub	sp, #28
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	3301      	adds	r3, #1
 800e292:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e29a:	8a3b      	ldrh	r3, [r7, #16]
 800e29c:	021b      	lsls	r3, r3, #8
 800e29e:	b21a      	sxth	r2, r3
 800e2a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	b21b      	sxth	r3, r3
 800e2a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e2aa:	89fb      	ldrh	r3, [r7, #14]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	371c      	adds	r7, #28
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr

0800e2b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2ce:	2b40      	cmp	r3, #64	; 0x40
 800e2d0:	d005      	beq.n	800e2de <USBD_StdDevReq+0x26>
 800e2d2:	2b40      	cmp	r3, #64	; 0x40
 800e2d4:	d857      	bhi.n	800e386 <USBD_StdDevReq+0xce>
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00f      	beq.n	800e2fa <USBD_StdDevReq+0x42>
 800e2da:	2b20      	cmp	r3, #32
 800e2dc:	d153      	bne.n	800e386 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	32ae      	adds	r2, #174	; 0xae
 800e2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	6839      	ldr	r1, [r7, #0]
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	4798      	blx	r3
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	73fb      	strb	r3, [r7, #15]
      break;
 800e2f8:	e04a      	b.n	800e390 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	785b      	ldrb	r3, [r3, #1]
 800e2fe:	2b09      	cmp	r3, #9
 800e300:	d83b      	bhi.n	800e37a <USBD_StdDevReq+0xc2>
 800e302:	a201      	add	r2, pc, #4	; (adr r2, 800e308 <USBD_StdDevReq+0x50>)
 800e304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e308:	0800e35d 	.word	0x0800e35d
 800e30c:	0800e371 	.word	0x0800e371
 800e310:	0800e37b 	.word	0x0800e37b
 800e314:	0800e367 	.word	0x0800e367
 800e318:	0800e37b 	.word	0x0800e37b
 800e31c:	0800e33b 	.word	0x0800e33b
 800e320:	0800e331 	.word	0x0800e331
 800e324:	0800e37b 	.word	0x0800e37b
 800e328:	0800e353 	.word	0x0800e353
 800e32c:	0800e345 	.word	0x0800e345
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e330:	6839      	ldr	r1, [r7, #0]
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 fa3c 	bl	800e7b0 <USBD_GetDescriptor>
          break;
 800e338:	e024      	b.n	800e384 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e33a:	6839      	ldr	r1, [r7, #0]
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 fba1 	bl	800ea84 <USBD_SetAddress>
          break;
 800e342:	e01f      	b.n	800e384 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e344:	6839      	ldr	r1, [r7, #0]
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 fbe0 	bl	800eb0c <USBD_SetConfig>
 800e34c:	4603      	mov	r3, r0
 800e34e:	73fb      	strb	r3, [r7, #15]
          break;
 800e350:	e018      	b.n	800e384 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e352:	6839      	ldr	r1, [r7, #0]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 fc83 	bl	800ec60 <USBD_GetConfig>
          break;
 800e35a:	e013      	b.n	800e384 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e35c:	6839      	ldr	r1, [r7, #0]
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 fcb4 	bl	800eccc <USBD_GetStatus>
          break;
 800e364:	e00e      	b.n	800e384 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e366:	6839      	ldr	r1, [r7, #0]
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f000 fce3 	bl	800ed34 <USBD_SetFeature>
          break;
 800e36e:	e009      	b.n	800e384 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e370:	6839      	ldr	r1, [r7, #0]
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 fd07 	bl	800ed86 <USBD_ClrFeature>
          break;
 800e378:	e004      	b.n	800e384 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e37a:	6839      	ldr	r1, [r7, #0]
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 fd5e 	bl	800ee3e <USBD_CtlError>
          break;
 800e382:	bf00      	nop
      }
      break;
 800e384:	e004      	b.n	800e390 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e386:	6839      	ldr	r1, [r7, #0]
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 fd58 	bl	800ee3e <USBD_CtlError>
      break;
 800e38e:	bf00      	nop
  }

  return ret;
 800e390:	7bfb      	ldrb	r3, [r7, #15]
}
 800e392:	4618      	mov	r0, r3
 800e394:	3710      	adds	r7, #16
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop

0800e39c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3b2:	2b40      	cmp	r3, #64	; 0x40
 800e3b4:	d005      	beq.n	800e3c2 <USBD_StdItfReq+0x26>
 800e3b6:	2b40      	cmp	r3, #64	; 0x40
 800e3b8:	d852      	bhi.n	800e460 <USBD_StdItfReq+0xc4>
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d001      	beq.n	800e3c2 <USBD_StdItfReq+0x26>
 800e3be:	2b20      	cmp	r3, #32
 800e3c0:	d14e      	bne.n	800e460 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	2b02      	cmp	r3, #2
 800e3ce:	d840      	bhi.n	800e452 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	889b      	ldrh	r3, [r3, #4]
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d836      	bhi.n	800e448 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	889b      	ldrh	r3, [r3, #4]
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f7ff fed9 	bl	800e19a <USBD_CoreFindIF>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e3ec:	7bbb      	ldrb	r3, [r7, #14]
 800e3ee:	2bff      	cmp	r3, #255	; 0xff
 800e3f0:	d01d      	beq.n	800e42e <USBD_StdItfReq+0x92>
 800e3f2:	7bbb      	ldrb	r3, [r7, #14]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d11a      	bne.n	800e42e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e3f8:	7bba      	ldrb	r2, [r7, #14]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	32ae      	adds	r2, #174	; 0xae
 800e3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00f      	beq.n	800e428 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e408:	7bba      	ldrb	r2, [r7, #14]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e410:	7bba      	ldrb	r2, [r7, #14]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	32ae      	adds	r2, #174	; 0xae
 800e416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e41a:	689b      	ldr	r3, [r3, #8]
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	4798      	blx	r3
 800e422:	4603      	mov	r3, r0
 800e424:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e426:	e004      	b.n	800e432 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e428:	2303      	movs	r3, #3
 800e42a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e42c:	e001      	b.n	800e432 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e42e:	2303      	movs	r3, #3
 800e430:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	88db      	ldrh	r3, [r3, #6]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d110      	bne.n	800e45c <USBD_StdItfReq+0xc0>
 800e43a:	7bfb      	ldrb	r3, [r7, #15]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d10d      	bne.n	800e45c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 fdc7 	bl	800efd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e446:	e009      	b.n	800e45c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e448:	6839      	ldr	r1, [r7, #0]
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 fcf7 	bl	800ee3e <USBD_CtlError>
          break;
 800e450:	e004      	b.n	800e45c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e452:	6839      	ldr	r1, [r7, #0]
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 fcf2 	bl	800ee3e <USBD_CtlError>
          break;
 800e45a:	e000      	b.n	800e45e <USBD_StdItfReq+0xc2>
          break;
 800e45c:	bf00      	nop
      }
      break;
 800e45e:	e004      	b.n	800e46a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e460:	6839      	ldr	r1, [r7, #0]
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 fceb 	bl	800ee3e <USBD_CtlError>
      break;
 800e468:	bf00      	nop
  }

  return ret;
 800e46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e47e:	2300      	movs	r3, #0
 800e480:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	889b      	ldrh	r3, [r3, #4]
 800e486:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e490:	2b40      	cmp	r3, #64	; 0x40
 800e492:	d007      	beq.n	800e4a4 <USBD_StdEPReq+0x30>
 800e494:	2b40      	cmp	r3, #64	; 0x40
 800e496:	f200 817f 	bhi.w	800e798 <USBD_StdEPReq+0x324>
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d02a      	beq.n	800e4f4 <USBD_StdEPReq+0x80>
 800e49e:	2b20      	cmp	r3, #32
 800e4a0:	f040 817a 	bne.w	800e798 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e4a4:	7bbb      	ldrb	r3, [r7, #14]
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f7ff fe83 	bl	800e1b4 <USBD_CoreFindEP>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e4b2:	7b7b      	ldrb	r3, [r7, #13]
 800e4b4:	2bff      	cmp	r3, #255	; 0xff
 800e4b6:	f000 8174 	beq.w	800e7a2 <USBD_StdEPReq+0x32e>
 800e4ba:	7b7b      	ldrb	r3, [r7, #13]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f040 8170 	bne.w	800e7a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e4c2:	7b7a      	ldrb	r2, [r7, #13]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e4ca:	7b7a      	ldrb	r2, [r7, #13]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	32ae      	adds	r2, #174	; 0xae
 800e4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4d4:	689b      	ldr	r3, [r3, #8]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	f000 8163 	beq.w	800e7a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e4dc:	7b7a      	ldrb	r2, [r7, #13]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	32ae      	adds	r2, #174	; 0xae
 800e4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4e6:	689b      	ldr	r3, [r3, #8]
 800e4e8:	6839      	ldr	r1, [r7, #0]
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	4798      	blx	r3
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e4f2:	e156      	b.n	800e7a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	785b      	ldrb	r3, [r3, #1]
 800e4f8:	2b03      	cmp	r3, #3
 800e4fa:	d008      	beq.n	800e50e <USBD_StdEPReq+0x9a>
 800e4fc:	2b03      	cmp	r3, #3
 800e4fe:	f300 8145 	bgt.w	800e78c <USBD_StdEPReq+0x318>
 800e502:	2b00      	cmp	r3, #0
 800e504:	f000 809b 	beq.w	800e63e <USBD_StdEPReq+0x1ca>
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d03c      	beq.n	800e586 <USBD_StdEPReq+0x112>
 800e50c:	e13e      	b.n	800e78c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e514:	b2db      	uxtb	r3, r3
 800e516:	2b02      	cmp	r3, #2
 800e518:	d002      	beq.n	800e520 <USBD_StdEPReq+0xac>
 800e51a:	2b03      	cmp	r3, #3
 800e51c:	d016      	beq.n	800e54c <USBD_StdEPReq+0xd8>
 800e51e:	e02c      	b.n	800e57a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e520:	7bbb      	ldrb	r3, [r7, #14]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d00d      	beq.n	800e542 <USBD_StdEPReq+0xce>
 800e526:	7bbb      	ldrb	r3, [r7, #14]
 800e528:	2b80      	cmp	r3, #128	; 0x80
 800e52a:	d00a      	beq.n	800e542 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e52c:	7bbb      	ldrb	r3, [r7, #14]
 800e52e:	4619      	mov	r1, r3
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f001 f9bf 	bl	800f8b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e536:	2180      	movs	r1, #128	; 0x80
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f001 f9bb 	bl	800f8b4 <USBD_LL_StallEP>
 800e53e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e540:	e020      	b.n	800e584 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e542:	6839      	ldr	r1, [r7, #0]
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 fc7a 	bl	800ee3e <USBD_CtlError>
              break;
 800e54a:	e01b      	b.n	800e584 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	885b      	ldrh	r3, [r3, #2]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d10e      	bne.n	800e572 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e554:	7bbb      	ldrb	r3, [r7, #14]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00b      	beq.n	800e572 <USBD_StdEPReq+0xfe>
 800e55a:	7bbb      	ldrb	r3, [r7, #14]
 800e55c:	2b80      	cmp	r3, #128	; 0x80
 800e55e:	d008      	beq.n	800e572 <USBD_StdEPReq+0xfe>
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	88db      	ldrh	r3, [r3, #6]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d104      	bne.n	800e572 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e568:	7bbb      	ldrb	r3, [r7, #14]
 800e56a:	4619      	mov	r1, r3
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f001 f9a1 	bl	800f8b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 fd2e 	bl	800efd4 <USBD_CtlSendStatus>

              break;
 800e578:	e004      	b.n	800e584 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e57a:	6839      	ldr	r1, [r7, #0]
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 fc5e 	bl	800ee3e <USBD_CtlError>
              break;
 800e582:	bf00      	nop
          }
          break;
 800e584:	e107      	b.n	800e796 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	2b02      	cmp	r3, #2
 800e590:	d002      	beq.n	800e598 <USBD_StdEPReq+0x124>
 800e592:	2b03      	cmp	r3, #3
 800e594:	d016      	beq.n	800e5c4 <USBD_StdEPReq+0x150>
 800e596:	e04b      	b.n	800e630 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e598:	7bbb      	ldrb	r3, [r7, #14]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00d      	beq.n	800e5ba <USBD_StdEPReq+0x146>
 800e59e:	7bbb      	ldrb	r3, [r7, #14]
 800e5a0:	2b80      	cmp	r3, #128	; 0x80
 800e5a2:	d00a      	beq.n	800e5ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5a4:	7bbb      	ldrb	r3, [r7, #14]
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f001 f983 	bl	800f8b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5ae:	2180      	movs	r1, #128	; 0x80
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f001 f97f 	bl	800f8b4 <USBD_LL_StallEP>
 800e5b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e5b8:	e040      	b.n	800e63c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e5ba:	6839      	ldr	r1, [r7, #0]
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 fc3e 	bl	800ee3e <USBD_CtlError>
              break;
 800e5c2:	e03b      	b.n	800e63c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	885b      	ldrh	r3, [r3, #2]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d136      	bne.n	800e63a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e5cc:	7bbb      	ldrb	r3, [r7, #14]
 800e5ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d004      	beq.n	800e5e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e5d6:	7bbb      	ldrb	r3, [r7, #14]
 800e5d8:	4619      	mov	r1, r3
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f001 f989 	bl	800f8f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 fcf7 	bl	800efd4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e5e6:	7bbb      	ldrb	r3, [r7, #14]
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7ff fde2 	bl	800e1b4 <USBD_CoreFindEP>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e5f4:	7b7b      	ldrb	r3, [r7, #13]
 800e5f6:	2bff      	cmp	r3, #255	; 0xff
 800e5f8:	d01f      	beq.n	800e63a <USBD_StdEPReq+0x1c6>
 800e5fa:	7b7b      	ldrb	r3, [r7, #13]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d11c      	bne.n	800e63a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e600:	7b7a      	ldrb	r2, [r7, #13]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e608:	7b7a      	ldrb	r2, [r7, #13]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	32ae      	adds	r2, #174	; 0xae
 800e60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d010      	beq.n	800e63a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e618:	7b7a      	ldrb	r2, [r7, #13]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	32ae      	adds	r2, #174	; 0xae
 800e61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	6839      	ldr	r1, [r7, #0]
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	4798      	blx	r3
 800e62a:	4603      	mov	r3, r0
 800e62c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e62e:	e004      	b.n	800e63a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e630:	6839      	ldr	r1, [r7, #0]
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f000 fc03 	bl	800ee3e <USBD_CtlError>
              break;
 800e638:	e000      	b.n	800e63c <USBD_StdEPReq+0x1c8>
              break;
 800e63a:	bf00      	nop
          }
          break;
 800e63c:	e0ab      	b.n	800e796 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e644:	b2db      	uxtb	r3, r3
 800e646:	2b02      	cmp	r3, #2
 800e648:	d002      	beq.n	800e650 <USBD_StdEPReq+0x1dc>
 800e64a:	2b03      	cmp	r3, #3
 800e64c:	d032      	beq.n	800e6b4 <USBD_StdEPReq+0x240>
 800e64e:	e097      	b.n	800e780 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e650:	7bbb      	ldrb	r3, [r7, #14]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d007      	beq.n	800e666 <USBD_StdEPReq+0x1f2>
 800e656:	7bbb      	ldrb	r3, [r7, #14]
 800e658:	2b80      	cmp	r3, #128	; 0x80
 800e65a:	d004      	beq.n	800e666 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e65c:	6839      	ldr	r1, [r7, #0]
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f000 fbed 	bl	800ee3e <USBD_CtlError>
                break;
 800e664:	e091      	b.n	800e78a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e666:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	da0b      	bge.n	800e686 <USBD_StdEPReq+0x212>
 800e66e:	7bbb      	ldrb	r3, [r7, #14]
 800e670:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e674:	4613      	mov	r3, r2
 800e676:	009b      	lsls	r3, r3, #2
 800e678:	4413      	add	r3, r2
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	3310      	adds	r3, #16
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	4413      	add	r3, r2
 800e682:	3304      	adds	r3, #4
 800e684:	e00b      	b.n	800e69e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e686:	7bbb      	ldrb	r3, [r7, #14]
 800e688:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e68c:	4613      	mov	r3, r2
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	4413      	add	r3, r2
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e698:	687a      	ldr	r2, [r7, #4]
 800e69a:	4413      	add	r3, r2
 800e69c:	3304      	adds	r3, #4
 800e69e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	2202      	movs	r2, #2
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 fc37 	bl	800ef20 <USBD_CtlSendData>
              break;
 800e6b2:	e06a      	b.n	800e78a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e6b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	da11      	bge.n	800e6e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e6bc:	7bbb      	ldrb	r3, [r7, #14]
 800e6be:	f003 020f 	and.w	r2, r3, #15
 800e6c2:	6879      	ldr	r1, [r7, #4]
 800e6c4:	4613      	mov	r3, r2
 800e6c6:	009b      	lsls	r3, r3, #2
 800e6c8:	4413      	add	r3, r2
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	440b      	add	r3, r1
 800e6ce:	3324      	adds	r3, #36	; 0x24
 800e6d0:	881b      	ldrh	r3, [r3, #0]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d117      	bne.n	800e706 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e6d6:	6839      	ldr	r1, [r7, #0]
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 fbb0 	bl	800ee3e <USBD_CtlError>
                  break;
 800e6de:	e054      	b.n	800e78a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e6e0:	7bbb      	ldrb	r3, [r7, #14]
 800e6e2:	f003 020f 	and.w	r2, r3, #15
 800e6e6:	6879      	ldr	r1, [r7, #4]
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	4413      	add	r3, r2
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	440b      	add	r3, r1
 800e6f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e6f6:	881b      	ldrh	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d104      	bne.n	800e706 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e6fc:	6839      	ldr	r1, [r7, #0]
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 fb9d 	bl	800ee3e <USBD_CtlError>
                  break;
 800e704:	e041      	b.n	800e78a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	da0b      	bge.n	800e726 <USBD_StdEPReq+0x2b2>
 800e70e:	7bbb      	ldrb	r3, [r7, #14]
 800e710:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e714:	4613      	mov	r3, r2
 800e716:	009b      	lsls	r3, r3, #2
 800e718:	4413      	add	r3, r2
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	3310      	adds	r3, #16
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	4413      	add	r3, r2
 800e722:	3304      	adds	r3, #4
 800e724:	e00b      	b.n	800e73e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e726:	7bbb      	ldrb	r3, [r7, #14]
 800e728:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e72c:	4613      	mov	r3, r2
 800e72e:	009b      	lsls	r3, r3, #2
 800e730:	4413      	add	r3, r2
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	4413      	add	r3, r2
 800e73c:	3304      	adds	r3, #4
 800e73e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e740:	7bbb      	ldrb	r3, [r7, #14]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d002      	beq.n	800e74c <USBD_StdEPReq+0x2d8>
 800e746:	7bbb      	ldrb	r3, [r7, #14]
 800e748:	2b80      	cmp	r3, #128	; 0x80
 800e74a:	d103      	bne.n	800e754 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2200      	movs	r2, #0
 800e750:	601a      	str	r2, [r3, #0]
 800e752:	e00e      	b.n	800e772 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e754:	7bbb      	ldrb	r3, [r7, #14]
 800e756:	4619      	mov	r1, r3
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f001 f8e9 	bl	800f930 <USBD_LL_IsStallEP>
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	d003      	beq.n	800e76c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	2201      	movs	r2, #1
 800e768:	601a      	str	r2, [r3, #0]
 800e76a:	e002      	b.n	800e772 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	2200      	movs	r2, #0
 800e770:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	2202      	movs	r2, #2
 800e776:	4619      	mov	r1, r3
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 fbd1 	bl	800ef20 <USBD_CtlSendData>
              break;
 800e77e:	e004      	b.n	800e78a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e780:	6839      	ldr	r1, [r7, #0]
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f000 fb5b 	bl	800ee3e <USBD_CtlError>
              break;
 800e788:	bf00      	nop
          }
          break;
 800e78a:	e004      	b.n	800e796 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e78c:	6839      	ldr	r1, [r7, #0]
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 fb55 	bl	800ee3e <USBD_CtlError>
          break;
 800e794:	bf00      	nop
      }
      break;
 800e796:	e005      	b.n	800e7a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e798:	6839      	ldr	r1, [r7, #0]
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 fb4f 	bl	800ee3e <USBD_CtlError>
      break;
 800e7a0:	e000      	b.n	800e7a4 <USBD_StdEPReq+0x330>
      break;
 800e7a2:	bf00      	nop
  }

  return ret;
 800e7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
	...

0800e7b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	885b      	ldrh	r3, [r3, #2]
 800e7ca:	0a1b      	lsrs	r3, r3, #8
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	3b01      	subs	r3, #1
 800e7d0:	2b06      	cmp	r3, #6
 800e7d2:	f200 8128 	bhi.w	800ea26 <USBD_GetDescriptor+0x276>
 800e7d6:	a201      	add	r2, pc, #4	; (adr r2, 800e7dc <USBD_GetDescriptor+0x2c>)
 800e7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7dc:	0800e7f9 	.word	0x0800e7f9
 800e7e0:	0800e811 	.word	0x0800e811
 800e7e4:	0800e851 	.word	0x0800e851
 800e7e8:	0800ea27 	.word	0x0800ea27
 800e7ec:	0800ea27 	.word	0x0800ea27
 800e7f0:	0800e9c7 	.word	0x0800e9c7
 800e7f4:	0800e9f3 	.word	0x0800e9f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	7c12      	ldrb	r2, [r2, #16]
 800e804:	f107 0108 	add.w	r1, r7, #8
 800e808:	4610      	mov	r0, r2
 800e80a:	4798      	blx	r3
 800e80c:	60f8      	str	r0, [r7, #12]
      break;
 800e80e:	e112      	b.n	800ea36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	7c1b      	ldrb	r3, [r3, #16]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d10d      	bne.n	800e834 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e820:	f107 0208 	add.w	r2, r7, #8
 800e824:	4610      	mov	r0, r2
 800e826:	4798      	blx	r3
 800e828:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	3301      	adds	r3, #1
 800e82e:	2202      	movs	r2, #2
 800e830:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e832:	e100      	b.n	800ea36 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e83c:	f107 0208 	add.w	r2, r7, #8
 800e840:	4610      	mov	r0, r2
 800e842:	4798      	blx	r3
 800e844:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	3301      	adds	r3, #1
 800e84a:	2202      	movs	r2, #2
 800e84c:	701a      	strb	r2, [r3, #0]
      break;
 800e84e:	e0f2      	b.n	800ea36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	885b      	ldrh	r3, [r3, #2]
 800e854:	b2db      	uxtb	r3, r3
 800e856:	2b05      	cmp	r3, #5
 800e858:	f200 80ac 	bhi.w	800e9b4 <USBD_GetDescriptor+0x204>
 800e85c:	a201      	add	r2, pc, #4	; (adr r2, 800e864 <USBD_GetDescriptor+0xb4>)
 800e85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e862:	bf00      	nop
 800e864:	0800e87d 	.word	0x0800e87d
 800e868:	0800e8b1 	.word	0x0800e8b1
 800e86c:	0800e8e5 	.word	0x0800e8e5
 800e870:	0800e919 	.word	0x0800e919
 800e874:	0800e94d 	.word	0x0800e94d
 800e878:	0800e981 	.word	0x0800e981
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00b      	beq.n	800e8a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	7c12      	ldrb	r2, [r2, #16]
 800e894:	f107 0108 	add.w	r1, r7, #8
 800e898:	4610      	mov	r0, r2
 800e89a:	4798      	blx	r3
 800e89c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e89e:	e091      	b.n	800e9c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8a0:	6839      	ldr	r1, [r7, #0]
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 facb 	bl	800ee3e <USBD_CtlError>
            err++;
 800e8a8:	7afb      	ldrb	r3, [r7, #11]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e8ae:	e089      	b.n	800e9c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8b6:	689b      	ldr	r3, [r3, #8]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00b      	beq.n	800e8d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8c2:	689b      	ldr	r3, [r3, #8]
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	7c12      	ldrb	r2, [r2, #16]
 800e8c8:	f107 0108 	add.w	r1, r7, #8
 800e8cc:	4610      	mov	r0, r2
 800e8ce:	4798      	blx	r3
 800e8d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8d2:	e077      	b.n	800e9c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8d4:	6839      	ldr	r1, [r7, #0]
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 fab1 	bl	800ee3e <USBD_CtlError>
            err++;
 800e8dc:	7afb      	ldrb	r3, [r7, #11]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e8e2:	e06f      	b.n	800e9c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00b      	beq.n	800e908 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	7c12      	ldrb	r2, [r2, #16]
 800e8fc:	f107 0108 	add.w	r1, r7, #8
 800e900:	4610      	mov	r0, r2
 800e902:	4798      	blx	r3
 800e904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e906:	e05d      	b.n	800e9c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e908:	6839      	ldr	r1, [r7, #0]
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 fa97 	bl	800ee3e <USBD_CtlError>
            err++;
 800e910:	7afb      	ldrb	r3, [r7, #11]
 800e912:	3301      	adds	r3, #1
 800e914:	72fb      	strb	r3, [r7, #11]
          break;
 800e916:	e055      	b.n	800e9c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e91e:	691b      	ldr	r3, [r3, #16]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d00b      	beq.n	800e93c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e92a:	691b      	ldr	r3, [r3, #16]
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	7c12      	ldrb	r2, [r2, #16]
 800e930:	f107 0108 	add.w	r1, r7, #8
 800e934:	4610      	mov	r0, r2
 800e936:	4798      	blx	r3
 800e938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e93a:	e043      	b.n	800e9c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e93c:	6839      	ldr	r1, [r7, #0]
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 fa7d 	bl	800ee3e <USBD_CtlError>
            err++;
 800e944:	7afb      	ldrb	r3, [r7, #11]
 800e946:	3301      	adds	r3, #1
 800e948:	72fb      	strb	r3, [r7, #11]
          break;
 800e94a:	e03b      	b.n	800e9c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e952:	695b      	ldr	r3, [r3, #20]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d00b      	beq.n	800e970 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e95e:	695b      	ldr	r3, [r3, #20]
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	7c12      	ldrb	r2, [r2, #16]
 800e964:	f107 0108 	add.w	r1, r7, #8
 800e968:	4610      	mov	r0, r2
 800e96a:	4798      	blx	r3
 800e96c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e96e:	e029      	b.n	800e9c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e970:	6839      	ldr	r1, [r7, #0]
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 fa63 	bl	800ee3e <USBD_CtlError>
            err++;
 800e978:	7afb      	ldrb	r3, [r7, #11]
 800e97a:	3301      	adds	r3, #1
 800e97c:	72fb      	strb	r3, [r7, #11]
          break;
 800e97e:	e021      	b.n	800e9c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e986:	699b      	ldr	r3, [r3, #24]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00b      	beq.n	800e9a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e992:	699b      	ldr	r3, [r3, #24]
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	7c12      	ldrb	r2, [r2, #16]
 800e998:	f107 0108 	add.w	r1, r7, #8
 800e99c:	4610      	mov	r0, r2
 800e99e:	4798      	blx	r3
 800e9a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9a2:	e00f      	b.n	800e9c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e9a4:	6839      	ldr	r1, [r7, #0]
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 fa49 	bl	800ee3e <USBD_CtlError>
            err++;
 800e9ac:	7afb      	ldrb	r3, [r7, #11]
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	72fb      	strb	r3, [r7, #11]
          break;
 800e9b2:	e007      	b.n	800e9c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e9b4:	6839      	ldr	r1, [r7, #0]
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f000 fa41 	bl	800ee3e <USBD_CtlError>
          err++;
 800e9bc:	7afb      	ldrb	r3, [r7, #11]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e9c2:	bf00      	nop
      }
      break;
 800e9c4:	e037      	b.n	800ea36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	7c1b      	ldrb	r3, [r3, #16]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d109      	bne.n	800e9e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9d6:	f107 0208 	add.w	r2, r7, #8
 800e9da:	4610      	mov	r0, r2
 800e9dc:	4798      	blx	r3
 800e9de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9e0:	e029      	b.n	800ea36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e9e2:	6839      	ldr	r1, [r7, #0]
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 fa2a 	bl	800ee3e <USBD_CtlError>
        err++;
 800e9ea:	7afb      	ldrb	r3, [r7, #11]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	72fb      	strb	r3, [r7, #11]
      break;
 800e9f0:	e021      	b.n	800ea36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	7c1b      	ldrb	r3, [r3, #16]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d10d      	bne.n	800ea16 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea02:	f107 0208 	add.w	r2, r7, #8
 800ea06:	4610      	mov	r0, r2
 800ea08:	4798      	blx	r3
 800ea0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	3301      	adds	r3, #1
 800ea10:	2207      	movs	r2, #7
 800ea12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea14:	e00f      	b.n	800ea36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ea16:	6839      	ldr	r1, [r7, #0]
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 fa10 	bl	800ee3e <USBD_CtlError>
        err++;
 800ea1e:	7afb      	ldrb	r3, [r7, #11]
 800ea20:	3301      	adds	r3, #1
 800ea22:	72fb      	strb	r3, [r7, #11]
      break;
 800ea24:	e007      	b.n	800ea36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ea26:	6839      	ldr	r1, [r7, #0]
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f000 fa08 	bl	800ee3e <USBD_CtlError>
      err++;
 800ea2e:	7afb      	ldrb	r3, [r7, #11]
 800ea30:	3301      	adds	r3, #1
 800ea32:	72fb      	strb	r3, [r7, #11]
      break;
 800ea34:	bf00      	nop
  }

  if (err != 0U)
 800ea36:	7afb      	ldrb	r3, [r7, #11]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d11e      	bne.n	800ea7a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	88db      	ldrh	r3, [r3, #6]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d016      	beq.n	800ea72 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ea44:	893b      	ldrh	r3, [r7, #8]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00e      	beq.n	800ea68 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	88da      	ldrh	r2, [r3, #6]
 800ea4e:	893b      	ldrh	r3, [r7, #8]
 800ea50:	4293      	cmp	r3, r2
 800ea52:	bf28      	it	cs
 800ea54:	4613      	movcs	r3, r2
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ea5a:	893b      	ldrh	r3, [r7, #8]
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	68f9      	ldr	r1, [r7, #12]
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f000 fa5d 	bl	800ef20 <USBD_CtlSendData>
 800ea66:	e009      	b.n	800ea7c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ea68:	6839      	ldr	r1, [r7, #0]
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 f9e7 	bl	800ee3e <USBD_CtlError>
 800ea70:	e004      	b.n	800ea7c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 faae 	bl	800efd4 <USBD_CtlSendStatus>
 800ea78:	e000      	b.n	800ea7c <USBD_GetDescriptor+0x2cc>
    return;
 800ea7a:	bf00      	nop
  }
}
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop

0800ea84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	889b      	ldrh	r3, [r3, #4]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d131      	bne.n	800eafa <USBD_SetAddress+0x76>
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	88db      	ldrh	r3, [r3, #6]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d12d      	bne.n	800eafa <USBD_SetAddress+0x76>
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	885b      	ldrh	r3, [r3, #2]
 800eaa2:	2b7f      	cmp	r3, #127	; 0x7f
 800eaa4:	d829      	bhi.n	800eafa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	885b      	ldrh	r3, [r3, #2]
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eab0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b03      	cmp	r3, #3
 800eabc:	d104      	bne.n	800eac8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800eabe:	6839      	ldr	r1, [r7, #0]
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 f9bc 	bl	800ee3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eac6:	e01d      	b.n	800eb04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	7bfa      	ldrb	r2, [r7, #15]
 800eacc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ead0:	7bfb      	ldrb	r3, [r7, #15]
 800ead2:	4619      	mov	r1, r3
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 ff57 	bl	800f988 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 fa7a 	bl	800efd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eae0:	7bfb      	ldrb	r3, [r7, #15]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d004      	beq.n	800eaf0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2202      	movs	r2, #2
 800eaea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaee:	e009      	b.n	800eb04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaf8:	e004      	b.n	800eb04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eafa:	6839      	ldr	r1, [r7, #0]
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 f99e 	bl	800ee3e <USBD_CtlError>
  }
}
 800eb02:	bf00      	nop
 800eb04:	bf00      	nop
 800eb06:	3710      	adds	r7, #16
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb16:	2300      	movs	r3, #0
 800eb18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	885b      	ldrh	r3, [r3, #2]
 800eb1e:	b2da      	uxtb	r2, r3
 800eb20:	4b4e      	ldr	r3, [pc, #312]	; (800ec5c <USBD_SetConfig+0x150>)
 800eb22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eb24:	4b4d      	ldr	r3, [pc, #308]	; (800ec5c <USBD_SetConfig+0x150>)
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	d905      	bls.n	800eb38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eb2c:	6839      	ldr	r1, [r7, #0]
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 f985 	bl	800ee3e <USBD_CtlError>
    return USBD_FAIL;
 800eb34:	2303      	movs	r3, #3
 800eb36:	e08c      	b.n	800ec52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	2b02      	cmp	r3, #2
 800eb42:	d002      	beq.n	800eb4a <USBD_SetConfig+0x3e>
 800eb44:	2b03      	cmp	r3, #3
 800eb46:	d029      	beq.n	800eb9c <USBD_SetConfig+0x90>
 800eb48:	e075      	b.n	800ec36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eb4a:	4b44      	ldr	r3, [pc, #272]	; (800ec5c <USBD_SetConfig+0x150>)
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d020      	beq.n	800eb94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800eb52:	4b42      	ldr	r3, [pc, #264]	; (800ec5c <USBD_SetConfig+0x150>)
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	461a      	mov	r2, r3
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb5c:	4b3f      	ldr	r3, [pc, #252]	; (800ec5c <USBD_SetConfig+0x150>)
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	4619      	mov	r1, r3
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f7fe ffe7 	bl	800db36 <USBD_SetClassConfig>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800eb6c:	7bfb      	ldrb	r3, [r7, #15]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d008      	beq.n	800eb84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800eb72:	6839      	ldr	r1, [r7, #0]
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 f962 	bl	800ee3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2202      	movs	r2, #2
 800eb7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb82:	e065      	b.n	800ec50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 fa25 	bl	800efd4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2203      	movs	r2, #3
 800eb8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eb92:	e05d      	b.n	800ec50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f000 fa1d 	bl	800efd4 <USBD_CtlSendStatus>
      break;
 800eb9a:	e059      	b.n	800ec50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800eb9c:	4b2f      	ldr	r3, [pc, #188]	; (800ec5c <USBD_SetConfig+0x150>)
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d112      	bne.n	800ebca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2202      	movs	r2, #2
 800eba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ebac:	4b2b      	ldr	r3, [pc, #172]	; (800ec5c <USBD_SetConfig+0x150>)
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ebb6:	4b29      	ldr	r3, [pc, #164]	; (800ec5c <USBD_SetConfig+0x150>)
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	4619      	mov	r1, r3
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f7fe ffd6 	bl	800db6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 fa06 	bl	800efd4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ebc8:	e042      	b.n	800ec50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ebca:	4b24      	ldr	r3, [pc, #144]	; (800ec5c <USBD_SetConfig+0x150>)
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	461a      	mov	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d02a      	beq.n	800ec2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	4619      	mov	r1, r3
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f7fe ffc4 	bl	800db6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ebe6:	4b1d      	ldr	r3, [pc, #116]	; (800ec5c <USBD_SetConfig+0x150>)
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	461a      	mov	r2, r3
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ebf0:	4b1a      	ldr	r3, [pc, #104]	; (800ec5c <USBD_SetConfig+0x150>)
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f7fe ff9d 	bl	800db36 <USBD_SetClassConfig>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ec00:	7bfb      	ldrb	r3, [r7, #15]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d00f      	beq.n	800ec26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ec06:	6839      	ldr	r1, [r7, #0]
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 f918 	bl	800ee3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	4619      	mov	r1, r3
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f7fe ffa9 	bl	800db6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2202      	movs	r2, #2
 800ec20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ec24:	e014      	b.n	800ec50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f000 f9d4 	bl	800efd4 <USBD_CtlSendStatus>
      break;
 800ec2c:	e010      	b.n	800ec50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 f9d0 	bl	800efd4 <USBD_CtlSendStatus>
      break;
 800ec34:	e00c      	b.n	800ec50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 f900 	bl	800ee3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ec3e:	4b07      	ldr	r3, [pc, #28]	; (800ec5c <USBD_SetConfig+0x150>)
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	4619      	mov	r1, r3
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f7fe ff92 	bl	800db6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ec4a:	2303      	movs	r3, #3
 800ec4c:	73fb      	strb	r3, [r7, #15]
      break;
 800ec4e:	bf00      	nop
  }

  return ret;
 800ec50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	20000994 	.word	0x20000994

0800ec60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	88db      	ldrh	r3, [r3, #6]
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d004      	beq.n	800ec7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ec72:	6839      	ldr	r1, [r7, #0]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 f8e2 	bl	800ee3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ec7a:	e023      	b.n	800ecc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	2b02      	cmp	r3, #2
 800ec86:	dc02      	bgt.n	800ec8e <USBD_GetConfig+0x2e>
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	dc03      	bgt.n	800ec94 <USBD_GetConfig+0x34>
 800ec8c:	e015      	b.n	800ecba <USBD_GetConfig+0x5a>
 800ec8e:	2b03      	cmp	r3, #3
 800ec90:	d00b      	beq.n	800ecaa <USBD_GetConfig+0x4a>
 800ec92:	e012      	b.n	800ecba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2200      	movs	r2, #0
 800ec98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	3308      	adds	r3, #8
 800ec9e:	2201      	movs	r2, #1
 800eca0:	4619      	mov	r1, r3
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 f93c 	bl	800ef20 <USBD_CtlSendData>
        break;
 800eca8:	e00c      	b.n	800ecc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	3304      	adds	r3, #4
 800ecae:	2201      	movs	r2, #1
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 f934 	bl	800ef20 <USBD_CtlSendData>
        break;
 800ecb8:	e004      	b.n	800ecc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ecba:	6839      	ldr	r1, [r7, #0]
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f000 f8be 	bl	800ee3e <USBD_CtlError>
        break;
 800ecc2:	bf00      	nop
}
 800ecc4:	bf00      	nop
 800ecc6:	3708      	adds	r7, #8
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	3b01      	subs	r3, #1
 800ece0:	2b02      	cmp	r3, #2
 800ece2:	d81e      	bhi.n	800ed22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	88db      	ldrh	r3, [r3, #6]
 800ece8:	2b02      	cmp	r3, #2
 800ecea:	d004      	beq.n	800ecf6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ecec:	6839      	ldr	r1, [r7, #0]
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 f8a5 	bl	800ee3e <USBD_CtlError>
        break;
 800ecf4:	e01a      	b.n	800ed2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d005      	beq.n	800ed12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	68db      	ldr	r3, [r3, #12]
 800ed0a:	f043 0202 	orr.w	r2, r3, #2
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	330c      	adds	r3, #12
 800ed16:	2202      	movs	r2, #2
 800ed18:	4619      	mov	r1, r3
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 f900 	bl	800ef20 <USBD_CtlSendData>
      break;
 800ed20:	e004      	b.n	800ed2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ed22:	6839      	ldr	r1, [r7, #0]
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 f88a 	bl	800ee3e <USBD_CtlError>
      break;
 800ed2a:	bf00      	nop
  }
}
 800ed2c:	bf00      	nop
 800ed2e:	3708      	adds	r7, #8
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	885b      	ldrh	r3, [r3, #2]
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d107      	bne.n	800ed56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2201      	movs	r2, #1
 800ed4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 f940 	bl	800efd4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ed54:	e013      	b.n	800ed7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	885b      	ldrh	r3, [r3, #2]
 800ed5a:	2b02      	cmp	r3, #2
 800ed5c:	d10b      	bne.n	800ed76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	889b      	ldrh	r3, [r3, #4]
 800ed62:	0a1b      	lsrs	r3, r3, #8
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	b2da      	uxtb	r2, r3
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 f930 	bl	800efd4 <USBD_CtlSendStatus>
}
 800ed74:	e003      	b.n	800ed7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ed76:	6839      	ldr	r1, [r7, #0]
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f000 f860 	bl	800ee3e <USBD_CtlError>
}
 800ed7e:	bf00      	nop
 800ed80:	3708      	adds	r7, #8
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b082      	sub	sp, #8
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
 800ed8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	3b01      	subs	r3, #1
 800ed9a:	2b02      	cmp	r3, #2
 800ed9c:	d80b      	bhi.n	800edb6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	885b      	ldrh	r3, [r3, #2]
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d10c      	bne.n	800edc0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2200      	movs	r2, #0
 800edaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 f910 	bl	800efd4 <USBD_CtlSendStatus>
      }
      break;
 800edb4:	e004      	b.n	800edc0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800edb6:	6839      	ldr	r1, [r7, #0]
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f000 f840 	bl	800ee3e <USBD_CtlError>
      break;
 800edbe:	e000      	b.n	800edc2 <USBD_ClrFeature+0x3c>
      break;
 800edc0:	bf00      	nop
  }
}
 800edc2:	bf00      	nop
 800edc4:	3708      	adds	r7, #8
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800edca:	b580      	push	{r7, lr}
 800edcc:	b084      	sub	sp, #16
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
 800edd2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	781a      	ldrb	r2, [r3, #0]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	3301      	adds	r3, #1
 800ede4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	781a      	ldrb	r2, [r3, #0]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	3301      	adds	r3, #1
 800edf2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	f7ff fa41 	bl	800e27c <SWAPBYTE>
 800edfa:	4603      	mov	r3, r0
 800edfc:	461a      	mov	r2, r3
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	3301      	adds	r3, #1
 800ee06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f7ff fa34 	bl	800e27c <SWAPBYTE>
 800ee14:	4603      	mov	r3, r0
 800ee16:	461a      	mov	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	3301      	adds	r3, #1
 800ee26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	f7ff fa27 	bl	800e27c <SWAPBYTE>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	461a      	mov	r2, r3
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	80da      	strh	r2, [r3, #6]
}
 800ee36:	bf00      	nop
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b082      	sub	sp, #8
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee48:	2180      	movs	r1, #128	; 0x80
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 fd32 	bl	800f8b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee50:	2100      	movs	r1, #0
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 fd2e 	bl	800f8b4 <USBD_LL_StallEP>
}
 800ee58:	bf00      	nop
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b086      	sub	sp, #24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d036      	beq.n	800eee4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ee7a:	6938      	ldr	r0, [r7, #16]
 800ee7c:	f000 f836 	bl	800eeec <USBD_GetLen>
 800ee80:	4603      	mov	r3, r0
 800ee82:	3301      	adds	r3, #1
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	005b      	lsls	r3, r3, #1
 800ee88:	b29a      	uxth	r2, r3
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ee8e:	7dfb      	ldrb	r3, [r7, #23]
 800ee90:	68ba      	ldr	r2, [r7, #8]
 800ee92:	4413      	add	r3, r2
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	7812      	ldrb	r2, [r2, #0]
 800ee98:	701a      	strb	r2, [r3, #0]
  idx++;
 800ee9a:	7dfb      	ldrb	r3, [r7, #23]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eea0:	7dfb      	ldrb	r3, [r7, #23]
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	4413      	add	r3, r2
 800eea6:	2203      	movs	r2, #3
 800eea8:	701a      	strb	r2, [r3, #0]
  idx++;
 800eeaa:	7dfb      	ldrb	r3, [r7, #23]
 800eeac:	3301      	adds	r3, #1
 800eeae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eeb0:	e013      	b.n	800eeda <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eeb2:	7dfb      	ldrb	r3, [r7, #23]
 800eeb4:	68ba      	ldr	r2, [r7, #8]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	693a      	ldr	r2, [r7, #16]
 800eeba:	7812      	ldrb	r2, [r2, #0]
 800eebc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	3301      	adds	r3, #1
 800eec2:	613b      	str	r3, [r7, #16]
    idx++;
 800eec4:	7dfb      	ldrb	r3, [r7, #23]
 800eec6:	3301      	adds	r3, #1
 800eec8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eeca:	7dfb      	ldrb	r3, [r7, #23]
 800eecc:	68ba      	ldr	r2, [r7, #8]
 800eece:	4413      	add	r3, r2
 800eed0:	2200      	movs	r2, #0
 800eed2:	701a      	strb	r2, [r3, #0]
    idx++;
 800eed4:	7dfb      	ldrb	r3, [r7, #23]
 800eed6:	3301      	adds	r3, #1
 800eed8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d1e7      	bne.n	800eeb2 <USBD_GetString+0x52>
 800eee2:	e000      	b.n	800eee6 <USBD_GetString+0x86>
    return;
 800eee4:	bf00      	nop
  }
}
 800eee6:	3718      	adds	r7, #24
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b085      	sub	sp, #20
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eef4:	2300      	movs	r3, #0
 800eef6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eefc:	e005      	b.n	800ef0a <USBD_GetLen+0x1e>
  {
    len++;
 800eefe:	7bfb      	ldrb	r3, [r7, #15]
 800ef00:	3301      	adds	r3, #1
 800ef02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	3301      	adds	r3, #1
 800ef08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1f5      	bne.n	800eefe <USBD_GetLen+0x12>
  }

  return len;
 800ef12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3714      	adds	r7, #20
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr

0800ef20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	60f8      	str	r0, [r7, #12]
 800ef28:	60b9      	str	r1, [r7, #8]
 800ef2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2202      	movs	r2, #2
 800ef30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	687a      	ldr	r2, [r7, #4]
 800ef38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	68ba      	ldr	r2, [r7, #8]
 800ef44:	2100      	movs	r1, #0
 800ef46:	68f8      	ldr	r0, [r7, #12]
 800ef48:	f000 fd3d 	bl	800f9c6 <USBD_LL_Transmit>

  return USBD_OK;
 800ef4c:	2300      	movs	r3, #0
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b084      	sub	sp, #16
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	60f8      	str	r0, [r7, #12]
 800ef5e:	60b9      	str	r1, [r7, #8]
 800ef60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	68ba      	ldr	r2, [r7, #8]
 800ef66:	2100      	movs	r1, #0
 800ef68:	68f8      	ldr	r0, [r7, #12]
 800ef6a:	f000 fd2c 	bl	800f9c6 <USBD_LL_Transmit>

  return USBD_OK;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2203      	movs	r2, #3
 800ef88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	68ba      	ldr	r2, [r7, #8]
 800efa0:	2100      	movs	r1, #0
 800efa2:	68f8      	ldr	r0, [r7, #12]
 800efa4:	f000 fd30 	bl	800fa08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efa8:	2300      	movs	r3, #0
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}

0800efb2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800efb2:	b580      	push	{r7, lr}
 800efb4:	b084      	sub	sp, #16
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	60f8      	str	r0, [r7, #12]
 800efba:	60b9      	str	r1, [r7, #8]
 800efbc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	68ba      	ldr	r2, [r7, #8]
 800efc2:	2100      	movs	r1, #0
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f000 fd1f 	bl	800fa08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efca:	2300      	movs	r3, #0
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3710      	adds	r7, #16
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2204      	movs	r2, #4
 800efe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800efe4:	2300      	movs	r3, #0
 800efe6:	2200      	movs	r2, #0
 800efe8:	2100      	movs	r1, #0
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f000 fceb 	bl	800f9c6 <USBD_LL_Transmit>

  return USBD_OK;
 800eff0:	2300      	movs	r3, #0
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3708      	adds	r7, #8
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}

0800effa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800effa:	b580      	push	{r7, lr}
 800effc:	b082      	sub	sp, #8
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2205      	movs	r2, #5
 800f006:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f00a:	2300      	movs	r3, #0
 800f00c:	2200      	movs	r2, #0
 800f00e:	2100      	movs	r1, #0
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f000 fcf9 	bl	800fa08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f016:	2300      	movs	r3, #0
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f024:	2200      	movs	r2, #0
 800f026:	4912      	ldr	r1, [pc, #72]	; (800f070 <MX_USB_DEVICE_Init+0x50>)
 800f028:	4812      	ldr	r0, [pc, #72]	; (800f074 <MX_USB_DEVICE_Init+0x54>)
 800f02a:	f7fe fd07 	bl	800da3c <USBD_Init>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d001      	beq.n	800f038 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f034:	f7f2 f8fe 	bl	8001234 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f038:	490f      	ldr	r1, [pc, #60]	; (800f078 <MX_USB_DEVICE_Init+0x58>)
 800f03a:	480e      	ldr	r0, [pc, #56]	; (800f074 <MX_USB_DEVICE_Init+0x54>)
 800f03c:	f7fe fd2e 	bl	800da9c <USBD_RegisterClass>
 800f040:	4603      	mov	r3, r0
 800f042:	2b00      	cmp	r3, #0
 800f044:	d001      	beq.n	800f04a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f046:	f7f2 f8f5 	bl	8001234 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f04a:	490c      	ldr	r1, [pc, #48]	; (800f07c <MX_USB_DEVICE_Init+0x5c>)
 800f04c:	4809      	ldr	r0, [pc, #36]	; (800f074 <MX_USB_DEVICE_Init+0x54>)
 800f04e:	f7fe fc65 	bl	800d91c <USBD_CDC_RegisterInterface>
 800f052:	4603      	mov	r3, r0
 800f054:	2b00      	cmp	r3, #0
 800f056:	d001      	beq.n	800f05c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f058:	f7f2 f8ec 	bl	8001234 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f05c:	4805      	ldr	r0, [pc, #20]	; (800f074 <MX_USB_DEVICE_Init+0x54>)
 800f05e:	f7fe fd53 	bl	800db08 <USBD_Start>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d001      	beq.n	800f06c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f068:	f7f2 f8e4 	bl	8001234 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f06c:	bf00      	nop
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	200000ac 	.word	0x200000ac
 800f074:	20000998 	.word	0x20000998
 800f078:	20000018 	.word	0x20000018
 800f07c:	20000098 	.word	0x20000098

0800f080 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f084:	2200      	movs	r2, #0
 800f086:	4905      	ldr	r1, [pc, #20]	; (800f09c <CDC_Init_FS+0x1c>)
 800f088:	4805      	ldr	r0, [pc, #20]	; (800f0a0 <CDC_Init_FS+0x20>)
 800f08a:	f7fe fc61 	bl	800d950 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f08e:	4905      	ldr	r1, [pc, #20]	; (800f0a4 <CDC_Init_FS+0x24>)
 800f090:	4803      	ldr	r0, [pc, #12]	; (800f0a0 <CDC_Init_FS+0x20>)
 800f092:	f7fe fc7f 	bl	800d994 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f096:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f098:	4618      	mov	r0, r3
 800f09a:	bd80      	pop	{r7, pc}
 800f09c:	20001474 	.word	0x20001474
 800f0a0:	20000998 	.word	0x20000998
 800f0a4:	20000c74 	.word	0x20000c74

0800f0a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f0ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr

0800f0b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b083      	sub	sp, #12
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	4603      	mov	r3, r0
 800f0c0:	6039      	str	r1, [r7, #0]
 800f0c2:	71fb      	strb	r3, [r7, #7]
 800f0c4:	4613      	mov	r3, r2
 800f0c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f0c8:	79fb      	ldrb	r3, [r7, #7]
 800f0ca:	2b23      	cmp	r3, #35	; 0x23
 800f0cc:	f200 808c 	bhi.w	800f1e8 <CDC_Control_FS+0x130>
 800f0d0:	a201      	add	r2, pc, #4	; (adr r2, 800f0d8 <CDC_Control_FS+0x20>)
 800f0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d6:	bf00      	nop
 800f0d8:	0800f1e9 	.word	0x0800f1e9
 800f0dc:	0800f1e9 	.word	0x0800f1e9
 800f0e0:	0800f1e9 	.word	0x0800f1e9
 800f0e4:	0800f1e9 	.word	0x0800f1e9
 800f0e8:	0800f1e9 	.word	0x0800f1e9
 800f0ec:	0800f1e9 	.word	0x0800f1e9
 800f0f0:	0800f1e9 	.word	0x0800f1e9
 800f0f4:	0800f1e9 	.word	0x0800f1e9
 800f0f8:	0800f1e9 	.word	0x0800f1e9
 800f0fc:	0800f1e9 	.word	0x0800f1e9
 800f100:	0800f1e9 	.word	0x0800f1e9
 800f104:	0800f1e9 	.word	0x0800f1e9
 800f108:	0800f1e9 	.word	0x0800f1e9
 800f10c:	0800f1e9 	.word	0x0800f1e9
 800f110:	0800f1e9 	.word	0x0800f1e9
 800f114:	0800f1e9 	.word	0x0800f1e9
 800f118:	0800f1e9 	.word	0x0800f1e9
 800f11c:	0800f1e9 	.word	0x0800f1e9
 800f120:	0800f1e9 	.word	0x0800f1e9
 800f124:	0800f1e9 	.word	0x0800f1e9
 800f128:	0800f1e9 	.word	0x0800f1e9
 800f12c:	0800f1e9 	.word	0x0800f1e9
 800f130:	0800f1e9 	.word	0x0800f1e9
 800f134:	0800f1e9 	.word	0x0800f1e9
 800f138:	0800f1e9 	.word	0x0800f1e9
 800f13c:	0800f1e9 	.word	0x0800f1e9
 800f140:	0800f1e9 	.word	0x0800f1e9
 800f144:	0800f1e9 	.word	0x0800f1e9
 800f148:	0800f1e9 	.word	0x0800f1e9
 800f14c:	0800f1e9 	.word	0x0800f1e9
 800f150:	0800f1e9 	.word	0x0800f1e9
 800f154:	0800f1e9 	.word	0x0800f1e9
 800f158:	0800f169 	.word	0x0800f169
 800f15c:	0800f1a3 	.word	0x0800f1a3
 800f160:	0800f1e9 	.word	0x0800f1e9
 800f164:	0800f1e9 	.word	0x0800f1e9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	usbVcpParameters[0] = pbuf[0];
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	781a      	ldrb	r2, [r3, #0]
 800f16c:	4b22      	ldr	r3, [pc, #136]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f16e:	701a      	strb	r2, [r3, #0]
    	usbVcpParameters[1] = pbuf[1];
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	785a      	ldrb	r2, [r3, #1]
 800f174:	4b20      	ldr	r3, [pc, #128]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f176:	705a      	strb	r2, [r3, #1]
    	usbVcpParameters[2] = pbuf[2];
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	789a      	ldrb	r2, [r3, #2]
 800f17c:	4b1e      	ldr	r3, [pc, #120]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f17e:	709a      	strb	r2, [r3, #2]
    	usbVcpParameters[3] = pbuf[3];
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	78da      	ldrb	r2, [r3, #3]
 800f184:	4b1c      	ldr	r3, [pc, #112]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f186:	70da      	strb	r2, [r3, #3]
    	usbVcpParameters[4] = pbuf[4];
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	791a      	ldrb	r2, [r3, #4]
 800f18c:	4b1a      	ldr	r3, [pc, #104]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f18e:	711a      	strb	r2, [r3, #4]
    	usbVcpParameters[5] = pbuf[5];
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	795a      	ldrb	r2, [r3, #5]
 800f194:	4b18      	ldr	r3, [pc, #96]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f196:	715a      	strb	r2, [r3, #5]
    	usbVcpParameters[6] = pbuf[6];
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	799a      	ldrb	r2, [r3, #6]
 800f19c:	4b16      	ldr	r3, [pc, #88]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f19e:	719a      	strb	r2, [r3, #6]

    break;
 800f1a0:	e023      	b.n	800f1ea <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = usbVcpParameters[0];
 800f1a2:	4b15      	ldr	r3, [pc, #84]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f1a4:	781a      	ldrb	r2, [r3, #0]
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = usbVcpParameters[1];
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	4a12      	ldr	r2, [pc, #72]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f1b0:	7852      	ldrb	r2, [r2, #1]
 800f1b2:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = usbVcpParameters[2];
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	3302      	adds	r3, #2
 800f1b8:	4a0f      	ldr	r2, [pc, #60]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f1ba:	7892      	ldrb	r2, [r2, #2]
 800f1bc:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = usbVcpParameters[3];
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	3303      	adds	r3, #3
 800f1c2:	4a0d      	ldr	r2, [pc, #52]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f1c4:	78d2      	ldrb	r2, [r2, #3]
 800f1c6:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = usbVcpParameters[4];
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	4a0a      	ldr	r2, [pc, #40]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f1ce:	7912      	ldrb	r2, [r2, #4]
 800f1d0:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = usbVcpParameters[5];
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	3305      	adds	r3, #5
 800f1d6:	4a08      	ldr	r2, [pc, #32]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f1d8:	7952      	ldrb	r2, [r2, #5]
 800f1da:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = usbVcpParameters[6];
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	3306      	adds	r3, #6
 800f1e0:	4a05      	ldr	r2, [pc, #20]	; (800f1f8 <CDC_Control_FS+0x140>)
 800f1e2:	7992      	ldrb	r2, [r2, #6]
 800f1e4:	701a      	strb	r2, [r3, #0]

    break;
 800f1e6:	e000      	b.n	800f1ea <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f1e8:	bf00      	nop
  }

  return (USBD_OK);
 800f1ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	370c      	adds	r7, #12
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr
 800f1f8:	20000714 	.word	0x20000714

0800f1fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f206:	6879      	ldr	r1, [r7, #4]
 800f208:	4808      	ldr	r0, [pc, #32]	; (800f22c <CDC_Receive_FS+0x30>)
 800f20a:	f7fe fbc3 	bl	800d994 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f20e:	4807      	ldr	r0, [pc, #28]	; (800f22c <CDC_Receive_FS+0x30>)
 800f210:	f7fe fbde 	bl	800d9d0 <USBD_CDC_ReceivePacket>

  PDM_USB_Process(Buf, *Len);
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	4619      	mov	r1, r3
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f7f2 f901 	bl	8001424 <PDM_USB_Process>

  return (USBD_OK);
 800f222:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f224:	4618      	mov	r0, r3
 800f226:	3708      	adds	r7, #8
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}
 800f22c:	20000998 	.word	0x20000998

0800f230 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f230:	b480      	push	{r7}
 800f232:	b087      	sub	sp, #28
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	4613      	mov	r3, r2
 800f23c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f23e:	2300      	movs	r3, #0
 800f240:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f242:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f246:	4618      	mov	r0, r3
 800f248:	371c      	adds	r7, #28
 800f24a:	46bd      	mov	sp, r7
 800f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f250:	4770      	bx	lr
	...

0800f254 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f254:	b480      	push	{r7}
 800f256:	b083      	sub	sp, #12
 800f258:	af00      	add	r7, sp, #0
 800f25a:	4603      	mov	r3, r0
 800f25c:	6039      	str	r1, [r7, #0]
 800f25e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	2212      	movs	r2, #18
 800f264:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f266:	4b03      	ldr	r3, [pc, #12]	; (800f274 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f268:	4618      	mov	r0, r3
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr
 800f274:	200000c8 	.word	0x200000c8

0800f278 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	4603      	mov	r3, r0
 800f280:	6039      	str	r1, [r7, #0]
 800f282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	2204      	movs	r2, #4
 800f288:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f28a:	4b03      	ldr	r3, [pc, #12]	; (800f298 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	370c      	adds	r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr
 800f298:	200000dc 	.word	0x200000dc

0800f29c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	6039      	str	r1, [r7, #0]
 800f2a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f2a8:	79fb      	ldrb	r3, [r7, #7]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d105      	bne.n	800f2ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2ae:	683a      	ldr	r2, [r7, #0]
 800f2b0:	4907      	ldr	r1, [pc, #28]	; (800f2d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f2b2:	4808      	ldr	r0, [pc, #32]	; (800f2d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f2b4:	f7ff fdd4 	bl	800ee60 <USBD_GetString>
 800f2b8:	e004      	b.n	800f2c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2ba:	683a      	ldr	r2, [r7, #0]
 800f2bc:	4904      	ldr	r1, [pc, #16]	; (800f2d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f2be:	4805      	ldr	r0, [pc, #20]	; (800f2d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f2c0:	f7ff fdce 	bl	800ee60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f2c4:	4b02      	ldr	r3, [pc, #8]	; (800f2d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3708      	adds	r7, #8
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	20001c74 	.word	0x20001c74
 800f2d4:	0800fd90 	.word	0x0800fd90

0800f2d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	4603      	mov	r3, r0
 800f2e0:	6039      	str	r1, [r7, #0]
 800f2e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f2e4:	683a      	ldr	r2, [r7, #0]
 800f2e6:	4904      	ldr	r1, [pc, #16]	; (800f2f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f2e8:	4804      	ldr	r0, [pc, #16]	; (800f2fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f2ea:	f7ff fdb9 	bl	800ee60 <USBD_GetString>
  return USBD_StrDesc;
 800f2ee:	4b02      	ldr	r3, [pc, #8]	; (800f2f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	20001c74 	.word	0x20001c74
 800f2fc:	0800fda8 	.word	0x0800fda8

0800f300 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b082      	sub	sp, #8
 800f304:	af00      	add	r7, sp, #0
 800f306:	4603      	mov	r3, r0
 800f308:	6039      	str	r1, [r7, #0]
 800f30a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	221a      	movs	r2, #26
 800f310:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f312:	f000 f843 	bl	800f39c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f316:	4b02      	ldr	r3, [pc, #8]	; (800f320 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3708      	adds	r7, #8
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	200000e0 	.word	0x200000e0

0800f324 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	4603      	mov	r3, r0
 800f32c:	6039      	str	r1, [r7, #0]
 800f32e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f330:	79fb      	ldrb	r3, [r7, #7]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d105      	bne.n	800f342 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f336:	683a      	ldr	r2, [r7, #0]
 800f338:	4907      	ldr	r1, [pc, #28]	; (800f358 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f33a:	4808      	ldr	r0, [pc, #32]	; (800f35c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f33c:	f7ff fd90 	bl	800ee60 <USBD_GetString>
 800f340:	e004      	b.n	800f34c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f342:	683a      	ldr	r2, [r7, #0]
 800f344:	4904      	ldr	r1, [pc, #16]	; (800f358 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f346:	4805      	ldr	r0, [pc, #20]	; (800f35c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f348:	f7ff fd8a 	bl	800ee60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f34c:	4b02      	ldr	r3, [pc, #8]	; (800f358 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3708      	adds	r7, #8
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
 800f356:	bf00      	nop
 800f358:	20001c74 	.word	0x20001c74
 800f35c:	0800fdbc 	.word	0x0800fdbc

0800f360 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	4603      	mov	r3, r0
 800f368:	6039      	str	r1, [r7, #0]
 800f36a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f36c:	79fb      	ldrb	r3, [r7, #7]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d105      	bne.n	800f37e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f372:	683a      	ldr	r2, [r7, #0]
 800f374:	4907      	ldr	r1, [pc, #28]	; (800f394 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f376:	4808      	ldr	r0, [pc, #32]	; (800f398 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f378:	f7ff fd72 	bl	800ee60 <USBD_GetString>
 800f37c:	e004      	b.n	800f388 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f37e:	683a      	ldr	r2, [r7, #0]
 800f380:	4904      	ldr	r1, [pc, #16]	; (800f394 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f382:	4805      	ldr	r0, [pc, #20]	; (800f398 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f384:	f7ff fd6c 	bl	800ee60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f388:	4b02      	ldr	r3, [pc, #8]	; (800f394 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3708      	adds	r7, #8
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}
 800f392:	bf00      	nop
 800f394:	20001c74 	.word	0x20001c74
 800f398:	0800fdc8 	.word	0x0800fdc8

0800f39c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f3a2:	4b0f      	ldr	r3, [pc, #60]	; (800f3e0 <Get_SerialNum+0x44>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f3a8:	4b0e      	ldr	r3, [pc, #56]	; (800f3e4 <Get_SerialNum+0x48>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f3ae:	4b0e      	ldr	r3, [pc, #56]	; (800f3e8 <Get_SerialNum+0x4c>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d009      	beq.n	800f3d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f3c2:	2208      	movs	r2, #8
 800f3c4:	4909      	ldr	r1, [pc, #36]	; (800f3ec <Get_SerialNum+0x50>)
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	f000 f814 	bl	800f3f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f3cc:	2204      	movs	r2, #4
 800f3ce:	4908      	ldr	r1, [pc, #32]	; (800f3f0 <Get_SerialNum+0x54>)
 800f3d0:	68b8      	ldr	r0, [r7, #8]
 800f3d2:	f000 f80f 	bl	800f3f4 <IntToUnicode>
  }
}
 800f3d6:	bf00      	nop
 800f3d8:	3710      	adds	r7, #16
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	1fff7a10 	.word	0x1fff7a10
 800f3e4:	1fff7a14 	.word	0x1fff7a14
 800f3e8:	1fff7a18 	.word	0x1fff7a18
 800f3ec:	200000e2 	.word	0x200000e2
 800f3f0:	200000f2 	.word	0x200000f2

0800f3f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b087      	sub	sp, #28
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	60f8      	str	r0, [r7, #12]
 800f3fc:	60b9      	str	r1, [r7, #8]
 800f3fe:	4613      	mov	r3, r2
 800f400:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f402:	2300      	movs	r3, #0
 800f404:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f406:	2300      	movs	r3, #0
 800f408:	75fb      	strb	r3, [r7, #23]
 800f40a:	e027      	b.n	800f45c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	0f1b      	lsrs	r3, r3, #28
 800f410:	2b09      	cmp	r3, #9
 800f412:	d80b      	bhi.n	800f42c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	0f1b      	lsrs	r3, r3, #28
 800f418:	b2da      	uxtb	r2, r3
 800f41a:	7dfb      	ldrb	r3, [r7, #23]
 800f41c:	005b      	lsls	r3, r3, #1
 800f41e:	4619      	mov	r1, r3
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	440b      	add	r3, r1
 800f424:	3230      	adds	r2, #48	; 0x30
 800f426:	b2d2      	uxtb	r2, r2
 800f428:	701a      	strb	r2, [r3, #0]
 800f42a:	e00a      	b.n	800f442 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	0f1b      	lsrs	r3, r3, #28
 800f430:	b2da      	uxtb	r2, r3
 800f432:	7dfb      	ldrb	r3, [r7, #23]
 800f434:	005b      	lsls	r3, r3, #1
 800f436:	4619      	mov	r1, r3
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	440b      	add	r3, r1
 800f43c:	3237      	adds	r2, #55	; 0x37
 800f43e:	b2d2      	uxtb	r2, r2
 800f440:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	011b      	lsls	r3, r3, #4
 800f446:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f448:	7dfb      	ldrb	r3, [r7, #23]
 800f44a:	005b      	lsls	r3, r3, #1
 800f44c:	3301      	adds	r3, #1
 800f44e:	68ba      	ldr	r2, [r7, #8]
 800f450:	4413      	add	r3, r2
 800f452:	2200      	movs	r2, #0
 800f454:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f456:	7dfb      	ldrb	r3, [r7, #23]
 800f458:	3301      	adds	r3, #1
 800f45a:	75fb      	strb	r3, [r7, #23]
 800f45c:	7dfa      	ldrb	r2, [r7, #23]
 800f45e:	79fb      	ldrb	r3, [r7, #7]
 800f460:	429a      	cmp	r2, r3
 800f462:	d3d3      	bcc.n	800f40c <IntToUnicode+0x18>
  }
}
 800f464:	bf00      	nop
 800f466:	bf00      	nop
 800f468:	371c      	adds	r7, #28
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr
	...

0800f474 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b0a0      	sub	sp, #128	; 0x80
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f47c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f480:	2200      	movs	r2, #0
 800f482:	601a      	str	r2, [r3, #0]
 800f484:	605a      	str	r2, [r3, #4]
 800f486:	609a      	str	r2, [r3, #8]
 800f488:	60da      	str	r2, [r3, #12]
 800f48a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f48c:	f107 0310 	add.w	r3, r7, #16
 800f490:	225c      	movs	r2, #92	; 0x5c
 800f492:	2100      	movs	r1, #0
 800f494:	4618      	mov	r0, r3
 800f496:	f000 fb69 	bl	800fb6c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f4a2:	d161      	bne.n	800f568 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f4a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f4a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 800f4aa:	2308      	movs	r3, #8
 800f4ac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800f4ae:	23c0      	movs	r3, #192	; 0xc0
 800f4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800f4b2:	2302      	movs	r3, #2
 800f4b4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800f4b6:	2304      	movs	r3, #4
 800f4b8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800f4be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f4c2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f4c4:	f107 0310 	add.w	r3, r7, #16
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7f9 fac7 	bl	8008a5c <HAL_RCCEx_PeriphCLKConfig>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d001      	beq.n	800f4d8 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 800f4d4:	f7f1 feae 	bl	8001234 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f4d8:	2300      	movs	r3, #0
 800f4da:	60fb      	str	r3, [r7, #12]
 800f4dc:	4b24      	ldr	r3, [pc, #144]	; (800f570 <HAL_PCD_MspInit+0xfc>)
 800f4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4e0:	4a23      	ldr	r2, [pc, #140]	; (800f570 <HAL_PCD_MspInit+0xfc>)
 800f4e2:	f043 0301 	orr.w	r3, r3, #1
 800f4e6:	6313      	str	r3, [r2, #48]	; 0x30
 800f4e8:	4b21      	ldr	r3, [pc, #132]	; (800f570 <HAL_PCD_MspInit+0xfc>)
 800f4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4ec:	f003 0301 	and.w	r3, r3, #1
 800f4f0:	60fb      	str	r3, [r7, #12]
 800f4f2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f4f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f4f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4fe:	2300      	movs	r3, #0
 800f500:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f502:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f506:	4619      	mov	r1, r3
 800f508:	481a      	ldr	r0, [pc, #104]	; (800f574 <HAL_PCD_MspInit+0x100>)
 800f50a:	f7f6 fda1 	bl	8006050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f50e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f512:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f514:	2302      	movs	r3, #2
 800f516:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f518:	2300      	movs	r3, #0
 800f51a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f51c:	2303      	movs	r3, #3
 800f51e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f520:	230a      	movs	r3, #10
 800f522:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f524:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f528:	4619      	mov	r1, r3
 800f52a:	4812      	ldr	r0, [pc, #72]	; (800f574 <HAL_PCD_MspInit+0x100>)
 800f52c:	f7f6 fd90 	bl	8006050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f530:	4b0f      	ldr	r3, [pc, #60]	; (800f570 <HAL_PCD_MspInit+0xfc>)
 800f532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f534:	4a0e      	ldr	r2, [pc, #56]	; (800f570 <HAL_PCD_MspInit+0xfc>)
 800f536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f53a:	6353      	str	r3, [r2, #52]	; 0x34
 800f53c:	2300      	movs	r3, #0
 800f53e:	60bb      	str	r3, [r7, #8]
 800f540:	4b0b      	ldr	r3, [pc, #44]	; (800f570 <HAL_PCD_MspInit+0xfc>)
 800f542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f544:	4a0a      	ldr	r2, [pc, #40]	; (800f570 <HAL_PCD_MspInit+0xfc>)
 800f546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f54a:	6453      	str	r3, [r2, #68]	; 0x44
 800f54c:	4b08      	ldr	r3, [pc, #32]	; (800f570 <HAL_PCD_MspInit+0xfc>)
 800f54e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f554:	60bb      	str	r3, [r7, #8]
 800f556:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f558:	2200      	movs	r2, #0
 800f55a:	2100      	movs	r1, #0
 800f55c:	2043      	movs	r0, #67	; 0x43
 800f55e:	f7f6 f9a6 	bl	80058ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f562:	2043      	movs	r0, #67	; 0x43
 800f564:	f7f6 f9bf 	bl	80058e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f568:	bf00      	nop
 800f56a:	3780      	adds	r7, #128	; 0x80
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	40023800 	.word	0x40023800
 800f574:	40020000 	.word	0x40020000

0800f578 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f58c:	4619      	mov	r1, r3
 800f58e:	4610      	mov	r0, r2
 800f590:	f7fe fb07 	bl	800dba2 <USBD_LL_SetupStage>
}
 800f594:	bf00      	nop
 800f596:	3708      	adds	r7, #8
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f5ae:	78fa      	ldrb	r2, [r7, #3]
 800f5b0:	6879      	ldr	r1, [r7, #4]
 800f5b2:	4613      	mov	r3, r2
 800f5b4:	00db      	lsls	r3, r3, #3
 800f5b6:	4413      	add	r3, r2
 800f5b8:	009b      	lsls	r3, r3, #2
 800f5ba:	440b      	add	r3, r1
 800f5bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	78fb      	ldrb	r3, [r7, #3]
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	f7fe fb41 	bl	800dc4c <USBD_LL_DataOutStage>
}
 800f5ca:	bf00      	nop
 800f5cc:	3708      	adds	r7, #8
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}

0800f5d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5d2:	b580      	push	{r7, lr}
 800f5d4:	b082      	sub	sp, #8
 800f5d6:	af00      	add	r7, sp, #0
 800f5d8:	6078      	str	r0, [r7, #4]
 800f5da:	460b      	mov	r3, r1
 800f5dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f5e4:	78fa      	ldrb	r2, [r7, #3]
 800f5e6:	6879      	ldr	r1, [r7, #4]
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	00db      	lsls	r3, r3, #3
 800f5ec:	4413      	add	r3, r2
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	440b      	add	r3, r1
 800f5f2:	334c      	adds	r3, #76	; 0x4c
 800f5f4:	681a      	ldr	r2, [r3, #0]
 800f5f6:	78fb      	ldrb	r3, [r7, #3]
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	f7fe fbda 	bl	800ddb2 <USBD_LL_DataInStage>
}
 800f5fe:	bf00      	nop
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b082      	sub	sp, #8
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f614:	4618      	mov	r0, r3
 800f616:	f7fe fd0e 	bl	800e036 <USBD_LL_SOF>
}
 800f61a:	bf00      	nop
 800f61c:	3708      	adds	r7, #8
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f622:	b580      	push	{r7, lr}
 800f624:	b084      	sub	sp, #16
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f62a:	2301      	movs	r3, #1
 800f62c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d102      	bne.n	800f63c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f636:	2300      	movs	r3, #0
 800f638:	73fb      	strb	r3, [r7, #15]
 800f63a:	e008      	b.n	800f64e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	68db      	ldr	r3, [r3, #12]
 800f640:	2b02      	cmp	r3, #2
 800f642:	d102      	bne.n	800f64a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f644:	2301      	movs	r3, #1
 800f646:	73fb      	strb	r3, [r7, #15]
 800f648:	e001      	b.n	800f64e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f64a:	f7f1 fdf3 	bl	8001234 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f654:	7bfa      	ldrb	r2, [r7, #15]
 800f656:	4611      	mov	r1, r2
 800f658:	4618      	mov	r0, r3
 800f65a:	f7fe fcae 	bl	800dfba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f664:	4618      	mov	r0, r3
 800f666:	f7fe fc56 	bl	800df16 <USBD_LL_Reset>
}
 800f66a:	bf00      	nop
 800f66c:	3710      	adds	r7, #16
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
	...

0800f674 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f682:	4618      	mov	r0, r3
 800f684:	f7fe fca9 	bl	800dfda <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	687a      	ldr	r2, [r7, #4]
 800f694:	6812      	ldr	r2, [r2, #0]
 800f696:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f69a:	f043 0301 	orr.w	r3, r3, #1
 800f69e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6a1b      	ldr	r3, [r3, #32]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d005      	beq.n	800f6b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f6a8:	4b04      	ldr	r3, [pc, #16]	; (800f6bc <HAL_PCD_SuspendCallback+0x48>)
 800f6aa:	691b      	ldr	r3, [r3, #16]
 800f6ac:	4a03      	ldr	r2, [pc, #12]	; (800f6bc <HAL_PCD_SuspendCallback+0x48>)
 800f6ae:	f043 0306 	orr.w	r3, r3, #6
 800f6b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f6b4:	bf00      	nop
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	e000ed00 	.word	0xe000ed00

0800f6c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fe fc99 	bl	800e006 <USBD_LL_Resume>
}
 800f6d4:	bf00      	nop
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6ee:	78fa      	ldrb	r2, [r7, #3]
 800f6f0:	4611      	mov	r1, r2
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7fe fcf1 	bl	800e0da <USBD_LL_IsoOUTIncomplete>
}
 800f6f8:	bf00      	nop
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	460b      	mov	r3, r1
 800f70a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f712:	78fa      	ldrb	r2, [r7, #3]
 800f714:	4611      	mov	r1, r2
 800f716:	4618      	mov	r0, r3
 800f718:	f7fe fcad 	bl	800e076 <USBD_LL_IsoINIncomplete>
}
 800f71c:	bf00      	nop
 800f71e:	3708      	adds	r7, #8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f732:	4618      	mov	r0, r3
 800f734:	f7fe fd03 	bl	800e13e <USBD_LL_DevConnected>
}
 800f738:	bf00      	nop
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b082      	sub	sp, #8
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f74e:	4618      	mov	r0, r3
 800f750:	f7fe fd00 	bl	800e154 <USBD_LL_DevDisconnected>
}
 800f754:	bf00      	nop
 800f756:	3708      	adds	r7, #8
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d13c      	bne.n	800f7e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f76c:	4a20      	ldr	r2, [pc, #128]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	4a1e      	ldr	r2, [pc, #120]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f778:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f77c:	4b1c      	ldr	r3, [pc, #112]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f77e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f782:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f784:	4b1a      	ldr	r3, [pc, #104]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f786:	2206      	movs	r2, #6
 800f788:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f78a:	4b19      	ldr	r3, [pc, #100]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f78c:	2202      	movs	r2, #2
 800f78e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f790:	4b17      	ldr	r3, [pc, #92]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f792:	2200      	movs	r2, #0
 800f794:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f796:	4b16      	ldr	r3, [pc, #88]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f798:	2202      	movs	r2, #2
 800f79a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f79c:	4b14      	ldr	r3, [pc, #80]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f79e:	2200      	movs	r2, #0
 800f7a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f7a2:	4b13      	ldr	r3, [pc, #76]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f7a8:	4b11      	ldr	r3, [pc, #68]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800f7ae:	4b10      	ldr	r3, [pc, #64]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f7b4:	4b0e      	ldr	r3, [pc, #56]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f7ba:	480d      	ldr	r0, [pc, #52]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f7bc:	f7f7 fd22 	bl	8007204 <HAL_PCD_Init>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d001      	beq.n	800f7ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f7c6:	f7f1 fd35 	bl	8001234 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f7ca:	2180      	movs	r1, #128	; 0x80
 800f7cc:	4808      	ldr	r0, [pc, #32]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f7ce:	f7f8 ffae 	bl	800872e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f7d2:	2240      	movs	r2, #64	; 0x40
 800f7d4:	2100      	movs	r1, #0
 800f7d6:	4806      	ldr	r0, [pc, #24]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f7d8:	f7f8 ff62 	bl	80086a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f7dc:	2280      	movs	r2, #128	; 0x80
 800f7de:	2101      	movs	r1, #1
 800f7e0:	4803      	ldr	r0, [pc, #12]	; (800f7f0 <USBD_LL_Init+0x94>)
 800f7e2:	f7f8 ff5d 	bl	80086a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f7e6:	2300      	movs	r3, #0
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3708      	adds	r7, #8
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}
 800f7f0:	20001e74 	.word	0x20001e74

0800f7f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f800:	2300      	movs	r3, #0
 800f802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7f7 fe1e 	bl	800744c <HAL_PCD_Start>
 800f810:	4603      	mov	r3, r0
 800f812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f814:	7bfb      	ldrb	r3, [r7, #15]
 800f816:	4618      	mov	r0, r3
 800f818:	f000 f942 	bl	800faa0 <USBD_Get_USB_Status>
 800f81c:	4603      	mov	r3, r0
 800f81e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f820:	7bbb      	ldrb	r3, [r7, #14]
}
 800f822:	4618      	mov	r0, r3
 800f824:	3710      	adds	r7, #16
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}

0800f82a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f82a:	b580      	push	{r7, lr}
 800f82c:	b084      	sub	sp, #16
 800f82e:	af00      	add	r7, sp, #0
 800f830:	6078      	str	r0, [r7, #4]
 800f832:	4608      	mov	r0, r1
 800f834:	4611      	mov	r1, r2
 800f836:	461a      	mov	r2, r3
 800f838:	4603      	mov	r3, r0
 800f83a:	70fb      	strb	r3, [r7, #3]
 800f83c:	460b      	mov	r3, r1
 800f83e:	70bb      	strb	r3, [r7, #2]
 800f840:	4613      	mov	r3, r2
 800f842:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f844:	2300      	movs	r3, #0
 800f846:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f848:	2300      	movs	r3, #0
 800f84a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f852:	78bb      	ldrb	r3, [r7, #2]
 800f854:	883a      	ldrh	r2, [r7, #0]
 800f856:	78f9      	ldrb	r1, [r7, #3]
 800f858:	f7f8 fb1c 	bl	8007e94 <HAL_PCD_EP_Open>
 800f85c:	4603      	mov	r3, r0
 800f85e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f860:	7bfb      	ldrb	r3, [r7, #15]
 800f862:	4618      	mov	r0, r3
 800f864:	f000 f91c 	bl	800faa0 <USBD_Get_USB_Status>
 800f868:	4603      	mov	r3, r0
 800f86a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f86c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3710      	adds	r7, #16
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f876:	b580      	push	{r7, lr}
 800f878:	b084      	sub	sp, #16
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6078      	str	r0, [r7, #4]
 800f87e:	460b      	mov	r3, r1
 800f880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f882:	2300      	movs	r3, #0
 800f884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f886:	2300      	movs	r3, #0
 800f888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f890:	78fa      	ldrb	r2, [r7, #3]
 800f892:	4611      	mov	r1, r2
 800f894:	4618      	mov	r0, r3
 800f896:	f7f8 fb65 	bl	8007f64 <HAL_PCD_EP_Close>
 800f89a:	4603      	mov	r3, r0
 800f89c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f89e:	7bfb      	ldrb	r3, [r7, #15]
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f000 f8fd 	bl	800faa0 <USBD_Get_USB_Status>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3710      	adds	r7, #16
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b084      	sub	sp, #16
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	460b      	mov	r3, r1
 800f8be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f8ce:	78fa      	ldrb	r2, [r7, #3]
 800f8d0:	4611      	mov	r1, r2
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7f8 fc3d 	bl	8008152 <HAL_PCD_EP_SetStall>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8dc:	7bfb      	ldrb	r3, [r7, #15]
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f000 f8de 	bl	800faa0 <USBD_Get_USB_Status>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3710      	adds	r7, #16
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}

0800f8f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8f2:	b580      	push	{r7, lr}
 800f8f4:	b084      	sub	sp, #16
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	6078      	str	r0, [r7, #4]
 800f8fa:	460b      	mov	r3, r1
 800f8fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8fe:	2300      	movs	r3, #0
 800f900:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f902:	2300      	movs	r3, #0
 800f904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f90c:	78fa      	ldrb	r2, [r7, #3]
 800f90e:	4611      	mov	r1, r2
 800f910:	4618      	mov	r0, r3
 800f912:	f7f8 fc82 	bl	800821a <HAL_PCD_EP_ClrStall>
 800f916:	4603      	mov	r3, r0
 800f918:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f91a:	7bfb      	ldrb	r3, [r7, #15]
 800f91c:	4618      	mov	r0, r3
 800f91e:	f000 f8bf 	bl	800faa0 <USBD_Get_USB_Status>
 800f922:	4603      	mov	r3, r0
 800f924:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f926:	7bbb      	ldrb	r3, [r7, #14]
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3710      	adds	r7, #16
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f930:	b480      	push	{r7}
 800f932:	b085      	sub	sp, #20
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	460b      	mov	r3, r1
 800f93a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f942:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	da0b      	bge.n	800f964 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f94c:	78fb      	ldrb	r3, [r7, #3]
 800f94e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f952:	68f9      	ldr	r1, [r7, #12]
 800f954:	4613      	mov	r3, r2
 800f956:	00db      	lsls	r3, r3, #3
 800f958:	4413      	add	r3, r2
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	440b      	add	r3, r1
 800f95e:	333e      	adds	r3, #62	; 0x3e
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	e00b      	b.n	800f97c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f964:	78fb      	ldrb	r3, [r7, #3]
 800f966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f96a:	68f9      	ldr	r1, [r7, #12]
 800f96c:	4613      	mov	r3, r2
 800f96e:	00db      	lsls	r3, r3, #3
 800f970:	4413      	add	r3, r2
 800f972:	009b      	lsls	r3, r3, #2
 800f974:	440b      	add	r3, r1
 800f976:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f97a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3714      	adds	r7, #20
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr

0800f988 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	460b      	mov	r3, r1
 800f992:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f994:	2300      	movs	r3, #0
 800f996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f998:	2300      	movs	r3, #0
 800f99a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9a2:	78fa      	ldrb	r2, [r7, #3]
 800f9a4:	4611      	mov	r1, r2
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7f8 fa4f 	bl	8007e4a <HAL_PCD_SetAddress>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9b0:	7bfb      	ldrb	r3, [r7, #15]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f000 f874 	bl	800faa0 <USBD_Get_USB_Status>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	b086      	sub	sp, #24
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	60f8      	str	r0, [r7, #12]
 800f9ce:	607a      	str	r2, [r7, #4]
 800f9d0:	603b      	str	r3, [r7, #0]
 800f9d2:	460b      	mov	r3, r1
 800f9d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f9e4:	7af9      	ldrb	r1, [r7, #11]
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	687a      	ldr	r2, [r7, #4]
 800f9ea:	f7f8 fb68 	bl	80080be <HAL_PCD_EP_Transmit>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9f2:	7dfb      	ldrb	r3, [r7, #23]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f000 f853 	bl	800faa0 <USBD_Get_USB_Status>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f9fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3718      	adds	r7, #24
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b086      	sub	sp, #24
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	607a      	str	r2, [r7, #4]
 800fa12:	603b      	str	r3, [r7, #0]
 800fa14:	460b      	mov	r3, r1
 800fa16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fa26:	7af9      	ldrb	r1, [r7, #11]
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	687a      	ldr	r2, [r7, #4]
 800fa2c:	f7f8 fae4 	bl	8007ff8 <HAL_PCD_EP_Receive>
 800fa30:	4603      	mov	r3, r0
 800fa32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa34:	7dfb      	ldrb	r3, [r7, #23]
 800fa36:	4618      	mov	r0, r3
 800fa38:	f000 f832 	bl	800faa0 <USBD_Get_USB_Status>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fa40:	7dbb      	ldrb	r3, [r7, #22]
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3718      	adds	r7, #24
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b082      	sub	sp, #8
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
 800fa52:	460b      	mov	r3, r1
 800fa54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa5c:	78fa      	ldrb	r2, [r7, #3]
 800fa5e:	4611      	mov	r1, r2
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7f8 fb14 	bl	800808e <HAL_PCD_EP_GetRxCount>
 800fa66:	4603      	mov	r3, r0
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3708      	adds	r7, #8
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b083      	sub	sp, #12
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fa78:	4b03      	ldr	r3, [pc, #12]	; (800fa88 <USBD_static_malloc+0x18>)
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	370c      	adds	r7, #12
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa84:	4770      	bx	lr
 800fa86:	bf00      	nop
 800fa88:	20002380 	.word	0x20002380

0800fa8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]

}
 800fa94:	bf00      	nop
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b085      	sub	sp, #20
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	4603      	mov	r3, r0
 800faa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800faaa:	2300      	movs	r3, #0
 800faac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800faae:	79fb      	ldrb	r3, [r7, #7]
 800fab0:	2b03      	cmp	r3, #3
 800fab2:	d817      	bhi.n	800fae4 <USBD_Get_USB_Status+0x44>
 800fab4:	a201      	add	r2, pc, #4	; (adr r2, 800fabc <USBD_Get_USB_Status+0x1c>)
 800fab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faba:	bf00      	nop
 800fabc:	0800facd 	.word	0x0800facd
 800fac0:	0800fad3 	.word	0x0800fad3
 800fac4:	0800fad9 	.word	0x0800fad9
 800fac8:	0800fadf 	.word	0x0800fadf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800facc:	2300      	movs	r3, #0
 800face:	73fb      	strb	r3, [r7, #15]
    break;
 800fad0:	e00b      	b.n	800faea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fad2:	2303      	movs	r3, #3
 800fad4:	73fb      	strb	r3, [r7, #15]
    break;
 800fad6:	e008      	b.n	800faea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fad8:	2301      	movs	r3, #1
 800fada:	73fb      	strb	r3, [r7, #15]
    break;
 800fadc:	e005      	b.n	800faea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fade:	2303      	movs	r3, #3
 800fae0:	73fb      	strb	r3, [r7, #15]
    break;
 800fae2:	e002      	b.n	800faea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fae4:	2303      	movs	r3, #3
 800fae6:	73fb      	strb	r3, [r7, #15]
    break;
 800fae8:	bf00      	nop
  }
  return usb_status;
 800faea:	7bfb      	ldrb	r3, [r7, #15]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3714      	adds	r7, #20
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <__errno>:
 800faf8:	4b01      	ldr	r3, [pc, #4]	; (800fb00 <__errno+0x8>)
 800fafa:	6818      	ldr	r0, [r3, #0]
 800fafc:	4770      	bx	lr
 800fafe:	bf00      	nop
 800fb00:	200000fc 	.word	0x200000fc

0800fb04 <__libc_init_array>:
 800fb04:	b570      	push	{r4, r5, r6, lr}
 800fb06:	4d0d      	ldr	r5, [pc, #52]	; (800fb3c <__libc_init_array+0x38>)
 800fb08:	4c0d      	ldr	r4, [pc, #52]	; (800fb40 <__libc_init_array+0x3c>)
 800fb0a:	1b64      	subs	r4, r4, r5
 800fb0c:	10a4      	asrs	r4, r4, #2
 800fb0e:	2600      	movs	r6, #0
 800fb10:	42a6      	cmp	r6, r4
 800fb12:	d109      	bne.n	800fb28 <__libc_init_array+0x24>
 800fb14:	4d0b      	ldr	r5, [pc, #44]	; (800fb44 <__libc_init_array+0x40>)
 800fb16:	4c0c      	ldr	r4, [pc, #48]	; (800fb48 <__libc_init_array+0x44>)
 800fb18:	f000 f92e 	bl	800fd78 <_init>
 800fb1c:	1b64      	subs	r4, r4, r5
 800fb1e:	10a4      	asrs	r4, r4, #2
 800fb20:	2600      	movs	r6, #0
 800fb22:	42a6      	cmp	r6, r4
 800fb24:	d105      	bne.n	800fb32 <__libc_init_array+0x2e>
 800fb26:	bd70      	pop	{r4, r5, r6, pc}
 800fb28:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb2c:	4798      	blx	r3
 800fb2e:	3601      	adds	r6, #1
 800fb30:	e7ee      	b.n	800fb10 <__libc_init_array+0xc>
 800fb32:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb36:	4798      	blx	r3
 800fb38:	3601      	adds	r6, #1
 800fb3a:	e7f2      	b.n	800fb22 <__libc_init_array+0x1e>
 800fb3c:	0800fe00 	.word	0x0800fe00
 800fb40:	0800fe00 	.word	0x0800fe00
 800fb44:	0800fe00 	.word	0x0800fe00
 800fb48:	0800fe04 	.word	0x0800fe04

0800fb4c <malloc>:
 800fb4c:	4b02      	ldr	r3, [pc, #8]	; (800fb58 <malloc+0xc>)
 800fb4e:	4601      	mov	r1, r0
 800fb50:	6818      	ldr	r0, [r3, #0]
 800fb52:	f000 b87f 	b.w	800fc54 <_malloc_r>
 800fb56:	bf00      	nop
 800fb58:	200000fc 	.word	0x200000fc

0800fb5c <free>:
 800fb5c:	4b02      	ldr	r3, [pc, #8]	; (800fb68 <free+0xc>)
 800fb5e:	4601      	mov	r1, r0
 800fb60:	6818      	ldr	r0, [r3, #0]
 800fb62:	f000 b80b 	b.w	800fb7c <_free_r>
 800fb66:	bf00      	nop
 800fb68:	200000fc 	.word	0x200000fc

0800fb6c <memset>:
 800fb6c:	4402      	add	r2, r0
 800fb6e:	4603      	mov	r3, r0
 800fb70:	4293      	cmp	r3, r2
 800fb72:	d100      	bne.n	800fb76 <memset+0xa>
 800fb74:	4770      	bx	lr
 800fb76:	f803 1b01 	strb.w	r1, [r3], #1
 800fb7a:	e7f9      	b.n	800fb70 <memset+0x4>

0800fb7c <_free_r>:
 800fb7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb7e:	2900      	cmp	r1, #0
 800fb80:	d044      	beq.n	800fc0c <_free_r+0x90>
 800fb82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb86:	9001      	str	r0, [sp, #4]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	f1a1 0404 	sub.w	r4, r1, #4
 800fb8e:	bfb8      	it	lt
 800fb90:	18e4      	addlt	r4, r4, r3
 800fb92:	f000 f8e3 	bl	800fd5c <__malloc_lock>
 800fb96:	4a1e      	ldr	r2, [pc, #120]	; (800fc10 <_free_r+0x94>)
 800fb98:	9801      	ldr	r0, [sp, #4]
 800fb9a:	6813      	ldr	r3, [r2, #0]
 800fb9c:	b933      	cbnz	r3, 800fbac <_free_r+0x30>
 800fb9e:	6063      	str	r3, [r4, #4]
 800fba0:	6014      	str	r4, [r2, #0]
 800fba2:	b003      	add	sp, #12
 800fba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fba8:	f000 b8de 	b.w	800fd68 <__malloc_unlock>
 800fbac:	42a3      	cmp	r3, r4
 800fbae:	d908      	bls.n	800fbc2 <_free_r+0x46>
 800fbb0:	6825      	ldr	r5, [r4, #0]
 800fbb2:	1961      	adds	r1, r4, r5
 800fbb4:	428b      	cmp	r3, r1
 800fbb6:	bf01      	itttt	eq
 800fbb8:	6819      	ldreq	r1, [r3, #0]
 800fbba:	685b      	ldreq	r3, [r3, #4]
 800fbbc:	1949      	addeq	r1, r1, r5
 800fbbe:	6021      	streq	r1, [r4, #0]
 800fbc0:	e7ed      	b.n	800fb9e <_free_r+0x22>
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	b10b      	cbz	r3, 800fbcc <_free_r+0x50>
 800fbc8:	42a3      	cmp	r3, r4
 800fbca:	d9fa      	bls.n	800fbc2 <_free_r+0x46>
 800fbcc:	6811      	ldr	r1, [r2, #0]
 800fbce:	1855      	adds	r5, r2, r1
 800fbd0:	42a5      	cmp	r5, r4
 800fbd2:	d10b      	bne.n	800fbec <_free_r+0x70>
 800fbd4:	6824      	ldr	r4, [r4, #0]
 800fbd6:	4421      	add	r1, r4
 800fbd8:	1854      	adds	r4, r2, r1
 800fbda:	42a3      	cmp	r3, r4
 800fbdc:	6011      	str	r1, [r2, #0]
 800fbde:	d1e0      	bne.n	800fba2 <_free_r+0x26>
 800fbe0:	681c      	ldr	r4, [r3, #0]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	6053      	str	r3, [r2, #4]
 800fbe6:	4421      	add	r1, r4
 800fbe8:	6011      	str	r1, [r2, #0]
 800fbea:	e7da      	b.n	800fba2 <_free_r+0x26>
 800fbec:	d902      	bls.n	800fbf4 <_free_r+0x78>
 800fbee:	230c      	movs	r3, #12
 800fbf0:	6003      	str	r3, [r0, #0]
 800fbf2:	e7d6      	b.n	800fba2 <_free_r+0x26>
 800fbf4:	6825      	ldr	r5, [r4, #0]
 800fbf6:	1961      	adds	r1, r4, r5
 800fbf8:	428b      	cmp	r3, r1
 800fbfa:	bf04      	itt	eq
 800fbfc:	6819      	ldreq	r1, [r3, #0]
 800fbfe:	685b      	ldreq	r3, [r3, #4]
 800fc00:	6063      	str	r3, [r4, #4]
 800fc02:	bf04      	itt	eq
 800fc04:	1949      	addeq	r1, r1, r5
 800fc06:	6021      	streq	r1, [r4, #0]
 800fc08:	6054      	str	r4, [r2, #4]
 800fc0a:	e7ca      	b.n	800fba2 <_free_r+0x26>
 800fc0c:	b003      	add	sp, #12
 800fc0e:	bd30      	pop	{r4, r5, pc}
 800fc10:	200025a0 	.word	0x200025a0

0800fc14 <sbrk_aligned>:
 800fc14:	b570      	push	{r4, r5, r6, lr}
 800fc16:	4e0e      	ldr	r6, [pc, #56]	; (800fc50 <sbrk_aligned+0x3c>)
 800fc18:	460c      	mov	r4, r1
 800fc1a:	6831      	ldr	r1, [r6, #0]
 800fc1c:	4605      	mov	r5, r0
 800fc1e:	b911      	cbnz	r1, 800fc26 <sbrk_aligned+0x12>
 800fc20:	f000 f88c 	bl	800fd3c <_sbrk_r>
 800fc24:	6030      	str	r0, [r6, #0]
 800fc26:	4621      	mov	r1, r4
 800fc28:	4628      	mov	r0, r5
 800fc2a:	f000 f887 	bl	800fd3c <_sbrk_r>
 800fc2e:	1c43      	adds	r3, r0, #1
 800fc30:	d00a      	beq.n	800fc48 <sbrk_aligned+0x34>
 800fc32:	1cc4      	adds	r4, r0, #3
 800fc34:	f024 0403 	bic.w	r4, r4, #3
 800fc38:	42a0      	cmp	r0, r4
 800fc3a:	d007      	beq.n	800fc4c <sbrk_aligned+0x38>
 800fc3c:	1a21      	subs	r1, r4, r0
 800fc3e:	4628      	mov	r0, r5
 800fc40:	f000 f87c 	bl	800fd3c <_sbrk_r>
 800fc44:	3001      	adds	r0, #1
 800fc46:	d101      	bne.n	800fc4c <sbrk_aligned+0x38>
 800fc48:	f04f 34ff 	mov.w	r4, #4294967295
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	bd70      	pop	{r4, r5, r6, pc}
 800fc50:	200025a4 	.word	0x200025a4

0800fc54 <_malloc_r>:
 800fc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc58:	1ccd      	adds	r5, r1, #3
 800fc5a:	f025 0503 	bic.w	r5, r5, #3
 800fc5e:	3508      	adds	r5, #8
 800fc60:	2d0c      	cmp	r5, #12
 800fc62:	bf38      	it	cc
 800fc64:	250c      	movcc	r5, #12
 800fc66:	2d00      	cmp	r5, #0
 800fc68:	4607      	mov	r7, r0
 800fc6a:	db01      	blt.n	800fc70 <_malloc_r+0x1c>
 800fc6c:	42a9      	cmp	r1, r5
 800fc6e:	d905      	bls.n	800fc7c <_malloc_r+0x28>
 800fc70:	230c      	movs	r3, #12
 800fc72:	603b      	str	r3, [r7, #0]
 800fc74:	2600      	movs	r6, #0
 800fc76:	4630      	mov	r0, r6
 800fc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc7c:	4e2e      	ldr	r6, [pc, #184]	; (800fd38 <_malloc_r+0xe4>)
 800fc7e:	f000 f86d 	bl	800fd5c <__malloc_lock>
 800fc82:	6833      	ldr	r3, [r6, #0]
 800fc84:	461c      	mov	r4, r3
 800fc86:	bb34      	cbnz	r4, 800fcd6 <_malloc_r+0x82>
 800fc88:	4629      	mov	r1, r5
 800fc8a:	4638      	mov	r0, r7
 800fc8c:	f7ff ffc2 	bl	800fc14 <sbrk_aligned>
 800fc90:	1c43      	adds	r3, r0, #1
 800fc92:	4604      	mov	r4, r0
 800fc94:	d14d      	bne.n	800fd32 <_malloc_r+0xde>
 800fc96:	6834      	ldr	r4, [r6, #0]
 800fc98:	4626      	mov	r6, r4
 800fc9a:	2e00      	cmp	r6, #0
 800fc9c:	d140      	bne.n	800fd20 <_malloc_r+0xcc>
 800fc9e:	6823      	ldr	r3, [r4, #0]
 800fca0:	4631      	mov	r1, r6
 800fca2:	4638      	mov	r0, r7
 800fca4:	eb04 0803 	add.w	r8, r4, r3
 800fca8:	f000 f848 	bl	800fd3c <_sbrk_r>
 800fcac:	4580      	cmp	r8, r0
 800fcae:	d13a      	bne.n	800fd26 <_malloc_r+0xd2>
 800fcb0:	6821      	ldr	r1, [r4, #0]
 800fcb2:	3503      	adds	r5, #3
 800fcb4:	1a6d      	subs	r5, r5, r1
 800fcb6:	f025 0503 	bic.w	r5, r5, #3
 800fcba:	3508      	adds	r5, #8
 800fcbc:	2d0c      	cmp	r5, #12
 800fcbe:	bf38      	it	cc
 800fcc0:	250c      	movcc	r5, #12
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	4638      	mov	r0, r7
 800fcc6:	f7ff ffa5 	bl	800fc14 <sbrk_aligned>
 800fcca:	3001      	adds	r0, #1
 800fccc:	d02b      	beq.n	800fd26 <_malloc_r+0xd2>
 800fcce:	6823      	ldr	r3, [r4, #0]
 800fcd0:	442b      	add	r3, r5
 800fcd2:	6023      	str	r3, [r4, #0]
 800fcd4:	e00e      	b.n	800fcf4 <_malloc_r+0xa0>
 800fcd6:	6822      	ldr	r2, [r4, #0]
 800fcd8:	1b52      	subs	r2, r2, r5
 800fcda:	d41e      	bmi.n	800fd1a <_malloc_r+0xc6>
 800fcdc:	2a0b      	cmp	r2, #11
 800fcde:	d916      	bls.n	800fd0e <_malloc_r+0xba>
 800fce0:	1961      	adds	r1, r4, r5
 800fce2:	42a3      	cmp	r3, r4
 800fce4:	6025      	str	r5, [r4, #0]
 800fce6:	bf18      	it	ne
 800fce8:	6059      	strne	r1, [r3, #4]
 800fcea:	6863      	ldr	r3, [r4, #4]
 800fcec:	bf08      	it	eq
 800fcee:	6031      	streq	r1, [r6, #0]
 800fcf0:	5162      	str	r2, [r4, r5]
 800fcf2:	604b      	str	r3, [r1, #4]
 800fcf4:	4638      	mov	r0, r7
 800fcf6:	f104 060b 	add.w	r6, r4, #11
 800fcfa:	f000 f835 	bl	800fd68 <__malloc_unlock>
 800fcfe:	f026 0607 	bic.w	r6, r6, #7
 800fd02:	1d23      	adds	r3, r4, #4
 800fd04:	1af2      	subs	r2, r6, r3
 800fd06:	d0b6      	beq.n	800fc76 <_malloc_r+0x22>
 800fd08:	1b9b      	subs	r3, r3, r6
 800fd0a:	50a3      	str	r3, [r4, r2]
 800fd0c:	e7b3      	b.n	800fc76 <_malloc_r+0x22>
 800fd0e:	6862      	ldr	r2, [r4, #4]
 800fd10:	42a3      	cmp	r3, r4
 800fd12:	bf0c      	ite	eq
 800fd14:	6032      	streq	r2, [r6, #0]
 800fd16:	605a      	strne	r2, [r3, #4]
 800fd18:	e7ec      	b.n	800fcf4 <_malloc_r+0xa0>
 800fd1a:	4623      	mov	r3, r4
 800fd1c:	6864      	ldr	r4, [r4, #4]
 800fd1e:	e7b2      	b.n	800fc86 <_malloc_r+0x32>
 800fd20:	4634      	mov	r4, r6
 800fd22:	6876      	ldr	r6, [r6, #4]
 800fd24:	e7b9      	b.n	800fc9a <_malloc_r+0x46>
 800fd26:	230c      	movs	r3, #12
 800fd28:	603b      	str	r3, [r7, #0]
 800fd2a:	4638      	mov	r0, r7
 800fd2c:	f000 f81c 	bl	800fd68 <__malloc_unlock>
 800fd30:	e7a1      	b.n	800fc76 <_malloc_r+0x22>
 800fd32:	6025      	str	r5, [r4, #0]
 800fd34:	e7de      	b.n	800fcf4 <_malloc_r+0xa0>
 800fd36:	bf00      	nop
 800fd38:	200025a0 	.word	0x200025a0

0800fd3c <_sbrk_r>:
 800fd3c:	b538      	push	{r3, r4, r5, lr}
 800fd3e:	4d06      	ldr	r5, [pc, #24]	; (800fd58 <_sbrk_r+0x1c>)
 800fd40:	2300      	movs	r3, #0
 800fd42:	4604      	mov	r4, r0
 800fd44:	4608      	mov	r0, r1
 800fd46:	602b      	str	r3, [r5, #0]
 800fd48:	f7f4 f996 	bl	8004078 <_sbrk>
 800fd4c:	1c43      	adds	r3, r0, #1
 800fd4e:	d102      	bne.n	800fd56 <_sbrk_r+0x1a>
 800fd50:	682b      	ldr	r3, [r5, #0]
 800fd52:	b103      	cbz	r3, 800fd56 <_sbrk_r+0x1a>
 800fd54:	6023      	str	r3, [r4, #0]
 800fd56:	bd38      	pop	{r3, r4, r5, pc}
 800fd58:	200025a8 	.word	0x200025a8

0800fd5c <__malloc_lock>:
 800fd5c:	4801      	ldr	r0, [pc, #4]	; (800fd64 <__malloc_lock+0x8>)
 800fd5e:	f000 b809 	b.w	800fd74 <__retarget_lock_acquire_recursive>
 800fd62:	bf00      	nop
 800fd64:	200025ac 	.word	0x200025ac

0800fd68 <__malloc_unlock>:
 800fd68:	4801      	ldr	r0, [pc, #4]	; (800fd70 <__malloc_unlock+0x8>)
 800fd6a:	f000 b804 	b.w	800fd76 <__retarget_lock_release_recursive>
 800fd6e:	bf00      	nop
 800fd70:	200025ac 	.word	0x200025ac

0800fd74 <__retarget_lock_acquire_recursive>:
 800fd74:	4770      	bx	lr

0800fd76 <__retarget_lock_release_recursive>:
 800fd76:	4770      	bx	lr

0800fd78 <_init>:
 800fd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd7a:	bf00      	nop
 800fd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd7e:	bc08      	pop	{r3}
 800fd80:	469e      	mov	lr, r3
 800fd82:	4770      	bx	lr

0800fd84 <_fini>:
 800fd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd86:	bf00      	nop
 800fd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd8a:	bc08      	pop	{r3}
 800fd8c:	469e      	mov	lr, r3
 800fd8e:	4770      	bx	lr
