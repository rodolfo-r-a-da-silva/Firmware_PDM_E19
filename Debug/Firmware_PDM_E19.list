
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800e584  0800e584  0001e584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6a0  0800e6a0  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6a0  0800e6a0  0001e6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6a8  0800e6a8  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6a8  0800e6a8  0001e6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6ac  0800e6ac  0001e6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800e6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c70  20000150  0800e800  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 0000c000  20006dc0  0800e800  00026dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002865f  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d1e  00000000  00000000  00048865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020c8  00000000  00000000  0004e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000193c  00000000  00000000  00050650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000865a  00000000  00000000  00051f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a1c5  00000000  00000000  0005a5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f15ab  00000000  00000000  000847ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008cd0  00000000  00000000  00175d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0017ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000150 	.word	0x20000150
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e56c 	.word	0x0800e56c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000154 	.word	0x20000154
 800020c:	0800e56c 	.word	0x0800e56c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 fc42 	bl	8001d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f850 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 fd0a 	bl	8000f30 <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f000 fcb2 	bl	8000e84 <MX_DMA_Init>
  MX_ADC1_Init();
 8000520:	f000 f8bc 	bl	800069c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000524:	f000 f946 	bl	80007b4 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000528:	f000 f9ce 	bl	80008c8 <MX_CAN1_Init>
  MX_TIM1_Init();
 800052c:	f000 fa44 	bl	80009b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000530:	f000 fae2 	bl	8000af8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000534:	f000 fb56 	bl	8000be4 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000538:	f000 fc02 	bl	8000d40 <MX_TIM8_Init>
  MX_I2C1_Init();
 800053c:	f000 fa0e 	bl	800095c <MX_I2C1_Init>
  MX_CRC_Init();
 8000540:	f000 f9f8 	bl	8000934 <MX_CRC_Init>
  MX_TIM6_Init();
 8000544:	f000 fbc6 	bl	8000cd4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000548:	f00a f956 	bl	800a7f8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of canRxSemaphore */
  canRxSemaphoreHandle = osSemaphoreNew(1, 1, &canRxSemaphore_attributes);
 800054c:	4a11      	ldr	r2, [pc, #68]	; (8000594 <main+0x88>)
 800054e:	2101      	movs	r1, #1
 8000550:	2001      	movs	r0, #1
 8000552:	f00a fa4d 	bl	800a9f0 <osSemaphoreNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <main+0x8c>)
 800055a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of processQueue */
  processQueueHandle = osMessageQueueNew (5, sizeof(PDM_Data_Queue_Struct), &processQueue_attributes);
 800055c:	4a0f      	ldr	r2, [pc, #60]	; (800059c <main+0x90>)
 800055e:	2114      	movs	r1, #20
 8000560:	2005      	movs	r0, #5
 8000562:	f00a fb13 	bl	800ab8c <osMessageQueueNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <main+0x94>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of outQueue */
  outQueueHandle = osMessageQueueNew (5, sizeof(uint8_t), &outQueue_attributes);
 800056c:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <main+0x98>)
 800056e:	2101      	movs	r1, #1
 8000570:	2005      	movs	r0, #5
 8000572:	f00a fb0b 	bl	800ab8c <osMessageQueueNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <main+0x9c>)
 800057a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of setupTask */
  setupTaskHandle = osThreadNew(StartSetupTask, NULL, &setupTask_attributes);
 800057c:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <main+0xa0>)
 800057e:	2100      	movs	r1, #0
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <main+0xa4>)
 8000582:	f00a f983 	bl	800a88c <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <main+0xa8>)
 800058a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800058c:	f00a f958 	bl	800a840 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x84>
 8000592:	bf00      	nop
 8000594:	0800e670 	.word	0x0800e670
 8000598:	20000634 	.word	0x20000634
 800059c:	0800e640 	.word	0x0800e640
 80005a0:	2000062c 	.word	0x2000062c
 80005a4:	0800e658 	.word	0x0800e658
 80005a8:	20000630 	.word	0x20000630
 80005ac:	0800e61c 	.word	0x0800e61c
 80005b0:	08001169 	.word	0x08001169
 80005b4:	20000628 	.word	0x20000628

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2234      	movs	r2, #52	; 0x34
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00d fee6 	bl	800e398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <SystemClock_Config+0xdc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <SystemClock_Config+0xdc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <SystemClock_Config+0xdc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	4b26      	ldr	r3, [pc, #152]	; (8000698 <SystemClock_Config+0xe0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a25      	ldr	r2, [pc, #148]	; (8000698 <SystemClock_Config+0xe0>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <SystemClock_Config+0xe0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800062c:	23b4      	movs	r3, #180	; 0xb4
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4618      	mov	r0, r3
 8000642:	f005 fa69 	bl	8005b18 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800064c:	f000 fdc6 	bl	80011dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000650:	f004 fb6c 	bl	8004d2c <HAL_PWREx_EnableOverDrive>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800065a:	f000 fdbf 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	2105      	movs	r1, #5
 800067c:	4618      	mov	r0, r3
 800067e:	f004 fba5 	bl	8004dcc <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000688:	f000 fda8 	bl	80011dc <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	; 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a2:	463b      	mov	r3, r7
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ae:	4b3d      	ldr	r3, [pc, #244]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006b0:	4a3d      	ldr	r2, [pc, #244]	; (80007a8 <MX_ADC1_Init+0x10c>)
 80006b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b4:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006bc:	4b39      	ldr	r3, [pc, #228]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006c2:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c8:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d6:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006dc:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006de:	4a33      	ldr	r2, [pc, #204]	; (80007ac <MX_ADC1_Init+0x110>)
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e2:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006ea:	2205      	movs	r2, #5
 80006ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fc:	4829      	ldr	r0, [pc, #164]	; (80007a4 <MX_ADC1_Init+0x108>)
 80006fe:	f001 fbb1 	bl	8001e64 <HAL_ADC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000708:	f000 fd68 	bl	80011dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800070c:	2305      	movs	r3, #5
 800070e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000714:	2307      	movs	r3, #7
 8000716:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	4821      	ldr	r0, [pc, #132]	; (80007a4 <MX_ADC1_Init+0x108>)
 800071e:	f001 fbe5 	bl	8001eec <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000728:	f000 fd58 	bl	80011dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800072c:	2306      	movs	r3, #6
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	4619      	mov	r1, r3
 8000738:	481a      	ldr	r0, [pc, #104]	; (80007a4 <MX_ADC1_Init+0x108>)
 800073a:	f001 fbd7 	bl	8001eec <HAL_ADC_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000744:	f000 fd4a 	bl	80011dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000748:	2307      	movs	r3, #7
 800074a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800074c:	2303      	movs	r3, #3
 800074e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	4813      	ldr	r0, [pc, #76]	; (80007a4 <MX_ADC1_Init+0x108>)
 8000756:	f001 fbc9 	bl	8001eec <HAL_ADC_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000760:	f000 fd3c 	bl	80011dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000764:	230e      	movs	r3, #14
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <MX_ADC1_Init+0x108>)
 8000772:	f001 fbbb 	bl	8001eec <HAL_ADC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800077c:	f000 fd2e 	bl	80011dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_ADC1_Init+0x114>)
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000784:	2305      	movs	r3, #5
 8000786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_ADC1_Init+0x108>)
 800078e:	f001 fbad 	bl	8001eec <HAL_ADC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000798:	f000 fd20 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000016c 	.word	0x2000016c
 80007a8:	40012000 	.word	0x40012000
 80007ac:	0f000001 	.word	0x0f000001
 80007b0:	10000012 	.word	0x10000012

080007b4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80007c6:	4b3d      	ldr	r3, [pc, #244]	; (80008bc <MX_ADC2_Init+0x108>)
 80007c8:	4a3d      	ldr	r2, [pc, #244]	; (80008c0 <MX_ADC2_Init+0x10c>)
 80007ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007cc:	4b3b      	ldr	r3, [pc, #236]	; (80008bc <MX_ADC2_Init+0x108>)
 80007ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007d4:	4b39      	ldr	r3, [pc, #228]	; (80008bc <MX_ADC2_Init+0x108>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80007da:	4b38      	ldr	r3, [pc, #224]	; (80008bc <MX_ADC2_Init+0x108>)
 80007dc:	2201      	movs	r2, #1
 80007de:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007e0:	4b36      	ldr	r3, [pc, #216]	; (80008bc <MX_ADC2_Init+0x108>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <MX_ADC2_Init+0x108>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b33      	ldr	r3, [pc, #204]	; (80008bc <MX_ADC2_Init+0x108>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b31      	ldr	r3, [pc, #196]	; (80008bc <MX_ADC2_Init+0x108>)
 80007f6:	4a33      	ldr	r2, [pc, #204]	; (80008c4 <MX_ADC2_Init+0x110>)
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fa:	4b30      	ldr	r3, [pc, #192]	; (80008bc <MX_ADC2_Init+0x108>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <MX_ADC2_Init+0x108>)
 8000802:	2205      	movs	r2, #5
 8000804:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <MX_ADC2_Init+0x108>)
 8000808:	2201      	movs	r2, #1
 800080a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <MX_ADC2_Init+0x108>)
 8000810:	2201      	movs	r2, #1
 8000812:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000814:	4829      	ldr	r0, [pc, #164]	; (80008bc <MX_ADC2_Init+0x108>)
 8000816:	f001 fb25 	bl	8001e64 <HAL_ADC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000820:	f000 fcdc 	bl	80011dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000824:	2300      	movs	r3, #0
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000828:	2301      	movs	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800082c:	2307      	movs	r3, #7
 800082e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	4821      	ldr	r0, [pc, #132]	; (80008bc <MX_ADC2_Init+0x108>)
 8000836:	f001 fb59 	bl	8001eec <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000840:	f000 fccc 	bl	80011dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000844:	2301      	movs	r3, #1
 8000846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	481a      	ldr	r0, [pc, #104]	; (80008bc <MX_ADC2_Init+0x108>)
 8000852:	f001 fb4b 	bl	8001eec <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800085c:	f000 fcbe 	bl	80011dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000860:	2302      	movs	r3, #2
 8000862:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000864:	2303      	movs	r3, #3
 8000866:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4813      	ldr	r0, [pc, #76]	; (80008bc <MX_ADC2_Init+0x108>)
 800086e:	f001 fb3d 	bl	8001eec <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000878:	f000 fcb0 	bl	80011dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800087c:	2303      	movs	r3, #3
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_ADC2_Init+0x108>)
 800088a:	f001 fb2f 	bl	8001eec <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000894:	f000 fca2 	bl	80011dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000898:	2304      	movs	r3, #4
 800089a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800089c:	2305      	movs	r3, #5
 800089e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_ADC2_Init+0x108>)
 80008a6:	f001 fb21 	bl	8001eec <HAL_ADC_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80008b0:	f000 fc94 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200001b4 	.word	0x200001b4
 80008c0:	40012100 	.word	0x40012100
 80008c4:	0f000001 	.word	0x0f000001

080008c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_CAN1_Init+0x64>)
 80008ce:	4a18      	ldr	r2, [pc, #96]	; (8000930 <MX_CAN1_Init+0x68>)
 80008d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_CAN1_Init+0x64>)
 80008d4:	2205      	movs	r2, #5
 80008d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_CAN1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_CAN1_Init+0x64>)
 80008e0:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80008e4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_CAN1_Init+0x64>)
 80008e8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80008ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_CAN1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_CAN1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_CAN1_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_CAN1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_CAN1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_CAN1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_CAN1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_CAN1_Init+0x64>)
 800091a:	f001 fd15 	bl	8002348 <HAL_CAN_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000924:	f000 fc5a 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200002bc 	.word	0x200002bc
 8000930:	40006400 	.word	0x40006400

08000934 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_CRC_Init+0x20>)
 800093a:	4a07      	ldr	r2, [pc, #28]	; (8000958 <MX_CRC_Init+0x24>)
 800093c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_CRC_Init+0x20>)
 8000940:	f002 f90e 	bl	8002b60 <HAL_CRC_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800094a:	f000 fc47 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200002e4 	.word	0x200002e4
 8000958:	40023000 	.word	0x40023000

0800095c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_I2C1_Init+0x50>)
 8000962:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <MX_I2C1_Init+0x54>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_I2C1_Init+0x50>)
 8000968:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_I2C1_Init+0x58>)
 800096a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_I2C1_Init+0x50>)
 800097a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_I2C1_Init+0x50>)
 800099a:	f002 fdad 	bl	80034f8 <HAL_I2C_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a4:	f000 fc1a 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200002ec 	.word	0x200002ec
 80009b0:	40005400 	.word	0x40005400
 80009b4:	00061a80 	.word	0x00061a80

080009b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b096      	sub	sp, #88	; 0x58
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2220      	movs	r2, #32
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f00d fcd1 	bl	800e398 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009f6:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <MX_TIM1_Init+0x138>)
 80009f8:	4a3e      	ldr	r2, [pc, #248]	; (8000af4 <MX_TIM1_Init+0x13c>)
 80009fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1799;
 80009fc:	4b3c      	ldr	r3, [pc, #240]	; (8000af0 <MX_TIM1_Init+0x138>)
 80009fe:	f240 7207 	movw	r2, #1799	; 0x707
 8000a02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a0a:	4b39      	ldr	r3, [pc, #228]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a12:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a18:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a24:	4832      	ldr	r0, [pc, #200]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a26:	f005 fb15 	bl	8006054 <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 fbd4 	bl	80011dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a3e:	4619      	mov	r1, r3
 8000a40:	482b      	ldr	r0, [pc, #172]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a42:	f005 fe19 	bl	8006678 <HAL_TIM_ConfigClockSource>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a4c:	f000 fbc6 	bl	80011dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a50:	4827      	ldr	r0, [pc, #156]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a52:	f005 fbee 	bl	8006232 <HAL_TIM_PWM_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a5c:	f000 fbbe 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4820      	ldr	r0, [pc, #128]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000a70:	f006 f9d2 	bl	8006e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a7a:	f000 fbaf 	bl	80011dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7e:	2360      	movs	r3, #96	; 0x60
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4814      	ldr	r0, [pc, #80]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000aa0:	f005 fd28 	bl	80064f4 <HAL_TIM_PWM_ConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000aaa:	f000 fb97 	bl	80011dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000ad2:	f006 fa1d 	bl	8006f10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000adc:	f000 fb7e 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ae0:	4803      	ldr	r0, [pc, #12]	; (8000af0 <MX_TIM1_Init+0x138>)
 8000ae2:	f000 ff31 	bl	8001948 <HAL_TIM_MspPostInit>

}
 8000ae6:	bf00      	nop
 8000ae8:	3758      	adds	r7, #88	; 0x58
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000340 	.word	0x20000340
 8000af4:	40010000 	.word	0x40010000

08000af8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	; 0x38
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
 8000b24:	615a      	str	r2, [r3, #20]
 8000b26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 8000b30:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b32:	f240 3283 	movw	r2, #899	; 0x383
 8000b36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b3e:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b52:	4823      	ldr	r0, [pc, #140]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b54:	f005 fa7e 	bl	8006054 <HAL_TIM_Base_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b5e:	f000 fb3d 	bl	80011dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481c      	ldr	r0, [pc, #112]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b70:	f005 fd82 	bl	8006678 <HAL_TIM_ConfigClockSource>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b7a:	f000 fb2f 	bl	80011dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b7e:	4818      	ldr	r0, [pc, #96]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b80:	f005 fb57 	bl	8006232 <HAL_TIM_PWM_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b8a:	f000 fb27 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b96:	f107 0320 	add.w	r3, r7, #32
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4810      	ldr	r0, [pc, #64]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000b9e:	f006 f93b 	bl	8006e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ba8:	f000 fb18 	bl	80011dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bac:	2360      	movs	r3, #96	; 0x60
 8000bae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2208      	movs	r2, #8
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000bc4:	f005 fc96 	bl	80064f4 <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000bce:	f000 fb05 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bd2:	4803      	ldr	r0, [pc, #12]	; (8000be0 <MX_TIM2_Init+0xe8>)
 8000bd4:	f000 feb8 	bl	8001948 <HAL_TIM_MspPostInit>

}
 8000bd8:	bf00      	nop
 8000bda:	3738      	adds	r7, #56	; 0x38
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000388 	.word	0x20000388

08000be4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	; 0x38
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	615a      	str	r2, [r3, #20]
 8000c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c14:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c16:	4a2e      	ldr	r2, [pc, #184]	; (8000cd0 <MX_TIM3_Init+0xec>)
 8000c18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c1c:	f240 3283 	movw	r2, #899	; 0x383
 8000c20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c22:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c28:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c3c:	4823      	ldr	r0, [pc, #140]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c3e:	f005 fa09 	bl	8006054 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c48:	f000 fac8 	bl	80011dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c56:	4619      	mov	r1, r3
 8000c58:	481c      	ldr	r0, [pc, #112]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c5a:	f005 fd0d 	bl	8006678 <HAL_TIM_ConfigClockSource>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c64:	f000 faba 	bl	80011dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c68:	4818      	ldr	r0, [pc, #96]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c6a:	f005 fae2 	bl	8006232 <HAL_TIM_PWM_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c74:	f000 fab2 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c80:	f107 0320 	add.w	r3, r7, #32
 8000c84:	4619      	mov	r1, r3
 8000c86:	4811      	ldr	r0, [pc, #68]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000c88:	f006 f8c6 	bl	8006e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c92:	f000 faa3 	bl	80011dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c96:	2360      	movs	r3, #96	; 0x60
 8000c98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	220c      	movs	r2, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	4807      	ldr	r0, [pc, #28]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000cae:	f005 fc21 	bl	80064f4 <HAL_TIM_PWM_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000cb8:	f000 fa90 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <MX_TIM3_Init+0xe8>)
 8000cbe:	f000 fe43 	bl	8001948 <HAL_TIM_MspPostInit>

}
 8000cc2:	bf00      	nop
 8000cc4:	3738      	adds	r7, #56	; 0x38
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200003d0 	.word	0x200003d0
 8000cd0:	40000400 	.word	0x40000400

08000cd4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000ce4:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <MX_TIM6_Init+0x68>)
 8000ce6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000cea:	2259      	movs	r2, #89	; 0x59
 8000cec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xfffe;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000cf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000cfa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d02:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000d04:	f005 f9a6 	bl	8006054 <HAL_TIM_Base_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d0e:	f000 fa65 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000d20:	f006 f87a 	bl	8006e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d2a:	f000 fa57 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000418 	.word	0x20000418
 8000d3c:	40001000 	.word	0x40001000

08000d40 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b096      	sub	sp, #88	; 0x58
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]
 8000d6e:	615a      	str	r2, [r3, #20]
 8000d70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2220      	movs	r2, #32
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f00d fb0d 	bl	800e398 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000d80:	4a3f      	ldr	r2, [pc, #252]	; (8000e80 <MX_TIM8_Init+0x140>)
 8000d82:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1799;
 8000d84:	4b3d      	ldr	r3, [pc, #244]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000d86:	f240 7207 	movw	r2, #1799	; 0x707
 8000d8a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000d92:	4b3a      	ldr	r3, [pc, #232]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000d94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d98:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9a:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da6:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dac:	4833      	ldr	r0, [pc, #204]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000dae:	f005 f951 	bl	8006054 <HAL_TIM_Base_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000db8:	f000 fa10 	bl	80011dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000dc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	482c      	ldr	r0, [pc, #176]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000dca:	f005 fc55 	bl	8006678 <HAL_TIM_ConfigClockSource>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000dd4:	f000 fa02 	bl	80011dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000dd8:	4828      	ldr	r0, [pc, #160]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000dda:	f005 fa2a 	bl	8006232 <HAL_TIM_PWM_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000de4:	f000 f9fa 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de8:	2300      	movs	r3, #0
 8000dea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000df0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000df4:	4619      	mov	r1, r3
 8000df6:	4821      	ldr	r0, [pc, #132]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000df8:	f006 f80e 	bl	8006e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000e02:	f000 f9eb 	bl	80011dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e06:	2360      	movs	r3, #96	; 0x60
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	2204      	movs	r2, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4814      	ldr	r0, [pc, #80]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000e2c:	f005 fb62 	bl	80064f4 <HAL_TIM_PWM_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000e36:	f000 f9d1 	bl	80011dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4807      	ldr	r0, [pc, #28]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000e5e:	f006 f857 	bl	8006f10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8000e68:	f000 f9b8 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <MX_TIM8_Init+0x13c>)
 8000e6e:	f000 fd6b 	bl	8001948 <HAL_TIM_MspPostInit>

}
 8000e72:	bf00      	nop
 8000e74:	3758      	adds	r7, #88	; 0x58
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000460 	.word	0x20000460
 8000e80:	40010400 	.word	0x40010400

08000e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <MX_DMA_Init+0xa8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a26      	ldr	r2, [pc, #152]	; (8000f2c <MX_DMA_Init+0xa8>)
 8000e94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <MX_DMA_Init+0xa8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <MX_DMA_Init+0xa8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <MX_DMA_Init+0xa8>)
 8000eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_DMA_Init+0xa8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	200c      	movs	r0, #12
 8000ec8:	f001 fe20 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ecc:	200c      	movs	r0, #12
 8000ece:	f001 fe39 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2105      	movs	r1, #5
 8000ed6:	200d      	movs	r0, #13
 8000ed8:	f001 fe18 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000edc:	200d      	movs	r0, #13
 8000ede:	f001 fe31 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	2038      	movs	r0, #56	; 0x38
 8000ee8:	f001 fe10 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000eec:	2038      	movs	r0, #56	; 0x38
 8000eee:	f001 fe29 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	203a      	movs	r0, #58	; 0x3a
 8000ef8:	f001 fe08 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000efc:	203a      	movs	r0, #58	; 0x3a
 8000efe:	f001 fe21 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2105      	movs	r1, #5
 8000f06:	203b      	movs	r0, #59	; 0x3b
 8000f08:	f001 fe00 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f0c:	203b      	movs	r0, #59	; 0x3b
 8000f0e:	f001 fe19 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2105      	movs	r1, #5
 8000f16:	203c      	movs	r0, #60	; 0x3c
 8000f18:	f001 fdf8 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000f1c:	203c      	movs	r0, #60	; 0x3c
 8000f1e:	f001 fe11 	bl	8002b44 <HAL_NVIC_EnableIRQ>

}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08e      	sub	sp, #56	; 0x38
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
 8000f4a:	4b80      	ldr	r3, [pc, #512]	; (800114c <MX_GPIO_Init+0x21c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a7f      	ldr	r2, [pc, #508]	; (800114c <MX_GPIO_Init+0x21c>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b7d      	ldr	r3, [pc, #500]	; (800114c <MX_GPIO_Init+0x21c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	623b      	str	r3, [r7, #32]
 8000f60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	4b79      	ldr	r3, [pc, #484]	; (800114c <MX_GPIO_Init+0x21c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a78      	ldr	r2, [pc, #480]	; (800114c <MX_GPIO_Init+0x21c>)
 8000f6c:	f043 0320 	orr.w	r3, r3, #32
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b76      	ldr	r3, [pc, #472]	; (800114c <MX_GPIO_Init+0x21c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0320 	and.w	r3, r3, #32
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	4b72      	ldr	r3, [pc, #456]	; (800114c <MX_GPIO_Init+0x21c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a71      	ldr	r2, [pc, #452]	; (800114c <MX_GPIO_Init+0x21c>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b6f      	ldr	r3, [pc, #444]	; (800114c <MX_GPIO_Init+0x21c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	61bb      	str	r3, [r7, #24]
 8000f98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	4b6b      	ldr	r3, [pc, #428]	; (800114c <MX_GPIO_Init+0x21c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a6a      	ldr	r2, [pc, #424]	; (800114c <MX_GPIO_Init+0x21c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b68      	ldr	r3, [pc, #416]	; (800114c <MX_GPIO_Init+0x21c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b64      	ldr	r3, [pc, #400]	; (800114c <MX_GPIO_Init+0x21c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a63      	ldr	r2, [pc, #396]	; (800114c <MX_GPIO_Init+0x21c>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b61      	ldr	r3, [pc, #388]	; (800114c <MX_GPIO_Init+0x21c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b5d      	ldr	r3, [pc, #372]	; (800114c <MX_GPIO_Init+0x21c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a5c      	ldr	r2, [pc, #368]	; (800114c <MX_GPIO_Init+0x21c>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b5a      	ldr	r3, [pc, #360]	; (800114c <MX_GPIO_Init+0x21c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b56      	ldr	r3, [pc, #344]	; (800114c <MX_GPIO_Init+0x21c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a55      	ldr	r2, [pc, #340]	; (800114c <MX_GPIO_Init+0x21c>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b53      	ldr	r3, [pc, #332]	; (800114c <MX_GPIO_Init+0x21c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b4f      	ldr	r3, [pc, #316]	; (800114c <MX_GPIO_Init+0x21c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a4e      	ldr	r2, [pc, #312]	; (800114c <MX_GPIO_Init+0x21c>)
 8001014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b4c      	ldr	r3, [pc, #304]	; (800114c <MX_GPIO_Init+0x21c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FAULTRST_Pin|SEL1_Pin|SEL0_Pin|SEN_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	213c      	movs	r1, #60	; 0x3c
 800102a:	4849      	ldr	r0, [pc, #292]	; (8001150 <MX_GPIO_Init+0x220>)
 800102c:	f002 fa32 	bl	8003494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001036:	4847      	ldr	r0, [pc, #284]	; (8001154 <MX_GPIO_Init+0x224>)
 8001038:	f002 fa2c 	bl	8003494 <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001042:	4845      	ldr	r0, [pc, #276]	; (8001158 <MX_GPIO_Init+0x228>)
 8001044:	f002 fa26 	bl	8003494 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : FAULTRST_Pin SEL1_Pin SEL0_Pin SEN_Pin */
  GPIO_InitStruct.Pin = FAULTRST_Pin|SEL1_Pin|SEL0_Pin|SEN_Pin;
 8001048:	233c      	movs	r3, #60	; 0x3c
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800104c:	2311      	movs	r3, #17
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	483c      	ldr	r0, [pc, #240]	; (8001150 <MX_GPIO_Init+0x220>)
 8001060:	f002 f884 	bl	800316c <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 8001064:	230f      	movs	r3, #15
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001068:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	4838      	ldr	r0, [pc, #224]	; (800115c <MX_GPIO_Init+0x22c>)
 800107a:	f002 f877 	bl	800316c <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 800107e:	f24f 0330 	movw	r3, #61488	; 0xf030
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001084:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	4832      	ldr	r0, [pc, #200]	; (8001160 <MX_GPIO_Init+0x230>)
 8001096:	f002 f869 	bl	800316c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 800109a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010a0:	2311      	movs	r3, #17
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	4828      	ldr	r0, [pc, #160]	; (8001154 <MX_GPIO_Init+0x224>)
 80010b4:	f002 f85a 	bl	800316c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 80010b8:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010be:	2311      	movs	r3, #17
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	4821      	ldr	r0, [pc, #132]	; (8001158 <MX_GPIO_Init+0x228>)
 80010d2:	f002 f84b 	bl	800316c <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 80010d6:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010dc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	481d      	ldr	r0, [pc, #116]	; (8001164 <MX_GPIO_Init+0x234>)
 80010ee:	f002 f83d 	bl	800316c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2105      	movs	r1, #5
 80010f6:	2006      	movs	r0, #6
 80010f8:	f001 fd08 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010fc:	2006      	movs	r0, #6
 80010fe:	f001 fd21 	bl	8002b44 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2105      	movs	r1, #5
 8001106:	2007      	movs	r0, #7
 8001108:	f001 fd00 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800110c:	2007      	movs	r0, #7
 800110e:	f001 fd19 	bl	8002b44 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2105      	movs	r1, #5
 8001116:	2008      	movs	r0, #8
 8001118:	f001 fcf8 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800111c:	2008      	movs	r0, #8
 800111e:	f001 fd11 	bl	8002b44 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2105      	movs	r1, #5
 8001126:	2009      	movs	r0, #9
 8001128:	f001 fcf0 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800112c:	2009      	movs	r0, #9
 800112e:	f001 fd09 	bl	8002b44 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2105      	movs	r1, #5
 8001136:	200a      	movs	r0, #10
 8001138:	f001 fce8 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800113c:	200a      	movs	r0, #10
 800113e:	f001 fd01 	bl	8002b44 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001142:	bf00      	nop
 8001144:	3738      	adds	r7, #56	; 0x38
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40021000 	.word	0x40021000
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40021800 	.word	0x40021800
 800115c:	40021400 	.word	0x40021400
 8001160:	40020400 	.word	0x40020400
 8001164:	40020800 	.word	0x40020800

08001168 <StartSetupTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSetupTask */
void StartSetupTask(void *argument)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001170:	f00c fbac 	bl	800d8cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osThreadYield();
 8001174:	f009 fc1c 	bl	800a9b0 <osThreadYield>
 8001178:	e7fc      	b.n	8001174 <StartSetupTask+0xc>
	...

0800117c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	PDM_Data_Queue_Struct data = {.source = Interrupt_Gpio};
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
 8001194:	2303      	movs	r3, #3
 8001196:	773b      	strb	r3, [r7, #28]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 80011a2:	f000 fe1b 	bl	8001ddc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d10a      	bne.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
	  HAL_TIM_Base_Stop_IT(htim);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f005 f80f 	bl	80061d4 <HAL_TIM_Base_Stop_IT>
	  osMessageQueuePut(processQueueHandle, (void*) &data, 0, 0);
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	f107 010c 	add.w	r1, r7, #12
 80011be:	2300      	movs	r3, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	f009 fd57 	bl	800ac74 <osMessageQueuePut>
  }
  /* USER CODE END Callback 1 */
}
 80011c6:	bf00      	nop
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40014000 	.word	0x40014000
 80011d4:	40001000 	.word	0x40001000
 80011d8:	2000062c 	.word	0x2000062c

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <Error_Handler+0x8>
	...

080011e8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/*BEGIN PERIPHERAL CALLBACK FUNCTIONS*/

//Callback for received CAN messages
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(canRxSemaphoreHandle);	//Release semaphore to PDM_CAN_Thread_Receive_Data Thread
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f009 fc85 	bl	800ab04 <osSemaphoreRelease>

	return;
 80011fa:	bf00      	nop
}
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000634 	.word	0x20000634

08001208 <HAL_GPIO_EXTI_Callback>:

//Callback for input pins
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
	PDM_Data_Queue_Struct data = {.source = Interrupt_Gpio};
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]
 8001222:	2303      	movs	r3, #3
 8001224:	773b      	strb	r3, [r7, #28]

	//Send interrupt source to Readings Thread
	osMessageQueuePut(processQueueHandle, (void*) &data, 0, 0);
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_GPIO_EXTI_Callback+0x38>)
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	f107 010c 	add.w	r1, r7, #12
 800122e:	2300      	movs	r3, #0
 8001230:	2200      	movs	r2, #0
 8001232:	f009 fd1f 	bl	800ac74 <osMessageQueuePut>

	return;
 8001236:	bf00      	nop
}
 8001238:	3720      	adds	r7, #32
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000062c 	.word	0x2000062c

08001244 <HAL_TIM_PWM_PulseFinishedCallback>:

//Callback for soft start last duty cycle value update
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	uint8_t source = PROCESS_PWM_SS;
 800124c:	2310      	movs	r3, #16
 800124e:	73fb      	strb	r3, [r7, #15]

	//Send process source to Output Thread
	osMessageQueuePut(outQueueHandle, &source, 0, 0);
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f107 010f 	add.w	r1, r7, #15
 8001258:	2300      	movs	r3, #0
 800125a:	2200      	movs	r2, #0
 800125c:	f009 fd0a 	bl	800ac74 <osMessageQueuePut>

	return;
 8001260:	bf00      	nop
}
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000630 	.word	0x20000630

0800126c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_MspInit+0x54>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <HAL_MspInit+0x54>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_MspInit+0x54>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_MspInit+0x54>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_MspInit+0x54>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_MspInit+0x54>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	210f      	movs	r1, #15
 80012ae:	f06f 0001 	mvn.w	r0, #1
 80012b2:	f001 fc2b 	bl	8002b0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	; 0x30
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a6b      	ldr	r2, [pc, #428]	; (8001490 <HAL_ADC_MspInit+0x1cc>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d172      	bne.n	80013cc <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	4b6a      	ldr	r3, [pc, #424]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a69      	ldr	r2, [pc, #420]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b67      	ldr	r3, [pc, #412]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	4b63      	ldr	r3, [pc, #396]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a62      	ldr	r2, [pc, #392]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b60      	ldr	r3, [pc, #384]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a5b      	ldr	r2, [pc, #364]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b59      	ldr	r3, [pc, #356]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 800133a:	23e0      	movs	r3, #224	; 0xe0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	4852      	ldr	r0, [pc, #328]	; (8001498 <HAL_ADC_MspInit+0x1d4>)
 800134e:	f001 ff0d 	bl	800316c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ANALOG9_Pin;
 8001352:	2310      	movs	r3, #16
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	484d      	ldr	r0, [pc, #308]	; (800149c <HAL_ADC_MspInit+0x1d8>)
 8001366:	f001 ff01 	bl	800316c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800136a:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <HAL_ADC_MspInit+0x1dc>)
 800136c:	4a4d      	ldr	r2, [pc, #308]	; (80014a4 <HAL_ADC_MspInit+0x1e0>)
 800136e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001370:	4b4b      	ldr	r3, [pc, #300]	; (80014a0 <HAL_ADC_MspInit+0x1dc>)
 8001372:	2200      	movs	r2, #0
 8001374:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001376:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <HAL_ADC_MspInit+0x1dc>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800137c:	4b48      	ldr	r3, [pc, #288]	; (80014a0 <HAL_ADC_MspInit+0x1dc>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001382:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <HAL_ADC_MspInit+0x1dc>)
 8001384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001388:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800138a:	4b45      	ldr	r3, [pc, #276]	; (80014a0 <HAL_ADC_MspInit+0x1dc>)
 800138c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001390:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001392:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <HAL_ADC_MspInit+0x1dc>)
 8001394:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001398:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800139a:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <HAL_ADC_MspInit+0x1dc>)
 800139c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <HAL_ADC_MspInit+0x1dc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a8:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <HAL_ADC_MspInit+0x1dc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013ae:	483c      	ldr	r0, [pc, #240]	; (80014a0 <HAL_ADC_MspInit+0x1dc>)
 80013b0:	f001 fbf2 	bl	8002b98 <HAL_DMA_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80013ba:	f7ff ff0f 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a37      	ldr	r2, [pc, #220]	; (80014a0 <HAL_ADC_MspInit+0x1dc>)
 80013c2:	639a      	str	r2, [r3, #56]	; 0x38
 80013c4:	4a36      	ldr	r2, [pc, #216]	; (80014a0 <HAL_ADC_MspInit+0x1dc>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013ca:	e05d      	b.n	8001488 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a35      	ldr	r2, [pc, #212]	; (80014a8 <HAL_ADC_MspInit+0x1e4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d158      	bne.n	8001488 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a2d      	ldr	r2, [pc, #180]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 80013e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a26      	ldr	r2, [pc, #152]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_ADC_MspInit+0x1d0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin
 800140e:	231f      	movs	r3, #31
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001412:	2303      	movs	r3, #3
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	481d      	ldr	r0, [pc, #116]	; (8001498 <HAL_ADC_MspInit+0x1d4>)
 8001422:	f001 fea3 	bl	800316c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_ADC_MspInit+0x1e8>)
 8001428:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <HAL_ADC_MspInit+0x1ec>)
 800142a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_ADC_MspInit+0x1e8>)
 800142e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001432:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <HAL_ADC_MspInit+0x1e8>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <HAL_ADC_MspInit+0x1e8>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_ADC_MspInit+0x1e8>)
 8001442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001446:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_ADC_MspInit+0x1e8>)
 800144a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800144e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_ADC_MspInit+0x1e8>)
 8001452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001456:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <HAL_ADC_MspInit+0x1e8>)
 800145a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800145e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_ADC_MspInit+0x1e8>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_ADC_MspInit+0x1e8>)
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800146c:	480f      	ldr	r0, [pc, #60]	; (80014ac <HAL_ADC_MspInit+0x1e8>)
 800146e:	f001 fb93 	bl	8002b98 <HAL_DMA_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8001478:	f7ff feb0 	bl	80011dc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_ADC_MspInit+0x1e8>)
 8001480:	639a      	str	r2, [r3, #56]	; 0x38
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_ADC_MspInit+0x1e8>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001488:	bf00      	nop
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40012000 	.word	0x40012000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000
 800149c:	40020800 	.word	0x40020800
 80014a0:	200001fc 	.word	0x200001fc
 80014a4:	40026410 	.word	0x40026410
 80014a8:	40012100 	.word	0x40012100
 80014ac:	2000025c 	.word	0x2000025c
 80014b0:	40026440 	.word	0x40026440

080014b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1d      	ldr	r2, [pc, #116]	; (8001548 <HAL_CAN_MspInit+0x94>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d134      	bne.n	8001540 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_CAN_MspInit+0x98>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a1b      	ldr	r2, [pc, #108]	; (800154c <HAL_CAN_MspInit+0x98>)
 80014e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_CAN_MspInit+0x98>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_CAN_MspInit+0x98>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a14      	ldr	r2, [pc, #80]	; (800154c <HAL_CAN_MspInit+0x98>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_CAN_MspInit+0x98>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800150e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001520:	2309      	movs	r3, #9
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	4809      	ldr	r0, [pc, #36]	; (8001550 <HAL_CAN_MspInit+0x9c>)
 800152c:	f001 fe1e 	bl	800316c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2105      	movs	r1, #5
 8001534:	2014      	movs	r0, #20
 8001536:	f001 fae9 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800153a:	2014      	movs	r0, #20
 800153c:	f001 fb02 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40006400 	.word	0x40006400
 800154c:	40023800 	.word	0x40023800
 8001550:	40020400 	.word	0x40020400

08001554 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_CRC_MspInit+0x3c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10d      	bne.n	8001582 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_CRC_MspInit+0x40>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_CRC_MspInit+0x40>)
 8001570:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_CRC_MspInit+0x40>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023000 	.word	0x40023000
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_I2C_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12b      	bne.n	8001612 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_I2C_MspInit+0x88>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_I2C_MspInit+0x88>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_I2C_MspInit+0x88>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015d6:	23c0      	movs	r3, #192	; 0xc0
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015da:	2312      	movs	r3, #18
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e6:	2304      	movs	r3, #4
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <HAL_I2C_MspInit+0x8c>)
 80015f2:	f001 fdbb 	bl	800316c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_I2C_MspInit+0x88>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_I2C_MspInit+0x88>)
 8001600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_I2C_MspInit+0x88>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40005400 	.word	0x40005400
 8001620:	40023800 	.word	0x40023800
 8001624:	40020400 	.word	0x40020400

08001628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a8e      	ldr	r2, [pc, #568]	; (8001870 <HAL_TIM_Base_MspInit+0x248>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d15a      	bne.n	80016f0 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	4b8d      	ldr	r3, [pc, #564]	; (8001874 <HAL_TIM_Base_MspInit+0x24c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	4a8c      	ldr	r2, [pc, #560]	; (8001874 <HAL_TIM_Base_MspInit+0x24c>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6453      	str	r3, [r2, #68]	; 0x44
 800164a:	4b8a      	ldr	r3, [pc, #552]	; (8001874 <HAL_TIM_Base_MspInit+0x24c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8001656:	4b88      	ldr	r3, [pc, #544]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 8001658:	4a88      	ldr	r2, [pc, #544]	; (800187c <HAL_TIM_Base_MspInit+0x254>)
 800165a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 800165c:	4b86      	ldr	r3, [pc, #536]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 800165e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001662:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001664:	4b84      	ldr	r3, [pc, #528]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800166a:	4b83      	ldr	r3, [pc, #524]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001670:	4b81      	ldr	r3, [pc, #516]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 8001672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001676:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001678:	4b7f      	ldr	r3, [pc, #508]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 800167a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800167e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001680:	4b7d      	ldr	r3, [pc, #500]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 8001682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001686:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8001688:	4b7b      	ldr	r3, [pc, #492]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 800168e:	4b7a      	ldr	r3, [pc, #488]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001694:	4b78      	ldr	r3, [pc, #480]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 800169a:	4877      	ldr	r0, [pc, #476]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 800169c:	f001 fa7c 	bl	8002b98 <HAL_DMA_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80016a6:	f7ff fd99 	bl	80011dc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a72      	ldr	r2, [pc, #456]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
 80016b0:	4a71      	ldr	r2, [pc, #452]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a6f      	ldr	r2, [pc, #444]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38
 80016bc:	4a6e      	ldr	r2, [pc, #440]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a6c      	ldr	r2, [pc, #432]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34
 80016c8:	4a6b      	ldr	r2, [pc, #428]	; (8001878 <HAL_TIM_Base_MspInit+0x250>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 15, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	210f      	movs	r1, #15
 80016d2:	2018      	movs	r0, #24
 80016d4:	f001 fa1a 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80016d8:	2018      	movs	r0, #24
 80016da:	f001 fa33 	bl	8002b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2105      	movs	r1, #5
 80016e2:	2019      	movs	r0, #25
 80016e4:	f001 fa12 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016e8:	2019      	movs	r0, #25
 80016ea:	f001 fa2b 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80016ee:	e11e      	b.n	800192e <HAL_TIM_Base_MspInit+0x306>
  else if(htim_base->Instance==TIM2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f8:	d14c      	bne.n	8001794 <HAL_TIM_Base_MspInit+0x16c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <HAL_TIM_Base_MspInit+0x24c>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a5c      	ldr	r2, [pc, #368]	; (8001874 <HAL_TIM_Base_MspInit+0x24c>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b5a      	ldr	r3, [pc, #360]	; (8001874 <HAL_TIM_Base_MspInit+0x24c>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8001716:	4b5a      	ldr	r3, [pc, #360]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 8001718:	4a5a      	ldr	r2, [pc, #360]	; (8001884 <HAL_TIM_Base_MspInit+0x25c>)
 800171a:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 800171c:	4b58      	ldr	r3, [pc, #352]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 800171e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001722:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001724:	4b56      	ldr	r3, [pc, #344]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800172a:	4b55      	ldr	r3, [pc, #340]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001730:	4b53      	ldr	r3, [pc, #332]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 8001732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001736:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001738:	4b51      	ldr	r3, [pc, #324]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 800173a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800173e:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001740:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 8001742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001746:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 8001748:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800174e:	4b4c      	ldr	r3, [pc, #304]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001754:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 800175a:	4849      	ldr	r0, [pc, #292]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 800175c:	f001 fa1c 	bl	8002b98 <HAL_DMA_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_TIM_Base_MspInit+0x142>
      Error_Handler();
 8001766:	f7ff fd39 	bl	80011dc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a44      	ldr	r2, [pc, #272]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 800176e:	621a      	str	r2, [r3, #32]
 8001770:	4a43      	ldr	r2, [pc, #268]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a41      	ldr	r2, [pc, #260]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
 800177c:	4a40      	ldr	r2, [pc, #256]	; (8001880 <HAL_TIM_Base_MspInit+0x258>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2105      	movs	r1, #5
 8001786:	201c      	movs	r0, #28
 8001788:	f001 f9c0 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800178c:	201c      	movs	r0, #28
 800178e:	f001 f9d9 	bl	8002b44 <HAL_NVIC_EnableIRQ>
}
 8001792:	e0cc      	b.n	800192e <HAL_TIM_Base_MspInit+0x306>
  else if(htim_base->Instance==TIM3)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a3b      	ldr	r2, [pc, #236]	; (8001888 <HAL_TIM_Base_MspInit+0x260>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d14c      	bne.n	8001838 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <HAL_TIM_Base_MspInit+0x24c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a33      	ldr	r2, [pc, #204]	; (8001874 <HAL_TIM_Base_MspInit+0x24c>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <HAL_TIM_Base_MspInit+0x24c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 80017bc:	4a34      	ldr	r2, [pc, #208]	; (8001890 <HAL_TIM_Base_MspInit+0x268>)
 80017be:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 80017c0:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 80017c2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80017c6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ce:	4b2f      	ldr	r3, [pc, #188]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 80017d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017da:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 80017de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 80017e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ea:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80017ec:	4b27      	ldr	r3, [pc, #156]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80017fe:	4823      	ldr	r0, [pc, #140]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 8001800:	f001 f9ca 	bl	8002b98 <HAL_DMA_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_TIM_Base_MspInit+0x1e6>
      Error_Handler();
 800180a:	f7ff fce7 	bl	80011dc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a1e      	ldr	r2, [pc, #120]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
 8001814:	4a1d      	ldr	r2, [pc, #116]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1b      	ldr	r2, [pc, #108]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 800181e:	621a      	str	r2, [r3, #32]
 8001820:	4a1a      	ldr	r2, [pc, #104]	; (800188c <HAL_TIM_Base_MspInit+0x264>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2105      	movs	r1, #5
 800182a:	201d      	movs	r0, #29
 800182c:	f001 f96e 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001830:	201d      	movs	r0, #29
 8001832:	f001 f987 	bl	8002b44 <HAL_NVIC_EnableIRQ>
}
 8001836:	e07a      	b.n	800192e <HAL_TIM_Base_MspInit+0x306>
  else if(htim_base->Instance==TIM6)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a15      	ldr	r2, [pc, #84]	; (8001894 <HAL_TIM_Base_MspInit+0x26c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d12a      	bne.n	8001898 <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_TIM_Base_MspInit+0x24c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_TIM_Base_MspInit+0x24c>)
 800184c:	f043 0310 	orr.w	r3, r3, #16
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_TIM_Base_MspInit+0x24c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2105      	movs	r1, #5
 8001862:	2036      	movs	r0, #54	; 0x36
 8001864:	f001 f952 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001868:	2036      	movs	r0, #54	; 0x36
 800186a:	f001 f96b 	bl	8002b44 <HAL_NVIC_EnableIRQ>
}
 800186e:	e05e      	b.n	800192e <HAL_TIM_Base_MspInit+0x306>
 8001870:	40010000 	.word	0x40010000
 8001874:	40023800 	.word	0x40023800
 8001878:	200004a8 	.word	0x200004a8
 800187c:	40026470 	.word	0x40026470
 8001880:	20000508 	.word	0x20000508
 8001884:	40026028 	.word	0x40026028
 8001888:	40000400 	.word	0x40000400
 800188c:	20000568 	.word	0x20000568
 8001890:	40026040 	.word	0x40026040
 8001894:	40001000 	.word	0x40001000
  else if(htim_base->Instance==TIM8)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a26      	ldr	r2, [pc, #152]	; (8001938 <HAL_TIM_Base_MspInit+0x310>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d145      	bne.n	800192e <HAL_TIM_Base_MspInit+0x306>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_TIM_Base_MspInit+0x314>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a24      	ldr	r2, [pc, #144]	; (800193c <HAL_TIM_Base_MspInit+0x314>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <HAL_TIM_Base_MspInit+0x314>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch2.Instance = DMA2_Stream3;
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_TIM_Base_MspInit+0x318>)
 80018c0:	4a20      	ldr	r2, [pc, #128]	; (8001944 <HAL_TIM_Base_MspInit+0x31c>)
 80018c2:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Channel = DMA_CHANNEL_7;
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <HAL_TIM_Base_MspInit+0x318>)
 80018c6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80018ca:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_TIM_Base_MspInit+0x318>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_TIM_Base_MspInit+0x318>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_TIM_Base_MspInit+0x318>)
 80018da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018de:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_TIM_Base_MspInit+0x318>)
 80018e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018e6:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_TIM_Base_MspInit+0x318>)
 80018ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ee:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_TIM_Base_MspInit+0x318>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_TIM_Base_MspInit+0x318>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_TIM_Base_MspInit+0x318>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8001902:	480f      	ldr	r0, [pc, #60]	; (8001940 <HAL_TIM_Base_MspInit+0x318>)
 8001904:	f001 f948 	bl	8002b98 <HAL_DMA_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_TIM_Base_MspInit+0x2ea>
      Error_Handler();
 800190e:	f7ff fc65 	bl	80011dc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_TIM_Base_MspInit+0x318>)
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
 8001918:	4a09      	ldr	r2, [pc, #36]	; (8001940 <HAL_TIM_Base_MspInit+0x318>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2105      	movs	r1, #5
 8001922:	202c      	movs	r0, #44	; 0x2c
 8001924:	f001 f8f2 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001928:	202c      	movs	r0, #44	; 0x2c
 800192a:	f001 f90b 	bl	8002b44 <HAL_NVIC_EnableIRQ>
}
 800192e:	bf00      	nop
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40010400 	.word	0x40010400
 800193c:	40023800 	.word	0x40023800
 8001940:	200005c8 	.word	0x200005c8
 8001944:	40026458 	.word	0x40026458

08001948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	; 0x30
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a49      	ldr	r2, [pc, #292]	; (8001a8c <HAL_TIM_MspPostInit+0x144>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d11f      	bne.n	80019aa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	4b48      	ldr	r3, [pc, #288]	; (8001a90 <HAL_TIM_MspPostInit+0x148>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a47      	ldr	r2, [pc, #284]	; (8001a90 <HAL_TIM_MspPostInit+0x148>)
 8001974:	f043 0310 	orr.w	r3, r3, #16
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b45      	ldr	r3, [pc, #276]	; (8001a90 <HAL_TIM_MspPostInit+0x148>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 8001986:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800198c:	2312      	movs	r3, #18
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001998:	2301      	movs	r3, #1
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	483c      	ldr	r0, [pc, #240]	; (8001a94 <HAL_TIM_MspPostInit+0x14c>)
 80019a4:	f001 fbe2 	bl	800316c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80019a8:	e06b      	b.n	8001a82 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b2:	d11f      	bne.n	80019f4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <HAL_TIM_MspPostInit+0x148>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	4a34      	ldr	r2, [pc, #208]	; (8001a90 <HAL_TIM_MspPostInit+0x148>)
 80019be:	f043 0302 	orr.w	r3, r3, #2
 80019c2:	6313      	str	r3, [r2, #48]	; 0x30
 80019c4:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <HAL_TIM_MspPostInit+0x148>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 80019d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d6:	2312      	movs	r3, #18
 80019d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019e2:	2301      	movs	r3, #1
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	482a      	ldr	r0, [pc, #168]	; (8001a98 <HAL_TIM_MspPostInit+0x150>)
 80019ee:	f001 fbbd 	bl	800316c <HAL_GPIO_Init>
}
 80019f2:	e046      	b.n	8001a82 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a28      	ldr	r2, [pc, #160]	; (8001a9c <HAL_TIM_MspPostInit+0x154>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d11e      	bne.n	8001a3c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <HAL_TIM_MspPostInit+0x148>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <HAL_TIM_MspPostInit+0x148>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_TIM_MspPostInit+0x148>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1e:	2312      	movs	r3, #18
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4818      	ldr	r0, [pc, #96]	; (8001a98 <HAL_TIM_MspPostInit+0x150>)
 8001a36:	f001 fb99 	bl	800316c <HAL_GPIO_Init>
}
 8001a3a:	e022      	b.n	8001a82 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_TIM_MspPostInit+0x158>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d11d      	bne.n	8001a82 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_TIM_MspPostInit+0x148>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <HAL_TIM_MspPostInit+0x148>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_TIM_MspPostInit+0x148>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 8001a62:	2301      	movs	r3, #1
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a66:	2312      	movs	r3, #18
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a72:	2303      	movs	r3, #3
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4806      	ldr	r0, [pc, #24]	; (8001a98 <HAL_TIM_MspPostInit+0x150>)
 8001a7e:	f001 fb75 	bl	800316c <HAL_GPIO_Init>
}
 8001a82:	bf00      	nop
 8001a84:	3730      	adds	r7, #48	; 0x30
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	; 0x30
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_InitTick+0xd4>)
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	4a2e      	ldr	r2, [pc, #184]	; (8001b78 <HAL_InitTick+0xd4>)
 8001abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac4:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <HAL_InitTick+0xd4>)
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ad0:	f107 020c 	add.w	r2, r7, #12
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fa90 	bl	8005000 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ae0:	f003 fa7a 	bl	8004fd8 <HAL_RCC_GetPCLK2Freq>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aec:	4a23      	ldr	r2, [pc, #140]	; (8001b7c <HAL_InitTick+0xd8>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0c9b      	lsrs	r3, r3, #18
 8001af4:	3b01      	subs	r3, #1
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_InitTick+0xdc>)
 8001afa:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <HAL_InitTick+0xe0>)
 8001afc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_InitTick+0xdc>)
 8001b00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b04:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001b06:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <HAL_InitTick+0xdc>)
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_InitTick+0xdc>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_InitTick+0xdc>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_InitTick+0xdc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001b1e:	4818      	ldr	r0, [pc, #96]	; (8001b80 <HAL_InitTick+0xdc>)
 8001b20:	f004 fa98 	bl	8006054 <HAL_TIM_Base_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d11b      	bne.n	8001b6a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001b32:	4813      	ldr	r0, [pc, #76]	; (8001b80 <HAL_InitTick+0xdc>)
 8001b34:	f004 fade 	bl	80060f4 <HAL_TIM_Base_Start_IT>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d111      	bne.n	8001b6a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b46:	2018      	movs	r0, #24
 8001b48:	f000 fffc 	bl	8002b44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	d808      	bhi.n	8001b64 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001b52:	2200      	movs	r2, #0
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	2018      	movs	r0, #24
 8001b58:	f000 ffd8 	bl	8002b0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_InitTick+0xe4>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e002      	b.n	8001b6a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3730      	adds	r7, #48	; 0x30
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	431bde83 	.word	0x431bde83
 8001b80:	20000640 	.word	0x20000640
 8001b84:	40014000 	.word	0x40014000
 8001b88:	20000004 	.word	0x20000004

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <NMI_Handler+0x4>

08001b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <MemManage_Handler+0x4>

08001b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT1_Pin);
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f001 fc83 	bl	80034c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT2_Pin);
 8001bca:	2002      	movs	r0, #2
 8001bcc:	f001 fc7c 	bl	80034c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT3_Pin);
 8001bd8:	2004      	movs	r0, #4
 8001bda:	f001 fc75 	bl	80034c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT4_Pin);
 8001be6:	2008      	movs	r0, #8
 8001be8:	f001 fc6e 	bl	80034c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT5_Pin);
 8001bf4:	2010      	movs	r0, #16
 8001bf6:	f001 fc67 	bl	80034c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <DMA1_Stream1_IRQHandler+0x10>)
 8001c06:	f001 f875 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000508 	.word	0x20000508

08001c14 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <DMA1_Stream2_IRQHandler+0x10>)
 8001c1a:	f001 f86b 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000568 	.word	0x20000568

08001c28 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <CAN1_RX0_IRQHandler+0x10>)
 8001c2e:	f000 fc86 	bl	800253e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200002bc 	.word	0x200002bc

08001c3c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c40:	4803      	ldr	r0, [pc, #12]	; (8001c50 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001c42:	f004 fb4f 	bl	80062e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001c46:	4803      	ldr	r0, [pc, #12]	; (8001c54 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001c48:	f004 fb4c 	bl	80062e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000340 	.word	0x20000340
 8001c54:	20000640 	.word	0x20000640

08001c58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c5e:	f004 fb41 	bl	80062e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000340 	.word	0x20000340

08001c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <TIM2_IRQHandler+0x10>)
 8001c72:	f004 fb37 	bl	80062e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000388 	.word	0x20000388

08001c80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <TIM3_IRQHandler+0x10>)
 8001c86:	f004 fb2d 	bl	80062e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200003d0 	.word	0x200003d0

08001c94 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001c9a:	f004 fb23 	bl	80062e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000460 	.word	0x20000460

08001ca8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <TIM6_DAC_IRQHandler+0x10>)
 8001cae:	f004 fb19 	bl	80062e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000418 	.word	0x20000418

08001cbc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <DMA2_Stream0_IRQHandler+0x10>)
 8001cc2:	f001 f817 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200001fc 	.word	0x200001fc

08001cd0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <DMA2_Stream2_IRQHandler+0x10>)
 8001cd6:	f001 f80d 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000025c 	.word	0x2000025c

08001ce4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <DMA2_Stream3_IRQHandler+0x10>)
 8001cea:	f001 f803 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200005c8 	.word	0x200005c8

08001cf8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <DMA2_Stream4_IRQHandler+0x10>)
 8001cfe:	f000 fff9 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200004a8 	.word	0x200004a8

08001d0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <OTG_FS_IRQHandler+0x10>)
 8001d12:	f001 fe8c 	bl	8003a2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20006554 	.word	0x20006554

08001d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <SystemInit+0x20>)
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <SystemInit+0x20>)
 8001d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d4a:	490e      	ldr	r1, [pc, #56]	; (8001d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d50:	e002      	b.n	8001d58 <LoopCopyDataInit>

08001d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d56:	3304      	adds	r3, #4

08001d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d5c:	d3f9      	bcc.n	8001d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d60:	4c0b      	ldr	r4, [pc, #44]	; (8001d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d64:	e001      	b.n	8001d6a <LoopFillZerobss>

08001d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d68:	3204      	adds	r2, #4

08001d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d6c:	d3fb      	bcc.n	8001d66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d6e:	f7ff ffd7 	bl	8001d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d72:	f00c fb6f 	bl	800e454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d76:	f7fe fbc9 	bl	800050c <main>
  bx  lr    
 8001d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d84:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001d88:	0800e6b0 	.word	0x0800e6b0
  ldr r2, =_sbss
 8001d8c:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001d90:	20006dc0 	.word	0x20006dc0

08001d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d94:	e7fe      	b.n	8001d94 <ADC_IRQHandler>
	...

08001d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_Init+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <HAL_Init+0x40>)
 8001da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_Init+0x40>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_Init+0x40>)
 8001dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_Init+0x40>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_Init+0x40>)
 8001dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f000 fe98 	bl	8002af6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f7ff fe6c 	bl	8001aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dcc:	f7ff fa4e 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023c00 	.word	0x40023c00

08001ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_IncTick+0x20>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_IncTick+0x24>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <HAL_IncTick+0x24>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	20000688 	.word	0x20000688

08001e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <HAL_GetTick+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000688 	.word	0x20000688

08001e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff ffee 	bl	8001e04 <HAL_GetTick>
 8001e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d005      	beq.n	8001e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_Delay+0x44>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e42:	bf00      	nop
 8001e44:	f7ff ffde 	bl	8001e04 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f7      	bhi.n	8001e44 <HAL_Delay+0x28>
  {
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008

08001e64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e033      	b.n	8001ee2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fa1e 	bl	80012c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d118      	bne.n	8001ed4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eaa:	f023 0302 	bic.w	r3, r3, #2
 8001eae:	f043 0202 	orr.w	r2, r3, #2
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f94a 	bl	8002150 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed2:	e001      	b.n	8001ed8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1c>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e113      	b.n	8002130 <HAL_ADC_ConfigChannel+0x244>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d925      	bls.n	8001f64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68d9      	ldr	r1, [r3, #12]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b1e      	subs	r3, #30
 8001f2e:	2207      	movs	r2, #7
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43da      	mvns	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68d9      	ldr	r1, [r3, #12]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	4603      	mov	r3, r0
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4403      	add	r3, r0
 8001f56:	3b1e      	subs	r3, #30
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	e022      	b.n	8001faa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6919      	ldr	r1, [r3, #16]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	2207      	movs	r2, #7
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	400a      	ands	r2, r1
 8001f86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6919      	ldr	r1, [r3, #16]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4403      	add	r3, r0
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d824      	bhi.n	8001ffc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b05      	subs	r3, #5
 8001fc4:	221f      	movs	r2, #31
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	3b05      	subs	r3, #5
 8001fee:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8001ffa:	e04c      	b.n	8002096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b0c      	cmp	r3, #12
 8002002:	d824      	bhi.n	800204e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	3b23      	subs	r3, #35	; 0x23
 8002016:	221f      	movs	r2, #31
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43da      	mvns	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	400a      	ands	r2, r1
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4618      	mov	r0, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3b23      	subs	r3, #35	; 0x23
 8002040:	fa00 f203 	lsl.w	r2, r0, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
 800204c:	e023      	b.n	8002096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	3b41      	subs	r3, #65	; 0x41
 8002060:	221f      	movs	r2, #31
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	400a      	ands	r2, r1
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	3b41      	subs	r3, #65	; 0x41
 800208a:	fa00 f203 	lsl.w	r2, r0, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <HAL_ADC_ConfigChannel+0x250>)
 8002098:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a28      	ldr	r2, [pc, #160]	; (8002140 <HAL_ADC_ConfigChannel+0x254>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d10f      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1d8>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b12      	cmp	r3, #18
 80020aa:	d10b      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <HAL_ADC_ConfigChannel+0x254>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d12b      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x23a>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <HAL_ADC_ConfigChannel+0x258>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x1f4>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b11      	cmp	r3, #17
 80020de:	d122      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a11      	ldr	r2, [pc, #68]	; (8002144 <HAL_ADC_ConfigChannel+0x258>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d111      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_ADC_ConfigChannel+0x25c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a11      	ldr	r2, [pc, #68]	; (800214c <HAL_ADC_ConfigChannel+0x260>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	0c9a      	lsrs	r2, r3, #18
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002118:	e002      	b.n	8002120 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3b01      	subs	r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f9      	bne.n	800211a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40012300 	.word	0x40012300
 8002140:	40012000 	.word	0x40012000
 8002144:	10000012 	.word	0x10000012
 8002148:	20000000 	.word	0x20000000
 800214c:	431bde83 	.word	0x431bde83

08002150 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002158:	4b79      	ldr	r3, [pc, #484]	; (8002340 <ADC_Init+0x1f0>)
 800215a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	431a      	orrs	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	021a      	lsls	r2, r3, #8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6899      	ldr	r1, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	4a58      	ldr	r2, [pc, #352]	; (8002344 <ADC_Init+0x1f4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d022      	beq.n	800222e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6899      	ldr	r1, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6899      	ldr	r1, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	e00f      	b.n	800224e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800223c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800224c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0202 	bic.w	r2, r2, #2
 800225c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7e1b      	ldrb	r3, [r3, #24]
 8002268:	005a      	lsls	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800228a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800229a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6859      	ldr	r1, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	3b01      	subs	r3, #1
 80022a8:	035a      	lsls	r2, r3, #13
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	e007      	b.n	80022c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	3b01      	subs	r3, #1
 80022e0:	051a      	lsls	r2, r3, #20
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6899      	ldr	r1, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002306:	025a      	lsls	r2, r3, #9
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6899      	ldr	r1, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	029a      	lsls	r2, r3, #10
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	609a      	str	r2, [r3, #8]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40012300 	.word	0x40012300
 8002344:	0f000001 	.word	0x0f000001

08002348 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0ed      	b.n	8002536 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff f8a4 	bl	80014b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800237c:	f7ff fd42 	bl	8001e04 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002382:	e012      	b.n	80023aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002384:	f7ff fd3e 	bl	8001e04 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b0a      	cmp	r3, #10
 8002390:	d90b      	bls.n	80023aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2205      	movs	r2, #5
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0c5      	b.n	8002536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0e5      	beq.n	8002384 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0202 	bic.w	r2, r2, #2
 80023c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c8:	f7ff fd1c 	bl	8001e04 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ce:	e012      	b.n	80023f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023d0:	f7ff fd18 	bl	8001e04 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b0a      	cmp	r3, #10
 80023dc:	d90b      	bls.n	80023f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2205      	movs	r2, #5
 80023ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e09f      	b.n	8002536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e5      	bne.n	80023d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e1b      	ldrb	r3, [r3, #24]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d108      	bne.n	800241e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e007      	b.n	800242e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7e5b      	ldrb	r3, [r3, #25]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e007      	b.n	8002458 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002456:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7e9b      	ldrb	r3, [r3, #26]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d108      	bne.n	8002472 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e007      	b.n	8002482 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0220 	bic.w	r2, r2, #32
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7edb      	ldrb	r3, [r3, #27]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d108      	bne.n	800249c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0210 	bic.w	r2, r2, #16
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e007      	b.n	80024ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0210 	orr.w	r2, r2, #16
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7f1b      	ldrb	r3, [r3, #28]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d108      	bne.n	80024c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0208 	orr.w	r2, r2, #8
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e007      	b.n	80024d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0208 	bic.w	r2, r2, #8
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7f5b      	ldrb	r3, [r3, #29]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0204 	orr.w	r2, r2, #4
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e007      	b.n	8002500 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0204 	bic.w	r2, r2, #4
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	ea42 0103 	orr.w	r1, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b08a      	sub	sp, #40	; 0x28
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d07c      	beq.n	800267e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d023      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2201      	movs	r2, #1
 8002594:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f983 	bl	80028ac <HAL_CAN_TxMailbox0CompleteCallback>
 80025a6:	e016      	b.n	80025d6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ba:	e00c      	b.n	80025d6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
 80025ce:	e002      	b.n	80025d6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f989 	bl	80028e8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d024      	beq.n	800262a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f963 	bl	80028c0 <HAL_CAN_TxMailbox1CompleteCallback>
 80025fa:	e016      	b.n	800262a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
 800260e:	e00c      	b.n	800262a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002616:	2b00      	cmp	r3, #0
 8002618:	d004      	beq.n	8002624 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
 8002622:	e002      	b.n	800262a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f969 	bl	80028fc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d024      	beq.n	800267e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800263c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f943 	bl	80028d4 <HAL_CAN_TxMailbox2CompleteCallback>
 800264e:	e016      	b.n	800267e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
 8002662:	e00c      	b.n	800267e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
 8002676:	e002      	b.n	800267e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f949 	bl	8002910 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00c      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002698:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2210      	movs	r2, #16
 80026a0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2208      	movs	r2, #8
 80026bc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f930 	bl	8002924 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7fe fd83 	bl	80011e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00c      	beq.n	8002706 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2210      	movs	r2, #16
 8002704:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00b      	beq.n	8002728 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d006      	beq.n	8002728 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2208      	movs	r2, #8
 8002720:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f912 	bl	800294c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f8f9 	bl	8002938 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	d006      	beq.n	8002768 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2210      	movs	r2, #16
 8002760:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8fc 	bl	8002960 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2208      	movs	r2, #8
 8002782:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f8f5 	bl	8002974 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d07b      	beq.n	800288c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d072      	beq.n	8002884 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d043      	beq.n	8002884 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002802:	2b00      	cmp	r3, #0
 8002804:	d03e      	beq.n	8002884 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800280c:	2b60      	cmp	r3, #96	; 0x60
 800280e:	d02b      	beq.n	8002868 <HAL_CAN_IRQHandler+0x32a>
 8002810:	2b60      	cmp	r3, #96	; 0x60
 8002812:	d82e      	bhi.n	8002872 <HAL_CAN_IRQHandler+0x334>
 8002814:	2b50      	cmp	r3, #80	; 0x50
 8002816:	d022      	beq.n	800285e <HAL_CAN_IRQHandler+0x320>
 8002818:	2b50      	cmp	r3, #80	; 0x50
 800281a:	d82a      	bhi.n	8002872 <HAL_CAN_IRQHandler+0x334>
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d019      	beq.n	8002854 <HAL_CAN_IRQHandler+0x316>
 8002820:	2b40      	cmp	r3, #64	; 0x40
 8002822:	d826      	bhi.n	8002872 <HAL_CAN_IRQHandler+0x334>
 8002824:	2b30      	cmp	r3, #48	; 0x30
 8002826:	d010      	beq.n	800284a <HAL_CAN_IRQHandler+0x30c>
 8002828:	2b30      	cmp	r3, #48	; 0x30
 800282a:	d822      	bhi.n	8002872 <HAL_CAN_IRQHandler+0x334>
 800282c:	2b10      	cmp	r3, #16
 800282e:	d002      	beq.n	8002836 <HAL_CAN_IRQHandler+0x2f8>
 8002830:	2b20      	cmp	r3, #32
 8002832:	d005      	beq.n	8002840 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002834:	e01d      	b.n	8002872 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	f043 0308 	orr.w	r3, r3, #8
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800283e:	e019      	b.n	8002874 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002848:	e014      	b.n	8002874 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	f043 0320 	orr.w	r3, r3, #32
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002852:	e00f      	b.n	8002874 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800285c:	e00a      	b.n	8002874 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002866:	e005      	b.n	8002874 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002870:	e000      	b.n	8002874 <HAL_CAN_IRQHandler+0x336>
            break;
 8002872:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002882:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2204      	movs	r2, #4
 800288a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	2b00      	cmp	r3, #0
 8002890:	d008      	beq.n	80028a4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f872 	bl	8002988 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028a4:	bf00      	nop
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ce:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	60d3      	str	r3, [r2, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <__NVIC_GetPriorityGrouping+0x18>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 0307 	and.w	r3, r3, #7
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	db0b      	blt.n	8002a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4907      	ldr	r1, [pc, #28]	; (8002a38 <__NVIC_EnableIRQ+0x38>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2001      	movs	r0, #1
 8002a22:	fa00 f202 	lsl.w	r2, r0, r2
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db0a      	blt.n	8002a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	490c      	ldr	r1, [pc, #48]	; (8002a88 <__NVIC_SetPriority+0x4c>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a64:	e00a      	b.n	8002a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4908      	ldr	r1, [pc, #32]	; (8002a8c <__NVIC_SetPriority+0x50>)
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	3b04      	subs	r3, #4
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	440b      	add	r3, r1
 8002a7a:	761a      	strb	r2, [r3, #24]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000e100 	.word	0xe000e100
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f1c3 0307 	rsb	r3, r3, #7
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	bf28      	it	cs
 8002aae:	2304      	movcs	r3, #4
 8002ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d902      	bls.n	8002ac0 <NVIC_EncodePriority+0x30>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3b03      	subs	r3, #3
 8002abe:	e000      	b.n	8002ac2 <NVIC_EncodePriority+0x32>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43d9      	mvns	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	4313      	orrs	r3, r2
         );
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ff4c 	bl	800299c <__NVIC_SetPriorityGrouping>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b1e:	f7ff ff61 	bl	80029e4 <__NVIC_GetPriorityGrouping>
 8002b22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	6978      	ldr	r0, [r7, #20]
 8002b2a:	f7ff ffb1 	bl	8002a90 <NVIC_EncodePriority>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff80 	bl	8002a3c <__NVIC_SetPriority>
}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff54 	bl	8002a00 <__NVIC_EnableIRQ>
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00e      	b.n	8002b90 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	795b      	ldrb	r3, [r3, #5]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe fce6 	bl	8001554 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ba4:	f7ff f92e 	bl	8001e04 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e099      	b.n	8002ce8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bd4:	e00f      	b.n	8002bf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bd6:	f7ff f915 	bl	8001e04 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b05      	cmp	r3, #5
 8002be2:	d908      	bls.n	8002bf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2203      	movs	r2, #3
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e078      	b.n	8002ce8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e8      	bne.n	8002bd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4b38      	ldr	r3, [pc, #224]	; (8002cf0 <HAL_DMA_Init+0x158>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d107      	bne.n	8002c60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f023 0307 	bic.w	r3, r3, #7
 8002c76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d117      	bne.n	8002cba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00e      	beq.n	8002cba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f9e9 	bl	8003074 <DMA_CheckFifoParam>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2240      	movs	r2, #64	; 0x40
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e016      	b.n	8002ce8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f9a0 	bl	8003008 <DMA_CalcBaseAndBitshift>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	223f      	movs	r2, #63	; 0x3f
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	f010803f 	.word	0xf010803f

08002cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d00:	4b8e      	ldr	r3, [pc, #568]	; (8002f3c <HAL_DMA_IRQHandler+0x248>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a8e      	ldr	r2, [pc, #568]	; (8002f40 <HAL_DMA_IRQHandler+0x24c>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	0a9b      	lsrs	r3, r3, #10
 8002d0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1e:	2208      	movs	r2, #8
 8002d20:	409a      	lsls	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d01a      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d013      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0204 	bic.w	r2, r2, #4
 8002d46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f043 0201 	orr.w	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	2201      	movs	r2, #1
 8002d66:	409a      	lsls	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d012      	beq.n	8002d96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	2201      	movs	r2, #1
 8002d84:	409a      	lsls	r2, r3
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	f043 0202 	orr.w	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d012      	beq.n	8002dcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00b      	beq.n	8002dcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db8:	2204      	movs	r2, #4
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	f043 0204 	orr.w	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d043      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d03c      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dee:	2210      	movs	r2, #16
 8002df0:	409a      	lsls	r2, r3
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d018      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d108      	bne.n	8002e24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d024      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
 8002e22:	e01f      	b.n	8002e64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01b      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4798      	blx	r3
 8002e34:	e016      	b.n	8002e64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d107      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0208 	bic.w	r2, r2, #8
 8002e52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	2220      	movs	r2, #32
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 808f 	beq.w	8002f94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8087 	beq.w	8002f94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d136      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0216 	bic.w	r2, r2, #22
 8002eac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695a      	ldr	r2, [r3, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ebc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d103      	bne.n	8002ece <HAL_DMA_IRQHandler+0x1da>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0208 	bic.w	r2, r2, #8
 8002edc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee2:	223f      	movs	r2, #63	; 0x3f
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d07e      	beq.n	8003000 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	4798      	blx	r3
        }
        return;
 8002f0a:	e079      	b.n	8003000 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01d      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10d      	bne.n	8002f44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d031      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	4798      	blx	r3
 8002f38:	e02c      	b.n	8002f94 <HAL_DMA_IRQHandler+0x2a0>
 8002f3a:	bf00      	nop
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d023      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	4798      	blx	r3
 8002f54:	e01e      	b.n	8002f94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10f      	bne.n	8002f84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0210 	bic.w	r2, r2, #16
 8002f72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d032      	beq.n	8003002 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d022      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2205      	movs	r2, #5
 8002fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d307      	bcc.n	8002fdc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f2      	bne.n	8002fc0 <HAL_DMA_IRQHandler+0x2cc>
 8002fda:	e000      	b.n	8002fde <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fdc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
 8002ffe:	e000      	b.n	8003002 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003000:	bf00      	nop
    }
  }
}
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3b10      	subs	r3, #16
 8003018:	4a14      	ldr	r2, [pc, #80]	; (800306c <DMA_CalcBaseAndBitshift+0x64>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003022:	4a13      	ldr	r2, [pc, #76]	; (8003070 <DMA_CalcBaseAndBitshift+0x68>)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4413      	add	r3, r2
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b03      	cmp	r3, #3
 8003034:	d909      	bls.n	800304a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800303e:	f023 0303 	bic.w	r3, r3, #3
 8003042:	1d1a      	adds	r2, r3, #4
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	659a      	str	r2, [r3, #88]	; 0x58
 8003048:	e007      	b.n	800305a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003052:	f023 0303 	bic.w	r3, r3, #3
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	aaaaaaab 	.word	0xaaaaaaab
 8003070:	0800e698 	.word	0x0800e698

08003074 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d11f      	bne.n	80030ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d856      	bhi.n	8003142 <DMA_CheckFifoParam+0xce>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <DMA_CheckFifoParam+0x28>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030bf 	.word	0x080030bf
 80030a4:	080030ad 	.word	0x080030ad
 80030a8:	08003143 	.word	0x08003143
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d046      	beq.n	8003146 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030bc:	e043      	b.n	8003146 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030c6:	d140      	bne.n	800314a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030cc:	e03d      	b.n	800314a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d6:	d121      	bne.n	800311c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d837      	bhi.n	800314e <DMA_CheckFifoParam+0xda>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <DMA_CheckFifoParam+0x70>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	080030f5 	.word	0x080030f5
 80030e8:	080030fb 	.word	0x080030fb
 80030ec:	080030f5 	.word	0x080030f5
 80030f0:	0800310d 	.word	0x0800310d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      break;
 80030f8:	e030      	b.n	800315c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d025      	beq.n	8003152 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800310a:	e022      	b.n	8003152 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003114:	d11f      	bne.n	8003156 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800311a:	e01c      	b.n	8003156 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d903      	bls.n	800312a <DMA_CheckFifoParam+0xb6>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d003      	beq.n	8003130 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003128:	e018      	b.n	800315c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
      break;
 800312e:	e015      	b.n	800315c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00e      	beq.n	800315a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
      break;
 8003140:	e00b      	b.n	800315a <DMA_CheckFifoParam+0xe6>
      break;
 8003142:	bf00      	nop
 8003144:	e00a      	b.n	800315c <DMA_CheckFifoParam+0xe8>
      break;
 8003146:	bf00      	nop
 8003148:	e008      	b.n	800315c <DMA_CheckFifoParam+0xe8>
      break;
 800314a:	bf00      	nop
 800314c:	e006      	b.n	800315c <DMA_CheckFifoParam+0xe8>
      break;
 800314e:	bf00      	nop
 8003150:	e004      	b.n	800315c <DMA_CheckFifoParam+0xe8>
      break;
 8003152:	bf00      	nop
 8003154:	e002      	b.n	800315c <DMA_CheckFifoParam+0xe8>
      break;   
 8003156:	bf00      	nop
 8003158:	e000      	b.n	800315c <DMA_CheckFifoParam+0xe8>
      break;
 800315a:	bf00      	nop
    }
  } 
  
  return status; 
 800315c:	7bfb      	ldrb	r3, [r7, #15]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop

0800316c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	e165      	b.n	8003454 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003188:	2201      	movs	r2, #1
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	f040 8154 	bne.w	800344e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d005      	beq.n	80031be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d130      	bne.n	8003220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	2203      	movs	r2, #3
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f4:	2201      	movs	r2, #1
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 0201 	and.w	r2, r3, #1
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	2b03      	cmp	r3, #3
 800322a:	d017      	beq.n	800325c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d123      	bne.n	80032b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	08da      	lsrs	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3208      	adds	r2, #8
 8003270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	220f      	movs	r2, #15
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	08da      	lsrs	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3208      	adds	r2, #8
 80032aa:	69b9      	ldr	r1, [r7, #24]
 80032ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2203      	movs	r2, #3
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0203 	and.w	r2, r3, #3
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80ae 	beq.w	800344e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	4b5d      	ldr	r3, [pc, #372]	; (800346c <HAL_GPIO_Init+0x300>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	4a5c      	ldr	r2, [pc, #368]	; (800346c <HAL_GPIO_Init+0x300>)
 80032fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003300:	6453      	str	r3, [r2, #68]	; 0x44
 8003302:	4b5a      	ldr	r3, [pc, #360]	; (800346c <HAL_GPIO_Init+0x300>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800330e:	4a58      	ldr	r2, [pc, #352]	; (8003470 <HAL_GPIO_Init+0x304>)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	089b      	lsrs	r3, r3, #2
 8003314:	3302      	adds	r3, #2
 8003316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	220f      	movs	r2, #15
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4f      	ldr	r2, [pc, #316]	; (8003474 <HAL_GPIO_Init+0x308>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d025      	beq.n	8003386 <HAL_GPIO_Init+0x21a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4e      	ldr	r2, [pc, #312]	; (8003478 <HAL_GPIO_Init+0x30c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01f      	beq.n	8003382 <HAL_GPIO_Init+0x216>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4d      	ldr	r2, [pc, #308]	; (800347c <HAL_GPIO_Init+0x310>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <HAL_GPIO_Init+0x212>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4c      	ldr	r2, [pc, #304]	; (8003480 <HAL_GPIO_Init+0x314>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_Init+0x20e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a4b      	ldr	r2, [pc, #300]	; (8003484 <HAL_GPIO_Init+0x318>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00d      	beq.n	8003376 <HAL_GPIO_Init+0x20a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a4a      	ldr	r2, [pc, #296]	; (8003488 <HAL_GPIO_Init+0x31c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <HAL_GPIO_Init+0x206>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a49      	ldr	r2, [pc, #292]	; (800348c <HAL_GPIO_Init+0x320>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_GPIO_Init+0x202>
 800336a:	2306      	movs	r3, #6
 800336c:	e00c      	b.n	8003388 <HAL_GPIO_Init+0x21c>
 800336e:	2307      	movs	r3, #7
 8003370:	e00a      	b.n	8003388 <HAL_GPIO_Init+0x21c>
 8003372:	2305      	movs	r3, #5
 8003374:	e008      	b.n	8003388 <HAL_GPIO_Init+0x21c>
 8003376:	2304      	movs	r3, #4
 8003378:	e006      	b.n	8003388 <HAL_GPIO_Init+0x21c>
 800337a:	2303      	movs	r3, #3
 800337c:	e004      	b.n	8003388 <HAL_GPIO_Init+0x21c>
 800337e:	2302      	movs	r3, #2
 8003380:	e002      	b.n	8003388 <HAL_GPIO_Init+0x21c>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_GPIO_Init+0x21c>
 8003386:	2300      	movs	r3, #0
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	f002 0203 	and.w	r2, r2, #3
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	4093      	lsls	r3, r2
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003398:	4935      	ldr	r1, [pc, #212]	; (8003470 <HAL_GPIO_Init+0x304>)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	3302      	adds	r3, #2
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a6:	4b3a      	ldr	r3, [pc, #232]	; (8003490 <HAL_GPIO_Init+0x324>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ca:	4a31      	ldr	r2, [pc, #196]	; (8003490 <HAL_GPIO_Init+0x324>)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033d0:	4b2f      	ldr	r3, [pc, #188]	; (8003490 <HAL_GPIO_Init+0x324>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033f4:	4a26      	ldr	r2, [pc, #152]	; (8003490 <HAL_GPIO_Init+0x324>)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033fa:	4b25      	ldr	r3, [pc, #148]	; (8003490 <HAL_GPIO_Init+0x324>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800341e:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <HAL_GPIO_Init+0x324>)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003424:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_GPIO_Init+0x324>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003448:	4a11      	ldr	r2, [pc, #68]	; (8003490 <HAL_GPIO_Init+0x324>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3301      	adds	r3, #1
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b0f      	cmp	r3, #15
 8003458:	f67f ae96 	bls.w	8003188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	3724      	adds	r7, #36	; 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40013800 	.word	0x40013800
 8003474:	40020000 	.word	0x40020000
 8003478:	40020400 	.word	0x40020400
 800347c:	40020800 	.word	0x40020800
 8003480:	40020c00 	.word	0x40020c00
 8003484:	40021000 	.word	0x40021000
 8003488:	40021400 	.word	0x40021400
 800348c:	40021800 	.word	0x40021800
 8003490:	40013c00 	.word	0x40013c00

08003494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
 80034a0:	4613      	mov	r3, r2
 80034a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a4:	787b      	ldrb	r3, [r7, #1]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034b0:	e003      	b.n	80034ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034b2:	887b      	ldrh	r3, [r7, #2]
 80034b4:	041a      	lsls	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	619a      	str	r2, [r3, #24]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d006      	beq.n	80034ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034de:	4a05      	ldr	r2, [pc, #20]	; (80034f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd fe8e 	bl	8001208 <HAL_GPIO_EXTI_Callback>
  }
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40013c00 	.word	0x40013c00

080034f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e12b      	b.n	8003762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe f83a 	bl	8001598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2224      	movs	r2, #36	; 0x24
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800354a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800355a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800355c:	f001 fd28 	bl	8004fb0 <HAL_RCC_GetPCLK1Freq>
 8003560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4a81      	ldr	r2, [pc, #516]	; (800376c <HAL_I2C_Init+0x274>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d807      	bhi.n	800357c <HAL_I2C_Init+0x84>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a80      	ldr	r2, [pc, #512]	; (8003770 <HAL_I2C_Init+0x278>)
 8003570:	4293      	cmp	r3, r2
 8003572:	bf94      	ite	ls
 8003574:	2301      	movls	r3, #1
 8003576:	2300      	movhi	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e006      	b.n	800358a <HAL_I2C_Init+0x92>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a7d      	ldr	r2, [pc, #500]	; (8003774 <HAL_I2C_Init+0x27c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	bf94      	ite	ls
 8003584:	2301      	movls	r3, #1
 8003586:	2300      	movhi	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e0e7      	b.n	8003762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a78      	ldr	r2, [pc, #480]	; (8003778 <HAL_I2C_Init+0x280>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	0c9b      	lsrs	r3, r3, #18
 800359c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4a6a      	ldr	r2, [pc, #424]	; (800376c <HAL_I2C_Init+0x274>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d802      	bhi.n	80035cc <HAL_I2C_Init+0xd4>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	3301      	adds	r3, #1
 80035ca:	e009      	b.n	80035e0 <HAL_I2C_Init+0xe8>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	4a69      	ldr	r2, [pc, #420]	; (800377c <HAL_I2C_Init+0x284>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	099b      	lsrs	r3, r3, #6
 80035de:	3301      	adds	r3, #1
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	430b      	orrs	r3, r1
 80035e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	495c      	ldr	r1, [pc, #368]	; (800376c <HAL_I2C_Init+0x274>)
 80035fc:	428b      	cmp	r3, r1
 80035fe:	d819      	bhi.n	8003634 <HAL_I2C_Init+0x13c>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1e59      	subs	r1, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	fbb1 f3f3 	udiv	r3, r1, r3
 800360e:	1c59      	adds	r1, r3, #1
 8003610:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003614:	400b      	ands	r3, r1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_I2C_Init+0x138>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1e59      	subs	r1, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fbb1 f3f3 	udiv	r3, r1, r3
 8003628:	3301      	adds	r3, #1
 800362a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362e:	e051      	b.n	80036d4 <HAL_I2C_Init+0x1dc>
 8003630:	2304      	movs	r3, #4
 8003632:	e04f      	b.n	80036d4 <HAL_I2C_Init+0x1dc>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d111      	bne.n	8003660 <HAL_I2C_Init+0x168>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1e58      	subs	r0, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	440b      	add	r3, r1
 800364a:	fbb0 f3f3 	udiv	r3, r0, r3
 800364e:	3301      	adds	r3, #1
 8003650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e012      	b.n	8003686 <HAL_I2C_Init+0x18e>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1e58      	subs	r0, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	0099      	lsls	r1, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	fbb0 f3f3 	udiv	r3, r0, r3
 8003676:	3301      	adds	r3, #1
 8003678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367c:	2b00      	cmp	r3, #0
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_I2C_Init+0x196>
 800368a:	2301      	movs	r3, #1
 800368c:	e022      	b.n	80036d4 <HAL_I2C_Init+0x1dc>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10e      	bne.n	80036b4 <HAL_I2C_Init+0x1bc>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1e58      	subs	r0, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6859      	ldr	r1, [r3, #4]
 800369e:	460b      	mov	r3, r1
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	440b      	add	r3, r1
 80036a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a8:	3301      	adds	r3, #1
 80036aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b2:	e00f      	b.n	80036d4 <HAL_I2C_Init+0x1dc>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	1e58      	subs	r0, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	0099      	lsls	r1, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ca:	3301      	adds	r3, #1
 80036cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	6809      	ldr	r1, [r1, #0]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6911      	ldr	r1, [r2, #16]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68d2      	ldr	r2, [r2, #12]
 800370e:	4311      	orrs	r1, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	430b      	orrs	r3, r1
 8003716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	000186a0 	.word	0x000186a0
 8003770:	001e847f 	.word	0x001e847f
 8003774:	003d08ff 	.word	0x003d08ff
 8003778:	431bde83 	.word	0x431bde83
 800377c:	10624dd3 	.word	0x10624dd3

08003780 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003782:	b08f      	sub	sp, #60	; 0x3c
 8003784:	af0a      	add	r7, sp, #40	; 0x28
 8003786:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e116      	b.n	80039c0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d106      	bne.n	80037b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f00a fab1 	bl	800dd14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2203      	movs	r2, #3
 80037b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f003 fd18 	bl	8007206 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	687e      	ldr	r6, [r7, #4]
 80037de:	466d      	mov	r5, sp
 80037e0:	f106 0410 	add.w	r4, r6, #16
 80037e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80037f4:	1d33      	adds	r3, r6, #4
 80037f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037f8:	6838      	ldr	r0, [r7, #0]
 80037fa:	f003 fbef 	bl	8006fdc <USB_CoreInit>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0d7      	b.n	80039c0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f003 fd06 	bl	8007228 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800381c:	2300      	movs	r3, #0
 800381e:	73fb      	strb	r3, [r7, #15]
 8003820:	e04a      	b.n	80038b8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003822:	7bfa      	ldrb	r2, [r7, #15]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	333d      	adds	r3, #61	; 0x3d
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	333c      	adds	r3, #60	; 0x3c
 8003846:	7bfa      	ldrb	r2, [r7, #15]
 8003848:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	b298      	uxth	r0, r3
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3344      	adds	r3, #68	; 0x44
 800385e:	4602      	mov	r2, r0
 8003860:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003862:	7bfa      	ldrb	r2, [r7, #15]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	3340      	adds	r3, #64	; 0x40
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003876:	7bfa      	ldrb	r2, [r7, #15]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	3348      	adds	r3, #72	; 0x48
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800388a:	7bfa      	ldrb	r2, [r7, #15]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	334c      	adds	r3, #76	; 0x4c
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800389e:	7bfa      	ldrb	r2, [r7, #15]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	3354      	adds	r3, #84	; 0x54
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	3301      	adds	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3af      	bcc.n	8003822 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
 80038c6:	e044      	b.n	8003952 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038de:	7bfa      	ldrb	r2, [r7, #15]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	3301      	adds	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	d3b5      	bcc.n	80038c8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	687e      	ldr	r6, [r7, #4]
 8003964:	466d      	mov	r5, sp
 8003966:	f106 0410 	add.w	r4, r6, #16
 800396a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800396c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800396e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003972:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003976:	e885 0003 	stmia.w	r5, {r0, r1}
 800397a:	1d33      	adds	r3, r6, #4
 800397c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800397e:	6838      	ldr	r0, [r7, #0]
 8003980:	f003 fc9e 	bl	80072c0 <USB_DevInit>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2202      	movs	r2, #2
 800398e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e014      	b.n	80039c0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d102      	bne.n	80039b4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f001 f98c 	bl	8004ccc <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f004 fde0 	bl	800857e <USB_DevDisconnect>

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_PCD_Start+0x1c>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e020      	b.n	8003a26 <HAL_PCD_Start+0x5e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d109      	bne.n	8003a08 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d005      	beq.n	8003a08 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f003 fbe9 	bl	80071e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f004 fd90 	bl	800853c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a2e:	b590      	push	{r4, r7, lr}
 8003a30:	b08d      	sub	sp, #52	; 0x34
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f004 fe4e 	bl	80086e6 <USB_GetMode>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f040 84b7 	bne.w	80043c0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f004 fdb2 	bl	80085c0 <USB_ReadInterrupts>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 84ad 	beq.w	80043be <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	0a1b      	lsrs	r3, r3, #8
 8003a6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f004 fd9f 	bl	80085c0 <USB_ReadInterrupts>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d107      	bne.n	8003a9c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f002 0202 	and.w	r2, r2, #2
 8003a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f004 fd8d 	bl	80085c0 <USB_ReadInterrupts>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d161      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0210 	bic.w	r2, r2, #16
 8003abe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f003 020f 	and.w	r2, r3, #15
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	3304      	adds	r3, #4
 8003ade:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	0c5b      	lsrs	r3, r3, #17
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d124      	bne.n	8003b36 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d035      	beq.n	8003b64 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6a38      	ldr	r0, [r7, #32]
 8003b0c:	f004 fbc4 	bl	8008298 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b1c:	441a      	add	r2, r3
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	6a1a      	ldr	r2, [r3, #32]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b2e:	441a      	add	r2, r3
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	621a      	str	r2, [r3, #32]
 8003b34:	e016      	b.n	8003b64 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	0c5b      	lsrs	r3, r3, #17
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d110      	bne.n	8003b64 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b48:	2208      	movs	r2, #8
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6a38      	ldr	r0, [r7, #32]
 8003b4e:	f004 fba3 	bl	8008298 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	6a1a      	ldr	r2, [r3, #32]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b5e:	441a      	add	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0210 	orr.w	r2, r2, #16
 8003b72:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 fd21 	bl	80085c0 <USB_ReadInterrupts>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b88:	f040 80a7 	bne.w	8003cda <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f004 fd26 	bl	80085e6 <USB_ReadDevAllOutEpInterrupt>
 8003b9a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b9c:	e099      	b.n	8003cd2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 808e 	beq.w	8003cc6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f004 fd4a 	bl	800864e <USB_ReadDevOutEPInterrupt>
 8003bba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00c      	beq.n	8003be0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003bd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fef0 	bl	80049c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00c      	beq.n	8003c04 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 ffc6 	bl	8004b90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d008      	beq.n	8003c20 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d030      	beq.n	8003c8c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	2b80      	cmp	r3, #128	; 0x80
 8003c34:	d109      	bne.n	8003c4a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c48:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	78db      	ldrb	r3, [r3, #3]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d108      	bne.n	8003c7a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	4619      	mov	r1, r3
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f00a f981 	bl	800df7c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c86:	461a      	mov	r2, r3
 8003c88:	2302      	movs	r3, #2
 8003c8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cc4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	3301      	adds	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f47f af62 	bne.w	8003b9e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f004 fc6e 	bl	80085c0 <USB_ReadInterrupts>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cee:	f040 80db 	bne.w	8003ea8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f004 fc8f 	bl	800861a <USB_ReadDevAllInEpInterrupt>
 8003cfc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003d02:	e0cd      	b.n	8003ea0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80c2 	beq.w	8003e94 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f004 fcb5 	bl	800868a <USB_ReadDevInEPInterrupt>
 8003d20:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d057      	beq.n	8003ddc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	2201      	movs	r2, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69f9      	ldr	r1, [r7, #28]
 8003d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2301      	movs	r3, #1
 8003d60:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d132      	bne.n	8003dd0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	334c      	adds	r3, #76	; 0x4c
 8003d7a:	6819      	ldr	r1, [r3, #0]
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4403      	add	r3, r0
 8003d8a:	3348      	adds	r3, #72	; 0x48
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4419      	add	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4403      	add	r3, r0
 8003d9e:	334c      	adds	r3, #76	; 0x4c
 8003da0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d113      	bne.n	8003dd0 <HAL_PCD_IRQHandler+0x3a2>
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	3354      	adds	r3, #84	; 0x54
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d108      	bne.n	8003dd0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2101      	movs	r1, #1
 8003dcc:	f004 fcbc 	bl	8008748 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f00a f84b 	bl	800de72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	461a      	mov	r2, r3
 8003df4:	2308      	movs	r3, #8
 8003df6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2310      	movs	r3, #16
 8003e12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2340      	movs	r3, #64	; 0x40
 8003e2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d023      	beq.n	8003e82 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e3c:	6a38      	ldr	r0, [r7, #32]
 8003e3e:	f003 fb9d 	bl	800757c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	3338      	adds	r3, #56	; 0x38
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	3304      	adds	r3, #4
 8003e54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	78db      	ldrb	r3, [r3, #3]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d108      	bne.n	8003e70 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2200      	movs	r2, #0
 8003e62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	4619      	mov	r1, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f00a f898 	bl	800dfa0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2302      	movs	r3, #2
 8003e80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fd08 	bl	80048a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	3301      	adds	r3, #1
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f47f af2e 	bne.w	8003d04 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f004 fb87 	bl	80085c0 <USB_ReadInterrupts>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ebc:	d122      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d108      	bne.n	8003eee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 ff14 	bl	8004d14 <HAL_PCDEx_LPM_Callback>
 8003eec:	e002      	b.n	8003ef4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f00a f836 	bl	800df60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f004 fb59 	bl	80085c0 <USB_ReadInterrupts>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f18:	d112      	bne.n	8003f40 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d102      	bne.n	8003f30 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f009 fff2 	bl	800df14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f3e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f004 fb3b 	bl	80085c0 <USB_ReadInterrupts>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f54:	d121      	bne.n	8003f9a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003f64:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d111      	bne.n	8003f94 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	089b      	lsrs	r3, r3, #2
 8003f80:	f003 020f 	and.w	r2, r3, #15
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fec1 	bl	8004d14 <HAL_PCDEx_LPM_Callback>
 8003f92:	e002      	b.n	8003f9a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f009 ffbd 	bl	800df14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f004 fb0e 	bl	80085c0 <USB_ReadInterrupts>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fae:	f040 80b7 	bne.w	8004120 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2110      	movs	r1, #16
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f003 fad5 	bl	800757c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd6:	e046      	b.n	8004066 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ffc:	0151      	lsls	r1, r2, #5
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	440a      	add	r2, r1
 8004002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004006:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800400a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004018:	461a      	mov	r2, r3
 800401a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800401e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800403e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004050:	0151      	lsls	r1, r2, #5
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	440a      	add	r2, r1
 8004056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800405a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800405e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004062:	3301      	adds	r3, #1
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406c:	429a      	cmp	r2, r3
 800406e:	d3b3      	bcc.n	8003fd8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800407e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004082:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	2b00      	cmp	r3, #0
 800408a:	d016      	beq.n	80040ba <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800409c:	f043 030b 	orr.w	r3, r3, #11
 80040a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040b2:	f043 030b 	orr.w	r3, r3, #11
 80040b6:	6453      	str	r3, [r2, #68]	; 0x44
 80040b8:	e015      	b.n	80040e6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040cc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80040d0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040e0:	f043 030b 	orr.w	r3, r3, #11
 80040e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800410a:	461a      	mov	r2, r3
 800410c:	f004 fb1c 	bl	8008748 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800411e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f004 fa4b 	bl	80085c0 <USB_ReadInterrupts>
 800412a:	4603      	mov	r3, r0
 800412c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004134:	d124      	bne.n	8004180 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f004 fae1 	bl	8008702 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f003 fa96 	bl	8007676 <USB_GetDevSpeed>
 800414a:	4603      	mov	r3, r0
 800414c:	461a      	mov	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681c      	ldr	r4, [r3, #0]
 8004156:	f000 ff1f 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 800415a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	4620      	mov	r0, r4
 8004166:	f002 ff9b 	bl	80070a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f009 fea9 	bl	800dec2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800417e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f004 fa1b 	bl	80085c0 <USB_ReadInterrupts>
 800418a:	4603      	mov	r3, r0
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b08      	cmp	r3, #8
 8004192:	d10a      	bne.n	80041aa <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f009 fe86 	bl	800dea6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695a      	ldr	r2, [r3, #20]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f002 0208 	and.w	r2, r2, #8
 80041a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f004 fa06 	bl	80085c0 <USB_ReadInterrupts>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b80      	cmp	r3, #128	; 0x80
 80041bc:	d122      	bne.n	8004204 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041ca:	2301      	movs	r3, #1
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
 80041ce:	e014      	b.n	80041fa <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d105      	bne.n	80041f4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	4619      	mov	r1, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fb27 	bl	8004842 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	3301      	adds	r3, #1
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004200:	429a      	cmp	r2, r3
 8004202:	d3e5      	bcc.n	80041d0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f004 f9d9 	bl	80085c0 <USB_ReadInterrupts>
 800420e:	4603      	mov	r3, r0
 8004210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004218:	d13b      	bne.n	8004292 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800421a:	2301      	movs	r3, #1
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
 800421e:	e02b      	b.n	8004278 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	4613      	mov	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	3340      	adds	r3, #64	; 0x40
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d115      	bne.n	8004272 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004246:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004248:	2b00      	cmp	r3, #0
 800424a:	da12      	bge.n	8004272 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	333f      	adds	r3, #63	; 0x3f
 800425c:	2201      	movs	r2, #1
 800425e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004268:	b2db      	uxtb	r3, r3
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fae8 	bl	8004842 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	3301      	adds	r3, #1
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427e:	429a      	cmp	r2, r3
 8004280:	d3ce      	bcc.n	8004220 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f004 f992 	bl	80085c0 <USB_ReadInterrupts>
 800429c:	4603      	mov	r3, r0
 800429e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a6:	d155      	bne.n	8004354 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042a8:	2301      	movs	r3, #1
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
 80042ac:	e045      	b.n	800433a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d12e      	bne.n	8004334 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042d8:	2b00      	cmp	r3, #0
 80042da:	da2b      	bge.n	8004334 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80042e8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d121      	bne.n	8004334 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f4:	4613      	mov	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10a      	bne.n	8004334 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	69fa      	ldr	r2, [r7, #28]
 8004328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800432c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004330:	6053      	str	r3, [r2, #4]
            break;
 8004332:	e007      	b.n	8004344 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	3301      	adds	r3, #1
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004340:	429a      	cmp	r2, r3
 8004342:	d3b4      	bcc.n	80042ae <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f004 f931 	bl	80085c0 <USB_ReadInterrupts>
 800435e:	4603      	mov	r3, r0
 8004360:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004368:	d10a      	bne.n	8004380 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f009 fe2a 	bl	800dfc4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800437e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f004 f91b 	bl	80085c0 <USB_ReadInterrupts>
 800438a:	4603      	mov	r3, r0
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b04      	cmp	r3, #4
 8004392:	d115      	bne.n	80043c0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f009 fe1a 	bl	800dfe0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	e000      	b.n	80043c0 <HAL_PCD_IRQHandler+0x992>
      return;
 80043be:	bf00      	nop
    }
  }
}
 80043c0:	3734      	adds	r7, #52	; 0x34
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd90      	pop	{r4, r7, pc}

080043c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	460b      	mov	r3, r1
 80043d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_PCD_SetAddress+0x1a>
 80043dc:	2302      	movs	r3, #2
 80043de:	e013      	b.n	8004408 <HAL_PCD_SetAddress+0x42>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f004 f879 	bl	80084f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	4608      	mov	r0, r1
 800441a:	4611      	mov	r1, r2
 800441c:	461a      	mov	r2, r3
 800441e:	4603      	mov	r3, r0
 8004420:	70fb      	strb	r3, [r7, #3]
 8004422:	460b      	mov	r3, r1
 8004424:	803b      	strh	r3, [r7, #0]
 8004426:	4613      	mov	r3, r2
 8004428:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800442e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004432:	2b00      	cmp	r3, #0
 8004434:	da0f      	bge.n	8004456 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	f003 020f 	and.w	r2, r3, #15
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	3338      	adds	r3, #56	; 0x38
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	4413      	add	r3, r2
 800444a:	3304      	adds	r3, #4
 800444c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	705a      	strb	r2, [r3, #1]
 8004454:	e00f      	b.n	8004476 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	f003 020f 	and.w	r2, r3, #15
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	4413      	add	r3, r2
 800446c:	3304      	adds	r3, #4
 800446e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004482:	883a      	ldrh	r2, [r7, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	78ba      	ldrb	r2, [r7, #2]
 800448c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	785b      	ldrb	r3, [r3, #1]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d004      	beq.n	80044a0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80044a0:	78bb      	ldrb	r3, [r7, #2]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d102      	bne.n	80044ac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_PCD_EP_Open+0xaa>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e00e      	b.n	80044d8 <HAL_PCD_EP_Open+0xc8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68f9      	ldr	r1, [r7, #12]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f003 f8f9 	bl	80076c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80044d6:	7afb      	ldrb	r3, [r7, #11]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	da0f      	bge.n	8004514 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	f003 020f 	and.w	r2, r3, #15
 80044fa:	4613      	mov	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	3338      	adds	r3, #56	; 0x38
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	4413      	add	r3, r2
 8004508:	3304      	adds	r3, #4
 800450a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	705a      	strb	r2, [r3, #1]
 8004512:	e00f      	b.n	8004534 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	f003 020f 	and.w	r2, r3, #15
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	4413      	add	r3, r2
 800452a:	3304      	adds	r3, #4
 800452c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	b2da      	uxtb	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_PCD_EP_Close+0x6e>
 800454a:	2302      	movs	r3, #2
 800454c:	e00e      	b.n	800456c <HAL_PCD_EP_Close+0x8c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68f9      	ldr	r1, [r7, #12]
 800455c:	4618      	mov	r0, r3
 800455e:	f003 f937 	bl	80077d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	460b      	mov	r3, r1
 8004582:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004584:	7afb      	ldrb	r3, [r7, #11]
 8004586:	f003 020f 	and.w	r2, r3, #15
 800458a:	4613      	mov	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	3304      	adds	r3, #4
 800459c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2200      	movs	r2, #0
 80045ae:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2200      	movs	r2, #0
 80045b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045b6:	7afb      	ldrb	r3, [r7, #11]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d102      	bne.n	80045d0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045d0:	7afb      	ldrb	r3, [r7, #11]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	6979      	ldr	r1, [r7, #20]
 80045e8:	f003 fc16 	bl	8007e18 <USB_EP0StartXfer>
 80045ec:	e008      	b.n	8004600 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	6979      	ldr	r1, [r7, #20]
 80045fc:	f003 f9c4 	bl	8007988 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	f003 020f 	and.w	r2, r3, #15
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800462c:	681b      	ldr	r3, [r3, #0]
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b086      	sub	sp, #24
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	460b      	mov	r3, r1
 8004648:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800464a:	7afb      	ldrb	r3, [r7, #11]
 800464c:	f003 020f 	and.w	r2, r3, #15
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	3338      	adds	r3, #56	; 0x38
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4413      	add	r3, r2
 800465e:	3304      	adds	r3, #4
 8004660:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2200      	movs	r2, #0
 8004672:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2201      	movs	r2, #1
 8004678:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800467a:	7afb      	ldrb	r3, [r7, #11]
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	b2da      	uxtb	r2, r3
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d102      	bne.n	8004694 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004694:	7afb      	ldrb	r3, [r7, #11]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	6979      	ldr	r1, [r7, #20]
 80046ac:	f003 fbb4 	bl	8007e18 <USB_EP0StartXfer>
 80046b0:	e008      	b.n	80046c4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	6979      	ldr	r1, [r7, #20]
 80046c0:	f003 f962 	bl	8007988 <USB_EPStartXfer>
  }

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	f003 020f 	and.w	r2, r3, #15
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d901      	bls.n	80046ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e050      	b.n	800478e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	da0f      	bge.n	8004714 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	f003 020f 	and.w	r2, r3, #15
 80046fa:	4613      	mov	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	3338      	adds	r3, #56	; 0x38
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	4413      	add	r3, r2
 8004708:	3304      	adds	r3, #4
 800470a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	705a      	strb	r2, [r3, #1]
 8004712:	e00d      	b.n	8004730 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	4413      	add	r3, r2
 8004726:	3304      	adds	r3, #4
 8004728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	b2da      	uxtb	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_PCD_EP_SetStall+0x82>
 800474c:	2302      	movs	r3, #2
 800474e:	e01e      	b.n	800478e <HAL_PCD_EP_SetStall+0xc0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68f9      	ldr	r1, [r7, #12]
 800475e:	4618      	mov	r0, r3
 8004760:	f003 fdf2 	bl	8008348 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	b2d9      	uxtb	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800477e:	461a      	mov	r2, r3
 8004780:	f003 ffe2 	bl	8008748 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	460b      	mov	r3, r1
 80047a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	f003 020f 	and.w	r2, r3, #15
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d901      	bls.n	80047b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e042      	b.n	800483a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	da0f      	bge.n	80047dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	f003 020f 	and.w	r2, r3, #15
 80047c2:	4613      	mov	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	3338      	adds	r3, #56	; 0x38
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4413      	add	r3, r2
 80047d0:	3304      	adds	r3, #4
 80047d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	705a      	strb	r2, [r3, #1]
 80047da:	e00f      	b.n	80047fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	f003 020f 	and.w	r2, r3, #15
 80047e2:	4613      	mov	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	3304      	adds	r3, #4
 80047f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_PCD_EP_ClrStall+0x86>
 8004818:	2302      	movs	r3, #2
 800481a:	e00e      	b.n	800483a <HAL_PCD_EP_ClrStall+0xa4>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68f9      	ldr	r1, [r7, #12]
 800482a:	4618      	mov	r0, r3
 800482c:	f003 fdfa 	bl	8008424 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800484e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004852:	2b00      	cmp	r3, #0
 8004854:	da0c      	bge.n	8004870 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004856:	78fb      	ldrb	r3, [r7, #3]
 8004858:	f003 020f 	and.w	r2, r3, #15
 800485c:	4613      	mov	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	3338      	adds	r3, #56	; 0x38
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4413      	add	r3, r2
 800486a:	3304      	adds	r3, #4
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	e00c      	b.n	800488a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	f003 020f 	and.w	r2, r3, #15
 8004876:	4613      	mov	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4413      	add	r3, r2
 8004886:	3304      	adds	r3, #4
 8004888:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	4618      	mov	r0, r3
 8004892:	f003 fc19 	bl	80080c8 <USB_EPStopXfer>
 8004896:	4603      	mov	r3, r0
 8004898:	72fb      	strb	r3, [r7, #11]

  return ret;
 800489a:	7afb      	ldrb	r3, [r7, #11]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08a      	sub	sp, #40	; 0x28
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	3338      	adds	r3, #56	; 0x38
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4413      	add	r3, r2
 80048c8:	3304      	adds	r3, #4
 80048ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1a      	ldr	r2, [r3, #32]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d901      	bls.n	80048dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e06c      	b.n	80049b6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	699a      	ldr	r2, [r3, #24]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d902      	bls.n	80048f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	3303      	adds	r3, #3
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004900:	e02b      	b.n	800495a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	429a      	cmp	r2, r3
 8004916:	d902      	bls.n	800491e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3303      	adds	r3, #3
 8004922:	089b      	lsrs	r3, r3, #2
 8004924:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6919      	ldr	r1, [r3, #16]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	b2da      	uxtb	r2, r3
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004936:	b2db      	uxtb	r3, r3
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	4603      	mov	r3, r0
 800493c:	6978      	ldr	r0, [r7, #20]
 800493e:	f003 fc6d 	bl	800821c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	441a      	add	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a1a      	ldr	r2, [r3, #32]
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	441a      	add	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	429a      	cmp	r2, r3
 800496e:	d809      	bhi.n	8004984 <PCD_WriteEmptyTxFifo+0xe0>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a1a      	ldr	r2, [r3, #32]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004978:	429a      	cmp	r2, r3
 800497a:	d203      	bcs.n	8004984 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1be      	bne.n	8004902 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	699a      	ldr	r2, [r3, #24]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	429a      	cmp	r2, r3
 800498e:	d811      	bhi.n	80049b4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	2201      	movs	r2, #1
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	6939      	ldr	r1, [r7, #16]
 80049ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049b0:	4013      	ands	r3, r2
 80049b2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3720      	adds	r7, #32
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	333c      	adds	r3, #60	; 0x3c
 80049d8:	3304      	adds	r3, #4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d17b      	bne.n	8004aee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d015      	beq.n	8004a2c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4a61      	ldr	r2, [pc, #388]	; (8004b88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	f240 80b9 	bls.w	8004b7c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80b3 	beq.w	8004b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a22:	461a      	mov	r2, r3
 8004a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a28:	6093      	str	r3, [r2, #8]
 8004a2a:	e0a7      	b.n	8004b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	461a      	mov	r2, r3
 8004a44:	2320      	movs	r3, #32
 8004a46:	6093      	str	r3, [r2, #8]
 8004a48:	e098      	b.n	8004b7c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f040 8093 	bne.w	8004b7c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	4a4b      	ldr	r2, [pc, #300]	; (8004b88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d90f      	bls.n	8004a7e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a74:	461a      	mov	r2, r3
 8004a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7a:	6093      	str	r3, [r2, #8]
 8004a7c:	e07e      	b.n	8004b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	4613      	mov	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	4413      	add	r3, r2
 8004a90:	3304      	adds	r3, #4
 8004a92:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	0159      	lsls	r1, r3, #5
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	440b      	add	r3, r1
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aaa:	1ad2      	subs	r2, r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d114      	bne.n	8004ae0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ac8:	461a      	mov	r2, r3
 8004aca:	2101      	movs	r1, #1
 8004acc:	f003 fe3c 	bl	8008748 <USB_EP0_OutStart>
 8004ad0:	e006      	b.n	8004ae0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	441a      	add	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f009 f9a8 	bl	800de3c <HAL_PCD_DataOutStageCallback>
 8004aec:	e046      	b.n	8004b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d124      	bne.n	8004b40 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b12:	6093      	str	r3, [r2, #8]
 8004b14:	e032      	b.n	8004b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2320      	movs	r3, #32
 8004b30:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	4619      	mov	r1, r3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f009 f97f 	bl	800de3c <HAL_PCD_DataOutStageCallback>
 8004b3e:	e01d      	b.n	8004b7c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d114      	bne.n	8004b70 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d108      	bne.n	8004b70 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	f003 fdec 	bl	8008748 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f009 f960 	bl	800de3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	4f54300a 	.word	0x4f54300a
 8004b8c:	4f54310a 	.word	0x4f54310a

08004b90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	333c      	adds	r3, #60	; 0x3c
 8004ba8:	3304      	adds	r3, #4
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <PCD_EP_OutSetupPacket_int+0x88>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d90e      	bls.n	8004be4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d009      	beq.n	8004be4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f009 f917 	bl	800de18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4a0a      	ldr	r2, [pc, #40]	; (8004c18 <PCD_EP_OutSetupPacket_int+0x88>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d90c      	bls.n	8004c0c <PCD_EP_OutSetupPacket_int+0x7c>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d108      	bne.n	8004c0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c04:	461a      	mov	r2, r3
 8004c06:	2101      	movs	r1, #1
 8004c08:	f003 fd9e 	bl	8008748 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	4f54300a 	.word	0x4f54300a

08004c1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d107      	bne.n	8004c4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c3a:	883b      	ldrh	r3, [r7, #0]
 8004c3c:	0419      	lsls	r1, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28
 8004c48:	e028      	b.n	8004c9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	4413      	add	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	73fb      	strb	r3, [r7, #15]
 8004c5c:	e00d      	b.n	8004c7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	3340      	adds	r3, #64	; 0x40
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	0c1b      	lsrs	r3, r3, #16
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	4413      	add	r3, r2
 8004c72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	3301      	adds	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d3ec      	bcc.n	8004c5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c84:	883b      	ldrh	r3, [r7, #0]
 8004c86:	0418      	lsls	r0, r3, #16
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6819      	ldr	r1, [r3, #0]
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	4302      	orrs	r2, r0
 8004c94:	3340      	adds	r3, #64	; 0x40
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	f043 0303 	orr.w	r3, r3, #3
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d36:	2300      	movs	r3, #0
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <HAL_PWREx_EnableOverDrive+0x90>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <HAL_PWREx_EnableOverDrive+0x90>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d44:	6413      	str	r3, [r2, #64]	; 0x40
 8004d46:	4b1d      	ldr	r3, [pc, #116]	; (8004dbc <HAL_PWREx_EnableOverDrive+0x90>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d52:	4b1b      	ldr	r3, [pc, #108]	; (8004dc0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d58:	f7fd f854 	bl	8001e04 <HAL_GetTick>
 8004d5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d5e:	e009      	b.n	8004d74 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d60:	f7fd f850 	bl	8001e04 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d6e:	d901      	bls.n	8004d74 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e01f      	b.n	8004db4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d74:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d80:	d1ee      	bne.n	8004d60 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d82:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d88:	f7fd f83c 	bl	8001e04 <HAL_GetTick>
 8004d8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d8e:	e009      	b.n	8004da4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d90:	f7fd f838 	bl	8001e04 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d9e:	d901      	bls.n	8004da4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e007      	b.n	8004db4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004da4:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004db0:	d1ee      	bne.n	8004d90 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	420e0040 	.word	0x420e0040
 8004dc4:	40007000 	.word	0x40007000
 8004dc8:	420e0044 	.word	0x420e0044

08004dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0cc      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004de0:	4b68      	ldr	r3, [pc, #416]	; (8004f84 <HAL_RCC_ClockConfig+0x1b8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d90c      	bls.n	8004e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dee:	4b65      	ldr	r3, [pc, #404]	; (8004f84 <HAL_RCC_ClockConfig+0x1b8>)
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b63      	ldr	r3, [pc, #396]	; (8004f84 <HAL_RCC_ClockConfig+0x1b8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0b8      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d020      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e20:	4b59      	ldr	r3, [pc, #356]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	4a58      	ldr	r2, [pc, #352]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e38:	4b53      	ldr	r3, [pc, #332]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	4a52      	ldr	r2, [pc, #328]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e44:	4b50      	ldr	r3, [pc, #320]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	494d      	ldr	r1, [pc, #308]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d044      	beq.n	8004eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d107      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6a:	4b47      	ldr	r3, [pc, #284]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d119      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e07f      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d003      	beq.n	8004e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d107      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8a:	4b3f      	ldr	r3, [pc, #252]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d109      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e06f      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9a:	4b3b      	ldr	r3, [pc, #236]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e067      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eaa:	4b37      	ldr	r3, [pc, #220]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f023 0203 	bic.w	r2, r3, #3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4934      	ldr	r1, [pc, #208]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ebc:	f7fc ffa2 	bl	8001e04 <HAL_GetTick>
 8004ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec2:	e00a      	b.n	8004eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec4:	f7fc ff9e 	bl	8001e04 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e04f      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eda:	4b2b      	ldr	r3, [pc, #172]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 020c 	and.w	r2, r3, #12
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d1eb      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eec:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <HAL_RCC_ClockConfig+0x1b8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d20c      	bcs.n	8004f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f02:	4b20      	ldr	r3, [pc, #128]	; (8004f84 <HAL_RCC_ClockConfig+0x1b8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e032      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f20:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4916      	ldr	r1, [pc, #88]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f3e:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	490e      	ldr	r1, [pc, #56]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f52:	f000 fbb1 	bl	80056b8 <HAL_RCC_GetSysClockFreq>
 8004f56:	4602      	mov	r2, r0
 8004f58:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	490a      	ldr	r1, [pc, #40]	; (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004f64:	5ccb      	ldrb	r3, [r1, r3]
 8004f66:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6a:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fc fd96 	bl	8001aa4 <HAL_InitTick>

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40023c00 	.word	0x40023c00
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	0800e680 	.word	0x0800e680
 8004f90:	20000000 	.word	0x20000000
 8004f94:	20000004 	.word	0x20000004

08004f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f9c:	4b03      	ldr	r3, [pc, #12]	; (8004fac <HAL_RCC_GetHCLKFreq+0x14>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	20000000 	.word	0x20000000

08004fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fb4:	f7ff fff0 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	0a9b      	lsrs	r3, r3, #10
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	4903      	ldr	r1, [pc, #12]	; (8004fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fc6:	5ccb      	ldrb	r3, [r1, r3]
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	0800e690 	.word	0x0800e690

08004fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fdc:	f7ff ffdc 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	0b5b      	lsrs	r3, r3, #13
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	4903      	ldr	r1, [pc, #12]	; (8004ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	0800e690 	.word	0x0800e690

08005000 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	220f      	movs	r2, #15
 800500e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005010:	4b12      	ldr	r3, [pc, #72]	; (800505c <HAL_RCC_GetClockConfig+0x5c>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 0203 	and.w	r2, r3, #3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800501c:	4b0f      	ldr	r3, [pc, #60]	; (800505c <HAL_RCC_GetClockConfig+0x5c>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <HAL_RCC_GetClockConfig+0x5c>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005034:	4b09      	ldr	r3, [pc, #36]	; (800505c <HAL_RCC_GetClockConfig+0x5c>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	08db      	lsrs	r3, r3, #3
 800503a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005042:	4b07      	ldr	r3, [pc, #28]	; (8005060 <HAL_RCC_GetClockConfig+0x60>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 020f 	and.w	r2, r3, #15
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	601a      	str	r2, [r3, #0]
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800
 8005060:	40023c00 	.word	0x40023c00

08005064 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08c      	sub	sp, #48	; 0x30
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d010      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800509c:	4b6f      	ldr	r3, [pc, #444]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800509e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050a2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	496c      	ldr	r1, [pc, #432]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80050ba:	2301      	movs	r3, #1
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d010      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80050ca:	4b64      	ldr	r3, [pc, #400]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d8:	4960      	ldr	r1, [pc, #384]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80050e8:	2301      	movs	r3, #1
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d017      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050f8:	4b58      	ldr	r3, [pc, #352]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	4955      	ldr	r1, [pc, #340]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005116:	d101      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005118:	2301      	movs	r3, #1
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005124:	2301      	movs	r3, #1
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b00      	cmp	r3, #0
 8005132:	d017      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005134:	4b49      	ldr	r3, [pc, #292]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800513a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005142:	4946      	ldr	r1, [pc, #280]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005152:	d101      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005154:	2301      	movs	r3, #1
 8005156:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005160:	2301      	movs	r3, #1
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 808a 	beq.w	8005286 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005172:	2300      	movs	r3, #0
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	4b39      	ldr	r3, [pc, #228]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	4a38      	ldr	r2, [pc, #224]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800517c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005180:	6413      	str	r3, [r2, #64]	; 0x40
 8005182:	4b36      	ldr	r3, [pc, #216]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518a:	60bb      	str	r3, [r7, #8]
 800518c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800518e:	4b34      	ldr	r3, [pc, #208]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a33      	ldr	r2, [pc, #204]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005198:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800519a:	f7fc fe33 	bl	8001e04 <HAL_GetTick>
 800519e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051a2:	f7fc fe2f 	bl	8001e04 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e278      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051b4:	4b2a      	ldr	r3, [pc, #168]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0f0      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051c0:	4b26      	ldr	r3, [pc, #152]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d02f      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d8:	6a3a      	ldr	r2, [r7, #32]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d028      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051de:	4b1f      	ldr	r3, [pc, #124]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051e8:	4b1e      	ldr	r3, [pc, #120]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051ee:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80051f4:	4a19      	ldr	r2, [pc, #100]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051fa:	4b18      	ldr	r3, [pc, #96]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b01      	cmp	r3, #1
 8005204:	d114      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005206:	f7fc fdfd 	bl	8001e04 <HAL_GetTick>
 800520a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520c:	e00a      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fc fdf9 	bl	8001e04 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e240      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005224:	4b0d      	ldr	r3, [pc, #52]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0ee      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800523c:	d114      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800524e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005252:	4902      	ldr	r1, [pc, #8]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005254:	4313      	orrs	r3, r2
 8005256:	608b      	str	r3, [r1, #8]
 8005258:	e00c      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800525a:	bf00      	nop
 800525c:	40023800 	.word	0x40023800
 8005260:	40007000 	.word	0x40007000
 8005264:	42470e40 	.word	0x42470e40
 8005268:	4b4a      	ldr	r3, [pc, #296]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	4a49      	ldr	r2, [pc, #292]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800526e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005272:	6093      	str	r3, [r2, #8]
 8005274:	4b47      	ldr	r3, [pc, #284]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005276:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005280:	4944      	ldr	r1, [pc, #272]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005282:	4313      	orrs	r3, r2
 8005284:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b00      	cmp	r3, #0
 8005290:	d004      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005298:	4b3f      	ldr	r3, [pc, #252]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800529a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80052a8:	4b3a      	ldr	r3, [pc, #232]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b6:	4937      	ldr	r1, [pc, #220]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052ca:	4b32      	ldr	r3, [pc, #200]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d8:	492e      	ldr	r1, [pc, #184]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d011      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052ec:	4b29      	ldr	r3, [pc, #164]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	4926      	ldr	r1, [pc, #152]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800530a:	d101      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800530c:	2301      	movs	r3, #1
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800531c:	4b1d      	ldr	r3, [pc, #116]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800531e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005322:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532a:	491a      	ldr	r1, [pc, #104]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533a:	2b00      	cmp	r3, #0
 800533c:	d011      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800533e:	4b15      	ldr	r3, [pc, #84]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005344:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800534c:	4911      	ldr	r1, [pc, #68]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800535c:	d101      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800535e:	2301      	movs	r3, #1
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d005      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005370:	f040 80ff 	bne.w	8005572 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005374:	4b09      	ldr	r3, [pc, #36]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800537a:	f7fc fd43 	bl	8001e04 <HAL_GetTick>
 800537e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005380:	e00e      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005382:	f7fc fd3f 	bl	8001e04 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d907      	bls.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e188      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005394:	40023800 	.word	0x40023800
 8005398:	424711e0 	.word	0x424711e0
 800539c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053a0:	4b7e      	ldr	r3, [pc, #504]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1ea      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d009      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d028      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d124      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80053d4:	4b71      	ldr	r3, [pc, #452]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053da:	0c1b      	lsrs	r3, r3, #16
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	3301      	adds	r3, #1
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053e6:	4b6d      	ldr	r3, [pc, #436]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ec:	0e1b      	lsrs	r3, r3, #24
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	431a      	orrs	r2, r3
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	3b01      	subs	r3, #1
 8005406:	041b      	lsls	r3, r3, #16
 8005408:	431a      	orrs	r2, r3
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	061b      	lsls	r3, r3, #24
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	071b      	lsls	r3, r3, #28
 8005416:	4961      	ldr	r1, [pc, #388]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005432:	d00a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800543c:	2b00      	cmp	r3, #0
 800543e:	d035      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005448:	d130      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800544a:	4b54      	ldr	r3, [pc, #336]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800544c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005450:	0c1b      	lsrs	r3, r3, #16
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	3301      	adds	r3, #1
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800545c:	4b4f      	ldr	r3, [pc, #316]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800545e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005462:	0f1b      	lsrs	r3, r3, #28
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	019b      	lsls	r3, r3, #6
 8005474:	431a      	orrs	r2, r3
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	3b01      	subs	r3, #1
 800547c:	041b      	lsls	r3, r3, #16
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	061b      	lsls	r3, r3, #24
 8005486:	431a      	orrs	r2, r3
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	071b      	lsls	r3, r3, #28
 800548c:	4943      	ldr	r1, [pc, #268]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005494:	4b41      	ldr	r3, [pc, #260]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800549a:	f023 021f 	bic.w	r2, r3, #31
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	3b01      	subs	r3, #1
 80054a4:	493d      	ldr	r1, [pc, #244]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d029      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c0:	d124      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80054c2:	4b36      	ldr	r3, [pc, #216]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	3301      	adds	r3, #1
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054d4:	4b31      	ldr	r3, [pc, #196]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054da:	0f1b      	lsrs	r3, r3, #28
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	019b      	lsls	r3, r3, #6
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	3b01      	subs	r3, #1
 80054f6:	041b      	lsls	r3, r3, #16
 80054f8:	431a      	orrs	r2, r3
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	061b      	lsls	r3, r3, #24
 80054fe:	431a      	orrs	r2, r3
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	071b      	lsls	r3, r3, #28
 8005504:	4925      	ldr	r1, [pc, #148]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005514:	2b00      	cmp	r3, #0
 8005516:	d016      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	019b      	lsls	r3, r3, #6
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	085b      	lsrs	r3, r3, #1
 800552a:	3b01      	subs	r3, #1
 800552c:	041b      	lsls	r3, r3, #16
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	061b      	lsls	r3, r3, #24
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	071b      	lsls	r3, r3, #28
 800553e:	4917      	ldr	r1, [pc, #92]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005546:	4b16      	ldr	r3, [pc, #88]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005548:	2201      	movs	r2, #1
 800554a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800554c:	f7fc fc5a 	bl	8001e04 <HAL_GetTick>
 8005550:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005554:	f7fc fc56 	bl	8001e04 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e09f      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005566:	4b0d      	ldr	r3, [pc, #52]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f0      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	2b01      	cmp	r3, #1
 8005576:	f040 8095 	bne.w	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800557a:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005580:	f7fc fc40 	bl	8001e04 <HAL_GetTick>
 8005584:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005586:	e00f      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005588:	f7fc fc3c 	bl	8001e04 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d908      	bls.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e085      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800559a:	bf00      	nop
 800559c:	40023800 	.word	0x40023800
 80055a0:	42470068 	.word	0x42470068
 80055a4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055a8:	4b41      	ldr	r3, [pc, #260]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055b4:	d0e8      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x566>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d009      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d02b      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d127      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80055de:	4b34      	ldr	r3, [pc, #208]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e4:	0c1b      	lsrs	r3, r3, #16
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	3301      	adds	r3, #1
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699a      	ldr	r2, [r3, #24]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	019b      	lsls	r3, r3, #6
 80055fa:	431a      	orrs	r2, r3
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	085b      	lsrs	r3, r3, #1
 8005600:	3b01      	subs	r3, #1
 8005602:	041b      	lsls	r3, r3, #16
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	061b      	lsls	r3, r3, #24
 800560c:	4928      	ldr	r1, [pc, #160]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005614:	4b26      	ldr	r3, [pc, #152]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800561a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	3b01      	subs	r3, #1
 8005624:	021b      	lsls	r3, r3, #8
 8005626:	4922      	ldr	r1, [pc, #136]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01d      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005642:	d118      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005644:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564a:	0e1b      	lsrs	r3, r3, #24
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	019b      	lsls	r3, r3, #6
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	085b      	lsrs	r3, r3, #1
 8005664:	3b01      	subs	r3, #1
 8005666:	041b      	lsls	r3, r3, #16
 8005668:	431a      	orrs	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	061b      	lsls	r3, r3, #24
 800566e:	4910      	ldr	r1, [pc, #64]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005676:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005678:	2201      	movs	r2, #1
 800567a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800567c:	f7fc fbc2 	bl	8001e04 <HAL_GetTick>
 8005680:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005684:	f7fc fbbe 	bl	8001e04 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e007      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800569e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056a2:	d1ef      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3730      	adds	r7, #48	; 0x30
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40023800 	.word	0x40023800
 80056b4:	42470070 	.word	0x42470070

080056b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056bc:	b0ae      	sub	sp, #184	; 0xb8
 80056be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056de:	4bcb      	ldr	r3, [pc, #812]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x354>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
 80056e6:	2b0c      	cmp	r3, #12
 80056e8:	f200 8206 	bhi.w	8005af8 <HAL_RCC_GetSysClockFreq+0x440>
 80056ec:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80056ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f2:	bf00      	nop
 80056f4:	08005729 	.word	0x08005729
 80056f8:	08005af9 	.word	0x08005af9
 80056fc:	08005af9 	.word	0x08005af9
 8005700:	08005af9 	.word	0x08005af9
 8005704:	08005731 	.word	0x08005731
 8005708:	08005af9 	.word	0x08005af9
 800570c:	08005af9 	.word	0x08005af9
 8005710:	08005af9 	.word	0x08005af9
 8005714:	08005739 	.word	0x08005739
 8005718:	08005af9 	.word	0x08005af9
 800571c:	08005af9 	.word	0x08005af9
 8005720:	08005af9 	.word	0x08005af9
 8005724:	08005929 	.word	0x08005929
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005728:	4bb9      	ldr	r3, [pc, #740]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x358>)
 800572a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800572e:	e1e7      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005730:	4bb8      	ldr	r3, [pc, #736]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005736:	e1e3      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005738:	4bb4      	ldr	r3, [pc, #720]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x354>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005744:	4bb1      	ldr	r3, [pc, #708]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d071      	beq.n	8005834 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005750:	4bae      	ldr	r3, [pc, #696]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	099b      	lsrs	r3, r3, #6
 8005756:	2200      	movs	r2, #0
 8005758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800575c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005768:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800576c:	2300      	movs	r3, #0
 800576e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005772:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005776:	4622      	mov	r2, r4
 8005778:	462b      	mov	r3, r5
 800577a:	f04f 0000 	mov.w	r0, #0
 800577e:	f04f 0100 	mov.w	r1, #0
 8005782:	0159      	lsls	r1, r3, #5
 8005784:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005788:	0150      	lsls	r0, r2, #5
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4621      	mov	r1, r4
 8005790:	1a51      	subs	r1, r2, r1
 8005792:	6439      	str	r1, [r7, #64]	; 0x40
 8005794:	4629      	mov	r1, r5
 8005796:	eb63 0301 	sbc.w	r3, r3, r1
 800579a:	647b      	str	r3, [r7, #68]	; 0x44
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80057a8:	4649      	mov	r1, r9
 80057aa:	018b      	lsls	r3, r1, #6
 80057ac:	4641      	mov	r1, r8
 80057ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057b2:	4641      	mov	r1, r8
 80057b4:	018a      	lsls	r2, r1, #6
 80057b6:	4641      	mov	r1, r8
 80057b8:	1a51      	subs	r1, r2, r1
 80057ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80057bc:	4649      	mov	r1, r9
 80057be:	eb63 0301 	sbc.w	r3, r3, r1
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80057d0:	4649      	mov	r1, r9
 80057d2:	00cb      	lsls	r3, r1, #3
 80057d4:	4641      	mov	r1, r8
 80057d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057da:	4641      	mov	r1, r8
 80057dc:	00ca      	lsls	r2, r1, #3
 80057de:	4610      	mov	r0, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	4622      	mov	r2, r4
 80057e6:	189b      	adds	r3, r3, r2
 80057e8:	633b      	str	r3, [r7, #48]	; 0x30
 80057ea:	462b      	mov	r3, r5
 80057ec:	460a      	mov	r2, r1
 80057ee:	eb42 0303 	adc.w	r3, r2, r3
 80057f2:	637b      	str	r3, [r7, #52]	; 0x34
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005800:	4629      	mov	r1, r5
 8005802:	024b      	lsls	r3, r1, #9
 8005804:	4621      	mov	r1, r4
 8005806:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800580a:	4621      	mov	r1, r4
 800580c:	024a      	lsls	r2, r1, #9
 800580e:	4610      	mov	r0, r2
 8005810:	4619      	mov	r1, r3
 8005812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005816:	2200      	movs	r2, #0
 8005818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800581c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005820:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005824:	f7fa fcf4 	bl	8000210 <__aeabi_uldivmod>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4613      	mov	r3, r2
 800582e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005832:	e067      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005834:	4b75      	ldr	r3, [pc, #468]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	099b      	lsrs	r3, r3, #6
 800583a:	2200      	movs	r2, #0
 800583c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005840:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584c:	67bb      	str	r3, [r7, #120]	; 0x78
 800584e:	2300      	movs	r3, #0
 8005850:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005852:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005856:	4622      	mov	r2, r4
 8005858:	462b      	mov	r3, r5
 800585a:	f04f 0000 	mov.w	r0, #0
 800585e:	f04f 0100 	mov.w	r1, #0
 8005862:	0159      	lsls	r1, r3, #5
 8005864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005868:	0150      	lsls	r0, r2, #5
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4621      	mov	r1, r4
 8005870:	1a51      	subs	r1, r2, r1
 8005872:	62b9      	str	r1, [r7, #40]	; 0x28
 8005874:	4629      	mov	r1, r5
 8005876:	eb63 0301 	sbc.w	r3, r3, r1
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005888:	4649      	mov	r1, r9
 800588a:	018b      	lsls	r3, r1, #6
 800588c:	4641      	mov	r1, r8
 800588e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005892:	4641      	mov	r1, r8
 8005894:	018a      	lsls	r2, r1, #6
 8005896:	4641      	mov	r1, r8
 8005898:	ebb2 0a01 	subs.w	sl, r2, r1
 800589c:	4649      	mov	r1, r9
 800589e:	eb63 0b01 	sbc.w	fp, r3, r1
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058b6:	4692      	mov	sl, r2
 80058b8:	469b      	mov	fp, r3
 80058ba:	4623      	mov	r3, r4
 80058bc:	eb1a 0303 	adds.w	r3, sl, r3
 80058c0:	623b      	str	r3, [r7, #32]
 80058c2:	462b      	mov	r3, r5
 80058c4:	eb4b 0303 	adc.w	r3, fp, r3
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80058d6:	4629      	mov	r1, r5
 80058d8:	028b      	lsls	r3, r1, #10
 80058da:	4621      	mov	r1, r4
 80058dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058e0:	4621      	mov	r1, r4
 80058e2:	028a      	lsls	r2, r1, #10
 80058e4:	4610      	mov	r0, r2
 80058e6:	4619      	mov	r1, r3
 80058e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058ec:	2200      	movs	r2, #0
 80058ee:	673b      	str	r3, [r7, #112]	; 0x70
 80058f0:	677a      	str	r2, [r7, #116]	; 0x74
 80058f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80058f6:	f7fa fc8b 	bl	8000210 <__aeabi_uldivmod>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4613      	mov	r3, r2
 8005900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005904:	4b41      	ldr	r3, [pc, #260]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	0c1b      	lsrs	r3, r3, #16
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	3301      	adds	r3, #1
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005916:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800591a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005926:	e0eb      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005928:	4b38      	ldr	r3, [pc, #224]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x354>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005934:	4b35      	ldr	r3, [pc, #212]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d06b      	beq.n	8005a18 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005940:	4b32      	ldr	r3, [pc, #200]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x354>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	099b      	lsrs	r3, r3, #6
 8005946:	2200      	movs	r2, #0
 8005948:	66bb      	str	r3, [r7, #104]	; 0x68
 800594a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800594c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800594e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005952:	663b      	str	r3, [r7, #96]	; 0x60
 8005954:	2300      	movs	r3, #0
 8005956:	667b      	str	r3, [r7, #100]	; 0x64
 8005958:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800595c:	4622      	mov	r2, r4
 800595e:	462b      	mov	r3, r5
 8005960:	f04f 0000 	mov.w	r0, #0
 8005964:	f04f 0100 	mov.w	r1, #0
 8005968:	0159      	lsls	r1, r3, #5
 800596a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800596e:	0150      	lsls	r0, r2, #5
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4621      	mov	r1, r4
 8005976:	1a51      	subs	r1, r2, r1
 8005978:	61b9      	str	r1, [r7, #24]
 800597a:	4629      	mov	r1, r5
 800597c:	eb63 0301 	sbc.w	r3, r3, r1
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800598e:	4659      	mov	r1, fp
 8005990:	018b      	lsls	r3, r1, #6
 8005992:	4651      	mov	r1, sl
 8005994:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005998:	4651      	mov	r1, sl
 800599a:	018a      	lsls	r2, r1, #6
 800599c:	4651      	mov	r1, sl
 800599e:	ebb2 0801 	subs.w	r8, r2, r1
 80059a2:	4659      	mov	r1, fp
 80059a4:	eb63 0901 	sbc.w	r9, r3, r1
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059bc:	4690      	mov	r8, r2
 80059be:	4699      	mov	r9, r3
 80059c0:	4623      	mov	r3, r4
 80059c2:	eb18 0303 	adds.w	r3, r8, r3
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	462b      	mov	r3, r5
 80059ca:	eb49 0303 	adc.w	r3, r9, r3
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80059dc:	4629      	mov	r1, r5
 80059de:	024b      	lsls	r3, r1, #9
 80059e0:	4621      	mov	r1, r4
 80059e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059e6:	4621      	mov	r1, r4
 80059e8:	024a      	lsls	r2, r1, #9
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059f2:	2200      	movs	r2, #0
 80059f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80059f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80059f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059fc:	f7fa fc08 	bl	8000210 <__aeabi_uldivmod>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4613      	mov	r3, r2
 8005a06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a0a:	e065      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x420>
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	00f42400 	.word	0x00f42400
 8005a14:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a18:	4b3d      	ldr	r3, [pc, #244]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x458>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	099b      	lsrs	r3, r3, #6
 8005a1e:	2200      	movs	r2, #0
 8005a20:	4618      	mov	r0, r3
 8005a22:	4611      	mov	r1, r2
 8005a24:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a28:	653b      	str	r3, [r7, #80]	; 0x50
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	657b      	str	r3, [r7, #84]	; 0x54
 8005a2e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005a32:	4642      	mov	r2, r8
 8005a34:	464b      	mov	r3, r9
 8005a36:	f04f 0000 	mov.w	r0, #0
 8005a3a:	f04f 0100 	mov.w	r1, #0
 8005a3e:	0159      	lsls	r1, r3, #5
 8005a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a44:	0150      	lsls	r0, r2, #5
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	1a51      	subs	r1, r2, r1
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	4649      	mov	r1, r9
 8005a52:	eb63 0301 	sbc.w	r3, r3, r1
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005a64:	4659      	mov	r1, fp
 8005a66:	018b      	lsls	r3, r1, #6
 8005a68:	4651      	mov	r1, sl
 8005a6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a6e:	4651      	mov	r1, sl
 8005a70:	018a      	lsls	r2, r1, #6
 8005a72:	4651      	mov	r1, sl
 8005a74:	1a54      	subs	r4, r2, r1
 8005a76:	4659      	mov	r1, fp
 8005a78:	eb63 0501 	sbc.w	r5, r3, r1
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	00eb      	lsls	r3, r5, #3
 8005a86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a8a:	00e2      	lsls	r2, r4, #3
 8005a8c:	4614      	mov	r4, r2
 8005a8e:	461d      	mov	r5, r3
 8005a90:	4643      	mov	r3, r8
 8005a92:	18e3      	adds	r3, r4, r3
 8005a94:	603b      	str	r3, [r7, #0]
 8005a96:	464b      	mov	r3, r9
 8005a98:	eb45 0303 	adc.w	r3, r5, r3
 8005a9c:	607b      	str	r3, [r7, #4]
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005aaa:	4629      	mov	r1, r5
 8005aac:	028b      	lsls	r3, r1, #10
 8005aae:	4621      	mov	r1, r4
 8005ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	028a      	lsls	r2, r1, #10
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4619      	mov	r1, r3
 8005abc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005ac6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005aca:	f7fa fba1 	bl	8000210 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005ad8:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x458>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	0f1b      	lsrs	r3, r3, #28
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005ae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005aea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005af6:	e003      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005afe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	37b8      	adds	r7, #184	; 0xb8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b0e:	bf00      	nop
 8005b10:	40023800 	.word	0x40023800
 8005b14:	00f42400 	.word	0x00f42400

08005b18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e28d      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 8083 	beq.w	8005c3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005b38:	4b94      	ldr	r3, [pc, #592]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 030c 	and.w	r3, r3, #12
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d019      	beq.n	8005b78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005b44:	4b91      	ldr	r3, [pc, #580]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d106      	bne.n	8005b5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005b50:	4b8e      	ldr	r3, [pc, #568]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b5c:	d00c      	beq.n	8005b78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b5e:	4b8b      	ldr	r3, [pc, #556]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	d112      	bne.n	8005b90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b6a:	4b88      	ldr	r3, [pc, #544]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b76:	d10b      	bne.n	8005b90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b78:	4b84      	ldr	r3, [pc, #528]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d05b      	beq.n	8005c3c <HAL_RCC_OscConfig+0x124>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d157      	bne.n	8005c3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e25a      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b98:	d106      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x90>
 8005b9a:	4b7c      	ldr	r3, [pc, #496]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a7b      	ldr	r2, [pc, #492]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	e01d      	b.n	8005be4 <HAL_RCC_OscConfig+0xcc>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bb0:	d10c      	bne.n	8005bcc <HAL_RCC_OscConfig+0xb4>
 8005bb2:	4b76      	ldr	r3, [pc, #472]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a75      	ldr	r2, [pc, #468]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	4b73      	ldr	r3, [pc, #460]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a72      	ldr	r2, [pc, #456]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	e00b      	b.n	8005be4 <HAL_RCC_OscConfig+0xcc>
 8005bcc:	4b6f      	ldr	r3, [pc, #444]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a6e      	ldr	r2, [pc, #440]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	4b6c      	ldr	r3, [pc, #432]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a6b      	ldr	r2, [pc, #428]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d013      	beq.n	8005c14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fc f90a 	bl	8001e04 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bf4:	f7fc f906 	bl	8001e04 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b64      	cmp	r3, #100	; 0x64
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e21f      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c06:	4b61      	ldr	r3, [pc, #388]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f0      	beq.n	8005bf4 <HAL_RCC_OscConfig+0xdc>
 8005c12:	e014      	b.n	8005c3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c14:	f7fc f8f6 	bl	8001e04 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c1c:	f7fc f8f2 	bl	8001e04 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b64      	cmp	r3, #100	; 0x64
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e20b      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c2e:	4b57      	ldr	r3, [pc, #348]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1f0      	bne.n	8005c1c <HAL_RCC_OscConfig+0x104>
 8005c3a:	e000      	b.n	8005c3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d06f      	beq.n	8005d2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005c4a:	4b50      	ldr	r3, [pc, #320]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d017      	beq.n	8005c86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005c56:	4b4d      	ldr	r3, [pc, #308]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d105      	bne.n	8005c6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005c62:	4b4a      	ldr	r3, [pc, #296]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00b      	beq.n	8005c86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c6e:	4b47      	ldr	r3, [pc, #284]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005c76:	2b0c      	cmp	r3, #12
 8005c78:	d11c      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c7a:	4b44      	ldr	r3, [pc, #272]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d116      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c86:	4b41      	ldr	r3, [pc, #260]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <HAL_RCC_OscConfig+0x186>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d001      	beq.n	8005c9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e1d3      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c9e:	4b3b      	ldr	r3, [pc, #236]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	4937      	ldr	r1, [pc, #220]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cb2:	e03a      	b.n	8005d2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d020      	beq.n	8005cfe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cbc:	4b34      	ldr	r3, [pc, #208]	; (8005d90 <HAL_RCC_OscConfig+0x278>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc2:	f7fc f89f 	bl	8001e04 <HAL_GetTick>
 8005cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cc8:	e008      	b.n	8005cdc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cca:	f7fc f89b 	bl	8001e04 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e1b4      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cdc:	4b2b      	ldr	r3, [pc, #172]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0f0      	beq.n	8005cca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce8:	4b28      	ldr	r3, [pc, #160]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	4925      	ldr	r1, [pc, #148]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	600b      	str	r3, [r1, #0]
 8005cfc:	e015      	b.n	8005d2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cfe:	4b24      	ldr	r3, [pc, #144]	; (8005d90 <HAL_RCC_OscConfig+0x278>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d04:	f7fc f87e 	bl	8001e04 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d0c:	f7fc f87a 	bl	8001e04 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e193      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d1e:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f0      	bne.n	8005d0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d036      	beq.n	8005da4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d016      	beq.n	8005d6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d3e:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <HAL_RCC_OscConfig+0x27c>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d44:	f7fc f85e 	bl	8001e04 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d4c:	f7fc f85a 	bl	8001e04 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e173      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <HAL_RCC_OscConfig+0x274>)
 8005d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0f0      	beq.n	8005d4c <HAL_RCC_OscConfig+0x234>
 8005d6a:	e01b      	b.n	8005da4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d6c:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <HAL_RCC_OscConfig+0x27c>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d72:	f7fc f847 	bl	8001e04 <HAL_GetTick>
 8005d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d78:	e00e      	b.n	8005d98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d7a:	f7fc f843 	bl	8001e04 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d907      	bls.n	8005d98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e15c      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	42470000 	.word	0x42470000
 8005d94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d98:	4b8a      	ldr	r3, [pc, #552]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1ea      	bne.n	8005d7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8097 	beq.w	8005ee0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005db2:	2300      	movs	r3, #0
 8005db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005db6:	4b83      	ldr	r3, [pc, #524]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10f      	bne.n	8005de2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	4b7f      	ldr	r3, [pc, #508]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	4a7e      	ldr	r2, [pc, #504]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8005dd2:	4b7c      	ldr	r3, [pc, #496]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dda:	60bb      	str	r3, [r7, #8]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dde:	2301      	movs	r3, #1
 8005de0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de2:	4b79      	ldr	r3, [pc, #484]	; (8005fc8 <HAL_RCC_OscConfig+0x4b0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d118      	bne.n	8005e20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dee:	4b76      	ldr	r3, [pc, #472]	; (8005fc8 <HAL_RCC_OscConfig+0x4b0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a75      	ldr	r2, [pc, #468]	; (8005fc8 <HAL_RCC_OscConfig+0x4b0>)
 8005df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dfa:	f7fc f803 	bl	8001e04 <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e02:	f7fb ffff 	bl	8001e04 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e118      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e14:	4b6c      	ldr	r3, [pc, #432]	; (8005fc8 <HAL_RCC_OscConfig+0x4b0>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d106      	bne.n	8005e36 <HAL_RCC_OscConfig+0x31e>
 8005e28:	4b66      	ldr	r3, [pc, #408]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2c:	4a65      	ldr	r2, [pc, #404]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005e2e:	f043 0301 	orr.w	r3, r3, #1
 8005e32:	6713      	str	r3, [r2, #112]	; 0x70
 8005e34:	e01c      	b.n	8005e70 <HAL_RCC_OscConfig+0x358>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	2b05      	cmp	r3, #5
 8005e3c:	d10c      	bne.n	8005e58 <HAL_RCC_OscConfig+0x340>
 8005e3e:	4b61      	ldr	r3, [pc, #388]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e42:	4a60      	ldr	r2, [pc, #384]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005e44:	f043 0304 	orr.w	r3, r3, #4
 8005e48:	6713      	str	r3, [r2, #112]	; 0x70
 8005e4a:	4b5e      	ldr	r3, [pc, #376]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	4a5d      	ldr	r2, [pc, #372]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005e50:	f043 0301 	orr.w	r3, r3, #1
 8005e54:	6713      	str	r3, [r2, #112]	; 0x70
 8005e56:	e00b      	b.n	8005e70 <HAL_RCC_OscConfig+0x358>
 8005e58:	4b5a      	ldr	r3, [pc, #360]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5c:	4a59      	ldr	r2, [pc, #356]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005e5e:	f023 0301 	bic.w	r3, r3, #1
 8005e62:	6713      	str	r3, [r2, #112]	; 0x70
 8005e64:	4b57      	ldr	r3, [pc, #348]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e68:	4a56      	ldr	r2, [pc, #344]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005e6a:	f023 0304 	bic.w	r3, r3, #4
 8005e6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d015      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e78:	f7fb ffc4 	bl	8001e04 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7e:	e00a      	b.n	8005e96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e80:	f7fb ffc0 	bl	8001e04 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e0d7      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e96:	4b4b      	ldr	r3, [pc, #300]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0ee      	beq.n	8005e80 <HAL_RCC_OscConfig+0x368>
 8005ea2:	e014      	b.n	8005ece <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea4:	f7fb ffae 	bl	8001e04 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eaa:	e00a      	b.n	8005ec2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eac:	f7fb ffaa 	bl	8001e04 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e0c1      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ec2:	4b40      	ldr	r3, [pc, #256]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1ee      	bne.n	8005eac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d105      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ed4:	4b3b      	ldr	r3, [pc, #236]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	4a3a      	ldr	r2, [pc, #232]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ede:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80ad 	beq.w	8006044 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eea:	4b36      	ldr	r3, [pc, #216]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 030c 	and.w	r3, r3, #12
 8005ef2:	2b08      	cmp	r3, #8
 8005ef4:	d060      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d145      	bne.n	8005f8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efe:	4b33      	ldr	r3, [pc, #204]	; (8005fcc <HAL_RCC_OscConfig+0x4b4>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f04:	f7fb ff7e 	bl	8001e04 <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f0c:	f7fb ff7a 	bl	8001e04 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e093      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f1e:	4b29      	ldr	r3, [pc, #164]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f0      	bne.n	8005f0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69da      	ldr	r2, [r3, #28]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	019b      	lsls	r3, r3, #6
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	3b01      	subs	r3, #1
 8005f44:	041b      	lsls	r3, r3, #16
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	061b      	lsls	r3, r3, #24
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	071b      	lsls	r3, r3, #28
 8005f56:	491b      	ldr	r1, [pc, #108]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f5c:	4b1b      	ldr	r3, [pc, #108]	; (8005fcc <HAL_RCC_OscConfig+0x4b4>)
 8005f5e:	2201      	movs	r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f62:	f7fb ff4f 	bl	8001e04 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f6a:	f7fb ff4b 	bl	8001e04 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e064      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f7c:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0f0      	beq.n	8005f6a <HAL_RCC_OscConfig+0x452>
 8005f88:	e05c      	b.n	8006044 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8a:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <HAL_RCC_OscConfig+0x4b4>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f90:	f7fb ff38 	bl	8001e04 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f98:	f7fb ff34 	bl	8001e04 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e04d      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <HAL_RCC_OscConfig+0x4ac>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0x480>
 8005fb6:	e045      	b.n	8006044 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d107      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e040      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	40007000 	.word	0x40007000
 8005fcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fd0:	4b1f      	ldr	r3, [pc, #124]	; (8006050 <HAL_RCC_OscConfig+0x538>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d030      	beq.n	8006040 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d129      	bne.n	8006040 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d122      	bne.n	8006040 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006000:	4013      	ands	r3, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006006:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006008:	4293      	cmp	r3, r2
 800600a:	d119      	bne.n	8006040 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	3b01      	subs	r3, #1
 800601a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800601c:	429a      	cmp	r2, r3
 800601e:	d10f      	bne.n	8006040 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800602c:	429a      	cmp	r2, r3
 800602e:	d107      	bne.n	8006040 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800603c:	429a      	cmp	r2, r3
 800603e:	d001      	beq.n	8006044 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	40023800 	.word	0x40023800

08006054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e041      	b.n	80060ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fb fad4 	bl	8001628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3304      	adds	r3, #4
 8006090:	4619      	mov	r1, r3
 8006092:	4610      	mov	r0, r2
 8006094:	f000 fbd6 	bl	8006844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b01      	cmp	r3, #1
 8006106:	d001      	beq.n	800610c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e04e      	b.n	80061aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0201 	orr.w	r2, r2, #1
 8006122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a23      	ldr	r2, [pc, #140]	; (80061b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d022      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006136:	d01d      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a1f      	ldr	r2, [pc, #124]	; (80061bc <HAL_TIM_Base_Start_IT+0xc8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d018      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a1e      	ldr	r2, [pc, #120]	; (80061c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d013      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a1c      	ldr	r2, [pc, #112]	; (80061c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00e      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1b      	ldr	r2, [pc, #108]	; (80061c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d009      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a19      	ldr	r2, [pc, #100]	; (80061cc <HAL_TIM_Base_Start_IT+0xd8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d004      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x80>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a18      	ldr	r2, [pc, #96]	; (80061d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d111      	bne.n	8006198 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b06      	cmp	r3, #6
 8006184:	d010      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 0201 	orr.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006196:	e007      	b.n	80061a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0201 	orr.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40010000 	.word	0x40010000
 80061bc:	40000400 	.word	0x40000400
 80061c0:	40000800 	.word	0x40000800
 80061c4:	40000c00 	.word	0x40000c00
 80061c8:	40010400 	.word	0x40010400
 80061cc:	40014000 	.word	0x40014000
 80061d0:	40001800 	.word	0x40001800

080061d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0201 	bic.w	r2, r2, #1
 80061ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6a1a      	ldr	r2, [r3, #32]
 80061f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10f      	bne.n	800621c <HAL_TIM_Base_Stop_IT+0x48>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6a1a      	ldr	r2, [r3, #32]
 8006202:	f240 4344 	movw	r3, #1092	; 0x444
 8006206:	4013      	ands	r3, r2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d107      	bne.n	800621c <HAL_TIM_Base_Stop_IT+0x48>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0201 	bic.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e041      	b.n	80062c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d106      	bne.n	800625e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f839 	bl	80062d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f000 fae7 	bl	8006844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d122      	bne.n	8006340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b02      	cmp	r3, #2
 8006306:	d11b      	bne.n	8006340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0202 	mvn.w	r2, #2
 8006310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fa77 	bl	800681a <HAL_TIM_IC_CaptureCallback>
 800632c:	e005      	b.n	800633a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa69 	bl	8006806 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7fa ff85 	bl	8001244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b04      	cmp	r3, #4
 800634c:	d122      	bne.n	8006394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b04      	cmp	r3, #4
 800635a:	d11b      	bne.n	8006394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0204 	mvn.w	r2, #4
 8006364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2202      	movs	r2, #2
 800636a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fa4d 	bl	800681a <HAL_TIM_IC_CaptureCallback>
 8006380:	e005      	b.n	800638e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fa3f 	bl	8006806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7fa ff5b 	bl	8001244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0308 	and.w	r3, r3, #8
 800639e:	2b08      	cmp	r3, #8
 80063a0:	d122      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d11b      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f06f 0208 	mvn.w	r2, #8
 80063b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2204      	movs	r2, #4
 80063be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa23 	bl	800681a <HAL_TIM_IC_CaptureCallback>
 80063d4:	e005      	b.n	80063e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fa15 	bl	8006806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7fa ff31 	bl	8001244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b10      	cmp	r3, #16
 80063f4:	d122      	bne.n	800643c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b10      	cmp	r3, #16
 8006402:	d11b      	bne.n	800643c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f06f 0210 	mvn.w	r2, #16
 800640c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2208      	movs	r2, #8
 8006412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f9f9 	bl	800681a <HAL_TIM_IC_CaptureCallback>
 8006428:	e005      	b.n	8006436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f9eb 	bl	8006806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7fa ff07 	bl	8001244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b01      	cmp	r3, #1
 8006448:	d10e      	bne.n	8006468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d107      	bne.n	8006468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f06f 0201 	mvn.w	r2, #1
 8006460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fa fe8a 	bl	800117c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006472:	2b80      	cmp	r3, #128	; 0x80
 8006474:	d10e      	bne.n	8006494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006480:	2b80      	cmp	r3, #128	; 0x80
 8006482:	d107      	bne.n	8006494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800648c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fd9a 	bl	8006fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649e:	2b40      	cmp	r3, #64	; 0x40
 80064a0:	d10e      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ac:	2b40      	cmp	r3, #64	; 0x40
 80064ae:	d107      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f9b7 	bl	800682e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	d10e      	bne.n	80064ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d107      	bne.n	80064ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0220 	mvn.w	r2, #32
 80064e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fd64 	bl	8006fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064ec:	bf00      	nop
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800650e:	2302      	movs	r3, #2
 8006510:	e0ae      	b.n	8006670 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b0c      	cmp	r3, #12
 800651e:	f200 809f 	bhi.w	8006660 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006522:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	0800655d 	.word	0x0800655d
 800652c:	08006661 	.word	0x08006661
 8006530:	08006661 	.word	0x08006661
 8006534:	08006661 	.word	0x08006661
 8006538:	0800659d 	.word	0x0800659d
 800653c:	08006661 	.word	0x08006661
 8006540:	08006661 	.word	0x08006661
 8006544:	08006661 	.word	0x08006661
 8006548:	080065df 	.word	0x080065df
 800654c:	08006661 	.word	0x08006661
 8006550:	08006661 	.word	0x08006661
 8006554:	08006661 	.word	0x08006661
 8006558:	0800661f 	.word	0x0800661f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68b9      	ldr	r1, [r7, #8]
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fa0e 	bl	8006984 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699a      	ldr	r2, [r3, #24]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0208 	orr.w	r2, r2, #8
 8006576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699a      	ldr	r2, [r3, #24]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0204 	bic.w	r2, r2, #4
 8006586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6999      	ldr	r1, [r3, #24]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	691a      	ldr	r2, [r3, #16]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	619a      	str	r2, [r3, #24]
      break;
 800659a:	e064      	b.n	8006666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fa5e 	bl	8006a64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699a      	ldr	r2, [r3, #24]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6999      	ldr	r1, [r3, #24]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	021a      	lsls	r2, r3, #8
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	619a      	str	r2, [r3, #24]
      break;
 80065dc:	e043      	b.n	8006666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fab3 	bl	8006b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	69da      	ldr	r2, [r3, #28]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 0208 	orr.w	r2, r2, #8
 80065f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	69da      	ldr	r2, [r3, #28]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0204 	bic.w	r2, r2, #4
 8006608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69d9      	ldr	r1, [r3, #28]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	61da      	str	r2, [r3, #28]
      break;
 800661c:	e023      	b.n	8006666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	4618      	mov	r0, r3
 8006626:	f000 fb07 	bl	8006c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69da      	ldr	r2, [r3, #28]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69da      	ldr	r2, [r3, #28]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69d9      	ldr	r1, [r3, #28]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	021a      	lsls	r2, r3, #8
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	61da      	str	r2, [r3, #28]
      break;
 800665e:	e002      	b.n	8006666 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	75fb      	strb	r3, [r7, #23]
      break;
 8006664:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800666e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_TIM_ConfigClockSource+0x1c>
 8006690:	2302      	movs	r3, #2
 8006692:	e0b4      	b.n	80067fe <HAL_TIM_ConfigClockSource+0x186>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066cc:	d03e      	beq.n	800674c <HAL_TIM_ConfigClockSource+0xd4>
 80066ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d2:	f200 8087 	bhi.w	80067e4 <HAL_TIM_ConfigClockSource+0x16c>
 80066d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066da:	f000 8086 	beq.w	80067ea <HAL_TIM_ConfigClockSource+0x172>
 80066de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e2:	d87f      	bhi.n	80067e4 <HAL_TIM_ConfigClockSource+0x16c>
 80066e4:	2b70      	cmp	r3, #112	; 0x70
 80066e6:	d01a      	beq.n	800671e <HAL_TIM_ConfigClockSource+0xa6>
 80066e8:	2b70      	cmp	r3, #112	; 0x70
 80066ea:	d87b      	bhi.n	80067e4 <HAL_TIM_ConfigClockSource+0x16c>
 80066ec:	2b60      	cmp	r3, #96	; 0x60
 80066ee:	d050      	beq.n	8006792 <HAL_TIM_ConfigClockSource+0x11a>
 80066f0:	2b60      	cmp	r3, #96	; 0x60
 80066f2:	d877      	bhi.n	80067e4 <HAL_TIM_ConfigClockSource+0x16c>
 80066f4:	2b50      	cmp	r3, #80	; 0x50
 80066f6:	d03c      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0xfa>
 80066f8:	2b50      	cmp	r3, #80	; 0x50
 80066fa:	d873      	bhi.n	80067e4 <HAL_TIM_ConfigClockSource+0x16c>
 80066fc:	2b40      	cmp	r3, #64	; 0x40
 80066fe:	d058      	beq.n	80067b2 <HAL_TIM_ConfigClockSource+0x13a>
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d86f      	bhi.n	80067e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006704:	2b30      	cmp	r3, #48	; 0x30
 8006706:	d064      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006708:	2b30      	cmp	r3, #48	; 0x30
 800670a:	d86b      	bhi.n	80067e4 <HAL_TIM_ConfigClockSource+0x16c>
 800670c:	2b20      	cmp	r3, #32
 800670e:	d060      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006710:	2b20      	cmp	r3, #32
 8006712:	d867      	bhi.n	80067e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d05c      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006718:	2b10      	cmp	r3, #16
 800671a:	d05a      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0x15a>
 800671c:	e062      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6899      	ldr	r1, [r3, #8]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f000 fb53 	bl	8006dd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	609a      	str	r2, [r3, #8]
      break;
 800674a:	e04f      	b.n	80067ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	6899      	ldr	r1, [r3, #8]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f000 fb3c 	bl	8006dd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800676e:	609a      	str	r2, [r3, #8]
      break;
 8006770:	e03c      	b.n	80067ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6818      	ldr	r0, [r3, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	6859      	ldr	r1, [r3, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	461a      	mov	r2, r3
 8006780:	f000 fab0 	bl	8006ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2150      	movs	r1, #80	; 0x50
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fb09 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006790:	e02c      	b.n	80067ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6859      	ldr	r1, [r3, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	461a      	mov	r2, r3
 80067a0:	f000 facf 	bl	8006d42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2160      	movs	r1, #96	; 0x60
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 faf9 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 80067b0:	e01c      	b.n	80067ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	6859      	ldr	r1, [r3, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	461a      	mov	r2, r3
 80067c0:	f000 fa90 	bl	8006ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2140      	movs	r1, #64	; 0x40
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fae9 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 80067d0:	e00c      	b.n	80067ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4619      	mov	r1, r3
 80067dc:	4610      	mov	r0, r2
 80067de:	f000 fae0 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 80067e2:	e003      	b.n	80067ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	73fb      	strb	r3, [r7, #15]
      break;
 80067e8:	e000      	b.n	80067ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
	...

08006844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a40      	ldr	r2, [pc, #256]	; (8006958 <TIM_Base_SetConfig+0x114>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d013      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006862:	d00f      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a3d      	ldr	r2, [pc, #244]	; (800695c <TIM_Base_SetConfig+0x118>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00b      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a3c      	ldr	r2, [pc, #240]	; (8006960 <TIM_Base_SetConfig+0x11c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d007      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a3b      	ldr	r2, [pc, #236]	; (8006964 <TIM_Base_SetConfig+0x120>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_Base_SetConfig+0x40>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a3a      	ldr	r2, [pc, #232]	; (8006968 <TIM_Base_SetConfig+0x124>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d108      	bne.n	8006896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a2f      	ldr	r2, [pc, #188]	; (8006958 <TIM_Base_SetConfig+0x114>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d02b      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a4:	d027      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a2c      	ldr	r2, [pc, #176]	; (800695c <TIM_Base_SetConfig+0x118>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d023      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a2b      	ldr	r2, [pc, #172]	; (8006960 <TIM_Base_SetConfig+0x11c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d01f      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a2a      	ldr	r2, [pc, #168]	; (8006964 <TIM_Base_SetConfig+0x120>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d01b      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a29      	ldr	r2, [pc, #164]	; (8006968 <TIM_Base_SetConfig+0x124>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d017      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a28      	ldr	r2, [pc, #160]	; (800696c <TIM_Base_SetConfig+0x128>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d013      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a27      	ldr	r2, [pc, #156]	; (8006970 <TIM_Base_SetConfig+0x12c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00f      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a26      	ldr	r2, [pc, #152]	; (8006974 <TIM_Base_SetConfig+0x130>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00b      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a25      	ldr	r2, [pc, #148]	; (8006978 <TIM_Base_SetConfig+0x134>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d007      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a24      	ldr	r2, [pc, #144]	; (800697c <TIM_Base_SetConfig+0x138>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d003      	beq.n	80068f6 <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a23      	ldr	r2, [pc, #140]	; (8006980 <TIM_Base_SetConfig+0x13c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d108      	bne.n	8006908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4313      	orrs	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a0a      	ldr	r2, [pc, #40]	; (8006958 <TIM_Base_SetConfig+0x114>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d003      	beq.n	800693c <TIM_Base_SetConfig+0xf8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a0c      	ldr	r2, [pc, #48]	; (8006968 <TIM_Base_SetConfig+0x124>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d103      	bne.n	8006944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	691a      	ldr	r2, [r3, #16]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	615a      	str	r2, [r3, #20]
}
 800694a:	bf00      	nop
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	40010000 	.word	0x40010000
 800695c:	40000400 	.word	0x40000400
 8006960:	40000800 	.word	0x40000800
 8006964:	40000c00 	.word	0x40000c00
 8006968:	40010400 	.word	0x40010400
 800696c:	40014000 	.word	0x40014000
 8006970:	40014400 	.word	0x40014400
 8006974:	40014800 	.word	0x40014800
 8006978:	40001800 	.word	0x40001800
 800697c:	40001c00 	.word	0x40001c00
 8006980:	40002000 	.word	0x40002000

08006984 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	f023 0201 	bic.w	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0303 	bic.w	r3, r3, #3
 80069ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f023 0302 	bic.w	r3, r3, #2
 80069cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a20      	ldr	r2, [pc, #128]	; (8006a5c <TIM_OC1_SetConfig+0xd8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_OC1_SetConfig+0x64>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a1f      	ldr	r2, [pc, #124]	; (8006a60 <TIM_OC1_SetConfig+0xdc>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d10c      	bne.n	8006a02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f023 0308 	bic.w	r3, r3, #8
 80069ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f023 0304 	bic.w	r3, r3, #4
 8006a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <TIM_OC1_SetConfig+0xd8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d003      	beq.n	8006a12 <TIM_OC1_SetConfig+0x8e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a14      	ldr	r2, [pc, #80]	; (8006a60 <TIM_OC1_SetConfig+0xdc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d111      	bne.n	8006a36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	621a      	str	r2, [r3, #32]
}
 8006a50:	bf00      	nop
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	40010000 	.word	0x40010000
 8006a60:	40010400 	.word	0x40010400

08006a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	f023 0210 	bic.w	r2, r3, #16
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f023 0320 	bic.w	r3, r3, #32
 8006aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a22      	ldr	r2, [pc, #136]	; (8006b48 <TIM_OC2_SetConfig+0xe4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_OC2_SetConfig+0x68>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a21      	ldr	r2, [pc, #132]	; (8006b4c <TIM_OC2_SetConfig+0xe8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d10d      	bne.n	8006ae8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a17      	ldr	r2, [pc, #92]	; (8006b48 <TIM_OC2_SetConfig+0xe4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d003      	beq.n	8006af8 <TIM_OC2_SetConfig+0x94>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a16      	ldr	r2, [pc, #88]	; (8006b4c <TIM_OC2_SetConfig+0xe8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d113      	bne.n	8006b20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40010000 	.word	0x40010000
 8006b4c:	40010400 	.word	0x40010400

08006b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0303 	bic.w	r3, r3, #3
 8006b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a21      	ldr	r2, [pc, #132]	; (8006c30 <TIM_OC3_SetConfig+0xe0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d003      	beq.n	8006bb6 <TIM_OC3_SetConfig+0x66>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a20      	ldr	r2, [pc, #128]	; (8006c34 <TIM_OC3_SetConfig+0xe4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d10d      	bne.n	8006bd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a16      	ldr	r2, [pc, #88]	; (8006c30 <TIM_OC3_SetConfig+0xe0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d003      	beq.n	8006be2 <TIM_OC3_SetConfig+0x92>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a15      	ldr	r2, [pc, #84]	; (8006c34 <TIM_OC3_SetConfig+0xe4>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d113      	bne.n	8006c0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	621a      	str	r2, [r3, #32]
}
 8006c24:	bf00      	nop
 8006c26:	371c      	adds	r7, #28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	40010000 	.word	0x40010000
 8006c34:	40010400 	.word	0x40010400

08006c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	031b      	lsls	r3, r3, #12
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a12      	ldr	r2, [pc, #72]	; (8006cdc <TIM_OC4_SetConfig+0xa4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d003      	beq.n	8006ca0 <TIM_OC4_SetConfig+0x68>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a11      	ldr	r2, [pc, #68]	; (8006ce0 <TIM_OC4_SetConfig+0xa8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d109      	bne.n	8006cb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	019b      	lsls	r3, r3, #6
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	621a      	str	r2, [r3, #32]
}
 8006cce:	bf00      	nop
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	40010000 	.word	0x40010000
 8006ce0:	40010400 	.word	0x40010400

08006ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	f023 0201 	bic.w	r2, r3, #1
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f023 030a 	bic.w	r3, r3, #10
 8006d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	621a      	str	r2, [r3, #32]
}
 8006d36:	bf00      	nop
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b087      	sub	sp, #28
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f023 0210 	bic.w	r2, r3, #16
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	031b      	lsls	r3, r3, #12
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	621a      	str	r2, [r3, #32]
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f043 0307 	orr.w	r3, r3, #7
 8006dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	609a      	str	r2, [r3, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	021a      	lsls	r2, r3, #8
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	609a      	str	r2, [r3, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e05a      	b.n	8006ee6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a21      	ldr	r2, [pc, #132]	; (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d022      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7c:	d01d      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d018      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1b      	ldr	r2, [pc, #108]	; (8006efc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1a      	ldr	r2, [pc, #104]	; (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00e      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a18      	ldr	r2, [pc, #96]	; (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a17      	ldr	r2, [pc, #92]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a15      	ldr	r2, [pc, #84]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d10c      	bne.n	8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40010000 	.word	0x40010000
 8006ef8:	40000400 	.word	0x40000400
 8006efc:	40000800 	.word	0x40000800
 8006f00:	40000c00 	.word	0x40000c00
 8006f04:	40010400 	.word	0x40010400
 8006f08:	40014000 	.word	0x40014000
 8006f0c:	40001800 	.word	0x40001800

08006f10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e03d      	b.n	8006fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fdc:	b084      	sub	sp, #16
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	f107 001c 	add.w	r0, r7, #28
 8006fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d122      	bne.n	800703a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800701c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800701e:	2b01      	cmp	r3, #1
 8007020:	d105      	bne.n	800702e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f001 fbe8 	bl	8008804 <USB_CoreReset>
 8007034:	4603      	mov	r3, r0
 8007036:	73fb      	strb	r3, [r7, #15]
 8007038:	e01a      	b.n	8007070 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f001 fbdc 	bl	8008804 <USB_CoreReset>
 800704c:	4603      	mov	r3, r0
 800704e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
 8007062:	e005      	b.n	8007070 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	2b01      	cmp	r3, #1
 8007074:	d10b      	bne.n	800708e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f043 0206 	orr.w	r2, r3, #6
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f043 0220 	orr.w	r2, r3, #32
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800709a:	b004      	add	sp, #16
 800709c:	4770      	bx	lr
	...

080070a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d165      	bne.n	8007180 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4a41      	ldr	r2, [pc, #260]	; (80071bc <USB_SetTurnaroundTime+0x11c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d906      	bls.n	80070ca <USB_SetTurnaroundTime+0x2a>
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4a40      	ldr	r2, [pc, #256]	; (80071c0 <USB_SetTurnaroundTime+0x120>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d202      	bcs.n	80070ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80070c4:	230f      	movs	r3, #15
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	e062      	b.n	8007190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	4a3c      	ldr	r2, [pc, #240]	; (80071c0 <USB_SetTurnaroundTime+0x120>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d306      	bcc.n	80070e0 <USB_SetTurnaroundTime+0x40>
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	4a3b      	ldr	r2, [pc, #236]	; (80071c4 <USB_SetTurnaroundTime+0x124>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d202      	bcs.n	80070e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80070da:	230e      	movs	r3, #14
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	e057      	b.n	8007190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4a38      	ldr	r2, [pc, #224]	; (80071c4 <USB_SetTurnaroundTime+0x124>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d306      	bcc.n	80070f6 <USB_SetTurnaroundTime+0x56>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	4a37      	ldr	r2, [pc, #220]	; (80071c8 <USB_SetTurnaroundTime+0x128>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d202      	bcs.n	80070f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80070f0:	230d      	movs	r3, #13
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	e04c      	b.n	8007190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	4a33      	ldr	r2, [pc, #204]	; (80071c8 <USB_SetTurnaroundTime+0x128>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d306      	bcc.n	800710c <USB_SetTurnaroundTime+0x6c>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	4a32      	ldr	r2, [pc, #200]	; (80071cc <USB_SetTurnaroundTime+0x12c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d802      	bhi.n	800710c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007106:	230c      	movs	r3, #12
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	e041      	b.n	8007190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	4a2f      	ldr	r2, [pc, #188]	; (80071cc <USB_SetTurnaroundTime+0x12c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d906      	bls.n	8007122 <USB_SetTurnaroundTime+0x82>
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4a2e      	ldr	r2, [pc, #184]	; (80071d0 <USB_SetTurnaroundTime+0x130>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d802      	bhi.n	8007122 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800711c:	230b      	movs	r3, #11
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	e036      	b.n	8007190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	4a2a      	ldr	r2, [pc, #168]	; (80071d0 <USB_SetTurnaroundTime+0x130>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d906      	bls.n	8007138 <USB_SetTurnaroundTime+0x98>
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	4a29      	ldr	r2, [pc, #164]	; (80071d4 <USB_SetTurnaroundTime+0x134>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d802      	bhi.n	8007138 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007132:	230a      	movs	r3, #10
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	e02b      	b.n	8007190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	4a26      	ldr	r2, [pc, #152]	; (80071d4 <USB_SetTurnaroundTime+0x134>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d906      	bls.n	800714e <USB_SetTurnaroundTime+0xae>
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4a25      	ldr	r2, [pc, #148]	; (80071d8 <USB_SetTurnaroundTime+0x138>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d202      	bcs.n	800714e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007148:	2309      	movs	r3, #9
 800714a:	617b      	str	r3, [r7, #20]
 800714c:	e020      	b.n	8007190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	4a21      	ldr	r2, [pc, #132]	; (80071d8 <USB_SetTurnaroundTime+0x138>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d306      	bcc.n	8007164 <USB_SetTurnaroundTime+0xc4>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	4a20      	ldr	r2, [pc, #128]	; (80071dc <USB_SetTurnaroundTime+0x13c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d802      	bhi.n	8007164 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800715e:	2308      	movs	r3, #8
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	e015      	b.n	8007190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4a1d      	ldr	r2, [pc, #116]	; (80071dc <USB_SetTurnaroundTime+0x13c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d906      	bls.n	800717a <USB_SetTurnaroundTime+0xda>
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4a1c      	ldr	r2, [pc, #112]	; (80071e0 <USB_SetTurnaroundTime+0x140>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d202      	bcs.n	800717a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007174:	2307      	movs	r3, #7
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	e00a      	b.n	8007190 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800717a:	2306      	movs	r3, #6
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	e007      	b.n	8007190 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d102      	bne.n	800718c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007186:	2309      	movs	r3, #9
 8007188:	617b      	str	r3, [r7, #20]
 800718a:	e001      	b.n	8007190 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800718c:	2309      	movs	r3, #9
 800718e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	029b      	lsls	r3, r3, #10
 80071a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80071a8:	431a      	orrs	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	00d8acbf 	.word	0x00d8acbf
 80071c0:	00e4e1c0 	.word	0x00e4e1c0
 80071c4:	00f42400 	.word	0x00f42400
 80071c8:	01067380 	.word	0x01067380
 80071cc:	011a499f 	.word	0x011a499f
 80071d0:	01312cff 	.word	0x01312cff
 80071d4:	014ca43f 	.word	0x014ca43f
 80071d8:	016e3600 	.word	0x016e3600
 80071dc:	01a6ab1f 	.word	0x01a6ab1f
 80071e0:	01e84800 	.word	0x01e84800

080071e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f043 0201 	orr.w	r2, r3, #1
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f023 0201 	bic.w	r2, r3, #1
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d115      	bne.n	8007276 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007256:	2001      	movs	r0, #1
 8007258:	f7fa fde0 	bl	8001e1c <HAL_Delay>
      ms++;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3301      	adds	r3, #1
 8007260:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 fa3f 	bl	80086e6 <USB_GetMode>
 8007268:	4603      	mov	r3, r0
 800726a:	2b01      	cmp	r3, #1
 800726c:	d01e      	beq.n	80072ac <USB_SetCurrentMode+0x84>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2b31      	cmp	r3, #49	; 0x31
 8007272:	d9f0      	bls.n	8007256 <USB_SetCurrentMode+0x2e>
 8007274:	e01a      	b.n	80072ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d115      	bne.n	80072a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007288:	2001      	movs	r0, #1
 800728a:	f7fa fdc7 	bl	8001e1c <HAL_Delay>
      ms++;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3301      	adds	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 fa26 	bl	80086e6 <USB_GetMode>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <USB_SetCurrentMode+0x84>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b31      	cmp	r3, #49	; 0x31
 80072a4:	d9f0      	bls.n	8007288 <USB_SetCurrentMode+0x60>
 80072a6:	e001      	b.n	80072ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e005      	b.n	80072b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b32      	cmp	r3, #50	; 0x32
 80072b0:	d101      	bne.n	80072b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072c0:	b084      	sub	sp, #16
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b086      	sub	sp, #24
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072da:	2300      	movs	r3, #0
 80072dc:	613b      	str	r3, [r7, #16]
 80072de:	e009      	b.n	80072f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	3340      	adds	r3, #64	; 0x40
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	2200      	movs	r2, #0
 80072ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	3301      	adds	r3, #1
 80072f2:	613b      	str	r3, [r7, #16]
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	2b0e      	cmp	r3, #14
 80072f8:	d9f2      	bls.n	80072e0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d11c      	bne.n	800733a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800730e:	f043 0302 	orr.w	r3, r3, #2
 8007312:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007318:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	e005      	b.n	8007346 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800734c:	461a      	mov	r2, r3
 800734e:	2300      	movs	r3, #0
 8007350:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007358:	4619      	mov	r1, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007360:	461a      	mov	r2, r3
 8007362:	680b      	ldr	r3, [r1, #0]
 8007364:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	2b01      	cmp	r3, #1
 800736a:	d10c      	bne.n	8007386 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d104      	bne.n	800737c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007372:	2100      	movs	r1, #0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f965 	bl	8007644 <USB_SetDevSpeed>
 800737a:	e008      	b.n	800738e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800737c:	2101      	movs	r1, #1
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f960 	bl	8007644 <USB_SetDevSpeed>
 8007384:	e003      	b.n	800738e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007386:	2103      	movs	r1, #3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f95b 	bl	8007644 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800738e:	2110      	movs	r1, #16
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f8f3 	bl	800757c <USB_FlushTxFifo>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f91f 	bl	80075e4 <USB_FlushRxFifo>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b6:	461a      	mov	r2, r3
 80073b8:	2300      	movs	r3, #0
 80073ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c2:	461a      	mov	r2, r3
 80073c4:	2300      	movs	r3, #0
 80073c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ce:	461a      	mov	r2, r3
 80073d0:	2300      	movs	r3, #0
 80073d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073d4:	2300      	movs	r3, #0
 80073d6:	613b      	str	r3, [r7, #16]
 80073d8:	e043      	b.n	8007462 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073f0:	d118      	bne.n	8007424 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007404:	461a      	mov	r2, r3
 8007406:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	e013      	b.n	8007436 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741a:	461a      	mov	r2, r3
 800741c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	e008      	b.n	8007436 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	461a      	mov	r2, r3
 8007432:	2300      	movs	r3, #0
 8007434:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007442:	461a      	mov	r2, r3
 8007444:	2300      	movs	r3, #0
 8007446:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	461a      	mov	r2, r3
 8007456:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800745a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	3301      	adds	r3, #1
 8007460:	613b      	str	r3, [r7, #16]
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	429a      	cmp	r2, r3
 8007468:	d3b7      	bcc.n	80073da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800746a:	2300      	movs	r3, #0
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	e043      	b.n	80074f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007486:	d118      	bne.n	80074ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10a      	bne.n	80074a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749a:	461a      	mov	r2, r3
 800749c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	e013      	b.n	80074cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b0:	461a      	mov	r2, r3
 80074b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	e008      	b.n	80074cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c6:	461a      	mov	r2, r3
 80074c8:	2300      	movs	r3, #0
 80074ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	461a      	mov	r2, r3
 80074da:	2300      	movs	r3, #0
 80074dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ea:	461a      	mov	r2, r3
 80074ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	3301      	adds	r3, #1
 80074f6:	613b      	str	r3, [r7, #16]
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d3b7      	bcc.n	8007470 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800750e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007512:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007520:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	2b00      	cmp	r3, #0
 8007526:	d105      	bne.n	8007534 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	f043 0210 	orr.w	r2, r3, #16
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699a      	ldr	r2, [r3, #24]
 8007538:	4b0f      	ldr	r3, [pc, #60]	; (8007578 <USB_DevInit+0x2b8>)
 800753a:	4313      	orrs	r3, r2
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007542:	2b00      	cmp	r3, #0
 8007544:	d005      	beq.n	8007552 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	f043 0208 	orr.w	r2, r3, #8
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007554:	2b01      	cmp	r3, #1
 8007556:	d107      	bne.n	8007568 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007560:	f043 0304 	orr.w	r3, r3, #4
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007574:	b004      	add	sp, #16
 8007576:	4770      	bx	lr
 8007578:	803c3800 	.word	0x803c3800

0800757c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3301      	adds	r3, #1
 800758e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4a13      	ldr	r2, [pc, #76]	; (80075e0 <USB_FlushTxFifo+0x64>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d901      	bls.n	800759c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e01b      	b.n	80075d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	daf2      	bge.n	800758a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	019b      	lsls	r3, r3, #6
 80075ac:	f043 0220 	orr.w	r2, r3, #32
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3301      	adds	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	4a08      	ldr	r2, [pc, #32]	; (80075e0 <USB_FlushTxFifo+0x64>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d901      	bls.n	80075c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e006      	b.n	80075d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d0f0      	beq.n	80075b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	00030d40 	.word	0x00030d40

080075e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3301      	adds	r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4a11      	ldr	r2, [pc, #68]	; (8007640 <USB_FlushRxFifo+0x5c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d901      	bls.n	8007602 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e018      	b.n	8007634 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	daf2      	bge.n	80075f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2210      	movs	r2, #16
 8007612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	3301      	adds	r3, #1
 8007618:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4a08      	ldr	r2, [pc, #32]	; (8007640 <USB_FlushRxFifo+0x5c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d901      	bls.n	8007626 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e006      	b.n	8007634 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f003 0310 	and.w	r3, r3, #16
 800762e:	2b10      	cmp	r3, #16
 8007630:	d0f0      	beq.n	8007614 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	00030d40 	.word	0x00030d40

08007644 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	78fb      	ldrb	r3, [r7, #3]
 800765e:	68f9      	ldr	r1, [r7, #12]
 8007660:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007664:	4313      	orrs	r3, r2
 8007666:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007676:	b480      	push	{r7}
 8007678:	b087      	sub	sp, #28
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 0306 	and.w	r3, r3, #6
 800768e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007696:	2300      	movs	r3, #0
 8007698:	75fb      	strb	r3, [r7, #23]
 800769a:	e00a      	b.n	80076b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d002      	beq.n	80076a8 <USB_GetDevSpeed+0x32>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b06      	cmp	r3, #6
 80076a6:	d102      	bne.n	80076ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80076a8:	2302      	movs	r3, #2
 80076aa:	75fb      	strb	r3, [r7, #23]
 80076ac:	e001      	b.n	80076b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80076ae:	230f      	movs	r3, #15
 80076b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	785b      	ldrb	r3, [r3, #1]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d13a      	bne.n	8007752 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e2:	69da      	ldr	r2, [r3, #28]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	2101      	movs	r1, #1
 80076ee:	fa01 f303 	lsl.w	r3, r1, r3
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	68f9      	ldr	r1, [r7, #12]
 80076f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076fa:	4313      	orrs	r3, r2
 80076fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d155      	bne.n	80077c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	791b      	ldrb	r3, [r3, #4]
 800772e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007730:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	059b      	lsls	r3, r3, #22
 8007736:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007738:	4313      	orrs	r3, r2
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	0151      	lsls	r1, r2, #5
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	440a      	add	r2, r1
 8007742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800774a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	e036      	b.n	80077c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007758:	69da      	ldr	r2, [r3, #28]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	2101      	movs	r1, #1
 8007764:	fa01 f303 	lsl.w	r3, r1, r3
 8007768:	041b      	lsls	r3, r3, #16
 800776a:	68f9      	ldr	r1, [r7, #12]
 800776c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007770:	4313      	orrs	r3, r2
 8007772:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d11a      	bne.n	80077c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	791b      	ldrb	r3, [r3, #4]
 80077a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077a6:	430b      	orrs	r3, r1
 80077a8:	4313      	orrs	r3, r2
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
	...

080077d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	785b      	ldrb	r3, [r3, #1]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d161      	bne.n	80078b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007802:	d11f      	bne.n	8007844 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	0151      	lsls	r1, r2, #5
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	440a      	add	r2, r1
 800781a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800781e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007822:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	0151      	lsls	r1, r2, #5
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	440a      	add	r2, r1
 800783a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800783e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007842:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	2101      	movs	r1, #1
 8007856:	fa01 f303 	lsl.w	r3, r1, r3
 800785a:	b29b      	uxth	r3, r3
 800785c:	43db      	mvns	r3, r3
 800785e:	68f9      	ldr	r1, [r7, #12]
 8007860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007864:	4013      	ands	r3, r2
 8007866:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800786e:	69da      	ldr	r2, [r3, #28]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	f003 030f 	and.w	r3, r3, #15
 8007878:	2101      	movs	r1, #1
 800787a:	fa01 f303 	lsl.w	r3, r1, r3
 800787e:	b29b      	uxth	r3, r3
 8007880:	43db      	mvns	r3, r3
 8007882:	68f9      	ldr	r1, [r7, #12]
 8007884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007888:	4013      	ands	r3, r2
 800788a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	0159      	lsls	r1, r3, #5
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	440b      	add	r3, r1
 80078a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a6:	4619      	mov	r1, r3
 80078a8:	4b35      	ldr	r3, [pc, #212]	; (8007980 <USB_DeactivateEndpoint+0x1b0>)
 80078aa:	4013      	ands	r3, r2
 80078ac:	600b      	str	r3, [r1, #0]
 80078ae:	e060      	b.n	8007972 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078c6:	d11f      	bne.n	8007908 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	0151      	lsls	r1, r2, #5
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	440a      	add	r2, r1
 80078de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	0151      	lsls	r1, r2, #5
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	440a      	add	r2, r1
 80078fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007902:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007906:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	f003 030f 	and.w	r3, r3, #15
 8007918:	2101      	movs	r1, #1
 800791a:	fa01 f303 	lsl.w	r3, r1, r3
 800791e:	041b      	lsls	r3, r3, #16
 8007920:	43db      	mvns	r3, r3
 8007922:	68f9      	ldr	r1, [r7, #12]
 8007924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007928:	4013      	ands	r3, r2
 800792a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007932:	69da      	ldr	r2, [r3, #28]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	f003 030f 	and.w	r3, r3, #15
 800793c:	2101      	movs	r1, #1
 800793e:	fa01 f303 	lsl.w	r3, r1, r3
 8007942:	041b      	lsls	r3, r3, #16
 8007944:	43db      	mvns	r3, r3
 8007946:	68f9      	ldr	r1, [r7, #12]
 8007948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800794c:	4013      	ands	r3, r2
 800794e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	0159      	lsls	r1, r3, #5
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	440b      	add	r3, r1
 8007966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796a:	4619      	mov	r1, r3
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <USB_DeactivateEndpoint+0x1b4>)
 800796e:	4013      	ands	r3, r2
 8007970:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	ec337800 	.word	0xec337800
 8007984:	eff37800 	.word	0xeff37800

08007988 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	; 0x28
 800798c:	af02      	add	r7, sp, #8
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	785b      	ldrb	r3, [r3, #1]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	f040 815c 	bne.w	8007c62 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d132      	bne.n	8007a18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	0151      	lsls	r1, r2, #5
 80079c4:	69fa      	ldr	r2, [r7, #28]
 80079c6:	440a      	add	r2, r1
 80079c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	0151      	lsls	r1, r2, #5
 8007a08:	69fa      	ldr	r2, [r7, #28]
 8007a0a:	440a      	add	r2, r1
 8007a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a10:	0cdb      	lsrs	r3, r3, #19
 8007a12:	04db      	lsls	r3, r3, #19
 8007a14:	6113      	str	r3, [r2, #16]
 8007a16:	e074      	b.n	8007b02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	0151      	lsls	r1, r2, #5
 8007a2a:	69fa      	ldr	r2, [r7, #28]
 8007a2c:	440a      	add	r2, r1
 8007a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a32:	0cdb      	lsrs	r3, r3, #19
 8007a34:	04db      	lsls	r3, r3, #19
 8007a36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	0151      	lsls	r1, r2, #5
 8007a4a:	69fa      	ldr	r2, [r7, #28]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a68:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	6999      	ldr	r1, [r3, #24]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	440b      	add	r3, r1
 8007a74:	1e59      	subs	r1, r3, #1
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a7e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a80:	4b9d      	ldr	r3, [pc, #628]	; (8007cf8 <USB_EPStartXfer+0x370>)
 8007a82:	400b      	ands	r3, r1
 8007a84:	69b9      	ldr	r1, [r7, #24]
 8007a86:	0148      	lsls	r0, r1, #5
 8007a88:	69f9      	ldr	r1, [r7, #28]
 8007a8a:	4401      	add	r1, r0
 8007a8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a90:	4313      	orrs	r3, r2
 8007a92:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa0:	691a      	ldr	r2, [r3, #16]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aaa:	69b9      	ldr	r1, [r7, #24]
 8007aac:	0148      	lsls	r0, r1, #5
 8007aae:	69f9      	ldr	r1, [r7, #28]
 8007ab0:	4401      	add	r1, r0
 8007ab2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	791b      	ldrb	r3, [r3, #4]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d11f      	bne.n	8007b02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	0151      	lsls	r1, r2, #5
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	440a      	add	r2, r1
 8007ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007adc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ae0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	0151      	lsls	r1, r2, #5
 8007af4:	69fa      	ldr	r2, [r7, #28]
 8007af6:	440a      	add	r2, r1
 8007af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007afc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d14b      	bne.n	8007ba0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d009      	beq.n	8007b24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	791b      	ldrb	r3, [r3, #4]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d128      	bne.n	8007b7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d110      	bne.n	8007b5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	0151      	lsls	r1, r2, #5
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	440a      	add	r2, r1
 8007b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	e00f      	b.n	8007b7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	0151      	lsls	r1, r2, #5
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	440a      	add	r2, r1
 8007b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	e133      	b.n	8007e08 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	791b      	ldrb	r3, [r3, #4]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d015      	beq.n	8007bf4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 811b 	beq.w	8007e08 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	f003 030f 	and.w	r3, r3, #15
 8007be2:	2101      	movs	r1, #1
 8007be4:	fa01 f303 	lsl.w	r3, r1, r3
 8007be8:	69f9      	ldr	r1, [r7, #28]
 8007bea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	634b      	str	r3, [r1, #52]	; 0x34
 8007bf2:	e109      	b.n	8007e08 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d110      	bne.n	8007c26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	0151      	lsls	r1, r2, #5
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	440a      	add	r2, r1
 8007c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	e00f      	b.n	8007c46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	0151      	lsls	r1, r2, #5
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	440a      	add	r2, r1
 8007c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	6919      	ldr	r1, [r3, #16]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	781a      	ldrb	r2, [r3, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	b298      	uxth	r0, r3
 8007c54:	79fb      	ldrb	r3, [r7, #7]
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	4603      	mov	r3, r0
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fade 	bl	800821c <USB_WritePacket>
 8007c60:	e0d2      	b.n	8007e08 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	0151      	lsls	r1, r2, #5
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	440a      	add	r2, r1
 8007c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c7c:	0cdb      	lsrs	r3, r3, #19
 8007c7e:	04db      	lsls	r3, r3, #19
 8007c80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	0151      	lsls	r1, r2, #5
 8007c94:	69fa      	ldr	r2, [r7, #28]
 8007c96:	440a      	add	r2, r1
 8007c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ca0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ca4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d126      	bne.n	8007cfc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cba:	691a      	ldr	r2, [r3, #16]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cc4:	69b9      	ldr	r1, [r7, #24]
 8007cc6:	0148      	lsls	r0, r1, #5
 8007cc8:	69f9      	ldr	r1, [r7, #28]
 8007cca:	4401      	add	r1, r0
 8007ccc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	0151      	lsls	r1, r2, #5
 8007ce6:	69fa      	ldr	r2, [r7, #28]
 8007ce8:	440a      	add	r2, r1
 8007cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cf2:	6113      	str	r3, [r2, #16]
 8007cf4:	e03a      	b.n	8007d6c <USB_EPStartXfer+0x3e4>
 8007cf6:	bf00      	nop
 8007cf8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	699a      	ldr	r2, [r3, #24]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	4413      	add	r3, r2
 8007d06:	1e5a      	subs	r2, r3, #1
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d10:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	8afa      	ldrh	r2, [r7, #22]
 8007d18:	fb03 f202 	mul.w	r2, r3, r2
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2c:	691a      	ldr	r2, [r3, #16]
 8007d2e:	8afb      	ldrh	r3, [r7, #22]
 8007d30:	04d9      	lsls	r1, r3, #19
 8007d32:	4b38      	ldr	r3, [pc, #224]	; (8007e14 <USB_EPStartXfer+0x48c>)
 8007d34:	400b      	ands	r3, r1
 8007d36:	69b9      	ldr	r1, [r7, #24]
 8007d38:	0148      	lsls	r0, r1, #5
 8007d3a:	69f9      	ldr	r1, [r7, #28]
 8007d3c:	4401      	add	r1, r0
 8007d3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d42:	4313      	orrs	r3, r2
 8007d44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d52:	691a      	ldr	r2, [r3, #16]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d5c:	69b9      	ldr	r1, [r7, #24]
 8007d5e:	0148      	lsls	r0, r1, #5
 8007d60:	69f9      	ldr	r1, [r7, #28]
 8007d62:	4401      	add	r1, r0
 8007d64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d6c:	79fb      	ldrb	r3, [r7, #7]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d10d      	bne.n	8007d8e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	6919      	ldr	r1, [r3, #16]
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8a:	460a      	mov	r2, r1
 8007d8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	791b      	ldrb	r3, [r3, #4]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d128      	bne.n	8007de8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d110      	bne.n	8007dc8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	0151      	lsls	r1, r2, #5
 8007db8:	69fa      	ldr	r2, [r7, #28]
 8007dba:	440a      	add	r2, r1
 8007dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dc4:	6013      	str	r3, [r2, #0]
 8007dc6:	e00f      	b.n	8007de8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007de6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	0151      	lsls	r1, r2, #5
 8007dfa:	69fa      	ldr	r2, [r7, #28]
 8007dfc:	440a      	add	r2, r1
 8007dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3720      	adds	r7, #32
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	1ff80000 	.word	0x1ff80000

08007e18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	785b      	ldrb	r3, [r3, #1]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	f040 80ce 	bne.w	8007fd6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d132      	bne.n	8007ea8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	0151      	lsls	r1, r2, #5
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	440a      	add	r2, r1
 8007e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	0151      	lsls	r1, r2, #5
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	440a      	add	r2, r1
 8007e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	0151      	lsls	r1, r2, #5
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	440a      	add	r2, r1
 8007e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea0:	0cdb      	lsrs	r3, r3, #19
 8007ea2:	04db      	lsls	r3, r3, #19
 8007ea4:	6113      	str	r3, [r2, #16]
 8007ea6:	e04e      	b.n	8007f46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	0151      	lsls	r1, r2, #5
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	440a      	add	r2, r1
 8007ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec2:	0cdb      	lsrs	r3, r3, #19
 8007ec4:	04db      	lsls	r3, r3, #19
 8007ec6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	0151      	lsls	r1, r2, #5
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	440a      	add	r2, r1
 8007ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ee6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007eea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	699a      	ldr	r2, [r3, #24]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d903      	bls.n	8007f00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	0151      	lsls	r1, r2, #5
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	440a      	add	r2, r1
 8007f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2c:	691a      	ldr	r2, [r3, #16]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f36:	6939      	ldr	r1, [r7, #16]
 8007f38:	0148      	lsls	r0, r1, #5
 8007f3a:	6979      	ldr	r1, [r7, #20]
 8007f3c:	4401      	add	r1, r0
 8007f3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f42:	4313      	orrs	r3, r2
 8007f44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d11e      	bne.n	8007f8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d009      	beq.n	8007f68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f60:	461a      	mov	r2, r3
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	0151      	lsls	r1, r2, #5
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	440a      	add	r2, r1
 8007f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	e097      	b.n	80080ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	0151      	lsls	r1, r2, #5
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	440a      	add	r2, r1
 8007fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fa8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 8083 	beq.w	80080ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	f003 030f 	and.w	r3, r3, #15
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fca:	6979      	ldr	r1, [r7, #20]
 8007fcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	634b      	str	r3, [r1, #52]	; 0x34
 8007fd4:	e071      	b.n	80080ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	0151      	lsls	r1, r2, #5
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	440a      	add	r2, r1
 8007fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ff0:	0cdb      	lsrs	r3, r3, #19
 8007ff2:	04db      	lsls	r3, r3, #19
 8007ff4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	0151      	lsls	r1, r2, #5
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	440a      	add	r2, r1
 800800c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008010:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008014:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008018:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	0151      	lsls	r1, r2, #5
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	440a      	add	r2, r1
 8008048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800804c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008050:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	69db      	ldr	r3, [r3, #28]
 8008064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008068:	6939      	ldr	r1, [r7, #16]
 800806a:	0148      	lsls	r0, r1, #5
 800806c:	6979      	ldr	r1, [r7, #20]
 800806e:	4401      	add	r1, r0
 8008070:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008074:	4313      	orrs	r3, r2
 8008076:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d10d      	bne.n	800809a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d009      	beq.n	800809a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	6919      	ldr	r1, [r3, #16]
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008096:	460a      	mov	r2, r1
 8008098:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	015a      	lsls	r2, r3, #5
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	0151      	lsls	r1, r2, #5
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	440a      	add	r2, r1
 80080b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	371c      	adds	r7, #28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	785b      	ldrb	r3, [r3, #1]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d14a      	bne.n	800817c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080fe:	f040 8086 	bne.w	800820e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	7812      	ldrb	r2, [r2, #0]
 8008116:	0151      	lsls	r1, r2, #5
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	440a      	add	r2, r1
 800811c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008120:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008124:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	4413      	add	r3, r2
 8008130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	7812      	ldrb	r2, [r2, #0]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	440a      	add	r2, r1
 8008140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008144:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008148:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3301      	adds	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f242 7210 	movw	r2, #10000	; 0x2710
 8008156:	4293      	cmp	r3, r2
 8008158:	d902      	bls.n	8008160 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	75fb      	strb	r3, [r7, #23]
          break;
 800815e:	e056      	b.n	800820e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008178:	d0e7      	beq.n	800814a <USB_EPStopXfer+0x82>
 800817a:	e048      	b.n	800820e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008194:	d13b      	bne.n	800820e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	7812      	ldrb	r2, [r2, #0]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	7812      	ldrb	r2, [r2, #0]
 80081ce:	0151      	lsls	r1, r2, #5
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	440a      	add	r2, r1
 80081d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3301      	adds	r3, #1
 80081e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d902      	bls.n	80081f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	75fb      	strb	r3, [r7, #23]
          break;
 80081f2:	e00c      	b.n	800820e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800820c:	d0e7      	beq.n	80081de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008210:	4618      	mov	r0, r3
 8008212:	371c      	adds	r7, #28
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800821c:	b480      	push	{r7}
 800821e:	b089      	sub	sp, #36	; 0x24
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	4611      	mov	r1, r2
 8008228:	461a      	mov	r2, r3
 800822a:	460b      	mov	r3, r1
 800822c:	71fb      	strb	r3, [r7, #7]
 800822e:	4613      	mov	r3, r2
 8008230:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800823a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800823e:	2b00      	cmp	r3, #0
 8008240:	d123      	bne.n	800828a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008242:	88bb      	ldrh	r3, [r7, #4]
 8008244:	3303      	adds	r3, #3
 8008246:	089b      	lsrs	r3, r3, #2
 8008248:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800824a:	2300      	movs	r3, #0
 800824c:	61bb      	str	r3, [r7, #24]
 800824e:	e018      	b.n	8008282 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	031a      	lsls	r2, r3, #12
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	4413      	add	r3, r2
 8008258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800825c:	461a      	mov	r2, r3
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	3301      	adds	r3, #1
 8008268:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	3301      	adds	r3, #1
 800826e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	3301      	adds	r3, #1
 8008274:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	3301      	adds	r3, #1
 800827a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	3301      	adds	r3, #1
 8008280:	61bb      	str	r3, [r7, #24]
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	429a      	cmp	r2, r3
 8008288:	d3e2      	bcc.n	8008250 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3724      	adds	r7, #36	; 0x24
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008298:	b480      	push	{r7}
 800829a:	b08b      	sub	sp, #44	; 0x2c
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	4613      	mov	r3, r2
 80082a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	089b      	lsrs	r3, r3, #2
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80082b6:	88fb      	ldrh	r3, [r7, #6]
 80082b8:	f003 0303 	and.w	r3, r3, #3
 80082bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80082be:	2300      	movs	r3, #0
 80082c0:	623b      	str	r3, [r7, #32]
 80082c2:	e014      	b.n	80082ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	3301      	adds	r3, #1
 80082d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	3301      	adds	r3, #1
 80082da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	3301      	adds	r3, #1
 80082e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	3301      	adds	r3, #1
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	3301      	adds	r3, #1
 80082ec:	623b      	str	r3, [r7, #32]
 80082ee:	6a3a      	ldr	r2, [r7, #32]
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d3e6      	bcc.n	80082c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80082f6:	8bfb      	ldrh	r3, [r7, #30]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d01e      	beq.n	800833a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008306:	461a      	mov	r2, r3
 8008308:	f107 0310 	add.w	r3, r7, #16
 800830c:	6812      	ldr	r2, [r2, #0]
 800830e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	b2db      	uxtb	r3, r3
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	fa22 f303 	lsr.w	r3, r2, r3
 800831c:	b2da      	uxtb	r2, r3
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	701a      	strb	r2, [r3, #0]
      i++;
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	3301      	adds	r3, #1
 8008326:	623b      	str	r3, [r7, #32]
      pDest++;
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	3301      	adds	r3, #1
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800832e:	8bfb      	ldrh	r3, [r7, #30]
 8008330:	3b01      	subs	r3, #1
 8008332:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008334:	8bfb      	ldrh	r3, [r7, #30]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1ea      	bne.n	8008310 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800833c:	4618      	mov	r0, r3
 800833e:	372c      	adds	r7, #44	; 0x2c
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	785b      	ldrb	r3, [r3, #1]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d12c      	bne.n	80083be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4413      	add	r3, r2
 800836c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	db12      	blt.n	800839c <USB_EPSetStall+0x54>
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00f      	beq.n	800839c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	0151      	lsls	r1, r2, #5
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	440a      	add	r2, r1
 8008392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008396:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800839a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	0151      	lsls	r1, r2, #5
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	440a      	add	r2, r1
 80083b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	e02b      	b.n	8008416 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	db12      	blt.n	80083f6 <USB_EPSetStall+0xae>
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00f      	beq.n	80083f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	0151      	lsls	r1, r2, #5
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	440a      	add	r2, r1
 80083ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	0151      	lsls	r1, r2, #5
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	440a      	add	r2, r1
 800840c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008414:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	785b      	ldrb	r3, [r3, #1]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d128      	bne.n	8008492 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	0151      	lsls	r1, r2, #5
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	440a      	add	r2, r1
 8008456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800845a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800845e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	791b      	ldrb	r3, [r3, #4]
 8008464:	2b03      	cmp	r3, #3
 8008466:	d003      	beq.n	8008470 <USB_EPClearStall+0x4c>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	791b      	ldrb	r3, [r3, #4]
 800846c:	2b02      	cmp	r3, #2
 800846e:	d138      	bne.n	80084e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	0151      	lsls	r1, r2, #5
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	440a      	add	r2, r1
 8008486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800848a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800848e:	6013      	str	r3, [r2, #0]
 8008490:	e027      	b.n	80084e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	0151      	lsls	r1, r2, #5
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	440a      	add	r2, r1
 80084a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	791b      	ldrb	r3, [r3, #4]
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d003      	beq.n	80084c2 <USB_EPClearStall+0x9e>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	791b      	ldrb	r3, [r3, #4]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d10f      	bne.n	80084e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	0151      	lsls	r1, r2, #5
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	440a      	add	r2, r1
 80084d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800850e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008512:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	011b      	lsls	r3, r3, #4
 8008520:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008524:	68f9      	ldr	r1, [r7, #12]
 8008526:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800852a:	4313      	orrs	r3, r2
 800852c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008556:	f023 0303 	bic.w	r3, r3, #3
 800855a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800856a:	f023 0302 	bic.w	r3, r3, #2
 800856e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008598:	f023 0303 	bic.w	r3, r3, #3
 800859c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ac:	f043 0302 	orr.w	r3, r3, #2
 80085b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	4013      	ands	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085d8:	68fb      	ldr	r3, [r7, #12]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b085      	sub	sp, #20
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008602:	69db      	ldr	r3, [r3, #28]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	4013      	ands	r3, r2
 8008608:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	0c1b      	lsrs	r3, r3, #16
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800861a:	b480      	push	{r7}
 800861c:	b085      	sub	sp, #20
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	4013      	ands	r3, r2
 800863c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	b29b      	uxth	r3, r3
}
 8008642:	4618      	mov	r0, r3
 8008644:	3714      	adds	r7, #20
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800864e:	b480      	push	{r7}
 8008650:	b085      	sub	sp, #20
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	460b      	mov	r3, r1
 8008658:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	4413      	add	r3, r2
 8008666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	4013      	ands	r3, r2
 800867a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800867c:	68bb      	ldr	r3, [r7, #8]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800868a:	b480      	push	{r7}
 800868c:	b087      	sub	sp, #28
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	460b      	mov	r3, r1
 8008694:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	f003 030f 	and.w	r3, r3, #15
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	fa22 f303 	lsr.w	r3, r2, r3
 80086ba:	01db      	lsls	r3, r3, #7
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	4013      	ands	r3, r2
 80086d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086d8:	68bb      	ldr	r3, [r7, #8]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	f003 0301 	and.w	r3, r3, #1
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008702:	b480      	push	{r7}
 8008704:	b085      	sub	sp, #20
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800871c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008720:	f023 0307 	bic.w	r3, r3, #7
 8008724:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008738:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	460b      	mov	r3, r1
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	333c      	adds	r3, #60	; 0x3c
 800875e:	3304      	adds	r3, #4
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	4a26      	ldr	r2, [pc, #152]	; (8008800 <USB_EP0_OutStart+0xb8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d90a      	bls.n	8008782 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800877c:	d101      	bne.n	8008782 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	e037      	b.n	80087f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008788:	461a      	mov	r2, r3
 800878a:	2300      	movs	r3, #0
 800878c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800879c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b0:	f043 0318 	orr.w	r3, r3, #24
 80087b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80087c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80087ca:	7afb      	ldrb	r3, [r7, #11]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d10f      	bne.n	80087f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d6:	461a      	mov	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80087ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	371c      	adds	r7, #28
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	4f54300a 	.word	0x4f54300a

08008804 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3301      	adds	r3, #1
 8008814:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	4a13      	ldr	r2, [pc, #76]	; (8008868 <USB_CoreReset+0x64>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d901      	bls.n	8008822 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e01b      	b.n	800885a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	daf2      	bge.n	8008810 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	f043 0201 	orr.w	r2, r3, #1
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3301      	adds	r3, #1
 800883e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4a09      	ldr	r2, [pc, #36]	; (8008868 <USB_CoreReset+0x64>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d901      	bls.n	800884c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e006      	b.n	800885a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b01      	cmp	r3, #1
 8008856:	d0f0      	beq.n	800883a <USB_CoreReset+0x36>

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	00030d40 	.word	0x00030d40

0800886c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008878:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800887c:	f005 fd48 	bl	800e310 <USBD_static_malloc>
 8008880:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d109      	bne.n	800889c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	32b0      	adds	r2, #176	; 0xb0
 8008892:	2100      	movs	r1, #0
 8008894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008898:	2302      	movs	r3, #2
 800889a:	e0d4      	b.n	8008a46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800889c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80088a0:	2100      	movs	r1, #0
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f005 fd78 	bl	800e398 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	32b0      	adds	r2, #176	; 0xb0
 80088b2:	68f9      	ldr	r1, [r7, #12]
 80088b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	32b0      	adds	r2, #176	; 0xb0
 80088c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	7c1b      	ldrb	r3, [r3, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d138      	bne.n	8008946 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088d4:	4b5e      	ldr	r3, [pc, #376]	; (8008a50 <USBD_CDC_Init+0x1e4>)
 80088d6:	7819      	ldrb	r1, [r3, #0]
 80088d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088dc:	2202      	movs	r2, #2
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f005 fbf3 	bl	800e0ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088e4:	4b5a      	ldr	r3, [pc, #360]	; (8008a50 <USBD_CDC_Init+0x1e4>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	f003 020f 	and.w	r2, r3, #15
 80088ec:	6879      	ldr	r1, [r7, #4]
 80088ee:	4613      	mov	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	440b      	add	r3, r1
 80088f8:	3324      	adds	r3, #36	; 0x24
 80088fa:	2201      	movs	r2, #1
 80088fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80088fe:	4b55      	ldr	r3, [pc, #340]	; (8008a54 <USBD_CDC_Init+0x1e8>)
 8008900:	7819      	ldrb	r1, [r3, #0]
 8008902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008906:	2202      	movs	r2, #2
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f005 fbde 	bl	800e0ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800890e:	4b51      	ldr	r3, [pc, #324]	; (8008a54 <USBD_CDC_Init+0x1e8>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	f003 020f 	and.w	r2, r3, #15
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	4613      	mov	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4413      	add	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	440b      	add	r3, r1
 8008922:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008926:	2201      	movs	r2, #1
 8008928:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800892a:	4b4b      	ldr	r3, [pc, #300]	; (8008a58 <USBD_CDC_Init+0x1ec>)
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	f003 020f 	and.w	r2, r3, #15
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	4613      	mov	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	440b      	add	r3, r1
 800893e:	3326      	adds	r3, #38	; 0x26
 8008940:	2210      	movs	r2, #16
 8008942:	801a      	strh	r2, [r3, #0]
 8008944:	e035      	b.n	80089b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008946:	4b42      	ldr	r3, [pc, #264]	; (8008a50 <USBD_CDC_Init+0x1e4>)
 8008948:	7819      	ldrb	r1, [r3, #0]
 800894a:	2340      	movs	r3, #64	; 0x40
 800894c:	2202      	movs	r2, #2
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f005 fbbb 	bl	800e0ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008954:	4b3e      	ldr	r3, [pc, #248]	; (8008a50 <USBD_CDC_Init+0x1e4>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	f003 020f 	and.w	r2, r3, #15
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	440b      	add	r3, r1
 8008968:	3324      	adds	r3, #36	; 0x24
 800896a:	2201      	movs	r2, #1
 800896c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800896e:	4b39      	ldr	r3, [pc, #228]	; (8008a54 <USBD_CDC_Init+0x1e8>)
 8008970:	7819      	ldrb	r1, [r3, #0]
 8008972:	2340      	movs	r3, #64	; 0x40
 8008974:	2202      	movs	r2, #2
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f005 fba7 	bl	800e0ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800897c:	4b35      	ldr	r3, [pc, #212]	; (8008a54 <USBD_CDC_Init+0x1e8>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	f003 020f 	and.w	r2, r3, #15
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	440b      	add	r3, r1
 8008990:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008994:	2201      	movs	r2, #1
 8008996:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008998:	4b2f      	ldr	r3, [pc, #188]	; (8008a58 <USBD_CDC_Init+0x1ec>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	f003 020f 	and.w	r2, r3, #15
 80089a0:	6879      	ldr	r1, [r7, #4]
 80089a2:	4613      	mov	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	440b      	add	r3, r1
 80089ac:	3326      	adds	r3, #38	; 0x26
 80089ae:	2210      	movs	r2, #16
 80089b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089b2:	4b29      	ldr	r3, [pc, #164]	; (8008a58 <USBD_CDC_Init+0x1ec>)
 80089b4:	7819      	ldrb	r1, [r3, #0]
 80089b6:	2308      	movs	r3, #8
 80089b8:	2203      	movs	r2, #3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f005 fb85 	bl	800e0ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80089c0:	4b25      	ldr	r3, [pc, #148]	; (8008a58 <USBD_CDC_Init+0x1ec>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	f003 020f 	and.w	r2, r3, #15
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	440b      	add	r3, r1
 80089d4:	3324      	adds	r3, #36	; 0x24
 80089d6:	2201      	movs	r2, #1
 80089d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	33b0      	adds	r3, #176	; 0xb0
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008a10:	2302      	movs	r3, #2
 8008a12:	e018      	b.n	8008a46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	7c1b      	ldrb	r3, [r3, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a1c:	4b0d      	ldr	r3, [pc, #52]	; (8008a54 <USBD_CDC_Init+0x1e8>)
 8008a1e:	7819      	ldrb	r1, [r3, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f005 fc3c 	bl	800e2a8 <USBD_LL_PrepareReceive>
 8008a30:	e008      	b.n	8008a44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a32:	4b08      	ldr	r3, [pc, #32]	; (8008a54 <USBD_CDC_Init+0x1e8>)
 8008a34:	7819      	ldrb	r1, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a3c:	2340      	movs	r3, #64	; 0x40
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f005 fc32 	bl	800e2a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20000093 	.word	0x20000093
 8008a54:	20000094 	.word	0x20000094
 8008a58:	20000095 	.word	0x20000095

08008a5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008a68:	4b3a      	ldr	r3, [pc, #232]	; (8008b54 <USBD_CDC_DeInit+0xf8>)
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f005 fb51 	bl	800e116 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008a74:	4b37      	ldr	r3, [pc, #220]	; (8008b54 <USBD_CDC_DeInit+0xf8>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	f003 020f 	and.w	r2, r3, #15
 8008a7c:	6879      	ldr	r1, [r7, #4]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	440b      	add	r3, r1
 8008a88:	3324      	adds	r3, #36	; 0x24
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008a8e:	4b32      	ldr	r3, [pc, #200]	; (8008b58 <USBD_CDC_DeInit+0xfc>)
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f005 fb3e 	bl	800e116 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008a9a:	4b2f      	ldr	r3, [pc, #188]	; (8008b58 <USBD_CDC_DeInit+0xfc>)
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	f003 020f 	and.w	r2, r3, #15
 8008aa2:	6879      	ldr	r1, [r7, #4]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	440b      	add	r3, r1
 8008aae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008ab6:	4b29      	ldr	r3, [pc, #164]	; (8008b5c <USBD_CDC_DeInit+0x100>)
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f005 fb2a 	bl	800e116 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008ac2:	4b26      	ldr	r3, [pc, #152]	; (8008b5c <USBD_CDC_DeInit+0x100>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	f003 020f 	and.w	r2, r3, #15
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	4613      	mov	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	440b      	add	r3, r1
 8008ad6:	3324      	adds	r3, #36	; 0x24
 8008ad8:	2200      	movs	r2, #0
 8008ada:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008adc:	4b1f      	ldr	r3, [pc, #124]	; (8008b5c <USBD_CDC_DeInit+0x100>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	f003 020f 	and.w	r2, r3, #15
 8008ae4:	6879      	ldr	r1, [r7, #4]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	440b      	add	r3, r1
 8008af0:	3326      	adds	r3, #38	; 0x26
 8008af2:	2200      	movs	r2, #0
 8008af4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	32b0      	adds	r2, #176	; 0xb0
 8008b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d01f      	beq.n	8008b48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	33b0      	adds	r3, #176	; 0xb0
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	32b0      	adds	r2, #176	; 0xb0
 8008b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f005 fbfe 	bl	800e32c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	32b0      	adds	r2, #176	; 0xb0
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000093 	.word	0x20000093
 8008b58:	20000094 	.word	0x20000094
 8008b5c:	20000095 	.word	0x20000095

08008b60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	32b0      	adds	r2, #176	; 0xb0
 8008b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e0bf      	b.n	8008d10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d050      	beq.n	8008c3e <USBD_CDC_Setup+0xde>
 8008b9c:	2b20      	cmp	r3, #32
 8008b9e:	f040 80af 	bne.w	8008d00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	88db      	ldrh	r3, [r3, #6]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d03a      	beq.n	8008c20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	b25b      	sxtb	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	da1b      	bge.n	8008bec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	33b0      	adds	r3, #176	; 0xb0
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008bca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	88d2      	ldrh	r2, [r2, #6]
 8008bd0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	88db      	ldrh	r3, [r3, #6]
 8008bd6:	2b07      	cmp	r3, #7
 8008bd8:	bf28      	it	cs
 8008bda:	2307      	movcs	r3, #7
 8008bdc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	89fa      	ldrh	r2, [r7, #14]
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 fd43 	bl	800a670 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008bea:	e090      	b.n	8008d0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	785a      	ldrb	r2, [r3, #1]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	88db      	ldrh	r3, [r3, #6]
 8008bfa:	2b3f      	cmp	r3, #63	; 0x3f
 8008bfc:	d803      	bhi.n	8008c06 <USBD_CDC_Setup+0xa6>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	88db      	ldrh	r3, [r3, #6]
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	e000      	b.n	8008c08 <USBD_CDC_Setup+0xa8>
 8008c06:	2240      	movs	r2, #64	; 0x40
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008c0e:	6939      	ldr	r1, [r7, #16]
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008c16:	461a      	mov	r2, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 fd55 	bl	800a6c8 <USBD_CtlPrepareRx>
      break;
 8008c1e:	e076      	b.n	8008d0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	33b0      	adds	r3, #176	; 0xb0
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	7850      	ldrb	r0, [r2, #1]
 8008c36:	2200      	movs	r2, #0
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	4798      	blx	r3
      break;
 8008c3c:	e067      	b.n	8008d0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	785b      	ldrb	r3, [r3, #1]
 8008c42:	2b0b      	cmp	r3, #11
 8008c44:	d851      	bhi.n	8008cea <USBD_CDC_Setup+0x18a>
 8008c46:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <USBD_CDC_Setup+0xec>)
 8008c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4c:	08008c7d 	.word	0x08008c7d
 8008c50:	08008cf9 	.word	0x08008cf9
 8008c54:	08008ceb 	.word	0x08008ceb
 8008c58:	08008ceb 	.word	0x08008ceb
 8008c5c:	08008ceb 	.word	0x08008ceb
 8008c60:	08008ceb 	.word	0x08008ceb
 8008c64:	08008ceb 	.word	0x08008ceb
 8008c68:	08008ceb 	.word	0x08008ceb
 8008c6c:	08008ceb 	.word	0x08008ceb
 8008c70:	08008ceb 	.word	0x08008ceb
 8008c74:	08008ca7 	.word	0x08008ca7
 8008c78:	08008cd1 	.word	0x08008cd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d107      	bne.n	8008c98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c88:	f107 030a 	add.w	r3, r7, #10
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 fced 	bl	800a670 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c96:	e032      	b.n	8008cfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 fc77 	bl	800a58e <USBD_CtlError>
            ret = USBD_FAIL;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ca4:	e02b      	b.n	8008cfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d107      	bne.n	8008cc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008cb2:	f107 030d 	add.w	r3, r7, #13
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f001 fcd8 	bl	800a670 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cc0:	e01d      	b.n	8008cfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f001 fc62 	bl	800a58e <USBD_CtlError>
            ret = USBD_FAIL;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8008cce:	e016      	b.n	8008cfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d00f      	beq.n	8008cfc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 fc55 	bl	800a58e <USBD_CtlError>
            ret = USBD_FAIL;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ce8:	e008      	b.n	8008cfc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 fc4e 	bl	800a58e <USBD_CtlError>
          ret = USBD_FAIL;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8008cf6:	e002      	b.n	8008cfe <USBD_CDC_Setup+0x19e>
          break;
 8008cf8:	bf00      	nop
 8008cfa:	e008      	b.n	8008d0e <USBD_CDC_Setup+0x1ae>
          break;
 8008cfc:	bf00      	nop
      }
      break;
 8008cfe:	e006      	b.n	8008d0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f001 fc43 	bl	800a58e <USBD_CtlError>
      ret = USBD_FAIL;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	32b0      	adds	r2, #176	; 0xb0
 8008d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e065      	b.n	8008e0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	32b0      	adds	r2, #176	; 0xb0
 8008d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d52:	78fb      	ldrb	r3, [r7, #3]
 8008d54:	f003 020f 	and.w	r2, r3, #15
 8008d58:	6879      	ldr	r1, [r7, #4]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4413      	add	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	440b      	add	r3, r1
 8008d64:	3318      	adds	r3, #24
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d02f      	beq.n	8008dcc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008d6c:	78fb      	ldrb	r3, [r7, #3]
 8008d6e:	f003 020f 	and.w	r2, r3, #15
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	4613      	mov	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	440b      	add	r3, r1
 8008d7e:	3318      	adds	r3, #24
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	78fb      	ldrb	r3, [r7, #3]
 8008d84:	f003 010f 	and.w	r1, r3, #15
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	440b      	add	r3, r1
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4403      	add	r3, r0
 8008d94:	3348      	adds	r3, #72	; 0x48
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d9c:	fb01 f303 	mul.w	r3, r1, r3
 8008da0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d112      	bne.n	8008dcc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	f003 020f 	and.w	r2, r3, #15
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	4613      	mov	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	440b      	add	r3, r1
 8008db8:	3318      	adds	r3, #24
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008dbe:	78f9      	ldrb	r1, [r7, #3]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f005 fa4e 	bl	800e266 <USBD_LL_Transmit>
 8008dca:	e01f      	b.n	8008e0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	33b0      	adds	r3, #176	; 0xb0
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d010      	beq.n	8008e0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	33b0      	adds	r3, #176	; 0xb0
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008e08:	78fa      	ldrb	r2, [r7, #3]
 8008e0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	32b0      	adds	r2, #176	; 0xb0
 8008e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	32b0      	adds	r2, #176	; 0xb0
 8008e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e01a      	b.n	8008e7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f005 fa4c 	bl	800e2ea <USBD_LL_GetRxDataSize>
 8008e52:	4602      	mov	r2, r0
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	33b0      	adds	r3, #176	; 0xb0
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e78:	4611      	mov	r1, r2
 8008e7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b084      	sub	sp, #16
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	32b0      	adds	r2, #176	; 0xb0
 8008e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e025      	b.n	8008ef4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	33b0      	adds	r3, #176	; 0xb0
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01a      	beq.n	8008ef2 <USBD_CDC_EP0_RxReady+0x6c>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ec2:	2bff      	cmp	r3, #255	; 0xff
 8008ec4:	d015      	beq.n	8008ef2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	33b0      	adds	r3, #176	; 0xb0
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4413      	add	r3, r2
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008ede:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ee6:	b292      	uxth	r2, r2
 8008ee8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	22ff      	movs	r2, #255	; 0xff
 8008eee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f04:	2182      	movs	r1, #130	; 0x82
 8008f06:	4818      	ldr	r0, [pc, #96]	; (8008f68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f08:	f000 fd09 	bl	800991e <USBD_GetEpDesc>
 8008f0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f0e:	2101      	movs	r1, #1
 8008f10:	4815      	ldr	r0, [pc, #84]	; (8008f68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f12:	f000 fd04 	bl	800991e <USBD_GetEpDesc>
 8008f16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f18:	2181      	movs	r1, #129	; 0x81
 8008f1a:	4813      	ldr	r0, [pc, #76]	; (8008f68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f1c:	f000 fcff 	bl	800991e <USBD_GetEpDesc>
 8008f20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d002      	beq.n	8008f2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2210      	movs	r2, #16
 8008f2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d006      	beq.n	8008f42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f3c:	711a      	strb	r2, [r3, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d006      	beq.n	8008f56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f50:	711a      	strb	r2, [r3, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2243      	movs	r2, #67	; 0x43
 8008f5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f5c:	4b02      	ldr	r3, [pc, #8]	; (8008f68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20000050 	.word	0x20000050

08008f6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f74:	2182      	movs	r1, #130	; 0x82
 8008f76:	4818      	ldr	r0, [pc, #96]	; (8008fd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f78:	f000 fcd1 	bl	800991e <USBD_GetEpDesc>
 8008f7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f7e:	2101      	movs	r1, #1
 8008f80:	4815      	ldr	r0, [pc, #84]	; (8008fd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f82:	f000 fccc 	bl	800991e <USBD_GetEpDesc>
 8008f86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f88:	2181      	movs	r1, #129	; 0x81
 8008f8a:	4813      	ldr	r0, [pc, #76]	; (8008fd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f8c:	f000 fcc7 	bl	800991e <USBD_GetEpDesc>
 8008f90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	2210      	movs	r2, #16
 8008f9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d006      	beq.n	8008fb2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	711a      	strb	r2, [r3, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f042 0202 	orr.w	r2, r2, #2
 8008fb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d006      	beq.n	8008fc6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	711a      	strb	r2, [r3, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f042 0202 	orr.w	r2, r2, #2
 8008fc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2243      	movs	r2, #67	; 0x43
 8008fca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008fcc:	4b02      	ldr	r3, [pc, #8]	; (8008fd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20000050 	.word	0x20000050

08008fdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fe4:	2182      	movs	r1, #130	; 0x82
 8008fe6:	4818      	ldr	r0, [pc, #96]	; (8009048 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fe8:	f000 fc99 	bl	800991e <USBD_GetEpDesc>
 8008fec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fee:	2101      	movs	r1, #1
 8008ff0:	4815      	ldr	r0, [pc, #84]	; (8009048 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ff2:	f000 fc94 	bl	800991e <USBD_GetEpDesc>
 8008ff6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ff8:	2181      	movs	r1, #129	; 0x81
 8008ffa:	4813      	ldr	r0, [pc, #76]	; (8009048 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ffc:	f000 fc8f 	bl	800991e <USBD_GetEpDesc>
 8009000:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2210      	movs	r2, #16
 800900c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d006      	beq.n	8009022 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	2200      	movs	r2, #0
 8009018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800901c:	711a      	strb	r2, [r3, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d006      	beq.n	8009036 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009030:	711a      	strb	r2, [r3, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2243      	movs	r2, #67	; 0x43
 800903a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800903c:	4b02      	ldr	r3, [pc, #8]	; (8009048 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800903e:	4618      	mov	r0, r3
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	20000050 	.word	0x20000050

0800904c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	220a      	movs	r2, #10
 8009058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800905a:	4b03      	ldr	r3, [pc, #12]	; (8009068 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	2000000c 	.word	0x2000000c

0800906c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d101      	bne.n	8009080 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800907c:	2303      	movs	r3, #3
 800907e:	e009      	b.n	8009094 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	33b0      	adds	r3, #176	; 0xb0
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	32b0      	adds	r2, #176	; 0xb0
 80090b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80090c2:	2303      	movs	r3, #3
 80090c4:	e008      	b.n	80090d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	32b0      	adds	r2, #176	; 0xb0
 80090f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009104:	2303      	movs	r3, #3
 8009106:	e004      	b.n	8009112 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
	...

08009120 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	32b0      	adds	r2, #176	; 0xb0
 8009132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009136:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	32b0      	adds	r2, #176	; 0xb0
 8009142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800914a:	2303      	movs	r3, #3
 800914c:	e018      	b.n	8009180 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	7c1b      	ldrb	r3, [r3, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10a      	bne.n	800916c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009156:	4b0c      	ldr	r3, [pc, #48]	; (8009188 <USBD_CDC_ReceivePacket+0x68>)
 8009158:	7819      	ldrb	r1, [r3, #0]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f005 f89f 	bl	800e2a8 <USBD_LL_PrepareReceive>
 800916a:	e008      	b.n	800917e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800916c:	4b06      	ldr	r3, [pc, #24]	; (8009188 <USBD_CDC_ReceivePacket+0x68>)
 800916e:	7819      	ldrb	r1, [r3, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009176:	2340      	movs	r3, #64	; 0x40
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f005 f895 	bl	800e2a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	20000094 	.word	0x20000094

0800918c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	4613      	mov	r3, r2
 8009198:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e01f      	b.n	80091e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	79fa      	ldrb	r2, [r7, #7]
 80091d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f004 ff0f 	bl	800dffc <USBD_LL_Init>
 80091de:	4603      	mov	r3, r0
 80091e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009200:	2303      	movs	r3, #3
 8009202:	e025      	b.n	8009250 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	32ae      	adds	r2, #174	; 0xae
 8009216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00f      	beq.n	8009240 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	32ae      	adds	r2, #174	; 0xae
 800922a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	f107 020e 	add.w	r2, r7, #14
 8009234:	4610      	mov	r0, r2
 8009236:	4798      	blx	r3
 8009238:	4602      	mov	r2, r0
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f004 ff17 	bl	800e094 <USBD_LL_Start>
 8009266:	4603      	mov	r3, r0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009278:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800927a:	4618      	mov	r0, r3
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800929c:	2b00      	cmp	r3, #0
 800929e:	d009      	beq.n	80092b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	78fa      	ldrb	r2, [r7, #3]
 80092aa:	4611      	mov	r1, r2
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	4798      	blx	r3
 80092b0:	4603      	mov	r3, r0
 80092b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	460b      	mov	r3, r1
 80092c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	78fa      	ldrb	r2, [r7, #3]
 80092d8:	4611      	mov	r1, r2
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4798      	blx	r3
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80092e4:	2303      	movs	r3, #3
 80092e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b084      	sub	sp, #16
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	4618      	mov	r0, r3
 8009306:	f001 f908 	bl	800a51a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009318:	461a      	mov	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009326:	f003 031f 	and.w	r3, r3, #31
 800932a:	2b02      	cmp	r3, #2
 800932c:	d01a      	beq.n	8009364 <USBD_LL_SetupStage+0x72>
 800932e:	2b02      	cmp	r3, #2
 8009330:	d822      	bhi.n	8009378 <USBD_LL_SetupStage+0x86>
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <USBD_LL_SetupStage+0x4a>
 8009336:	2b01      	cmp	r3, #1
 8009338:	d00a      	beq.n	8009350 <USBD_LL_SetupStage+0x5e>
 800933a:	e01d      	b.n	8009378 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fb5f 	bl	8009a08 <USBD_StdDevReq>
 800934a:	4603      	mov	r3, r0
 800934c:	73fb      	strb	r3, [r7, #15]
      break;
 800934e:	e020      	b.n	8009392 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fbc7 	bl	8009aec <USBD_StdItfReq>
 800935e:	4603      	mov	r3, r0
 8009360:	73fb      	strb	r3, [r7, #15]
      break;
 8009362:	e016      	b.n	8009392 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fc29 	bl	8009bc4 <USBD_StdEPReq>
 8009372:	4603      	mov	r3, r0
 8009374:	73fb      	strb	r3, [r7, #15]
      break;
 8009376:	e00c      	b.n	8009392 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800937e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009382:	b2db      	uxtb	r3, r3
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f004 fee4 	bl	800e154 <USBD_LL_StallEP>
 800938c:	4603      	mov	r3, r0
 800938e:	73fb      	strb	r3, [r7, #15]
      break;
 8009390:	bf00      	nop
  }

  return ret;
 8009392:	7bfb      	ldrb	r3, [r7, #15]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	460b      	mov	r3, r1
 80093a6:	607a      	str	r2, [r7, #4]
 80093a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80093ae:	7afb      	ldrb	r3, [r7, #11]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d16e      	bne.n	8009492 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80093ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	f040 8098 	bne.w	80094f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d913      	bls.n	80093fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	1ad2      	subs	r2, r2, r3
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	4293      	cmp	r3, r2
 80093ec:	bf28      	it	cs
 80093ee:	4613      	movcs	r3, r2
 80093f0:	461a      	mov	r2, r3
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f001 f984 	bl	800a702 <USBD_CtlContinueRx>
 80093fa:	e07d      	b.n	80094f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009402:	f003 031f 	and.w	r3, r3, #31
 8009406:	2b02      	cmp	r3, #2
 8009408:	d014      	beq.n	8009434 <USBD_LL_DataOutStage+0x98>
 800940a:	2b02      	cmp	r3, #2
 800940c:	d81d      	bhi.n	800944a <USBD_LL_DataOutStage+0xae>
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <USBD_LL_DataOutStage+0x7c>
 8009412:	2b01      	cmp	r3, #1
 8009414:	d003      	beq.n	800941e <USBD_LL_DataOutStage+0x82>
 8009416:	e018      	b.n	800944a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	75bb      	strb	r3, [r7, #22]
            break;
 800941c:	e018      	b.n	8009450 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009424:	b2db      	uxtb	r3, r3
 8009426:	4619      	mov	r1, r3
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 fa5e 	bl	80098ea <USBD_CoreFindIF>
 800942e:	4603      	mov	r3, r0
 8009430:	75bb      	strb	r3, [r7, #22]
            break;
 8009432:	e00d      	b.n	8009450 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800943a:	b2db      	uxtb	r3, r3
 800943c:	4619      	mov	r1, r3
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 fa60 	bl	8009904 <USBD_CoreFindEP>
 8009444:	4603      	mov	r3, r0
 8009446:	75bb      	strb	r3, [r7, #22]
            break;
 8009448:	e002      	b.n	8009450 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800944a:	2300      	movs	r3, #0
 800944c:	75bb      	strb	r3, [r7, #22]
            break;
 800944e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009450:	7dbb      	ldrb	r3, [r7, #22]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d119      	bne.n	800948a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b03      	cmp	r3, #3
 8009460:	d113      	bne.n	800948a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009462:	7dba      	ldrb	r2, [r7, #22]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	32ae      	adds	r2, #174	; 0xae
 8009468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00b      	beq.n	800948a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009472:	7dba      	ldrb	r2, [r7, #22]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800947a:	7dba      	ldrb	r2, [r7, #22]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	32ae      	adds	r2, #174	; 0xae
 8009480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f001 f94a 	bl	800a724 <USBD_CtlSendStatus>
 8009490:	e032      	b.n	80094f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009492:	7afb      	ldrb	r3, [r7, #11]
 8009494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009498:	b2db      	uxtb	r3, r3
 800949a:	4619      	mov	r1, r3
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 fa31 	bl	8009904 <USBD_CoreFindEP>
 80094a2:	4603      	mov	r3, r0
 80094a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094a6:	7dbb      	ldrb	r3, [r7, #22]
 80094a8:	2bff      	cmp	r3, #255	; 0xff
 80094aa:	d025      	beq.n	80094f8 <USBD_LL_DataOutStage+0x15c>
 80094ac:	7dbb      	ldrb	r3, [r7, #22]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d122      	bne.n	80094f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d117      	bne.n	80094ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80094be:	7dba      	ldrb	r2, [r7, #22]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	32ae      	adds	r2, #174	; 0xae
 80094c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00f      	beq.n	80094ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80094ce:	7dba      	ldrb	r2, [r7, #22]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80094d6:	7dba      	ldrb	r2, [r7, #22]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	32ae      	adds	r2, #174	; 0xae
 80094dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	7afa      	ldrb	r2, [r7, #11]
 80094e4:	4611      	mov	r1, r2
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	4798      	blx	r3
 80094ea:	4603      	mov	r3, r0
 80094ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
 80094f6:	e000      	b.n	80094fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b086      	sub	sp, #24
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	460b      	mov	r3, r1
 800950c:	607a      	str	r2, [r7, #4]
 800950e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009510:	7afb      	ldrb	r3, [r7, #11]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d16f      	bne.n	80095f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3314      	adds	r3, #20
 800951a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009522:	2b02      	cmp	r3, #2
 8009524:	d15a      	bne.n	80095dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	689a      	ldr	r2, [r3, #8]
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	429a      	cmp	r2, r3
 8009530:	d914      	bls.n	800955c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	689a      	ldr	r2, [r3, #8]
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	1ad2      	subs	r2, r2, r3
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	461a      	mov	r2, r3
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f001 f8ac 	bl	800a6a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800954e:	2300      	movs	r3, #0
 8009550:	2200      	movs	r2, #0
 8009552:	2100      	movs	r1, #0
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f004 fea7 	bl	800e2a8 <USBD_LL_PrepareReceive>
 800955a:	e03f      	b.n	80095dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	68da      	ldr	r2, [r3, #12]
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	429a      	cmp	r2, r3
 8009566:	d11c      	bne.n	80095a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009570:	429a      	cmp	r2, r3
 8009572:	d316      	bcc.n	80095a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800957e:	429a      	cmp	r2, r3
 8009580:	d20f      	bcs.n	80095a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009582:	2200      	movs	r2, #0
 8009584:	2100      	movs	r1, #0
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f001 f88d 	bl	800a6a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009594:	2300      	movs	r3, #0
 8009596:	2200      	movs	r2, #0
 8009598:	2100      	movs	r1, #0
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f004 fe84 	bl	800e2a8 <USBD_LL_PrepareReceive>
 80095a0:	e01c      	b.n	80095dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d10f      	bne.n	80095ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d009      	beq.n	80095ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095ce:	2180      	movs	r1, #128	; 0x80
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f004 fdbf 	bl	800e154 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f001 f8b7 	bl	800a74a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d03a      	beq.n	800965c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f7ff fe42 	bl	8009270 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80095f4:	e032      	b.n	800965c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80095f6:	7afb      	ldrb	r3, [r7, #11]
 80095f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	4619      	mov	r1, r3
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f000 f97f 	bl	8009904 <USBD_CoreFindEP>
 8009606:	4603      	mov	r3, r0
 8009608:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800960a:	7dfb      	ldrb	r3, [r7, #23]
 800960c:	2bff      	cmp	r3, #255	; 0xff
 800960e:	d025      	beq.n	800965c <USBD_LL_DataInStage+0x15a>
 8009610:	7dfb      	ldrb	r3, [r7, #23]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d122      	bne.n	800965c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b03      	cmp	r3, #3
 8009620:	d11c      	bne.n	800965c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009622:	7dfa      	ldrb	r2, [r7, #23]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	32ae      	adds	r2, #174	; 0xae
 8009628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962c:	695b      	ldr	r3, [r3, #20]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d014      	beq.n	800965c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009632:	7dfa      	ldrb	r2, [r7, #23]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800963a:	7dfa      	ldrb	r2, [r7, #23]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	32ae      	adds	r2, #174	; 0xae
 8009640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	7afa      	ldrb	r2, [r7, #11]
 8009648:	4611      	mov	r1, r2
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	4798      	blx	r3
 800964e:	4603      	mov	r3, r0
 8009650:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009652:	7dbb      	ldrb	r3, [r7, #22]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009658:	7dbb      	ldrb	r3, [r7, #22]
 800965a:	e000      	b.n	800965e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3718      	adds	r7, #24
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d014      	beq.n	80096cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00e      	beq.n	80096cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	6852      	ldr	r2, [r2, #4]
 80096ba:	b2d2      	uxtb	r2, r2
 80096bc:	4611      	mov	r1, r2
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	4798      	blx	r3
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d001      	beq.n	80096cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80096c8:	2303      	movs	r3, #3
 80096ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096cc:	2340      	movs	r3, #64	; 0x40
 80096ce:	2200      	movs	r2, #0
 80096d0:	2100      	movs	r1, #0
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f004 fcf9 	bl	800e0ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2240      	movs	r2, #64	; 0x40
 80096e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096e8:	2340      	movs	r3, #64	; 0x40
 80096ea:	2200      	movs	r2, #0
 80096ec:	2180      	movs	r1, #128	; 0x80
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f004 fceb 	bl	800e0ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2240      	movs	r2, #64	; 0x40
 80096fe:	621a      	str	r2, [r3, #32]

  return ret;
 8009700:	7bfb      	ldrb	r3, [r7, #15]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800970a:	b480      	push	{r7}
 800970c:	b083      	sub	sp, #12
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	460b      	mov	r3, r1
 8009714:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	78fa      	ldrb	r2, [r7, #3]
 800971a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800972a:	b480      	push	{r7}
 800972c:	b083      	sub	sp, #12
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009738:	b2da      	uxtb	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2204      	movs	r2, #4
 8009744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009756:	b480      	push	{r7}
 8009758:	b083      	sub	sp, #12
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b04      	cmp	r3, #4
 8009768:	d106      	bne.n	8009778 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009770:	b2da      	uxtb	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b082      	sub	sp, #8
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b03      	cmp	r3, #3
 8009798:	d110      	bne.n	80097bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00b      	beq.n	80097bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097aa:	69db      	ldr	r3, [r3, #28]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d005      	beq.n	80097bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	460b      	mov	r3, r1
 80097d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	32ae      	adds	r2, #174	; 0xae
 80097dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80097e4:	2303      	movs	r3, #3
 80097e6:	e01c      	b.n	8009822 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d115      	bne.n	8009820 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	32ae      	adds	r2, #174	; 0xae
 80097fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00b      	beq.n	8009820 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	32ae      	adds	r2, #174	; 0xae
 8009812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009816:	6a1b      	ldr	r3, [r3, #32]
 8009818:	78fa      	ldrb	r2, [r7, #3]
 800981a:	4611      	mov	r1, r2
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b082      	sub	sp, #8
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	460b      	mov	r3, r1
 8009834:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	32ae      	adds	r2, #174	; 0xae
 8009840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009848:	2303      	movs	r3, #3
 800984a:	e01c      	b.n	8009886 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b03      	cmp	r3, #3
 8009856:	d115      	bne.n	8009884 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	32ae      	adds	r2, #174	; 0xae
 8009862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00b      	beq.n	8009884 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	32ae      	adds	r2, #174	; 0xae
 8009876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	78fa      	ldrb	r2, [r7, #3]
 800987e:	4611      	mov	r1, r2
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800988e:	b480      	push	{r7}
 8009890:	b083      	sub	sp, #12
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00e      	beq.n	80098e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6852      	ldr	r2, [r2, #4]
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	4611      	mov	r1, r2
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	4798      	blx	r3
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80098dc:	2303      	movs	r3, #3
 80098de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b083      	sub	sp, #12
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	460b      	mov	r3, r1
 80098f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009910:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b086      	sub	sp, #24
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	460b      	mov	r3, r1
 8009928:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009932:	2300      	movs	r3, #0
 8009934:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	885b      	ldrh	r3, [r3, #2]
 800993a:	b29a      	uxth	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	b29b      	uxth	r3, r3
 8009942:	429a      	cmp	r2, r3
 8009944:	d920      	bls.n	8009988 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	b29b      	uxth	r3, r3
 800994c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800994e:	e013      	b.n	8009978 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009950:	f107 030a 	add.w	r3, r7, #10
 8009954:	4619      	mov	r1, r3
 8009956:	6978      	ldr	r0, [r7, #20]
 8009958:	f000 f81b 	bl	8009992 <USBD_GetNextDesc>
 800995c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	785b      	ldrb	r3, [r3, #1]
 8009962:	2b05      	cmp	r3, #5
 8009964:	d108      	bne.n	8009978 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	789b      	ldrb	r3, [r3, #2]
 800996e:	78fa      	ldrb	r2, [r7, #3]
 8009970:	429a      	cmp	r2, r3
 8009972:	d008      	beq.n	8009986 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009974:	2300      	movs	r3, #0
 8009976:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	885b      	ldrh	r3, [r3, #2]
 800997c:	b29a      	uxth	r2, r3
 800997e:	897b      	ldrh	r3, [r7, #10]
 8009980:	429a      	cmp	r2, r3
 8009982:	d8e5      	bhi.n	8009950 <USBD_GetEpDesc+0x32>
 8009984:	e000      	b.n	8009988 <USBD_GetEpDesc+0x6a>
          break;
 8009986:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009988:	693b      	ldr	r3, [r7, #16]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009992:	b480      	push	{r7}
 8009994:	b085      	sub	sp, #20
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	881a      	ldrh	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	4413      	add	r3, r2
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4413      	add	r3, r2
 80099bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80099be:	68fb      	ldr	r3, [r7, #12]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	3301      	adds	r3, #1
 80099e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80099ea:	8a3b      	ldrh	r3, [r7, #16]
 80099ec:	021b      	lsls	r3, r3, #8
 80099ee:	b21a      	sxth	r2, r3
 80099f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	b21b      	sxth	r3, r3
 80099f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80099fa:	89fb      	ldrh	r3, [r7, #14]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	371c      	adds	r7, #28
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a1e:	2b40      	cmp	r3, #64	; 0x40
 8009a20:	d005      	beq.n	8009a2e <USBD_StdDevReq+0x26>
 8009a22:	2b40      	cmp	r3, #64	; 0x40
 8009a24:	d857      	bhi.n	8009ad6 <USBD_StdDevReq+0xce>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00f      	beq.n	8009a4a <USBD_StdDevReq+0x42>
 8009a2a:	2b20      	cmp	r3, #32
 8009a2c:	d153      	bne.n	8009ad6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	32ae      	adds	r2, #174	; 0xae
 8009a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	4798      	blx	r3
 8009a44:	4603      	mov	r3, r0
 8009a46:	73fb      	strb	r3, [r7, #15]
      break;
 8009a48:	e04a      	b.n	8009ae0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	785b      	ldrb	r3, [r3, #1]
 8009a4e:	2b09      	cmp	r3, #9
 8009a50:	d83b      	bhi.n	8009aca <USBD_StdDevReq+0xc2>
 8009a52:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <USBD_StdDevReq+0x50>)
 8009a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a58:	08009aad 	.word	0x08009aad
 8009a5c:	08009ac1 	.word	0x08009ac1
 8009a60:	08009acb 	.word	0x08009acb
 8009a64:	08009ab7 	.word	0x08009ab7
 8009a68:	08009acb 	.word	0x08009acb
 8009a6c:	08009a8b 	.word	0x08009a8b
 8009a70:	08009a81 	.word	0x08009a81
 8009a74:	08009acb 	.word	0x08009acb
 8009a78:	08009aa3 	.word	0x08009aa3
 8009a7c:	08009a95 	.word	0x08009a95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fa3c 	bl	8009f00 <USBD_GetDescriptor>
          break;
 8009a88:	e024      	b.n	8009ad4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fba1 	bl	800a1d4 <USBD_SetAddress>
          break;
 8009a92:	e01f      	b.n	8009ad4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fbe0 	bl	800a25c <USBD_SetConfig>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	73fb      	strb	r3, [r7, #15]
          break;
 8009aa0:	e018      	b.n	8009ad4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fc83 	bl	800a3b0 <USBD_GetConfig>
          break;
 8009aaa:	e013      	b.n	8009ad4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fcb4 	bl	800a41c <USBD_GetStatus>
          break;
 8009ab4:	e00e      	b.n	8009ad4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009ab6:	6839      	ldr	r1, [r7, #0]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fce3 	bl	800a484 <USBD_SetFeature>
          break;
 8009abe:	e009      	b.n	8009ad4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fd07 	bl	800a4d6 <USBD_ClrFeature>
          break;
 8009ac8:	e004      	b.n	8009ad4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fd5e 	bl	800a58e <USBD_CtlError>
          break;
 8009ad2:	bf00      	nop
      }
      break;
 8009ad4:	e004      	b.n	8009ae0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fd58 	bl	800a58e <USBD_CtlError>
      break;
 8009ade:	bf00      	nop
  }

  return ret;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop

08009aec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b02:	2b40      	cmp	r3, #64	; 0x40
 8009b04:	d005      	beq.n	8009b12 <USBD_StdItfReq+0x26>
 8009b06:	2b40      	cmp	r3, #64	; 0x40
 8009b08:	d852      	bhi.n	8009bb0 <USBD_StdItfReq+0xc4>
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <USBD_StdItfReq+0x26>
 8009b0e:	2b20      	cmp	r3, #32
 8009b10:	d14e      	bne.n	8009bb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d840      	bhi.n	8009ba2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	889b      	ldrh	r3, [r3, #4]
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d836      	bhi.n	8009b98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	889b      	ldrh	r3, [r3, #4]
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	4619      	mov	r1, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7ff fed9 	bl	80098ea <USBD_CoreFindIF>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b3c:	7bbb      	ldrb	r3, [r7, #14]
 8009b3e:	2bff      	cmp	r3, #255	; 0xff
 8009b40:	d01d      	beq.n	8009b7e <USBD_StdItfReq+0x92>
 8009b42:	7bbb      	ldrb	r3, [r7, #14]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d11a      	bne.n	8009b7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b48:	7bba      	ldrb	r2, [r7, #14]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	32ae      	adds	r2, #174	; 0xae
 8009b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00f      	beq.n	8009b78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009b58:	7bba      	ldrb	r2, [r7, #14]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b60:	7bba      	ldrb	r2, [r7, #14]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	32ae      	adds	r2, #174	; 0xae
 8009b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	4798      	blx	r3
 8009b72:	4603      	mov	r3, r0
 8009b74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b76:	e004      	b.n	8009b82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b7c:	e001      	b.n	8009b82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	88db      	ldrh	r3, [r3, #6]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d110      	bne.n	8009bac <USBD_StdItfReq+0xc0>
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10d      	bne.n	8009bac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fdc7 	bl	800a724 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b96:	e009      	b.n	8009bac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fcf7 	bl	800a58e <USBD_CtlError>
          break;
 8009ba0:	e004      	b.n	8009bac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fcf2 	bl	800a58e <USBD_CtlError>
          break;
 8009baa:	e000      	b.n	8009bae <USBD_StdItfReq+0xc2>
          break;
 8009bac:	bf00      	nop
      }
      break;
 8009bae:	e004      	b.n	8009bba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fceb 	bl	800a58e <USBD_CtlError>
      break;
 8009bb8:	bf00      	nop
  }

  return ret;
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	889b      	ldrh	r3, [r3, #4]
 8009bd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009be0:	2b40      	cmp	r3, #64	; 0x40
 8009be2:	d007      	beq.n	8009bf4 <USBD_StdEPReq+0x30>
 8009be4:	2b40      	cmp	r3, #64	; 0x40
 8009be6:	f200 817f 	bhi.w	8009ee8 <USBD_StdEPReq+0x324>
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d02a      	beq.n	8009c44 <USBD_StdEPReq+0x80>
 8009bee:	2b20      	cmp	r3, #32
 8009bf0:	f040 817a 	bne.w	8009ee8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f7ff fe83 	bl	8009904 <USBD_CoreFindEP>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c02:	7b7b      	ldrb	r3, [r7, #13]
 8009c04:	2bff      	cmp	r3, #255	; 0xff
 8009c06:	f000 8174 	beq.w	8009ef2 <USBD_StdEPReq+0x32e>
 8009c0a:	7b7b      	ldrb	r3, [r7, #13]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f040 8170 	bne.w	8009ef2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009c12:	7b7a      	ldrb	r2, [r7, #13]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009c1a:	7b7a      	ldrb	r2, [r7, #13]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	32ae      	adds	r2, #174	; 0xae
 8009c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 8163 	beq.w	8009ef2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c2c:	7b7a      	ldrb	r2, [r7, #13]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	32ae      	adds	r2, #174	; 0xae
 8009c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	4798      	blx	r3
 8009c3e:	4603      	mov	r3, r0
 8009c40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c42:	e156      	b.n	8009ef2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	785b      	ldrb	r3, [r3, #1]
 8009c48:	2b03      	cmp	r3, #3
 8009c4a:	d008      	beq.n	8009c5e <USBD_StdEPReq+0x9a>
 8009c4c:	2b03      	cmp	r3, #3
 8009c4e:	f300 8145 	bgt.w	8009edc <USBD_StdEPReq+0x318>
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 809b 	beq.w	8009d8e <USBD_StdEPReq+0x1ca>
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d03c      	beq.n	8009cd6 <USBD_StdEPReq+0x112>
 8009c5c:	e13e      	b.n	8009edc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d002      	beq.n	8009c70 <USBD_StdEPReq+0xac>
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	d016      	beq.n	8009c9c <USBD_StdEPReq+0xd8>
 8009c6e:	e02c      	b.n	8009cca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c70:	7bbb      	ldrb	r3, [r7, #14]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00d      	beq.n	8009c92 <USBD_StdEPReq+0xce>
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	2b80      	cmp	r3, #128	; 0x80
 8009c7a:	d00a      	beq.n	8009c92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c7c:	7bbb      	ldrb	r3, [r7, #14]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f004 fa67 	bl	800e154 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c86:	2180      	movs	r1, #128	; 0x80
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f004 fa63 	bl	800e154 <USBD_LL_StallEP>
 8009c8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c90:	e020      	b.n	8009cd4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fc7a 	bl	800a58e <USBD_CtlError>
              break;
 8009c9a:	e01b      	b.n	8009cd4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	885b      	ldrh	r3, [r3, #2]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10e      	bne.n	8009cc2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00b      	beq.n	8009cc2 <USBD_StdEPReq+0xfe>
 8009caa:	7bbb      	ldrb	r3, [r7, #14]
 8009cac:	2b80      	cmp	r3, #128	; 0x80
 8009cae:	d008      	beq.n	8009cc2 <USBD_StdEPReq+0xfe>
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	88db      	ldrh	r3, [r3, #6]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d104      	bne.n	8009cc2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	4619      	mov	r1, r3
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f004 fa49 	bl	800e154 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fd2e 	bl	800a724 <USBD_CtlSendStatus>

              break;
 8009cc8:	e004      	b.n	8009cd4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fc5e 	bl	800a58e <USBD_CtlError>
              break;
 8009cd2:	bf00      	nop
          }
          break;
 8009cd4:	e107      	b.n	8009ee6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d002      	beq.n	8009ce8 <USBD_StdEPReq+0x124>
 8009ce2:	2b03      	cmp	r3, #3
 8009ce4:	d016      	beq.n	8009d14 <USBD_StdEPReq+0x150>
 8009ce6:	e04b      	b.n	8009d80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ce8:	7bbb      	ldrb	r3, [r7, #14]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00d      	beq.n	8009d0a <USBD_StdEPReq+0x146>
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	2b80      	cmp	r3, #128	; 0x80
 8009cf2:	d00a      	beq.n	8009d0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f004 fa2b 	bl	800e154 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cfe:	2180      	movs	r1, #128	; 0x80
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f004 fa27 	bl	800e154 <USBD_LL_StallEP>
 8009d06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d08:	e040      	b.n	8009d8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fc3e 	bl	800a58e <USBD_CtlError>
              break;
 8009d12:	e03b      	b.n	8009d8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	885b      	ldrh	r3, [r3, #2]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d136      	bne.n	8009d8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d004      	beq.n	8009d30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d26:	7bbb      	ldrb	r3, [r7, #14]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f004 fa31 	bl	800e192 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fcf7 	bl	800a724 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7ff fde2 	bl	8009904 <USBD_CoreFindEP>
 8009d40:	4603      	mov	r3, r0
 8009d42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d44:	7b7b      	ldrb	r3, [r7, #13]
 8009d46:	2bff      	cmp	r3, #255	; 0xff
 8009d48:	d01f      	beq.n	8009d8a <USBD_StdEPReq+0x1c6>
 8009d4a:	7b7b      	ldrb	r3, [r7, #13]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d11c      	bne.n	8009d8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d50:	7b7a      	ldrb	r2, [r7, #13]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009d58:	7b7a      	ldrb	r2, [r7, #13]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	32ae      	adds	r2, #174	; 0xae
 8009d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d010      	beq.n	8009d8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d68:	7b7a      	ldrb	r2, [r7, #13]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	32ae      	adds	r2, #174	; 0xae
 8009d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	4798      	blx	r3
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009d7e:	e004      	b.n	8009d8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fc03 	bl	800a58e <USBD_CtlError>
              break;
 8009d88:	e000      	b.n	8009d8c <USBD_StdEPReq+0x1c8>
              break;
 8009d8a:	bf00      	nop
          }
          break;
 8009d8c:	e0ab      	b.n	8009ee6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d002      	beq.n	8009da0 <USBD_StdEPReq+0x1dc>
 8009d9a:	2b03      	cmp	r3, #3
 8009d9c:	d032      	beq.n	8009e04 <USBD_StdEPReq+0x240>
 8009d9e:	e097      	b.n	8009ed0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d007      	beq.n	8009db6 <USBD_StdEPReq+0x1f2>
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
 8009da8:	2b80      	cmp	r3, #128	; 0x80
 8009daa:	d004      	beq.n	8009db6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fbed 	bl	800a58e <USBD_CtlError>
                break;
 8009db4:	e091      	b.n	8009eda <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009db6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	da0b      	bge.n	8009dd6 <USBD_StdEPReq+0x212>
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
 8009dc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	3310      	adds	r3, #16
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	e00b      	b.n	8009dee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
 8009dd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	4413      	add	r3, r2
 8009dec:	3304      	adds	r3, #4
 8009dee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	2202      	movs	r2, #2
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fc37 	bl	800a670 <USBD_CtlSendData>
              break;
 8009e02:	e06a      	b.n	8009eda <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	da11      	bge.n	8009e30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	f003 020f 	and.w	r2, r3, #15
 8009e12:	6879      	ldr	r1, [r7, #4]
 8009e14:	4613      	mov	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	440b      	add	r3, r1
 8009e1e:	3324      	adds	r3, #36	; 0x24
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d117      	bne.n	8009e56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fbb0 	bl	800a58e <USBD_CtlError>
                  break;
 8009e2e:	e054      	b.n	8009eda <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	f003 020f 	and.w	r2, r3, #15
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	440b      	add	r3, r1
 8009e42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d104      	bne.n	8009e56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fb9d 	bl	800a58e <USBD_CtlError>
                  break;
 8009e54:	e041      	b.n	8009eda <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	da0b      	bge.n	8009e76 <USBD_StdEPReq+0x2b2>
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e64:	4613      	mov	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4413      	add	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	3310      	adds	r3, #16
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	4413      	add	r3, r2
 8009e72:	3304      	adds	r3, #4
 8009e74:	e00b      	b.n	8009e8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4413      	add	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <USBD_StdEPReq+0x2d8>
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	2b80      	cmp	r3, #128	; 0x80
 8009e9a:	d103      	bne.n	8009ea4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	e00e      	b.n	8009ec2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ea4:	7bbb      	ldrb	r3, [r7, #14]
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f004 f991 	bl	800e1d0 <USBD_LL_IsStallEP>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d003      	beq.n	8009ebc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	601a      	str	r2, [r3, #0]
 8009eba:	e002      	b.n	8009ec2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	2202      	movs	r2, #2
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fbd1 	bl	800a670 <USBD_CtlSendData>
              break;
 8009ece:	e004      	b.n	8009eda <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fb5b 	bl	800a58e <USBD_CtlError>
              break;
 8009ed8:	bf00      	nop
          }
          break;
 8009eda:	e004      	b.n	8009ee6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fb55 	bl	800a58e <USBD_CtlError>
          break;
 8009ee4:	bf00      	nop
      }
      break;
 8009ee6:	e005      	b.n	8009ef4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009ee8:	6839      	ldr	r1, [r7, #0]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fb4f 	bl	800a58e <USBD_CtlError>
      break;
 8009ef0:	e000      	b.n	8009ef4 <USBD_StdEPReq+0x330>
      break;
 8009ef2:	bf00      	nop
  }

  return ret;
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
	...

08009f00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	885b      	ldrh	r3, [r3, #2]
 8009f1a:	0a1b      	lsrs	r3, r3, #8
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	2b06      	cmp	r3, #6
 8009f22:	f200 8128 	bhi.w	800a176 <USBD_GetDescriptor+0x276>
 8009f26:	a201      	add	r2, pc, #4	; (adr r2, 8009f2c <USBD_GetDescriptor+0x2c>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009f49 	.word	0x08009f49
 8009f30:	08009f61 	.word	0x08009f61
 8009f34:	08009fa1 	.word	0x08009fa1
 8009f38:	0800a177 	.word	0x0800a177
 8009f3c:	0800a177 	.word	0x0800a177
 8009f40:	0800a117 	.word	0x0800a117
 8009f44:	0800a143 	.word	0x0800a143
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	7c12      	ldrb	r2, [r2, #16]
 8009f54:	f107 0108 	add.w	r1, r7, #8
 8009f58:	4610      	mov	r0, r2
 8009f5a:	4798      	blx	r3
 8009f5c:	60f8      	str	r0, [r7, #12]
      break;
 8009f5e:	e112      	b.n	800a186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	7c1b      	ldrb	r3, [r3, #16]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10d      	bne.n	8009f84 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f70:	f107 0208 	add.w	r2, r7, #8
 8009f74:	4610      	mov	r0, r2
 8009f76:	4798      	blx	r3
 8009f78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	2202      	movs	r2, #2
 8009f80:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f82:	e100      	b.n	800a186 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8c:	f107 0208 	add.w	r2, r7, #8
 8009f90:	4610      	mov	r0, r2
 8009f92:	4798      	blx	r3
 8009f94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	701a      	strb	r2, [r3, #0]
      break;
 8009f9e:	e0f2      	b.n	800a186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	885b      	ldrh	r3, [r3, #2]
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	2b05      	cmp	r3, #5
 8009fa8:	f200 80ac 	bhi.w	800a104 <USBD_GetDescriptor+0x204>
 8009fac:	a201      	add	r2, pc, #4	; (adr r2, 8009fb4 <USBD_GetDescriptor+0xb4>)
 8009fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb2:	bf00      	nop
 8009fb4:	08009fcd 	.word	0x08009fcd
 8009fb8:	0800a001 	.word	0x0800a001
 8009fbc:	0800a035 	.word	0x0800a035
 8009fc0:	0800a069 	.word	0x0800a069
 8009fc4:	0800a09d 	.word	0x0800a09d
 8009fc8:	0800a0d1 	.word	0x0800a0d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00b      	beq.n	8009ff0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	7c12      	ldrb	r2, [r2, #16]
 8009fe4:	f107 0108 	add.w	r1, r7, #8
 8009fe8:	4610      	mov	r0, r2
 8009fea:	4798      	blx	r3
 8009fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fee:	e091      	b.n	800a114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 facb 	bl	800a58e <USBD_CtlError>
            err++;
 8009ff8:	7afb      	ldrb	r3, [r7, #11]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ffe:	e089      	b.n	800a114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00b      	beq.n	800a024 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	7c12      	ldrb	r2, [r2, #16]
 800a018:	f107 0108 	add.w	r1, r7, #8
 800a01c:	4610      	mov	r0, r2
 800a01e:	4798      	blx	r3
 800a020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a022:	e077      	b.n	800a114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a024:	6839      	ldr	r1, [r7, #0]
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fab1 	bl	800a58e <USBD_CtlError>
            err++;
 800a02c:	7afb      	ldrb	r3, [r7, #11]
 800a02e:	3301      	adds	r3, #1
 800a030:	72fb      	strb	r3, [r7, #11]
          break;
 800a032:	e06f      	b.n	800a114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00b      	beq.n	800a058 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	7c12      	ldrb	r2, [r2, #16]
 800a04c:	f107 0108 	add.w	r1, r7, #8
 800a050:	4610      	mov	r0, r2
 800a052:	4798      	blx	r3
 800a054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a056:	e05d      	b.n	800a114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a058:	6839      	ldr	r1, [r7, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fa97 	bl	800a58e <USBD_CtlError>
            err++;
 800a060:	7afb      	ldrb	r3, [r7, #11]
 800a062:	3301      	adds	r3, #1
 800a064:	72fb      	strb	r3, [r7, #11]
          break;
 800a066:	e055      	b.n	800a114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00b      	beq.n	800a08c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	7c12      	ldrb	r2, [r2, #16]
 800a080:	f107 0108 	add.w	r1, r7, #8
 800a084:	4610      	mov	r0, r2
 800a086:	4798      	blx	r3
 800a088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a08a:	e043      	b.n	800a114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 fa7d 	bl	800a58e <USBD_CtlError>
            err++;
 800a094:	7afb      	ldrb	r3, [r7, #11]
 800a096:	3301      	adds	r3, #1
 800a098:	72fb      	strb	r3, [r7, #11]
          break;
 800a09a:	e03b      	b.n	800a114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0a2:	695b      	ldr	r3, [r3, #20]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00b      	beq.n	800a0c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ae:	695b      	ldr	r3, [r3, #20]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	7c12      	ldrb	r2, [r2, #16]
 800a0b4:	f107 0108 	add.w	r1, r7, #8
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	4798      	blx	r3
 800a0bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0be:	e029      	b.n	800a114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fa63 	bl	800a58e <USBD_CtlError>
            err++;
 800a0c8:	7afb      	ldrb	r3, [r7, #11]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ce:	e021      	b.n	800a114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00b      	beq.n	800a0f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	7c12      	ldrb	r2, [r2, #16]
 800a0e8:	f107 0108 	add.w	r1, r7, #8
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	4798      	blx	r3
 800a0f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0f2:	e00f      	b.n	800a114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fa49 	bl	800a58e <USBD_CtlError>
            err++;
 800a0fc:	7afb      	ldrb	r3, [r7, #11]
 800a0fe:	3301      	adds	r3, #1
 800a100:	72fb      	strb	r3, [r7, #11]
          break;
 800a102:	e007      	b.n	800a114 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fa41 	bl	800a58e <USBD_CtlError>
          err++;
 800a10c:	7afb      	ldrb	r3, [r7, #11]
 800a10e:	3301      	adds	r3, #1
 800a110:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a112:	bf00      	nop
      }
      break;
 800a114:	e037      	b.n	800a186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	7c1b      	ldrb	r3, [r3, #16]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d109      	bne.n	800a132 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a126:	f107 0208 	add.w	r2, r7, #8
 800a12a:	4610      	mov	r0, r2
 800a12c:	4798      	blx	r3
 800a12e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a130:	e029      	b.n	800a186 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fa2a 	bl	800a58e <USBD_CtlError>
        err++;
 800a13a:	7afb      	ldrb	r3, [r7, #11]
 800a13c:	3301      	adds	r3, #1
 800a13e:	72fb      	strb	r3, [r7, #11]
      break;
 800a140:	e021      	b.n	800a186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	7c1b      	ldrb	r3, [r3, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10d      	bne.n	800a166 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a152:	f107 0208 	add.w	r2, r7, #8
 800a156:	4610      	mov	r0, r2
 800a158:	4798      	blx	r3
 800a15a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	3301      	adds	r3, #1
 800a160:	2207      	movs	r2, #7
 800a162:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a164:	e00f      	b.n	800a186 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fa10 	bl	800a58e <USBD_CtlError>
        err++;
 800a16e:	7afb      	ldrb	r3, [r7, #11]
 800a170:	3301      	adds	r3, #1
 800a172:	72fb      	strb	r3, [r7, #11]
      break;
 800a174:	e007      	b.n	800a186 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fa08 	bl	800a58e <USBD_CtlError>
      err++;
 800a17e:	7afb      	ldrb	r3, [r7, #11]
 800a180:	3301      	adds	r3, #1
 800a182:	72fb      	strb	r3, [r7, #11]
      break;
 800a184:	bf00      	nop
  }

  if (err != 0U)
 800a186:	7afb      	ldrb	r3, [r7, #11]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d11e      	bne.n	800a1ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	88db      	ldrh	r3, [r3, #6]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d016      	beq.n	800a1c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a194:	893b      	ldrh	r3, [r7, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00e      	beq.n	800a1b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	88da      	ldrh	r2, [r3, #6]
 800a19e:	893b      	ldrh	r3, [r7, #8]
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	bf28      	it	cs
 800a1a4:	4613      	movcs	r3, r2
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1aa:	893b      	ldrh	r3, [r7, #8]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	68f9      	ldr	r1, [r7, #12]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fa5d 	bl	800a670 <USBD_CtlSendData>
 800a1b6:	e009      	b.n	800a1cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f9e7 	bl	800a58e <USBD_CtlError>
 800a1c0:	e004      	b.n	800a1cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 faae 	bl	800a724 <USBD_CtlSendStatus>
 800a1c8:	e000      	b.n	800a1cc <USBD_GetDescriptor+0x2cc>
    return;
 800a1ca:	bf00      	nop
  }
}
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop

0800a1d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	889b      	ldrh	r3, [r3, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d131      	bne.n	800a24a <USBD_SetAddress+0x76>
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	88db      	ldrh	r3, [r3, #6]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d12d      	bne.n	800a24a <USBD_SetAddress+0x76>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	885b      	ldrh	r3, [r3, #2]
 800a1f2:	2b7f      	cmp	r3, #127	; 0x7f
 800a1f4:	d829      	bhi.n	800a24a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	885b      	ldrh	r3, [r3, #2]
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a200:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d104      	bne.n	800a218 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f9bc 	bl	800a58e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a216:	e01d      	b.n	800a254 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	7bfa      	ldrb	r2, [r7, #15]
 800a21c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f003 ffff 	bl	800e228 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fa7a 	bl	800a724 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a230:	7bfb      	ldrb	r3, [r7, #15]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d004      	beq.n	800a240 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2202      	movs	r2, #2
 800a23a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a23e:	e009      	b.n	800a254 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a248:	e004      	b.n	800a254 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a24a:	6839      	ldr	r1, [r7, #0]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f99e 	bl	800a58e <USBD_CtlError>
  }
}
 800a252:	bf00      	nop
 800a254:	bf00      	nop
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	885b      	ldrh	r3, [r3, #2]
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	4b4e      	ldr	r3, [pc, #312]	; (800a3ac <USBD_SetConfig+0x150>)
 800a272:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a274:	4b4d      	ldr	r3, [pc, #308]	; (800a3ac <USBD_SetConfig+0x150>)
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d905      	bls.n	800a288 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f985 	bl	800a58e <USBD_CtlError>
    return USBD_FAIL;
 800a284:	2303      	movs	r3, #3
 800a286:	e08c      	b.n	800a3a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	2b02      	cmp	r3, #2
 800a292:	d002      	beq.n	800a29a <USBD_SetConfig+0x3e>
 800a294:	2b03      	cmp	r3, #3
 800a296:	d029      	beq.n	800a2ec <USBD_SetConfig+0x90>
 800a298:	e075      	b.n	800a386 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a29a:	4b44      	ldr	r3, [pc, #272]	; (800a3ac <USBD_SetConfig+0x150>)
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d020      	beq.n	800a2e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a2a2:	4b42      	ldr	r3, [pc, #264]	; (800a3ac <USBD_SetConfig+0x150>)
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2ac:	4b3f      	ldr	r3, [pc, #252]	; (800a3ac <USBD_SetConfig+0x150>)
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f7fe ffe7 	bl	8009286 <USBD_SetClassConfig>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d008      	beq.n	800a2d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f962 	bl	800a58e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2d2:	e065      	b.n	800a3a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fa25 	bl	800a724 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2203      	movs	r2, #3
 800a2de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a2e2:	e05d      	b.n	800a3a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fa1d 	bl	800a724 <USBD_CtlSendStatus>
      break;
 800a2ea:	e059      	b.n	800a3a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a2ec:	4b2f      	ldr	r3, [pc, #188]	; (800a3ac <USBD_SetConfig+0x150>)
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d112      	bne.n	800a31a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a2fc:	4b2b      	ldr	r3, [pc, #172]	; (800a3ac <USBD_SetConfig+0x150>)
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	461a      	mov	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a306:	4b29      	ldr	r3, [pc, #164]	; (800a3ac <USBD_SetConfig+0x150>)
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	4619      	mov	r1, r3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7fe ffd6 	bl	80092be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa06 	bl	800a724 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a318:	e042      	b.n	800a3a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a31a:	4b24      	ldr	r3, [pc, #144]	; (800a3ac <USBD_SetConfig+0x150>)
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	429a      	cmp	r2, r3
 800a326:	d02a      	beq.n	800a37e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	4619      	mov	r1, r3
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7fe ffc4 	bl	80092be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a336:	4b1d      	ldr	r3, [pc, #116]	; (800a3ac <USBD_SetConfig+0x150>)
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	461a      	mov	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a340:	4b1a      	ldr	r3, [pc, #104]	; (800a3ac <USBD_SetConfig+0x150>)
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	4619      	mov	r1, r3
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7fe ff9d 	bl	8009286 <USBD_SetClassConfig>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a350:	7bfb      	ldrb	r3, [r7, #15]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00f      	beq.n	800a376 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f918 	bl	800a58e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	b2db      	uxtb	r3, r3
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7fe ffa9 	bl	80092be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a374:	e014      	b.n	800a3a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f9d4 	bl	800a724 <USBD_CtlSendStatus>
      break;
 800a37c:	e010      	b.n	800a3a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f9d0 	bl	800a724 <USBD_CtlSendStatus>
      break;
 800a384:	e00c      	b.n	800a3a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f900 	bl	800a58e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a38e:	4b07      	ldr	r3, [pc, #28]	; (800a3ac <USBD_SetConfig+0x150>)
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7fe ff92 	bl	80092be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a39a:	2303      	movs	r3, #3
 800a39c:	73fb      	strb	r3, [r7, #15]
      break;
 800a39e:	bf00      	nop
  }

  return ret;
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	2000068c 	.word	0x2000068c

0800a3b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	88db      	ldrh	r3, [r3, #6]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d004      	beq.n	800a3cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f8e2 	bl	800a58e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3ca:	e023      	b.n	800a414 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	dc02      	bgt.n	800a3de <USBD_GetConfig+0x2e>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	dc03      	bgt.n	800a3e4 <USBD_GetConfig+0x34>
 800a3dc:	e015      	b.n	800a40a <USBD_GetConfig+0x5a>
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d00b      	beq.n	800a3fa <USBD_GetConfig+0x4a>
 800a3e2:	e012      	b.n	800a40a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3308      	adds	r3, #8
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f93c 	bl	800a670 <USBD_CtlSendData>
        break;
 800a3f8:	e00c      	b.n	800a414 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	2201      	movs	r2, #1
 800a400:	4619      	mov	r1, r3
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f934 	bl	800a670 <USBD_CtlSendData>
        break;
 800a408:	e004      	b.n	800a414 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f8be 	bl	800a58e <USBD_CtlError>
        break;
 800a412:	bf00      	nop
}
 800a414:	bf00      	nop
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	3b01      	subs	r3, #1
 800a430:	2b02      	cmp	r3, #2
 800a432:	d81e      	bhi.n	800a472 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	88db      	ldrh	r3, [r3, #6]
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d004      	beq.n	800a446 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a43c:	6839      	ldr	r1, [r7, #0]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f8a5 	bl	800a58e <USBD_CtlError>
        break;
 800a444:	e01a      	b.n	800a47c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a452:	2b00      	cmp	r3, #0
 800a454:	d005      	beq.n	800a462 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	f043 0202 	orr.w	r2, r3, #2
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	330c      	adds	r3, #12
 800a466:	2202      	movs	r2, #2
 800a468:	4619      	mov	r1, r3
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f900 	bl	800a670 <USBD_CtlSendData>
      break;
 800a470:	e004      	b.n	800a47c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a472:	6839      	ldr	r1, [r7, #0]
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f88a 	bl	800a58e <USBD_CtlError>
      break;
 800a47a:	bf00      	nop
  }
}
 800a47c:	bf00      	nop
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	885b      	ldrh	r3, [r3, #2]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d107      	bne.n	800a4a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f940 	bl	800a724 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a4a4:	e013      	b.n	800a4ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	885b      	ldrh	r3, [r3, #2]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d10b      	bne.n	800a4c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	889b      	ldrh	r3, [r3, #4]
 800a4b2:	0a1b      	lsrs	r3, r3, #8
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f930 	bl	800a724 <USBD_CtlSendStatus>
}
 800a4c4:	e003      	b.n	800a4ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f860 	bl	800a58e <USBD_CtlError>
}
 800a4ce:	bf00      	nop
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b082      	sub	sp, #8
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d80b      	bhi.n	800a506 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	885b      	ldrh	r3, [r3, #2]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d10c      	bne.n	800a510 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 f910 	bl	800a724 <USBD_CtlSendStatus>
      }
      break;
 800a504:	e004      	b.n	800a510 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a506:	6839      	ldr	r1, [r7, #0]
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f840 	bl	800a58e <USBD_CtlError>
      break;
 800a50e:	e000      	b.n	800a512 <USBD_ClrFeature+0x3c>
      break;
 800a510:	bf00      	nop
  }
}
 800a512:	bf00      	nop
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	781a      	ldrb	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	3301      	adds	r3, #1
 800a534:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	781a      	ldrb	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3301      	adds	r3, #1
 800a542:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f7ff fa41 	bl	80099cc <SWAPBYTE>
 800a54a:	4603      	mov	r3, r0
 800a54c:	461a      	mov	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3301      	adds	r3, #1
 800a556:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3301      	adds	r3, #1
 800a55c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f7ff fa34 	bl	80099cc <SWAPBYTE>
 800a564:	4603      	mov	r3, r0
 800a566:	461a      	mov	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3301      	adds	r3, #1
 800a570:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3301      	adds	r3, #1
 800a576:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f7ff fa27 	bl	80099cc <SWAPBYTE>
 800a57e:	4603      	mov	r3, r0
 800a580:	461a      	mov	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	80da      	strh	r2, [r3, #6]
}
 800a586:	bf00      	nop
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b082      	sub	sp, #8
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a598:	2180      	movs	r1, #128	; 0x80
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f003 fdda 	bl	800e154 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f003 fdd6 	bl	800e154 <USBD_LL_StallEP>
}
 800a5a8:	bf00      	nop
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d036      	beq.n	800a634 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5ca:	6938      	ldr	r0, [r7, #16]
 800a5cc:	f000 f836 	bl	800a63c <USBD_GetLen>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	005b      	lsls	r3, r3, #1
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	7812      	ldrb	r2, [r2, #0]
 800a5e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5ea:	7dfb      	ldrb	r3, [r7, #23]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	68ba      	ldr	r2, [r7, #8]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	2203      	movs	r2, #3
 800a5f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a600:	e013      	b.n	800a62a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a602:	7dfb      	ldrb	r3, [r7, #23]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	4413      	add	r3, r2
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	7812      	ldrb	r2, [r2, #0]
 800a60c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	3301      	adds	r3, #1
 800a612:	613b      	str	r3, [r7, #16]
    idx++;
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	3301      	adds	r3, #1
 800a618:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	4413      	add	r3, r2
 800a620:	2200      	movs	r2, #0
 800a622:	701a      	strb	r2, [r3, #0]
    idx++;
 800a624:	7dfb      	ldrb	r3, [r7, #23]
 800a626:	3301      	adds	r3, #1
 800a628:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1e7      	bne.n	800a602 <USBD_GetString+0x52>
 800a632:	e000      	b.n	800a636 <USBD_GetString+0x86>
    return;
 800a634:	bf00      	nop
  }
}
 800a636:	3718      	adds	r7, #24
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a644:	2300      	movs	r3, #0
 800a646:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a64c:	e005      	b.n	800a65a <USBD_GetLen+0x1e>
  {
    len++;
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	3301      	adds	r3, #1
 800a652:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	3301      	adds	r3, #1
 800a658:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1f5      	bne.n	800a64e <USBD_GetLen+0x12>
  }

  return len;
 800a662:	7bfb      	ldrb	r3, [r7, #15]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2202      	movs	r2, #2
 800a680:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	2100      	movs	r1, #0
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f003 fde5 	bl	800e266 <USBD_LL_Transmit>

  return USBD_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b084      	sub	sp, #16
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	60f8      	str	r0, [r7, #12]
 800a6ae:	60b9      	str	r1, [r7, #8]
 800a6b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f003 fdd4 	bl	800e266 <USBD_LL_Transmit>

  return USBD_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2203      	movs	r2, #3
 800a6d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f003 fdd8 	bl	800e2a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	60f8      	str	r0, [r7, #12]
 800a70a:	60b9      	str	r1, [r7, #8]
 800a70c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	2100      	movs	r1, #0
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f003 fdc7 	bl	800e2a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2204      	movs	r2, #4
 800a730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a734:	2300      	movs	r3, #0
 800a736:	2200      	movs	r2, #0
 800a738:	2100      	movs	r1, #0
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f003 fd93 	bl	800e266 <USBD_LL_Transmit>

  return USBD_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b082      	sub	sp, #8
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2205      	movs	r2, #5
 800a756:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a75a:	2300      	movs	r3, #0
 800a75c:	2200      	movs	r2, #0
 800a75e:	2100      	movs	r1, #0
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f003 fda1 	bl	800e2a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <__NVIC_SetPriority>:
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	6039      	str	r1, [r7, #0]
 800a77a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a77c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a780:	2b00      	cmp	r3, #0
 800a782:	db0a      	blt.n	800a79a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	b2da      	uxtb	r2, r3
 800a788:	490c      	ldr	r1, [pc, #48]	; (800a7bc <__NVIC_SetPriority+0x4c>)
 800a78a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a78e:	0112      	lsls	r2, r2, #4
 800a790:	b2d2      	uxtb	r2, r2
 800a792:	440b      	add	r3, r1
 800a794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a798:	e00a      	b.n	800a7b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	4908      	ldr	r1, [pc, #32]	; (800a7c0 <__NVIC_SetPriority+0x50>)
 800a7a0:	79fb      	ldrb	r3, [r7, #7]
 800a7a2:	f003 030f 	and.w	r3, r3, #15
 800a7a6:	3b04      	subs	r3, #4
 800a7a8:	0112      	lsls	r2, r2, #4
 800a7aa:	b2d2      	uxtb	r2, r2
 800a7ac:	440b      	add	r3, r1
 800a7ae:	761a      	strb	r2, [r3, #24]
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	e000e100 	.word	0xe000e100
 800a7c0:	e000ed00 	.word	0xe000ed00

0800a7c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a7c8:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <SysTick_Handler+0x1c>)
 800a7ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a7cc:	f002 f818 	bl	800c800 <xTaskGetSchedulerState>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d001      	beq.n	800a7da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a7d6:	f002 fdff 	bl	800d3d8 <xPortSysTickHandler>
  }
}
 800a7da:	bf00      	nop
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	e000e010 	.word	0xe000e010

0800a7e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	f06f 0004 	mvn.w	r0, #4
 800a7ee:	f7ff ffbf 	bl	800a770 <__NVIC_SetPriority>
#endif
}
 800a7f2:	bf00      	nop
 800a7f4:	bd80      	pop	{r7, pc}
	...

0800a7f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7fe:	f3ef 8305 	mrs	r3, IPSR
 800a802:	603b      	str	r3, [r7, #0]
  return(result);
 800a804:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a806:	2b00      	cmp	r3, #0
 800a808:	d003      	beq.n	800a812 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a80a:	f06f 0305 	mvn.w	r3, #5
 800a80e:	607b      	str	r3, [r7, #4]
 800a810:	e00c      	b.n	800a82c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a812:	4b0a      	ldr	r3, [pc, #40]	; (800a83c <osKernelInitialize+0x44>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d105      	bne.n	800a826 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a81a:	4b08      	ldr	r3, [pc, #32]	; (800a83c <osKernelInitialize+0x44>)
 800a81c:	2201      	movs	r2, #1
 800a81e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a820:	2300      	movs	r3, #0
 800a822:	607b      	str	r3, [r7, #4]
 800a824:	e002      	b.n	800a82c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a826:	f04f 33ff 	mov.w	r3, #4294967295
 800a82a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a82c:	687b      	ldr	r3, [r7, #4]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	20000690 	.word	0x20000690

0800a840 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a846:	f3ef 8305 	mrs	r3, IPSR
 800a84a:	603b      	str	r3, [r7, #0]
  return(result);
 800a84c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d003      	beq.n	800a85a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a852:	f06f 0305 	mvn.w	r3, #5
 800a856:	607b      	str	r3, [r7, #4]
 800a858:	e010      	b.n	800a87c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a85a:	4b0b      	ldr	r3, [pc, #44]	; (800a888 <osKernelStart+0x48>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d109      	bne.n	800a876 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a862:	f7ff ffbf 	bl	800a7e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a866:	4b08      	ldr	r3, [pc, #32]	; (800a888 <osKernelStart+0x48>)
 800a868:	2202      	movs	r2, #2
 800a86a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a86c:	f001 fb6c 	bl	800bf48 <vTaskStartScheduler>
      stat = osOK;
 800a870:	2300      	movs	r3, #0
 800a872:	607b      	str	r3, [r7, #4]
 800a874:	e002      	b.n	800a87c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a876:	f04f 33ff 	mov.w	r3, #4294967295
 800a87a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a87c:	687b      	ldr	r3, [r7, #4]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	20000690 	.word	0x20000690

0800a88c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08e      	sub	sp, #56	; 0x38
 800a890:	af04      	add	r7, sp, #16
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a898:	2300      	movs	r3, #0
 800a89a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a89c:	f3ef 8305 	mrs	r3, IPSR
 800a8a0:	617b      	str	r3, [r7, #20]
  return(result);
 800a8a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d17e      	bne.n	800a9a6 <osThreadNew+0x11a>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d07b      	beq.n	800a9a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a8ae:	2380      	movs	r3, #128	; 0x80
 800a8b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a8b2:	2318      	movs	r3, #24
 800a8b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a8ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a8be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d045      	beq.n	800a952 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d002      	beq.n	800a8d4 <osThreadNew+0x48>
        name = attr->name;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d008      	beq.n	800a8fa <osThreadNew+0x6e>
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	2b38      	cmp	r3, #56	; 0x38
 800a8ec:	d805      	bhi.n	800a8fa <osThreadNew+0x6e>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <osThreadNew+0x72>
        return (NULL);
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	e054      	b.n	800a9a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d003      	beq.n	800a90e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	089b      	lsrs	r3, r3, #2
 800a90c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00e      	beq.n	800a934 <osThreadNew+0xa8>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	2ba7      	cmp	r3, #167	; 0xa7
 800a91c:	d90a      	bls.n	800a934 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a922:	2b00      	cmp	r3, #0
 800a924:	d006      	beq.n	800a934 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d002      	beq.n	800a934 <osThreadNew+0xa8>
        mem = 1;
 800a92e:	2301      	movs	r3, #1
 800a930:	61bb      	str	r3, [r7, #24]
 800a932:	e010      	b.n	800a956 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10c      	bne.n	800a956 <osThreadNew+0xca>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d108      	bne.n	800a956 <osThreadNew+0xca>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d104      	bne.n	800a956 <osThreadNew+0xca>
          mem = 0;
 800a94c:	2300      	movs	r3, #0
 800a94e:	61bb      	str	r3, [r7, #24]
 800a950:	e001      	b.n	800a956 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d110      	bne.n	800a97e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a964:	9202      	str	r2, [sp, #8]
 800a966:	9301      	str	r3, [sp, #4]
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	6a3a      	ldr	r2, [r7, #32]
 800a970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f001 f930 	bl	800bbd8 <xTaskCreateStatic>
 800a978:	4603      	mov	r3, r0
 800a97a:	613b      	str	r3, [r7, #16]
 800a97c:	e013      	b.n	800a9a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d110      	bne.n	800a9a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a984:	6a3b      	ldr	r3, [r7, #32]
 800a986:	b29a      	uxth	r2, r3
 800a988:	f107 0310 	add.w	r3, r7, #16
 800a98c:	9301      	str	r3, [sp, #4]
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f001 f97b 	bl	800bc92 <xTaskCreate>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d001      	beq.n	800a9a6 <osThreadNew+0x11a>
            hTask = NULL;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a9a6:	693b      	ldr	r3, [r7, #16]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3728      	adds	r7, #40	; 0x28
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9b6:	f3ef 8305 	mrs	r3, IPSR
 800a9ba:	603b      	str	r3, [r7, #0]
  return(result);
 800a9bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <osThreadYield+0x1a>
    stat = osErrorISR;
 800a9c2:	f06f 0305 	mvn.w	r3, #5
 800a9c6:	607b      	str	r3, [r7, #4]
 800a9c8:	e009      	b.n	800a9de <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800a9ce:	4b07      	ldr	r3, [pc, #28]	; (800a9ec <osThreadYield+0x3c>)
 800a9d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9d4:	601a      	str	r2, [r3, #0]
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800a9de:	687b      	ldr	r3, [r7, #4]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	e000ed04 	.word	0xe000ed04

0800a9f0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b08a      	sub	sp, #40	; 0x28
 800a9f4:	af02      	add	r7, sp, #8
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa00:	f3ef 8305 	mrs	r3, IPSR
 800aa04:	613b      	str	r3, [r7, #16]
  return(result);
 800aa06:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d175      	bne.n	800aaf8 <osSemaphoreNew+0x108>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d072      	beq.n	800aaf8 <osSemaphoreNew+0x108>
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d86e      	bhi.n	800aaf8 <osSemaphoreNew+0x108>
    mem = -1;
 800aa1a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d015      	beq.n	800aa52 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d006      	beq.n	800aa3c <osSemaphoreNew+0x4c>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	2b4f      	cmp	r3, #79	; 0x4f
 800aa34:	d902      	bls.n	800aa3c <osSemaphoreNew+0x4c>
        mem = 1;
 800aa36:	2301      	movs	r3, #1
 800aa38:	61bb      	str	r3, [r7, #24]
 800aa3a:	e00c      	b.n	800aa56 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d108      	bne.n	800aa56 <osSemaphoreNew+0x66>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d104      	bne.n	800aa56 <osSemaphoreNew+0x66>
          mem = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	61bb      	str	r3, [r7, #24]
 800aa50:	e001      	b.n	800aa56 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5c:	d04c      	beq.n	800aaf8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d128      	bne.n	800aab6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d10a      	bne.n	800aa80 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	2203      	movs	r2, #3
 800aa70:	9200      	str	r2, [sp, #0]
 800aa72:	2200      	movs	r2, #0
 800aa74:	2100      	movs	r1, #0
 800aa76:	2001      	movs	r0, #1
 800aa78:	f000 faac 	bl	800afd4 <xQueueGenericCreateStatic>
 800aa7c:	61f8      	str	r0, [r7, #28]
 800aa7e:	e005      	b.n	800aa8c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800aa80:	2203      	movs	r2, #3
 800aa82:	2100      	movs	r1, #0
 800aa84:	2001      	movs	r0, #1
 800aa86:	f000 fb1d 	bl	800b0c4 <xQueueGenericCreate>
 800aa8a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d022      	beq.n	800aad8 <osSemaphoreNew+0xe8>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d01f      	beq.n	800aad8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800aa98:	2300      	movs	r3, #0
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	69f8      	ldr	r0, [r7, #28]
 800aaa0:	f000 fbd8 	bl	800b254 <xQueueGenericSend>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d016      	beq.n	800aad8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800aaaa:	69f8      	ldr	r0, [r7, #28]
 800aaac:	f000 fed8 	bl	800b860 <vQueueDelete>
            hSemaphore = NULL;
 800aab0:	2300      	movs	r3, #0
 800aab2:	61fb      	str	r3, [r7, #28]
 800aab4:	e010      	b.n	800aad8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d108      	bne.n	800aace <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	461a      	mov	r2, r3
 800aac2:	68b9      	ldr	r1, [r7, #8]
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f000 fb5a 	bl	800b17e <xQueueCreateCountingSemaphoreStatic>
 800aaca:	61f8      	str	r0, [r7, #28]
 800aacc:	e004      	b.n	800aad8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f000 fb8b 	bl	800b1ec <xQueueCreateCountingSemaphore>
 800aad6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00c      	beq.n	800aaf8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d003      	beq.n	800aaec <osSemaphoreNew+0xfc>
          name = attr->name;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	617b      	str	r3, [r7, #20]
 800aaea:	e001      	b.n	800aaf0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800aaec:	2300      	movs	r3, #0
 800aaee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800aaf0:	6979      	ldr	r1, [r7, #20]
 800aaf2:	69f8      	ldr	r0, [r7, #28]
 800aaf4:	f000 ffe8 	bl	800bac8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800aaf8:	69fb      	ldr	r3, [r7, #28]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3720      	adds	r7, #32
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
	...

0800ab04 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d103      	bne.n	800ab22 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ab1a:	f06f 0303 	mvn.w	r3, #3
 800ab1e:	617b      	str	r3, [r7, #20]
 800ab20:	e02c      	b.n	800ab7c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab22:	f3ef 8305 	mrs	r3, IPSR
 800ab26:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab28:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d01a      	beq.n	800ab64 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ab32:	f107 0308 	add.w	r3, r7, #8
 800ab36:	4619      	mov	r1, r3
 800ab38:	6938      	ldr	r0, [r7, #16]
 800ab3a:	f000 fd24 	bl	800b586 <xQueueGiveFromISR>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d003      	beq.n	800ab4c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ab44:	f06f 0302 	mvn.w	r3, #2
 800ab48:	617b      	str	r3, [r7, #20]
 800ab4a:	e017      	b.n	800ab7c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d014      	beq.n	800ab7c <osSemaphoreRelease+0x78>
 800ab52:	4b0d      	ldr	r3, [pc, #52]	; (800ab88 <osSemaphoreRelease+0x84>)
 800ab54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab58:	601a      	str	r2, [r3, #0]
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	e00b      	b.n	800ab7c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ab64:	2300      	movs	r3, #0
 800ab66:	2200      	movs	r2, #0
 800ab68:	2100      	movs	r1, #0
 800ab6a:	6938      	ldr	r0, [r7, #16]
 800ab6c:	f000 fb72 	bl	800b254 <xQueueGenericSend>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d002      	beq.n	800ab7c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ab76:	f06f 0302 	mvn.w	r3, #2
 800ab7a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ab7c:	697b      	ldr	r3, [r7, #20]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3718      	adds	r7, #24
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	e000ed04 	.word	0xe000ed04

0800ab8c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08a      	sub	sp, #40	; 0x28
 800ab90:	af02      	add	r7, sp, #8
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab9c:	f3ef 8305 	mrs	r3, IPSR
 800aba0:	613b      	str	r3, [r7, #16]
  return(result);
 800aba2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d15f      	bne.n	800ac68 <osMessageQueueNew+0xdc>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d05c      	beq.n	800ac68 <osMessageQueueNew+0xdc>
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d059      	beq.n	800ac68 <osMessageQueueNew+0xdc>
    mem = -1;
 800abb4:	f04f 33ff 	mov.w	r3, #4294967295
 800abb8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d029      	beq.n	800ac14 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d012      	beq.n	800abee <osMessageQueueNew+0x62>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	2b4f      	cmp	r3, #79	; 0x4f
 800abce:	d90e      	bls.n	800abee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00a      	beq.n	800abee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	695a      	ldr	r2, [r3, #20]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	68b9      	ldr	r1, [r7, #8]
 800abe0:	fb01 f303 	mul.w	r3, r1, r3
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d302      	bcc.n	800abee <osMessageQueueNew+0x62>
        mem = 1;
 800abe8:	2301      	movs	r3, #1
 800abea:	61bb      	str	r3, [r7, #24]
 800abec:	e014      	b.n	800ac18 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d110      	bne.n	800ac18 <osMessageQueueNew+0x8c>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10c      	bne.n	800ac18 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d108      	bne.n	800ac18 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d104      	bne.n	800ac18 <osMessageQueueNew+0x8c>
          mem = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	61bb      	str	r3, [r7, #24]
 800ac12:	e001      	b.n	800ac18 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d10b      	bne.n	800ac36 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	691a      	ldr	r2, [r3, #16]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	2100      	movs	r1, #0
 800ac28:	9100      	str	r1, [sp, #0]
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 f9d1 	bl	800afd4 <xQueueGenericCreateStatic>
 800ac32:	61f8      	str	r0, [r7, #28]
 800ac34:	e008      	b.n	800ac48 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d105      	bne.n	800ac48 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	68b9      	ldr	r1, [r7, #8]
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f000 fa3f 	bl	800b0c4 <xQueueGenericCreate>
 800ac46:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00c      	beq.n	800ac68 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d003      	beq.n	800ac5c <osMessageQueueNew+0xd0>
        name = attr->name;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	617b      	str	r3, [r7, #20]
 800ac5a:	e001      	b.n	800ac60 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ac60:	6979      	ldr	r1, [r7, #20]
 800ac62:	69f8      	ldr	r0, [r7, #28]
 800ac64:	f000 ff30 	bl	800bac8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ac68:	69fb      	ldr	r3, [r7, #28]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3720      	adds	r7, #32
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
	...

0800ac74 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b088      	sub	sp, #32
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	603b      	str	r3, [r7, #0]
 800ac80:	4613      	mov	r3, r2
 800ac82:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac8c:	f3ef 8305 	mrs	r3, IPSR
 800ac90:	617b      	str	r3, [r7, #20]
  return(result);
 800ac92:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d028      	beq.n	800acea <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d005      	beq.n	800acaa <osMessageQueuePut+0x36>
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <osMessageQueuePut+0x36>
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800acaa:	f06f 0303 	mvn.w	r3, #3
 800acae:	61fb      	str	r3, [r7, #28]
 800acb0:	e038      	b.n	800ad24 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800acb2:	2300      	movs	r3, #0
 800acb4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800acb6:	f107 0210 	add.w	r2, r7, #16
 800acba:	2300      	movs	r3, #0
 800acbc:	68b9      	ldr	r1, [r7, #8]
 800acbe:	69b8      	ldr	r0, [r7, #24]
 800acc0:	f000 fbc6 	bl	800b450 <xQueueGenericSendFromISR>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d003      	beq.n	800acd2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800acca:	f06f 0302 	mvn.w	r3, #2
 800acce:	61fb      	str	r3, [r7, #28]
 800acd0:	e028      	b.n	800ad24 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d025      	beq.n	800ad24 <osMessageQueuePut+0xb0>
 800acd8:	4b15      	ldr	r3, [pc, #84]	; (800ad30 <osMessageQueuePut+0xbc>)
 800acda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	e01c      	b.n	800ad24 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <osMessageQueuePut+0x82>
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d103      	bne.n	800acfe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800acf6:	f06f 0303 	mvn.w	r3, #3
 800acfa:	61fb      	str	r3, [r7, #28]
 800acfc:	e012      	b.n	800ad24 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800acfe:	2300      	movs	r3, #0
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	68b9      	ldr	r1, [r7, #8]
 800ad04:	69b8      	ldr	r0, [r7, #24]
 800ad06:	f000 faa5 	bl	800b254 <xQueueGenericSend>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d009      	beq.n	800ad24 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ad16:	f06f 0301 	mvn.w	r3, #1
 800ad1a:	61fb      	str	r3, [r7, #28]
 800ad1c:	e002      	b.n	800ad24 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ad1e:	f06f 0302 	mvn.w	r3, #2
 800ad22:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ad24:	69fb      	ldr	r3, [r7, #28]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3720      	adds	r7, #32
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	e000ed04 	.word	0xe000ed04

0800ad34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4a07      	ldr	r2, [pc, #28]	; (800ad60 <vApplicationGetIdleTaskMemory+0x2c>)
 800ad44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	4a06      	ldr	r2, [pc, #24]	; (800ad64 <vApplicationGetIdleTaskMemory+0x30>)
 800ad4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2280      	movs	r2, #128	; 0x80
 800ad50:	601a      	str	r2, [r3, #0]
}
 800ad52:	bf00      	nop
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	20000694 	.word	0x20000694
 800ad64:	2000073c 	.word	0x2000073c

0800ad68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	4a07      	ldr	r2, [pc, #28]	; (800ad94 <vApplicationGetTimerTaskMemory+0x2c>)
 800ad78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	4a06      	ldr	r2, [pc, #24]	; (800ad98 <vApplicationGetTimerTaskMemory+0x30>)
 800ad7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad86:	601a      	str	r2, [r3, #0]
}
 800ad88:	bf00      	nop
 800ad8a:	3714      	adds	r7, #20
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr
 800ad94:	2000093c 	.word	0x2000093c
 800ad98:	200009e4 	.word	0x200009e4

0800ad9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f103 0208 	add.w	r2, r3, #8
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f04f 32ff 	mov.w	r2, #4294967295
 800adb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f103 0208 	add.w	r2, r3, #8
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f103 0208 	add.w	r2, r3, #8
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800add0:	bf00      	nop
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800adea:	bf00      	nop
 800adec:	370c      	adds	r7, #12
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adf6:	b480      	push	{r7}
 800adf8:	b085      	sub	sp, #20
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	689a      	ldr	r2, [r3, #8]
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	683a      	ldr	r2, [r7, #0]
 800ae20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	1c5a      	adds	r2, r3, #1
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	601a      	str	r2, [r3, #0]
}
 800ae32:	bf00      	nop
 800ae34:	3714      	adds	r7, #20
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b085      	sub	sp, #20
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae54:	d103      	bne.n	800ae5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	60fb      	str	r3, [r7, #12]
 800ae5c:	e00c      	b.n	800ae78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	3308      	adds	r3, #8
 800ae62:	60fb      	str	r3, [r7, #12]
 800ae64:	e002      	b.n	800ae6c <vListInsert+0x2e>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d2f6      	bcs.n	800ae66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	683a      	ldr	r2, [r7, #0]
 800ae92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	601a      	str	r2, [r3, #0]
}
 800aea4:	bf00      	nop
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	6892      	ldr	r2, [r2, #8]
 800aec6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	6852      	ldr	r2, [r2, #4]
 800aed0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d103      	bne.n	800aee4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	689a      	ldr	r2, [r3, #8]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	1e5a      	subs	r2, r3, #1
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3714      	adds	r7, #20
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10a      	bne.n	800af2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1c:	f383 8811 	msr	BASEPRI, r3
 800af20:	f3bf 8f6f 	isb	sy
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800af2a:	bf00      	nop
 800af2c:	e7fe      	b.n	800af2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800af2e:	f002 f9c1 	bl	800d2b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af3a:	68f9      	ldr	r1, [r7, #12]
 800af3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af3e:	fb01 f303 	mul.w	r3, r1, r3
 800af42:	441a      	add	r2, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af5e:	3b01      	subs	r3, #1
 800af60:	68f9      	ldr	r1, [r7, #12]
 800af62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af64:	fb01 f303 	mul.w	r3, r1, r3
 800af68:	441a      	add	r2, r3
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	22ff      	movs	r2, #255	; 0xff
 800af72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	22ff      	movs	r2, #255	; 0xff
 800af7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d114      	bne.n	800afae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d01a      	beq.n	800afc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	3310      	adds	r3, #16
 800af90:	4618      	mov	r0, r3
 800af92:	f001 fa73 	bl	800c47c <xTaskRemoveFromEventList>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d012      	beq.n	800afc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af9c:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <xQueueGenericReset+0xcc>)
 800af9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	e009      	b.n	800afc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	3310      	adds	r3, #16
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7ff fef2 	bl	800ad9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	3324      	adds	r3, #36	; 0x24
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff feed 	bl	800ad9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800afc2:	f002 f9a7 	bl	800d314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800afc6:	2301      	movs	r3, #1
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	e000ed04 	.word	0xe000ed04

0800afd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08e      	sub	sp, #56	; 0x38
 800afd8:	af02      	add	r7, sp, #8
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10a      	bne.n	800affe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800affa:	bf00      	nop
 800affc:	e7fe      	b.n	800affc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10a      	bne.n	800b01a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b016:	bf00      	nop
 800b018:	e7fe      	b.n	800b018 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <xQueueGenericCreateStatic+0x52>
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <xQueueGenericCreateStatic+0x56>
 800b026:	2301      	movs	r3, #1
 800b028:	e000      	b.n	800b02c <xQueueGenericCreateStatic+0x58>
 800b02a:	2300      	movs	r3, #0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10a      	bne.n	800b046 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b034:	f383 8811 	msr	BASEPRI, r3
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	623b      	str	r3, [r7, #32]
}
 800b042:	bf00      	nop
 800b044:	e7fe      	b.n	800b044 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d102      	bne.n	800b052 <xQueueGenericCreateStatic+0x7e>
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <xQueueGenericCreateStatic+0x82>
 800b052:	2301      	movs	r3, #1
 800b054:	e000      	b.n	800b058 <xQueueGenericCreateStatic+0x84>
 800b056:	2300      	movs	r3, #0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10a      	bne.n	800b072 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	61fb      	str	r3, [r7, #28]
}
 800b06e:	bf00      	nop
 800b070:	e7fe      	b.n	800b070 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b072:	2350      	movs	r3, #80	; 0x50
 800b074:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2b50      	cmp	r3, #80	; 0x50
 800b07a:	d00a      	beq.n	800b092 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	61bb      	str	r3, [r7, #24]
}
 800b08e:	bf00      	nop
 800b090:	e7fe      	b.n	800b090 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b092:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00d      	beq.n	800b0ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b0a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	68b9      	ldr	r1, [r7, #8]
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f000 f83f 	bl	800b138 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3730      	adds	r7, #48	; 0x30
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08a      	sub	sp, #40	; 0x28
 800b0c8:	af02      	add	r7, sp, #8
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10a      	bne.n	800b0ee <xQueueGenericCreate+0x2a>
	__asm volatile
 800b0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0dc:	f383 8811 	msr	BASEPRI, r3
 800b0e0:	f3bf 8f6f 	isb	sy
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	613b      	str	r3, [r7, #16]
}
 800b0ea:	bf00      	nop
 800b0ec:	e7fe      	b.n	800b0ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	fb02 f303 	mul.w	r3, r2, r3
 800b0f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	3350      	adds	r3, #80	; 0x50
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f002 f9fb 	bl	800d4f8 <pvPortMalloc>
 800b102:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d011      	beq.n	800b12e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	3350      	adds	r3, #80	; 0x50
 800b112:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b11c:	79fa      	ldrb	r2, [r7, #7]
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	4613      	mov	r3, r2
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	68b9      	ldr	r1, [r7, #8]
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f000 f805 	bl	800b138 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b12e:	69bb      	ldr	r3, [r7, #24]
	}
 800b130:	4618      	mov	r0, r3
 800b132:	3720      	adds	r7, #32
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
 800b144:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d103      	bne.n	800b154 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	69ba      	ldr	r2, [r7, #24]
 800b150:	601a      	str	r2, [r3, #0]
 800b152:	e002      	b.n	800b15a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b166:	2101      	movs	r1, #1
 800b168:	69b8      	ldr	r0, [r7, #24]
 800b16a:	f7ff fecb 	bl	800af04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	78fa      	ldrb	r2, [r7, #3]
 800b172:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b176:	bf00      	nop
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b08a      	sub	sp, #40	; 0x28
 800b182:	af02      	add	r7, sp, #8
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	60b9      	str	r1, [r7, #8]
 800b188:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10a      	bne.n	800b1a6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	61bb      	str	r3, [r7, #24]
}
 800b1a2:	bf00      	nop
 800b1a4:	e7fe      	b.n	800b1a4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d90a      	bls.n	800b1c4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	617b      	str	r3, [r7, #20]
}
 800b1c0:	bf00      	nop
 800b1c2:	e7fe      	b.n	800b1c2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b1c4:	2302      	movs	r3, #2
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f7ff ff00 	bl	800afd4 <xQueueGenericCreateStatic>
 800b1d4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b1e2:	69fb      	ldr	r3, [r7, #28]
	}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3720      	adds	r7, #32
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10a      	bne.n	800b212 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	613b      	str	r3, [r7, #16]
}
 800b20e:	bf00      	nop
 800b210:	e7fe      	b.n	800b210 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	429a      	cmp	r2, r3
 800b218:	d90a      	bls.n	800b230 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	60fb      	str	r3, [r7, #12]
}
 800b22c:	bf00      	nop
 800b22e:	e7fe      	b.n	800b22e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b230:	2202      	movs	r2, #2
 800b232:	2100      	movs	r1, #0
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7ff ff45 	bl	800b0c4 <xQueueGenericCreate>
 800b23a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d002      	beq.n	800b248 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	683a      	ldr	r2, [r7, #0]
 800b246:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b248:	697b      	ldr	r3, [r7, #20]
	}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3718      	adds	r7, #24
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
	...

0800b254 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b08e      	sub	sp, #56	; 0x38
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
 800b260:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b262:	2300      	movs	r3, #0
 800b264:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10a      	bne.n	800b286 <xQueueGenericSend+0x32>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b282:	bf00      	nop
 800b284:	e7fe      	b.n	800b284 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d103      	bne.n	800b294 <xQueueGenericSend+0x40>
 800b28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <xQueueGenericSend+0x44>
 800b294:	2301      	movs	r3, #1
 800b296:	e000      	b.n	800b29a <xQueueGenericSend+0x46>
 800b298:	2300      	movs	r3, #0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10a      	bne.n	800b2b4 <xQueueGenericSend+0x60>
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b2b0:	bf00      	nop
 800b2b2:	e7fe      	b.n	800b2b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	d103      	bne.n	800b2c2 <xQueueGenericSend+0x6e>
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d101      	bne.n	800b2c6 <xQueueGenericSend+0x72>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e000      	b.n	800b2c8 <xQueueGenericSend+0x74>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10a      	bne.n	800b2e2 <xQueueGenericSend+0x8e>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	623b      	str	r3, [r7, #32]
}
 800b2de:	bf00      	nop
 800b2e0:	e7fe      	b.n	800b2e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2e2:	f001 fa8d 	bl	800c800 <xTaskGetSchedulerState>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d102      	bne.n	800b2f2 <xQueueGenericSend+0x9e>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d101      	bne.n	800b2f6 <xQueueGenericSend+0xa2>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e000      	b.n	800b2f8 <xQueueGenericSend+0xa4>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10a      	bne.n	800b312 <xQueueGenericSend+0xbe>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b300:	f383 8811 	msr	BASEPRI, r3
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	61fb      	str	r3, [r7, #28]
}
 800b30e:	bf00      	nop
 800b310:	e7fe      	b.n	800b310 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b312:	f001 ffcf 	bl	800d2b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b31e:	429a      	cmp	r2, r3
 800b320:	d302      	bcc.n	800b328 <xQueueGenericSend+0xd4>
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2b02      	cmp	r3, #2
 800b326:	d129      	bne.n	800b37c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	68b9      	ldr	r1, [r7, #8]
 800b32c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b32e:	f000 faba 	bl	800b8a6 <prvCopyDataToQueue>
 800b332:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d010      	beq.n	800b35e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33e:	3324      	adds	r3, #36	; 0x24
 800b340:	4618      	mov	r0, r3
 800b342:	f001 f89b 	bl	800c47c <xTaskRemoveFromEventList>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d013      	beq.n	800b374 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b34c:	4b3f      	ldr	r3, [pc, #252]	; (800b44c <xQueueGenericSend+0x1f8>)
 800b34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b352:	601a      	str	r2, [r3, #0]
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	e00a      	b.n	800b374 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b360:	2b00      	cmp	r3, #0
 800b362:	d007      	beq.n	800b374 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b364:	4b39      	ldr	r3, [pc, #228]	; (800b44c <xQueueGenericSend+0x1f8>)
 800b366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b36a:	601a      	str	r2, [r3, #0]
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b374:	f001 ffce 	bl	800d314 <vPortExitCritical>
				return pdPASS;
 800b378:	2301      	movs	r3, #1
 800b37a:	e063      	b.n	800b444 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d103      	bne.n	800b38a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b382:	f001 ffc7 	bl	800d314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b386:	2300      	movs	r3, #0
 800b388:	e05c      	b.n	800b444 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d106      	bne.n	800b39e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b390:	f107 0314 	add.w	r3, r7, #20
 800b394:	4618      	mov	r0, r3
 800b396:	f001 f8d5 	bl	800c544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b39a:	2301      	movs	r3, #1
 800b39c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b39e:	f001 ffb9 	bl	800d314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3a2:	f000 fe41 	bl	800c028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3a6:	f001 ff85 	bl	800d2b4 <vPortEnterCritical>
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3b0:	b25b      	sxtb	r3, r3
 800b3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b6:	d103      	bne.n	800b3c0 <xQueueGenericSend+0x16c>
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3c6:	b25b      	sxtb	r3, r3
 800b3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3cc:	d103      	bne.n	800b3d6 <xQueueGenericSend+0x182>
 800b3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3d6:	f001 ff9d 	bl	800d314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3da:	1d3a      	adds	r2, r7, #4
 800b3dc:	f107 0314 	add.w	r3, r7, #20
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f001 f8c4 	bl	800c570 <xTaskCheckForTimeOut>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d124      	bne.n	800b438 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b3ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3f0:	f000 fb51 	bl	800ba96 <prvIsQueueFull>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d018      	beq.n	800b42c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	3310      	adds	r3, #16
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	4611      	mov	r1, r2
 800b402:	4618      	mov	r0, r3
 800b404:	f000 ffea 	bl	800c3dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b40a:	f000 fadc 	bl	800b9c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b40e:	f000 fe19 	bl	800c044 <xTaskResumeAll>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	f47f af7c 	bne.w	800b312 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b41a:	4b0c      	ldr	r3, [pc, #48]	; (800b44c <xQueueGenericSend+0x1f8>)
 800b41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	e772      	b.n	800b312 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b42c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b42e:	f000 faca 	bl	800b9c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b432:	f000 fe07 	bl	800c044 <xTaskResumeAll>
 800b436:	e76c      	b.n	800b312 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b43a:	f000 fac4 	bl	800b9c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b43e:	f000 fe01 	bl	800c044 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b442:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b444:	4618      	mov	r0, r3
 800b446:	3738      	adds	r7, #56	; 0x38
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	e000ed04 	.word	0xe000ed04

0800b450 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b090      	sub	sp, #64	; 0x40
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
 800b45c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10a      	bne.n	800b47e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b47a:	bf00      	nop
 800b47c:	e7fe      	b.n	800b47c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d103      	bne.n	800b48c <xQueueGenericSendFromISR+0x3c>
 800b484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <xQueueGenericSendFromISR+0x40>
 800b48c:	2301      	movs	r3, #1
 800b48e:	e000      	b.n	800b492 <xQueueGenericSendFromISR+0x42>
 800b490:	2300      	movs	r3, #0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10a      	bne.n	800b4ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4a8:	bf00      	nop
 800b4aa:	e7fe      	b.n	800b4aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d103      	bne.n	800b4ba <xQueueGenericSendFromISR+0x6a>
 800b4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d101      	bne.n	800b4be <xQueueGenericSendFromISR+0x6e>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e000      	b.n	800b4c0 <xQueueGenericSendFromISR+0x70>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	623b      	str	r3, [r7, #32]
}
 800b4d6:	bf00      	nop
 800b4d8:	e7fe      	b.n	800b4d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4da:	f001 ffcd 	bl	800d478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b4de:	f3ef 8211 	mrs	r2, BASEPRI
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	61fa      	str	r2, [r7, #28]
 800b4f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b4f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b502:	429a      	cmp	r2, r3
 800b504:	d302      	bcc.n	800b50c <xQueueGenericSendFromISR+0xbc>
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	2b02      	cmp	r3, #2
 800b50a:	d12f      	bne.n	800b56c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b51c:	683a      	ldr	r2, [r7, #0]
 800b51e:	68b9      	ldr	r1, [r7, #8]
 800b520:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b522:	f000 f9c0 	bl	800b8a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b526:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52e:	d112      	bne.n	800b556 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b534:	2b00      	cmp	r3, #0
 800b536:	d016      	beq.n	800b566 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53a:	3324      	adds	r3, #36	; 0x24
 800b53c:	4618      	mov	r0, r3
 800b53e:	f000 ff9d 	bl	800c47c <xTaskRemoveFromEventList>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00e      	beq.n	800b566 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00b      	beq.n	800b566 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2201      	movs	r2, #1
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	e007      	b.n	800b566 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b556:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b55a:	3301      	adds	r3, #1
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	b25a      	sxtb	r2, r3
 800b560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b566:	2301      	movs	r3, #1
 800b568:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b56a:	e001      	b.n	800b570 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b56c:	2300      	movs	r3, #0
 800b56e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b572:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b57a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3740      	adds	r7, #64	; 0x40
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b08e      	sub	sp, #56	; 0x38
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
 800b58e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b596:	2b00      	cmp	r3, #0
 800b598:	d10a      	bne.n	800b5b0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	623b      	str	r3, [r7, #32]
}
 800b5ac:	bf00      	nop
 800b5ae:	e7fe      	b.n	800b5ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00a      	beq.n	800b5ce <xQueueGiveFromISR+0x48>
	__asm volatile
 800b5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5bc:	f383 8811 	msr	BASEPRI, r3
 800b5c0:	f3bf 8f6f 	isb	sy
 800b5c4:	f3bf 8f4f 	dsb	sy
 800b5c8:	61fb      	str	r3, [r7, #28]
}
 800b5ca:	bf00      	nop
 800b5cc:	e7fe      	b.n	800b5cc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d103      	bne.n	800b5de <xQueueGiveFromISR+0x58>
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d101      	bne.n	800b5e2 <xQueueGiveFromISR+0x5c>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e000      	b.n	800b5e4 <xQueueGiveFromISR+0x5e>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10a      	bne.n	800b5fe <xQueueGiveFromISR+0x78>
	__asm volatile
 800b5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ec:	f383 8811 	msr	BASEPRI, r3
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	61bb      	str	r3, [r7, #24]
}
 800b5fa:	bf00      	nop
 800b5fc:	e7fe      	b.n	800b5fc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b5fe:	f001 ff3b 	bl	800d478 <vPortValidateInterruptPriority>
	__asm volatile
 800b602:	f3ef 8211 	mrs	r2, BASEPRI
 800b606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	617a      	str	r2, [r7, #20]
 800b618:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b61a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b61c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b622:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d22b      	bcs.n	800b686 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63a:	1c5a      	adds	r2, r3, #1
 800b63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b640:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b648:	d112      	bne.n	800b670 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d016      	beq.n	800b680 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	3324      	adds	r3, #36	; 0x24
 800b656:	4618      	mov	r0, r3
 800b658:	f000 ff10 	bl	800c47c <xTaskRemoveFromEventList>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00e      	beq.n	800b680 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00b      	beq.n	800b680 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	2201      	movs	r2, #1
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	e007      	b.n	800b680 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b674:	3301      	adds	r3, #1
 800b676:	b2db      	uxtb	r3, r3
 800b678:	b25a      	sxtb	r2, r3
 800b67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b680:	2301      	movs	r3, #1
 800b682:	637b      	str	r3, [r7, #52]	; 0x34
 800b684:	e001      	b.n	800b68a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b686:	2300      	movs	r3, #0
 800b688:	637b      	str	r3, [r7, #52]	; 0x34
 800b68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f383 8811 	msr	BASEPRI, r3
}
 800b694:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3738      	adds	r7, #56	; 0x38
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b08c      	sub	sp, #48	; 0x30
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10a      	bne.n	800b6d0 <xQueueReceive+0x30>
	__asm volatile
 800b6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	623b      	str	r3, [r7, #32]
}
 800b6cc:	bf00      	nop
 800b6ce:	e7fe      	b.n	800b6ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d103      	bne.n	800b6de <xQueueReceive+0x3e>
 800b6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <xQueueReceive+0x42>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e000      	b.n	800b6e4 <xQueueReceive+0x44>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10a      	bne.n	800b6fe <xQueueReceive+0x5e>
	__asm volatile
 800b6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	61fb      	str	r3, [r7, #28]
}
 800b6fa:	bf00      	nop
 800b6fc:	e7fe      	b.n	800b6fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6fe:	f001 f87f 	bl	800c800 <xTaskGetSchedulerState>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d102      	bne.n	800b70e <xQueueReceive+0x6e>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d101      	bne.n	800b712 <xQueueReceive+0x72>
 800b70e:	2301      	movs	r3, #1
 800b710:	e000      	b.n	800b714 <xQueueReceive+0x74>
 800b712:	2300      	movs	r3, #0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10a      	bne.n	800b72e <xQueueReceive+0x8e>
	__asm volatile
 800b718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71c:	f383 8811 	msr	BASEPRI, r3
 800b720:	f3bf 8f6f 	isb	sy
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	61bb      	str	r3, [r7, #24]
}
 800b72a:	bf00      	nop
 800b72c:	e7fe      	b.n	800b72c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b72e:	f001 fdc1 	bl	800d2b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b736:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d01f      	beq.n	800b77e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b73e:	68b9      	ldr	r1, [r7, #8]
 800b740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b742:	f000 f91a 	bl	800b97a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b748:	1e5a      	subs	r2, r3, #1
 800b74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00f      	beq.n	800b776 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b758:	3310      	adds	r3, #16
 800b75a:	4618      	mov	r0, r3
 800b75c:	f000 fe8e 	bl	800c47c <xTaskRemoveFromEventList>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d007      	beq.n	800b776 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b766:	4b3d      	ldr	r3, [pc, #244]	; (800b85c <xQueueReceive+0x1bc>)
 800b768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b76c:	601a      	str	r2, [r3, #0]
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b776:	f001 fdcd 	bl	800d314 <vPortExitCritical>
				return pdPASS;
 800b77a:	2301      	movs	r3, #1
 800b77c:	e069      	b.n	800b852 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d103      	bne.n	800b78c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b784:	f001 fdc6 	bl	800d314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b788:	2300      	movs	r3, #0
 800b78a:	e062      	b.n	800b852 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d106      	bne.n	800b7a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b792:	f107 0310 	add.w	r3, r7, #16
 800b796:	4618      	mov	r0, r3
 800b798:	f000 fed4 	bl	800c544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b79c:	2301      	movs	r3, #1
 800b79e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7a0:	f001 fdb8 	bl	800d314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7a4:	f000 fc40 	bl	800c028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7a8:	f001 fd84 	bl	800d2b4 <vPortEnterCritical>
 800b7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7b2:	b25b      	sxtb	r3, r3
 800b7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b8:	d103      	bne.n	800b7c2 <xQueueReceive+0x122>
 800b7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7c8:	b25b      	sxtb	r3, r3
 800b7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ce:	d103      	bne.n	800b7d8 <xQueueReceive+0x138>
 800b7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7d8:	f001 fd9c 	bl	800d314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b7dc:	1d3a      	adds	r2, r7, #4
 800b7de:	f107 0310 	add.w	r3, r7, #16
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f000 fec3 	bl	800c570 <xTaskCheckForTimeOut>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d123      	bne.n	800b838 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7f2:	f000 f93a 	bl	800ba6a <prvIsQueueEmpty>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d017      	beq.n	800b82c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	3324      	adds	r3, #36	; 0x24
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	4611      	mov	r1, r2
 800b804:	4618      	mov	r0, r3
 800b806:	f000 fde9 	bl	800c3dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b80a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b80c:	f000 f8db 	bl	800b9c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b810:	f000 fc18 	bl	800c044 <xTaskResumeAll>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d189      	bne.n	800b72e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b81a:	4b10      	ldr	r3, [pc, #64]	; (800b85c <xQueueReceive+0x1bc>)
 800b81c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b820:	601a      	str	r2, [r3, #0]
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	e780      	b.n	800b72e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b82c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b82e:	f000 f8ca 	bl	800b9c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b832:	f000 fc07 	bl	800c044 <xTaskResumeAll>
 800b836:	e77a      	b.n	800b72e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b83a:	f000 f8c4 	bl	800b9c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b83e:	f000 fc01 	bl	800c044 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b844:	f000 f911 	bl	800ba6a <prvIsQueueEmpty>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f43f af6f 	beq.w	800b72e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b850:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b852:	4618      	mov	r0, r3
 800b854:	3730      	adds	r7, #48	; 0x30
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	e000ed04 	.word	0xe000ed04

0800b860 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <vQueueDelete+0x28>
	__asm volatile
 800b872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	60bb      	str	r3, [r7, #8]
}
 800b884:	bf00      	nop
 800b886:	e7fe      	b.n	800b886 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f000 f947 	bl	800bb1c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b894:	2b00      	cmp	r3, #0
 800b896:	d102      	bne.n	800b89e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f001 fef9 	bl	800d690 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b89e:	bf00      	nop
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b086      	sub	sp, #24
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	60f8      	str	r0, [r7, #12]
 800b8ae:	60b9      	str	r1, [r7, #8]
 800b8b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10d      	bne.n	800b8e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d14d      	bne.n	800b968 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 ffb3 	bl	800c83c <xTaskPriorityDisinherit>
 800b8d6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	609a      	str	r2, [r3, #8]
 800b8de:	e043      	b.n	800b968 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d119      	bne.n	800b91a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6858      	ldr	r0, [r3, #4]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	68b9      	ldr	r1, [r7, #8]
 800b8f2:	f002 fdd5 	bl	800e4a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fe:	441a      	add	r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	685a      	ldr	r2, [r3, #4]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d32b      	bcc.n	800b968 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	605a      	str	r2, [r3, #4]
 800b918:	e026      	b.n	800b968 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	68d8      	ldr	r0, [r3, #12]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b922:	461a      	mov	r2, r3
 800b924:	68b9      	ldr	r1, [r7, #8]
 800b926:	f002 fdbb 	bl	800e4a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	68da      	ldr	r2, [r3, #12]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b932:	425b      	negs	r3, r3
 800b934:	441a      	add	r2, r3
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	68da      	ldr	r2, [r3, #12]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	429a      	cmp	r2, r3
 800b944:	d207      	bcs.n	800b956 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	689a      	ldr	r2, [r3, #8]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b94e:	425b      	negs	r3, r3
 800b950:	441a      	add	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d105      	bne.n	800b968 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d002      	beq.n	800b968 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	3b01      	subs	r3, #1
 800b966:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	1c5a      	adds	r2, r3, #1
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b970:	697b      	ldr	r3, [r7, #20]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3718      	adds	r7, #24
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b082      	sub	sp, #8
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d018      	beq.n	800b9be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	68da      	ldr	r2, [r3, #12]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b994:	441a      	add	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	68da      	ldr	r2, [r3, #12]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d303      	bcc.n	800b9ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	68d9      	ldr	r1, [r3, #12]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	6838      	ldr	r0, [r7, #0]
 800b9ba:	f002 fd71 	bl	800e4a0 <memcpy>
	}
}
 800b9be:	bf00      	nop
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b084      	sub	sp, #16
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b9ce:	f001 fc71 	bl	800d2b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9d8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9da:	e011      	b.n	800ba00 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d012      	beq.n	800ba0a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3324      	adds	r3, #36	; 0x24
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f000 fd47 	bl	800c47c <xTaskRemoveFromEventList>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d001      	beq.n	800b9f8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b9f4:	f000 fe1e 	bl	800c634 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	dce9      	bgt.n	800b9dc <prvUnlockQueue+0x16>
 800ba08:	e000      	b.n	800ba0c <prvUnlockQueue+0x46>
					break;
 800ba0a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	22ff      	movs	r2, #255	; 0xff
 800ba10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ba14:	f001 fc7e 	bl	800d314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba18:	f001 fc4c 	bl	800d2b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba22:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba24:	e011      	b.n	800ba4a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d012      	beq.n	800ba54 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	3310      	adds	r3, #16
 800ba32:	4618      	mov	r0, r3
 800ba34:	f000 fd22 	bl	800c47c <xTaskRemoveFromEventList>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba3e:	f000 fdf9 	bl	800c634 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ba42:	7bbb      	ldrb	r3, [r7, #14]
 800ba44:	3b01      	subs	r3, #1
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	dce9      	bgt.n	800ba26 <prvUnlockQueue+0x60>
 800ba52:	e000      	b.n	800ba56 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ba54:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	22ff      	movs	r2, #255	; 0xff
 800ba5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ba5e:	f001 fc59 	bl	800d314 <vPortExitCritical>
}
 800ba62:	bf00      	nop
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b084      	sub	sp, #16
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba72:	f001 fc1f 	bl	800d2b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d102      	bne.n	800ba84 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	60fb      	str	r3, [r7, #12]
 800ba82:	e001      	b.n	800ba88 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba84:	2300      	movs	r3, #0
 800ba86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba88:	f001 fc44 	bl	800d314 <vPortExitCritical>

	return xReturn;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba9e:	f001 fc09 	bl	800d2b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baaa:	429a      	cmp	r2, r3
 800baac:	d102      	bne.n	800bab4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800baae:	2301      	movs	r3, #1
 800bab0:	60fb      	str	r3, [r7, #12]
 800bab2:	e001      	b.n	800bab8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bab4:	2300      	movs	r3, #0
 800bab6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bab8:	f001 fc2c 	bl	800d314 <vPortExitCritical>

	return xReturn;
 800babc:	68fb      	ldr	r3, [r7, #12]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
	...

0800bac8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bad2:	2300      	movs	r3, #0
 800bad4:	60fb      	str	r3, [r7, #12]
 800bad6:	e014      	b.n	800bb02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bad8:	4a0f      	ldr	r2, [pc, #60]	; (800bb18 <vQueueAddToRegistry+0x50>)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10b      	bne.n	800bafc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bae4:	490c      	ldr	r1, [pc, #48]	; (800bb18 <vQueueAddToRegistry+0x50>)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800baee:	4a0a      	ldr	r2, [pc, #40]	; (800bb18 <vQueueAddToRegistry+0x50>)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	00db      	lsls	r3, r3, #3
 800baf4:	4413      	add	r3, r2
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bafa:	e006      	b.n	800bb0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	3301      	adds	r3, #1
 800bb00:	60fb      	str	r3, [r7, #12]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2b07      	cmp	r3, #7
 800bb06:	d9e7      	bls.n	800bad8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bb08:	bf00      	nop
 800bb0a:	bf00      	nop
 800bb0c:	3714      	adds	r7, #20
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	20000de4 	.word	0x20000de4

0800bb1c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb24:	2300      	movs	r3, #0
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	e016      	b.n	800bb58 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bb2a:	4a10      	ldr	r2, [pc, #64]	; (800bb6c <vQueueUnregisterQueue+0x50>)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	00db      	lsls	r3, r3, #3
 800bb30:	4413      	add	r3, r2
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d10b      	bne.n	800bb52 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bb3a:	4a0c      	ldr	r2, [pc, #48]	; (800bb6c <vQueueUnregisterQueue+0x50>)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2100      	movs	r1, #0
 800bb40:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bb44:	4a09      	ldr	r2, [pc, #36]	; (800bb6c <vQueueUnregisterQueue+0x50>)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	00db      	lsls	r3, r3, #3
 800bb4a:	4413      	add	r3, r2
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	605a      	str	r2, [r3, #4]
				break;
 800bb50:	e006      	b.n	800bb60 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	3301      	adds	r3, #1
 800bb56:	60fb      	str	r3, [r7, #12]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b07      	cmp	r3, #7
 800bb5c:	d9e5      	bls.n	800bb2a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bb5e:	bf00      	nop
 800bb60:	bf00      	nop
 800bb62:	3714      	adds	r7, #20
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr
 800bb6c:	20000de4 	.word	0x20000de4

0800bb70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bb80:	f001 fb98 	bl	800d2b4 <vPortEnterCritical>
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb8a:	b25b      	sxtb	r3, r3
 800bb8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb90:	d103      	bne.n	800bb9a <vQueueWaitForMessageRestricted+0x2a>
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bba0:	b25b      	sxtb	r3, r3
 800bba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba6:	d103      	bne.n	800bbb0 <vQueueWaitForMessageRestricted+0x40>
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbb0:	f001 fbb0 	bl	800d314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d106      	bne.n	800bbca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	3324      	adds	r3, #36	; 0x24
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	68b9      	ldr	r1, [r7, #8]
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f000 fc2d 	bl	800c424 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bbca:	6978      	ldr	r0, [r7, #20]
 800bbcc:	f7ff fefb 	bl	800b9c6 <prvUnlockQueue>
	}
 800bbd0:	bf00      	nop
 800bbd2:	3718      	adds	r7, #24
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b08e      	sub	sp, #56	; 0x38
 800bbdc:	af04      	add	r7, sp, #16
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
 800bbe4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10a      	bne.n	800bc02 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf0:	f383 8811 	msr	BASEPRI, r3
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	623b      	str	r3, [r7, #32]
}
 800bbfe:	bf00      	nop
 800bc00:	e7fe      	b.n	800bc00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10a      	bne.n	800bc1e <xTaskCreateStatic+0x46>
	__asm volatile
 800bc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0c:	f383 8811 	msr	BASEPRI, r3
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	61fb      	str	r3, [r7, #28]
}
 800bc1a:	bf00      	nop
 800bc1c:	e7fe      	b.n	800bc1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc1e:	23a8      	movs	r3, #168	; 0xa8
 800bc20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	2ba8      	cmp	r3, #168	; 0xa8
 800bc26:	d00a      	beq.n	800bc3e <xTaskCreateStatic+0x66>
	__asm volatile
 800bc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2c:	f383 8811 	msr	BASEPRI, r3
 800bc30:	f3bf 8f6f 	isb	sy
 800bc34:	f3bf 8f4f 	dsb	sy
 800bc38:	61bb      	str	r3, [r7, #24]
}
 800bc3a:	bf00      	nop
 800bc3c:	e7fe      	b.n	800bc3c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bc3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d01e      	beq.n	800bc84 <xTaskCreateStatic+0xac>
 800bc46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d01b      	beq.n	800bc84 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc58:	2202      	movs	r2, #2
 800bc5a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bc5e:	2300      	movs	r3, #0
 800bc60:	9303      	str	r3, [sp, #12]
 800bc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc64:	9302      	str	r3, [sp, #8]
 800bc66:	f107 0314 	add.w	r3, r7, #20
 800bc6a:	9301      	str	r3, [sp, #4]
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	68b9      	ldr	r1, [r7, #8]
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f000 f850 	bl	800bd1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc7e:	f000 f8f3 	bl	800be68 <prvAddNewTaskToReadyList>
 800bc82:	e001      	b.n	800bc88 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bc84:	2300      	movs	r3, #0
 800bc86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc88:	697b      	ldr	r3, [r7, #20]
	}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3728      	adds	r7, #40	; 0x28
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b08c      	sub	sp, #48	; 0x30
 800bc96:	af04      	add	r7, sp, #16
 800bc98:	60f8      	str	r0, [r7, #12]
 800bc9a:	60b9      	str	r1, [r7, #8]
 800bc9c:	603b      	str	r3, [r7, #0]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bca2:	88fb      	ldrh	r3, [r7, #6]
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4618      	mov	r0, r3
 800bca8:	f001 fc26 	bl	800d4f8 <pvPortMalloc>
 800bcac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00e      	beq.n	800bcd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bcb4:	20a8      	movs	r0, #168	; 0xa8
 800bcb6:	f001 fc1f 	bl	800d4f8 <pvPortMalloc>
 800bcba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	631a      	str	r2, [r3, #48]	; 0x30
 800bcc8:	e005      	b.n	800bcd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bcca:	6978      	ldr	r0, [r7, #20]
 800bccc:	f001 fce0 	bl	800d690 <vPortFree>
 800bcd0:	e001      	b.n	800bcd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d017      	beq.n	800bd0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bce4:	88fa      	ldrh	r2, [r7, #6]
 800bce6:	2300      	movs	r3, #0
 800bce8:	9303      	str	r3, [sp, #12]
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	9302      	str	r3, [sp, #8]
 800bcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf0:	9301      	str	r3, [sp, #4]
 800bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	68b9      	ldr	r1, [r7, #8]
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f000 f80e 	bl	800bd1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd00:	69f8      	ldr	r0, [r7, #28]
 800bd02:	f000 f8b1 	bl	800be68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd06:	2301      	movs	r3, #1
 800bd08:	61bb      	str	r3, [r7, #24]
 800bd0a:	e002      	b.n	800bd12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd0c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd12:	69bb      	ldr	r3, [r7, #24]
	}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3720      	adds	r7, #32
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b088      	sub	sp, #32
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
 800bd28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	461a      	mov	r2, r3
 800bd34:	21a5      	movs	r1, #165	; 0xa5
 800bd36:	f002 fb2f 	bl	800e398 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bd44:	3b01      	subs	r3, #1
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4413      	add	r3, r2
 800bd4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	f023 0307 	bic.w	r3, r3, #7
 800bd52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	f003 0307 	and.w	r3, r3, #7
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00a      	beq.n	800bd74 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	617b      	str	r3, [r7, #20]
}
 800bd70:	bf00      	nop
 800bd72:	e7fe      	b.n	800bd72 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d01f      	beq.n	800bdba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	61fb      	str	r3, [r7, #28]
 800bd7e:	e012      	b.n	800bda6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	4413      	add	r3, r2
 800bd86:	7819      	ldrb	r1, [r3, #0]
 800bd88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	3334      	adds	r3, #52	; 0x34
 800bd90:	460a      	mov	r2, r1
 800bd92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	4413      	add	r3, r2
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d006      	beq.n	800bdae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	3301      	adds	r3, #1
 800bda4:	61fb      	str	r3, [r7, #28]
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	2b0f      	cmp	r3, #15
 800bdaa:	d9e9      	bls.n	800bd80 <prvInitialiseNewTask+0x64>
 800bdac:	e000      	b.n	800bdb0 <prvInitialiseNewTask+0x94>
			{
				break;
 800bdae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bdb8:	e003      	b.n	800bdc2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc4:	2b37      	cmp	r3, #55	; 0x37
 800bdc6:	d901      	bls.n	800bdcc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bdc8:	2337      	movs	r3, #55	; 0x37
 800bdca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdd0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdd6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdda:	2200      	movs	r2, #0
 800bddc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde0:	3304      	adds	r3, #4
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fe fffa 	bl	800addc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdea:	3318      	adds	r3, #24
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fe fff5 	bl	800addc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	2200      	movs	r2, #0
 800be0c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	2200      	movs	r2, #0
 800be14:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800be18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1a:	3354      	adds	r3, #84	; 0x54
 800be1c:	224c      	movs	r2, #76	; 0x4c
 800be1e:	2100      	movs	r1, #0
 800be20:	4618      	mov	r0, r3
 800be22:	f002 fab9 	bl	800e398 <memset>
 800be26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be28:	4a0c      	ldr	r2, [pc, #48]	; (800be5c <prvInitialiseNewTask+0x140>)
 800be2a:	659a      	str	r2, [r3, #88]	; 0x58
 800be2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2e:	4a0c      	ldr	r2, [pc, #48]	; (800be60 <prvInitialiseNewTask+0x144>)
 800be30:	65da      	str	r2, [r3, #92]	; 0x5c
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	4a0b      	ldr	r2, [pc, #44]	; (800be64 <prvInitialiseNewTask+0x148>)
 800be36:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	68f9      	ldr	r1, [r7, #12]
 800be3c:	69b8      	ldr	r0, [r7, #24]
 800be3e:	f001 f90d 	bl	800d05c <pxPortInitialiseStack>
 800be42:	4602      	mov	r2, r0
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800be48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d002      	beq.n	800be54 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be54:	bf00      	nop
 800be56:	3720      	adds	r7, #32
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	20006c80 	.word	0x20006c80
 800be60:	20006ce8 	.word	0x20006ce8
 800be64:	20006d50 	.word	0x20006d50

0800be68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be70:	f001 fa20 	bl	800d2b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800be74:	4b2d      	ldr	r3, [pc, #180]	; (800bf2c <prvAddNewTaskToReadyList+0xc4>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3301      	adds	r3, #1
 800be7a:	4a2c      	ldr	r2, [pc, #176]	; (800bf2c <prvAddNewTaskToReadyList+0xc4>)
 800be7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800be7e:	4b2c      	ldr	r3, [pc, #176]	; (800bf30 <prvAddNewTaskToReadyList+0xc8>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d109      	bne.n	800be9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800be86:	4a2a      	ldr	r2, [pc, #168]	; (800bf30 <prvAddNewTaskToReadyList+0xc8>)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be8c:	4b27      	ldr	r3, [pc, #156]	; (800bf2c <prvAddNewTaskToReadyList+0xc4>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2b01      	cmp	r3, #1
 800be92:	d110      	bne.n	800beb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be94:	f000 fbf2 	bl	800c67c <prvInitialiseTaskLists>
 800be98:	e00d      	b.n	800beb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be9a:	4b26      	ldr	r3, [pc, #152]	; (800bf34 <prvAddNewTaskToReadyList+0xcc>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d109      	bne.n	800beb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bea2:	4b23      	ldr	r3, [pc, #140]	; (800bf30 <prvAddNewTaskToReadyList+0xc8>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beac:	429a      	cmp	r2, r3
 800beae:	d802      	bhi.n	800beb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800beb0:	4a1f      	ldr	r2, [pc, #124]	; (800bf30 <prvAddNewTaskToReadyList+0xc8>)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800beb6:	4b20      	ldr	r3, [pc, #128]	; (800bf38 <prvAddNewTaskToReadyList+0xd0>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	3301      	adds	r3, #1
 800bebc:	4a1e      	ldr	r2, [pc, #120]	; (800bf38 <prvAddNewTaskToReadyList+0xd0>)
 800bebe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bec0:	4b1d      	ldr	r3, [pc, #116]	; (800bf38 <prvAddNewTaskToReadyList+0xd0>)
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800becc:	4b1b      	ldr	r3, [pc, #108]	; (800bf3c <prvAddNewTaskToReadyList+0xd4>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d903      	bls.n	800bedc <prvAddNewTaskToReadyList+0x74>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed8:	4a18      	ldr	r2, [pc, #96]	; (800bf3c <prvAddNewTaskToReadyList+0xd4>)
 800beda:	6013      	str	r3, [r2, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee0:	4613      	mov	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4413      	add	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4a15      	ldr	r2, [pc, #84]	; (800bf40 <prvAddNewTaskToReadyList+0xd8>)
 800beea:	441a      	add	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	3304      	adds	r3, #4
 800bef0:	4619      	mov	r1, r3
 800bef2:	4610      	mov	r0, r2
 800bef4:	f7fe ff7f 	bl	800adf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bef8:	f001 fa0c 	bl	800d314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800befc:	4b0d      	ldr	r3, [pc, #52]	; (800bf34 <prvAddNewTaskToReadyList+0xcc>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00e      	beq.n	800bf22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf04:	4b0a      	ldr	r3, [pc, #40]	; (800bf30 <prvAddNewTaskToReadyList+0xc8>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d207      	bcs.n	800bf22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf12:	4b0c      	ldr	r3, [pc, #48]	; (800bf44 <prvAddNewTaskToReadyList+0xdc>)
 800bf14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf18:	601a      	str	r2, [r3, #0]
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf22:	bf00      	nop
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	200012f8 	.word	0x200012f8
 800bf30:	20000e24 	.word	0x20000e24
 800bf34:	20001304 	.word	0x20001304
 800bf38:	20001314 	.word	0x20001314
 800bf3c:	20001300 	.word	0x20001300
 800bf40:	20000e28 	.word	0x20000e28
 800bf44:	e000ed04 	.word	0xe000ed04

0800bf48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b08a      	sub	sp, #40	; 0x28
 800bf4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf52:	2300      	movs	r3, #0
 800bf54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf56:	463a      	mov	r2, r7
 800bf58:	1d39      	adds	r1, r7, #4
 800bf5a:	f107 0308 	add.w	r3, r7, #8
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fe fee8 	bl	800ad34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	9202      	str	r2, [sp, #8]
 800bf6c:	9301      	str	r3, [sp, #4]
 800bf6e:	2300      	movs	r3, #0
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	2300      	movs	r3, #0
 800bf74:	460a      	mov	r2, r1
 800bf76:	4924      	ldr	r1, [pc, #144]	; (800c008 <vTaskStartScheduler+0xc0>)
 800bf78:	4824      	ldr	r0, [pc, #144]	; (800c00c <vTaskStartScheduler+0xc4>)
 800bf7a:	f7ff fe2d 	bl	800bbd8 <xTaskCreateStatic>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	4a23      	ldr	r2, [pc, #140]	; (800c010 <vTaskStartScheduler+0xc8>)
 800bf82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf84:	4b22      	ldr	r3, [pc, #136]	; (800c010 <vTaskStartScheduler+0xc8>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d002      	beq.n	800bf92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	617b      	str	r3, [r7, #20]
 800bf90:	e001      	b.n	800bf96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d102      	bne.n	800bfa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf9c:	f000 fd10 	bl	800c9c0 <xTimerCreateTimerTask>
 800bfa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d11b      	bne.n	800bfe0 <vTaskStartScheduler+0x98>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfac:	f383 8811 	msr	BASEPRI, r3
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	613b      	str	r3, [r7, #16]
}
 800bfba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bfbc:	4b15      	ldr	r3, [pc, #84]	; (800c014 <vTaskStartScheduler+0xcc>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3354      	adds	r3, #84	; 0x54
 800bfc2:	4a15      	ldr	r2, [pc, #84]	; (800c018 <vTaskStartScheduler+0xd0>)
 800bfc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bfc6:	4b15      	ldr	r3, [pc, #84]	; (800c01c <vTaskStartScheduler+0xd4>)
 800bfc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bfce:	4b14      	ldr	r3, [pc, #80]	; (800c020 <vTaskStartScheduler+0xd8>)
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bfd4:	4b13      	ldr	r3, [pc, #76]	; (800c024 <vTaskStartScheduler+0xdc>)
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bfda:	f001 f8c9 	bl	800d170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bfde:	e00e      	b.n	800bffe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe6:	d10a      	bne.n	800bffe <vTaskStartScheduler+0xb6>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	60fb      	str	r3, [r7, #12]
}
 800bffa:	bf00      	nop
 800bffc:	e7fe      	b.n	800bffc <vTaskStartScheduler+0xb4>
}
 800bffe:	bf00      	nop
 800c000:	3718      	adds	r7, #24
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	0800e5bc 	.word	0x0800e5bc
 800c00c:	0800c64d 	.word	0x0800c64d
 800c010:	2000131c 	.word	0x2000131c
 800c014:	20000e24 	.word	0x20000e24
 800c018:	2000014c 	.word	0x2000014c
 800c01c:	20001318 	.word	0x20001318
 800c020:	20001304 	.word	0x20001304
 800c024:	200012fc 	.word	0x200012fc

0800c028 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c028:	b480      	push	{r7}
 800c02a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c02c:	4b04      	ldr	r3, [pc, #16]	; (800c040 <vTaskSuspendAll+0x18>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3301      	adds	r3, #1
 800c032:	4a03      	ldr	r2, [pc, #12]	; (800c040 <vTaskSuspendAll+0x18>)
 800c034:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c036:	bf00      	nop
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	20001320 	.word	0x20001320

0800c044 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c04a:	2300      	movs	r3, #0
 800c04c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c04e:	2300      	movs	r3, #0
 800c050:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c052:	4b42      	ldr	r3, [pc, #264]	; (800c15c <xTaskResumeAll+0x118>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10a      	bne.n	800c070 <xTaskResumeAll+0x2c>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	603b      	str	r3, [r7, #0]
}
 800c06c:	bf00      	nop
 800c06e:	e7fe      	b.n	800c06e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c070:	f001 f920 	bl	800d2b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c074:	4b39      	ldr	r3, [pc, #228]	; (800c15c <xTaskResumeAll+0x118>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3b01      	subs	r3, #1
 800c07a:	4a38      	ldr	r2, [pc, #224]	; (800c15c <xTaskResumeAll+0x118>)
 800c07c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c07e:	4b37      	ldr	r3, [pc, #220]	; (800c15c <xTaskResumeAll+0x118>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d162      	bne.n	800c14c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c086:	4b36      	ldr	r3, [pc, #216]	; (800c160 <xTaskResumeAll+0x11c>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d05e      	beq.n	800c14c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c08e:	e02f      	b.n	800c0f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c090:	4b34      	ldr	r3, [pc, #208]	; (800c164 <xTaskResumeAll+0x120>)
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	3318      	adds	r3, #24
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fe ff07 	bl	800aeb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fe ff02 	bl	800aeb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b0:	4b2d      	ldr	r3, [pc, #180]	; (800c168 <xTaskResumeAll+0x124>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d903      	bls.n	800c0c0 <xTaskResumeAll+0x7c>
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0bc:	4a2a      	ldr	r2, [pc, #168]	; (800c168 <xTaskResumeAll+0x124>)
 800c0be:	6013      	str	r3, [r2, #0]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4413      	add	r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	4a27      	ldr	r2, [pc, #156]	; (800c16c <xTaskResumeAll+0x128>)
 800c0ce:	441a      	add	r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	3304      	adds	r3, #4
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	4610      	mov	r0, r2
 800c0d8:	f7fe fe8d 	bl	800adf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e0:	4b23      	ldr	r3, [pc, #140]	; (800c170 <xTaskResumeAll+0x12c>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d302      	bcc.n	800c0f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c0ea:	4b22      	ldr	r3, [pc, #136]	; (800c174 <xTaskResumeAll+0x130>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0f0:	4b1c      	ldr	r3, [pc, #112]	; (800c164 <xTaskResumeAll+0x120>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1cb      	bne.n	800c090 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c0fe:	f000 fb5f 	bl	800c7c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c102:	4b1d      	ldr	r3, [pc, #116]	; (800c178 <xTaskResumeAll+0x134>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d010      	beq.n	800c130 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c10e:	f000 f847 	bl	800c1a0 <xTaskIncrementTick>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c118:	4b16      	ldr	r3, [pc, #88]	; (800c174 <xTaskResumeAll+0x130>)
 800c11a:	2201      	movs	r2, #1
 800c11c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	3b01      	subs	r3, #1
 800c122:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1f1      	bne.n	800c10e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c12a:	4b13      	ldr	r3, [pc, #76]	; (800c178 <xTaskResumeAll+0x134>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c130:	4b10      	ldr	r3, [pc, #64]	; (800c174 <xTaskResumeAll+0x130>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d009      	beq.n	800c14c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c138:	2301      	movs	r3, #1
 800c13a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c13c:	4b0f      	ldr	r3, [pc, #60]	; (800c17c <xTaskResumeAll+0x138>)
 800c13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c14c:	f001 f8e2 	bl	800d314 <vPortExitCritical>

	return xAlreadyYielded;
 800c150:	68bb      	ldr	r3, [r7, #8]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	20001320 	.word	0x20001320
 800c160:	200012f8 	.word	0x200012f8
 800c164:	200012b8 	.word	0x200012b8
 800c168:	20001300 	.word	0x20001300
 800c16c:	20000e28 	.word	0x20000e28
 800c170:	20000e24 	.word	0x20000e24
 800c174:	2000130c 	.word	0x2000130c
 800c178:	20001308 	.word	0x20001308
 800c17c:	e000ed04 	.word	0xe000ed04

0800c180 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c186:	4b05      	ldr	r3, [pc, #20]	; (800c19c <xTaskGetTickCount+0x1c>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c18c:	687b      	ldr	r3, [r7, #4]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	370c      	adds	r7, #12
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	200012fc 	.word	0x200012fc

0800c1a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1aa:	4b4f      	ldr	r3, [pc, #316]	; (800c2e8 <xTaskIncrementTick+0x148>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f040 808f 	bne.w	800c2d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c1b4:	4b4d      	ldr	r3, [pc, #308]	; (800c2ec <xTaskIncrementTick+0x14c>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c1bc:	4a4b      	ldr	r2, [pc, #300]	; (800c2ec <xTaskIncrementTick+0x14c>)
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d120      	bne.n	800c20a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c1c8:	4b49      	ldr	r3, [pc, #292]	; (800c2f0 <xTaskIncrementTick+0x150>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00a      	beq.n	800c1e8 <xTaskIncrementTick+0x48>
	__asm volatile
 800c1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	603b      	str	r3, [r7, #0]
}
 800c1e4:	bf00      	nop
 800c1e6:	e7fe      	b.n	800c1e6 <xTaskIncrementTick+0x46>
 800c1e8:	4b41      	ldr	r3, [pc, #260]	; (800c2f0 <xTaskIncrementTick+0x150>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	60fb      	str	r3, [r7, #12]
 800c1ee:	4b41      	ldr	r3, [pc, #260]	; (800c2f4 <xTaskIncrementTick+0x154>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a3f      	ldr	r2, [pc, #252]	; (800c2f0 <xTaskIncrementTick+0x150>)
 800c1f4:	6013      	str	r3, [r2, #0]
 800c1f6:	4a3f      	ldr	r2, [pc, #252]	; (800c2f4 <xTaskIncrementTick+0x154>)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6013      	str	r3, [r2, #0]
 800c1fc:	4b3e      	ldr	r3, [pc, #248]	; (800c2f8 <xTaskIncrementTick+0x158>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	3301      	adds	r3, #1
 800c202:	4a3d      	ldr	r2, [pc, #244]	; (800c2f8 <xTaskIncrementTick+0x158>)
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	f000 fadb 	bl	800c7c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c20a:	4b3c      	ldr	r3, [pc, #240]	; (800c2fc <xTaskIncrementTick+0x15c>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	429a      	cmp	r2, r3
 800c212:	d349      	bcc.n	800c2a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c214:	4b36      	ldr	r3, [pc, #216]	; (800c2f0 <xTaskIncrementTick+0x150>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d104      	bne.n	800c228 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c21e:	4b37      	ldr	r3, [pc, #220]	; (800c2fc <xTaskIncrementTick+0x15c>)
 800c220:	f04f 32ff 	mov.w	r2, #4294967295
 800c224:	601a      	str	r2, [r3, #0]
					break;
 800c226:	e03f      	b.n	800c2a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c228:	4b31      	ldr	r3, [pc, #196]	; (800c2f0 <xTaskIncrementTick+0x150>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c238:	693a      	ldr	r2, [r7, #16]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d203      	bcs.n	800c248 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c240:	4a2e      	ldr	r2, [pc, #184]	; (800c2fc <xTaskIncrementTick+0x15c>)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c246:	e02f      	b.n	800c2a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	3304      	adds	r3, #4
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fe fe2f 	bl	800aeb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c256:	2b00      	cmp	r3, #0
 800c258:	d004      	beq.n	800c264 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	3318      	adds	r3, #24
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fe fe26 	bl	800aeb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c268:	4b25      	ldr	r3, [pc, #148]	; (800c300 <xTaskIncrementTick+0x160>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d903      	bls.n	800c278 <xTaskIncrementTick+0xd8>
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c274:	4a22      	ldr	r2, [pc, #136]	; (800c300 <xTaskIncrementTick+0x160>)
 800c276:	6013      	str	r3, [r2, #0]
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27c:	4613      	mov	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	4413      	add	r3, r2
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	4a1f      	ldr	r2, [pc, #124]	; (800c304 <xTaskIncrementTick+0x164>)
 800c286:	441a      	add	r2, r3
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	3304      	adds	r3, #4
 800c28c:	4619      	mov	r1, r3
 800c28e:	4610      	mov	r0, r2
 800c290:	f7fe fdb1 	bl	800adf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c298:	4b1b      	ldr	r3, [pc, #108]	; (800c308 <xTaskIncrementTick+0x168>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d3b8      	bcc.n	800c214 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2a6:	e7b5      	b.n	800c214 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c2a8:	4b17      	ldr	r3, [pc, #92]	; (800c308 <xTaskIncrementTick+0x168>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ae:	4915      	ldr	r1, [pc, #84]	; (800c304 <xTaskIncrementTick+0x164>)
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	440b      	add	r3, r1
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d901      	bls.n	800c2c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c2c4:	4b11      	ldr	r3, [pc, #68]	; (800c30c <xTaskIncrementTick+0x16c>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d007      	beq.n	800c2dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	617b      	str	r3, [r7, #20]
 800c2d0:	e004      	b.n	800c2dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c2d2:	4b0f      	ldr	r3, [pc, #60]	; (800c310 <xTaskIncrementTick+0x170>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	4a0d      	ldr	r2, [pc, #52]	; (800c310 <xTaskIncrementTick+0x170>)
 800c2da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c2dc:	697b      	ldr	r3, [r7, #20]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3718      	adds	r7, #24
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	20001320 	.word	0x20001320
 800c2ec:	200012fc 	.word	0x200012fc
 800c2f0:	200012b0 	.word	0x200012b0
 800c2f4:	200012b4 	.word	0x200012b4
 800c2f8:	20001310 	.word	0x20001310
 800c2fc:	20001318 	.word	0x20001318
 800c300:	20001300 	.word	0x20001300
 800c304:	20000e28 	.word	0x20000e28
 800c308:	20000e24 	.word	0x20000e24
 800c30c:	2000130c 	.word	0x2000130c
 800c310:	20001308 	.word	0x20001308

0800c314 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c314:	b480      	push	{r7}
 800c316:	b085      	sub	sp, #20
 800c318:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c31a:	4b2a      	ldr	r3, [pc, #168]	; (800c3c4 <vTaskSwitchContext+0xb0>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d003      	beq.n	800c32a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c322:	4b29      	ldr	r3, [pc, #164]	; (800c3c8 <vTaskSwitchContext+0xb4>)
 800c324:	2201      	movs	r2, #1
 800c326:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c328:	e046      	b.n	800c3b8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c32a:	4b27      	ldr	r3, [pc, #156]	; (800c3c8 <vTaskSwitchContext+0xb4>)
 800c32c:	2200      	movs	r2, #0
 800c32e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c330:	4b26      	ldr	r3, [pc, #152]	; (800c3cc <vTaskSwitchContext+0xb8>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	e010      	b.n	800c35a <vTaskSwitchContext+0x46>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d10a      	bne.n	800c354 <vTaskSwitchContext+0x40>
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	607b      	str	r3, [r7, #4]
}
 800c350:	bf00      	nop
 800c352:	e7fe      	b.n	800c352 <vTaskSwitchContext+0x3e>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	3b01      	subs	r3, #1
 800c358:	60fb      	str	r3, [r7, #12]
 800c35a:	491d      	ldr	r1, [pc, #116]	; (800c3d0 <vTaskSwitchContext+0xbc>)
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	4613      	mov	r3, r2
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	4413      	add	r3, r2
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	440b      	add	r3, r1
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d0e4      	beq.n	800c338 <vTaskSwitchContext+0x24>
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	4613      	mov	r3, r2
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4413      	add	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	4a15      	ldr	r2, [pc, #84]	; (800c3d0 <vTaskSwitchContext+0xbc>)
 800c37a:	4413      	add	r3, r2
 800c37c:	60bb      	str	r3, [r7, #8]
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	685a      	ldr	r2, [r3, #4]
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	605a      	str	r2, [r3, #4]
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	685a      	ldr	r2, [r3, #4]
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	3308      	adds	r3, #8
 800c390:	429a      	cmp	r2, r3
 800c392:	d104      	bne.n	800c39e <vTaskSwitchContext+0x8a>
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	685a      	ldr	r2, [r3, #4]
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	605a      	str	r2, [r3, #4]
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	68db      	ldr	r3, [r3, #12]
 800c3a4:	4a0b      	ldr	r2, [pc, #44]	; (800c3d4 <vTaskSwitchContext+0xc0>)
 800c3a6:	6013      	str	r3, [r2, #0]
 800c3a8:	4a08      	ldr	r2, [pc, #32]	; (800c3cc <vTaskSwitchContext+0xb8>)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3ae:	4b09      	ldr	r3, [pc, #36]	; (800c3d4 <vTaskSwitchContext+0xc0>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	3354      	adds	r3, #84	; 0x54
 800c3b4:	4a08      	ldr	r2, [pc, #32]	; (800c3d8 <vTaskSwitchContext+0xc4>)
 800c3b6:	6013      	str	r3, [r2, #0]
}
 800c3b8:	bf00      	nop
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr
 800c3c4:	20001320 	.word	0x20001320
 800c3c8:	2000130c 	.word	0x2000130c
 800c3cc:	20001300 	.word	0x20001300
 800c3d0:	20000e28 	.word	0x20000e28
 800c3d4:	20000e24 	.word	0x20000e24
 800c3d8:	2000014c 	.word	0x2000014c

0800c3dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10a      	bne.n	800c402 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	60fb      	str	r3, [r7, #12]
}
 800c3fe:	bf00      	nop
 800c400:	e7fe      	b.n	800c400 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c402:	4b07      	ldr	r3, [pc, #28]	; (800c420 <vTaskPlaceOnEventList+0x44>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	3318      	adds	r3, #24
 800c408:	4619      	mov	r1, r3
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f7fe fd17 	bl	800ae3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c410:	2101      	movs	r1, #1
 800c412:	6838      	ldr	r0, [r7, #0]
 800c414:	f000 fa80 	bl	800c918 <prvAddCurrentTaskToDelayedList>
}
 800c418:	bf00      	nop
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	20000e24 	.word	0x20000e24

0800c424 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c424:	b580      	push	{r7, lr}
 800c426:	b086      	sub	sp, #24
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d10a      	bne.n	800c44c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43a:	f383 8811 	msr	BASEPRI, r3
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	617b      	str	r3, [r7, #20]
}
 800c448:	bf00      	nop
 800c44a:	e7fe      	b.n	800c44a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c44c:	4b0a      	ldr	r3, [pc, #40]	; (800c478 <vTaskPlaceOnEventListRestricted+0x54>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	3318      	adds	r3, #24
 800c452:	4619      	mov	r1, r3
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f7fe fcce 	bl	800adf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d002      	beq.n	800c466 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c460:	f04f 33ff 	mov.w	r3, #4294967295
 800c464:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c466:	6879      	ldr	r1, [r7, #4]
 800c468:	68b8      	ldr	r0, [r7, #8]
 800c46a:	f000 fa55 	bl	800c918 <prvAddCurrentTaskToDelayedList>
	}
 800c46e:	bf00      	nop
 800c470:	3718      	adds	r7, #24
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	20000e24 	.word	0x20000e24

0800c47c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b086      	sub	sp, #24
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10a      	bne.n	800c4a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	60fb      	str	r3, [r7, #12]
}
 800c4a4:	bf00      	nop
 800c4a6:	e7fe      	b.n	800c4a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	3318      	adds	r3, #24
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7fe fcff 	bl	800aeb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4b2:	4b1e      	ldr	r3, [pc, #120]	; (800c52c <xTaskRemoveFromEventList+0xb0>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d11d      	bne.n	800c4f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	3304      	adds	r3, #4
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fe fcf6 	bl	800aeb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c8:	4b19      	ldr	r3, [pc, #100]	; (800c530 <xTaskRemoveFromEventList+0xb4>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d903      	bls.n	800c4d8 <xTaskRemoveFromEventList+0x5c>
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d4:	4a16      	ldr	r2, [pc, #88]	; (800c530 <xTaskRemoveFromEventList+0xb4>)
 800c4d6:	6013      	str	r3, [r2, #0]
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4dc:	4613      	mov	r3, r2
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	4413      	add	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4a13      	ldr	r2, [pc, #76]	; (800c534 <xTaskRemoveFromEventList+0xb8>)
 800c4e6:	441a      	add	r2, r3
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	4610      	mov	r0, r2
 800c4f0:	f7fe fc81 	bl	800adf6 <vListInsertEnd>
 800c4f4:	e005      	b.n	800c502 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	3318      	adds	r3, #24
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	480e      	ldr	r0, [pc, #56]	; (800c538 <xTaskRemoveFromEventList+0xbc>)
 800c4fe:	f7fe fc7a 	bl	800adf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c506:	4b0d      	ldr	r3, [pc, #52]	; (800c53c <xTaskRemoveFromEventList+0xc0>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d905      	bls.n	800c51c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c510:	2301      	movs	r3, #1
 800c512:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c514:	4b0a      	ldr	r3, [pc, #40]	; (800c540 <xTaskRemoveFromEventList+0xc4>)
 800c516:	2201      	movs	r2, #1
 800c518:	601a      	str	r2, [r3, #0]
 800c51a:	e001      	b.n	800c520 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c51c:	2300      	movs	r3, #0
 800c51e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c520:	697b      	ldr	r3, [r7, #20]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3718      	adds	r7, #24
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	20001320 	.word	0x20001320
 800c530:	20001300 	.word	0x20001300
 800c534:	20000e28 	.word	0x20000e28
 800c538:	200012b8 	.word	0x200012b8
 800c53c:	20000e24 	.word	0x20000e24
 800c540:	2000130c 	.word	0x2000130c

0800c544 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c54c:	4b06      	ldr	r3, [pc, #24]	; (800c568 <vTaskInternalSetTimeOutState+0x24>)
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c554:	4b05      	ldr	r3, [pc, #20]	; (800c56c <vTaskInternalSetTimeOutState+0x28>)
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	605a      	str	r2, [r3, #4]
}
 800c55c:	bf00      	nop
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	20001310 	.word	0x20001310
 800c56c:	200012fc 	.word	0x200012fc

0800c570 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b088      	sub	sp, #32
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10a      	bne.n	800c596 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	613b      	str	r3, [r7, #16]
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	60fb      	str	r3, [r7, #12]
}
 800c5ae:	bf00      	nop
 800c5b0:	e7fe      	b.n	800c5b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c5b2:	f000 fe7f 	bl	800d2b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c5b6:	4b1d      	ldr	r3, [pc, #116]	; (800c62c <xTaskCheckForTimeOut+0xbc>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	69ba      	ldr	r2, [r7, #24]
 800c5c2:	1ad3      	subs	r3, r2, r3
 800c5c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ce:	d102      	bne.n	800c5d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	61fb      	str	r3, [r7, #28]
 800c5d4:	e023      	b.n	800c61e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	4b15      	ldr	r3, [pc, #84]	; (800c630 <xTaskCheckForTimeOut+0xc0>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d007      	beq.n	800c5f2 <xTaskCheckForTimeOut+0x82>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	69ba      	ldr	r2, [r7, #24]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d302      	bcc.n	800c5f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	61fb      	str	r3, [r7, #28]
 800c5f0:	e015      	b.n	800c61e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	697a      	ldr	r2, [r7, #20]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d20b      	bcs.n	800c614 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	1ad2      	subs	r2, r2, r3
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f7ff ff9b 	bl	800c544 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c60e:	2300      	movs	r3, #0
 800c610:	61fb      	str	r3, [r7, #28]
 800c612:	e004      	b.n	800c61e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	2200      	movs	r2, #0
 800c618:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c61a:	2301      	movs	r3, #1
 800c61c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c61e:	f000 fe79 	bl	800d314 <vPortExitCritical>

	return xReturn;
 800c622:	69fb      	ldr	r3, [r7, #28]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3720      	adds	r7, #32
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	200012fc 	.word	0x200012fc
 800c630:	20001310 	.word	0x20001310

0800c634 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c634:	b480      	push	{r7}
 800c636:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c638:	4b03      	ldr	r3, [pc, #12]	; (800c648 <vTaskMissedYield+0x14>)
 800c63a:	2201      	movs	r2, #1
 800c63c:	601a      	str	r2, [r3, #0]
}
 800c63e:	bf00      	nop
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr
 800c648:	2000130c 	.word	0x2000130c

0800c64c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c654:	f000 f852 	bl	800c6fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c658:	4b06      	ldr	r3, [pc, #24]	; (800c674 <prvIdleTask+0x28>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d9f9      	bls.n	800c654 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c660:	4b05      	ldr	r3, [pc, #20]	; (800c678 <prvIdleTask+0x2c>)
 800c662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c666:	601a      	str	r2, [r3, #0]
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c670:	e7f0      	b.n	800c654 <prvIdleTask+0x8>
 800c672:	bf00      	nop
 800c674:	20000e28 	.word	0x20000e28
 800c678:	e000ed04 	.word	0xe000ed04

0800c67c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c682:	2300      	movs	r3, #0
 800c684:	607b      	str	r3, [r7, #4]
 800c686:	e00c      	b.n	800c6a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	4613      	mov	r3, r2
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	4413      	add	r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4a12      	ldr	r2, [pc, #72]	; (800c6dc <prvInitialiseTaskLists+0x60>)
 800c694:	4413      	add	r3, r2
 800c696:	4618      	mov	r0, r3
 800c698:	f7fe fb80 	bl	800ad9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	607b      	str	r3, [r7, #4]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2b37      	cmp	r3, #55	; 0x37
 800c6a6:	d9ef      	bls.n	800c688 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c6a8:	480d      	ldr	r0, [pc, #52]	; (800c6e0 <prvInitialiseTaskLists+0x64>)
 800c6aa:	f7fe fb77 	bl	800ad9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c6ae:	480d      	ldr	r0, [pc, #52]	; (800c6e4 <prvInitialiseTaskLists+0x68>)
 800c6b0:	f7fe fb74 	bl	800ad9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c6b4:	480c      	ldr	r0, [pc, #48]	; (800c6e8 <prvInitialiseTaskLists+0x6c>)
 800c6b6:	f7fe fb71 	bl	800ad9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c6ba:	480c      	ldr	r0, [pc, #48]	; (800c6ec <prvInitialiseTaskLists+0x70>)
 800c6bc:	f7fe fb6e 	bl	800ad9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c6c0:	480b      	ldr	r0, [pc, #44]	; (800c6f0 <prvInitialiseTaskLists+0x74>)
 800c6c2:	f7fe fb6b 	bl	800ad9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c6c6:	4b0b      	ldr	r3, [pc, #44]	; (800c6f4 <prvInitialiseTaskLists+0x78>)
 800c6c8:	4a05      	ldr	r2, [pc, #20]	; (800c6e0 <prvInitialiseTaskLists+0x64>)
 800c6ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c6cc:	4b0a      	ldr	r3, [pc, #40]	; (800c6f8 <prvInitialiseTaskLists+0x7c>)
 800c6ce:	4a05      	ldr	r2, [pc, #20]	; (800c6e4 <prvInitialiseTaskLists+0x68>)
 800c6d0:	601a      	str	r2, [r3, #0]
}
 800c6d2:	bf00      	nop
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	20000e28 	.word	0x20000e28
 800c6e0:	20001288 	.word	0x20001288
 800c6e4:	2000129c 	.word	0x2000129c
 800c6e8:	200012b8 	.word	0x200012b8
 800c6ec:	200012cc 	.word	0x200012cc
 800c6f0:	200012e4 	.word	0x200012e4
 800c6f4:	200012b0 	.word	0x200012b0
 800c6f8:	200012b4 	.word	0x200012b4

0800c6fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c702:	e019      	b.n	800c738 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c704:	f000 fdd6 	bl	800d2b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c708:	4b10      	ldr	r3, [pc, #64]	; (800c74c <prvCheckTasksWaitingTermination+0x50>)
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	3304      	adds	r3, #4
 800c714:	4618      	mov	r0, r3
 800c716:	f7fe fbcb 	bl	800aeb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c71a:	4b0d      	ldr	r3, [pc, #52]	; (800c750 <prvCheckTasksWaitingTermination+0x54>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	3b01      	subs	r3, #1
 800c720:	4a0b      	ldr	r2, [pc, #44]	; (800c750 <prvCheckTasksWaitingTermination+0x54>)
 800c722:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c724:	4b0b      	ldr	r3, [pc, #44]	; (800c754 <prvCheckTasksWaitingTermination+0x58>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	3b01      	subs	r3, #1
 800c72a:	4a0a      	ldr	r2, [pc, #40]	; (800c754 <prvCheckTasksWaitingTermination+0x58>)
 800c72c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c72e:	f000 fdf1 	bl	800d314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f810 	bl	800c758 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c738:	4b06      	ldr	r3, [pc, #24]	; (800c754 <prvCheckTasksWaitingTermination+0x58>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1e1      	bne.n	800c704 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c740:	bf00      	nop
 800c742:	bf00      	nop
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	200012cc 	.word	0x200012cc
 800c750:	200012f8 	.word	0x200012f8
 800c754:	200012e0 	.word	0x200012e0

0800c758 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	3354      	adds	r3, #84	; 0x54
 800c764:	4618      	mov	r0, r3
 800c766:	f001 fe1f 	bl	800e3a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c770:	2b00      	cmp	r3, #0
 800c772:	d108      	bne.n	800c786 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c778:	4618      	mov	r0, r3
 800c77a:	f000 ff89 	bl	800d690 <vPortFree>
				vPortFree( pxTCB );
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 ff86 	bl	800d690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c784:	e018      	b.n	800c7b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d103      	bne.n	800c798 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 ff7d 	bl	800d690 <vPortFree>
	}
 800c796:	e00f      	b.n	800c7b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c79e:	2b02      	cmp	r3, #2
 800c7a0:	d00a      	beq.n	800c7b8 <prvDeleteTCB+0x60>
	__asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	60fb      	str	r3, [r7, #12]
}
 800c7b4:	bf00      	nop
 800c7b6:	e7fe      	b.n	800c7b6 <prvDeleteTCB+0x5e>
	}
 800c7b8:	bf00      	nop
 800c7ba:	3710      	adds	r7, #16
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7c6:	4b0c      	ldr	r3, [pc, #48]	; (800c7f8 <prvResetNextTaskUnblockTime+0x38>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d104      	bne.n	800c7da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7d0:	4b0a      	ldr	r3, [pc, #40]	; (800c7fc <prvResetNextTaskUnblockTime+0x3c>)
 800c7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c7d8:	e008      	b.n	800c7ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7da:	4b07      	ldr	r3, [pc, #28]	; (800c7f8 <prvResetNextTaskUnblockTime+0x38>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	4a04      	ldr	r2, [pc, #16]	; (800c7fc <prvResetNextTaskUnblockTime+0x3c>)
 800c7ea:	6013      	str	r3, [r2, #0]
}
 800c7ec:	bf00      	nop
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr
 800c7f8:	200012b0 	.word	0x200012b0
 800c7fc:	20001318 	.word	0x20001318

0800c800 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c800:	b480      	push	{r7}
 800c802:	b083      	sub	sp, #12
 800c804:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c806:	4b0b      	ldr	r3, [pc, #44]	; (800c834 <xTaskGetSchedulerState+0x34>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d102      	bne.n	800c814 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c80e:	2301      	movs	r3, #1
 800c810:	607b      	str	r3, [r7, #4]
 800c812:	e008      	b.n	800c826 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c814:	4b08      	ldr	r3, [pc, #32]	; (800c838 <xTaskGetSchedulerState+0x38>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d102      	bne.n	800c822 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c81c:	2302      	movs	r3, #2
 800c81e:	607b      	str	r3, [r7, #4]
 800c820:	e001      	b.n	800c826 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c822:	2300      	movs	r3, #0
 800c824:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c826:	687b      	ldr	r3, [r7, #4]
	}
 800c828:	4618      	mov	r0, r3
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr
 800c834:	20001304 	.word	0x20001304
 800c838:	20001320 	.word	0x20001320

0800c83c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c848:	2300      	movs	r3, #0
 800c84a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d056      	beq.n	800c900 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c852:	4b2e      	ldr	r3, [pc, #184]	; (800c90c <xTaskPriorityDisinherit+0xd0>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	693a      	ldr	r2, [r7, #16]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d00a      	beq.n	800c872 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c860:	f383 8811 	msr	BASEPRI, r3
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	f3bf 8f4f 	dsb	sy
 800c86c:	60fb      	str	r3, [r7, #12]
}
 800c86e:	bf00      	nop
 800c870:	e7fe      	b.n	800c870 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c876:	2b00      	cmp	r3, #0
 800c878:	d10a      	bne.n	800c890 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	60bb      	str	r3, [r7, #8]
}
 800c88c:	bf00      	nop
 800c88e:	e7fe      	b.n	800c88e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c894:	1e5a      	subs	r2, r3, #1
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d02c      	beq.n	800c900 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d128      	bne.n	800c900 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	3304      	adds	r3, #4
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7fe fafc 	bl	800aeb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d0:	4b0f      	ldr	r3, [pc, #60]	; (800c910 <xTaskPriorityDisinherit+0xd4>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d903      	bls.n	800c8e0 <xTaskPriorityDisinherit+0xa4>
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8dc:	4a0c      	ldr	r2, [pc, #48]	; (800c910 <xTaskPriorityDisinherit+0xd4>)
 800c8de:	6013      	str	r3, [r2, #0]
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4a09      	ldr	r2, [pc, #36]	; (800c914 <xTaskPriorityDisinherit+0xd8>)
 800c8ee:	441a      	add	r2, r3
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	f7fe fa7d 	bl	800adf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c900:	697b      	ldr	r3, [r7, #20]
	}
 800c902:	4618      	mov	r0, r3
 800c904:	3718      	adds	r7, #24
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	20000e24 	.word	0x20000e24
 800c910:	20001300 	.word	0x20001300
 800c914:	20000e28 	.word	0x20000e28

0800c918 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c922:	4b21      	ldr	r3, [pc, #132]	; (800c9a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c928:	4b20      	ldr	r3, [pc, #128]	; (800c9ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	3304      	adds	r3, #4
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fe fabe 	bl	800aeb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c93a:	d10a      	bne.n	800c952 <prvAddCurrentTaskToDelayedList+0x3a>
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d007      	beq.n	800c952 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c942:	4b1a      	ldr	r3, [pc, #104]	; (800c9ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3304      	adds	r3, #4
 800c948:	4619      	mov	r1, r3
 800c94a:	4819      	ldr	r0, [pc, #100]	; (800c9b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c94c:	f7fe fa53 	bl	800adf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c950:	e026      	b.n	800c9a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4413      	add	r3, r2
 800c958:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c95a:	4b14      	ldr	r3, [pc, #80]	; (800c9ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c962:	68ba      	ldr	r2, [r7, #8]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	429a      	cmp	r2, r3
 800c968:	d209      	bcs.n	800c97e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c96a:	4b12      	ldr	r3, [pc, #72]	; (800c9b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	4b0f      	ldr	r3, [pc, #60]	; (800c9ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3304      	adds	r3, #4
 800c974:	4619      	mov	r1, r3
 800c976:	4610      	mov	r0, r2
 800c978:	f7fe fa61 	bl	800ae3e <vListInsert>
}
 800c97c:	e010      	b.n	800c9a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c97e:	4b0e      	ldr	r3, [pc, #56]	; (800c9b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	4b0a      	ldr	r3, [pc, #40]	; (800c9ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3304      	adds	r3, #4
 800c988:	4619      	mov	r1, r3
 800c98a:	4610      	mov	r0, r2
 800c98c:	f7fe fa57 	bl	800ae3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c990:	4b0a      	ldr	r3, [pc, #40]	; (800c9bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	429a      	cmp	r2, r3
 800c998:	d202      	bcs.n	800c9a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c99a:	4a08      	ldr	r2, [pc, #32]	; (800c9bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	6013      	str	r3, [r2, #0]
}
 800c9a0:	bf00      	nop
 800c9a2:	3710      	adds	r7, #16
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	200012fc 	.word	0x200012fc
 800c9ac:	20000e24 	.word	0x20000e24
 800c9b0:	200012e4 	.word	0x200012e4
 800c9b4:	200012b4 	.word	0x200012b4
 800c9b8:	200012b0 	.word	0x200012b0
 800c9bc:	20001318 	.word	0x20001318

0800c9c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b08a      	sub	sp, #40	; 0x28
 800c9c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c9ca:	f000 fb07 	bl	800cfdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c9ce:	4b1c      	ldr	r3, [pc, #112]	; (800ca40 <xTimerCreateTimerTask+0x80>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d021      	beq.n	800ca1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c9de:	1d3a      	adds	r2, r7, #4
 800c9e0:	f107 0108 	add.w	r1, r7, #8
 800c9e4:	f107 030c 	add.w	r3, r7, #12
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fe f9bd 	bl	800ad68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c9ee:	6879      	ldr	r1, [r7, #4]
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	9202      	str	r2, [sp, #8]
 800c9f6:	9301      	str	r3, [sp, #4]
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	460a      	mov	r2, r1
 800ca00:	4910      	ldr	r1, [pc, #64]	; (800ca44 <xTimerCreateTimerTask+0x84>)
 800ca02:	4811      	ldr	r0, [pc, #68]	; (800ca48 <xTimerCreateTimerTask+0x88>)
 800ca04:	f7ff f8e8 	bl	800bbd8 <xTaskCreateStatic>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	4a10      	ldr	r2, [pc, #64]	; (800ca4c <xTimerCreateTimerTask+0x8c>)
 800ca0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca0e:	4b0f      	ldr	r3, [pc, #60]	; (800ca4c <xTimerCreateTimerTask+0x8c>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d001      	beq.n	800ca1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca16:	2301      	movs	r3, #1
 800ca18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10a      	bne.n	800ca36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ca20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca24:	f383 8811 	msr	BASEPRI, r3
 800ca28:	f3bf 8f6f 	isb	sy
 800ca2c:	f3bf 8f4f 	dsb	sy
 800ca30:	613b      	str	r3, [r7, #16]
}
 800ca32:	bf00      	nop
 800ca34:	e7fe      	b.n	800ca34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ca36:	697b      	ldr	r3, [r7, #20]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3718      	adds	r7, #24
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	20001354 	.word	0x20001354
 800ca44:	0800e5c4 	.word	0x0800e5c4
 800ca48:	0800cb85 	.word	0x0800cb85
 800ca4c:	20001358 	.word	0x20001358

0800ca50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08a      	sub	sp, #40	; 0x28
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
 800ca5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10a      	bne.n	800ca7e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ca68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	623b      	str	r3, [r7, #32]
}
 800ca7a:	bf00      	nop
 800ca7c:	e7fe      	b.n	800ca7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca7e:	4b1a      	ldr	r3, [pc, #104]	; (800cae8 <xTimerGenericCommand+0x98>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d02a      	beq.n	800cadc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	2b05      	cmp	r3, #5
 800ca96:	dc18      	bgt.n	800caca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca98:	f7ff feb2 	bl	800c800 <xTaskGetSchedulerState>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b02      	cmp	r3, #2
 800caa0:	d109      	bne.n	800cab6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800caa2:	4b11      	ldr	r3, [pc, #68]	; (800cae8 <xTimerGenericCommand+0x98>)
 800caa4:	6818      	ldr	r0, [r3, #0]
 800caa6:	f107 0110 	add.w	r1, r7, #16
 800caaa:	2300      	movs	r3, #0
 800caac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caae:	f7fe fbd1 	bl	800b254 <xQueueGenericSend>
 800cab2:	6278      	str	r0, [r7, #36]	; 0x24
 800cab4:	e012      	b.n	800cadc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cab6:	4b0c      	ldr	r3, [pc, #48]	; (800cae8 <xTimerGenericCommand+0x98>)
 800cab8:	6818      	ldr	r0, [r3, #0]
 800caba:	f107 0110 	add.w	r1, r7, #16
 800cabe:	2300      	movs	r3, #0
 800cac0:	2200      	movs	r2, #0
 800cac2:	f7fe fbc7 	bl	800b254 <xQueueGenericSend>
 800cac6:	6278      	str	r0, [r7, #36]	; 0x24
 800cac8:	e008      	b.n	800cadc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800caca:	4b07      	ldr	r3, [pc, #28]	; (800cae8 <xTimerGenericCommand+0x98>)
 800cacc:	6818      	ldr	r0, [r3, #0]
 800cace:	f107 0110 	add.w	r1, r7, #16
 800cad2:	2300      	movs	r3, #0
 800cad4:	683a      	ldr	r2, [r7, #0]
 800cad6:	f7fe fcbb 	bl	800b450 <xQueueGenericSendFromISR>
 800cada:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3728      	adds	r7, #40	; 0x28
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	20001354 	.word	0x20001354

0800caec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b088      	sub	sp, #32
 800caf0:	af02      	add	r7, sp, #8
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caf6:	4b22      	ldr	r3, [pc, #136]	; (800cb80 <prvProcessExpiredTimer+0x94>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	3304      	adds	r3, #4
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7fe f9d3 	bl	800aeb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb10:	f003 0304 	and.w	r3, r3, #4
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d022      	beq.n	800cb5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	699a      	ldr	r2, [r3, #24]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	18d1      	adds	r1, r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	683a      	ldr	r2, [r7, #0]
 800cb24:	6978      	ldr	r0, [r7, #20]
 800cb26:	f000 f8d1 	bl	800cccc <prvInsertTimerInActiveList>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d01f      	beq.n	800cb70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb30:	2300      	movs	r3, #0
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	2300      	movs	r3, #0
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	2100      	movs	r1, #0
 800cb3a:	6978      	ldr	r0, [r7, #20]
 800cb3c:	f7ff ff88 	bl	800ca50 <xTimerGenericCommand>
 800cb40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d113      	bne.n	800cb70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4c:	f383 8811 	msr	BASEPRI, r3
 800cb50:	f3bf 8f6f 	isb	sy
 800cb54:	f3bf 8f4f 	dsb	sy
 800cb58:	60fb      	str	r3, [r7, #12]
}
 800cb5a:	bf00      	nop
 800cb5c:	e7fe      	b.n	800cb5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb64:	f023 0301 	bic.w	r3, r3, #1
 800cb68:	b2da      	uxtb	r2, r3
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	6a1b      	ldr	r3, [r3, #32]
 800cb74:	6978      	ldr	r0, [r7, #20]
 800cb76:	4798      	blx	r3
}
 800cb78:	bf00      	nop
 800cb7a:	3718      	adds	r7, #24
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	2000134c 	.word	0x2000134c

0800cb84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb8c:	f107 0308 	add.w	r3, r7, #8
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 f857 	bl	800cc44 <prvGetNextExpireTime>
 800cb96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f000 f803 	bl	800cba8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cba2:	f000 f8d5 	bl	800cd50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cba6:	e7f1      	b.n	800cb8c <prvTimerTask+0x8>

0800cba8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cbb2:	f7ff fa39 	bl	800c028 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cbb6:	f107 0308 	add.w	r3, r7, #8
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f000 f866 	bl	800cc8c <prvSampleTimeNow>
 800cbc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d130      	bne.n	800cc2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d10a      	bne.n	800cbe4 <prvProcessTimerOrBlockTask+0x3c>
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d806      	bhi.n	800cbe4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cbd6:	f7ff fa35 	bl	800c044 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cbda:	68f9      	ldr	r1, [r7, #12]
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7ff ff85 	bl	800caec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cbe2:	e024      	b.n	800cc2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d008      	beq.n	800cbfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cbea:	4b13      	ldr	r3, [pc, #76]	; (800cc38 <prvProcessTimerOrBlockTask+0x90>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d101      	bne.n	800cbf8 <prvProcessTimerOrBlockTask+0x50>
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	e000      	b.n	800cbfa <prvProcessTimerOrBlockTask+0x52>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cbfc:	4b0f      	ldr	r3, [pc, #60]	; (800cc3c <prvProcessTimerOrBlockTask+0x94>)
 800cbfe:	6818      	ldr	r0, [r3, #0]
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	683a      	ldr	r2, [r7, #0]
 800cc08:	4619      	mov	r1, r3
 800cc0a:	f7fe ffb1 	bl	800bb70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc0e:	f7ff fa19 	bl	800c044 <xTaskResumeAll>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10a      	bne.n	800cc2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc18:	4b09      	ldr	r3, [pc, #36]	; (800cc40 <prvProcessTimerOrBlockTask+0x98>)
 800cc1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc1e:	601a      	str	r2, [r3, #0]
 800cc20:	f3bf 8f4f 	dsb	sy
 800cc24:	f3bf 8f6f 	isb	sy
}
 800cc28:	e001      	b.n	800cc2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc2a:	f7ff fa0b 	bl	800c044 <xTaskResumeAll>
}
 800cc2e:	bf00      	nop
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	20001350 	.word	0x20001350
 800cc3c:	20001354 	.word	0x20001354
 800cc40:	e000ed04 	.word	0xe000ed04

0800cc44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc4c:	4b0e      	ldr	r3, [pc, #56]	; (800cc88 <prvGetNextExpireTime+0x44>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d101      	bne.n	800cc5a <prvGetNextExpireTime+0x16>
 800cc56:	2201      	movs	r2, #1
 800cc58:	e000      	b.n	800cc5c <prvGetNextExpireTime+0x18>
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d105      	bne.n	800cc74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc68:	4b07      	ldr	r3, [pc, #28]	; (800cc88 <prvGetNextExpireTime+0x44>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	60fb      	str	r3, [r7, #12]
 800cc72:	e001      	b.n	800cc78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc74:	2300      	movs	r3, #0
 800cc76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc78:	68fb      	ldr	r3, [r7, #12]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3714      	adds	r7, #20
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	2000134c 	.word	0x2000134c

0800cc8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc94:	f7ff fa74 	bl	800c180 <xTaskGetTickCount>
 800cc98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc9a:	4b0b      	ldr	r3, [pc, #44]	; (800ccc8 <prvSampleTimeNow+0x3c>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d205      	bcs.n	800ccb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cca4:	f000 f936 	bl	800cf14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2201      	movs	r2, #1
 800ccac:	601a      	str	r2, [r3, #0]
 800ccae:	e002      	b.n	800ccb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ccb6:	4a04      	ldr	r2, [pc, #16]	; (800ccc8 <prvSampleTimeNow+0x3c>)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	2000135c 	.word	0x2000135c

0800cccc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	607a      	str	r2, [r7, #4]
 800ccd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	68ba      	ldr	r2, [r7, #8]
 800cce2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ccea:	68ba      	ldr	r2, [r7, #8]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d812      	bhi.n	800cd18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	1ad2      	subs	r2, r2, r3
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	699b      	ldr	r3, [r3, #24]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d302      	bcc.n	800cd06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cd00:	2301      	movs	r3, #1
 800cd02:	617b      	str	r3, [r7, #20]
 800cd04:	e01b      	b.n	800cd3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd06:	4b10      	ldr	r3, [pc, #64]	; (800cd48 <prvInsertTimerInActiveList+0x7c>)
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	3304      	adds	r3, #4
 800cd0e:	4619      	mov	r1, r3
 800cd10:	4610      	mov	r0, r2
 800cd12:	f7fe f894 	bl	800ae3e <vListInsert>
 800cd16:	e012      	b.n	800cd3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d206      	bcs.n	800cd2e <prvInsertTimerInActiveList+0x62>
 800cd20:	68ba      	ldr	r2, [r7, #8]
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d302      	bcc.n	800cd2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	617b      	str	r3, [r7, #20]
 800cd2c:	e007      	b.n	800cd3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd2e:	4b07      	ldr	r3, [pc, #28]	; (800cd4c <prvInsertTimerInActiveList+0x80>)
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	3304      	adds	r3, #4
 800cd36:	4619      	mov	r1, r3
 800cd38:	4610      	mov	r0, r2
 800cd3a:	f7fe f880 	bl	800ae3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd3e:	697b      	ldr	r3, [r7, #20]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3718      	adds	r7, #24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	20001350 	.word	0x20001350
 800cd4c:	2000134c 	.word	0x2000134c

0800cd50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b08e      	sub	sp, #56	; 0x38
 800cd54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd56:	e0ca      	b.n	800ceee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	da18      	bge.n	800cd90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd5e:	1d3b      	adds	r3, r7, #4
 800cd60:	3304      	adds	r3, #4
 800cd62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d10a      	bne.n	800cd80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6e:	f383 8811 	msr	BASEPRI, r3
 800cd72:	f3bf 8f6f 	isb	sy
 800cd76:	f3bf 8f4f 	dsb	sy
 800cd7a:	61fb      	str	r3, [r7, #28]
}
 800cd7c:	bf00      	nop
 800cd7e:	e7fe      	b.n	800cd7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd86:	6850      	ldr	r0, [r2, #4]
 800cd88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd8a:	6892      	ldr	r2, [r2, #8]
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f2c0 80ab 	blt.w	800ceee <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9e:	695b      	ldr	r3, [r3, #20]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d004      	beq.n	800cdae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda6:	3304      	adds	r3, #4
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7fe f881 	bl	800aeb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cdae:	463b      	mov	r3, r7
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7ff ff6b 	bl	800cc8c <prvSampleTimeNow>
 800cdb6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b09      	cmp	r3, #9
 800cdbc:	f200 8096 	bhi.w	800ceec <prvProcessReceivedCommands+0x19c>
 800cdc0:	a201      	add	r2, pc, #4	; (adr r2, 800cdc8 <prvProcessReceivedCommands+0x78>)
 800cdc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc6:	bf00      	nop
 800cdc8:	0800cdf1 	.word	0x0800cdf1
 800cdcc:	0800cdf1 	.word	0x0800cdf1
 800cdd0:	0800cdf1 	.word	0x0800cdf1
 800cdd4:	0800ce65 	.word	0x0800ce65
 800cdd8:	0800ce79 	.word	0x0800ce79
 800cddc:	0800cec3 	.word	0x0800cec3
 800cde0:	0800cdf1 	.word	0x0800cdf1
 800cde4:	0800cdf1 	.word	0x0800cdf1
 800cde8:	0800ce65 	.word	0x0800ce65
 800cdec:	0800ce79 	.word	0x0800ce79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdf6:	f043 0301 	orr.w	r3, r3, #1
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ce02:	68ba      	ldr	r2, [r7, #8]
 800ce04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce06:	699b      	ldr	r3, [r3, #24]
 800ce08:	18d1      	adds	r1, r2, r3
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce10:	f7ff ff5c 	bl	800cccc <prvInsertTimerInActiveList>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d069      	beq.n	800ceee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1c:	6a1b      	ldr	r3, [r3, #32]
 800ce1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce28:	f003 0304 	and.w	r3, r3, #4
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d05e      	beq.n	800ceee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce30:	68ba      	ldr	r2, [r7, #8]
 800ce32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	441a      	add	r2, r3
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	2100      	movs	r1, #0
 800ce40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce42:	f7ff fe05 	bl	800ca50 <xTimerGenericCommand>
 800ce46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce48:	6a3b      	ldr	r3, [r7, #32]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d14f      	bne.n	800ceee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	61bb      	str	r3, [r7, #24]
}
 800ce60:	bf00      	nop
 800ce62:	e7fe      	b.n	800ce62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce6a:	f023 0301 	bic.w	r3, r3, #1
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ce76:	e03a      	b.n	800ceee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce7e:	f043 0301 	orr.w	r3, r3, #1
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce8a:	68ba      	ldr	r2, [r7, #8]
 800ce8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce92:	699b      	ldr	r3, [r3, #24]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10a      	bne.n	800ceae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ce98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9c:	f383 8811 	msr	BASEPRI, r3
 800cea0:	f3bf 8f6f 	isb	sy
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	617b      	str	r3, [r7, #20]
}
 800ceaa:	bf00      	nop
 800ceac:	e7fe      	b.n	800ceac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ceae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb0:	699a      	ldr	r2, [r3, #24]
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb4:	18d1      	adds	r1, r2, r3
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cebc:	f7ff ff06 	bl	800cccc <prvInsertTimerInActiveList>
					break;
 800cec0:	e015      	b.n	800ceee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cec8:	f003 0302 	and.w	r3, r3, #2
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d103      	bne.n	800ced8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ced0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ced2:	f000 fbdd 	bl	800d690 <vPortFree>
 800ced6:	e00a      	b.n	800ceee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ced8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cede:	f023 0301 	bic.w	r3, r3, #1
 800cee2:	b2da      	uxtb	r2, r3
 800cee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ceea:	e000      	b.n	800ceee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ceec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ceee:	4b08      	ldr	r3, [pc, #32]	; (800cf10 <prvProcessReceivedCommands+0x1c0>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	1d39      	adds	r1, r7, #4
 800cef4:	2200      	movs	r2, #0
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe fbd2 	bl	800b6a0 <xQueueReceive>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f47f af2a 	bne.w	800cd58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop
 800cf08:	3730      	adds	r7, #48	; 0x30
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	20001354 	.word	0x20001354

0800cf14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b088      	sub	sp, #32
 800cf18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf1a:	e048      	b.n	800cfae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf1c:	4b2d      	ldr	r3, [pc, #180]	; (800cfd4 <prvSwitchTimerLists+0xc0>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf26:	4b2b      	ldr	r3, [pc, #172]	; (800cfd4 <prvSwitchTimerLists+0xc0>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	68db      	ldr	r3, [r3, #12]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	3304      	adds	r3, #4
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fd ffbb 	bl	800aeb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6a1b      	ldr	r3, [r3, #32]
 800cf3e:	68f8      	ldr	r0, [r7, #12]
 800cf40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf48:	f003 0304 	and.w	r3, r3, #4
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d02e      	beq.n	800cfae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	699b      	ldr	r3, [r3, #24]
 800cf54:	693a      	ldr	r2, [r7, #16]
 800cf56:	4413      	add	r3, r2
 800cf58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d90e      	bls.n	800cf80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	68ba      	ldr	r2, [r7, #8]
 800cf66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf6e:	4b19      	ldr	r3, [pc, #100]	; (800cfd4 <prvSwitchTimerLists+0xc0>)
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3304      	adds	r3, #4
 800cf76:	4619      	mov	r1, r3
 800cf78:	4610      	mov	r0, r2
 800cf7a:	f7fd ff60 	bl	800ae3e <vListInsert>
 800cf7e:	e016      	b.n	800cfae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf80:	2300      	movs	r3, #0
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	2300      	movs	r3, #0
 800cf86:	693a      	ldr	r2, [r7, #16]
 800cf88:	2100      	movs	r1, #0
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f7ff fd60 	bl	800ca50 <xTimerGenericCommand>
 800cf90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10a      	bne.n	800cfae <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9c:	f383 8811 	msr	BASEPRI, r3
 800cfa0:	f3bf 8f6f 	isb	sy
 800cfa4:	f3bf 8f4f 	dsb	sy
 800cfa8:	603b      	str	r3, [r7, #0]
}
 800cfaa:	bf00      	nop
 800cfac:	e7fe      	b.n	800cfac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cfae:	4b09      	ldr	r3, [pc, #36]	; (800cfd4 <prvSwitchTimerLists+0xc0>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d1b1      	bne.n	800cf1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cfb8:	4b06      	ldr	r3, [pc, #24]	; (800cfd4 <prvSwitchTimerLists+0xc0>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cfbe:	4b06      	ldr	r3, [pc, #24]	; (800cfd8 <prvSwitchTimerLists+0xc4>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a04      	ldr	r2, [pc, #16]	; (800cfd4 <prvSwitchTimerLists+0xc0>)
 800cfc4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cfc6:	4a04      	ldr	r2, [pc, #16]	; (800cfd8 <prvSwitchTimerLists+0xc4>)
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	6013      	str	r3, [r2, #0]
}
 800cfcc:	bf00      	nop
 800cfce:	3718      	adds	r7, #24
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	2000134c 	.word	0x2000134c
 800cfd8:	20001350 	.word	0x20001350

0800cfdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cfe2:	f000 f967 	bl	800d2b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cfe6:	4b15      	ldr	r3, [pc, #84]	; (800d03c <prvCheckForValidListAndQueue+0x60>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d120      	bne.n	800d030 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cfee:	4814      	ldr	r0, [pc, #80]	; (800d040 <prvCheckForValidListAndQueue+0x64>)
 800cff0:	f7fd fed4 	bl	800ad9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cff4:	4813      	ldr	r0, [pc, #76]	; (800d044 <prvCheckForValidListAndQueue+0x68>)
 800cff6:	f7fd fed1 	bl	800ad9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cffa:	4b13      	ldr	r3, [pc, #76]	; (800d048 <prvCheckForValidListAndQueue+0x6c>)
 800cffc:	4a10      	ldr	r2, [pc, #64]	; (800d040 <prvCheckForValidListAndQueue+0x64>)
 800cffe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d000:	4b12      	ldr	r3, [pc, #72]	; (800d04c <prvCheckForValidListAndQueue+0x70>)
 800d002:	4a10      	ldr	r2, [pc, #64]	; (800d044 <prvCheckForValidListAndQueue+0x68>)
 800d004:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d006:	2300      	movs	r3, #0
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	4b11      	ldr	r3, [pc, #68]	; (800d050 <prvCheckForValidListAndQueue+0x74>)
 800d00c:	4a11      	ldr	r2, [pc, #68]	; (800d054 <prvCheckForValidListAndQueue+0x78>)
 800d00e:	2110      	movs	r1, #16
 800d010:	200a      	movs	r0, #10
 800d012:	f7fd ffdf 	bl	800afd4 <xQueueGenericCreateStatic>
 800d016:	4603      	mov	r3, r0
 800d018:	4a08      	ldr	r2, [pc, #32]	; (800d03c <prvCheckForValidListAndQueue+0x60>)
 800d01a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d01c:	4b07      	ldr	r3, [pc, #28]	; (800d03c <prvCheckForValidListAndQueue+0x60>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d005      	beq.n	800d030 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d024:	4b05      	ldr	r3, [pc, #20]	; (800d03c <prvCheckForValidListAndQueue+0x60>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	490b      	ldr	r1, [pc, #44]	; (800d058 <prvCheckForValidListAndQueue+0x7c>)
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fe fd4c 	bl	800bac8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d030:	f000 f970 	bl	800d314 <vPortExitCritical>
}
 800d034:	bf00      	nop
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	20001354 	.word	0x20001354
 800d040:	20001324 	.word	0x20001324
 800d044:	20001338 	.word	0x20001338
 800d048:	2000134c 	.word	0x2000134c
 800d04c:	20001350 	.word	0x20001350
 800d050:	20001400 	.word	0x20001400
 800d054:	20001360 	.word	0x20001360
 800d058:	0800e5cc 	.word	0x0800e5cc

0800d05c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	3b04      	subs	r3, #4
 800d06c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	3b04      	subs	r3, #4
 800d07a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	f023 0201 	bic.w	r2, r3, #1
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	3b04      	subs	r3, #4
 800d08a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d08c:	4a0c      	ldr	r2, [pc, #48]	; (800d0c0 <pxPortInitialiseStack+0x64>)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	3b14      	subs	r3, #20
 800d096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3b04      	subs	r3, #4
 800d0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f06f 0202 	mvn.w	r2, #2
 800d0aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	3b20      	subs	r3, #32
 800d0b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3714      	adds	r7, #20
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr
 800d0c0:	0800d0c5 	.word	0x0800d0c5

0800d0c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0ce:	4b12      	ldr	r3, [pc, #72]	; (800d118 <prvTaskExitError+0x54>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d6:	d00a      	beq.n	800d0ee <prvTaskExitError+0x2a>
	__asm volatile
 800d0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0dc:	f383 8811 	msr	BASEPRI, r3
 800d0e0:	f3bf 8f6f 	isb	sy
 800d0e4:	f3bf 8f4f 	dsb	sy
 800d0e8:	60fb      	str	r3, [r7, #12]
}
 800d0ea:	bf00      	nop
 800d0ec:	e7fe      	b.n	800d0ec <prvTaskExitError+0x28>
	__asm volatile
 800d0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	60bb      	str	r3, [r7, #8]
}
 800d100:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d102:	bf00      	nop
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d0fc      	beq.n	800d104 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d10a:	bf00      	nop
 800d10c:	bf00      	nop
 800d10e:	3714      	adds	r7, #20
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr
 800d118:	20000098 	.word	0x20000098
 800d11c:	00000000 	.word	0x00000000

0800d120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d120:	4b07      	ldr	r3, [pc, #28]	; (800d140 <pxCurrentTCBConst2>)
 800d122:	6819      	ldr	r1, [r3, #0]
 800d124:	6808      	ldr	r0, [r1, #0]
 800d126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d12a:	f380 8809 	msr	PSP, r0
 800d12e:	f3bf 8f6f 	isb	sy
 800d132:	f04f 0000 	mov.w	r0, #0
 800d136:	f380 8811 	msr	BASEPRI, r0
 800d13a:	4770      	bx	lr
 800d13c:	f3af 8000 	nop.w

0800d140 <pxCurrentTCBConst2>:
 800d140:	20000e24 	.word	0x20000e24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d144:	bf00      	nop
 800d146:	bf00      	nop

0800d148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d148:	4808      	ldr	r0, [pc, #32]	; (800d16c <prvPortStartFirstTask+0x24>)
 800d14a:	6800      	ldr	r0, [r0, #0]
 800d14c:	6800      	ldr	r0, [r0, #0]
 800d14e:	f380 8808 	msr	MSP, r0
 800d152:	f04f 0000 	mov.w	r0, #0
 800d156:	f380 8814 	msr	CONTROL, r0
 800d15a:	b662      	cpsie	i
 800d15c:	b661      	cpsie	f
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	f3bf 8f6f 	isb	sy
 800d166:	df00      	svc	0
 800d168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d16a:	bf00      	nop
 800d16c:	e000ed08 	.word	0xe000ed08

0800d170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d176:	4b46      	ldr	r3, [pc, #280]	; (800d290 <xPortStartScheduler+0x120>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a46      	ldr	r2, [pc, #280]	; (800d294 <xPortStartScheduler+0x124>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d10a      	bne.n	800d196 <xPortStartScheduler+0x26>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	613b      	str	r3, [r7, #16]
}
 800d192:	bf00      	nop
 800d194:	e7fe      	b.n	800d194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d196:	4b3e      	ldr	r3, [pc, #248]	; (800d290 <xPortStartScheduler+0x120>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a3f      	ldr	r2, [pc, #252]	; (800d298 <xPortStartScheduler+0x128>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d10a      	bne.n	800d1b6 <xPortStartScheduler+0x46>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	60fb      	str	r3, [r7, #12]
}
 800d1b2:	bf00      	nop
 800d1b4:	e7fe      	b.n	800d1b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d1b6:	4b39      	ldr	r3, [pc, #228]	; (800d29c <xPortStartScheduler+0x12c>)
 800d1b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	22ff      	movs	r2, #255	; 0xff
 800d1c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1d0:	78fb      	ldrb	r3, [r7, #3]
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d1d8:	b2da      	uxtb	r2, r3
 800d1da:	4b31      	ldr	r3, [pc, #196]	; (800d2a0 <xPortStartScheduler+0x130>)
 800d1dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d1de:	4b31      	ldr	r3, [pc, #196]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d1e0:	2207      	movs	r2, #7
 800d1e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1e4:	e009      	b.n	800d1fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d1e6:	4b2f      	ldr	r3, [pc, #188]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	3b01      	subs	r3, #1
 800d1ec:	4a2d      	ldr	r2, [pc, #180]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d1ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1f0:	78fb      	ldrb	r3, [r7, #3]
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	005b      	lsls	r3, r3, #1
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1fa:	78fb      	ldrb	r3, [r7, #3]
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d202:	2b80      	cmp	r3, #128	; 0x80
 800d204:	d0ef      	beq.n	800d1e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d206:	4b27      	ldr	r3, [pc, #156]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f1c3 0307 	rsb	r3, r3, #7
 800d20e:	2b04      	cmp	r3, #4
 800d210:	d00a      	beq.n	800d228 <xPortStartScheduler+0xb8>
	__asm volatile
 800d212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	60bb      	str	r3, [r7, #8]
}
 800d224:	bf00      	nop
 800d226:	e7fe      	b.n	800d226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d228:	4b1e      	ldr	r3, [pc, #120]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	021b      	lsls	r3, r3, #8
 800d22e:	4a1d      	ldr	r2, [pc, #116]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d232:	4b1c      	ldr	r3, [pc, #112]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d23a:	4a1a      	ldr	r2, [pc, #104]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d23c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	b2da      	uxtb	r2, r3
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d246:	4b18      	ldr	r3, [pc, #96]	; (800d2a8 <xPortStartScheduler+0x138>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4a17      	ldr	r2, [pc, #92]	; (800d2a8 <xPortStartScheduler+0x138>)
 800d24c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d252:	4b15      	ldr	r3, [pc, #84]	; (800d2a8 <xPortStartScheduler+0x138>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a14      	ldr	r2, [pc, #80]	; (800d2a8 <xPortStartScheduler+0x138>)
 800d258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d25c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d25e:	f000 f8dd 	bl	800d41c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d262:	4b12      	ldr	r3, [pc, #72]	; (800d2ac <xPortStartScheduler+0x13c>)
 800d264:	2200      	movs	r2, #0
 800d266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d268:	f000 f8fc 	bl	800d464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d26c:	4b10      	ldr	r3, [pc, #64]	; (800d2b0 <xPortStartScheduler+0x140>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a0f      	ldr	r2, [pc, #60]	; (800d2b0 <xPortStartScheduler+0x140>)
 800d272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d278:	f7ff ff66 	bl	800d148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d27c:	f7ff f84a 	bl	800c314 <vTaskSwitchContext>
	prvTaskExitError();
 800d280:	f7ff ff20 	bl	800d0c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	3718      	adds	r7, #24
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	e000ed00 	.word	0xe000ed00
 800d294:	410fc271 	.word	0x410fc271
 800d298:	410fc270 	.word	0x410fc270
 800d29c:	e000e400 	.word	0xe000e400
 800d2a0:	20001450 	.word	0x20001450
 800d2a4:	20001454 	.word	0x20001454
 800d2a8:	e000ed20 	.word	0xe000ed20
 800d2ac:	20000098 	.word	0x20000098
 800d2b0:	e000ef34 	.word	0xe000ef34

0800d2b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
	__asm volatile
 800d2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	607b      	str	r3, [r7, #4]
}
 800d2cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d2ce:	4b0f      	ldr	r3, [pc, #60]	; (800d30c <vPortEnterCritical+0x58>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	4a0d      	ldr	r2, [pc, #52]	; (800d30c <vPortEnterCritical+0x58>)
 800d2d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d2d8:	4b0c      	ldr	r3, [pc, #48]	; (800d30c <vPortEnterCritical+0x58>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d10f      	bne.n	800d300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2e0:	4b0b      	ldr	r3, [pc, #44]	; (800d310 <vPortEnterCritical+0x5c>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00a      	beq.n	800d300 <vPortEnterCritical+0x4c>
	__asm volatile
 800d2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ee:	f383 8811 	msr	BASEPRI, r3
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	603b      	str	r3, [r7, #0]
}
 800d2fc:	bf00      	nop
 800d2fe:	e7fe      	b.n	800d2fe <vPortEnterCritical+0x4a>
	}
}
 800d300:	bf00      	nop
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr
 800d30c:	20000098 	.word	0x20000098
 800d310:	e000ed04 	.word	0xe000ed04

0800d314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d31a:	4b12      	ldr	r3, [pc, #72]	; (800d364 <vPortExitCritical+0x50>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d10a      	bne.n	800d338 <vPortExitCritical+0x24>
	__asm volatile
 800d322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d326:	f383 8811 	msr	BASEPRI, r3
 800d32a:	f3bf 8f6f 	isb	sy
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	607b      	str	r3, [r7, #4]
}
 800d334:	bf00      	nop
 800d336:	e7fe      	b.n	800d336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d338:	4b0a      	ldr	r3, [pc, #40]	; (800d364 <vPortExitCritical+0x50>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	3b01      	subs	r3, #1
 800d33e:	4a09      	ldr	r2, [pc, #36]	; (800d364 <vPortExitCritical+0x50>)
 800d340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d342:	4b08      	ldr	r3, [pc, #32]	; (800d364 <vPortExitCritical+0x50>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d105      	bne.n	800d356 <vPortExitCritical+0x42>
 800d34a:	2300      	movs	r3, #0
 800d34c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	f383 8811 	msr	BASEPRI, r3
}
 800d354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d356:	bf00      	nop
 800d358:	370c      	adds	r7, #12
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	20000098 	.word	0x20000098
	...

0800d370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d370:	f3ef 8009 	mrs	r0, PSP
 800d374:	f3bf 8f6f 	isb	sy
 800d378:	4b15      	ldr	r3, [pc, #84]	; (800d3d0 <pxCurrentTCBConst>)
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	f01e 0f10 	tst.w	lr, #16
 800d380:	bf08      	it	eq
 800d382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38a:	6010      	str	r0, [r2, #0]
 800d38c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d390:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d394:	f380 8811 	msr	BASEPRI, r0
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f7fe ffb8 	bl	800c314 <vTaskSwitchContext>
 800d3a4:	f04f 0000 	mov.w	r0, #0
 800d3a8:	f380 8811 	msr	BASEPRI, r0
 800d3ac:	bc09      	pop	{r0, r3}
 800d3ae:	6819      	ldr	r1, [r3, #0]
 800d3b0:	6808      	ldr	r0, [r1, #0]
 800d3b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b6:	f01e 0f10 	tst.w	lr, #16
 800d3ba:	bf08      	it	eq
 800d3bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d3c0:	f380 8809 	msr	PSP, r0
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	f3af 8000 	nop.w

0800d3d0 <pxCurrentTCBConst>:
 800d3d0:	20000e24 	.word	0x20000e24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d3d4:	bf00      	nop
 800d3d6:	bf00      	nop

0800d3d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	607b      	str	r3, [r7, #4]
}
 800d3f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3f2:	f7fe fed5 	bl	800c1a0 <xTaskIncrementTick>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d003      	beq.n	800d404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3fc:	4b06      	ldr	r3, [pc, #24]	; (800d418 <xPortSysTickHandler+0x40>)
 800d3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d402:	601a      	str	r2, [r3, #0]
 800d404:	2300      	movs	r3, #0
 800d406:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	f383 8811 	msr	BASEPRI, r3
}
 800d40e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d410:	bf00      	nop
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	e000ed04 	.word	0xe000ed04

0800d41c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d41c:	b480      	push	{r7}
 800d41e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d420:	4b0b      	ldr	r3, [pc, #44]	; (800d450 <vPortSetupTimerInterrupt+0x34>)
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d426:	4b0b      	ldr	r3, [pc, #44]	; (800d454 <vPortSetupTimerInterrupt+0x38>)
 800d428:	2200      	movs	r2, #0
 800d42a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d42c:	4b0a      	ldr	r3, [pc, #40]	; (800d458 <vPortSetupTimerInterrupt+0x3c>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a0a      	ldr	r2, [pc, #40]	; (800d45c <vPortSetupTimerInterrupt+0x40>)
 800d432:	fba2 2303 	umull	r2, r3, r2, r3
 800d436:	099b      	lsrs	r3, r3, #6
 800d438:	4a09      	ldr	r2, [pc, #36]	; (800d460 <vPortSetupTimerInterrupt+0x44>)
 800d43a:	3b01      	subs	r3, #1
 800d43c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d43e:	4b04      	ldr	r3, [pc, #16]	; (800d450 <vPortSetupTimerInterrupt+0x34>)
 800d440:	2207      	movs	r2, #7
 800d442:	601a      	str	r2, [r3, #0]
}
 800d444:	bf00      	nop
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	e000e010 	.word	0xe000e010
 800d454:	e000e018 	.word	0xe000e018
 800d458:	20000000 	.word	0x20000000
 800d45c:	10624dd3 	.word	0x10624dd3
 800d460:	e000e014 	.word	0xe000e014

0800d464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d474 <vPortEnableVFP+0x10>
 800d468:	6801      	ldr	r1, [r0, #0]
 800d46a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d46e:	6001      	str	r1, [r0, #0]
 800d470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d472:	bf00      	nop
 800d474:	e000ed88 	.word	0xe000ed88

0800d478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d47e:	f3ef 8305 	mrs	r3, IPSR
 800d482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2b0f      	cmp	r3, #15
 800d488:	d914      	bls.n	800d4b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d48a:	4a17      	ldr	r2, [pc, #92]	; (800d4e8 <vPortValidateInterruptPriority+0x70>)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	4413      	add	r3, r2
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d494:	4b15      	ldr	r3, [pc, #84]	; (800d4ec <vPortValidateInterruptPriority+0x74>)
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	7afa      	ldrb	r2, [r7, #11]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d20a      	bcs.n	800d4b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	607b      	str	r3, [r7, #4]
}
 800d4b0:	bf00      	nop
 800d4b2:	e7fe      	b.n	800d4b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d4b4:	4b0e      	ldr	r3, [pc, #56]	; (800d4f0 <vPortValidateInterruptPriority+0x78>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d4bc:	4b0d      	ldr	r3, [pc, #52]	; (800d4f4 <vPortValidateInterruptPriority+0x7c>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d90a      	bls.n	800d4da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	603b      	str	r3, [r7, #0]
}
 800d4d6:	bf00      	nop
 800d4d8:	e7fe      	b.n	800d4d8 <vPortValidateInterruptPriority+0x60>
	}
 800d4da:	bf00      	nop
 800d4dc:	3714      	adds	r7, #20
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	e000e3f0 	.word	0xe000e3f0
 800d4ec:	20001450 	.word	0x20001450
 800d4f0:	e000ed0c 	.word	0xe000ed0c
 800d4f4:	20001454 	.word	0x20001454

0800d4f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b08a      	sub	sp, #40	; 0x28
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d500:	2300      	movs	r3, #0
 800d502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d504:	f7fe fd90 	bl	800c028 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d508:	4b5b      	ldr	r3, [pc, #364]	; (800d678 <pvPortMalloc+0x180>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d101      	bne.n	800d514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d510:	f000 f920 	bl	800d754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d514:	4b59      	ldr	r3, [pc, #356]	; (800d67c <pvPortMalloc+0x184>)
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4013      	ands	r3, r2
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f040 8093 	bne.w	800d648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d01d      	beq.n	800d564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d528:	2208      	movs	r2, #8
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4413      	add	r3, r2
 800d52e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f003 0307 	and.w	r3, r3, #7
 800d536:	2b00      	cmp	r3, #0
 800d538:	d014      	beq.n	800d564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f023 0307 	bic.w	r3, r3, #7
 800d540:	3308      	adds	r3, #8
 800d542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f003 0307 	and.w	r3, r3, #7
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00a      	beq.n	800d564 <pvPortMalloc+0x6c>
	__asm volatile
 800d54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d552:	f383 8811 	msr	BASEPRI, r3
 800d556:	f3bf 8f6f 	isb	sy
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	617b      	str	r3, [r7, #20]
}
 800d560:	bf00      	nop
 800d562:	e7fe      	b.n	800d562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d06e      	beq.n	800d648 <pvPortMalloc+0x150>
 800d56a:	4b45      	ldr	r3, [pc, #276]	; (800d680 <pvPortMalloc+0x188>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	429a      	cmp	r2, r3
 800d572:	d869      	bhi.n	800d648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d574:	4b43      	ldr	r3, [pc, #268]	; (800d684 <pvPortMalloc+0x18c>)
 800d576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d578:	4b42      	ldr	r3, [pc, #264]	; (800d684 <pvPortMalloc+0x18c>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d57e:	e004      	b.n	800d58a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	429a      	cmp	r2, r3
 800d592:	d903      	bls.n	800d59c <pvPortMalloc+0xa4>
 800d594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1f1      	bne.n	800d580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d59c:	4b36      	ldr	r3, [pc, #216]	; (800d678 <pvPortMalloc+0x180>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d050      	beq.n	800d648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d5a6:	6a3b      	ldr	r3, [r7, #32]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2208      	movs	r2, #8
 800d5ac:	4413      	add	r3, r2
 800d5ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	6a3b      	ldr	r3, [r7, #32]
 800d5b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	685a      	ldr	r2, [r3, #4]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	1ad2      	subs	r2, r2, r3
 800d5c0:	2308      	movs	r3, #8
 800d5c2:	005b      	lsls	r3, r3, #1
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d91f      	bls.n	800d608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	f003 0307 	and.w	r3, r3, #7
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00a      	beq.n	800d5f0 <pvPortMalloc+0xf8>
	__asm volatile
 800d5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5de:	f383 8811 	msr	BASEPRI, r3
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	613b      	str	r3, [r7, #16]
}
 800d5ec:	bf00      	nop
 800d5ee:	e7fe      	b.n	800d5ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f2:	685a      	ldr	r2, [r3, #4]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	1ad2      	subs	r2, r2, r3
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d602:	69b8      	ldr	r0, [r7, #24]
 800d604:	f000 f908 	bl	800d818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d608:	4b1d      	ldr	r3, [pc, #116]	; (800d680 <pvPortMalloc+0x188>)
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	1ad3      	subs	r3, r2, r3
 800d612:	4a1b      	ldr	r2, [pc, #108]	; (800d680 <pvPortMalloc+0x188>)
 800d614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d616:	4b1a      	ldr	r3, [pc, #104]	; (800d680 <pvPortMalloc+0x188>)
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	4b1b      	ldr	r3, [pc, #108]	; (800d688 <pvPortMalloc+0x190>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d203      	bcs.n	800d62a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d622:	4b17      	ldr	r3, [pc, #92]	; (800d680 <pvPortMalloc+0x188>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a18      	ldr	r2, [pc, #96]	; (800d688 <pvPortMalloc+0x190>)
 800d628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	685a      	ldr	r2, [r3, #4]
 800d62e:	4b13      	ldr	r3, [pc, #76]	; (800d67c <pvPortMalloc+0x184>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	431a      	orrs	r2, r3
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63a:	2200      	movs	r2, #0
 800d63c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d63e:	4b13      	ldr	r3, [pc, #76]	; (800d68c <pvPortMalloc+0x194>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	3301      	adds	r3, #1
 800d644:	4a11      	ldr	r2, [pc, #68]	; (800d68c <pvPortMalloc+0x194>)
 800d646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d648:	f7fe fcfc 	bl	800c044 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	f003 0307 	and.w	r3, r3, #7
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00a      	beq.n	800d66c <pvPortMalloc+0x174>
	__asm volatile
 800d656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65a:	f383 8811 	msr	BASEPRI, r3
 800d65e:	f3bf 8f6f 	isb	sy
 800d662:	f3bf 8f4f 	dsb	sy
 800d666:	60fb      	str	r3, [r7, #12]
}
 800d668:	bf00      	nop
 800d66a:	e7fe      	b.n	800d66a <pvPortMalloc+0x172>
	return pvReturn;
 800d66c:	69fb      	ldr	r3, [r7, #28]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3728      	adds	r7, #40	; 0x28
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	20005060 	.word	0x20005060
 800d67c:	20005074 	.word	0x20005074
 800d680:	20005064 	.word	0x20005064
 800d684:	20005058 	.word	0x20005058
 800d688:	20005068 	.word	0x20005068
 800d68c:	2000506c 	.word	0x2000506c

0800d690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d04d      	beq.n	800d73e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d6a2:	2308      	movs	r3, #8
 800d6a4:	425b      	negs	r3, r3
 800d6a6:	697a      	ldr	r2, [r7, #20]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	685a      	ldr	r2, [r3, #4]
 800d6b4:	4b24      	ldr	r3, [pc, #144]	; (800d748 <vPortFree+0xb8>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10a      	bne.n	800d6d4 <vPortFree+0x44>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	60fb      	str	r3, [r7, #12]
}
 800d6d0:	bf00      	nop
 800d6d2:	e7fe      	b.n	800d6d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00a      	beq.n	800d6f2 <vPortFree+0x62>
	__asm volatile
 800d6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e0:	f383 8811 	msr	BASEPRI, r3
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	60bb      	str	r3, [r7, #8]
}
 800d6ee:	bf00      	nop
 800d6f0:	e7fe      	b.n	800d6f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	685a      	ldr	r2, [r3, #4]
 800d6f6:	4b14      	ldr	r3, [pc, #80]	; (800d748 <vPortFree+0xb8>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4013      	ands	r3, r2
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d01e      	beq.n	800d73e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d11a      	bne.n	800d73e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	4b0e      	ldr	r3, [pc, #56]	; (800d748 <vPortFree+0xb8>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	43db      	mvns	r3, r3
 800d712:	401a      	ands	r2, r3
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d718:	f7fe fc86 	bl	800c028 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	685a      	ldr	r2, [r3, #4]
 800d720:	4b0a      	ldr	r3, [pc, #40]	; (800d74c <vPortFree+0xbc>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4413      	add	r3, r2
 800d726:	4a09      	ldr	r2, [pc, #36]	; (800d74c <vPortFree+0xbc>)
 800d728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d72a:	6938      	ldr	r0, [r7, #16]
 800d72c:	f000 f874 	bl	800d818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d730:	4b07      	ldr	r3, [pc, #28]	; (800d750 <vPortFree+0xc0>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	3301      	adds	r3, #1
 800d736:	4a06      	ldr	r2, [pc, #24]	; (800d750 <vPortFree+0xc0>)
 800d738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d73a:	f7fe fc83 	bl	800c044 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d73e:	bf00      	nop
 800d740:	3718      	adds	r7, #24
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	20005074 	.word	0x20005074
 800d74c:	20005064 	.word	0x20005064
 800d750:	20005070 	.word	0x20005070

0800d754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d75a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d75e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d760:	4b27      	ldr	r3, [pc, #156]	; (800d800 <prvHeapInit+0xac>)
 800d762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f003 0307 	and.w	r3, r3, #7
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00c      	beq.n	800d788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	3307      	adds	r3, #7
 800d772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f023 0307 	bic.w	r3, r3, #7
 800d77a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	4a1f      	ldr	r2, [pc, #124]	; (800d800 <prvHeapInit+0xac>)
 800d784:	4413      	add	r3, r2
 800d786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d78c:	4a1d      	ldr	r2, [pc, #116]	; (800d804 <prvHeapInit+0xb0>)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d792:	4b1c      	ldr	r3, [pc, #112]	; (800d804 <prvHeapInit+0xb0>)
 800d794:	2200      	movs	r2, #0
 800d796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	68ba      	ldr	r2, [r7, #8]
 800d79c:	4413      	add	r3, r2
 800d79e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d7a0:	2208      	movs	r2, #8
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	1a9b      	subs	r3, r3, r2
 800d7a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f023 0307 	bic.w	r3, r3, #7
 800d7ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	4a15      	ldr	r2, [pc, #84]	; (800d808 <prvHeapInit+0xb4>)
 800d7b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d7b6:	4b14      	ldr	r3, [pc, #80]	; (800d808 <prvHeapInit+0xb4>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d7be:	4b12      	ldr	r3, [pc, #72]	; (800d808 <prvHeapInit+0xb4>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	1ad2      	subs	r2, r2, r3
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7d4:	4b0c      	ldr	r3, [pc, #48]	; (800d808 <prvHeapInit+0xb4>)
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	4a0a      	ldr	r2, [pc, #40]	; (800d80c <prvHeapInit+0xb8>)
 800d7e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	4a09      	ldr	r2, [pc, #36]	; (800d810 <prvHeapInit+0xbc>)
 800d7ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7ec:	4b09      	ldr	r3, [pc, #36]	; (800d814 <prvHeapInit+0xc0>)
 800d7ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d7f2:	601a      	str	r2, [r3, #0]
}
 800d7f4:	bf00      	nop
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr
 800d800:	20001458 	.word	0x20001458
 800d804:	20005058 	.word	0x20005058
 800d808:	20005060 	.word	0x20005060
 800d80c:	20005068 	.word	0x20005068
 800d810:	20005064 	.word	0x20005064
 800d814:	20005074 	.word	0x20005074

0800d818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d820:	4b28      	ldr	r3, [pc, #160]	; (800d8c4 <prvInsertBlockIntoFreeList+0xac>)
 800d822:	60fb      	str	r3, [r7, #12]
 800d824:	e002      	b.n	800d82c <prvInsertBlockIntoFreeList+0x14>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	429a      	cmp	r2, r3
 800d834:	d8f7      	bhi.n	800d826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	68ba      	ldr	r2, [r7, #8]
 800d840:	4413      	add	r3, r2
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	429a      	cmp	r2, r3
 800d846:	d108      	bne.n	800d85a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	685a      	ldr	r2, [r3, #4]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	441a      	add	r2, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	68ba      	ldr	r2, [r7, #8]
 800d864:	441a      	add	r2, r3
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d118      	bne.n	800d8a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	4b15      	ldr	r3, [pc, #84]	; (800d8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	429a      	cmp	r2, r3
 800d878:	d00d      	beq.n	800d896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	685a      	ldr	r2, [r3, #4]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	441a      	add	r2, r3
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	601a      	str	r2, [r3, #0]
 800d894:	e008      	b.n	800d8a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d896:	4b0c      	ldr	r3, [pc, #48]	; (800d8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	601a      	str	r2, [r3, #0]
 800d89e:	e003      	b.n	800d8a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d8a8:	68fa      	ldr	r2, [r7, #12]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d002      	beq.n	800d8b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8b6:	bf00      	nop
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	20005058 	.word	0x20005058
 800d8c8:	20005060 	.word	0x20005060

0800d8cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	4912      	ldr	r1, [pc, #72]	; (800d91c <MX_USB_DEVICE_Init+0x50>)
 800d8d4:	4812      	ldr	r0, [pc, #72]	; (800d920 <MX_USB_DEVICE_Init+0x54>)
 800d8d6:	f7fb fc59 	bl	800918c <USBD_Init>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d001      	beq.n	800d8e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d8e0:	f7f3 fc7c 	bl	80011dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d8e4:	490f      	ldr	r1, [pc, #60]	; (800d924 <MX_USB_DEVICE_Init+0x58>)
 800d8e6:	480e      	ldr	r0, [pc, #56]	; (800d920 <MX_USB_DEVICE_Init+0x54>)
 800d8e8:	f7fb fc80 	bl	80091ec <USBD_RegisterClass>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d001      	beq.n	800d8f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d8f2:	f7f3 fc73 	bl	80011dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d8f6:	490c      	ldr	r1, [pc, #48]	; (800d928 <MX_USB_DEVICE_Init+0x5c>)
 800d8f8:	4809      	ldr	r0, [pc, #36]	; (800d920 <MX_USB_DEVICE_Init+0x54>)
 800d8fa:	f7fb fbb7 	bl	800906c <USBD_CDC_RegisterInterface>
 800d8fe:	4603      	mov	r3, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d001      	beq.n	800d908 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d904:	f7f3 fc6a 	bl	80011dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d908:	4805      	ldr	r0, [pc, #20]	; (800d920 <MX_USB_DEVICE_Init+0x54>)
 800d90a:	f7fb fca5 	bl	8009258 <USBD_Start>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d001      	beq.n	800d918 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d914:	f7f3 fc62 	bl	80011dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d918:	bf00      	nop
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	200000b0 	.word	0x200000b0
 800d920:	20005078 	.word	0x20005078
 800d924:	20000018 	.word	0x20000018
 800d928:	2000009c 	.word	0x2000009c

0800d92c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d930:	2200      	movs	r2, #0
 800d932:	4905      	ldr	r1, [pc, #20]	; (800d948 <CDC_Init_FS+0x1c>)
 800d934:	4805      	ldr	r0, [pc, #20]	; (800d94c <CDC_Init_FS+0x20>)
 800d936:	f7fb fbb3 	bl	80090a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d93a:	4905      	ldr	r1, [pc, #20]	; (800d950 <CDC_Init_FS+0x24>)
 800d93c:	4803      	ldr	r0, [pc, #12]	; (800d94c <CDC_Init_FS+0x20>)
 800d93e:	f7fb fbd1 	bl	80090e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d942:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d944:	4618      	mov	r0, r3
 800d946:	bd80      	pop	{r7, pc}
 800d948:	20005b54 	.word	0x20005b54
 800d94c:	20005078 	.word	0x20005078
 800d950:	20005354 	.word	0x20005354

0800d954 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d954:	b480      	push	{r7}
 800d956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d958:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 800d96a:	4603      	mov	r3, r0
 800d96c:	6039      	str	r1, [r7, #0]
 800d96e:	71fb      	strb	r3, [r7, #7]
 800d970:	4613      	mov	r3, r2
 800d972:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d974:	79fb      	ldrb	r3, [r7, #7]
 800d976:	2b23      	cmp	r3, #35	; 0x23
 800d978:	f200 808c 	bhi.w	800da94 <CDC_Control_FS+0x130>
 800d97c:	a201      	add	r2, pc, #4	; (adr r2, 800d984 <CDC_Control_FS+0x20>)
 800d97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d982:	bf00      	nop
 800d984:	0800da95 	.word	0x0800da95
 800d988:	0800da95 	.word	0x0800da95
 800d98c:	0800da95 	.word	0x0800da95
 800d990:	0800da95 	.word	0x0800da95
 800d994:	0800da95 	.word	0x0800da95
 800d998:	0800da95 	.word	0x0800da95
 800d99c:	0800da95 	.word	0x0800da95
 800d9a0:	0800da95 	.word	0x0800da95
 800d9a4:	0800da95 	.word	0x0800da95
 800d9a8:	0800da95 	.word	0x0800da95
 800d9ac:	0800da95 	.word	0x0800da95
 800d9b0:	0800da95 	.word	0x0800da95
 800d9b4:	0800da95 	.word	0x0800da95
 800d9b8:	0800da95 	.word	0x0800da95
 800d9bc:	0800da95 	.word	0x0800da95
 800d9c0:	0800da95 	.word	0x0800da95
 800d9c4:	0800da95 	.word	0x0800da95
 800d9c8:	0800da95 	.word	0x0800da95
 800d9cc:	0800da95 	.word	0x0800da95
 800d9d0:	0800da95 	.word	0x0800da95
 800d9d4:	0800da95 	.word	0x0800da95
 800d9d8:	0800da95 	.word	0x0800da95
 800d9dc:	0800da95 	.word	0x0800da95
 800d9e0:	0800da95 	.word	0x0800da95
 800d9e4:	0800da95 	.word	0x0800da95
 800d9e8:	0800da95 	.word	0x0800da95
 800d9ec:	0800da95 	.word	0x0800da95
 800d9f0:	0800da95 	.word	0x0800da95
 800d9f4:	0800da95 	.word	0x0800da95
 800d9f8:	0800da95 	.word	0x0800da95
 800d9fc:	0800da95 	.word	0x0800da95
 800da00:	0800da95 	.word	0x0800da95
 800da04:	0800da15 	.word	0x0800da15
 800da08:	0800da4f 	.word	0x0800da4f
 800da0c:	0800da95 	.word	0x0800da95
 800da10:	0800da95 	.word	0x0800da95
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	usbVcpParameters[0] = pbuf[0];
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	781a      	ldrb	r2, [r3, #0]
 800da18:	4b22      	ldr	r3, [pc, #136]	; (800daa4 <CDC_Control_FS+0x140>)
 800da1a:	701a      	strb	r2, [r3, #0]
    	usbVcpParameters[1] = pbuf[1];
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	785a      	ldrb	r2, [r3, #1]
 800da20:	4b20      	ldr	r3, [pc, #128]	; (800daa4 <CDC_Control_FS+0x140>)
 800da22:	705a      	strb	r2, [r3, #1]
    	usbVcpParameters[2] = pbuf[2];
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	789a      	ldrb	r2, [r3, #2]
 800da28:	4b1e      	ldr	r3, [pc, #120]	; (800daa4 <CDC_Control_FS+0x140>)
 800da2a:	709a      	strb	r2, [r3, #2]
    	usbVcpParameters[3] = pbuf[3];
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	78da      	ldrb	r2, [r3, #3]
 800da30:	4b1c      	ldr	r3, [pc, #112]	; (800daa4 <CDC_Control_FS+0x140>)
 800da32:	70da      	strb	r2, [r3, #3]
    	usbVcpParameters[4] = pbuf[4];
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	791a      	ldrb	r2, [r3, #4]
 800da38:	4b1a      	ldr	r3, [pc, #104]	; (800daa4 <CDC_Control_FS+0x140>)
 800da3a:	711a      	strb	r2, [r3, #4]
    	usbVcpParameters[5] = pbuf[5];
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	795a      	ldrb	r2, [r3, #5]
 800da40:	4b18      	ldr	r3, [pc, #96]	; (800daa4 <CDC_Control_FS+0x140>)
 800da42:	715a      	strb	r2, [r3, #5]
    	usbVcpParameters[6] = pbuf[6];
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	799a      	ldrb	r2, [r3, #6]
 800da48:	4b16      	ldr	r3, [pc, #88]	; (800daa4 <CDC_Control_FS+0x140>)
 800da4a:	719a      	strb	r2, [r3, #6]

    break;
 800da4c:	e023      	b.n	800da96 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = usbVcpParameters[0];
 800da4e:	4b15      	ldr	r3, [pc, #84]	; (800daa4 <CDC_Control_FS+0x140>)
 800da50:	781a      	ldrb	r2, [r3, #0]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = usbVcpParameters[1];
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	3301      	adds	r3, #1
 800da5a:	4a12      	ldr	r2, [pc, #72]	; (800daa4 <CDC_Control_FS+0x140>)
 800da5c:	7852      	ldrb	r2, [r2, #1]
 800da5e:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = usbVcpParameters[2];
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	3302      	adds	r3, #2
 800da64:	4a0f      	ldr	r2, [pc, #60]	; (800daa4 <CDC_Control_FS+0x140>)
 800da66:	7892      	ldrb	r2, [r2, #2]
 800da68:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = usbVcpParameters[3];
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	3303      	adds	r3, #3
 800da6e:	4a0d      	ldr	r2, [pc, #52]	; (800daa4 <CDC_Control_FS+0x140>)
 800da70:	78d2      	ldrb	r2, [r2, #3]
 800da72:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = usbVcpParameters[4];
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	3304      	adds	r3, #4
 800da78:	4a0a      	ldr	r2, [pc, #40]	; (800daa4 <CDC_Control_FS+0x140>)
 800da7a:	7912      	ldrb	r2, [r2, #4]
 800da7c:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = usbVcpParameters[5];
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	3305      	adds	r3, #5
 800da82:	4a08      	ldr	r2, [pc, #32]	; (800daa4 <CDC_Control_FS+0x140>)
 800da84:	7952      	ldrb	r2, [r2, #5]
 800da86:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = usbVcpParameters[6];
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	3306      	adds	r3, #6
 800da8c:	4a05      	ldr	r2, [pc, #20]	; (800daa4 <CDC_Control_FS+0x140>)
 800da8e:	7992      	ldrb	r2, [r2, #6]
 800da90:	701a      	strb	r2, [r3, #0]

    break;
 800da92:	e000      	b.n	800da96 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800da94:	bf00      	nop
  }

  return (USBD_OK);
 800da96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800da98:	4618      	mov	r0, r3
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr
 800daa4:	20000638 	.word	0x20000638

0800daa8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dab2:	6879      	ldr	r1, [r7, #4]
 800dab4:	4805      	ldr	r0, [pc, #20]	; (800dacc <CDC_Receive_FS+0x24>)
 800dab6:	f7fb fb15 	bl	80090e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800daba:	4804      	ldr	r0, [pc, #16]	; (800dacc <CDC_Receive_FS+0x24>)
 800dabc:	f7fb fb30 	bl	8009120 <USBD_CDC_ReceivePacket>

//  PDM_USB_Process(Buf, *Len);

  return (USBD_OK);
 800dac0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	20005078 	.word	0x20005078

0800dad0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b087      	sub	sp, #28
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	4613      	mov	r3, r2
 800dadc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	371c      	adds	r7, #28
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr
	...

0800daf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	4603      	mov	r3, r0
 800dafc:	6039      	str	r1, [r7, #0]
 800dafe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	2212      	movs	r2, #18
 800db04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800db06:	4b03      	ldr	r3, [pc, #12]	; (800db14 <USBD_FS_DeviceDescriptor+0x20>)
}
 800db08:	4618      	mov	r0, r3
 800db0a:	370c      	adds	r7, #12
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr
 800db14:	200000cc 	.word	0x200000cc

0800db18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	4603      	mov	r3, r0
 800db20:	6039      	str	r1, [r7, #0]
 800db22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	2204      	movs	r2, #4
 800db28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db2a:	4b03      	ldr	r3, [pc, #12]	; (800db38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr
 800db38:	200000e0 	.word	0x200000e0

0800db3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	4603      	mov	r3, r0
 800db44:	6039      	str	r1, [r7, #0]
 800db46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db48:	79fb      	ldrb	r3, [r7, #7]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d105      	bne.n	800db5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800db4e:	683a      	ldr	r2, [r7, #0]
 800db50:	4907      	ldr	r1, [pc, #28]	; (800db70 <USBD_FS_ProductStrDescriptor+0x34>)
 800db52:	4808      	ldr	r0, [pc, #32]	; (800db74 <USBD_FS_ProductStrDescriptor+0x38>)
 800db54:	f7fc fd2c 	bl	800a5b0 <USBD_GetString>
 800db58:	e004      	b.n	800db64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	4904      	ldr	r1, [pc, #16]	; (800db70 <USBD_FS_ProductStrDescriptor+0x34>)
 800db5e:	4805      	ldr	r0, [pc, #20]	; (800db74 <USBD_FS_ProductStrDescriptor+0x38>)
 800db60:	f7fc fd26 	bl	800a5b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db64:	4b02      	ldr	r3, [pc, #8]	; (800db70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800db66:	4618      	mov	r0, r3
 800db68:	3708      	adds	r7, #8
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	20006354 	.word	0x20006354
 800db74:	0800e5d4 	.word	0x0800e5d4

0800db78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	4603      	mov	r3, r0
 800db80:	6039      	str	r1, [r7, #0]
 800db82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800db84:	683a      	ldr	r2, [r7, #0]
 800db86:	4904      	ldr	r1, [pc, #16]	; (800db98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800db88:	4804      	ldr	r0, [pc, #16]	; (800db9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800db8a:	f7fc fd11 	bl	800a5b0 <USBD_GetString>
  return USBD_StrDesc;
 800db8e:	4b02      	ldr	r3, [pc, #8]	; (800db98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800db90:	4618      	mov	r0, r3
 800db92:	3708      	adds	r7, #8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	20006354 	.word	0x20006354
 800db9c:	0800e5ec 	.word	0x0800e5ec

0800dba0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	4603      	mov	r3, r0
 800dba8:	6039      	str	r1, [r7, #0]
 800dbaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	221a      	movs	r2, #26
 800dbb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dbb2:	f000 f843 	bl	800dc3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dbb6:	4b02      	ldr	r3, [pc, #8]	; (800dbc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3708      	adds	r7, #8
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	200000e4 	.word	0x200000e4

0800dbc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	4603      	mov	r3, r0
 800dbcc:	6039      	str	r1, [r7, #0]
 800dbce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dbd0:	79fb      	ldrb	r3, [r7, #7]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d105      	bne.n	800dbe2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dbd6:	683a      	ldr	r2, [r7, #0]
 800dbd8:	4907      	ldr	r1, [pc, #28]	; (800dbf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dbda:	4808      	ldr	r0, [pc, #32]	; (800dbfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800dbdc:	f7fc fce8 	bl	800a5b0 <USBD_GetString>
 800dbe0:	e004      	b.n	800dbec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dbe2:	683a      	ldr	r2, [r7, #0]
 800dbe4:	4904      	ldr	r1, [pc, #16]	; (800dbf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dbe6:	4805      	ldr	r0, [pc, #20]	; (800dbfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800dbe8:	f7fc fce2 	bl	800a5b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbec:	4b02      	ldr	r3, [pc, #8]	; (800dbf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	20006354 	.word	0x20006354
 800dbfc:	0800e600 	.word	0x0800e600

0800dc00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	4603      	mov	r3, r0
 800dc08:	6039      	str	r1, [r7, #0]
 800dc0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc0c:	79fb      	ldrb	r3, [r7, #7]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d105      	bne.n	800dc1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	4907      	ldr	r1, [pc, #28]	; (800dc34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc16:	4808      	ldr	r0, [pc, #32]	; (800dc38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc18:	f7fc fcca 	bl	800a5b0 <USBD_GetString>
 800dc1c:	e004      	b.n	800dc28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc1e:	683a      	ldr	r2, [r7, #0]
 800dc20:	4904      	ldr	r1, [pc, #16]	; (800dc34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc22:	4805      	ldr	r0, [pc, #20]	; (800dc38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc24:	f7fc fcc4 	bl	800a5b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc28:	4b02      	ldr	r3, [pc, #8]	; (800dc34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	20006354 	.word	0x20006354
 800dc38:	0800e60c 	.word	0x0800e60c

0800dc3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dc42:	4b0f      	ldr	r3, [pc, #60]	; (800dc80 <Get_SerialNum+0x44>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dc48:	4b0e      	ldr	r3, [pc, #56]	; (800dc84 <Get_SerialNum+0x48>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dc4e:	4b0e      	ldr	r3, [pc, #56]	; (800dc88 <Get_SerialNum+0x4c>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	4413      	add	r3, r2
 800dc5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d009      	beq.n	800dc76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dc62:	2208      	movs	r2, #8
 800dc64:	4909      	ldr	r1, [pc, #36]	; (800dc8c <Get_SerialNum+0x50>)
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f000 f814 	bl	800dc94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dc6c:	2204      	movs	r2, #4
 800dc6e:	4908      	ldr	r1, [pc, #32]	; (800dc90 <Get_SerialNum+0x54>)
 800dc70:	68b8      	ldr	r0, [r7, #8]
 800dc72:	f000 f80f 	bl	800dc94 <IntToUnicode>
  }
}
 800dc76:	bf00      	nop
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	1fff7a10 	.word	0x1fff7a10
 800dc84:	1fff7a14 	.word	0x1fff7a14
 800dc88:	1fff7a18 	.word	0x1fff7a18
 800dc8c:	200000e6 	.word	0x200000e6
 800dc90:	200000f6 	.word	0x200000f6

0800dc94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b087      	sub	sp, #28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dca6:	2300      	movs	r3, #0
 800dca8:	75fb      	strb	r3, [r7, #23]
 800dcaa:	e027      	b.n	800dcfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	0f1b      	lsrs	r3, r3, #28
 800dcb0:	2b09      	cmp	r3, #9
 800dcb2:	d80b      	bhi.n	800dccc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	0f1b      	lsrs	r3, r3, #28
 800dcb8:	b2da      	uxtb	r2, r3
 800dcba:	7dfb      	ldrb	r3, [r7, #23]
 800dcbc:	005b      	lsls	r3, r3, #1
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	440b      	add	r3, r1
 800dcc4:	3230      	adds	r2, #48	; 0x30
 800dcc6:	b2d2      	uxtb	r2, r2
 800dcc8:	701a      	strb	r2, [r3, #0]
 800dcca:	e00a      	b.n	800dce2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	0f1b      	lsrs	r3, r3, #28
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	7dfb      	ldrb	r3, [r7, #23]
 800dcd4:	005b      	lsls	r3, r3, #1
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	440b      	add	r3, r1
 800dcdc:	3237      	adds	r2, #55	; 0x37
 800dcde:	b2d2      	uxtb	r2, r2
 800dce0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	011b      	lsls	r3, r3, #4
 800dce6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dce8:	7dfb      	ldrb	r3, [r7, #23]
 800dcea:	005b      	lsls	r3, r3, #1
 800dcec:	3301      	adds	r3, #1
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dcf6:	7dfb      	ldrb	r3, [r7, #23]
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	75fb      	strb	r3, [r7, #23]
 800dcfc:	7dfa      	ldrb	r2, [r7, #23]
 800dcfe:	79fb      	ldrb	r3, [r7, #7]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d3d3      	bcc.n	800dcac <IntToUnicode+0x18>
  }
}
 800dd04:	bf00      	nop
 800dd06:	bf00      	nop
 800dd08:	371c      	adds	r7, #28
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr
	...

0800dd14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b0a0      	sub	sp, #128	; 0x80
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800dd20:	2200      	movs	r2, #0
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	605a      	str	r2, [r3, #4]
 800dd26:	609a      	str	r2, [r3, #8]
 800dd28:	60da      	str	r2, [r3, #12]
 800dd2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dd2c:	f107 0310 	add.w	r3, r7, #16
 800dd30:	225c      	movs	r2, #92	; 0x5c
 800dd32:	2100      	movs	r1, #0
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 fb2f 	bl	800e398 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dd42:	d161      	bne.n	800de08 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800dd44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd48:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 800dd4a:	2308      	movs	r3, #8
 800dd4c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800dd4e:	23c0      	movs	r3, #192	; 0xc0
 800dd50:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800dd52:	2302      	movs	r3, #2
 800dd54:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800dd56:	2304      	movs	r3, #4
 800dd58:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800dd5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd62:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dd64:	f107 0310 	add.w	r3, r7, #16
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7f7 f97b 	bl	8005064 <HAL_RCCEx_PeriphCLKConfig>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d001      	beq.n	800dd78 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 800dd74:	f7f3 fa32 	bl	80011dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd78:	2300      	movs	r3, #0
 800dd7a:	60fb      	str	r3, [r7, #12]
 800dd7c:	4b24      	ldr	r3, [pc, #144]	; (800de10 <HAL_PCD_MspInit+0xfc>)
 800dd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd80:	4a23      	ldr	r2, [pc, #140]	; (800de10 <HAL_PCD_MspInit+0xfc>)
 800dd82:	f043 0301 	orr.w	r3, r3, #1
 800dd86:	6313      	str	r3, [r2, #48]	; 0x30
 800dd88:	4b21      	ldr	r3, [pc, #132]	; (800de10 <HAL_PCD_MspInit+0xfc>)
 800dd8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	60fb      	str	r3, [r7, #12]
 800dd92:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dd94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd98:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dda2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800dda6:	4619      	mov	r1, r3
 800dda8:	481a      	ldr	r0, [pc, #104]	; (800de14 <HAL_PCD_MspInit+0x100>)
 800ddaa:	f7f5 f9df 	bl	800316c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ddae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ddb2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddb4:	2302      	movs	r3, #2
 800ddb6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ddbc:	2303      	movs	r3, #3
 800ddbe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ddc0:	230a      	movs	r3, #10
 800ddc2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ddc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ddc8:	4619      	mov	r1, r3
 800ddca:	4812      	ldr	r0, [pc, #72]	; (800de14 <HAL_PCD_MspInit+0x100>)
 800ddcc:	f7f5 f9ce 	bl	800316c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ddd0:	4b0f      	ldr	r3, [pc, #60]	; (800de10 <HAL_PCD_MspInit+0xfc>)
 800ddd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddd4:	4a0e      	ldr	r2, [pc, #56]	; (800de10 <HAL_PCD_MspInit+0xfc>)
 800ddd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddda:	6353      	str	r3, [r2, #52]	; 0x34
 800dddc:	2300      	movs	r3, #0
 800ddde:	60bb      	str	r3, [r7, #8]
 800dde0:	4b0b      	ldr	r3, [pc, #44]	; (800de10 <HAL_PCD_MspInit+0xfc>)
 800dde2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dde4:	4a0a      	ldr	r2, [pc, #40]	; (800de10 <HAL_PCD_MspInit+0xfc>)
 800dde6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ddea:	6453      	str	r3, [r2, #68]	; 0x44
 800ddec:	4b08      	ldr	r3, [pc, #32]	; (800de10 <HAL_PCD_MspInit+0xfc>)
 800ddee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddf4:	60bb      	str	r3, [r7, #8]
 800ddf6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	2105      	movs	r1, #5
 800ddfc:	2043      	movs	r0, #67	; 0x43
 800ddfe:	f7f4 fe85 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800de02:	2043      	movs	r0, #67	; 0x43
 800de04:	f7f4 fe9e 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800de08:	bf00      	nop
 800de0a:	3780      	adds	r7, #128	; 0x80
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	40023800 	.word	0x40023800
 800de14:	40020000 	.word	0x40020000

0800de18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800de2c:	4619      	mov	r1, r3
 800de2e:	4610      	mov	r0, r2
 800de30:	f7fb fa5f 	bl	80092f2 <USBD_LL_SetupStage>
}
 800de34:	bf00      	nop
 800de36:	3708      	adds	r7, #8
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	460b      	mov	r3, r1
 800de46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800de4e:	78fa      	ldrb	r2, [r7, #3]
 800de50:	6879      	ldr	r1, [r7, #4]
 800de52:	4613      	mov	r3, r2
 800de54:	00db      	lsls	r3, r3, #3
 800de56:	4413      	add	r3, r2
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	440b      	add	r3, r1
 800de5c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	78fb      	ldrb	r3, [r7, #3]
 800de64:	4619      	mov	r1, r3
 800de66:	f7fb fa99 	bl	800939c <USBD_LL_DataOutStage>
}
 800de6a:	bf00      	nop
 800de6c:	3708      	adds	r7, #8
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b082      	sub	sp, #8
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	460b      	mov	r3, r1
 800de7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800de84:	78fa      	ldrb	r2, [r7, #3]
 800de86:	6879      	ldr	r1, [r7, #4]
 800de88:	4613      	mov	r3, r2
 800de8a:	00db      	lsls	r3, r3, #3
 800de8c:	4413      	add	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	440b      	add	r3, r1
 800de92:	334c      	adds	r3, #76	; 0x4c
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	78fb      	ldrb	r3, [r7, #3]
 800de98:	4619      	mov	r1, r3
 800de9a:	f7fb fb32 	bl	8009502 <USBD_LL_DataInStage>
}
 800de9e:	bf00      	nop
 800dea0:	3708      	adds	r7, #8
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b082      	sub	sp, #8
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7fb fc66 	bl	8009786 <USBD_LL_SOF>
}
 800deba:	bf00      	nop
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b084      	sub	sp, #16
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800deca:	2301      	movs	r3, #1
 800decc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d102      	bne.n	800dedc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ded6:	2300      	movs	r3, #0
 800ded8:	73fb      	strb	r3, [r7, #15]
 800deda:	e008      	b.n	800deee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	2b02      	cmp	r3, #2
 800dee2:	d102      	bne.n	800deea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dee4:	2301      	movs	r3, #1
 800dee6:	73fb      	strb	r3, [r7, #15]
 800dee8:	e001      	b.n	800deee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800deea:	f7f3 f977 	bl	80011dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800def4:	7bfa      	ldrb	r2, [r7, #15]
 800def6:	4611      	mov	r1, r2
 800def8:	4618      	mov	r0, r3
 800defa:	f7fb fc06 	bl	800970a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df04:	4618      	mov	r0, r3
 800df06:	f7fb fbae 	bl	8009666 <USBD_LL_Reset>
}
 800df0a:	bf00      	nop
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
	...

0800df14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df22:	4618      	mov	r0, r3
 800df24:	f7fb fc01 	bl	800972a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	6812      	ldr	r2, [r2, #0]
 800df36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df3a:	f043 0301 	orr.w	r3, r3, #1
 800df3e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a1b      	ldr	r3, [r3, #32]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d005      	beq.n	800df54 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df48:	4b04      	ldr	r3, [pc, #16]	; (800df5c <HAL_PCD_SuspendCallback+0x48>)
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	4a03      	ldr	r2, [pc, #12]	; (800df5c <HAL_PCD_SuspendCallback+0x48>)
 800df4e:	f043 0306 	orr.w	r3, r3, #6
 800df52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800df54:	bf00      	nop
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	e000ed00 	.word	0xe000ed00

0800df60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df6e:	4618      	mov	r0, r3
 800df70:	f7fb fbf1 	bl	8009756 <USBD_LL_Resume>
}
 800df74:	bf00      	nop
 800df76:	3708      	adds	r7, #8
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	460b      	mov	r3, r1
 800df86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df8e:	78fa      	ldrb	r2, [r7, #3]
 800df90:	4611      	mov	r1, r2
 800df92:	4618      	mov	r0, r3
 800df94:	f7fb fc49 	bl	800982a <USBD_LL_IsoOUTIncomplete>
}
 800df98:	bf00      	nop
 800df9a:	3708      	adds	r7, #8
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dfb2:	78fa      	ldrb	r2, [r7, #3]
 800dfb4:	4611      	mov	r1, r2
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7fb fc05 	bl	80097c6 <USBD_LL_IsoINIncomplete>
}
 800dfbc:	bf00      	nop
 800dfbe:	3708      	adds	r7, #8
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fb fc5b 	bl	800988e <USBD_LL_DevConnected>
}
 800dfd8:	bf00      	nop
 800dfda:	3708      	adds	r7, #8
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fb fc58 	bl	80098a4 <USBD_LL_DevDisconnected>
}
 800dff4:	bf00      	nop
 800dff6:	3708      	adds	r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b082      	sub	sp, #8
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d13c      	bne.n	800e086 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e00c:	4a20      	ldr	r2, [pc, #128]	; (800e090 <USBD_LL_Init+0x94>)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	4a1e      	ldr	r2, [pc, #120]	; (800e090 <USBD_LL_Init+0x94>)
 800e018:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e01c:	4b1c      	ldr	r3, [pc, #112]	; (800e090 <USBD_LL_Init+0x94>)
 800e01e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e022:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e024:	4b1a      	ldr	r3, [pc, #104]	; (800e090 <USBD_LL_Init+0x94>)
 800e026:	2206      	movs	r2, #6
 800e028:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e02a:	4b19      	ldr	r3, [pc, #100]	; (800e090 <USBD_LL_Init+0x94>)
 800e02c:	2202      	movs	r2, #2
 800e02e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e030:	4b17      	ldr	r3, [pc, #92]	; (800e090 <USBD_LL_Init+0x94>)
 800e032:	2200      	movs	r2, #0
 800e034:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e036:	4b16      	ldr	r3, [pc, #88]	; (800e090 <USBD_LL_Init+0x94>)
 800e038:	2202      	movs	r2, #2
 800e03a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e03c:	4b14      	ldr	r3, [pc, #80]	; (800e090 <USBD_LL_Init+0x94>)
 800e03e:	2200      	movs	r2, #0
 800e040:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e042:	4b13      	ldr	r3, [pc, #76]	; (800e090 <USBD_LL_Init+0x94>)
 800e044:	2200      	movs	r2, #0
 800e046:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e048:	4b11      	ldr	r3, [pc, #68]	; (800e090 <USBD_LL_Init+0x94>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e04e:	4b10      	ldr	r3, [pc, #64]	; (800e090 <USBD_LL_Init+0x94>)
 800e050:	2201      	movs	r2, #1
 800e052:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e054:	4b0e      	ldr	r3, [pc, #56]	; (800e090 <USBD_LL_Init+0x94>)
 800e056:	2200      	movs	r2, #0
 800e058:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e05a:	480d      	ldr	r0, [pc, #52]	; (800e090 <USBD_LL_Init+0x94>)
 800e05c:	f7f5 fb90 	bl	8003780 <HAL_PCD_Init>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d001      	beq.n	800e06a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e066:	f7f3 f8b9 	bl	80011dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e06a:	2180      	movs	r1, #128	; 0x80
 800e06c:	4808      	ldr	r0, [pc, #32]	; (800e090 <USBD_LL_Init+0x94>)
 800e06e:	f7f6 fe1c 	bl	8004caa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e072:	2240      	movs	r2, #64	; 0x40
 800e074:	2100      	movs	r1, #0
 800e076:	4806      	ldr	r0, [pc, #24]	; (800e090 <USBD_LL_Init+0x94>)
 800e078:	f7f6 fdd0 	bl	8004c1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e07c:	2280      	movs	r2, #128	; 0x80
 800e07e:	2101      	movs	r1, #1
 800e080:	4803      	ldr	r0, [pc, #12]	; (800e090 <USBD_LL_Init+0x94>)
 800e082:	f7f6 fdcb 	bl	8004c1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e086:	2300      	movs	r3, #0
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	20006554 	.word	0x20006554

0800e094 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7f5 fc8c 	bl	80039c8 <HAL_PCD_Start>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0b4:	7bfb      	ldrb	r3, [r7, #15]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f000 f942 	bl	800e340 <USBD_Get_USB_Status>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3710      	adds	r7, #16
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e0ca:	b580      	push	{r7, lr}
 800e0cc:	b084      	sub	sp, #16
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
 800e0d2:	4608      	mov	r0, r1
 800e0d4:	4611      	mov	r1, r2
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	4603      	mov	r3, r0
 800e0da:	70fb      	strb	r3, [r7, #3]
 800e0dc:	460b      	mov	r3, r1
 800e0de:	70bb      	strb	r3, [r7, #2]
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e0f2:	78bb      	ldrb	r3, [r7, #2]
 800e0f4:	883a      	ldrh	r2, [r7, #0]
 800e0f6:	78f9      	ldrb	r1, [r7, #3]
 800e0f8:	f7f6 f98a 	bl	8004410 <HAL_PCD_EP_Open>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e100:	7bfb      	ldrb	r3, [r7, #15]
 800e102:	4618      	mov	r0, r3
 800e104:	f000 f91c 	bl	800e340 <USBD_Get_USB_Status>
 800e108:	4603      	mov	r3, r0
 800e10a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e10c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b084      	sub	sp, #16
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
 800e11e:	460b      	mov	r3, r1
 800e120:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e122:	2300      	movs	r3, #0
 800e124:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e126:	2300      	movs	r3, #0
 800e128:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e130:	78fa      	ldrb	r2, [r7, #3]
 800e132:	4611      	mov	r1, r2
 800e134:	4618      	mov	r0, r3
 800e136:	f7f6 f9d3 	bl	80044e0 <HAL_PCD_EP_Close>
 800e13a:	4603      	mov	r3, r0
 800e13c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e13e:	7bfb      	ldrb	r3, [r7, #15]
 800e140:	4618      	mov	r0, r3
 800e142:	f000 f8fd 	bl	800e340 <USBD_Get_USB_Status>
 800e146:	4603      	mov	r3, r0
 800e148:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e14a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3710      	adds	r7, #16
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	460b      	mov	r3, r1
 800e15e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e160:	2300      	movs	r3, #0
 800e162:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e164:	2300      	movs	r3, #0
 800e166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e16e:	78fa      	ldrb	r2, [r7, #3]
 800e170:	4611      	mov	r1, r2
 800e172:	4618      	mov	r0, r3
 800e174:	f7f6 faab 	bl	80046ce <HAL_PCD_EP_SetStall>
 800e178:	4603      	mov	r3, r0
 800e17a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e17c:	7bfb      	ldrb	r3, [r7, #15]
 800e17e:	4618      	mov	r0, r3
 800e180:	f000 f8de 	bl	800e340 <USBD_Get_USB_Status>
 800e184:	4603      	mov	r3, r0
 800e186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e188:	7bbb      	ldrb	r3, [r7, #14]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b084      	sub	sp, #16
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
 800e19a:	460b      	mov	r3, r1
 800e19c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1ac:	78fa      	ldrb	r2, [r7, #3]
 800e1ae:	4611      	mov	r1, r2
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7f6 faf0 	bl	8004796 <HAL_PCD_EP_ClrStall>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1ba:	7bfb      	ldrb	r3, [r7, #15]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f000 f8bf 	bl	800e340 <USBD_Get_USB_Status>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b085      	sub	sp, #20
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	460b      	mov	r3, r1
 800e1da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e1e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e1e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	da0b      	bge.n	800e204 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e1ec:	78fb      	ldrb	r3, [r7, #3]
 800e1ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1f2:	68f9      	ldr	r1, [r7, #12]
 800e1f4:	4613      	mov	r3, r2
 800e1f6:	00db      	lsls	r3, r3, #3
 800e1f8:	4413      	add	r3, r2
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	440b      	add	r3, r1
 800e1fe:	333e      	adds	r3, #62	; 0x3e
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	e00b      	b.n	800e21c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e204:	78fb      	ldrb	r3, [r7, #3]
 800e206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e20a:	68f9      	ldr	r1, [r7, #12]
 800e20c:	4613      	mov	r3, r2
 800e20e:	00db      	lsls	r3, r3, #3
 800e210:	4413      	add	r3, r2
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	440b      	add	r3, r1
 800e216:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e21a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3714      	adds	r7, #20
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	460b      	mov	r3, r1
 800e232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e234:	2300      	movs	r3, #0
 800e236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e238:	2300      	movs	r3, #0
 800e23a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e242:	78fa      	ldrb	r2, [r7, #3]
 800e244:	4611      	mov	r1, r2
 800e246:	4618      	mov	r0, r3
 800e248:	f7f6 f8bd 	bl	80043c6 <HAL_PCD_SetAddress>
 800e24c:	4603      	mov	r3, r0
 800e24e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e250:	7bfb      	ldrb	r3, [r7, #15]
 800e252:	4618      	mov	r0, r3
 800e254:	f000 f874 	bl	800e340 <USBD_Get_USB_Status>
 800e258:	4603      	mov	r3, r0
 800e25a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e25c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b086      	sub	sp, #24
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	60f8      	str	r0, [r7, #12]
 800e26e:	607a      	str	r2, [r7, #4]
 800e270:	603b      	str	r3, [r7, #0]
 800e272:	460b      	mov	r3, r1
 800e274:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e276:	2300      	movs	r3, #0
 800e278:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e27a:	2300      	movs	r3, #0
 800e27c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e284:	7af9      	ldrb	r1, [r7, #11]
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	f7f6 f9d6 	bl	800463a <HAL_PCD_EP_Transmit>
 800e28e:	4603      	mov	r3, r0
 800e290:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e292:	7dfb      	ldrb	r3, [r7, #23]
 800e294:	4618      	mov	r0, r3
 800e296:	f000 f853 	bl	800e340 <USBD_Get_USB_Status>
 800e29a:	4603      	mov	r3, r0
 800e29c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e29e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3718      	adds	r7, #24
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b086      	sub	sp, #24
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	607a      	str	r2, [r7, #4]
 800e2b2:	603b      	str	r3, [r7, #0]
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e2c6:	7af9      	ldrb	r1, [r7, #11]
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	f7f6 f952 	bl	8004574 <HAL_PCD_EP_Receive>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2d4:	7dfb      	ldrb	r3, [r7, #23]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f000 f832 	bl	800e340 <USBD_Get_USB_Status>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3718      	adds	r7, #24
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}

0800e2ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b082      	sub	sp, #8
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2fc:	78fa      	ldrb	r2, [r7, #3]
 800e2fe:	4611      	mov	r1, r2
 800e300:	4618      	mov	r0, r3
 800e302:	f7f6 f982 	bl	800460a <HAL_PCD_EP_GetRxCount>
 800e306:	4603      	mov	r3, r0
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3708      	adds	r7, #8
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e318:	4b03      	ldr	r3, [pc, #12]	; (800e328 <USBD_static_malloc+0x18>)
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	370c      	adds	r7, #12
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr
 800e326:	bf00      	nop
 800e328:	20006a60 	.word	0x20006a60

0800e32c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]

}
 800e334:	bf00      	nop
 800e336:	370c      	adds	r7, #12
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr

0800e340 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e34a:	2300      	movs	r3, #0
 800e34c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e34e:	79fb      	ldrb	r3, [r7, #7]
 800e350:	2b03      	cmp	r3, #3
 800e352:	d817      	bhi.n	800e384 <USBD_Get_USB_Status+0x44>
 800e354:	a201      	add	r2, pc, #4	; (adr r2, 800e35c <USBD_Get_USB_Status+0x1c>)
 800e356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e35a:	bf00      	nop
 800e35c:	0800e36d 	.word	0x0800e36d
 800e360:	0800e373 	.word	0x0800e373
 800e364:	0800e379 	.word	0x0800e379
 800e368:	0800e37f 	.word	0x0800e37f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e36c:	2300      	movs	r3, #0
 800e36e:	73fb      	strb	r3, [r7, #15]
    break;
 800e370:	e00b      	b.n	800e38a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e372:	2303      	movs	r3, #3
 800e374:	73fb      	strb	r3, [r7, #15]
    break;
 800e376:	e008      	b.n	800e38a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e378:	2301      	movs	r3, #1
 800e37a:	73fb      	strb	r3, [r7, #15]
    break;
 800e37c:	e005      	b.n	800e38a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e37e:	2303      	movs	r3, #3
 800e380:	73fb      	strb	r3, [r7, #15]
    break;
 800e382:	e002      	b.n	800e38a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e384:	2303      	movs	r3, #3
 800e386:	73fb      	strb	r3, [r7, #15]
    break;
 800e388:	bf00      	nop
  }
  return usb_status;
 800e38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3714      	adds	r7, #20
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <memset>:
 800e398:	4402      	add	r2, r0
 800e39a:	4603      	mov	r3, r0
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d100      	bne.n	800e3a2 <memset+0xa>
 800e3a0:	4770      	bx	lr
 800e3a2:	f803 1b01 	strb.w	r1, [r3], #1
 800e3a6:	e7f9      	b.n	800e39c <memset+0x4>

0800e3a8 <_reclaim_reent>:
 800e3a8:	4b29      	ldr	r3, [pc, #164]	; (800e450 <_reclaim_reent+0xa8>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4283      	cmp	r3, r0
 800e3ae:	b570      	push	{r4, r5, r6, lr}
 800e3b0:	4604      	mov	r4, r0
 800e3b2:	d04b      	beq.n	800e44c <_reclaim_reent+0xa4>
 800e3b4:	69c3      	ldr	r3, [r0, #28]
 800e3b6:	b143      	cbz	r3, 800e3ca <_reclaim_reent+0x22>
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d144      	bne.n	800e448 <_reclaim_reent+0xa0>
 800e3be:	69e3      	ldr	r3, [r4, #28]
 800e3c0:	6819      	ldr	r1, [r3, #0]
 800e3c2:	b111      	cbz	r1, 800e3ca <_reclaim_reent+0x22>
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	f000 f879 	bl	800e4bc <_free_r>
 800e3ca:	6961      	ldr	r1, [r4, #20]
 800e3cc:	b111      	cbz	r1, 800e3d4 <_reclaim_reent+0x2c>
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	f000 f874 	bl	800e4bc <_free_r>
 800e3d4:	69e1      	ldr	r1, [r4, #28]
 800e3d6:	b111      	cbz	r1, 800e3de <_reclaim_reent+0x36>
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f000 f86f 	bl	800e4bc <_free_r>
 800e3de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e3e0:	b111      	cbz	r1, 800e3e8 <_reclaim_reent+0x40>
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	f000 f86a 	bl	800e4bc <_free_r>
 800e3e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3ea:	b111      	cbz	r1, 800e3f2 <_reclaim_reent+0x4a>
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f000 f865 	bl	800e4bc <_free_r>
 800e3f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e3f4:	b111      	cbz	r1, 800e3fc <_reclaim_reent+0x54>
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	f000 f860 	bl	800e4bc <_free_r>
 800e3fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e3fe:	b111      	cbz	r1, 800e406 <_reclaim_reent+0x5e>
 800e400:	4620      	mov	r0, r4
 800e402:	f000 f85b 	bl	800e4bc <_free_r>
 800e406:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e408:	b111      	cbz	r1, 800e410 <_reclaim_reent+0x68>
 800e40a:	4620      	mov	r0, r4
 800e40c:	f000 f856 	bl	800e4bc <_free_r>
 800e410:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e412:	b111      	cbz	r1, 800e41a <_reclaim_reent+0x72>
 800e414:	4620      	mov	r0, r4
 800e416:	f000 f851 	bl	800e4bc <_free_r>
 800e41a:	6a23      	ldr	r3, [r4, #32]
 800e41c:	b1b3      	cbz	r3, 800e44c <_reclaim_reent+0xa4>
 800e41e:	4620      	mov	r0, r4
 800e420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e424:	4718      	bx	r3
 800e426:	5949      	ldr	r1, [r1, r5]
 800e428:	b941      	cbnz	r1, 800e43c <_reclaim_reent+0x94>
 800e42a:	3504      	adds	r5, #4
 800e42c:	69e3      	ldr	r3, [r4, #28]
 800e42e:	2d80      	cmp	r5, #128	; 0x80
 800e430:	68d9      	ldr	r1, [r3, #12]
 800e432:	d1f8      	bne.n	800e426 <_reclaim_reent+0x7e>
 800e434:	4620      	mov	r0, r4
 800e436:	f000 f841 	bl	800e4bc <_free_r>
 800e43a:	e7c0      	b.n	800e3be <_reclaim_reent+0x16>
 800e43c:	680e      	ldr	r6, [r1, #0]
 800e43e:	4620      	mov	r0, r4
 800e440:	f000 f83c 	bl	800e4bc <_free_r>
 800e444:	4631      	mov	r1, r6
 800e446:	e7ef      	b.n	800e428 <_reclaim_reent+0x80>
 800e448:	2500      	movs	r5, #0
 800e44a:	e7ef      	b.n	800e42c <_reclaim_reent+0x84>
 800e44c:	bd70      	pop	{r4, r5, r6, pc}
 800e44e:	bf00      	nop
 800e450:	2000014c 	.word	0x2000014c

0800e454 <__libc_init_array>:
 800e454:	b570      	push	{r4, r5, r6, lr}
 800e456:	4d0d      	ldr	r5, [pc, #52]	; (800e48c <__libc_init_array+0x38>)
 800e458:	4c0d      	ldr	r4, [pc, #52]	; (800e490 <__libc_init_array+0x3c>)
 800e45a:	1b64      	subs	r4, r4, r5
 800e45c:	10a4      	asrs	r4, r4, #2
 800e45e:	2600      	movs	r6, #0
 800e460:	42a6      	cmp	r6, r4
 800e462:	d109      	bne.n	800e478 <__libc_init_array+0x24>
 800e464:	4d0b      	ldr	r5, [pc, #44]	; (800e494 <__libc_init_array+0x40>)
 800e466:	4c0c      	ldr	r4, [pc, #48]	; (800e498 <__libc_init_array+0x44>)
 800e468:	f000 f880 	bl	800e56c <_init>
 800e46c:	1b64      	subs	r4, r4, r5
 800e46e:	10a4      	asrs	r4, r4, #2
 800e470:	2600      	movs	r6, #0
 800e472:	42a6      	cmp	r6, r4
 800e474:	d105      	bne.n	800e482 <__libc_init_array+0x2e>
 800e476:	bd70      	pop	{r4, r5, r6, pc}
 800e478:	f855 3b04 	ldr.w	r3, [r5], #4
 800e47c:	4798      	blx	r3
 800e47e:	3601      	adds	r6, #1
 800e480:	e7ee      	b.n	800e460 <__libc_init_array+0xc>
 800e482:	f855 3b04 	ldr.w	r3, [r5], #4
 800e486:	4798      	blx	r3
 800e488:	3601      	adds	r6, #1
 800e48a:	e7f2      	b.n	800e472 <__libc_init_array+0x1e>
 800e48c:	0800e6a8 	.word	0x0800e6a8
 800e490:	0800e6a8 	.word	0x0800e6a8
 800e494:	0800e6a8 	.word	0x0800e6a8
 800e498:	0800e6ac 	.word	0x0800e6ac

0800e49c <__retarget_lock_acquire_recursive>:
 800e49c:	4770      	bx	lr

0800e49e <__retarget_lock_release_recursive>:
 800e49e:	4770      	bx	lr

0800e4a0 <memcpy>:
 800e4a0:	440a      	add	r2, r1
 800e4a2:	4291      	cmp	r1, r2
 800e4a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4a8:	d100      	bne.n	800e4ac <memcpy+0xc>
 800e4aa:	4770      	bx	lr
 800e4ac:	b510      	push	{r4, lr}
 800e4ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4b6:	4291      	cmp	r1, r2
 800e4b8:	d1f9      	bne.n	800e4ae <memcpy+0xe>
 800e4ba:	bd10      	pop	{r4, pc}

0800e4bc <_free_r>:
 800e4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4be:	2900      	cmp	r1, #0
 800e4c0:	d044      	beq.n	800e54c <_free_r+0x90>
 800e4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4c6:	9001      	str	r0, [sp, #4]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f1a1 0404 	sub.w	r4, r1, #4
 800e4ce:	bfb8      	it	lt
 800e4d0:	18e4      	addlt	r4, r4, r3
 800e4d2:	f000 f83f 	bl	800e554 <__malloc_lock>
 800e4d6:	4a1e      	ldr	r2, [pc, #120]	; (800e550 <_free_r+0x94>)
 800e4d8:	9801      	ldr	r0, [sp, #4]
 800e4da:	6813      	ldr	r3, [r2, #0]
 800e4dc:	b933      	cbnz	r3, 800e4ec <_free_r+0x30>
 800e4de:	6063      	str	r3, [r4, #4]
 800e4e0:	6014      	str	r4, [r2, #0]
 800e4e2:	b003      	add	sp, #12
 800e4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4e8:	f000 b83a 	b.w	800e560 <__malloc_unlock>
 800e4ec:	42a3      	cmp	r3, r4
 800e4ee:	d908      	bls.n	800e502 <_free_r+0x46>
 800e4f0:	6825      	ldr	r5, [r4, #0]
 800e4f2:	1961      	adds	r1, r4, r5
 800e4f4:	428b      	cmp	r3, r1
 800e4f6:	bf01      	itttt	eq
 800e4f8:	6819      	ldreq	r1, [r3, #0]
 800e4fa:	685b      	ldreq	r3, [r3, #4]
 800e4fc:	1949      	addeq	r1, r1, r5
 800e4fe:	6021      	streq	r1, [r4, #0]
 800e500:	e7ed      	b.n	800e4de <_free_r+0x22>
 800e502:	461a      	mov	r2, r3
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	b10b      	cbz	r3, 800e50c <_free_r+0x50>
 800e508:	42a3      	cmp	r3, r4
 800e50a:	d9fa      	bls.n	800e502 <_free_r+0x46>
 800e50c:	6811      	ldr	r1, [r2, #0]
 800e50e:	1855      	adds	r5, r2, r1
 800e510:	42a5      	cmp	r5, r4
 800e512:	d10b      	bne.n	800e52c <_free_r+0x70>
 800e514:	6824      	ldr	r4, [r4, #0]
 800e516:	4421      	add	r1, r4
 800e518:	1854      	adds	r4, r2, r1
 800e51a:	42a3      	cmp	r3, r4
 800e51c:	6011      	str	r1, [r2, #0]
 800e51e:	d1e0      	bne.n	800e4e2 <_free_r+0x26>
 800e520:	681c      	ldr	r4, [r3, #0]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	6053      	str	r3, [r2, #4]
 800e526:	440c      	add	r4, r1
 800e528:	6014      	str	r4, [r2, #0]
 800e52a:	e7da      	b.n	800e4e2 <_free_r+0x26>
 800e52c:	d902      	bls.n	800e534 <_free_r+0x78>
 800e52e:	230c      	movs	r3, #12
 800e530:	6003      	str	r3, [r0, #0]
 800e532:	e7d6      	b.n	800e4e2 <_free_r+0x26>
 800e534:	6825      	ldr	r5, [r4, #0]
 800e536:	1961      	adds	r1, r4, r5
 800e538:	428b      	cmp	r3, r1
 800e53a:	bf04      	itt	eq
 800e53c:	6819      	ldreq	r1, [r3, #0]
 800e53e:	685b      	ldreq	r3, [r3, #4]
 800e540:	6063      	str	r3, [r4, #4]
 800e542:	bf04      	itt	eq
 800e544:	1949      	addeq	r1, r1, r5
 800e546:	6021      	streq	r1, [r4, #0]
 800e548:	6054      	str	r4, [r2, #4]
 800e54a:	e7ca      	b.n	800e4e2 <_free_r+0x26>
 800e54c:	b003      	add	sp, #12
 800e54e:	bd30      	pop	{r4, r5, pc}
 800e550:	20006dbc 	.word	0x20006dbc

0800e554 <__malloc_lock>:
 800e554:	4801      	ldr	r0, [pc, #4]	; (800e55c <__malloc_lock+0x8>)
 800e556:	f7ff bfa1 	b.w	800e49c <__retarget_lock_acquire_recursive>
 800e55a:	bf00      	nop
 800e55c:	20006db8 	.word	0x20006db8

0800e560 <__malloc_unlock>:
 800e560:	4801      	ldr	r0, [pc, #4]	; (800e568 <__malloc_unlock+0x8>)
 800e562:	f7ff bf9c 	b.w	800e49e <__retarget_lock_release_recursive>
 800e566:	bf00      	nop
 800e568:	20006db8 	.word	0x20006db8

0800e56c <_init>:
 800e56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56e:	bf00      	nop
 800e570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e572:	bc08      	pop	{r3}
 800e574:	469e      	mov	lr, r3
 800e576:	4770      	bx	lr

0800e578 <_fini>:
 800e578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57a:	bf00      	nop
 800e57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e57e:	bc08      	pop	{r3}
 800e580:	469e      	mov	lr, r3
 800e582:	4770      	bx	lr
