
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010030  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080101f4  080101f4  000111f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801025c  0801025c  0001214c  2**0
                  CONTENTS
  4 .ARM          00000008  0801025c  0801025c  0001125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010264  08010264  0001214c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010264  08010264  00011264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010268  08010268  00011268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0801026c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025ac  2000014c  080103b8  0001214c  2**2
                  ALLOC
 10 ._user_heap_stack 0000c000  200026f8  080103b8  000126f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001214c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f2f  00000000  00000000  0001217c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050ac  00000000  00000000  000330ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  00038158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e2  00000000  00000000  00039b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f6f  00000000  00000000  0003af32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025bac  00000000  00000000  00063ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e68c7  00000000  00000000  00089a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170314  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ec8  00000000  00000000  00170358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00177220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000014c 	.word	0x2000014c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080101dc 	.word	0x080101dc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000150 	.word	0x20000150
 8000200:	080101dc 	.word	0x080101dc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f003 ff48 	bl	800438c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f862 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fd50 	bl	8000fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000504:	f000 fcf8 	bl	8000ef8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000508:	f000 f8ce 	bl	80006a8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800050c:	f000 f958 	bl	80007c0 <MX_ADC2_Init>
  MX_TIM7_Init();
 8000510:	f000 fc1c 	bl	8000d4c <MX_TIM7_Init>
  MX_CAN1_Init();
 8000514:	f000 f9de 	bl	80008d4 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000518:	f000 fa54 	bl	80009c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800051c:	f000 faf2 	bl	8000b04 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000520:	f000 fb66 	bl	8000bf0 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000524:	f000 fc46 	bl	8000db4 <MX_TIM8_Init>
  MX_I2C1_Init();
 8000528:	f000 fa1e 	bl	8000968 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800052c:	f00e ff9e 	bl	800f46c <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000530:	f000 fa06 	bl	8000940 <MX_CRC_Init>
  MX_TIM6_Init();
 8000534:	f000 fbd4 	bl	8000ce0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  PDM_Init(&hcan1, &hi2c1);
 8000538:	4919      	ldr	r1, [pc, #100]	@ (80005a0 <main+0xac>)
 800053a:	481a      	ldr	r0, [pc, #104]	@ (80005a4 <main+0xb0>)
 800053c:	f001 f822 	bl	8001584 <PDM_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Convert ADC values to data channels
	  if(flagReading[1] == Data_Read_Ready)
 8000540:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <main+0xb4>)
 8000542:	785b      	ldrb	r3, [r3, #1]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d102      	bne.n	800054e <main+0x5a>
		  PDM_Data_Conversion(&htim6);
 8000548:	4818      	ldr	r0, [pc, #96]	@ (80005ac <main+0xb8>)
 800054a:	f002 ff0b 	bl	8003364 <PDM_Data_Conversion>

	  //Transmit 10 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg10Hz >= DATA_FREQ_10HZ)
 800054e:	4b18      	ldr	r3, [pc, #96]	@ (80005b0 <main+0xbc>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000556:	d302      	bcc.n	800055e <main+0x6a>
	  {
		  accMsg10Hz = 0;
 8000558:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <main+0xbc>)
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
//		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_10Hz);
	  }

	  //Transmit 25 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg25Hz >= DATA_FREQ_25HZ)
 800055e:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <main+0xc0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000566:	d302      	bcc.n	800056e <main+0x7a>
	  {
		  accMsg25Hz = 0;
 8000568:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <main+0xc0>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
//		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_25Hz);
	  }

	  //Transmit 50 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg50Hz >= DATA_FREQ_50HZ)
 800056e:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <main+0xc4>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2bc7      	cmp	r3, #199	@ 0xc7
 8000574:	d905      	bls.n	8000582 <main+0x8e>
	  {
		  accMsg50Hz = 0;
 8000576:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <main+0xc4>)
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Current(&hcan1);
 800057c:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <main+0xb0>)
 800057e:	f000 fe85 	bl	800128c <PDM_CAN_Transmit_Current>
//		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_50Hz);
	  }

	  //Transmit 80 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg80Hz >= DATA_FREQ_80HZ)
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <main+0xc8>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b7c      	cmp	r3, #124	@ 0x7c
 8000588:	d902      	bls.n	8000590 <main+0x9c>
	  {
		  accMsg80Hz = 0;
 800058a:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <main+0xc8>)
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
//		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_80Hz);
	  }

	  //Transmit 100 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg100Hz >= DATA_FREQ_100HZ)
 8000590:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <main+0xcc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b63      	cmp	r3, #99	@ 0x63
 8000596:	d9d3      	bls.n	8000540 <main+0x4c>
	  {
		  accMsg100Hz = 0;
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <main+0xcc>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
	  if(flagReading[1] == Data_Read_Ready)
 800059e:	e7cf      	b.n	8000540 <main+0x4c>
 80005a0:	200002e8 	.word	0x200002e8
 80005a4:	200002b8 	.word	0x200002b8
 80005a8:	200007dc 	.word	0x200007dc
 80005ac:	20000414 	.word	0x20000414
 80005b0:	20000944 	.word	0x20000944
 80005b4:	20000948 	.word	0x20000948
 80005b8:	2000094c 	.word	0x2000094c
 80005bc:	20000950 	.word	0x20000950
 80005c0:	20000954 	.word	0x20000954

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2234      	movs	r2, #52	@ 0x34
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f00f fd74 	bl	80100c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b2c      	ldr	r3, [pc, #176]	@ (80006a0 <SystemClock_Config+0xdc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	4a2b      	ldr	r2, [pc, #172]	@ (80006a0 <SystemClock_Config+0xdc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f8:	4b29      	ldr	r3, [pc, #164]	@ (80006a0 <SystemClock_Config+0xdc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <SystemClock_Config+0xe0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a25      	ldr	r2, [pc, #148]	@ (80006a4 <SystemClock_Config+0xe0>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <SystemClock_Config+0xe0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000628:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000632:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000638:	23b4      	movs	r3, #180	@ 0xb4
 800063a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000640:	2308      	movs	r3, #8
 8000642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000644:	2302      	movs	r3, #2
 8000646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4618      	mov	r0, r3
 800064e:	f009 f987 	bl	8009960 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000658:	f000 fdd0 	bl	80011fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800065c:	f008 fad0 	bl	8008c00 <HAL_PWREx_EnableOverDrive>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000666:	f000 fdc9 	bl	80011fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000676:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000680:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	2105      	movs	r1, #5
 8000688:	4618      	mov	r0, r3
 800068a:	f008 fb09 	bl	8008ca0 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000694:	f000 fdb2 	bl	80011fc <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	@ 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ba:	4b3d      	ldr	r3, [pc, #244]	@ (80007b0 <MX_ADC1_Init+0x108>)
 80006bc:	4a3d      	ldr	r2, [pc, #244]	@ (80007b4 <MX_ADC1_Init+0x10c>)
 80006be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c0:	4b3b      	ldr	r3, [pc, #236]	@ (80007b0 <MX_ADC1_Init+0x108>)
 80006c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c8:	4b39      	ldr	r3, [pc, #228]	@ (80007b0 <MX_ADC1_Init+0x108>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006ce:	4b38      	ldr	r3, [pc, #224]	@ (80007b0 <MX_ADC1_Init+0x108>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006d4:	4b36      	ldr	r3, [pc, #216]	@ (80007b0 <MX_ADC1_Init+0x108>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006da:	4b35      	ldr	r3, [pc, #212]	@ (80007b0 <MX_ADC1_Init+0x108>)
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e2:	4b33      	ldr	r3, [pc, #204]	@ (80007b0 <MX_ADC1_Init+0x108>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e8:	4b31      	ldr	r3, [pc, #196]	@ (80007b0 <MX_ADC1_Init+0x108>)
 80006ea:	4a33      	ldr	r2, [pc, #204]	@ (80007b8 <MX_ADC1_Init+0x110>)
 80006ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ee:	4b30      	ldr	r3, [pc, #192]	@ (80007b0 <MX_ADC1_Init+0x108>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80006f4:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <MX_ADC1_Init+0x108>)
 80006f6:	2205      	movs	r2, #5
 80006f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006fa:	4b2d      	ldr	r3, [pc, #180]	@ (80007b0 <MX_ADC1_Init+0x108>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000702:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <MX_ADC1_Init+0x108>)
 8000704:	2201      	movs	r2, #1
 8000706:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000708:	4829      	ldr	r0, [pc, #164]	@ (80007b0 <MX_ADC1_Init+0x108>)
 800070a:	f003 fed5 	bl	80044b8 <HAL_ADC_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000714:	f000 fd72 	bl	80011fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000718:	2305      	movs	r3, #5
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000720:	2307      	movs	r3, #7
 8000722:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	4821      	ldr	r0, [pc, #132]	@ (80007b0 <MX_ADC1_Init+0x108>)
 800072a:	f004 f837 	bl	800479c <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000734:	f000 fd62 	bl	80011fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000738:	2306      	movs	r3, #6
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	481a      	ldr	r0, [pc, #104]	@ (80007b0 <MX_ADC1_Init+0x108>)
 8000746:	f004 f829 	bl	800479c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000750:	f000 fd54 	bl	80011fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000754:	2307      	movs	r3, #7
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000758:	2303      	movs	r3, #3
 800075a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <MX_ADC1_Init+0x108>)
 8000762:	f004 f81b 	bl	800479c <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800076c:	f000 fd46 	bl	80011fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000770:	230e      	movs	r3, #14
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <MX_ADC1_Init+0x108>)
 800077e:	f004 f80d 	bl	800479c <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000788:	f000 fd38 	bl	80011fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800078c:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_ADC1_Init+0x114>)
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000790:	2305      	movs	r3, #5
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_ADC1_Init+0x108>)
 800079a:	f003 ffff 	bl	800479c <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80007a4:	f000 fd2a 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000168 	.word	0x20000168
 80007b4:	40012000 	.word	0x40012000
 80007b8:	0f000001 	.word	0x0f000001
 80007bc:	10000012 	.word	0x10000012

080007c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80007d2:	4b3d      	ldr	r3, [pc, #244]	@ (80008c8 <MX_ADC2_Init+0x108>)
 80007d4:	4a3d      	ldr	r2, [pc, #244]	@ (80008cc <MX_ADC2_Init+0x10c>)
 80007d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007d8:	4b3b      	ldr	r3, [pc, #236]	@ (80008c8 <MX_ADC2_Init+0x108>)
 80007da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007e0:	4b39      	ldr	r3, [pc, #228]	@ (80008c8 <MX_ADC2_Init+0x108>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80007e6:	4b38      	ldr	r3, [pc, #224]	@ (80008c8 <MX_ADC2_Init+0x108>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007ec:	4b36      	ldr	r3, [pc, #216]	@ (80008c8 <MX_ADC2_Init+0x108>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007f2:	4b35      	ldr	r3, [pc, #212]	@ (80008c8 <MX_ADC2_Init+0x108>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fa:	4b33      	ldr	r3, [pc, #204]	@ (80008c8 <MX_ADC2_Init+0x108>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000800:	4b31      	ldr	r3, [pc, #196]	@ (80008c8 <MX_ADC2_Init+0x108>)
 8000802:	4a33      	ldr	r2, [pc, #204]	@ (80008d0 <MX_ADC2_Init+0x110>)
 8000804:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000806:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <MX_ADC2_Init+0x108>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 800080c:	4b2e      	ldr	r3, [pc, #184]	@ (80008c8 <MX_ADC2_Init+0x108>)
 800080e:	2205      	movs	r2, #5
 8000810:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000812:	4b2d      	ldr	r3, [pc, #180]	@ (80008c8 <MX_ADC2_Init+0x108>)
 8000814:	2201      	movs	r2, #1
 8000816:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081a:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <MX_ADC2_Init+0x108>)
 800081c:	2201      	movs	r2, #1
 800081e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000820:	4829      	ldr	r0, [pc, #164]	@ (80008c8 <MX_ADC2_Init+0x108>)
 8000822:	f003 fe49 	bl	80044b8 <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800082c:	f000 fce6 	bl	80011fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000830:	2300      	movs	r3, #0
 8000832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000834:	2301      	movs	r3, #1
 8000836:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000838:	2307      	movs	r3, #7
 800083a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	4821      	ldr	r0, [pc, #132]	@ (80008c8 <MX_ADC2_Init+0x108>)
 8000842:	f003 ffab 	bl	800479c <HAL_ADC_ConfigChannel>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800084c:	f000 fcd6 	bl	80011fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000850:	2301      	movs	r3, #1
 8000852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	481a      	ldr	r0, [pc, #104]	@ (80008c8 <MX_ADC2_Init+0x108>)
 800085e:	f003 ff9d 	bl	800479c <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000868:	f000 fcc8 	bl	80011fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800086c:	2302      	movs	r3, #2
 800086e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000870:	2303      	movs	r3, #3
 8000872:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	4813      	ldr	r0, [pc, #76]	@ (80008c8 <MX_ADC2_Init+0x108>)
 800087a:	f003 ff8f 	bl	800479c <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000884:	f000 fcba 	bl	80011fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000888:	2303      	movs	r3, #3
 800088a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <MX_ADC2_Init+0x108>)
 8000896:	f003 ff81 	bl	800479c <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80008a0:	f000 fcac 	bl	80011fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80008a8:	2305      	movs	r3, #5
 80008aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_ADC2_Init+0x108>)
 80008b2:	f003 ff73 	bl	800479c <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80008bc:	f000 fc9e 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200001b0 	.word	0x200001b0
 80008cc:	40012100 	.word	0x40012100
 80008d0:	0f000001 	.word	0x0f000001

080008d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_CAN1_Init+0x64>)
 80008da:	4a18      	ldr	r2, [pc, #96]	@ (800093c <MX_CAN1_Init+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_CAN1_Init+0x64>)
 80008e0:	2205      	movs	r2, #5
 80008e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_CAN1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_CAN1_Init+0x64>)
 80008ec:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 80008f0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_CAN1_Init+0x64>)
 80008f4:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 80008f8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_CAN1_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <MX_CAN1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_CAN1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <MX_CAN1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_CAN1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <MX_CAN1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_CAN1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_CAN1_Init+0x64>)
 8000926:	f004 f9e9 	bl	8004cfc <HAL_CAN_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000930:	f000 fc64 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200002b8 	.word	0x200002b8
 800093c:	40006400 	.word	0x40006400

08000940 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_CRC_Init+0x20>)
 8000946:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <MX_CRC_Init+0x24>)
 8000948:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_CRC_Init+0x20>)
 800094c:	f005 fa1b 	bl	8005d86 <HAL_CRC_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000956:	f000 fc51 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200002e0 	.word	0x200002e0
 8000964:	40023000 	.word	0x40023000

08000968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <MX_I2C1_Init+0x50>)
 800096e:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <MX_I2C1_Init+0x54>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_I2C1_Init+0x50>)
 8000974:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <MX_I2C1_Init+0x58>)
 8000976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_I2C1_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_I2C1_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_I2C1_Init+0x50>)
 8000986:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800098a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <MX_I2C1_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_I2C1_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_I2C1_Init+0x50>)
 80009a6:	f006 f867 	bl	8006a78 <HAL_I2C_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b0:	f000 fc24 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200002e8 	.word	0x200002e8
 80009bc:	40005400 	.word	0x40005400
 80009c0:	00061a80 	.word	0x00061a80

080009c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b096      	sub	sp, #88	@ 0x58
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
 80009f2:	615a      	str	r2, [r3, #20]
 80009f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2220      	movs	r2, #32
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f00f fb5f 	bl	80100c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a02:	4b3e      	ldr	r3, [pc, #248]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000a04:	4a3e      	ldr	r2, [pc, #248]	@ (8000b00 <MX_TIM1_Init+0x13c>)
 8000a06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1799;
 8000a08:	4b3c      	ldr	r3, [pc, #240]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000a0a:	f240 7207 	movw	r2, #1799	@ 0x707
 8000a0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b3a      	ldr	r3, [pc, #232]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a16:	4b39      	ldr	r3, [pc, #228]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000a18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1e:	4b37      	ldr	r3, [pc, #220]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a24:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b34      	ldr	r3, [pc, #208]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a30:	4832      	ldr	r0, [pc, #200]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000a32:	f009 fa33 	bl	8009e9c <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a3c:	f000 fbde 	bl	80011fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a44:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a46:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482b      	ldr	r0, [pc, #172]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000a4e:	f00a f837 	bl	800aac0 <HAL_TIM_ConfigClockSource>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a58:	f000 fbd0 	bl	80011fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a5c:	4827      	ldr	r0, [pc, #156]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000a5e:	f009 fb0c 	bl	800a07a <HAL_TIM_PWM_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a68:	f000 fbc8 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4820      	ldr	r0, [pc, #128]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000a7c:	f00a ff9c 	bl	800b9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a86:	f000 fbb9 	bl	80011fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8a:	2360      	movs	r3, #96	@ 0x60
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4814      	ldr	r0, [pc, #80]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000aac:	f009 ff46 	bl	800a93c <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000ab6:	f000 fba1 	bl	80011fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ace:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	4807      	ldr	r0, [pc, #28]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000ade:	f00a ffe7 	bl	800bab0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ae8:	f000 fb88 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aec:	4803      	ldr	r0, [pc, #12]	@ (8000afc <MX_TIM1_Init+0x138>)
 8000aee:	f003 fa1d 	bl	8003f2c <HAL_TIM_MspPostInit>

}
 8000af2:	bf00      	nop
 8000af4:	3758      	adds	r7, #88	@ 0x58
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000033c 	.word	0x2000033c
 8000b00:	40010000 	.word	0x40010000

08000b04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	@ 0x38
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b34:	4b2d      	ldr	r3, [pc, #180]	@ (8000bec <MX_TIM2_Init+0xe8>)
 8000b36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 8000b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bec <MX_TIM2_Init+0xe8>)
 8000b3e:	f240 3283 	movw	r2, #899	@ 0x383
 8000b42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b29      	ldr	r3, [pc, #164]	@ (8000bec <MX_TIM2_Init+0xe8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b4a:	4b28      	ldr	r3, [pc, #160]	@ (8000bec <MX_TIM2_Init+0xe8>)
 8000b4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b52:	4b26      	ldr	r3, [pc, #152]	@ (8000bec <MX_TIM2_Init+0xe8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b24      	ldr	r3, [pc, #144]	@ (8000bec <MX_TIM2_Init+0xe8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b5e:	4823      	ldr	r0, [pc, #140]	@ (8000bec <MX_TIM2_Init+0xe8>)
 8000b60:	f009 f99c 	bl	8009e9c <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b6a:	f000 fb47 	bl	80011fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	481c      	ldr	r0, [pc, #112]	@ (8000bec <MX_TIM2_Init+0xe8>)
 8000b7c:	f009 ffa0 	bl	800aac0 <HAL_TIM_ConfigClockSource>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b86:	f000 fb39 	bl	80011fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b8a:	4818      	ldr	r0, [pc, #96]	@ (8000bec <MX_TIM2_Init+0xe8>)
 8000b8c:	f009 fa75 	bl	800a07a <HAL_TIM_PWM_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b96:	f000 fb31 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4810      	ldr	r0, [pc, #64]	@ (8000bec <MX_TIM2_Init+0xe8>)
 8000baa:	f00a ff05 	bl	800b9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000bb4:	f000 fb22 	bl	80011fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb8:	2360      	movs	r3, #96	@ 0x60
 8000bba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2208      	movs	r2, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4807      	ldr	r0, [pc, #28]	@ (8000bec <MX_TIM2_Init+0xe8>)
 8000bd0:	f009 feb4 	bl	800a93c <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000bda:	f000 fb0f 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bde:	4803      	ldr	r0, [pc, #12]	@ (8000bec <MX_TIM2_Init+0xe8>)
 8000be0:	f003 f9a4 	bl	8003f2c <HAL_TIM_MspPostInit>

}
 8000be4:	bf00      	nop
 8000be6:	3738      	adds	r7, #56	@ 0x38
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000384 	.word	0x20000384

08000bf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	@ 0x38
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	f107 0320 	add.w	r3, r7, #32
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
 8000c1c:	615a      	str	r2, [r3, #20]
 8000c1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c20:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c22:	4a2e      	ldr	r2, [pc, #184]	@ (8000cdc <MX_TIM3_Init+0xec>)
 8000c24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 8000c26:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c28:	f240 3283 	movw	r2, #899	@ 0x383
 8000c2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c34:	4b28      	ldr	r3, [pc, #160]	@ (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b25      	ldr	r3, [pc, #148]	@ (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c48:	4823      	ldr	r0, [pc, #140]	@ (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c4a:	f009 f927 	bl	8009e9c <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c54:	f000 fad2 	bl	80011fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c62:	4619      	mov	r1, r3
 8000c64:	481c      	ldr	r0, [pc, #112]	@ (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c66:	f009 ff2b 	bl	800aac0 <HAL_TIM_ConfigClockSource>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c70:	f000 fac4 	bl	80011fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c74:	4818      	ldr	r0, [pc, #96]	@ (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c76:	f009 fa00 	bl	800a07a <HAL_TIM_PWM_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c80:	f000 fabc 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c8c:	f107 0320 	add.w	r3, r7, #32
 8000c90:	4619      	mov	r1, r3
 8000c92:	4811      	ldr	r0, [pc, #68]	@ (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c94:	f00a fe90 	bl	800b9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c9e:	f000 faad 	bl	80011fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca2:	2360      	movs	r3, #96	@ 0x60
 8000ca4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	220c      	movs	r2, #12
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4807      	ldr	r0, [pc, #28]	@ (8000cd8 <MX_TIM3_Init+0xe8>)
 8000cba:	f009 fe3f 	bl	800a93c <HAL_TIM_PWM_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000cc4:	f000 fa9a 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cc8:	4803      	ldr	r0, [pc, #12]	@ (8000cd8 <MX_TIM3_Init+0xe8>)
 8000cca:	f003 f92f 	bl	8003f2c <HAL_TIM_MspPostInit>

}
 8000cce:	bf00      	nop
 8000cd0:	3738      	adds	r7, #56	@ 0x38
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200003cc 	.word	0x200003cc
 8000cdc:	40000400 	.word	0x40000400

08000ce0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_TIM6_Init+0x64>)
 8000cf0:	4a15      	ldr	r2, [pc, #84]	@ (8000d48 <MX_TIM6_Init+0x68>)
 8000cf2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <MX_TIM6_Init+0x64>)
 8000cf6:	2259      	movs	r2, #89	@ 0x59
 8000cf8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <MX_TIM6_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xfffe;
 8000d00:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <MX_TIM6_Init+0x64>)
 8000d02:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000d06:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <MX_TIM6_Init+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d0e:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <MX_TIM6_Init+0x64>)
 8000d10:	f009 f8c4 	bl	8009e9c <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d1a:	f000 fa6f 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <MX_TIM6_Init+0x64>)
 8000d2c:	f00a fe44 	bl	800b9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d36:	f000 fa61 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000414 	.word	0x20000414
 8000d48:	40001000 	.word	0x40001000

08000d4c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <MX_TIM7_Init+0x60>)
 8000d5c:	4a14      	ldr	r2, [pc, #80]	@ (8000db0 <MX_TIM7_Init+0x64>)
 8000d5e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <MX_TIM7_Init+0x60>)
 8000d62:	2259      	movs	r2, #89	@ 0x59
 8000d64:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <MX_TIM7_Init+0x60>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <MX_TIM7_Init+0x60>)
 8000d6e:	2263      	movs	r2, #99	@ 0x63
 8000d70:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <MX_TIM7_Init+0x60>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <MX_TIM7_Init+0x60>)
 8000d7a:	f009 f88f 	bl	8009e9c <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8000d84:	f000 fa3a 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_TIM7_Init+0x60>)
 8000d96:	f00a fe0f 	bl	800b9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000da0:	f000 fa2c 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000045c 	.word	0x2000045c
 8000db0:	40001400 	.word	0x40001400

08000db4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b096      	sub	sp, #88	@ 0x58
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
 8000de2:	615a      	str	r2, [r3, #20]
 8000de4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2220      	movs	r2, #32
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f00f f967 	bl	80100c0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000df2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000df4:	4a3f      	ldr	r2, [pc, #252]	@ (8000ef4 <MX_TIM8_Init+0x140>)
 8000df6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1799;
 8000df8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000dfa:	f240 7207 	movw	r2, #1799	@ 0x707
 8000dfe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000e06:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000e08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e0c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b38      	ldr	r3, [pc, #224]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e14:	4b36      	ldr	r3, [pc, #216]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b35      	ldr	r3, [pc, #212]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e20:	4833      	ldr	r0, [pc, #204]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000e22:	f009 f83b 	bl	8009e9c <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000e2c:	f000 f9e6 	bl	80011fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e34:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e36:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	482c      	ldr	r0, [pc, #176]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000e3e:	f009 fe3f 	bl	800aac0 <HAL_TIM_ConfigClockSource>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000e48:	f000 f9d8 	bl	80011fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e4c:	4828      	ldr	r0, [pc, #160]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000e4e:	f009 f914 	bl	800a07a <HAL_TIM_PWM_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000e58:	f000 f9d0 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e64:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4821      	ldr	r0, [pc, #132]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000e6c:	f00a fda4 	bl	800b9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000e76:	f000 f9c1 	bl	80011fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7a:	2360      	movs	r3, #96	@ 0x60
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e86:	2300      	movs	r3, #0
 8000e88:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4814      	ldr	r0, [pc, #80]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000ea0:	f009 fd4c 	bl	800a93c <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000eaa:	f000 f9a7 	bl	80011fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ec2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000ed2:	f00a fded 	bl	800bab0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8000edc:	f000 f98e 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ee0:	4803      	ldr	r0, [pc, #12]	@ (8000ef0 <MX_TIM8_Init+0x13c>)
 8000ee2:	f003 f823 	bl	8003f2c <HAL_TIM_MspPostInit>

}
 8000ee6:	bf00      	nop
 8000ee8:	3758      	adds	r7, #88	@ 0x58
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200004a4 	.word	0x200004a4
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <MX_DMA_Init+0xa8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a26      	ldr	r2, [pc, #152]	@ (8000fa0 <MX_DMA_Init+0xa8>)
 8000f08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <MX_DMA_Init+0xa8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <MX_DMA_Init+0xa8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa0 <MX_DMA_Init+0xa8>)
 8000f24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <MX_DMA_Init+0xa8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	200c      	movs	r0, #12
 8000f3c:	f004 fedf 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f40:	200c      	movs	r0, #12
 8000f42:	f004 fef8 	bl	8005d36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	200d      	movs	r0, #13
 8000f4c:	f004 fed7 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f50:	200d      	movs	r0, #13
 8000f52:	f004 fef0 	bl	8005d36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2038      	movs	r0, #56	@ 0x38
 8000f5c:	f004 fecf 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f60:	2038      	movs	r0, #56	@ 0x38
 8000f62:	f004 fee8 	bl	8005d36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	203a      	movs	r0, #58	@ 0x3a
 8000f6c:	f004 fec7 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f70:	203a      	movs	r0, #58	@ 0x3a
 8000f72:	f004 fee0 	bl	8005d36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	203b      	movs	r0, #59	@ 0x3b
 8000f7c:	f004 febf 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f80:	203b      	movs	r0, #59	@ 0x3b
 8000f82:	f004 fed8 	bl	8005d36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	203c      	movs	r0, #60	@ 0x3c
 8000f8c:	f004 feb7 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000f90:	203c      	movs	r0, #60	@ 0x3c
 8000f92:	f004 fed0 	bl	8005d36 <HAL_NVIC_EnableIRQ>

}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08e      	sub	sp, #56	@ 0x38
 8000fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
 8000fbe:	4b88      	ldr	r3, [pc, #544]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a87      	ldr	r2, [pc, #540]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8000fc4:	f043 0310 	orr.w	r3, r3, #16
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b85      	ldr	r3, [pc, #532]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	623b      	str	r3, [r7, #32]
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	4b81      	ldr	r3, [pc, #516]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a80      	ldr	r2, [pc, #512]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8000fe0:	f043 0320 	orr.w	r3, r3, #32
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b7e      	ldr	r3, [pc, #504]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0320 	and.w	r3, r3, #32
 8000fee:	61fb      	str	r3, [r7, #28]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
 8000ff6:	4b7a      	ldr	r3, [pc, #488]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a79      	ldr	r2, [pc, #484]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8000ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b77      	ldr	r3, [pc, #476]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800100a:	61bb      	str	r3, [r7, #24]
 800100c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	4b73      	ldr	r3, [pc, #460]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a72      	ldr	r2, [pc, #456]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b70      	ldr	r3, [pc, #448]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b6c      	ldr	r3, [pc, #432]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a6b      	ldr	r2, [pc, #428]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b69      	ldr	r3, [pc, #420]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b65      	ldr	r3, [pc, #404]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a64      	ldr	r2, [pc, #400]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b62      	ldr	r3, [pc, #392]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b5e      	ldr	r3, [pc, #376]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a5d      	ldr	r2, [pc, #372]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b5b      	ldr	r3, [pc, #364]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b57      	ldr	r3, [pc, #348]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a56      	ldr	r2, [pc, #344]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8001088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b54      	ldr	r3, [pc, #336]	@ (80011e0 <MX_GPIO_Init+0x23c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FAULTRST_Pin|SEL1_Pin|SEL0_Pin|SEN_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	213c      	movs	r1, #60	@ 0x3c
 800109e:	4851      	ldr	r0, [pc, #324]	@ (80011e4 <MX_GPIO_Init+0x240>)
 80010a0:	f005 fc9e 	bl	80069e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80010aa:	484f      	ldr	r0, [pc, #316]	@ (80011e8 <MX_GPIO_Init+0x244>)
 80010ac:	f005 fc98 	bl	80069e0 <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 80010b6:	484d      	ldr	r0, [pc, #308]	@ (80011ec <MX_GPIO_Init+0x248>)
 80010b8:	f005 fc92 	bl	80069e0 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : FAULTRST_Pin SEL1_Pin SEL0_Pin SEN_Pin */
  GPIO_InitStruct.Pin = FAULTRST_Pin|SEL1_Pin|SEL0_Pin|SEN_Pin;
 80010bc:	233c      	movs	r3, #60	@ 0x3c
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010c0:	2311      	movs	r3, #17
 80010c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4844      	ldr	r0, [pc, #272]	@ (80011e4 <MX_GPIO_Init+0x240>)
 80010d4:	f005 f9e4 	bl	80064a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 80010d8:	230f      	movs	r3, #15
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010dc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80010e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	4840      	ldr	r0, [pc, #256]	@ (80011f0 <MX_GPIO_Init+0x24c>)
 80010ee:	f005 f9d7 	bl	80064a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 80010f2:	f24f 0330 	movw	r3, #61488	@ 0xf030
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010f8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80010fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	483a      	ldr	r0, [pc, #232]	@ (80011f4 <MX_GPIO_Init+0x250>)
 800110a:	f005 f9c9 	bl	80064a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 800110e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001114:	2311      	movs	r3, #17
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001124:	4619      	mov	r1, r3
 8001126:	4830      	ldr	r0, [pc, #192]	@ (80011e8 <MX_GPIO_Init+0x244>)
 8001128:	f005 f9ba 	bl	80064a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 800112c:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001132:	2311      	movs	r3, #17
 8001134:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001142:	4619      	mov	r1, r3
 8001144:	4829      	ldr	r0, [pc, #164]	@ (80011ec <MX_GPIO_Init+0x248>)
 8001146:	f005 f9ab 	bl	80064a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 800114a:	f44f 637c 	mov.w	r3, #4032	@ 0xfc0
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001150:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001154:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	4825      	ldr	r0, [pc, #148]	@ (80011f8 <MX_GPIO_Init+0x254>)
 8001162:	f005 f99d 	bl	80064a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2101      	movs	r1, #1
 800116a:	2006      	movs	r0, #6
 800116c:	f004 fdc7 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001170:	2006      	movs	r0, #6
 8001172:	f004 fde0 	bl	8005d36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2101      	movs	r1, #1
 800117a:	2007      	movs	r0, #7
 800117c:	f004 fdbf 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001180:	2007      	movs	r0, #7
 8001182:	f004 fdd8 	bl	8005d36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2101      	movs	r1, #1
 800118a:	2008      	movs	r0, #8
 800118c:	f004 fdb7 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001190:	2008      	movs	r0, #8
 8001192:	f004 fdd0 	bl	8005d36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2101      	movs	r1, #1
 800119a:	2009      	movs	r0, #9
 800119c:	f004 fdaf 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011a0:	2009      	movs	r0, #9
 80011a2:	f004 fdc8 	bl	8005d36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2101      	movs	r1, #1
 80011aa:	200a      	movs	r0, #10
 80011ac:	f004 fda7 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011b0:	200a      	movs	r0, #10
 80011b2:	f004 fdc0 	bl	8005d36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2101      	movs	r1, #1
 80011ba:	2017      	movs	r0, #23
 80011bc:	f004 fd9f 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011c0:	2017      	movs	r0, #23
 80011c2:	f004 fdb8 	bl	8005d36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2101      	movs	r1, #1
 80011ca:	2028      	movs	r0, #40	@ 0x28
 80011cc:	f004 fd97 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011d0:	2028      	movs	r0, #40	@ 0x28
 80011d2:	f004 fdb0 	bl	8005d36 <HAL_NVIC_EnableIRQ>

}
 80011d6:	bf00      	nop
 80011d8:	3738      	adds	r7, #56	@ 0x38
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021800 	.word	0x40021800
 80011f0:	40021400 	.word	0x40021400
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40020800 	.word	0x40020800

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <Error_Handler+0x8>

08001208 <PDM_CAN_Init>:
//													2: 250	kbps
//													3: 500	kbps
//													4: 1000 kbps
//Returns HAL_CAN_Start status
HAL_StatusTypeDef PDM_CAN_Init(CAN_HandleTypeDef *hcan, PDM_CAN_Config* filter_struct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af02      	add	r7, sp, #8
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	//Deinitialize CAN bus for new configuration
	HAL_CAN_DeInit(hcan);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f003 fe6d 	bl	8004ef2 <HAL_CAN_DeInit>

	//Sets CAN prescaler to match selected baud rate
	//If CAN bus is configured as disabled, leaves the function without initialization
	switch(filter_struct->baudRate)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	2b03      	cmp	r3, #3
 8001220:	d81a      	bhi.n	8001258 <PDM_CAN_Init+0x50>
 8001222:	a201      	add	r2, pc, #4	@ (adr r2, 8001228 <PDM_CAN_Init+0x20>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	08001239 	.word	0x08001239
 800122c:	08001241 	.word	0x08001241
 8001230:	08001249 	.word	0x08001249
 8001234:	08001251 	.word	0x08001251
	{
	case CAN_125kbps:
		hcan->Init.Prescaler = 40;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2228      	movs	r2, #40	@ 0x28
 800123c:	605a      	str	r2, [r3, #4]
		break;
 800123e:	e00d      	b.n	800125c <PDM_CAN_Init+0x54>

	case CAN_250kbps:
		hcan->Init.Prescaler = 20;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2214      	movs	r2, #20
 8001244:	605a      	str	r2, [r3, #4]
		break;
 8001246:	e009      	b.n	800125c <PDM_CAN_Init+0x54>

	case CAN_500kbps:
		hcan->Init.Prescaler = 10;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	220a      	movs	r2, #10
 800124c:	605a      	str	r2, [r3, #4]
		break;
 800124e:	e005      	b.n	800125c <PDM_CAN_Init+0x54>

	case CAN_1000kbps:
		hcan->Init.Prescaler = 5;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2205      	movs	r2, #5
 8001254:	605a      	str	r2, [r3, #4]
		break;
 8001256:	e001      	b.n	800125c <PDM_CAN_Init+0x54>

		default:
			return HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	e012      	b.n	8001282 <PDM_CAN_Init+0x7a>
	}

	//Reinitialize CAN bus
	HAL_CAN_Init(hcan);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f003 fd4d 	bl	8004cfc <HAL_CAN_Init>

	PDM_CAN_Filter_Config(hcan, 0, CAN_CONFIG_FILTER, CAN_CONFIG_MASK, CAN_ID_EXT);
 8001262:	2304      	movs	r3, #4
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2300      	movs	r3, #0
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f95a 	bl	8001526 <PDM_CAN_Filter_Config>

	//Initialize receive callbacks
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001272:	2102      	movs	r1, #2
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f004 f9ee 	bl	8005656 <HAL_CAN_ActivateNotification>

	//Starts CAN bus communication and leaves the function
	return HAL_CAN_Start(hcan);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f003 ff3c 	bl	80050f8 <HAL_CAN_Start>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop

0800128c <PDM_CAN_Transmit_Current>:

//Start data transmission for data with specific frequency
//CAN_HandleTypeDef *hcan - CAN handler struct pointer
//Returns HAL_CAN_AddTxMessage status
HAL_StatusTypeDef PDM_CAN_Transmit_Current(CAN_HandleTypeDef* hcan)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	72fb      	strb	r3, [r7, #11]

	//Prepares transmission header
	canTxMessage.DLC = 8;
 8001298:	4b92      	ldr	r3, [pc, #584]	@ (80014e4 <PDM_CAN_Transmit_Current+0x258>)
 800129a:	2208      	movs	r2, #8
 800129c:	611a      	str	r2, [r3, #16]
	canTxMessage.IDE = CAN_ID_STD;
 800129e:	4b91      	ldr	r3, [pc, #580]	@ (80014e4 <PDM_CAN_Transmit_Current+0x258>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
	canTxMessage.RTR = CAN_RTR_DATA;
 80012a4:	4b8f      	ldr	r3, [pc, #572]	@ (80014e4 <PDM_CAN_Transmit_Current+0x258>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
	canTxMessage.TransmitGlobalTime = DISABLE;
 80012aa:	4b8e      	ldr	r3, [pc, #568]	@ (80014e4 <PDM_CAN_Transmit_Current+0x258>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	751a      	strb	r2, [r3, #20]

	canTxMessage.StdId = CAN_ID_CURRENT;
 80012b0:	4b8c      	ldr	r3, [pc, #560]	@ (80014e4 <PDM_CAN_Transmit_Current+0x258>)
 80012b2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80012b6:	601a      	str	r2, [r3, #0]
	canTxData[0] = dataBuffer[0] >> 8;
 80012b8:	4b8b      	ldr	r3, [pc, #556]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	b29b      	uxth	r3, r3
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b8a      	ldr	r3, [pc, #552]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80012c4:	701a      	strb	r2, [r3, #0]
	canTxData[1] = dataBuffer[0] & 0xff;
 80012c6:	4b88      	ldr	r3, [pc, #544]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b87      	ldr	r3, [pc, #540]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80012ce:	705a      	strb	r2, [r3, #1]
	canTxData[2] = dataBuffer[1] >> 8;
 80012d0:	4b85      	ldr	r3, [pc, #532]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80012d2:	885b      	ldrh	r3, [r3, #2]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b84      	ldr	r3, [pc, #528]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80012dc:	709a      	strb	r2, [r3, #2]
	canTxData[3] = dataBuffer[1] & 0xff;
 80012de:	4b82      	ldr	r3, [pc, #520]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80012e0:	885b      	ldrh	r3, [r3, #2]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b81      	ldr	r3, [pc, #516]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80012e6:	70da      	strb	r2, [r3, #3]
	canTxData[4] = dataBuffer[2] >> 8;
 80012e8:	4b7f      	ldr	r3, [pc, #508]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80012ea:	889b      	ldrh	r3, [r3, #4]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b7e      	ldr	r3, [pc, #504]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80012f4:	711a      	strb	r2, [r3, #4]
	canTxData[5] = dataBuffer[2] & 0xff;
 80012f6:	4b7c      	ldr	r3, [pc, #496]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80012f8:	889b      	ldrh	r3, [r3, #4]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b7b      	ldr	r3, [pc, #492]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80012fe:	715a      	strb	r2, [r3, #5]
	canTxData[6] = dataBuffer[3] >> 8;
 8001300:	4b79      	ldr	r3, [pc, #484]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 8001302:	88db      	ldrh	r3, [r3, #6]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	b29b      	uxth	r3, r3
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b78      	ldr	r3, [pc, #480]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 800130c:	719a      	strb	r2, [r3, #6]
	canTxData[7] = dataBuffer[3] & 0xff;
 800130e:	4b76      	ldr	r3, [pc, #472]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 8001310:	88db      	ldrh	r3, [r3, #6]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b75      	ldr	r3, [pc, #468]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 8001316:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(hcan, &canTxMessage, canTxData, &canTxMailbox);
 8001318:	4b75      	ldr	r3, [pc, #468]	@ (80014f0 <PDM_CAN_Transmit_Current+0x264>)
 800131a:	4a74      	ldr	r2, [pc, #464]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 800131c:	4971      	ldr	r1, [pc, #452]	@ (80014e4 <PDM_CAN_Transmit_Current+0x258>)
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f003 ff77 	bl	8005212 <HAL_CAN_AddTxMessage>

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e002      	b.n	8001330 <PDM_CAN_Transmit_Current+0xa4>
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	3301      	adds	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f004 f849 	bl	80053c8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b03      	cmp	r3, #3
 800133a:	d002      	beq.n	8001342 <PDM_CAN_Transmit_Current+0xb6>
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d9f3      	bls.n	800132a <PDM_CAN_Transmit_Current+0x9e>

	canTxMessage.StdId = CAN_ID_CURRENT+1;
 8001342:	4b68      	ldr	r3, [pc, #416]	@ (80014e4 <PDM_CAN_Transmit_Current+0x258>)
 8001344:	f240 6201 	movw	r2, #1537	@ 0x601
 8001348:	601a      	str	r2, [r3, #0]
	canTxData[0] = dataBuffer[4] >> 8;
 800134a:	4b67      	ldr	r3, [pc, #412]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 800134c:	891b      	ldrh	r3, [r3, #8]
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	b29b      	uxth	r3, r3
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b65      	ldr	r3, [pc, #404]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 8001356:	701a      	strb	r2, [r3, #0]
	canTxData[1] = dataBuffer[4] & 0xff;
 8001358:	4b63      	ldr	r3, [pc, #396]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 800135a:	891b      	ldrh	r3, [r3, #8]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b63      	ldr	r3, [pc, #396]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 8001360:	705a      	strb	r2, [r3, #1]
	canTxData[2] = dataBuffer[5] >> 8;
 8001362:	4b61      	ldr	r3, [pc, #388]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 8001364:	895b      	ldrh	r3, [r3, #10]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	b29b      	uxth	r3, r3
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b5f      	ldr	r3, [pc, #380]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 800136e:	709a      	strb	r2, [r3, #2]
	canTxData[3] = dataBuffer[5] & 0xff;
 8001370:	4b5d      	ldr	r3, [pc, #372]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 8001372:	895b      	ldrh	r3, [r3, #10]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b5d      	ldr	r3, [pc, #372]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 8001378:	70da      	strb	r2, [r3, #3]
	canTxData[4] = dataBuffer[6] >> 8;
 800137a:	4b5b      	ldr	r3, [pc, #364]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 800137c:	899b      	ldrh	r3, [r3, #12]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	b29b      	uxth	r3, r3
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b59      	ldr	r3, [pc, #356]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 8001386:	711a      	strb	r2, [r3, #4]
	canTxData[5] = dataBuffer[6] & 0xff;
 8001388:	4b57      	ldr	r3, [pc, #348]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 800138a:	899b      	ldrh	r3, [r3, #12]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b57      	ldr	r3, [pc, #348]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 8001390:	715a      	strb	r2, [r3, #5]
	canTxData[6] = dataBuffer[7] >> 8;
 8001392:	4b55      	ldr	r3, [pc, #340]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 8001394:	89db      	ldrh	r3, [r3, #14]
 8001396:	0a1b      	lsrs	r3, r3, #8
 8001398:	b29b      	uxth	r3, r3
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b53      	ldr	r3, [pc, #332]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 800139e:	719a      	strb	r2, [r3, #6]
	canTxData[7] = dataBuffer[7] & 0xff;
 80013a0:	4b51      	ldr	r3, [pc, #324]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80013a2:	89db      	ldrh	r3, [r3, #14]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b51      	ldr	r3, [pc, #324]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80013a8:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(hcan, &canTxMessage, canTxData, &canTxMailbox);
 80013aa:	4b51      	ldr	r3, [pc, #324]	@ (80014f0 <PDM_CAN_Transmit_Current+0x264>)
 80013ac:	4a4f      	ldr	r2, [pc, #316]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80013ae:	494d      	ldr	r1, [pc, #308]	@ (80014e4 <PDM_CAN_Transmit_Current+0x258>)
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f003 ff2e 	bl	8005212 <HAL_CAN_AddTxMessage>

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80013b6:	2300      	movs	r3, #0
 80013b8:	73bb      	strb	r3, [r7, #14]
 80013ba:	e002      	b.n	80013c2 <PDM_CAN_Transmit_Current+0x136>
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	3301      	adds	r3, #1
 80013c0:	73bb      	strb	r3, [r7, #14]
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f004 f800 	bl	80053c8 <HAL_CAN_GetTxMailboxesFreeLevel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d002      	beq.n	80013d4 <PDM_CAN_Transmit_Current+0x148>
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d9f3      	bls.n	80013bc <PDM_CAN_Transmit_Current+0x130>

	canTxMessage.StdId = CAN_ID_CURRENT+2;
 80013d4:	4b43      	ldr	r3, [pc, #268]	@ (80014e4 <PDM_CAN_Transmit_Current+0x258>)
 80013d6:	f240 6202 	movw	r2, #1538	@ 0x602
 80013da:	601a      	str	r2, [r3, #0]
	canTxData[0] = dataBuffer[8] >> 8;
 80013dc:	4b42      	ldr	r3, [pc, #264]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80013de:	8a1b      	ldrh	r3, [r3, #16]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80013e8:	701a      	strb	r2, [r3, #0]
	canTxData[1] = dataBuffer[8] & 0xff;
 80013ea:	4b3f      	ldr	r3, [pc, #252]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80013ec:	8a1b      	ldrh	r3, [r3, #16]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b3e      	ldr	r3, [pc, #248]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80013f2:	705a      	strb	r2, [r3, #1]
	canTxData[2] = dataBuffer[9] >> 8;
 80013f4:	4b3c      	ldr	r3, [pc, #240]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80013f6:	8a5b      	ldrh	r3, [r3, #18]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b3b      	ldr	r3, [pc, #236]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 8001400:	709a      	strb	r2, [r3, #2]
	canTxData[3] = dataBuffer[9] & 0xff;
 8001402:	4b39      	ldr	r3, [pc, #228]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 8001404:	8a5b      	ldrh	r3, [r3, #18]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b38      	ldr	r3, [pc, #224]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 800140a:	70da      	strb	r2, [r3, #3]
	canTxData[4] = dataBuffer[10] >> 8;
 800140c:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 800140e:	8a9b      	ldrh	r3, [r3, #20]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b29b      	uxth	r3, r3
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b35      	ldr	r3, [pc, #212]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 8001418:	711a      	strb	r2, [r3, #4]
	canTxData[5] = dataBuffer[10] & 0xff;
 800141a:	4b33      	ldr	r3, [pc, #204]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 800141c:	8a9b      	ldrh	r3, [r3, #20]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b32      	ldr	r3, [pc, #200]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 8001422:	715a      	strb	r2, [r3, #5]
	canTxData[6] = dataBuffer[11] >> 8;
 8001424:	4b30      	ldr	r3, [pc, #192]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 8001426:	8adb      	ldrh	r3, [r3, #22]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	b29b      	uxth	r3, r3
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 8001430:	719a      	strb	r2, [r3, #6]
	canTxData[7] = dataBuffer[11] & 0xff;
 8001432:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 8001434:	8adb      	ldrh	r3, [r3, #22]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 800143a:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(hcan, &canTxMessage, canTxData, &canTxMailbox);
 800143c:	4b2c      	ldr	r3, [pc, #176]	@ (80014f0 <PDM_CAN_Transmit_Current+0x264>)
 800143e:	4a2b      	ldr	r2, [pc, #172]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 8001440:	4928      	ldr	r1, [pc, #160]	@ (80014e4 <PDM_CAN_Transmit_Current+0x258>)
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f003 fee5 	bl	8005212 <HAL_CAN_AddTxMessage>

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8001448:	2300      	movs	r3, #0
 800144a:	737b      	strb	r3, [r7, #13]
 800144c:	e002      	b.n	8001454 <PDM_CAN_Transmit_Current+0x1c8>
 800144e:	7b7b      	ldrb	r3, [r7, #13]
 8001450:	3301      	adds	r3, #1
 8001452:	737b      	strb	r3, [r7, #13]
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f003 ffb7 	bl	80053c8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b03      	cmp	r3, #3
 800145e:	d002      	beq.n	8001466 <PDM_CAN_Transmit_Current+0x1da>
 8001460:	7b7b      	ldrb	r3, [r7, #13]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d9f3      	bls.n	800144e <PDM_CAN_Transmit_Current+0x1c2>

	canTxMessage.StdId = CAN_ID_CURRENT+3;
 8001466:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <PDM_CAN_Transmit_Current+0x258>)
 8001468:	f240 6203 	movw	r2, #1539	@ 0x603
 800146c:	601a      	str	r2, [r3, #0]
	canTxData[0] = dataBuffer[12] >> 8;
 800146e:	4b1e      	ldr	r3, [pc, #120]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 8001470:	8b1b      	ldrh	r3, [r3, #24]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b29b      	uxth	r3, r3
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 800147a:	701a      	strb	r2, [r3, #0]
	canTxData[1] = dataBuffer[12] & 0xff;
 800147c:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 800147e:	8b1b      	ldrh	r3, [r3, #24]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 8001484:	705a      	strb	r2, [r3, #1]
	canTxData[2] = dataBuffer[13] >> 8;
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 8001488:	8b5b      	ldrh	r3, [r3, #26]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	b29b      	uxth	r3, r3
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 8001492:	709a      	strb	r2, [r3, #2]
	canTxData[3] = dataBuffer[13] & 0xff;
 8001494:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 8001496:	8b5b      	ldrh	r3, [r3, #26]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 800149c:	70da      	strb	r2, [r3, #3]
	canTxData[4] = dataBuffer[14] >> 8;
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80014a0:	8b9b      	ldrh	r3, [r3, #28]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80014aa:	711a      	strb	r2, [r3, #4]
	canTxData[5] = dataBuffer[14] & 0xff;
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80014ae:	8b9b      	ldrh	r3, [r3, #28]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80014b4:	715a      	strb	r2, [r3, #5]
	canTxData[6] = dataBuffer[15] >> 8;
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80014b8:	8bdb      	ldrh	r3, [r3, #30]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	b29b      	uxth	r3, r3
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80014c2:	719a      	strb	r2, [r3, #6]
	canTxData[7] = dataBuffer[15] & 0xff;
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <PDM_CAN_Transmit_Current+0x25c>)
 80014c6:	8bdb      	ldrh	r3, [r3, #30]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80014cc:	71da      	strb	r2, [r3, #7]

	ret_val = HAL_CAN_AddTxMessage(hcan, &canTxMessage, canTxData, &canTxMailbox);
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <PDM_CAN_Transmit_Current+0x264>)
 80014d0:	4a06      	ldr	r2, [pc, #24]	@ (80014ec <PDM_CAN_Transmit_Current+0x260>)
 80014d2:	4904      	ldr	r1, [pc, #16]	@ (80014e4 <PDM_CAN_Transmit_Current+0x258>)
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f003 fe9c 	bl	8005212 <HAL_CAN_AddTxMessage>
 80014da:	4603      	mov	r3, r0
 80014dc:	72fb      	strb	r3, [r7, #11]

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80014de:	2300      	movs	r3, #0
 80014e0:	733b      	strb	r3, [r7, #12]
 80014e2:	e00a      	b.n	80014fa <PDM_CAN_Transmit_Current+0x26e>
 80014e4:	2000069c 	.word	0x2000069c
 80014e8:	2000074c 	.word	0x2000074c
 80014ec:	20000674 	.word	0x20000674
 80014f0:	2000067c 	.word	0x2000067c
 80014f4:	7b3b      	ldrb	r3, [r7, #12]
 80014f6:	3301      	adds	r3, #1
 80014f8:	733b      	strb	r3, [r7, #12]
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f003 ff64 	bl	80053c8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b03      	cmp	r3, #3
 8001504:	d002      	beq.n	800150c <PDM_CAN_Transmit_Current+0x280>
 8001506:	7b3b      	ldrb	r3, [r7, #12]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d9f3      	bls.n	80014f4 <PDM_CAN_Transmit_Current+0x268>

	return ret_val;
 800150c:	7afb      	ldrb	r3, [r7, #11]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop

08001518 <PDM_CAN_Process_Rx_Data>:
	return ret_val;
}

//Process received data to set PWM output duty cycle
void PDM_CAN_Process_Rx_Data()
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	return;
 800151c:	bf00      	nop
}
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <PDM_CAN_Filter_Config>:
//CAN_HandleTypeDef *hcan - CAN handler struct pointer
//PWM_Control_Struct *pwm_struct - control struct for PWM output
//uint8_t pwm_out_number - number of PWM output
//Returns HAL_CAN_ConfigFilter status
static HAL_StatusTypeDef PDM_CAN_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t filter_nbr, uint32_t filter_id, uint32_t filter_mask, uint32_t filter_ide)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b08e      	sub	sp, #56	@ 0x38
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	460b      	mov	r3, r1
 8001534:	72fb      	strb	r3, [r7, #11]
	CAN_FilterTypeDef canFilterConfig;

	//Sets CAN filter configuration
	canFilterConfig.FilterBank = filter_nbr;
 8001536:	7afb      	ldrb	r3, [r7, #11]
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
	canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800153a:	2300      	movs	r3, #0
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800153e:	2301      	movs	r3, #1
 8001540:	62fb      	str	r3, [r7, #44]	@ 0x2c
	canFilterConfig.FilterIdHigh = filter_id >> 13;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0b5b      	lsrs	r3, r3, #13
 8001546:	613b      	str	r3, [r7, #16]
	canFilterConfig.FilterIdLow = (filter_id << 3) | (filter_ide & 0x0004);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	00da      	lsls	r2, r3, #3
 800154c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	4313      	orrs	r3, r2
 8001554:	617b      	str	r3, [r7, #20]
	canFilterConfig.FilterMaskIdHigh = filter_mask >> 13;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	0b5b      	lsrs	r3, r3, #13
 800155a:	61bb      	str	r3, [r7, #24]
	canFilterConfig.FilterMaskIdLow = (filter_mask << 3) | 0x0004;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	61fb      	str	r3, [r7, #28]
	canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
	canFilterConfig.FilterActivation = ENABLE;
 800156a:	2301      	movs	r3, #1
 800156c:	633b      	str	r3, [r7, #48]	@ 0x30

	//Loads CAN filter configuration into filter bank
	return HAL_CAN_ConfigFilter(hcan, &canFilterConfig);
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f003 fcdf 	bl	8004f38 <HAL_CAN_ConfigFilter>
 800157a:	4603      	mov	r3, r0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3738      	adds	r7, #56	@ 0x38
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <PDM_Init>:

//Initialize PDM
//Loads from EEPROM
//Initializes PWM
void PDM_Init(CAN_HandleTypeDef *hcan, I2C_HandleTypeDef *hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
	//Sets all outputs to zero
	Output_Reset_State();
 800158e:	f000 fd41 	bl	8002014 <Output_Reset_State>

	//Weak function for data overwriting during initialization
	PDM_Hard_Code_Config();
 8001592:	f000 fc1f 	bl	8001dd4 <PDM_Hard_Code_Config>
	//Loads both normal output and PWM output parameters
//	Output_Cfg_Load_From_EEPROM(hi2c);
//	PWM_Output_Cfg_Load_From_EEPROM(hi2c);

	//Initializes each PWM able output
	PDM_PWM_Init(hcan, &pwmOutStruct[0], 0);
 8001596:	2200      	movs	r2, #0
 8001598:	4922      	ldr	r1, [pc, #136]	@ (8001624 <PDM_Init+0xa0>)
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 ffba 	bl	8002514 <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[1], 1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	4921      	ldr	r1, [pc, #132]	@ (8001628 <PDM_Init+0xa4>)
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 ffb5 	bl	8002514 <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[2], 2);
 80015aa:	2202      	movs	r2, #2
 80015ac:	491f      	ldr	r1, [pc, #124]	@ (800162c <PDM_Init+0xa8>)
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 ffb0 	bl	8002514 <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[3], 3);
 80015b4:	2203      	movs	r2, #3
 80015b6:	491e      	ldr	r1, [pc, #120]	@ (8001630 <PDM_Init+0xac>)
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 ffab 	bl	8002514 <PDM_PWM_Init>

	//Checks input pin levels
	PDM_Input_Process();
 80015be:	f000 fdbf 	bl	8002140 <PDM_Input_Process>

	//Initializes CAN bus
	PDM_CAN_Init(hcan, &canConfig);
 80015c2:	491c      	ldr	r1, [pc, #112]	@ (8001634 <PDM_Init+0xb0>)
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fe1f 	bl	8001208 <PDM_CAN_Init>

	//Initializes CAN ID buffer
	__PDM_ID_BUFFER_INIT();
 80015ca:	2300      	movs	r3, #0
 80015cc:	81fb      	strh	r3, [r7, #14]
 80015ce:	e009      	b.n	80015e4 <PDM_Init+0x60>
 80015d0:	89fb      	ldrh	r3, [r7, #14]
 80015d2:	89fa      	ldrh	r2, [r7, #14]
 80015d4:	0052      	lsls	r2, r2, #1
 80015d6:	b291      	uxth	r1, r2
 80015d8:	4a17      	ldr	r2, [pc, #92]	@ (8001638 <PDM_Init+0xb4>)
 80015da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80015de:	89fb      	ldrh	r3, [r7, #14]
 80015e0:	3301      	adds	r3, #1
 80015e2:	81fb      	strh	r3, [r7, #14]
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	2b1d      	cmp	r3, #29
 80015e8:	d9f2      	bls.n	80015d0 <PDM_Init+0x4c>

	//Sets outputs based on input levels
	PDM_Output_Process();
 80015ea:	f000 fea9 	bl	8002340 <PDM_Output_Process>

	//Starts Multisense data conversion
	flagReading[0] = Data_Read_Ready;
 80015ee:	4b13      	ldr	r3, [pc, #76]	@ (800163c <PDM_Init+0xb8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
	flagReading[1] = Data_Read_Ready;
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <PDM_Init+0xb8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	705a      	strb	r2, [r3, #1]
	PDM_Data_Conversion(&htim6);
 80015fa:	4811      	ldr	r0, [pc, #68]	@ (8001640 <PDM_Init+0xbc>)
 80015fc:	f001 feb2 	bl	8003364 <PDM_Data_Conversion>

	//Initializes timers and ADC conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcBuffer[5], 5);
 8001600:	2205      	movs	r2, #5
 8001602:	4910      	ldr	r1, [pc, #64]	@ (8001644 <PDM_Init+0xc0>)
 8001604:	4810      	ldr	r0, [pc, #64]	@ (8001648 <PDM_Init+0xc4>)
 8001606:	f002 ff9b 	bl	8004540 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &adcBuffer[0], 5);
 800160a:	2205      	movs	r2, #5
 800160c:	490f      	ldr	r1, [pc, #60]	@ (800164c <PDM_Init+0xc8>)
 800160e:	4810      	ldr	r0, [pc, #64]	@ (8001650 <PDM_Init+0xcc>)
 8001610:	f002 ff96 	bl	8004540 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim7);
 8001614:	480f      	ldr	r0, [pc, #60]	@ (8001654 <PDM_Init+0xd0>)
 8001616:	f008 fc91 	bl	8009f3c <HAL_TIM_Base_Start_IT>

	return;
 800161a:	bf00      	nop
}
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200008c4 	.word	0x200008c4
 8001628:	200008e4 	.word	0x200008e4
 800162c:	20000904 	.word	0x20000904
 8001630:	20000924 	.word	0x20000924
 8001634:	200006b4 	.word	0x200006b4
 8001638:	20000788 	.word	0x20000788
 800163c:	200007dc 	.word	0x200007dc
 8001640:	20000414 	.word	0x20000414
 8001644:	200007ce 	.word	0x200007ce
 8001648:	20000168 	.word	0x20000168
 800164c:	200007c4 	.word	0x200007c4
 8001650:	200001b0 	.word	0x200001b0
 8001654:	2000045c 	.word	0x2000045c

08001658 <PDM_USB_Process>:

void PDM_USB_Process(uint8_t *Data, uint16_t Size)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
	return;
 8001664:	bf00      	nop
}
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <PDM_PWM_Load_SoftStart_From_EEPROM>:
{
	return;
}

HAL_StatusTypeDef PDM_PWM_Load_SoftStart_From_EEPROM(I2C_HandleTypeDef*hi2c, PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	4613      	mov	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer;
	uint16_t buffer_address = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	82fb      	strh	r3, [r7, #22]
	HAL_StatusTypeDef retVal = HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	757b      	strb	r3, [r7, #21]

	switch(pwm_out_number)
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d817      	bhi.n	80016bc <PDM_PWM_Load_SoftStart_From_EEPROM+0x4c>
 800168c:	a201      	add	r2, pc, #4	@ (adr r2, 8001694 <PDM_PWM_Load_SoftStart_From_EEPROM+0x24>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	080016a5 	.word	0x080016a5
 8001698:	080016ab 	.word	0x080016ab
 800169c:	080016b1 	.word	0x080016b1
 80016a0:	080016b7 	.word	0x080016b7
	{
	case 0:
		buffer_address = EEPROM_PWM1_SST1_ADDRESS;
 80016a4:	2300      	movs	r3, #0
 80016a6:	82fb      	strh	r3, [r7, #22]
		break;
 80016a8:	e008      	b.n	80016bc <PDM_PWM_Load_SoftStart_From_EEPROM+0x4c>

	case 1:
		buffer_address = EEPROM_PWM2_SST1_ADDRESS;
 80016aa:	2300      	movs	r3, #0
 80016ac:	82fb      	strh	r3, [r7, #22]
		break;
 80016ae:	e005      	b.n	80016bc <PDM_PWM_Load_SoftStart_From_EEPROM+0x4c>

	case 2:
		buffer_address = EEPROM_PWM3_SST1_ADDRESS;
 80016b0:	2300      	movs	r3, #0
 80016b2:	82fb      	strh	r3, [r7, #22]
		break;
 80016b4:	e002      	b.n	80016bc <PDM_PWM_Load_SoftStart_From_EEPROM+0x4c>

	case 3:
		buffer_address = EEPROM_PWM4_SST1_ADDRESS;
 80016b6:	2300      	movs	r3, #0
 80016b8:	82fb      	strh	r3, [r7, #22]
		break;
 80016ba:	bf00      	nop
	}



	switch(pwm_struct->pwmFrequency)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	885b      	ldrh	r3, [r3, #2]
 80016c0:	f240 3283 	movw	r2, #899	@ 0x383
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d062      	beq.n	800178e <PDM_PWM_Load_SoftStart_From_EEPROM+0x11e>
 80016c8:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80016cc:	f280 80e3 	bge.w	8001896 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 80016d0:	f240 1267 	movw	r2, #359	@ 0x167
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d067      	beq.n	80017a8 <PDM_PWM_Load_SoftStart_From_EEPROM+0x138>
 80016d8:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80016dc:	f280 80db 	bge.w	8001896 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 80016e0:	2bb3      	cmp	r3, #179	@ 0xb3
 80016e2:	d06d      	beq.n	80017c0 <PDM_PWM_Load_SoftStart_From_EEPROM+0x150>
 80016e4:	2bb3      	cmp	r3, #179	@ 0xb3
 80016e6:	f300 80d6 	bgt.w	8001896 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 80016ea:	2b77      	cmp	r3, #119	@ 0x77
 80016ec:	d073      	beq.n	80017d6 <PDM_PWM_Load_SoftStart_From_EEPROM+0x166>
 80016ee:	2b77      	cmp	r3, #119	@ 0x77
 80016f0:	f300 80d1 	bgt.w	8001896 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 80016f4:	2b23      	cmp	r3, #35	@ 0x23
 80016f6:	dc47      	bgt.n	8001788 <PDM_PWM_Load_SoftStart_From_EEPROM+0x118>
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	f2c0 80cc 	blt.w	8001896 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 80016fe:	3b05      	subs	r3, #5
 8001700:	2b1e      	cmp	r3, #30
 8001702:	f200 80c8 	bhi.w	8001896 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 8001706:	a201      	add	r2, pc, #4	@ (adr r2, 800170c <PDM_PWM_Load_SoftStart_From_EEPROM+0x9c>)
 8001708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170c:	08001881 	.word	0x08001881
 8001710:	08001897 	.word	0x08001897
 8001714:	08001897 	.word	0x08001897
 8001718:	08001867 	.word	0x08001867
 800171c:	08001897 	.word	0x08001897
 8001720:	08001897 	.word	0x08001897
 8001724:	08001843 	.word	0x08001843
 8001728:	08001897 	.word	0x08001897
 800172c:	08001897 	.word	0x08001897
 8001730:	08001897 	.word	0x08001897
 8001734:	08001897 	.word	0x08001897
 8001738:	08001897 	.word	0x08001897
 800173c:	0800182d 	.word	0x0800182d
 8001740:	08001897 	.word	0x08001897
 8001744:	08001897 	.word	0x08001897
 8001748:	08001897 	.word	0x08001897
 800174c:	08001897 	.word	0x08001897
 8001750:	08001897 	.word	0x08001897
 8001754:	08001897 	.word	0x08001897
 8001758:	08001897 	.word	0x08001897
 800175c:	08001897 	.word	0x08001897
 8001760:	08001897 	.word	0x08001897
 8001764:	08001897 	.word	0x08001897
 8001768:	08001897 	.word	0x08001897
 800176c:	08001897 	.word	0x08001897
 8001770:	08001897 	.word	0x08001897
 8001774:	08001897 	.word	0x08001897
 8001778:	08001897 	.word	0x08001897
 800177c:	08001897 	.word	0x08001897
 8001780:	08001897 	.word	0x08001897
 8001784:	08001809 	.word	0x08001809
 8001788:	2b59      	cmp	r3, #89	@ 0x59
 800178a:	d036      	beq.n	80017fa <PDM_PWM_Load_SoftStart_From_EEPROM+0x18a>
	case PWM_FREQ_15000HZ:
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 15000) / 1000;
		break;

	default:
		break;
 800178c:	e083      	b.n	8001896 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 100) / 1000;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	885b      	ldrh	r3, [r3, #2]
 8001794:	4a44      	ldr	r2, [pc, #272]	@ (80018a8 <PDM_PWM_Load_SoftStart_From_EEPROM+0x238>)
 8001796:	fb82 1203 	smull	r1, r2, r2, r3
 800179a:	1092      	asrs	r2, r2, #2
 800179c:	17db      	asrs	r3, r3, #31
 800179e:	1ad2      	subs	r2, r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	609a      	str	r2, [r3, #8]
		break;
 80017a6:	e077      	b.n	8001898 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 250) / 1000;
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	885b      	ldrh	r3, [r3, #2]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	da00      	bge.n	80017b4 <PDM_PWM_Load_SoftStart_From_EEPROM+0x144>
 80017b2:	3303      	adds	r3, #3
 80017b4:	109b      	asrs	r3, r3, #2
 80017b6:	461a      	mov	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	609a      	str	r2, [r3, #8]
		break;
 80017be:	e06b      	b.n	8001898 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 500) / 1000;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	885b      	ldrh	r3, [r3, #2]
 80017c6:	0fda      	lsrs	r2, r3, #31
 80017c8:	4413      	add	r3, r2
 80017ca:	105b      	asrs	r3, r3, #1
 80017cc:	461a      	mov	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	609a      	str	r2, [r3, #8]
		break;
 80017d4:	e060      	b.n	8001898 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 750) / 1000;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	885b      	ldrh	r3, [r3, #2]
 80017dc:	461a      	mov	r2, r3
 80017de:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	4a31      	ldr	r2, [pc, #196]	@ (80018ac <PDM_PWM_Load_SoftStart_From_EEPROM+0x23c>)
 80017e8:	fb82 1203 	smull	r1, r2, r2, r3
 80017ec:	1192      	asrs	r2, r2, #6
 80017ee:	17db      	asrs	r3, r3, #31
 80017f0:	1ad2      	subs	r2, r2, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	609a      	str	r2, [r3, #8]
		break;
 80017f8:	e04e      	b.n	8001898 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 1000) / 1000;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	885a      	ldrh	r2, [r3, #2]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	609a      	str	r2, [r3, #8]
		break;
 8001806:	e047      	b.n	8001898 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 2500) / 1000;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	885b      	ldrh	r3, [r3, #2]
 800180e:	461a      	mov	r2, r3
 8001810:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	4a24      	ldr	r2, [pc, #144]	@ (80018ac <PDM_PWM_Load_SoftStart_From_EEPROM+0x23c>)
 800181a:	fb82 1203 	smull	r1, r2, r2, r3
 800181e:	1192      	asrs	r2, r2, #6
 8001820:	17db      	asrs	r3, r3, #31
 8001822:	1ad2      	subs	r2, r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	609a      	str	r2, [r3, #8]
		break;
 800182a:	e035      	b.n	8001898 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 5000) / 1000;
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	885b      	ldrh	r3, [r3, #2]
 8001832:	461a      	mov	r2, r3
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	441a      	add	r2, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	609a      	str	r2, [r3, #8]
		break;
 8001840:	e02a      	b.n	8001898 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 7500) / 1000;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	885b      	ldrh	r3, [r3, #2]
 8001848:	461a      	mov	r2, r3
 800184a:	f641 534c 	movw	r3, #7500	@ 0x1d4c
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	4a16      	ldr	r2, [pc, #88]	@ (80018ac <PDM_PWM_Load_SoftStart_From_EEPROM+0x23c>)
 8001854:	fb82 1203 	smull	r1, r2, r2, r3
 8001858:	1192      	asrs	r2, r2, #6
 800185a:	17db      	asrs	r3, r3, #31
 800185c:	1ad2      	subs	r2, r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	609a      	str	r2, [r3, #8]
		break;
 8001864:	e018      	b.n	8001898 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 10000) / 1000;
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	885b      	ldrh	r3, [r3, #2]
 800186c:	461a      	mov	r2, r3
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	461a      	mov	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	609a      	str	r2, [r3, #8]
		break;
 800187e:	e00b      	b.n	8001898 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 15000) / 1000;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	885b      	ldrh	r3, [r3, #2]
 8001886:	461a      	mov	r2, r3
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9a      	subs	r2, r3, r2
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	609a      	str	r2, [r3, #8]
		break;
 8001894:	e000      	b.n	8001898 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		break;
 8001896:	bf00      	nop
	}

	return retVal;
 8001898:	7d7b      	ldrb	r3, [r7, #21]
}
 800189a:	4618      	mov	r0, r3
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	66666667 	.word	0x66666667
 80018ac:	10624dd3 	.word	0x10624dd3

080018b0 <PDM_PWM_Map_Load_From_EEPROM>:

HAL_StatusTypeDef PDM_PWM_Map_Load_From_EEPROM(I2C_HandleTypeDef* hi2c, PWM_Control_Struct* pwm_struct, uint16_t mem_address)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	f6ad 7dac 	subw	sp, sp, #4012	@ 0xfac
 80018b6:	af04      	add	r7, sp, #16
 80018b8:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 80018bc:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 80018c0:	6018      	str	r0, [r3, #0]
 80018c2:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 80018c6:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 80018ca:	6019      	str	r1, [r3, #0]
 80018cc:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 80018d0:	f6a3 7392 	subw	r3, r3, #3986	@ 0xf92
 80018d4:	801a      	strh	r2, [r3, #0]
	uint8_t buffer[EEPROM_PWM_CFG_MAX_SIZE];
	uint16_t bufferAddress = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8a7 3f90 	strh.w	r3, [r7, #3984]	@ 0xf90
	HAL_StatusTypeDef retVal = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 3f8f 	strb.w	r3, [r7, #3983]	@ 0xf8f

	if(pwm_struct->outputType != OutType_Map)
 80018e2:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 80018e6:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	791b      	ldrb	r3, [r3, #4]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d002      	beq.n	80018f8 <PDM_PWM_Map_Load_From_EEPROM+0x48>
		return retVal;
 80018f2:	f897 3f8f 	ldrb.w	r3, [r7, #3983]	@ 0xf8f
 80018f6:	e267      	b.n	8001dc8 <PDM_PWM_Map_Load_From_EEPROM+0x518>

	retVal = HAL_I2C_Mem_Read(hi2c, EEPROM_I2C_ADDRESS, mem_address, 2, buffer, sizeof(buffer), EEPROM_TIMEOUT);
 80018f8:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 80018fc:	f6a3 7392 	subw	r3, r3, #3986	@ 0xf92
 8001900:	881a      	ldrh	r2, [r3, #0]
 8001902:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001906:	f6a3 708c 	subw	r0, r3, #3980	@ 0xf8c
 800190a:	230a      	movs	r3, #10
 800190c:	9302      	str	r3, [sp, #8]
 800190e:	f640 737f 	movw	r3, #3967	@ 0xf7f
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2302      	movs	r3, #2
 800191c:	21a0      	movs	r1, #160	@ 0xa0
 800191e:	6800      	ldr	r0, [r0, #0]
 8001920:	f005 f9ee 	bl	8006d00 <HAL_I2C_Mem_Read>
 8001924:	4603      	mov	r3, r0
 8001926:	f887 3f8f 	strb.w	r3, [r7, #3983]	@ 0xf8f

	if(pwm_struct->pwmMapStruct != NULL)
 800192a:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 800192e:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 823d 	beq.w	8001db6 <PDM_PWM_Map_Load_From_EEPROM+0x506>
	{
		pwm_struct->pwmMapStruct->mapLengths[0] = buffer[0];
 800193c:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001940:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f607 7298 	addw	r2, r7, #3992	@ 0xf98
 800194c:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8001950:	7812      	ldrb	r2, [r2, #0]
 8001952:	711a      	strb	r2, [r3, #4]
		pwm_struct->pwmMapStruct->mapLengths[1] = buffer[1];
 8001954:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001958:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f607 7298 	addw	r2, r7, #3992	@ 0xf98
 8001964:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8001968:	7852      	ldrb	r2, [r2, #1]
 800196a:	715a      	strb	r2, [r3, #5]

		bufferAddress += 2;
 800196c:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	@ 0xf90
 8001970:	3302      	adds	r3, #2
 8001972:	f8a7 3f90 	strh.w	r3, [r7, #3984]	@ 0xf90

		if((pwm_struct->pwmMapStruct->mapLengths[0] > PWM_TABLE_MAX_SIZE)
 8001976:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 800197a:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	791b      	ldrb	r3, [r3, #4]
 8001984:	2b10      	cmp	r3, #16
 8001986:	d808      	bhi.n	800199a <PDM_PWM_Map_Load_From_EEPROM+0xea>
				|| (pwm_struct->pwmMapStruct->mapLengths[1] > PWM_TABLE_MAX_SIZE))
 8001988:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 800198c:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	795b      	ldrb	r3, [r3, #5]
 8001996:	2b10      	cmp	r3, #16
 8001998:	d906      	bls.n	80019a8 <PDM_PWM_Map_Load_From_EEPROM+0xf8>
			pwm_struct->outputType = OutType_Error;
 800199a:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 800199e:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2204      	movs	r2, #4
 80019a6:	711a      	strb	r2, [r3, #4]

		if(pwm_struct->outputType == OutType_Map)
 80019a8:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 80019ac:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	f040 80a4 	bne.w	8001b02 <PDM_PWM_Map_Load_From_EEPROM+0x252>
		{
			pwm_struct->pwmMapStruct->dutyCycleMap = malloc(pwm_struct->pwmMapStruct->mapLengths[0] * sizeof(uint16_t*));
 80019ba:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 80019be:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	791b      	ldrb	r3, [r3, #4]
 80019c8:	009a      	lsls	r2, r3, #2
 80019ca:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 80019ce:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699c      	ldr	r4, [r3, #24]
 80019d6:	4610      	mov	r0, r2
 80019d8:	f00e fab4 	bl	800ff44 <malloc>
 80019dc:	4603      	mov	r3, r0
 80019de:	6163      	str	r3, [r4, #20]
			pwm_struct->pwmMapStruct->commandVarStep[0] = malloc(pwm_struct->pwmMapStruct->mapLengths[0] * sizeof(int16_t));
 80019e0:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 80019e4:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	791b      	ldrb	r3, [r3, #4]
 80019ee:	005a      	lsls	r2, r3, #1
 80019f0:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 80019f4:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699c      	ldr	r4, [r3, #24]
 80019fc:	4610      	mov	r0, r2
 80019fe:	f00e faa1 	bl	800ff44 <malloc>
 8001a02:	4603      	mov	r3, r0
 8001a04:	60e3      	str	r3, [r4, #12]
			pwm_struct->pwmMapStruct->commandVarStep[1] = malloc(pwm_struct->pwmMapStruct->mapLengths[1] * sizeof(int16_t));
 8001a06:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001a0a:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	795b      	ldrb	r3, [r3, #5]
 8001a14:	005a      	lsls	r2, r3, #1
 8001a16:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001a1a:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699c      	ldr	r4, [r3, #24]
 8001a22:	4610      	mov	r0, r2
 8001a24:	f00e fa8e 	bl	800ff44 <malloc>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	6123      	str	r3, [r4, #16]

			if((pwm_struct->pwmMapStruct->dutyCycleMap == NULL)
 8001a2c:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001a30:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d011      	beq.n	8001a62 <PDM_PWM_Map_Load_From_EEPROM+0x1b2>
					|| (pwm_struct->pwmMapStruct->commandVarStep[0] == NULL)
 8001a3e:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001a42:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <PDM_PWM_Map_Load_From_EEPROM+0x1b2>
					|| (pwm_struct->pwmMapStruct->commandVarStep[1] == NULL))
 8001a50:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001a54:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <PDM_PWM_Map_Load_From_EEPROM+0x1c0>
				pwm_struct->outputType = OutType_Error;
 8001a62:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001a66:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	711a      	strb	r2, [r3, #4]

			for(uint8_t i = 0; (i < pwm_struct->pwmMapStruct->mapLengths[0]) && (pwm_struct->outputType == OutType_Map); i++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 3f97 	strb.w	r3, [r7, #3991]	@ 0xf97
 8001a76:	e031      	b.n	8001adc <PDM_PWM_Map_Load_From_EEPROM+0x22c>
			{
				pwm_struct->pwmMapStruct->dutyCycleMap[i] = malloc(pwm_struct->pwmMapStruct->mapLengths[1] * sizeof(uint16_t));
 8001a78:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001a7c:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	795b      	ldrb	r3, [r3, #5]
 8001a86:	0059      	lsls	r1, r3, #1
 8001a88:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001a8c:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	f897 3f97 	ldrb.w	r3, [r7, #3991]	@ 0xf97
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	18d4      	adds	r4, r2, r3
 8001a9e:	4608      	mov	r0, r1
 8001aa0:	f00e fa50 	bl	800ff44 <malloc>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	6023      	str	r3, [r4, #0]

				if(pwm_struct->pwmMapStruct->dutyCycleMap[i] == NULL)
 8001aa8:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001aac:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	f897 3f97 	ldrb.w	r3, [r7, #3991]	@ 0xf97
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d106      	bne.n	8001ad2 <PDM_PWM_Map_Load_From_EEPROM+0x222>
					pwm_struct->outputType = OutType_Error;
 8001ac4:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001ac8:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2204      	movs	r2, #4
 8001ad0:	711a      	strb	r2, [r3, #4]
			for(uint8_t i = 0; (i < pwm_struct->pwmMapStruct->mapLengths[0]) && (pwm_struct->outputType == OutType_Map); i++)
 8001ad2:	f897 3f97 	ldrb.w	r3, [r7, #3991]	@ 0xf97
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f887 3f97 	strb.w	r3, [r7, #3991]	@ 0xf97
 8001adc:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001ae0:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	791b      	ldrb	r3, [r3, #4]
 8001aea:	f897 2f97 	ldrb.w	r2, [r7, #3991]	@ 0xf97
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d207      	bcs.n	8001b02 <PDM_PWM_Map_Load_From_EEPROM+0x252>
 8001af2:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001af6:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	791b      	ldrb	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d0ba      	beq.n	8001a78 <PDM_PWM_Map_Load_From_EEPROM+0x1c8>
			}
		}

		if(pwm_struct->outputType == OutType_Map)
 8001b02:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001b06:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	791b      	ldrb	r3, [r3, #4]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	f040 8158 	bne.w	8001dc4 <PDM_PWM_Map_Load_From_EEPROM+0x514>
		{
			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3f96 	strb.w	r3, [r7, #3990]	@ 0xf96
 8001b1a:	e045      	b.n	8001ba8 <PDM_PWM_Map_Load_From_EEPROM+0x2f8>
			{
				pwm_struct->pwmMapStruct->commandVarStep[0][i]  = buffer[(i * 2) + bufferAddress] << 8;
 8001b1c:	f897 3f96 	ldrb.w	r3, [r7, #3990]	@ 0xf96
 8001b20:	005a      	lsls	r2, r3, #1
 8001b22:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	@ 0xf90
 8001b26:	4413      	add	r3, r2
 8001b28:	f607 7298 	addw	r2, r7, #3992	@ 0xf98
 8001b2c:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8001b30:	5cd3      	ldrb	r3, [r2, r3]
 8001b32:	0219      	lsls	r1, r3, #8
 8001b34:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001b38:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	f897 3f96 	ldrb.w	r3, [r7, #3990]	@ 0xf96
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	b20a      	sxth	r2, r1
 8001b4c:	801a      	strh	r2, [r3, #0]
				pwm_struct->pwmMapStruct->commandVarStep[0][i] |= buffer[(i * 2) + 1 + bufferAddress];
 8001b4e:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001b52:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	f897 3f96 	ldrb.w	r3, [r7, #3990]	@ 0xf96
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001b68:	f897 3f96 	ldrb.w	r3, [r7, #3990]	@ 0xf96
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	@ 0xf90
 8001b74:	4413      	add	r3, r2
 8001b76:	f607 7298 	addw	r2, r7, #3992	@ 0xf98
 8001b7a:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001b86:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	68d8      	ldr	r0, [r3, #12]
 8001b90:	f897 3f96 	ldrb.w	r3, [r7, #3990]	@ 0xf96
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4403      	add	r3, r0
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	b212      	sxth	r2, r2
 8001b9c:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 8001b9e:	f897 3f96 	ldrb.w	r3, [r7, #3990]	@ 0xf96
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f887 3f96 	strb.w	r3, [r7, #3990]	@ 0xf96
 8001ba8:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001bac:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	791b      	ldrb	r3, [r3, #4]
 8001bb6:	f897 2f96 	ldrb.w	r2, [r7, #3990]	@ 0xf96
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d3ae      	bcc.n	8001b1c <PDM_PWM_Map_Load_From_EEPROM+0x26c>
			}

			bufferAddress += pwm_struct->pwmMapStruct->mapLengths[0] * 2;
 8001bbe:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001bc2:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	791b      	ldrb	r3, [r3, #4]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	@ 0xf90
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f8a7 3f90 	strh.w	r3, [r7, #3984]	@ 0xf90

			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[1]; i++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3f95 	strb.w	r3, [r7, #3989]	@ 0xf95
 8001be0:	e045      	b.n	8001c6e <PDM_PWM_Map_Load_From_EEPROM+0x3be>
			{
				pwm_struct->pwmMapStruct->commandVarStep[1][i]  = buffer[(i * 2) + bufferAddress] << 8;
 8001be2:	f897 3f95 	ldrb.w	r3, [r7, #3989]	@ 0xf95
 8001be6:	005a      	lsls	r2, r3, #1
 8001be8:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	@ 0xf90
 8001bec:	4413      	add	r3, r2
 8001bee:	f607 7298 	addw	r2, r7, #3992	@ 0xf98
 8001bf2:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	0219      	lsls	r1, r3, #8
 8001bfa:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001bfe:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	f897 3f95 	ldrb.w	r3, [r7, #3989]	@ 0xf95
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	b20a      	sxth	r2, r1
 8001c12:	801a      	strh	r2, [r3, #0]
				pwm_struct->pwmMapStruct->commandVarStep[1][i] |= buffer[(i * 2) + 1 + bufferAddress];
 8001c14:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001c18:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	f897 3f95 	ldrb.w	r3, [r7, #3989]	@ 0xf95
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001c2e:	f897 3f95 	ldrb.w	r3, [r7, #3989]	@ 0xf95
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	@ 0xf90
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f607 7298 	addw	r2, r7, #3992	@ 0xf98
 8001c40:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8001c44:	5cd3      	ldrb	r3, [r2, r3]
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001c4c:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	6918      	ldr	r0, [r3, #16]
 8001c56:	f897 3f95 	ldrb.w	r3, [r7, #3989]	@ 0xf95
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4403      	add	r3, r0
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	b212      	sxth	r2, r2
 8001c62:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[1]; i++)
 8001c64:	f897 3f95 	ldrb.w	r3, [r7, #3989]	@ 0xf95
 8001c68:	3301      	adds	r3, #1
 8001c6a:	f887 3f95 	strb.w	r3, [r7, #3989]	@ 0xf95
 8001c6e:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001c72:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	795b      	ldrb	r3, [r3, #5]
 8001c7c:	f897 2f95 	ldrb.w	r2, [r7, #3989]	@ 0xf95
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d3ae      	bcc.n	8001be2 <PDM_PWM_Map_Load_From_EEPROM+0x332>
			}

			bufferAddress += pwm_struct->pwmMapStruct->mapLengths[1] * 2;
 8001c84:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001c88:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	795b      	ldrb	r3, [r3, #5]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	@ 0xf90
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f8a7 3f90 	strh.w	r3, [r7, #3984]	@ 0xf90

			for(uint8_t x = 0; x < pwm_struct->pwmMapStruct->mapLengths[0]; x++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 3f94 	strb.w	r3, [r7, #3988]	@ 0xf94
 8001ca6:	e079      	b.n	8001d9c <PDM_PWM_Map_Load_From_EEPROM+0x4ec>
			{
				for(uint8_t y = 0; y < pwm_struct->pwmMapStruct->mapLengths[1]; y++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3f93 	strb.w	r3, [r7, #3987]	@ 0xf93
 8001cae:	e065      	b.n	8001d7c <PDM_PWM_Map_Load_From_EEPROM+0x4cc>
				{
					pwm_struct->pwmMapStruct->dutyCycleMap[x][y]  = buffer[(((10 * x) + y) * 2) + bufferAddress] << 8;
 8001cb0:	f897 2f94 	ldrb.w	r2, [r7, #3988]	@ 0xf94
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f897 3f93 	ldrb.w	r3, [r7, #3987]	@ 0xf93
 8001cc2:	4413      	add	r3, r2
 8001cc4:	005a      	lsls	r2, r3, #1
 8001cc6:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	@ 0xf90
 8001cca:	4413      	add	r3, r2
 8001ccc:	f607 7298 	addw	r2, r7, #3992	@ 0xf98
 8001cd0:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8001cd4:	5cd3      	ldrb	r3, [r2, r3]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001cdc:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	f897 3f94 	ldrb.w	r3, [r7, #3988]	@ 0xf94
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	f897 3f93 	ldrb.w	r3, [r7, #3987]	@ 0xf93
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	020a      	lsls	r2, r1, #8
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	801a      	strh	r2, [r3, #0]
					pwm_struct->pwmMapStruct->dutyCycleMap[x][y] |= buffer[(((10 * x) + y) * 2) + 1 + bufferAddress];
 8001cfe:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001d02:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	695a      	ldr	r2, [r3, #20]
 8001d0c:	f897 3f94 	ldrb.w	r3, [r7, #3988]	@ 0xf94
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	f897 3f93 	ldrb.w	r3, [r7, #3987]	@ 0xf93
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	8819      	ldrh	r1, [r3, #0]
 8001d20:	f897 2f94 	ldrb.w	r2, [r7, #3988]	@ 0xf94
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f897 3f93 	ldrb.w	r3, [r7, #3987]	@ 0xf93
 8001d32:	4413      	add	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	@ 0xf90
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f607 7298 	addw	r2, r7, #3992	@ 0xf98
 8001d42:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8001d46:	5cd3      	ldrb	r3, [r2, r3]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001d4e:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	f897 3f94 	ldrb.w	r3, [r7, #3988]	@ 0xf94
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	f897 3f93 	ldrb.w	r3, [r7, #3987]	@ 0xf93
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	ea41 0200 	orr.w	r2, r1, r0
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	801a      	strh	r2, [r3, #0]
				for(uint8_t y = 0; y < pwm_struct->pwmMapStruct->mapLengths[1]; y++)
 8001d72:	f897 3f93 	ldrb.w	r3, [r7, #3987]	@ 0xf93
 8001d76:	3301      	adds	r3, #1
 8001d78:	f887 3f93 	strb.w	r3, [r7, #3987]	@ 0xf93
 8001d7c:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001d80:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	795b      	ldrb	r3, [r3, #5]
 8001d8a:	f897 2f93 	ldrb.w	r2, [r7, #3987]	@ 0xf93
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d38e      	bcc.n	8001cb0 <PDM_PWM_Map_Load_From_EEPROM+0x400>
			for(uint8_t x = 0; x < pwm_struct->pwmMapStruct->mapLengths[0]; x++)
 8001d92:	f897 3f94 	ldrb.w	r3, [r7, #3988]	@ 0xf94
 8001d96:	3301      	adds	r3, #1
 8001d98:	f887 3f94 	strb.w	r3, [r7, #3988]	@ 0xf94
 8001d9c:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001da0:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	791b      	ldrb	r3, [r3, #4]
 8001daa:	f897 2f94 	ldrb.w	r2, [r7, #3988]	@ 0xf94
 8001dae:	429a      	cmp	r2, r3
 8001db0:	f4ff af7a 	bcc.w	8001ca8 <PDM_PWM_Map_Load_From_EEPROM+0x3f8>
 8001db4:	e006      	b.n	8001dc4 <PDM_PWM_Map_Load_From_EEPROM+0x514>
			}
		}
	}

	else
		pwm_struct->outputType = OutType_Error;
 8001db6:	f607 7398 	addw	r3, r7, #3992	@ 0xf98
 8001dba:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	711a      	strb	r2, [r3, #4]

	return retVal;
 8001dc4:	f897 3f8f 	ldrb.w	r3, [r7, #3983]	@ 0xf8f
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f607 779c 	addw	r7, r7, #3996	@ 0xf9c
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
	...

08001dd4 <PDM_Hard_Code_Config>:

//Use for configuration without or with partial EEPROM data
__weak void PDM_Hard_Code_Config()
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
	//Output 1 - Bomba de Combustível
	outputStruct[0].outEnable[0] = Output_Enabled;
 8001dda:	4b8a      	ldr	r3, [pc, #552]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	731a      	strb	r2, [r3, #12]
	outputStruct[0].inputEnable[0] = 0x0021;
 8001de0:	4b88      	ldr	r3, [pc, #544]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001de2:	2221      	movs	r2, #33	@ 0x21
 8001de4:	801a      	strh	r2, [r3, #0]
	outputStruct[0].inputLevels[0] = 0x0000;
 8001de6:	4b87      	ldr	r3, [pc, #540]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	809a      	strh	r2, [r3, #4]
	pwmOutStruct[0].pwmFrequency = PWM_FREQ_10000HZ;
 8001dec:	4b86      	ldr	r3, [pc, #536]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001dee:	2208      	movs	r2, #8
 8001df0:	805a      	strh	r2, [r3, #2]
	pwmOutStruct[0].outputType = OutType_Preset;
 8001df2:	4b85      	ldr	r3, [pc, #532]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	711a      	strb	r2, [r3, #4]
	pwmOutStruct[0].presetEnable[0] = 0x0021;
 8001df8:	4b83      	ldr	r3, [pc, #524]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001dfa:	2221      	movs	r2, #33	@ 0x21
 8001dfc:	80da      	strh	r2, [r3, #6]
	pwmOutStruct[0].presetInputs[0] = 0x0000;
 8001dfe:	4b82      	ldr	r3, [pc, #520]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	815a      	strh	r2, [r3, #10]
	pwmOutStruct[0].presetDutyCycle[0] = 1000;
 8001e04:	4b80      	ldr	r3, [pc, #512]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e0a:	81da      	strh	r2, [r3, #14]

	//Output 2 - Ventoinha Esquerda
	outputStruct[1].outEnable[0] = Output_Enabled;
 8001e0c:	4b7d      	ldr	r3, [pc, #500]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	769a      	strb	r2, [r3, #26]
	outputStruct[1].inputEnable[0] = 0x0024;
 8001e12:	4b7c      	ldr	r3, [pc, #496]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001e14:	2224      	movs	r2, #36	@ 0x24
 8001e16:	81da      	strh	r2, [r3, #14]
	outputStruct[1].inputLevels[0] = 0x0000;
 8001e18:	4b7a      	ldr	r3, [pc, #488]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	825a      	strh	r2, [r3, #18]
	pwmOutStruct[1].pwmFrequency = PWM_FREQ_10000HZ;
 8001e1e:	4b7a      	ldr	r3, [pc, #488]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e20:	2208      	movs	r2, #8
 8001e22:	845a      	strh	r2, [r3, #34]	@ 0x22
	pwmOutStruct[1].outputType = OutType_Preset;
 8001e24:	4b78      	ldr	r3, [pc, #480]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pwmOutStruct[1].presetEnable[0] = 0x0024;
 8001e2c:	4b76      	ldr	r3, [pc, #472]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e2e:	2224      	movs	r2, #36	@ 0x24
 8001e30:	84da      	strh	r2, [r3, #38]	@ 0x26
	pwmOutStruct[1].presetInputs[0] = 0x0000;
 8001e32:	4b75      	ldr	r3, [pc, #468]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
	pwmOutStruct[1].presetDutyCycle[0] = 1000;
 8001e38:	4b73      	ldr	r3, [pc, #460]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

	//Output 3 - Ventoinha Direita
	outputStruct[2].outEnable[0] = Output_Enabled;
 8001e40:	4b70      	ldr	r3, [pc, #448]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	outputStruct[2].inputEnable[0] = 0x0024;
 8001e48:	4b6e      	ldr	r3, [pc, #440]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001e4a:	2224      	movs	r2, #36	@ 0x24
 8001e4c:	839a      	strh	r2, [r3, #28]
	outputStruct[2].inputLevels[0] = 0x0000;
 8001e4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	841a      	strh	r2, [r3, #32]
	pwmOutStruct[2].pwmFrequency = PWM_FREQ_10000HZ;
 8001e54:	4b6c      	ldr	r3, [pc, #432]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e56:	2208      	movs	r2, #8
 8001e58:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	pwmOutStruct[2].outputType = OutType_Preset;
 8001e5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	pwmOutStruct[2].presetEnable[0] = 0x0024;
 8001e64:	4b68      	ldr	r3, [pc, #416]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e66:	2224      	movs	r2, #36	@ 0x24
 8001e68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	pwmOutStruct[2].presetInputs[0] = 0x0000;
 8001e6c:	4b66      	ldr	r3, [pc, #408]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	pwmOutStruct[2].presetDutyCycle[0] = 1000;
 8001e74:	4b64      	ldr	r3, [pc, #400]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e7a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

	//Output 4 - Fueltech
	outputStruct[3].outEnable[0] = Output_Enabled;
 8001e7e:	4b61      	ldr	r3, [pc, #388]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	outputStruct[3].inputEnable[0] = 0x0020;
 8001e86:	4b5f      	ldr	r3, [pc, #380]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001e88:	2220      	movs	r2, #32
 8001e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
	outputStruct[3].inputLevels[0] = 0x0000;
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	85da      	strh	r2, [r3, #46]	@ 0x2e
	pwmOutStruct[3].pwmFrequency = PWM_FREQ_10000HZ;
 8001e92:	4b5d      	ldr	r3, [pc, #372]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e94:	2208      	movs	r2, #8
 8001e96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	pwmOutStruct[3].outputType = OutType_Preset;
 8001e9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	pwmOutStruct[3].presetEnable[0] = 0x0020;
 8001ea2:	4b59      	ldr	r3, [pc, #356]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
	pwmOutStruct[3].presetInputs[0] = 0x0000;
 8001eaa:	4b57      	ldr	r3, [pc, #348]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
	pwmOutStruct[3].presetDutyCycle[0] = 1000;
 8001eb2:	4b55      	ldr	r3, [pc, #340]	@ (8002008 <PDM_Hard_Code_Config+0x234>)
 8001eb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001eb8:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e

	//Output 5 - WBO2
	outputStruct[4].outEnable[0] = Output_Enabled;
 8001ebc:	4b51      	ldr	r3, [pc, #324]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	outputStruct[4].inputEnable[0] = 0x0020;
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	871a      	strh	r2, [r3, #56]	@ 0x38
	outputStruct[4].inputLevels[0] = 0x0000;
 8001eca:	4b4e      	ldr	r3, [pc, #312]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	879a      	strh	r2, [r3, #60]	@ 0x3c

	//Output 6 - CMP e Pressão de Combustível
	outputStruct[5].outEnable[0] = Output_Enabled;
 8001ed0:	4b4c      	ldr	r3, [pc, #304]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	outputStruct[5].inputEnable[0] = 0x0020;
 8001ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001eda:	2220      	movs	r2, #32
 8001edc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	outputStruct[5].inputLevels[0] = 0x0000;
 8001ee0:	4b48      	ldr	r3, [pc, #288]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

	//Output 7 - Pressão de Óleo e Pressão do Shifter
	outputStruct[6].outEnable[0] = Output_Enabled;
 8001ee8:	4b46      	ldr	r3, [pc, #280]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	outputStruct[6].inputEnable[0] = 0x0020;
 8001ef0:	4b44      	ldr	r3, [pc, #272]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	outputStruct[6].inputLevels[0] = 0x0000;
 8001ef8:	4b42      	ldr	r3, [pc, #264]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

	//Output 8 - Relay de Partida
	outputStruct[7].outEnable[0] = Output_Enabled;
 8001f00:	4b40      	ldr	r3, [pc, #256]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
	outputStruct[7].inputEnable[0] = 0x0028;
 8001f08:	4b3e      	ldr	r3, [pc, #248]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f0a:	2228      	movs	r2, #40	@ 0x28
 8001f0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	outputStruct[7].inputLevels[0] = 0x0000;
 8001f10:	4b3c      	ldr	r3, [pc, #240]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	//Output 9 - Brake Light
	outputStruct[8].outEnable[0] = Output_Enabled;
 8001f18:	4b3a      	ldr	r3, [pc, #232]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	outputStruct[8].inputEnable[0] = 0x0000;
 8001f20:	4b38      	ldr	r3, [pc, #224]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
	outputStruct[8].inputLevels[0] = 0x0000;
 8001f28:	4b36      	ldr	r3, [pc, #216]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

	//Output 10 - Solenóides
	outputStruct[9].outEnable[0] = Output_Enabled;
 8001f30:	4b34      	ldr	r3, [pc, #208]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	outputStruct[9].inputEnable[0] = 0x0020;
 8001f38:	4b32      	ldr	r3, [pc, #200]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	outputStruct[9].inputLevels[0] = 0x0000;
 8001f40:	4b30      	ldr	r3, [pc, #192]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82

	//Output 11 - Veloc. Roda F
	outputStruct[10].outEnable[0] = Output_Enabled;
 8001f48:	4b2e      	ldr	r3, [pc, #184]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
	outputStruct[10].inputEnable[0] = 0x0020;
 8001f50:	4b2c      	ldr	r3, [pc, #176]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f52:	2220      	movs	r2, #32
 8001f54:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
	outputStruct[10].inputLevels[0] = 0x0000;
 8001f58:	4b2a      	ldr	r3, [pc, #168]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

	//Output 12 - Veloc. Roda R
	outputStruct[11].outEnable[0] = Output_Enabled;
 8001f60:	4b28      	ldr	r3, [pc, #160]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	outputStruct[11].inputEnable[0] = 0x0020;
 8001f68:	4b26      	ldr	r3, [pc, #152]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	outputStruct[11].inputLevels[0] = 0x0000;
 8001f70:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e

	//Output 13 - Bobina
	outputStruct[12].outEnable[0] = Output_Enabled;
 8001f78:	4b22      	ldr	r3, [pc, #136]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
	outputStruct[12].inputEnable[0] = 0x0020;
 8001f80:	4b20      	ldr	r3, [pc, #128]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f82:	2220      	movs	r2, #32
 8001f84:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	outputStruct[12].inputLevels[0] = 0x0000;
 8001f88:	4b1e      	ldr	r3, [pc, #120]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

	//Output 14 - Bico Injetor
	outputStruct[13].outEnable[0] = Output_Enabled;
 8001f90:	4b1c      	ldr	r3, [pc, #112]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
	outputStruct[13].inputEnable[0] = 0x0020;
 8001f98:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
	outputStruct[13].inputLevels[0] = 0x0000;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

	//Output 15 - Buck DRS
	outputStruct[14].outEnable[0] = Output_Enabled;
 8001fa8:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
	outputStruct[14].inputEnable[0] = 0x0028;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001fb2:	2228      	movs	r2, #40	@ 0x28
 8001fb4:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
	outputStruct[14].inputLevels[0] = 0x0008;
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001fba:	2208      	movs	r2, #8
 8001fbc:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8

	//Output 16 - Buck DAQ
	outputStruct[15].outEnable[0] = Output_Enabled;
 8001fc0:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
	outputStruct[15].inputEnable[0] = 0x0028;
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001fca:	2228      	movs	r2, #40	@ 0x28
 8001fcc:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
	outputStruct[15].inputLevels[0] = 0x0008;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <PDM_Hard_Code_Config+0x230>)
 8001fd2:	2208      	movs	r2, #8
 8001fd4:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6

	canConfig.baudRate = CAN_1000kbps;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <PDM_Hard_Code_Config+0x238>)
 8001fda:	2204      	movs	r2, #4
 8001fdc:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < 16; i++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	71fb      	strb	r3, [r7, #7]
 8001fe2:	e006      	b.n	8001ff2 <PDM_Hard_Code_Config+0x21e>
		dataFreqBuffer[i] = Data_Freq_50Hz;
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <PDM_Hard_Code_Config+0x23c>)
 8001fe8:	2103      	movs	r1, #3
 8001fea:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 16; i++)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	71fb      	strb	r3, [r7, #7]
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	2b0f      	cmp	r3, #15
 8001ff6:	d9f5      	bls.n	8001fe4 <PDM_Hard_Code_Config+0x210>

	return;
 8001ff8:	bf00      	nop
}
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	200007e4 	.word	0x200007e4
 8002008:	200008c4 	.word	0x200008c4
 800200c:	200006b4 	.word	0x200006b4
 8002010:	2000072c 	.word	0x2000072c

08002014 <Output_Reset_State>:

static void Output_Reset_State()
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAULTRST_GPIO_Port, FAULTRST_Pin, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	2104      	movs	r1, #4
 800201e:	4840      	ldr	r0, [pc, #256]	@ (8002120 <Output_Reset_State+0x10c>)
 8002020:	f004 fcde 	bl	80069e0 <HAL_GPIO_WritePin>

	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	71fb      	strb	r3, [r7, #7]
 8002028:	e00e      	b.n	8002048 <Output_Reset_State+0x34>
		memset(&outputStruct[i], '\0', sizeof(Output_Control_Struct));
 800202a:	79fa      	ldrb	r2, [r7, #7]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4a3b      	ldr	r2, [pc, #236]	@ (8002124 <Output_Reset_State+0x110>)
 8002036:	4413      	add	r3, r2
 8002038:	220e      	movs	r2, #14
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f00e f83f 	bl	80100c0 <memset>
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	3301      	adds	r3, #1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	d9ed      	bls.n	800202a <Output_Reset_State+0x16>

	//Starts PWM timers
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800204e:	210c      	movs	r1, #12
 8002050:	4835      	ldr	r0, [pc, #212]	@ (8002128 <Output_Reset_State+0x114>)
 8002052:	f008 f86b 	bl	800a12c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8002056:	2104      	movs	r1, #4
 8002058:	4834      	ldr	r0, [pc, #208]	@ (800212c <Output_Reset_State+0x118>)
 800205a:	f009 fa15 	bl	800b488 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800205e:	2108      	movs	r1, #8
 8002060:	4833      	ldr	r0, [pc, #204]	@ (8002130 <Output_Reset_State+0x11c>)
 8002062:	f008 f863 	bl	800a12c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002066:	210c      	movs	r1, #12
 8002068:	4832      	ldr	r0, [pc, #200]	@ (8002134 <Output_Reset_State+0x120>)
 800206a:	f008 f85f 	bl	800a12c <HAL_TIM_PWM_Start>

	//Zeroes all the PWM outputs duty cycles
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 800206e:	4b2e      	ldr	r3, [pc, #184]	@ (8002128 <Output_Reset_State+0x114>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8002076:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <Output_Reset_State+0x118>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2200      	movs	r2, #0
 800207c:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800207e:	4b2c      	ldr	r3, [pc, #176]	@ (8002130 <Output_Reset_State+0x11c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8002086:	4b2b      	ldr	r3, [pc, #172]	@ (8002134 <Output_Reset_State+0x120>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2200      	movs	r2, #0
 800208c:	641a      	str	r2, [r3, #64]	@ 0x40

	//Sets all normal outputs to zero
	HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, GPIO_PIN_RESET);
 800208e:	2200      	movs	r2, #0
 8002090:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002094:	4828      	ldr	r0, [pc, #160]	@ (8002138 <Output_Reset_State+0x124>)
 8002096:	f004 fca3 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020a0:	4825      	ldr	r0, [pc, #148]	@ (8002138 <Output_Reset_State+0x124>)
 80020a2:	f004 fc9d 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020ac:	4822      	ldr	r0, [pc, #136]	@ (8002138 <Output_Reset_State+0x124>)
 80020ae:	f004 fc97 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, GPIO_PIN_RESET);
 80020b2:	2200      	movs	r2, #0
 80020b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020b8:	481f      	ldr	r0, [pc, #124]	@ (8002138 <Output_Reset_State+0x124>)
 80020ba:	f004 fc91 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020c4:	481c      	ldr	r0, [pc, #112]	@ (8002138 <Output_Reset_State+0x124>)
 80020c6:	f004 fc8b 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020d0:	4819      	ldr	r0, [pc, #100]	@ (8002138 <Output_Reset_State+0x124>)
 80020d2:	f004 fc85 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020dc:	4816      	ldr	r0, [pc, #88]	@ (8002138 <Output_Reset_State+0x124>)
 80020de:	f004 fc7f 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, GPIO_PIN_RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020e8:	4813      	ldr	r0, [pc, #76]	@ (8002138 <Output_Reset_State+0x124>)
 80020ea:	f004 fc79 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2108      	movs	r1, #8
 80020f2:	4812      	ldr	r0, [pc, #72]	@ (800213c <Output_Reset_State+0x128>)
 80020f4:	f004 fc74 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2104      	movs	r1, #4
 80020fc:	480f      	ldr	r0, [pc, #60]	@ (800213c <Output_Reset_State+0x128>)
 80020fe:	f004 fc6f 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	2120      	movs	r1, #32
 8002106:	480d      	ldr	r0, [pc, #52]	@ (800213c <Output_Reset_State+0x128>)
 8002108:	f004 fc6a 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, GPIO_PIN_RESET);
 800210c:	2200      	movs	r2, #0
 800210e:	2110      	movs	r1, #16
 8002110:	480a      	ldr	r0, [pc, #40]	@ (800213c <Output_Reset_State+0x128>)
 8002112:	f004 fc65 	bl	80069e0 <HAL_GPIO_WritePin>

	return;
 8002116:	bf00      	nop
}
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	200007e4 	.word	0x200007e4
 8002128:	200003cc 	.word	0x200003cc
 800212c:	200004a4 	.word	0x200004a4
 8002130:	20000384 	.word	0x20000384
 8002134:	2000033c 	.word	0x2000033c
 8002138:	40020c00 	.word	0x40020c00
 800213c:	40021800 	.word	0x40021800

08002140 <PDM_Input_Process>:

#include <pdm.h>

//Process input pin levels
void PDM_Input_Process()
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	inputLevels = 0x0000;
 8002144:	4b7a      	ldr	r3, [pc, #488]	@ (8002330 <PDM_Input_Process+0x1f0>)
 8002146:	2200      	movs	r2, #0
 8002148:	801a      	strh	r2, [r3, #0]

	inputLevels  =  HAL_GPIO_ReadPin(INPUT1_GPIO_Port, INPUT1_Pin);
 800214a:	2101      	movs	r1, #1
 800214c:	4879      	ldr	r0, [pc, #484]	@ (8002334 <PDM_Input_Process+0x1f4>)
 800214e:	f004 fc2f 	bl	80069b0 <HAL_GPIO_ReadPin>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	4b76      	ldr	r3, [pc, #472]	@ (8002330 <PDM_Input_Process+0x1f0>)
 8002158:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT2_GPIO_Port, INPUT2_Pin) << 1);
 800215a:	2102      	movs	r1, #2
 800215c:	4875      	ldr	r0, [pc, #468]	@ (8002334 <PDM_Input_Process+0x1f4>)
 800215e:	f004 fc27 	bl	80069b0 <HAL_GPIO_ReadPin>
 8002162:	4603      	mov	r3, r0
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	b21a      	sxth	r2, r3
 8002168:	4b71      	ldr	r3, [pc, #452]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	b21b      	sxth	r3, r3
 800216e:	4313      	orrs	r3, r2
 8002170:	b21b      	sxth	r3, r3
 8002172:	b29a      	uxth	r2, r3
 8002174:	4b6e      	ldr	r3, [pc, #440]	@ (8002330 <PDM_Input_Process+0x1f0>)
 8002176:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT3_GPIO_Port, INPUT3_Pin) << 2);
 8002178:	2104      	movs	r1, #4
 800217a:	486e      	ldr	r0, [pc, #440]	@ (8002334 <PDM_Input_Process+0x1f4>)
 800217c:	f004 fc18 	bl	80069b0 <HAL_GPIO_ReadPin>
 8002180:	4603      	mov	r3, r0
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	b21a      	sxth	r2, r3
 8002186:	4b6a      	ldr	r3, [pc, #424]	@ (8002330 <PDM_Input_Process+0x1f0>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b21b      	sxth	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b21b      	sxth	r3, r3
 8002190:	b29a      	uxth	r2, r3
 8002192:	4b67      	ldr	r3, [pc, #412]	@ (8002330 <PDM_Input_Process+0x1f0>)
 8002194:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT4_GPIO_Port, INPUT4_Pin) << 3);
 8002196:	2108      	movs	r1, #8
 8002198:	4866      	ldr	r0, [pc, #408]	@ (8002334 <PDM_Input_Process+0x1f4>)
 800219a:	f004 fc09 	bl	80069b0 <HAL_GPIO_ReadPin>
 800219e:	4603      	mov	r3, r0
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	b21a      	sxth	r2, r3
 80021a4:	4b62      	ldr	r3, [pc, #392]	@ (8002330 <PDM_Input_Process+0x1f0>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	4b5f      	ldr	r3, [pc, #380]	@ (8002330 <PDM_Input_Process+0x1f0>)
 80021b2:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT5_GPIO_Port, INPUT5_Pin) << 4);
 80021b4:	2110      	movs	r1, #16
 80021b6:	4860      	ldr	r0, [pc, #384]	@ (8002338 <PDM_Input_Process+0x1f8>)
 80021b8:	f004 fbfa 	bl	80069b0 <HAL_GPIO_ReadPin>
 80021bc:	4603      	mov	r3, r0
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002330 <PDM_Input_Process+0x1f0>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	4b58      	ldr	r3, [pc, #352]	@ (8002330 <PDM_Input_Process+0x1f0>)
 80021d0:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT6_GPIO_Port, INPUT6_Pin) << 5);
 80021d2:	2120      	movs	r1, #32
 80021d4:	4858      	ldr	r0, [pc, #352]	@ (8002338 <PDM_Input_Process+0x1f8>)
 80021d6:	f004 fbeb 	bl	80069b0 <HAL_GPIO_ReadPin>
 80021da:	4603      	mov	r3, r0
 80021dc:	015b      	lsls	r3, r3, #5
 80021de:	b21a      	sxth	r2, r3
 80021e0:	4b53      	ldr	r3, [pc, #332]	@ (8002330 <PDM_Input_Process+0x1f0>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b50      	ldr	r3, [pc, #320]	@ (8002330 <PDM_Input_Process+0x1f0>)
 80021ee:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT7_GPIO_Port, INPUT7_Pin) << 6);
 80021f0:	2140      	movs	r1, #64	@ 0x40
 80021f2:	4852      	ldr	r0, [pc, #328]	@ (800233c <PDM_Input_Process+0x1fc>)
 80021f4:	f004 fbdc 	bl	80069b0 <HAL_GPIO_ReadPin>
 80021f8:	4603      	mov	r3, r0
 80021fa:	019b      	lsls	r3, r3, #6
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002330 <PDM_Input_Process+0x1f0>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	b21b      	sxth	r3, r3
 8002204:	4313      	orrs	r3, r2
 8002206:	b21b      	sxth	r3, r3
 8002208:	b29a      	uxth	r2, r3
 800220a:	4b49      	ldr	r3, [pc, #292]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800220c:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT8_GPIO_Port, INPUT8_Pin) << 7);
 800220e:	2180      	movs	r1, #128	@ 0x80
 8002210:	484a      	ldr	r0, [pc, #296]	@ (800233c <PDM_Input_Process+0x1fc>)
 8002212:	f004 fbcd 	bl	80069b0 <HAL_GPIO_ReadPin>
 8002216:	4603      	mov	r3, r0
 8002218:	01db      	lsls	r3, r3, #7
 800221a:	b21a      	sxth	r2, r3
 800221c:	4b44      	ldr	r3, [pc, #272]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b21b      	sxth	r3, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	b21b      	sxth	r3, r3
 8002226:	b29a      	uxth	r2, r3
 8002228:	4b41      	ldr	r3, [pc, #260]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800222a:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT9_GPIO_Port, INPUT9_Pin) << 8);
 800222c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002230:	4842      	ldr	r0, [pc, #264]	@ (800233c <PDM_Input_Process+0x1fc>)
 8002232:	f004 fbbd 	bl	80069b0 <HAL_GPIO_ReadPin>
 8002236:	4603      	mov	r3, r0
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b21a      	sxth	r2, r3
 800223c:	4b3c      	ldr	r3, [pc, #240]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	b21b      	sxth	r3, r3
 8002242:	4313      	orrs	r3, r2
 8002244:	b21b      	sxth	r3, r3
 8002246:	b29a      	uxth	r2, r3
 8002248:	4b39      	ldr	r3, [pc, #228]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800224a:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT10_GPIO_Port, INPUT10_Pin) << 9);
 800224c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002250:	483a      	ldr	r0, [pc, #232]	@ (800233c <PDM_Input_Process+0x1fc>)
 8002252:	f004 fbad 	bl	80069b0 <HAL_GPIO_ReadPin>
 8002256:	4603      	mov	r3, r0
 8002258:	025b      	lsls	r3, r3, #9
 800225a:	b21a      	sxth	r2, r3
 800225c:	4b34      	ldr	r3, [pc, #208]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b21b      	sxth	r3, r3
 8002262:	4313      	orrs	r3, r2
 8002264:	b21b      	sxth	r3, r3
 8002266:	b29a      	uxth	r2, r3
 8002268:	4b31      	ldr	r3, [pc, #196]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800226a:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT11_GPIO_Port, INPUT11_Pin) << 10);
 800226c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002270:	4832      	ldr	r0, [pc, #200]	@ (800233c <PDM_Input_Process+0x1fc>)
 8002272:	f004 fb9d 	bl	80069b0 <HAL_GPIO_ReadPin>
 8002276:	4603      	mov	r3, r0
 8002278:	029b      	lsls	r3, r3, #10
 800227a:	b21a      	sxth	r2, r3
 800227c:	4b2c      	ldr	r3, [pc, #176]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	b21b      	sxth	r3, r3
 8002282:	4313      	orrs	r3, r2
 8002284:	b21b      	sxth	r3, r3
 8002286:	b29a      	uxth	r2, r3
 8002288:	4b29      	ldr	r3, [pc, #164]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800228a:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT12_GPIO_Port, INPUT12_Pin) << 11);
 800228c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002290:	482a      	ldr	r0, [pc, #168]	@ (800233c <PDM_Input_Process+0x1fc>)
 8002292:	f004 fb8d 	bl	80069b0 <HAL_GPIO_ReadPin>
 8002296:	4603      	mov	r3, r0
 8002298:	02db      	lsls	r3, r3, #11
 800229a:	b21a      	sxth	r2, r3
 800229c:	4b24      	ldr	r3, [pc, #144]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	b21b      	sxth	r3, r3
 80022a2:	4313      	orrs	r3, r2
 80022a4:	b21b      	sxth	r3, r3
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	4b21      	ldr	r3, [pc, #132]	@ (8002330 <PDM_Input_Process+0x1f0>)
 80022aa:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT13_GPIO_Port, INPUT13_Pin) << 12);
 80022ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022b0:	4821      	ldr	r0, [pc, #132]	@ (8002338 <PDM_Input_Process+0x1f8>)
 80022b2:	f004 fb7d 	bl	80069b0 <HAL_GPIO_ReadPin>
 80022b6:	4603      	mov	r3, r0
 80022b8:	031b      	lsls	r3, r3, #12
 80022ba:	b21a      	sxth	r2, r3
 80022bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002330 <PDM_Input_Process+0x1f0>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	4b19      	ldr	r3, [pc, #100]	@ (8002330 <PDM_Input_Process+0x1f0>)
 80022ca:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT14_GPIO_Port, INPUT14_Pin) << 13);
 80022cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022d0:	4819      	ldr	r0, [pc, #100]	@ (8002338 <PDM_Input_Process+0x1f8>)
 80022d2:	f004 fb6d 	bl	80069b0 <HAL_GPIO_ReadPin>
 80022d6:	4603      	mov	r3, r0
 80022d8:	035b      	lsls	r3, r3, #13
 80022da:	b21a      	sxth	r2, r3
 80022dc:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <PDM_Input_Process+0x1f0>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <PDM_Input_Process+0x1f0>)
 80022ea:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT15_GPIO_Port, INPUT15_Pin) << 14);
 80022ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022f0:	4811      	ldr	r0, [pc, #68]	@ (8002338 <PDM_Input_Process+0x1f8>)
 80022f2:	f004 fb5d 	bl	80069b0 <HAL_GPIO_ReadPin>
 80022f6:	4603      	mov	r3, r0
 80022f8:	039b      	lsls	r3, r3, #14
 80022fa:	b21a      	sxth	r2, r3
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <PDM_Input_Process+0x1f0>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b21b      	sxth	r3, r3
 8002302:	4313      	orrs	r3, r2
 8002304:	b21b      	sxth	r3, r3
 8002306:	b29a      	uxth	r2, r3
 8002308:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800230a:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT16_GPIO_Port, INPUT16_Pin) << 15);
 800230c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002310:	4809      	ldr	r0, [pc, #36]	@ (8002338 <PDM_Input_Process+0x1f8>)
 8002312:	f004 fb4d 	bl	80069b0 <HAL_GPIO_ReadPin>
 8002316:	4603      	mov	r3, r0
 8002318:	03db      	lsls	r3, r3, #15
 800231a:	b21a      	sxth	r2, r3
 800231c:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b21b      	sxth	r3, r3
 8002322:	4313      	orrs	r3, r2
 8002324:	b21b      	sxth	r3, r3
 8002326:	b29a      	uxth	r2, r3
 8002328:	4b01      	ldr	r3, [pc, #4]	@ (8002330 <PDM_Input_Process+0x1f0>)
 800232a:	801a      	strh	r2, [r3, #0]

	return;
 800232c:	bf00      	nop
}
 800232e:	bd80      	pop	{r7, pc}
 8002330:	200007e0 	.word	0x200007e0
 8002334:	40021400 	.word	0x40021400
 8002338:	40020400 	.word	0x40020400
 800233c:	40020800 	.word	0x40020800

08002340 <PDM_Output_Process>:

//Process output pin levels
void PDM_Output_Process()
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
	GPIO_PinState output_levels[NBR_OF_OUTPUTS];

	//Process input conditions and safety flags for each output
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002346:	2300      	movs	r3, #0
 8002348:	75fb      	strb	r3, [r7, #23]
 800234a:	e062      	b.n	8002412 <PDM_Output_Process+0xd2>
	{
		if((((flagDriverSafety >> i) & 0x01) == 0)
 800234c:	4b68      	ldr	r3, [pc, #416]	@ (80024f0 <PDM_Output_Process+0x1b0>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	7dfb      	ldrb	r3, [r7, #23]
 8002354:	fa42 f303 	asr.w	r3, r2, r3
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d14f      	bne.n	8002400 <PDM_Output_Process+0xc0>
				&& (__PDM_INPUT_CONDITION_COMPARE(outputStruct[i].inputEnable[0], outputStruct[i].inputLevels[0], outputStruct[i].outEnable[0])
 8002360:	7dfa      	ldrb	r2, [r7, #23]
 8002362:	4964      	ldr	r1, [pc, #400]	@ (80024f4 <PDM_Output_Process+0x1b4>)
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	440b      	add	r3, r1
 800236e:	3304      	adds	r3, #4
 8002370:	881a      	ldrh	r2, [r3, #0]
 8002372:	4b61      	ldr	r3, [pc, #388]	@ (80024f8 <PDM_Output_Process+0x1b8>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	4053      	eors	r3, r2
 8002378:	b299      	uxth	r1, r3
 800237a:	7dfa      	ldrb	r2, [r7, #23]
 800237c:	485d      	ldr	r0, [pc, #372]	@ (80024f4 <PDM_Output_Process+0x1b4>)
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4403      	add	r3, r0
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	400b      	ands	r3, r1
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10a      	bne.n	80023a8 <PDM_Output_Process+0x68>
 8002392:	7dfa      	ldrb	r2, [r7, #23]
 8002394:	4957      	ldr	r1, [pc, #348]	@ (80024f4 <PDM_Output_Process+0x1b4>)
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	440b      	add	r3, r1
 80023a0:	330c      	adds	r3, #12
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d024      	beq.n	80023f2 <PDM_Output_Process+0xb2>
				||  __PDM_INPUT_CONDITION_COMPARE(outputStruct[i].inputEnable[1], outputStruct[i].inputLevels[1], outputStruct[i].outEnable[1])))
 80023a8:	7dfa      	ldrb	r2, [r7, #23]
 80023aa:	4952      	ldr	r1, [pc, #328]	@ (80024f4 <PDM_Output_Process+0x1b4>)
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	440b      	add	r3, r1
 80023b6:	3306      	adds	r3, #6
 80023b8:	881a      	ldrh	r2, [r3, #0]
 80023ba:	4b4f      	ldr	r3, [pc, #316]	@ (80024f8 <PDM_Output_Process+0x1b8>)
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	4053      	eors	r3, r2
 80023c0:	b299      	uxth	r1, r3
 80023c2:	7dfa      	ldrb	r2, [r7, #23]
 80023c4:	484b      	ldr	r0, [pc, #300]	@ (80024f4 <PDM_Output_Process+0x1b4>)
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4403      	add	r3, r0
 80023d0:	3302      	adds	r3, #2
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	400b      	ands	r3, r1
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d111      	bne.n	8002400 <PDM_Output_Process+0xc0>
 80023dc:	7dfa      	ldrb	r2, [r7, #23]
 80023de:	4945      	ldr	r1, [pc, #276]	@ (80024f4 <PDM_Output_Process+0x1b4>)
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	440b      	add	r3, r1
 80023ea:	330d      	adds	r3, #13
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d106      	bne.n	8002400 <PDM_Output_Process+0xc0>
			output_levels[i] = GPIO_PIN_SET;
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	3318      	adds	r3, #24
 80023f6:	443b      	add	r3, r7
 80023f8:	2201      	movs	r2, #1
 80023fa:	f803 2c14 	strb.w	r2, [r3, #-20]
 80023fe:	e005      	b.n	800240c <PDM_Output_Process+0xcc>
		else
			output_levels[i] = GPIO_PIN_RESET;
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	3318      	adds	r3, #24
 8002404:	443b      	add	r3, r7
 8002406:	2200      	movs	r2, #0
 8002408:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	3301      	adds	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d999      	bls.n	800234c <PDM_Output_Process+0xc>
	}

	HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, output_levels[4]);
 8002418:	7a3b      	ldrb	r3, [r7, #8]
 800241a:	461a      	mov	r2, r3
 800241c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002420:	4836      	ldr	r0, [pc, #216]	@ (80024fc <PDM_Output_Process+0x1bc>)
 8002422:	f004 fadd 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, output_levels[5]);
 8002426:	7a7b      	ldrb	r3, [r7, #9]
 8002428:	461a      	mov	r2, r3
 800242a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800242e:	4833      	ldr	r0, [pc, #204]	@ (80024fc <PDM_Output_Process+0x1bc>)
 8002430:	f004 fad6 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, output_levels[6]);
 8002434:	7abb      	ldrb	r3, [r7, #10]
 8002436:	461a      	mov	r2, r3
 8002438:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800243c:	482f      	ldr	r0, [pc, #188]	@ (80024fc <PDM_Output_Process+0x1bc>)
 800243e:	f004 facf 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, output_levels[7]);
 8002442:	7afb      	ldrb	r3, [r7, #11]
 8002444:	461a      	mov	r2, r3
 8002446:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800244a:	482c      	ldr	r0, [pc, #176]	@ (80024fc <PDM_Output_Process+0x1bc>)
 800244c:	f004 fac8 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, output_levels[8]);
 8002450:	7b3b      	ldrb	r3, [r7, #12]
 8002452:	461a      	mov	r2, r3
 8002454:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002458:	4828      	ldr	r0, [pc, #160]	@ (80024fc <PDM_Output_Process+0x1bc>)
 800245a:	f004 fac1 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, output_levels[9]);
 800245e:	7b7b      	ldrb	r3, [r7, #13]
 8002460:	461a      	mov	r2, r3
 8002462:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002466:	4825      	ldr	r0, [pc, #148]	@ (80024fc <PDM_Output_Process+0x1bc>)
 8002468:	f004 faba 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, output_levels[10]);
 800246c:	7bbb      	ldrb	r3, [r7, #14]
 800246e:	461a      	mov	r2, r3
 8002470:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002474:	4821      	ldr	r0, [pc, #132]	@ (80024fc <PDM_Output_Process+0x1bc>)
 8002476:	f004 fab3 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, output_levels[11]);
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	461a      	mov	r2, r3
 800247e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002482:	481e      	ldr	r0, [pc, #120]	@ (80024fc <PDM_Output_Process+0x1bc>)
 8002484:	f004 faac 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, output_levels[12]);
 8002488:	7c3b      	ldrb	r3, [r7, #16]
 800248a:	461a      	mov	r2, r3
 800248c:	2108      	movs	r1, #8
 800248e:	481c      	ldr	r0, [pc, #112]	@ (8002500 <PDM_Output_Process+0x1c0>)
 8002490:	f004 faa6 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, output_levels[13]);
 8002494:	7c7b      	ldrb	r3, [r7, #17]
 8002496:	461a      	mov	r2, r3
 8002498:	2104      	movs	r1, #4
 800249a:	4819      	ldr	r0, [pc, #100]	@ (8002500 <PDM_Output_Process+0x1c0>)
 800249c:	f004 faa0 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, output_levels[14]);
 80024a0:	7cbb      	ldrb	r3, [r7, #18]
 80024a2:	461a      	mov	r2, r3
 80024a4:	2120      	movs	r1, #32
 80024a6:	4816      	ldr	r0, [pc, #88]	@ (8002500 <PDM_Output_Process+0x1c0>)
 80024a8:	f004 fa9a 	bl	80069e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, output_levels[15]);
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	461a      	mov	r2, r3
 80024b0:	2110      	movs	r1, #16
 80024b2:	4813      	ldr	r0, [pc, #76]	@ (8002500 <PDM_Output_Process+0x1c0>)
 80024b4:	f004 fa94 	bl	80069e0 <HAL_GPIO_WritePin>
	PDM_PWM_Output_Process(&pwmOutStruct[0], 0, output_levels[0]);
 80024b8:	793b      	ldrb	r3, [r7, #4]
 80024ba:	461a      	mov	r2, r3
 80024bc:	2100      	movs	r1, #0
 80024be:	4811      	ldr	r0, [pc, #68]	@ (8002504 <PDM_Output_Process+0x1c4>)
 80024c0:	f000 f8e2 	bl	8002688 <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[1], 1, output_levels[1]);
 80024c4:	797b      	ldrb	r3, [r7, #5]
 80024c6:	461a      	mov	r2, r3
 80024c8:	2101      	movs	r1, #1
 80024ca:	480f      	ldr	r0, [pc, #60]	@ (8002508 <PDM_Output_Process+0x1c8>)
 80024cc:	f000 f8dc 	bl	8002688 <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[2], 2, output_levels[2]);
 80024d0:	79bb      	ldrb	r3, [r7, #6]
 80024d2:	461a      	mov	r2, r3
 80024d4:	2102      	movs	r1, #2
 80024d6:	480d      	ldr	r0, [pc, #52]	@ (800250c <PDM_Output_Process+0x1cc>)
 80024d8:	f000 f8d6 	bl	8002688 <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[3], 3, output_levels[3]);
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	461a      	mov	r2, r3
 80024e0:	2103      	movs	r1, #3
 80024e2:	480b      	ldr	r0, [pc, #44]	@ (8002510 <PDM_Output_Process+0x1d0>)
 80024e4:	f000 f8d0 	bl	8002688 <PDM_PWM_Output_Process>

	return;
 80024e8:	bf00      	nop
}
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200007d8 	.word	0x200007d8
 80024f4:	200007e4 	.word	0x200007e4
 80024f8:	200007e0 	.word	0x200007e0
 80024fc:	40020c00 	.word	0x40020c00
 8002500:	40021800 	.word	0x40021800
 8002504:	200008c4 	.word	0x200008c4
 8002508:	200008e4 	.word	0x200008e4
 800250c:	20000904 	.word	0x20000904
 8002510:	20000924 	.word	0x20000924

08002514 <PDM_PWM_Init>:
static HAL_StatusTypeDef PWM_SoftStart(PWM_Control_Struct *pwm_struct);
static uint16_t PWM_Map_Duty_Cycle_Set(PDM_PWM_Map_Struct* pwm_map_struct);

//Initializes PWM output and sets its CAN bus filter
void PDM_PWM_Init(CAN_HandleTypeDef *hcan, PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	4613      	mov	r3, r2
 8002520:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef* htim;
	uint16_t timChannel = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	837b      	strh	r3, [r7, #26]
	uint16_t prescaler = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	833b      	strh	r3, [r7, #24]
	uint16_t memAddress = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	82fb      	strh	r3, [r7, #22]

	//Sets the verify bit of the PWM output to sign if PWM is enabled
	dataIdBuffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] |= (pwmPinStatus >> pwm_out_number) & 0x01;
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	331a      	adds	r3, #26
 8002532:	4a4c      	ldr	r2, [pc, #304]	@ (8002664 <PDM_PWM_Init+0x150>)
 8002534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002538:	b21a      	sxth	r2, r3
 800253a:	4b4b      	ldr	r3, [pc, #300]	@ (8002668 <PDM_PWM_Init+0x154>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	fa41 f303 	asr.w	r3, r1, r3
 8002546:	b21b      	sxth	r3, r3
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	b21b      	sxth	r3, r3
 800254e:	4313      	orrs	r3, r2
 8002550:	b21a      	sxth	r2, r3
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	331a      	adds	r3, #26
 8002556:	b291      	uxth	r1, r2
 8002558:	4a42      	ldr	r2, [pc, #264]	@ (8002664 <PDM_PWM_Init+0x150>)
 800255a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d87c      	bhi.n	800265e <PDM_PWM_Init+0x14a>
 8002564:	a201      	add	r2, pc, #4	@ (adr r2, 800256c <PDM_PWM_Init+0x58>)
 8002566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256a:	bf00      	nop
 800256c:	0800257d 	.word	0x0800257d
 8002570:	08002587 	.word	0x08002587
 8002574:	08002591 	.word	0x08002591
 8002578:	0800259b 	.word	0x0800259b
 800257c:	4b3b      	ldr	r3, [pc, #236]	@ (800266c <PDM_PWM_Init+0x158>)
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	230c      	movs	r3, #12
 8002582:	837b      	strh	r3, [r7, #26]
 8002584:	e00d      	b.n	80025a2 <PDM_PWM_Init+0x8e>
 8002586:	4b3a      	ldr	r3, [pc, #232]	@ (8002670 <PDM_PWM_Init+0x15c>)
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	2304      	movs	r3, #4
 800258c:	837b      	strh	r3, [r7, #26]
 800258e:	e008      	b.n	80025a2 <PDM_PWM_Init+0x8e>
 8002590:	4b38      	ldr	r3, [pc, #224]	@ (8002674 <PDM_PWM_Init+0x160>)
 8002592:	61fb      	str	r3, [r7, #28]
 8002594:	2308      	movs	r3, #8
 8002596:	837b      	strh	r3, [r7, #26]
 8002598:	e003      	b.n	80025a2 <PDM_PWM_Init+0x8e>
 800259a:	4b37      	ldr	r3, [pc, #220]	@ (8002678 <PDM_PWM_Init+0x164>)
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	230c      	movs	r3, #12
 80025a0:	837b      	strh	r3, [r7, #26]

	if(pwm_struct->pwmFrequency == 0)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	885b      	ldrh	r3, [r3, #2]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <PDM_PWM_Init+0x9e>
		pwm_struct->pwmFrequency = PWM_FREQ_100HZ;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f240 3283 	movw	r2, #899	@ 0x383
 80025b0:	805a      	strh	r2, [r3, #2]

	//Sets the PWM frequency
	if((htim->Instance == TIM1) || (htim->Instance == TIM8))
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a31      	ldr	r2, [pc, #196]	@ (800267c <PDM_PWM_Init+0x168>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <PDM_PWM_Init+0xb2>
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002680 <PDM_PWM_Init+0x16c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d106      	bne.n	80025d4 <PDM_PWM_Init+0xc0>
		prescaler = (pwm_struct->pwmFrequency * 2) + 1;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	885b      	ldrh	r3, [r3, #2]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	833b      	strh	r3, [r7, #24]
 80025d2:	e002      	b.n	80025da <PDM_PWM_Init+0xc6>
	else
		prescaler = pwm_struct->pwmFrequency;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	885b      	ldrh	r3, [r3, #2]
 80025d8:	833b      	strh	r3, [r7, #24]

	__HAL_TIM_SET_PRESCALER(htim, prescaler);
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	8b3a      	ldrh	r2, [r7, #24]
 80025e0:	629a      	str	r2, [r3, #40]	@ 0x28

	//Zero the duty cycle
	pwm_struct->dutyCycle = 0;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2200      	movs	r2, #0
 80025e6:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(htim, timChannel, 0);
 80025e8:	8b7b      	ldrh	r3, [r7, #26]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d104      	bne.n	80025f8 <PDM_PWM_Init+0xe4>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2200      	movs	r2, #0
 80025f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80025f6:	e013      	b.n	8002620 <PDM_PWM_Init+0x10c>
 80025f8:	8b7b      	ldrh	r3, [r7, #26]
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d104      	bne.n	8002608 <PDM_PWM_Init+0xf4>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2300      	movs	r3, #0
 8002604:	6393      	str	r3, [r2, #56]	@ 0x38
 8002606:	e00b      	b.n	8002620 <PDM_PWM_Init+0x10c>
 8002608:	8b7b      	ldrh	r3, [r7, #26]
 800260a:	2b08      	cmp	r3, #8
 800260c:	d104      	bne.n	8002618 <PDM_PWM_Init+0x104>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2300      	movs	r3, #0
 8002614:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002616:	e003      	b.n	8002620 <PDM_PWM_Init+0x10c>
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2300      	movs	r3, #0
 800261e:	6413      	str	r3, [r2, #64]	@ 0x40

	//Deallocates all pointers
	PWM_DeAlloc(pwm_struct);
 8002620:	68b8      	ldr	r0, [r7, #8]
 8002622:	f000 f94d 	bl	80028c0 <PWM_DeAlloc>

	if(pwm_struct->softStart == SoftStart_Enabled)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	795b      	ldrb	r3, [r3, #5]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d105      	bne.n	800263a <PDM_PWM_Init+0x126>
		PDM_PWM_Load_SoftStart_From_EEPROM(&hi2c1, pwm_struct, pwm_out_number);
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	461a      	mov	r2, r3
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	4813      	ldr	r0, [pc, #76]	@ (8002684 <PDM_PWM_Init+0x170>)
 8002636:	f7ff f81b 	bl	8001670 <PDM_PWM_Load_SoftStart_From_EEPROM>

	//Configures 3D map or Artificial Neural Network
	if(pwm_struct->outputType == OutType_Map)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	791b      	ldrb	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d105      	bne.n	800264e <PDM_PWM_Init+0x13a>
		PDM_PWM_Map_Load_From_EEPROM(&hi2c1, pwm_struct, memAddress);
 8002642:	8afb      	ldrh	r3, [r7, #22]
 8002644:	461a      	mov	r2, r3
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	480e      	ldr	r0, [pc, #56]	@ (8002684 <PDM_PWM_Init+0x170>)
 800264a:	f7ff f931 	bl	80018b0 <PDM_PWM_Map_Load_From_EEPROM>

	//Deallocates all pointers if there is any allocation problem
	if(pwm_struct->outputType == OutType_Error)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	791b      	ldrb	r3, [r3, #4]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d102      	bne.n	800265c <PDM_PWM_Init+0x148>
		PWM_DeAlloc(pwm_struct);
 8002656:	68b8      	ldr	r0, [r7, #8]
 8002658:	f000 f932 	bl	80028c0 <PWM_DeAlloc>

	return;
 800265c:	bf00      	nop
}
 800265e:	3720      	adds	r7, #32
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000788 	.word	0x20000788
 8002668:	200007de 	.word	0x200007de
 800266c:	200003cc 	.word	0x200003cc
 8002670:	200004a4 	.word	0x200004a4
 8002674:	20000384 	.word	0x20000384
 8002678:	2000033c 	.word	0x2000033c
 800267c:	40010000 	.word	0x40010000
 8002680:	40010400 	.word	0x40010400
 8002684:	200002e8 	.word	0x200002e8

08002688 <PDM_PWM_Output_Process>:

//Process input conditions and command variables and sets the PWM output duty cycle
void PDM_PWM_Output_Process(PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number, GPIO_PinState output_level)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	70fb      	strb	r3, [r7, #3]
 8002694:	4613      	mov	r3, r2
 8002696:	70bb      	strb	r3, [r7, #2]
	uint8_t softStart = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
	uint16_t timChannel;
	TIM_HandleTypeDef* htim;

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	f200 80fd 	bhi.w	800289e <PDM_PWM_Output_Process+0x216>
 80026a4:	a201      	add	r2, pc, #4	@ (adr r2, 80026ac <PDM_PWM_Output_Process+0x24>)
 80026a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026aa:	bf00      	nop
 80026ac:	080026bd 	.word	0x080026bd
 80026b0:	080026c7 	.word	0x080026c7
 80026b4:	080026d1 	.word	0x080026d1
 80026b8:	080026db 	.word	0x080026db
 80026bc:	4b79      	ldr	r3, [pc, #484]	@ (80028a4 <PDM_PWM_Output_Process+0x21c>)
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	230c      	movs	r3, #12
 80026c2:	81bb      	strh	r3, [r7, #12]
 80026c4:	e00d      	b.n	80026e2 <PDM_PWM_Output_Process+0x5a>
 80026c6:	4b78      	ldr	r3, [pc, #480]	@ (80028a8 <PDM_PWM_Output_Process+0x220>)
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	2304      	movs	r3, #4
 80026cc:	81bb      	strh	r3, [r7, #12]
 80026ce:	e008      	b.n	80026e2 <PDM_PWM_Output_Process+0x5a>
 80026d0:	4b76      	ldr	r3, [pc, #472]	@ (80028ac <PDM_PWM_Output_Process+0x224>)
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	2308      	movs	r3, #8
 80026d6:	81bb      	strh	r3, [r7, #12]
 80026d8:	e003      	b.n	80026e2 <PDM_PWM_Output_Process+0x5a>
 80026da:	4b75      	ldr	r3, [pc, #468]	@ (80028b0 <PDM_PWM_Output_Process+0x228>)
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	230c      	movs	r3, #12
 80026e0:	81bb      	strh	r3, [r7, #12]

	if((output_level == GPIO_PIN_SET)
 80026e2:	78bb      	ldrb	r3, [r7, #2]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d15c      	bne.n	80027a2 <PDM_PWM_Output_Process+0x11a>
			&& (((flagDriverSafety >> pwm_out_number) & 0x01) == 0)
 80026e8:	4b72      	ldr	r3, [pc, #456]	@ (80028b4 <PDM_PWM_Output_Process+0x22c>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	fa42 f303 	asr.w	r3, r2, r3
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d152      	bne.n	80027a2 <PDM_PWM_Output_Process+0x11a>
			&& (pwm_struct->outputType != OutType_Error))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	791b      	ldrb	r3, [r3, #4]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d04e      	beq.n	80027a2 <PDM_PWM_Output_Process+0x11a>
	{
		if((pwm_struct->softStart == SoftStart_Enabled) && (pwm_struct->softStartStruct != NULL) && (pwm_struct->dutyCycle == 0))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	795b      	ldrb	r3, [r3, #5]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d109      	bne.n	8002720 <PDM_PWM_Output_Process+0x98>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <PDM_PWM_Output_Process+0x98>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <PDM_PWM_Output_Process+0x98>
			softStart = 1;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]

		//Sets duty cycle to 100% if the output is set as standard
		if(pwm_struct->outputType == OutType_Standard)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	791b      	ldrb	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d104      	bne.n	8002732 <PDM_PWM_Output_Process+0xaa>
			pwm_struct->dutyCycle = 1000;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800272e:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8002730:	e03a      	b.n	80027a8 <PDM_PWM_Output_Process+0x120>

		//Checks if the inputs match the first PWM preset
		else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct->presetEnable[0], pwm_struct->presetInputs[0], Output_Enabled))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	895a      	ldrh	r2, [r3, #10]
 8002736:	4b60      	ldr	r3, [pc, #384]	@ (80028b8 <PDM_PWM_Output_Process+0x230>)
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	4053      	eors	r3, r2
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	88db      	ldrh	r3, [r3, #6]
 8002742:	4013      	ands	r3, r2
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d104      	bne.n	8002754 <PDM_PWM_Output_Process+0xcc>
			pwm_struct->dutyCycle = pwm_struct->presetDutyCycle[0];
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	89da      	ldrh	r2, [r3, #14]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8002752:	e029      	b.n	80027a8 <PDM_PWM_Output_Process+0x120>

		//Checks if the inputs match the second PWM preset
		else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct->presetEnable[1], pwm_struct->presetInputs[1], Output_Enabled))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	899a      	ldrh	r2, [r3, #12]
 8002758:	4b57      	ldr	r3, [pc, #348]	@ (80028b8 <PDM_PWM_Output_Process+0x230>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	4053      	eors	r3, r2
 800275e:	b29a      	uxth	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	891b      	ldrh	r3, [r3, #8]
 8002764:	4013      	ands	r3, r2
 8002766:	b29b      	uxth	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <PDM_PWM_Output_Process+0xee>
			pwm_struct->dutyCycle = pwm_struct->presetDutyCycle[1];
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8a1a      	ldrh	r2, [r3, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8002774:	e018      	b.n	80027a8 <PDM_PWM_Output_Process+0x120>

		//Sets duty cycle based on the 3D map if enabled
		else if((pwm_struct->outputType == OutType_Map) && (pwm_struct->pwmMapStruct != NULL))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	791b      	ldrb	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d10d      	bne.n	800279a <PDM_PWM_Output_Process+0x112>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <PDM_PWM_Output_Process+0x112>
			pwm_struct->dutyCycle = PWM_Map_Duty_Cycle_Set(pwm_struct->pwmMapStruct);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f97e 	bl	8002a8c <PWM_Map_Duty_Cycle_Set>
 8002790:	4603      	mov	r3, r0
 8002792:	461a      	mov	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8002798:	e006      	b.n	80027a8 <PDM_PWM_Output_Process+0x120>

		else
			pwm_struct->dutyCycle = 0;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 80027a0:	e002      	b.n	80027a8 <PDM_PWM_Output_Process+0x120>
	}

	else
		pwm_struct->dutyCycle = 0;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	801a      	strh	r2, [r3, #0]

	if(softStart == 0)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d123      	bne.n	80027f6 <PDM_PWM_Output_Process+0x16e>
		__HAL_TIM_SET_COMPARE(htim, timChannel, pwm_struct->dutyCycle);
 80027ae:	89bb      	ldrh	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <PDM_PWM_Output_Process+0x138>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	881a      	ldrh	r2, [r3, #0]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80027be:	e066      	b.n	800288e <PDM_PWM_Output_Process+0x206>
 80027c0:	89bb      	ldrh	r3, [r7, #12]
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d106      	bne.n	80027d4 <PDM_PWM_Output_Process+0x14c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	8819      	ldrh	r1, [r3, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	460b      	mov	r3, r1
 80027d0:	6393      	str	r3, [r2, #56]	@ 0x38
 80027d2:	e05c      	b.n	800288e <PDM_PWM_Output_Process+0x206>
 80027d4:	89bb      	ldrh	r3, [r7, #12]
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d106      	bne.n	80027e8 <PDM_PWM_Output_Process+0x160>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	8819      	ldrh	r1, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	460b      	mov	r3, r1
 80027e4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80027e6:	e052      	b.n	800288e <PDM_PWM_Output_Process+0x206>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8819      	ldrh	r1, [r3, #0]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	460b      	mov	r3, r1
 80027f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027f4:	e04b      	b.n	800288e <PDM_PWM_Output_Process+0x206>

	else
	{
		if(PWM_SoftStart(pwm_struct) == HAL_OK)
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f8f8 	bl	80029ec <PWM_SoftStart>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d122      	bne.n	8002848 <PDM_PWM_Output_Process+0x1c0>
		{
			if(pwm_out_number == 1)
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10f      	bne.n	8002828 <PDM_PWM_Output_Process+0x1a0>
			{
				HAL_TIMEx_PWMN_Stop(htim, timChannel);
 8002808:	89bb      	ldrh	r3, [r7, #12]
 800280a:	4619      	mov	r1, r3
 800280c:	68b8      	ldr	r0, [r7, #8]
 800280e:	f008 fef5 	bl	800b5fc <HAL_TIMEx_PWMN_Stop>
				HAL_TIMEx_PWMN_Start_DMA(htim, timChannel, (uint32_t*) pwm_struct->softStartStruct->dutyCycleBuffer, pwm_struct->softStartStruct->dutyCycles);
 8002812:	89b9      	ldrh	r1, [r7, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	68b8      	ldr	r0, [r7, #8]
 8002822:	f008 ff49 	bl	800b6b8 <HAL_TIMEx_PWMN_Start_DMA>
 8002826:	e032      	b.n	800288e <PDM_PWM_Output_Process+0x206>
			}

			else
			{
				HAL_TIM_PWM_Stop(htim, timChannel);
 8002828:	89bb      	ldrh	r3, [r7, #12]
 800282a:	4619      	mov	r1, r3
 800282c:	68b8      	ldr	r0, [r7, #8]
 800282e:	f007 fd45 	bl	800a2bc <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start_DMA(htim, timChannel, (uint32_t*) pwm_struct->softStartStruct->dutyCycleBuffer, pwm_struct->softStartStruct->dutyCycles);
 8002832:	89b9      	ldrh	r1, [r7, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	68b8      	ldr	r0, [r7, #8]
 8002842:	f007 fdab 	bl	800a39c <HAL_TIM_PWM_Start_DMA>
 8002846:	e022      	b.n	800288e <PDM_PWM_Output_Process+0x206>
			}
		}

		else
			__HAL_TIM_SET_COMPARE(htim, timChannel, pwm_struct->dutyCycle);
 8002848:	89bb      	ldrh	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d105      	bne.n	800285a <PDM_PWM_Output_Process+0x1d2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	881a      	ldrh	r2, [r3, #0]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	635a      	str	r2, [r3, #52]	@ 0x34
 8002858:	e019      	b.n	800288e <PDM_PWM_Output_Process+0x206>
 800285a:	89bb      	ldrh	r3, [r7, #12]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d106      	bne.n	800286e <PDM_PWM_Output_Process+0x1e6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8819      	ldrh	r1, [r3, #0]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	460b      	mov	r3, r1
 800286a:	6393      	str	r3, [r2, #56]	@ 0x38
 800286c:	e00f      	b.n	800288e <PDM_PWM_Output_Process+0x206>
 800286e:	89bb      	ldrh	r3, [r7, #12]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d106      	bne.n	8002882 <PDM_PWM_Output_Process+0x1fa>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	8819      	ldrh	r1, [r3, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	460b      	mov	r3, r1
 800287e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002880:	e005      	b.n	800288e <PDM_PWM_Output_Process+0x206>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8819      	ldrh	r1, [r3, #0]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	460b      	mov	r3, r1
 800288c:	6413      	str	r3, [r2, #64]	@ 0x40
	}

	//Stores output duty cycle inside the data buffer to be sent via CAN/USB
	dataBuffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] = pwm_struct->dutyCycle;
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	331a      	adds	r3, #26
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	8811      	ldrh	r1, [r2, #0]
 8002896:	4a09      	ldr	r2, [pc, #36]	@ (80028bc <PDM_PWM_Output_Process+0x234>)
 8002898:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return;
 800289c:	bf00      	nop
}
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200003cc 	.word	0x200003cc
 80028a8:	200004a4 	.word	0x200004a4
 80028ac:	20000384 	.word	0x20000384
 80028b0:	2000033c 	.word	0x2000033c
 80028b4:	200007d8 	.word	0x200007d8
 80028b8:	200007e0 	.word	0x200007e0
 80028bc:	2000074c 	.word	0x2000074c

080028c0 <PWM_DeAlloc>:

static void PWM_DeAlloc(PWM_Control_Struct *pwm_struct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	if(pwm_struct->softStartStruct != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d019      	beq.n	8002904 <PWM_DeAlloc+0x44>
	{

		if(pwm_struct->softStartStruct->dutyCycleBuffer != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <PWM_DeAlloc+0x2e>
		{
			free(pwm_struct->softStartStruct->dutyCycleBuffer);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f00d fb37 	bl	800ff54 <free>
			pwm_struct->softStartStruct->dutyCycleBuffer = NULL;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	2200      	movs	r2, #0
 80028ec:	605a      	str	r2, [r3, #4]
		}

		free(pwm_struct->softStartStruct);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f00d fb2e 	bl	800ff54 <free>
		pwm_struct->softStartStruct = NULL;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
		pwm_struct->softStart = SoftStart_Disabled;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	715a      	strb	r2, [r3, #5]
	}

	if(pwm_struct->pwmMapStruct != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d05b      	beq.n	80029c4 <PWM_DeAlloc+0x104>
	{
		if(pwm_struct->pwmMapStruct->commandVarStep[0] != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <PWM_DeAlloc+0x6a>
		{
			free(pwm_struct->pwmMapStruct->commandVarStep[0]);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4618      	mov	r0, r3
 800291e:	f00d fb19 	bl	800ff54 <free>
			pwm_struct->pwmMapStruct->commandVarStep[0] = NULL;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
		}

		if(pwm_struct->pwmMapStruct->commandVarStep[1] != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d009      	beq.n	8002948 <PWM_DeAlloc+0x88>
		{
			free(pwm_struct->pwmMapStruct->commandVarStep[1]);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	4618      	mov	r0, r3
 800293c:	f00d fb0a 	bl	800ff54 <free>
			pwm_struct->pwmMapStruct->commandVarStep[1] = NULL;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
		}

		for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 8002948:	2300      	movs	r3, #0
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	e01d      	b.n	800298a <PWM_DeAlloc+0xca>
		{
			if(pwm_struct->pwmMapStruct->dutyCycleMap[i] != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d011      	beq.n	8002984 <PWM_DeAlloc+0xc4>
			{
				free(pwm_struct->pwmMapStruct->dutyCycleMap[i]);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f00d faf0 	bl	800ff54 <free>
				pwm_struct->pwmMapStruct->dutyCycleMap[i] = NULL;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	3301      	adds	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	791b      	ldrb	r3, [r3, #4]
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	429a      	cmp	r2, r3
 8002994:	d3db      	bcc.n	800294e <PWM_DeAlloc+0x8e>
			}
		}

		if(pwm_struct->pwmMapStruct->dutyCycleMap != NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <PWM_DeAlloc+0xf4>
		{
			free(pwm_struct->pwmMapStruct->dutyCycleMap);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f00d fad4 	bl	800ff54 <free>
			pwm_struct->pwmMapStruct->dutyCycleMap = NULL;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2200      	movs	r2, #0
 80029b2:	615a      	str	r2, [r3, #20]
		}

		free(pwm_struct->pwmMapStruct);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f00d facb 	bl	800ff54 <free>
		pwm_struct->pwmMapStruct = NULL;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
	}

	if((pwm_struct->presetEnable[0] != 0)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	88db      	ldrh	r3, [r3, #6]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d103      	bne.n	80029d4 <PWM_DeAlloc+0x114>
			|| (pwm_struct->presetEnable[1] != 0))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	891b      	ldrh	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <PWM_DeAlloc+0x11c>
		pwm_struct->outputType = OutType_Preset;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	711a      	strb	r2, [r3, #4]
 80029da:	e002      	b.n	80029e2 <PWM_DeAlloc+0x122>

	else
		pwm_struct->outputType = OutType_Standard;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	711a      	strb	r2, [r3, #4]

	return;
 80029e2:	bf00      	nop
}
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <PWM_SoftStart>:

//Sets the PWM soft start buffer
static HAL_StatusTypeDef PWM_SoftStart(PWM_Control_Struct *pwm_struct)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]

	pwm_struct->softStartStruct->dutyCycles = (pwm_struct->softStartStruct->slope * pwm_struct->dutyCycle) / 1000;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	8812      	ldrh	r2, [r2, #0]
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	4a20      	ldr	r2, [pc, #128]	@ (8002a88 <PWM_SoftStart+0x9c>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	099a      	lsrs	r2, r3, #6
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	b292      	uxth	r2, r2
 8002a14:	801a      	strh	r2, [r3, #0]

	pwm_struct->softStartStruct->dutyCycleBuffer = malloc(pwm_struct->softStartStruct->dutyCycles * sizeof(uint16_t));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	005a      	lsls	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69dc      	ldr	r4, [r3, #28]
 8002a22:	4610      	mov	r0, r2
 8002a24:	f00d fa8e 	bl	800ff44 <malloc>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	6063      	str	r3, [r4, #4]

	if(pwm_struct->softStartStruct->dutyCycleBuffer != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d020      	beq.n	8002a78 <PWM_SoftStart+0x8c>
	{
		for(uint16_t i = 0; i < pwm_struct->softStartStruct->dutyCycles; i++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	81bb      	strh	r3, [r7, #12]
 8002a3a:	e014      	b.n	8002a66 <PWM_SoftStart+0x7a>
			pwm_struct->softStartStruct->dutyCycleBuffer[i] = __PDM_LINEAR_INTERPOLATION(i, 0, pwm_struct->softStartStruct->dutyCycles,
 8002a3c:	89bb      	ldrh	r3, [r7, #12]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	8812      	ldrh	r2, [r2, #0]
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	69d2      	ldr	r2, [r2, #28]
 8002a4a:	8812      	ldrh	r2, [r2, #0]
 8002a4c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	89bb      	ldrh	r3, [r7, #12]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	b28a      	uxth	r2, r1
 8002a5e:	801a      	strh	r2, [r3, #0]
		for(uint16_t i = 0; i < pwm_struct->softStartStruct->dutyCycles; i++)
 8002a60:	89bb      	ldrh	r3, [r7, #12]
 8002a62:	3301      	adds	r3, #1
 8002a64:	81bb      	strh	r3, [r7, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	89ba      	ldrh	r2, [r7, #12]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d3e4      	bcc.n	8002a3c <PWM_SoftStart+0x50>
																							0, pwm_struct->dutyCycle);

		retVal = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	e001      	b.n	8002a7c <PWM_SoftStart+0x90>
	}

	else
		retVal = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]

	return retVal;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd90      	pop	{r4, r7, pc}
 8002a86:	bf00      	nop
 8002a88:	10624dd3 	.word	0x10624dd3

08002a8c <PWM_Map_Duty_Cycle_Set>:

//Sets PWM output duty cycle using its command variables
static uint16_t PWM_Map_Duty_Cycle_Set(PDM_PWM_Map_Struct* pwm_map_struct)
{
 8002a8c:	b4b0      	push	{r4, r5, r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	uint16_t retVal = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	81fb      	strh	r3, [r7, #14]

	//Checks if both command variables out of the column and line limits and attributes the map's closest corner value
	if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	dc0e      	bgt.n	8002ac8 <PWM_Map_Duty_Cycle_Set+0x3c>
		&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dc05      	bgt.n	8002ac8 <PWM_Map_Duty_Cycle_Set+0x3c>

		retVal = pwm_map_struct->dutyCycleMap[0][0];
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	81fb      	strh	r3, [r7, #14]
 8002ac6:	e37e      	b.n	80031c6 <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1])
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68d9      	ldr	r1, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	791b      	ldrb	r3, [r3, #4]
 8002ad6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002ada:	3b01      	subs	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	440b      	add	r3, r1
 8002ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	db15      	blt.n	8002b14 <PWM_Map_Duty_Cycle_Set+0x88>
			 && (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	dc0c      	bgt.n	8002b14 <PWM_Map_Duty_Cycle_Set+0x88>

		retVal = pwm_map_struct->dutyCycleMap[pwm_map_struct->mapLengths[0] - 1][0];
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	791b      	ldrb	r3, [r3, #4]
 8002b02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b06:	3b01      	subs	r3, #1
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	81fb      	strh	r3, [r7, #14]
 8002b12:	e358      	b.n	80031c6 <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	dc1c      	bgt.n	8002b60 <PWM_Map_Duty_Cycle_Set+0xd4>
			 && (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1]))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6919      	ldr	r1, [r3, #16]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	795b      	ldrb	r3, [r3, #5]
 8002b34:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	440b      	add	r3, r1
 8002b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	db0c      	blt.n	8002b60 <PWM_Map_Duty_Cycle_Set+0xd4>

		retVal = pwm_map_struct->dutyCycleMap[0][pwm_map_struct->mapLengths[1] - 1];
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	795b      	ldrb	r3, [r3, #5]
 8002b50:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002b54:	3b01      	subs	r3, #1
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	81fb      	strh	r3, [r7, #14]
 8002b5e:	e332      	b.n	80031c6 <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1])
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68d9      	ldr	r1, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	791b      	ldrb	r3, [r3, #4]
 8002b6e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002b72:	3b01      	subs	r3, #1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	440b      	add	r3, r1
 8002b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	db23      	blt.n	8002bc8 <PWM_Map_Duty_Cycle_Set+0x13c>
			 && (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1]))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6919      	ldr	r1, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	795b      	ldrb	r3, [r3, #5]
 8002b8e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002b92:	3b01      	subs	r3, #1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	440b      	add	r3, r1
 8002b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	db13      	blt.n	8002bc8 <PWM_Map_Duty_Cycle_Set+0x13c>

		retVal = pwm_map_struct->dutyCycleMap[pwm_map_struct->mapLengths[0] - 1][pwm_map_struct->mapLengths[1] - 1];
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	791b      	ldrb	r3, [r3, #4]
 8002ba8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bac:	3b01      	subs	r3, #1
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	795b      	ldrb	r3, [r3, #5]
 8002bb8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	81fb      	strh	r3, [r7, #14]
 8002bc6:	e2fe      	b.n	80031c6 <PWM_Map_Duty_Cycle_Set+0x73a>

	//Check if the command variable point is outside the lines (y limits) of the 3D map or there is only 1 variable input
	else if((pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0])
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	dd14      	ble.n	8002c04 <PWM_Map_Duty_Cycle_Set+0x178>
			|| (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1])
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6919      	ldr	r1, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	795b      	ldrb	r3, [r3, #5]
 8002be8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002bec:	3b01      	subs	r3, #1
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	da04      	bge.n	8002c04 <PWM_Map_Duty_Cycle_Set+0x178>
			|| (pwm_map_struct->mapLengths[1] == 1))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	795b      	ldrb	r3, [r3, #5]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	f040 80c4 	bne.w	8002d8c <PWM_Map_Duty_Cycle_Set+0x300>
	{
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	737b      	strb	r3, [r7, #13]
 8002c08:	e0b8      	b.n	8002d7c <PWM_Map_Duty_Cycle_Set+0x2f0>
		{
			//Checks if the command variable point is inside the x, x + 1 column
			if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][x])
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68d9      	ldr	r1, [r3, #12]
 8002c14:	7b7b      	ldrb	r3, [r7, #13]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	440b      	add	r3, r1
 8002c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	f2c0 80a9 	blt.w	8002d76 <PWM_Map_Duty_Cycle_Set+0x2ea>
				&& (pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][x + 1]))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68d9      	ldr	r1, [r3, #12]
 8002c2e:	7b7b      	ldrb	r3, [r7, #13]
 8002c30:	3301      	adds	r3, #1
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	440b      	add	r3, r1
 8002c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	f300 809b 	bgt.w	8002d76 <PWM_Map_Duty_Cycle_Set+0x2ea>
			{
				//Checks if the command variable point is above or below the lines (y limits) of the 3D map then sets duty cycle via linear interpolation
				if((pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]) || (pwm_map_struct->mapLengths[1] == 1))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	dd03      	ble.n	8002c5a <PWM_Map_Duty_Cycle_Set+0x1ce>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	795b      	ldrb	r3, [r3, #5]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d13c      	bne.n	8002cd4 <PWM_Map_Duty_Cycle_Set+0x248>
				{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002c60:	4619      	mov	r1, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	7b7b      	ldrb	r3, [r7, #13]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c70:	1acb      	subs	r3, r1, r3
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6951      	ldr	r1, [r2, #20]
 8002c76:	7b7a      	ldrb	r2, [r7, #13]
 8002c78:	3201      	adds	r2, #1
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	440a      	add	r2, r1
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	8812      	ldrh	r2, [r2, #0]
 8002c82:	4610      	mov	r0, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6951      	ldr	r1, [r2, #20]
 8002c88:	7b7a      	ldrb	r2, [r7, #13]
 8002c8a:	0092      	lsls	r2, r2, #2
 8002c8c:	440a      	add	r2, r1
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	8812      	ldrh	r2, [r2, #0]
 8002c92:	1a82      	subs	r2, r0, r2
 8002c94:	fb03 f202 	mul.w	r2, r3, r2
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68d9      	ldr	r1, [r3, #12]
 8002c9c:	7b7b      	ldrb	r3, [r7, #13]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68d9      	ldr	r1, [r3, #12]
 8002cae:	7b7b      	ldrb	r3, [r7, #13]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb8:	1ac3      	subs	r3, r0, r3
 8002cba:	fb92 f3f3 	sdiv	r3, r2, r3
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6959      	ldr	r1, [r3, #20]
 8002cc4:	7b7b      	ldrb	r3, [r7, #13]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	81fb      	strh	r3, [r7, #14]
 8002cd2:	e050      	b.n	8002d76 <PWM_Map_Duty_Cycle_Set+0x2ea>
																  	   pwm_map_struct->commandVarStep[0][x],
																	   pwm_map_struct->commandVarStep[0][x + 1],
																	   pwm_map_struct->dutyCycleMap[x][0],
																	   pwm_map_struct->dutyCycleMap[x + 1][0]);
				}else{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	7b7b      	ldrb	r3, [r7, #13]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cea:	1aca      	subs	r2, r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6959      	ldr	r1, [r3, #20]
 8002cf0:	7b7b      	ldrb	r3, [r7, #13]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	6819      	ldr	r1, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	795b      	ldrb	r3, [r3, #5]
 8002cfe:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002d02:	3b01      	subs	r3, #1
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	440b      	add	r3, r1
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6959      	ldr	r1, [r3, #20]
 8002d10:	7b7b      	ldrb	r3, [r7, #13]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	6819      	ldr	r1, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	795b      	ldrb	r3, [r3, #5]
 8002d1c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002d20:	3b01      	subs	r3, #1
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	440b      	add	r3, r1
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	1ac3      	subs	r3, r0, r3
 8002d2a:	fb03 f202 	mul.w	r2, r3, r2
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68d9      	ldr	r1, [r3, #12]
 8002d32:	7b7b      	ldrb	r3, [r7, #13]
 8002d34:	3301      	adds	r3, #1
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	440b      	add	r3, r1
 8002d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68d9      	ldr	r1, [r3, #12]
 8002d44:	7b7b      	ldrb	r3, [r7, #13]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	440b      	add	r3, r1
 8002d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4e:	1ac3      	subs	r3, r0, r3
 8002d50:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6959      	ldr	r1, [r3, #20]
 8002d5a:	7b7b      	ldrb	r3, [r7, #13]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	795b      	ldrb	r3, [r3, #5]
 8002d66:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	440b      	add	r3, r1
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	4413      	add	r3, r2
 8002d74:	81fb      	strh	r3, [r7, #14]
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002d76:	7b7b      	ldrb	r3, [r7, #13]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	737b      	strb	r3, [r7, #13]
 8002d7c:	7b7a      	ldrb	r2, [r7, #13]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	791b      	ldrb	r3, [r3, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	429a      	cmp	r2, r3
 8002d86:	f6ff af40 	blt.w	8002c0a <PWM_Map_Duty_Cycle_Set+0x17e>
 8002d8a:	e21c      	b.n	80031c6 <PWM_Map_Duty_Cycle_Set+0x73a>
			}
		}
	}

	//Check if the command variable point is outside the columns (x limits) of the 3D map
	else if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	dd10      	ble.n	8002dc0 <PWM_Map_Duty_Cycle_Set+0x334>
			|| (pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1]))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68d9      	ldr	r1, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	791b      	ldrb	r3, [r3, #4]
 8002dac:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8002db0:	3b01      	subs	r3, #1
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	440b      	add	r3, r1
 8002db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	f2c0 80c0 	blt.w	8002f40 <PWM_Map_Duty_Cycle_Set+0x4b4>
	{
		for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	733b      	strb	r3, [r7, #12]
 8002dc4:	e0b4      	b.n	8002f30 <PWM_Map_Duty_Cycle_Set+0x4a4>
		{
			//Checks if the command variable point is inside the y, y + 1 line
			if((pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][y])
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6919      	ldr	r1, [r3, #16]
 8002dd0:	7b3b      	ldrb	r3, [r7, #12]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	440b      	add	r3, r1
 8002dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	f2c0 80a5 	blt.w	8002f2a <PWM_Map_Duty_Cycle_Set+0x49e>
				&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][y + 1]))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6919      	ldr	r1, [r3, #16]
 8002dea:	7b3b      	ldrb	r3, [r7, #12]
 8002dec:	3301      	adds	r3, #1
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	440b      	add	r3, r1
 8002df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	f300 8097 	bgt.w	8002f2a <PWM_Map_Duty_Cycle_Set+0x49e>
			{
				//Checks if the command variable point is to the left or to the right of the 3D map then sets duty cycle via linear interpolation
				if(pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	dc3c      	bgt.n	8002e88 <PWM_Map_Duty_Cycle_Set+0x3fc>
				{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[1],
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e14:	4619      	mov	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	7b3b      	ldrb	r3, [r7, #12]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e24:	1acb      	subs	r3, r1, r3
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6952      	ldr	r2, [r2, #20]
 8002e2a:	6811      	ldr	r1, [r2, #0]
 8002e2c:	7b3a      	ldrb	r2, [r7, #12]
 8002e2e:	3201      	adds	r2, #1
 8002e30:	0052      	lsls	r2, r2, #1
 8002e32:	440a      	add	r2, r1
 8002e34:	8812      	ldrh	r2, [r2, #0]
 8002e36:	4610      	mov	r0, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6952      	ldr	r2, [r2, #20]
 8002e3c:	6811      	ldr	r1, [r2, #0]
 8002e3e:	7b3a      	ldrb	r2, [r7, #12]
 8002e40:	0052      	lsls	r2, r2, #1
 8002e42:	440a      	add	r2, r1
 8002e44:	8812      	ldrh	r2, [r2, #0]
 8002e46:	1a82      	subs	r2, r0, r2
 8002e48:	fb03 f202 	mul.w	r2, r3, r2
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6919      	ldr	r1, [r3, #16]
 8002e50:	7b3b      	ldrb	r3, [r7, #12]
 8002e52:	3301      	adds	r3, #1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	440b      	add	r3, r1
 8002e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6919      	ldr	r1, [r3, #16]
 8002e62:	7b3b      	ldrb	r3, [r7, #12]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	440b      	add	r3, r1
 8002e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e6c:	1ac3      	subs	r3, r0, r3
 8002e6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	7b3b      	ldrb	r3, [r7, #12]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	440b      	add	r3, r1
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	81fb      	strh	r3, [r7, #14]
 8002e86:	e050      	b.n	8002f2a <PWM_Map_Duty_Cycle_Set+0x49e>
																  	   pwm_map_struct->commandVarStep[1][y],
																	   pwm_map_struct->commandVarStep[1][y + 1],
																	   pwm_map_struct->dutyCycleMap[0][y],
																	   pwm_map_struct->dutyCycleMap[0][y + 1]);
				}else{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[1],
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	7b3b      	ldrb	r3, [r7, #12]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	4413      	add	r3, r2
 8002e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e9e:	1aca      	subs	r2, r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6959      	ldr	r1, [r3, #20]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	791b      	ldrb	r3, [r3, #4]
 8002ea8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002eac:	3b01      	subs	r3, #1
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	7b3b      	ldrb	r3, [r7, #12]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	440b      	add	r3, r1
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6959      	ldr	r1, [r3, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	791b      	ldrb	r3, [r3, #4]
 8002ec8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	6819      	ldr	r1, [r3, #0]
 8002ed4:	7b3b      	ldrb	r3, [r7, #12]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	440b      	add	r3, r1
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	1ac3      	subs	r3, r0, r3
 8002ede:	fb03 f202 	mul.w	r2, r3, r2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6919      	ldr	r1, [r3, #16]
 8002ee6:	7b3b      	ldrb	r3, [r7, #12]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	440b      	add	r3, r1
 8002eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6919      	ldr	r1, [r3, #16]
 8002ef8:	7b3b      	ldrb	r3, [r7, #12]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	440b      	add	r3, r1
 8002efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f02:	1ac3      	subs	r3, r0, r3
 8002f04:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6959      	ldr	r1, [r3, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	791b      	ldrb	r3, [r3, #4]
 8002f12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f16:	3b01      	subs	r3, #1
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	7b3b      	ldrb	r3, [r7, #12]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	440b      	add	r3, r1
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	81fb      	strh	r3, [r7, #14]
		for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002f2a:	7b3b      	ldrb	r3, [r7, #12]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	733b      	strb	r3, [r7, #12]
 8002f30:	7b3a      	ldrb	r2, [r7, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	795b      	ldrb	r3, [r3, #5]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	f6ff af44 	blt.w	8002dc6 <PWM_Map_Duty_Cycle_Set+0x33a>
 8002f3e:	e142      	b.n	80031c6 <PWM_Map_Duty_Cycle_Set+0x73a>
	}

	//Since the command variable point is inside the map's boundary, sets duty cycle via bilinear interpolation
	else
	{
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	72fb      	strb	r3, [r7, #11]
 8002f44:	e138      	b.n	80031b8 <PWM_Map_Duty_Cycle_Set+0x72c>
		{
			//Checks if the command variable point is inside the x, x + 1 column
			if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][x])
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68d9      	ldr	r1, [r3, #12]
 8002f50:	7afb      	ldrb	r3, [r7, #11]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	440b      	add	r3, r1
 8002f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	f2c0 8129 	blt.w	80031b2 <PWM_Map_Duty_Cycle_Set+0x726>
				&& (pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][x + 1]))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68d9      	ldr	r1, [r3, #12]
 8002f6a:	7afb      	ldrb	r3, [r7, #11]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	440b      	add	r3, r1
 8002f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	f300 811b 	bgt.w	80031b2 <PWM_Map_Duty_Cycle_Set+0x726>
			{
				for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	72bb      	strb	r3, [r7, #10]
 8002f80:	e110      	b.n	80031a4 <PWM_Map_Duty_Cycle_Set+0x718>
				{
					//Checks if the command variable point is inside the y, y + 1 line
					if((pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][y])
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6919      	ldr	r1, [r3, #16]
 8002f8c:	7abb      	ldrb	r3, [r7, #10]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	440b      	add	r3, r1
 8002f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	f2c0 8101 	blt.w	800319e <PWM_Map_Duty_Cycle_Set+0x712>
						&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][y + 1]))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6919      	ldr	r1, [r3, #16]
 8002fa6:	7abb      	ldrb	r3, [r7, #10]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	440b      	add	r3, r1
 8002fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	f300 80f3 	bgt.w	800319e <PWM_Map_Duty_Cycle_Set+0x712>
					{
						retVal = __PDM_BILINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	7abb      	ldrb	r3, [r7, #10]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	4413      	add	r3, r2
 8002fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fce:	1acb      	subs	r3, r1, r3
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68d1      	ldr	r1, [r2, #12]
 8002fdc:	7afa      	ldrb	r2, [r7, #11]
 8002fde:	0052      	lsls	r2, r2, #1
 8002fe0:	440a      	add	r2, r1
 8002fe2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002fe6:	1a82      	subs	r2, r0, r2
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	6948      	ldr	r0, [r1, #20]
 8002fec:	7af9      	ldrb	r1, [r7, #11]
 8002fee:	3101      	adds	r1, #1
 8002ff0:	0089      	lsls	r1, r1, #2
 8002ff2:	4401      	add	r1, r0
 8002ff4:	6808      	ldr	r0, [r1, #0]
 8002ff6:	7ab9      	ldrb	r1, [r7, #10]
 8002ff8:	3101      	adds	r1, #1
 8002ffa:	0049      	lsls	r1, r1, #1
 8002ffc:	4401      	add	r1, r0
 8002ffe:	8809      	ldrh	r1, [r1, #0]
 8003000:	460c      	mov	r4, r1
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	6948      	ldr	r0, [r1, #20]
 8003006:	7af9      	ldrb	r1, [r7, #11]
 8003008:	0089      	lsls	r1, r1, #2
 800300a:	4401      	add	r1, r0
 800300c:	6808      	ldr	r0, [r1, #0]
 800300e:	7ab9      	ldrb	r1, [r7, #10]
 8003010:	3101      	adds	r1, #1
 8003012:	0049      	lsls	r1, r1, #1
 8003014:	4401      	add	r1, r0
 8003016:	8809      	ldrh	r1, [r1, #0]
 8003018:	1a61      	subs	r1, r4, r1
 800301a:	fb02 f101 	mul.w	r1, r2, r1
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68d0      	ldr	r0, [r2, #12]
 8003022:	7afa      	ldrb	r2, [r7, #11]
 8003024:	3201      	adds	r2, #1
 8003026:	0052      	lsls	r2, r2, #1
 8003028:	4402      	add	r2, r0
 800302a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800302e:	4614      	mov	r4, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	68d0      	ldr	r0, [r2, #12]
 8003034:	7afa      	ldrb	r2, [r7, #11]
 8003036:	0052      	lsls	r2, r2, #1
 8003038:	4402      	add	r2, r0
 800303a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800303e:	1aa2      	subs	r2, r4, r2
 8003040:	fb91 f2f2 	sdiv	r2, r1, r2
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	6948      	ldr	r0, [r1, #20]
 8003048:	7af9      	ldrb	r1, [r7, #11]
 800304a:	0089      	lsls	r1, r1, #2
 800304c:	4401      	add	r1, r0
 800304e:	6808      	ldr	r0, [r1, #0]
 8003050:	7ab9      	ldrb	r1, [r7, #10]
 8003052:	3101      	adds	r1, #1
 8003054:	0049      	lsls	r1, r1, #1
 8003056:	4401      	add	r1, r0
 8003058:	8809      	ldrh	r1, [r1, #0]
 800305a:	4411      	add	r1, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003062:	4614      	mov	r4, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68d0      	ldr	r0, [r2, #12]
 8003068:	7afa      	ldrb	r2, [r7, #11]
 800306a:	0052      	lsls	r2, r2, #1
 800306c:	4402      	add	r2, r0
 800306e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003072:	1aa2      	subs	r2, r4, r2
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	6944      	ldr	r4, [r0, #20]
 8003078:	7af8      	ldrb	r0, [r7, #11]
 800307a:	3001      	adds	r0, #1
 800307c:	0080      	lsls	r0, r0, #2
 800307e:	4420      	add	r0, r4
 8003080:	6804      	ldr	r4, [r0, #0]
 8003082:	7ab8      	ldrb	r0, [r7, #10]
 8003084:	0040      	lsls	r0, r0, #1
 8003086:	4420      	add	r0, r4
 8003088:	8800      	ldrh	r0, [r0, #0]
 800308a:	4605      	mov	r5, r0
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	6944      	ldr	r4, [r0, #20]
 8003090:	7af8      	ldrb	r0, [r7, #11]
 8003092:	0080      	lsls	r0, r0, #2
 8003094:	4420      	add	r0, r4
 8003096:	6804      	ldr	r4, [r0, #0]
 8003098:	7ab8      	ldrb	r0, [r7, #10]
 800309a:	0040      	lsls	r0, r0, #1
 800309c:	4420      	add	r0, r4
 800309e:	8800      	ldrh	r0, [r0, #0]
 80030a0:	1a28      	subs	r0, r5, r0
 80030a2:	fb02 f000 	mul.w	r0, r2, r0
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68d4      	ldr	r4, [r2, #12]
 80030aa:	7afa      	ldrb	r2, [r7, #11]
 80030ac:	3201      	adds	r2, #1
 80030ae:	0052      	lsls	r2, r2, #1
 80030b0:	4422      	add	r2, r4
 80030b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80030b6:	4615      	mov	r5, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	68d4      	ldr	r4, [r2, #12]
 80030bc:	7afa      	ldrb	r2, [r7, #11]
 80030be:	0052      	lsls	r2, r2, #1
 80030c0:	4422      	add	r2, r4
 80030c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80030c6:	1aaa      	subs	r2, r5, r2
 80030c8:	fb90 f2f2 	sdiv	r2, r0, r2
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	6944      	ldr	r4, [r0, #20]
 80030d0:	7af8      	ldrb	r0, [r7, #11]
 80030d2:	0080      	lsls	r0, r0, #2
 80030d4:	4420      	add	r0, r4
 80030d6:	6804      	ldr	r4, [r0, #0]
 80030d8:	7ab8      	ldrb	r0, [r7, #10]
 80030da:	0040      	lsls	r0, r0, #1
 80030dc:	4420      	add	r0, r4
 80030de:	8800      	ldrh	r0, [r0, #0]
 80030e0:	4402      	add	r2, r0
 80030e2:	1a8a      	subs	r2, r1, r2
 80030e4:	fb03 f202 	mul.w	r2, r3, r2
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6919      	ldr	r1, [r3, #16]
 80030ec:	7abb      	ldrb	r3, [r7, #10]
 80030ee:	3301      	adds	r3, #1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	440b      	add	r3, r1
 80030f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f8:	4618      	mov	r0, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6919      	ldr	r1, [r3, #16]
 80030fe:	7abb      	ldrb	r3, [r7, #10]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	440b      	add	r3, r1
 8003104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003108:	1ac3      	subs	r3, r0, r3
 800310a:	fb92 f3f3 	sdiv	r3, r2, r3
 800310e:	b29a      	uxth	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003116:	4618      	mov	r0, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68d9      	ldr	r1, [r3, #12]
 800311c:	7afb      	ldrb	r3, [r7, #11]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	440b      	add	r3, r1
 8003122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003126:	1ac3      	subs	r3, r0, r3
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	6948      	ldr	r0, [r1, #20]
 800312c:	7af9      	ldrb	r1, [r7, #11]
 800312e:	3101      	adds	r1, #1
 8003130:	0089      	lsls	r1, r1, #2
 8003132:	4401      	add	r1, r0
 8003134:	6808      	ldr	r0, [r1, #0]
 8003136:	7ab9      	ldrb	r1, [r7, #10]
 8003138:	0049      	lsls	r1, r1, #1
 800313a:	4401      	add	r1, r0
 800313c:	8809      	ldrh	r1, [r1, #0]
 800313e:	460c      	mov	r4, r1
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	6948      	ldr	r0, [r1, #20]
 8003144:	7af9      	ldrb	r1, [r7, #11]
 8003146:	0089      	lsls	r1, r1, #2
 8003148:	4401      	add	r1, r0
 800314a:	6808      	ldr	r0, [r1, #0]
 800314c:	7ab9      	ldrb	r1, [r7, #10]
 800314e:	0049      	lsls	r1, r1, #1
 8003150:	4401      	add	r1, r0
 8003152:	8809      	ldrh	r1, [r1, #0]
 8003154:	1a61      	subs	r1, r4, r1
 8003156:	fb03 f101 	mul.w	r1, r3, r1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68d8      	ldr	r0, [r3, #12]
 800315e:	7afb      	ldrb	r3, [r7, #11]
 8003160:	3301      	adds	r3, #1
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4403      	add	r3, r0
 8003166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800316a:	461c      	mov	r4, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68d8      	ldr	r0, [r3, #12]
 8003170:	7afb      	ldrb	r3, [r7, #11]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4403      	add	r3, r0
 8003176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800317a:	1ae3      	subs	r3, r4, r3
 800317c:	fb91 f3f3 	sdiv	r3, r1, r3
 8003180:	b299      	uxth	r1, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6958      	ldr	r0, [r3, #20]
 8003186:	7afb      	ldrb	r3, [r7, #11]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4403      	add	r3, r0
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	7abb      	ldrb	r3, [r7, #10]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4403      	add	r3, r0
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	440b      	add	r3, r1
 8003198:	b29b      	uxth	r3, r3
 800319a:	4413      	add	r3, r2
 800319c:	81fb      	strh	r3, [r7, #14]
				for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 800319e:	7abb      	ldrb	r3, [r7, #10]
 80031a0:	3301      	adds	r3, #1
 80031a2:	72bb      	strb	r3, [r7, #10]
 80031a4:	7aba      	ldrb	r2, [r7, #10]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	795b      	ldrb	r3, [r3, #5]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	429a      	cmp	r2, r3
 80031ae:	f6ff aee8 	blt.w	8002f82 <PWM_Map_Duty_Cycle_Set+0x4f6>
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 80031b2:	7afb      	ldrb	r3, [r7, #11]
 80031b4:	3301      	adds	r3, #1
 80031b6:	72fb      	strb	r3, [r7, #11]
 80031b8:	7afa      	ldrb	r2, [r7, #11]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	791b      	ldrb	r3, [r3, #4]
 80031be:	3b01      	subs	r3, #1
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f6ff aec0 	blt.w	8002f46 <PWM_Map_Duty_Cycle_Set+0x4ba>
				}
			}
		}
	}

	return retVal;
 80031c6:	89fb      	ldrh	r3, [r7, #14]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bcb0      	pop	{r4, r5, r7}
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_CAN_RxFifo0MsgPendingCallback>:

#include "pdm.h"
#include "stdlib.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxMessage, canRxData) == HAL_OK)
 80031dc:	4b09      	ldr	r3, [pc, #36]	@ (8003204 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80031de:	4a0a      	ldr	r2, [pc, #40]	@ (8003208 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80031e0:	2100      	movs	r1, #0
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f002 f925 	bl	8005432 <HAL_CAN_GetRxMessage>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		PDM_CAN_Process_Rx_Data();
 80031ee:	f7fe f993 	bl	8001518 <PDM_CAN_Process_Rx_Data>

		HAL_GPIO_TogglePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin);
 80031f2:	2180      	movs	r1, #128	@ 0x80
 80031f4:	4805      	ldr	r0, [pc, #20]	@ (800320c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80031f6:	f003 fc0c 	bl	8006a12 <HAL_GPIO_TogglePin>
	}

	return;
 80031fa:	bf00      	nop
 80031fc:	bf00      	nop
}
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	2000066c 	.word	0x2000066c
 8003208:	20000680 	.word	0x20000680
 800320c:	40021800 	.word	0x40021800

08003210 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	80fb      	strh	r3, [r7, #6]
	PDM_Input_Process();
 800321a:	f7fe ff91 	bl	8002140 <PDM_Input_Process>

	PDM_Output_Process();
 800321e:	f7ff f88f 	bl	8002340 <PDM_Output_Process>

	return;
 8003222:	bf00      	nop
}
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a40      	ldr	r2, [pc, #256]	@ (800333c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d106      	bne.n	800324c <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_TIM_Base_Stop_IT(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f006 feec 	bl	800a01c <HAL_TIM_Base_Stop_IT>
		flagReading[1] = Data_Read_Ready;
 8003244:	4b3e      	ldr	r3, [pc, #248]	@ (8003340 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003246:	2200      	movs	r2, #0
 8003248:	705a      	strb	r2, [r3, #1]
//			HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
//			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, pwmOutStruct[3].dutyCycle);
//		}
//	}

	return;
 800324a:	e073      	b.n	8003334 <HAL_TIM_PeriodElapsedCallback+0x108>
	else if(htim->Instance == TIM7)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a3c      	ldr	r2, [pc, #240]	@ (8003344 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d16e      	bne.n	8003334 <HAL_TIM_PeriodElapsedCallback+0x108>
		accMsg10Hz++;
 8003256:	4b3c      	ldr	r3, [pc, #240]	@ (8003348 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	4a3a      	ldr	r2, [pc, #232]	@ (8003348 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800325e:	6013      	str	r3, [r2, #0]
		accMsg25Hz++;
 8003260:	4b3a      	ldr	r3, [pc, #232]	@ (800334c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	4a39      	ldr	r2, [pc, #228]	@ (800334c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003268:	6013      	str	r3, [r2, #0]
		accMsg50Hz++;
 800326a:	4b39      	ldr	r3, [pc, #228]	@ (8003350 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3301      	adds	r3, #1
 8003270:	4a37      	ldr	r2, [pc, #220]	@ (8003350 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003272:	6013      	str	r3, [r2, #0]
		accMsg80Hz++,
 8003274:	4b37      	ldr	r3, [pc, #220]	@ (8003354 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	4a36      	ldr	r2, [pc, #216]	@ (8003354 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800327c:	6013      	str	r3, [r2, #0]
		accMsg100Hz++;
 800327e:	4b36      	ldr	r3, [pc, #216]	@ (8003358 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3301      	adds	r3, #1
 8003284:	4a34      	ldr	r2, [pc, #208]	@ (8003358 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003286:	6013      	str	r3, [r2, #0]
		accUsbData++;
 8003288:	4b34      	ldr	r3, [pc, #208]	@ (800335c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3301      	adds	r3, #1
 800328e:	4a33      	ldr	r2, [pc, #204]	@ (800335c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003290:	6013      	str	r3, [r2, #0]
		accOutputFuse[0]++;
 8003292:	4b33      	ldr	r3, [pc, #204]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3301      	adds	r3, #1
 8003298:	4a31      	ldr	r2, [pc, #196]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800329a:	6013      	str	r3, [r2, #0]
		accOutputFuse[1]++;
 800329c:	4b30      	ldr	r3, [pc, #192]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	3301      	adds	r3, #1
 80032a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032a4:	6053      	str	r3, [r2, #4]
		accOutputFuse[2]++;
 80032a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	3301      	adds	r3, #1
 80032ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032ae:	6093      	str	r3, [r2, #8]
		accOutputFuse[3]++;
 80032b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	3301      	adds	r3, #1
 80032b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032b8:	60d3      	str	r3, [r2, #12]
		accOutputFuse[4]++;
 80032ba:	4b29      	ldr	r3, [pc, #164]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	3301      	adds	r3, #1
 80032c0:	4a27      	ldr	r2, [pc, #156]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032c2:	6113      	str	r3, [r2, #16]
		accOutputFuse[5]++;
 80032c4:	4b26      	ldr	r3, [pc, #152]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	3301      	adds	r3, #1
 80032ca:	4a25      	ldr	r2, [pc, #148]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032cc:	6153      	str	r3, [r2, #20]
		accOutputFuse[6]++;
 80032ce:	4b24      	ldr	r3, [pc, #144]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	3301      	adds	r3, #1
 80032d4:	4a22      	ldr	r2, [pc, #136]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032d6:	6193      	str	r3, [r2, #24]
		accOutputFuse[7]++;
 80032d8:	4b21      	ldr	r3, [pc, #132]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	3301      	adds	r3, #1
 80032de:	4a20      	ldr	r2, [pc, #128]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032e0:	61d3      	str	r3, [r2, #28]
		accOutputFuse[8]++;
 80032e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	3301      	adds	r3, #1
 80032e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032ea:	6213      	str	r3, [r2, #32]
		accOutputFuse[9]++;
 80032ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	3301      	adds	r3, #1
 80032f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032f4:	6253      	str	r3, [r2, #36]	@ 0x24
		accOutputFuse[10]++;
 80032f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fa:	3301      	adds	r3, #1
 80032fc:	4a18      	ldr	r2, [pc, #96]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032fe:	6293      	str	r3, [r2, #40]	@ 0x28
		accOutputFuse[11]++;
 8003300:	4b17      	ldr	r3, [pc, #92]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	3301      	adds	r3, #1
 8003306:	4a16      	ldr	r2, [pc, #88]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003308:	62d3      	str	r3, [r2, #44]	@ 0x2c
		accOutputFuse[12]++;
 800330a:	4b15      	ldr	r3, [pc, #84]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	3301      	adds	r3, #1
 8003310:	4a13      	ldr	r2, [pc, #76]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003312:	6313      	str	r3, [r2, #48]	@ 0x30
		accOutputFuse[13]++;
 8003314:	4b12      	ldr	r3, [pc, #72]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003318:	3301      	adds	r3, #1
 800331a:	4a11      	ldr	r2, [pc, #68]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800331c:	6353      	str	r3, [r2, #52]	@ 0x34
		accOutputFuse[14]++;
 800331e:	4b10      	ldr	r3, [pc, #64]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003322:	3301      	adds	r3, #1
 8003324:	4a0e      	ldr	r2, [pc, #56]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003326:	6393      	str	r3, [r2, #56]	@ 0x38
		accOutputFuse[15]++;
 8003328:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800332a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332c:	3301      	adds	r3, #1
 800332e:	4a0c      	ldr	r2, [pc, #48]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003330:	63d3      	str	r3, [r2, #60]	@ 0x3c
	return;
 8003332:	bf00      	nop
 8003334:	bf00      	nop
}
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40001000 	.word	0x40001000
 8003340:	200007dc 	.word	0x200007dc
 8003344:	40001400 	.word	0x40001400
 8003348:	20000944 	.word	0x20000944
 800334c:	20000948 	.word	0x20000948
 8003350:	2000094c 	.word	0x2000094c
 8003354:	20000950 	.word	0x20000950
 8003358:	20000954 	.word	0x20000954
 800335c:	20000958 	.word	0x20000958
 8003360:	2000095c 	.word	0x2000095c

08003364 <PDM_Data_Conversion>:


//Reads ADC value and converts into data
//Returns HAL_TIM_Base_Start_IT status
HAL_StatusTypeDef PDM_Data_Conversion(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	uint8_t flag_fuse = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef retVal = HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	72fb      	strb	r3, [r7, #11]

	flagReading[1] = Data_Read_Waiting;
 8003374:	4baa      	ldr	r3, [pc, #680]	@ (8003620 <PDM_Data_Conversion+0x2bc>)
 8003376:	2201      	movs	r2, #1
 8003378:	705a      	strb	r2, [r3, #1]

	//Convert ADC value based on selected reading and sets delay for next reading
	switch(flagReading[0])
 800337a:	4ba9      	ldr	r3, [pc, #676]	@ (8003620 <PDM_Data_Conversion+0x2bc>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	3b02      	subs	r3, #2
 8003380:	2b03      	cmp	r3, #3
 8003382:	f200 81f4 	bhi.w	800376e <PDM_Data_Conversion+0x40a>
 8003386:	a201      	add	r2, pc, #4	@ (adr r2, 800338c <PDM_Data_Conversion+0x28>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080034cf 	.word	0x080034cf
 8003394:	0800361b 	.word	0x0800361b
 8003398:	080036ef 	.word	0x080036ef
	{
	case Data_Read_Current0:

		for(uint8_t i = 0; i < 8; i++)
 800339c:	2300      	movs	r3, #0
 800339e:	73bb      	strb	r3, [r7, #14]
 80033a0:	e072      	b.n	8003488 <PDM_Data_Conversion+0x124>
		{
			//Convert ADC into current
			dataBuffer[i * 2] = adcBuffer[i];//__PDM_CONVERT_CURRENT(adcBuffer[i]);
 80033a2:	7bba      	ldrb	r2, [r7, #14]
 80033a4:	7bbb      	ldrb	r3, [r7, #14]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	499e      	ldr	r1, [pc, #632]	@ (8003624 <PDM_Data_Conversion+0x2c0>)
 80033aa:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80033ae:	4a9e      	ldr	r2, [pc, #632]	@ (8003628 <PDM_Data_Conversion+0x2c4>)
 80033b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((dataBuffer[i * 2] <= outputStruct[i * 2].currentThresholds)
 80033b4:	7bbb      	ldrb	r3, [r7, #14]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4a9b      	ldr	r2, [pc, #620]	@ (8003628 <PDM_Data_Conversion+0x2c4>)
 80033ba:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80033be:	7bbb      	ldrb	r3, [r7, #14]
 80033c0:	005a      	lsls	r2, r3, #1
 80033c2:	489a      	ldr	r0, [pc, #616]	@ (800362c <PDM_Data_Conversion+0x2c8>)
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4403      	add	r3, r0
 80033ce:	3308      	adds	r3, #8
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	4299      	cmp	r1, r3
 80033d4:	d90b      	bls.n	80033ee <PDM_Data_Conversion+0x8a>
					|| (outputStruct[i * 2].timeoutOutputFuse == 0))
 80033d6:	7bbb      	ldrb	r3, [r7, #14]
 80033d8:	005a      	lsls	r2, r3, #1
 80033da:	4994      	ldr	r1, [pc, #592]	@ (800362c <PDM_Data_Conversion+0x2c8>)
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	440b      	add	r3, r1
 80033e6:	330a      	adds	r3, #10
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <PDM_Data_Conversion+0x98>
				accOutputFuse[i * 2] = 0;
 80033ee:	7bbb      	ldrb	r3, [r7, #14]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4a8f      	ldr	r2, [pc, #572]	@ (8003630 <PDM_Data_Conversion+0x2cc>)
 80033f4:	2100      	movs	r1, #0
 80033f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80033fa:	e020      	b.n	800343e <PDM_Data_Conversion+0xda>

			else if(accOutputFuse[i * 2] > outputStruct[i * 2].timeoutOutputFuse)
 80033fc:	7bbb      	ldrb	r3, [r7, #14]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4a8b      	ldr	r2, [pc, #556]	@ (8003630 <PDM_Data_Conversion+0x2cc>)
 8003402:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003406:	7bbb      	ldrb	r3, [r7, #14]
 8003408:	005a      	lsls	r2, r3, #1
 800340a:	4888      	ldr	r0, [pc, #544]	@ (800362c <PDM_Data_Conversion+0x2c8>)
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4403      	add	r3, r0
 8003416:	330a      	adds	r3, #10
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	4299      	cmp	r1, r3
 800341c:	d90f      	bls.n	800343e <PDM_Data_Conversion+0xda>
			{
				flag_fuse = 1;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
				flagDriverSafety |= 1 << (i * 2);
 8003422:	7bbb      	ldrb	r3, [r7, #14]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2201      	movs	r2, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	b21a      	sxth	r2, r3
 800342e:	4b81      	ldr	r3, [pc, #516]	@ (8003634 <PDM_Data_Conversion+0x2d0>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b21b      	sxth	r3, r3
 8003434:	4313      	orrs	r3, r2
 8003436:	b21b      	sxth	r3, r3
 8003438:	b29a      	uxth	r2, r3
 800343a:	4b7e      	ldr	r3, [pc, #504]	@ (8003634 <PDM_Data_Conversion+0x2d0>)
 800343c:	801a      	strh	r2, [r3, #0]
			}

			if(adcBuffer[i] < ADC_THRESHOLD_HIGH)
 800343e:	7bbb      	ldrb	r3, [r7, #14]
 8003440:	4a78      	ldr	r2, [pc, #480]	@ (8003624 <PDM_Data_Conversion+0x2c0>)
 8003442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003446:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800344a:	d20d      	bcs.n	8003468 <PDM_Data_Conversion+0x104>
				dataIdBuffer[i * 2] |= 1;
 800344c:	7bbb      	ldrb	r3, [r7, #14]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4a79      	ldr	r2, [pc, #484]	@ (8003638 <PDM_Data_Conversion+0x2d4>)
 8003452:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003456:	7bbb      	ldrb	r3, [r7, #14]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	b291      	uxth	r1, r2
 8003460:	4a75      	ldr	r2, [pc, #468]	@ (8003638 <PDM_Data_Conversion+0x2d4>)
 8003462:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003466:	e00c      	b.n	8003482 <PDM_Data_Conversion+0x11e>
			else
				dataIdBuffer[i * 2] &= 0xFFFE;
 8003468:	7bbb      	ldrb	r3, [r7, #14]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <PDM_Data_Conversion+0x2d4>)
 800346e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003472:	7bbb      	ldrb	r3, [r7, #14]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	b291      	uxth	r1, r2
 800347c:	4a6e      	ldr	r2, [pc, #440]	@ (8003638 <PDM_Data_Conversion+0x2d4>)
 800347e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003482:	7bbb      	ldrb	r3, [r7, #14]
 8003484:	3301      	adds	r3, #1
 8003486:	73bb      	strb	r3, [r7, #14]
 8003488:	7bbb      	ldrb	r3, [r7, #14]
 800348a:	2b07      	cmp	r3, #7
 800348c:	d989      	bls.n	80033a2 <PDM_Data_Conversion+0x3e>
		}

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 800348e:	2201      	movs	r2, #1
 8003490:	2120      	movs	r1, #32
 8003492:	486a      	ldr	r0, [pc, #424]	@ (800363c <PDM_Data_Conversion+0x2d8>)
 8003494:	f003 faa4 	bl	80069e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8003498:	2200      	movs	r2, #0
 800349a:	2110      	movs	r1, #16
 800349c:	4867      	ldr	r0, [pc, #412]	@ (800363c <PDM_Data_Conversion+0x2d8>)
 800349e:	f003 fa9f 	bl	80069e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 80034a2:	2201      	movs	r2, #1
 80034a4:	2108      	movs	r1, #8
 80034a6:	4865      	ldr	r0, [pc, #404]	@ (800363c <PDM_Data_Conversion+0x2d8>)
 80034a8:	f003 fa9a 	bl	80069e0 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Current1;
 80034ac:	4b5c      	ldr	r3, [pc, #368]	@ (8003620 <PDM_Data_Conversion+0x2bc>)
 80034ae:	2203      	movs	r2, #3
 80034b0:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_CURR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034ca:	60da      	str	r2, [r3, #12]

		break;
 80034cc:	e16f      	b.n	80037ae <PDM_Data_Conversion+0x44a>

	case Data_Read_Current1:

		for(uint8_t i = 0; i < 8; i++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	737b      	strb	r3, [r7, #13]
 80034d2:	e07e      	b.n	80035d2 <PDM_Data_Conversion+0x26e>
		{
			//Convert ADC into current
			dataBuffer[(i * 2) + 1] = adcBuffer[i];//__PDM_CONVERT_CURRENT(adcBuffer[i]);
 80034d4:	7b7a      	ldrb	r2, [r7, #13]
 80034d6:	7b7b      	ldrb	r3, [r7, #13]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	3301      	adds	r3, #1
 80034dc:	4951      	ldr	r1, [pc, #324]	@ (8003624 <PDM_Data_Conversion+0x2c0>)
 80034de:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80034e2:	4a51      	ldr	r2, [pc, #324]	@ (8003628 <PDM_Data_Conversion+0x2c4>)
 80034e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((dataBuffer[(i * 2) + 1] <= outputStruct[(i * 2) + 1].currentThresholds)
 80034e8:	7b7b      	ldrb	r3, [r7, #13]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	3301      	adds	r3, #1
 80034ee:	4a4e      	ldr	r2, [pc, #312]	@ (8003628 <PDM_Data_Conversion+0x2c4>)
 80034f0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80034f4:	7b7b      	ldrb	r3, [r7, #13]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	484c      	ldr	r0, [pc, #304]	@ (800362c <PDM_Data_Conversion+0x2c8>)
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4403      	add	r3, r0
 8003506:	3308      	adds	r3, #8
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	4299      	cmp	r1, r3
 800350c:	d90c      	bls.n	8003528 <PDM_Data_Conversion+0x1c4>
					|| (outputStruct[(i * 2) + 1].timeoutOutputFuse == 0))
 800350e:	7b7b      	ldrb	r3, [r7, #13]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	4945      	ldr	r1, [pc, #276]	@ (800362c <PDM_Data_Conversion+0x2c8>)
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	440b      	add	r3, r1
 8003520:	330a      	adds	r3, #10
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d107      	bne.n	8003538 <PDM_Data_Conversion+0x1d4>
				accOutputFuse[(i * 2) + 1] = 0;
 8003528:	7b7b      	ldrb	r3, [r7, #13]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	3301      	adds	r3, #1
 800352e:	4a40      	ldr	r2, [pc, #256]	@ (8003630 <PDM_Data_Conversion+0x2cc>)
 8003530:	2100      	movs	r1, #0
 8003532:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003536:	e023      	b.n	8003580 <PDM_Data_Conversion+0x21c>

			else if(accOutputFuse[(i * 2) + 1] > outputStruct[(i * 2) + 1].timeoutOutputFuse)
 8003538:	7b7b      	ldrb	r3, [r7, #13]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	3301      	adds	r3, #1
 800353e:	4a3c      	ldr	r2, [pc, #240]	@ (8003630 <PDM_Data_Conversion+0x2cc>)
 8003540:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003544:	7b7b      	ldrb	r3, [r7, #13]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	4838      	ldr	r0, [pc, #224]	@ (800362c <PDM_Data_Conversion+0x2c8>)
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4403      	add	r3, r0
 8003556:	330a      	adds	r3, #10
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	4299      	cmp	r1, r3
 800355c:	d910      	bls.n	8003580 <PDM_Data_Conversion+0x21c>
			{
				flag_fuse = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
				flagDriverSafety |= 1 << ((i * 2) + 1);
 8003562:	7b7b      	ldrb	r3, [r7, #13]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	3301      	adds	r3, #1
 8003568:	2201      	movs	r2, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	b21a      	sxth	r2, r3
 8003570:	4b30      	ldr	r3, [pc, #192]	@ (8003634 <PDM_Data_Conversion+0x2d0>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	b21b      	sxth	r3, r3
 8003576:	4313      	orrs	r3, r2
 8003578:	b21b      	sxth	r3, r3
 800357a:	b29a      	uxth	r2, r3
 800357c:	4b2d      	ldr	r3, [pc, #180]	@ (8003634 <PDM_Data_Conversion+0x2d0>)
 800357e:	801a      	strh	r2, [r3, #0]
			}

			if(adcBuffer[i] < ADC_THRESHOLD_HIGH)
 8003580:	7b7b      	ldrb	r3, [r7, #13]
 8003582:	4a28      	ldr	r2, [pc, #160]	@ (8003624 <PDM_Data_Conversion+0x2c0>)
 8003584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003588:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800358c:	d20f      	bcs.n	80035ae <PDM_Data_Conversion+0x24a>
				dataIdBuffer[(i * 2) + 1] |= 1;
 800358e:	7b7b      	ldrb	r3, [r7, #13]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	3301      	adds	r3, #1
 8003594:	4a28      	ldr	r2, [pc, #160]	@ (8003638 <PDM_Data_Conversion+0x2d4>)
 8003596:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800359a:	7b7b      	ldrb	r3, [r7, #13]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	3301      	adds	r3, #1
 80035a0:	f042 0201 	orr.w	r2, r2, #1
 80035a4:	b291      	uxth	r1, r2
 80035a6:	4a24      	ldr	r2, [pc, #144]	@ (8003638 <PDM_Data_Conversion+0x2d4>)
 80035a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80035ac:	e00e      	b.n	80035cc <PDM_Data_Conversion+0x268>
			else
				dataIdBuffer[(i * 2) + 1] &= 0xFFFE;
 80035ae:	7b7b      	ldrb	r3, [r7, #13]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	3301      	adds	r3, #1
 80035b4:	4a20      	ldr	r2, [pc, #128]	@ (8003638 <PDM_Data_Conversion+0x2d4>)
 80035b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80035ba:	7b7b      	ldrb	r3, [r7, #13]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	3301      	adds	r3, #1
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	b291      	uxth	r1, r2
 80035c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003638 <PDM_Data_Conversion+0x2d4>)
 80035c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 80035cc:	7b7b      	ldrb	r3, [r7, #13]
 80035ce:	3301      	adds	r3, #1
 80035d0:	737b      	strb	r3, [r7, #13]
 80035d2:	7b7b      	ldrb	r3, [r7, #13]
 80035d4:	2b07      	cmp	r3, #7
 80035d6:	f67f af7d 	bls.w	80034d4 <PDM_Data_Conversion+0x170>
		}

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80035da:	2201      	movs	r2, #1
 80035dc:	2120      	movs	r1, #32
 80035de:	4817      	ldr	r0, [pc, #92]	@ (800363c <PDM_Data_Conversion+0x2d8>)
 80035e0:	f003 f9fe 	bl	80069e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 80035e4:	2201      	movs	r2, #1
 80035e6:	2110      	movs	r1, #16
 80035e8:	4814      	ldr	r0, [pc, #80]	@ (800363c <PDM_Data_Conversion+0x2d8>)
 80035ea:	f003 f9f9 	bl	80069e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 80035ee:	2200      	movs	r2, #0
 80035f0:	2108      	movs	r1, #8
 80035f2:	4812      	ldr	r0, [pc, #72]	@ (800363c <PDM_Data_Conversion+0x2d8>)
 80035f4:	f003 f9f4 	bl	80069e0 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Temperature;
 80035f8:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <PDM_Data_Conversion+0x2bc>)
 80035fa:	2204      	movs	r2, #4
 80035fc:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_TEMP);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800360e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003616:	60da      	str	r2, [r3, #12]

		break;
 8003618:	e0c9      	b.n	80037ae <PDM_Data_Conversion+0x44a>

	case Data_Read_Temperature:

		for(uint8_t i = 0; i < 8; i++)
 800361a:	2300      	movs	r3, #0
 800361c:	733b      	strb	r3, [r7, #12]
 800361e:	e043      	b.n	80036a8 <PDM_Data_Conversion+0x344>
 8003620:	200007dc 	.word	0x200007dc
 8003624:	200007c4 	.word	0x200007c4
 8003628:	2000074c 	.word	0x2000074c
 800362c:	200007e4 	.word	0x200007e4
 8003630:	2000095c 	.word	0x2000095c
 8003634:	200007d8 	.word	0x200007d8
 8003638:	20000788 	.word	0x20000788
 800363c:	40021000 	.word	0x40021000
		{
			//Convert ADC into temperature
			dataBuffer[16 + i] = adcBuffer[i];//__PDM_CONVERT_TEMPERATURE(adcBuffer[i], adcBuffer[8]);
 8003640:	7b3a      	ldrb	r2, [r7, #12]
 8003642:	7b3b      	ldrb	r3, [r7, #12]
 8003644:	3310      	adds	r3, #16
 8003646:	4963      	ldr	r1, [pc, #396]	@ (80037d4 <PDM_Data_Conversion+0x470>)
 8003648:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800364c:	4a62      	ldr	r2, [pc, #392]	@ (80037d8 <PDM_Data_Conversion+0x474>)
 800364e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((adcBuffer[i] < ADC_THRESHOLD_LOW) || (adcBuffer[i] > ADC_THRESHOLD_HIGH))
 8003652:	7b3b      	ldrb	r3, [r7, #12]
 8003654:	4a5f      	ldr	r2, [pc, #380]	@ (80037d4 <PDM_Data_Conversion+0x470>)
 8003656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800365a:	2b09      	cmp	r3, #9
 800365c:	d906      	bls.n	800366c <PDM_Data_Conversion+0x308>
 800365e:	7b3b      	ldrb	r3, [r7, #12]
 8003660:	4a5c      	ldr	r2, [pc, #368]	@ (80037d4 <PDM_Data_Conversion+0x470>)
 8003662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003666:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800366a:	d90d      	bls.n	8003688 <PDM_Data_Conversion+0x324>
				dataIdBuffer[16 + i] |= 1;
 800366c:	7b3b      	ldrb	r3, [r7, #12]
 800366e:	3310      	adds	r3, #16
 8003670:	4a5a      	ldr	r2, [pc, #360]	@ (80037dc <PDM_Data_Conversion+0x478>)
 8003672:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003676:	7b3b      	ldrb	r3, [r7, #12]
 8003678:	3310      	adds	r3, #16
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	b291      	uxth	r1, r2
 8003680:	4a56      	ldr	r2, [pc, #344]	@ (80037dc <PDM_Data_Conversion+0x478>)
 8003682:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003686:	e00c      	b.n	80036a2 <PDM_Data_Conversion+0x33e>
			else
				dataIdBuffer[16 + i] &= 0xFFFE;
 8003688:	7b3b      	ldrb	r3, [r7, #12]
 800368a:	3310      	adds	r3, #16
 800368c:	4a53      	ldr	r2, [pc, #332]	@ (80037dc <PDM_Data_Conversion+0x478>)
 800368e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003692:	7b3b      	ldrb	r3, [r7, #12]
 8003694:	3310      	adds	r3, #16
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	b291      	uxth	r1, r2
 800369c:	4a4f      	ldr	r2, [pc, #316]	@ (80037dc <PDM_Data_Conversion+0x478>)
 800369e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 80036a2:	7b3b      	ldrb	r3, [r7, #12]
 80036a4:	3301      	adds	r3, #1
 80036a6:	733b      	strb	r3, [r7, #12]
 80036a8:	7b3b      	ldrb	r3, [r7, #12]
 80036aa:	2b07      	cmp	r3, #7
 80036ac:	d9c8      	bls.n	8003640 <PDM_Data_Conversion+0x2dc>
		}

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80036ae:	2201      	movs	r2, #1
 80036b0:	2120      	movs	r1, #32
 80036b2:	484b      	ldr	r0, [pc, #300]	@ (80037e0 <PDM_Data_Conversion+0x47c>)
 80036b4:	f003 f994 	bl	80069e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 80036b8:	2201      	movs	r2, #1
 80036ba:	2110      	movs	r1, #16
 80036bc:	4848      	ldr	r0, [pc, #288]	@ (80037e0 <PDM_Data_Conversion+0x47c>)
 80036be:	f003 f98f 	bl	80069e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 80036c2:	2201      	movs	r2, #1
 80036c4:	2108      	movs	r1, #8
 80036c6:	4846      	ldr	r0, [pc, #280]	@ (80037e0 <PDM_Data_Conversion+0x47c>)
 80036c8:	f003 f98a 	bl	80069e0 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Voltage;
 80036cc:	4b45      	ldr	r3, [pc, #276]	@ (80037e4 <PDM_Data_Conversion+0x480>)
 80036ce:	2205      	movs	r2, #5
 80036d0:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2200      	movs	r2, #0
 80036d8:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_VOLT);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036ea:	60da      	str	r2, [r3, #12]

		break;
 80036ec:	e05f      	b.n	80037ae <PDM_Data_Conversion+0x44a>

	case Data_Read_Voltage:

		//Convert ADC into voltage if the ADC value is valid
		if((adcBuffer[1] < ADC_THRESHOLD_LOW) || (adcBuffer[1] > ADC_THRESHOLD_HIGH))
 80036ee:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <PDM_Data_Conversion+0x470>)
 80036f0:	885b      	ldrh	r3, [r3, #2]
 80036f2:	2b09      	cmp	r3, #9
 80036f4:	d904      	bls.n	8003700 <PDM_Data_Conversion+0x39c>
 80036f6:	4b37      	ldr	r3, [pc, #220]	@ (80037d4 <PDM_Data_Conversion+0x470>)
 80036f8:	885b      	ldrh	r3, [r3, #2]
 80036fa:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80036fe:	d907      	bls.n	8003710 <PDM_Data_Conversion+0x3ac>
			dataIdBuffer[24] &= 0xFFFE;
 8003700:	4b36      	ldr	r3, [pc, #216]	@ (80037dc <PDM_Data_Conversion+0x478>)
 8003702:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	4b34      	ldr	r3, [pc, #208]	@ (80037dc <PDM_Data_Conversion+0x478>)
 800370c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800370e:	e006      	b.n	800371e <PDM_Data_Conversion+0x3ba>
		else
			dataIdBuffer[24] |= 1;
 8003710:	4b32      	ldr	r3, [pc, #200]	@ (80037dc <PDM_Data_Conversion+0x478>)
 8003712:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	4b30      	ldr	r3, [pc, #192]	@ (80037dc <PDM_Data_Conversion+0x478>)
 800371c:	861a      	strh	r2, [r3, #48]	@ 0x30

		dataBuffer[24] = adcBuffer[0] - adcBuffer[8];//__PDM_CONVERT_VOLTAGE(adcBuffer[0], adcBuffer[8]);
 800371e:	4b2d      	ldr	r3, [pc, #180]	@ (80037d4 <PDM_Data_Conversion+0x470>)
 8003720:	881a      	ldrh	r2, [r3, #0]
 8003722:	4b2c      	ldr	r3, [pc, #176]	@ (80037d4 <PDM_Data_Conversion+0x470>)
 8003724:	8a1b      	ldrh	r3, [r3, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	b29a      	uxth	r2, r3
 800372a:	4b2b      	ldr	r3, [pc, #172]	@ (80037d8 <PDM_Data_Conversion+0x474>)
 800372c:	861a      	strh	r2, [r3, #48]	@ 0x30

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 800372e:	2201      	movs	r2, #1
 8003730:	2120      	movs	r1, #32
 8003732:	482b      	ldr	r0, [pc, #172]	@ (80037e0 <PDM_Data_Conversion+0x47c>)
 8003734:	f003 f954 	bl	80069e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8003738:	2200      	movs	r2, #0
 800373a:	2110      	movs	r1, #16
 800373c:	4828      	ldr	r0, [pc, #160]	@ (80037e0 <PDM_Data_Conversion+0x47c>)
 800373e:	f003 f94f 	bl	80069e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 8003742:	2200      	movs	r2, #0
 8003744:	2108      	movs	r1, #8
 8003746:	4826      	ldr	r0, [pc, #152]	@ (80037e0 <PDM_Data_Conversion+0x47c>)
 8003748:	f003 f94a 	bl	80069e0 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Current0;
 800374c:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <PDM_Data_Conversion+0x480>)
 800374e:	2202      	movs	r2, #2
 8003750:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2200      	movs	r2, #0
 8003758:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_CURR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003762:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800376a:	60da      	str	r2, [r3, #12]

		break;
 800376c:	e01f      	b.n	80037ae <PDM_Data_Conversion+0x44a>

	default:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 800376e:	2201      	movs	r2, #1
 8003770:	2120      	movs	r1, #32
 8003772:	481b      	ldr	r0, [pc, #108]	@ (80037e0 <PDM_Data_Conversion+0x47c>)
 8003774:	f003 f934 	bl	80069e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8003778:	2200      	movs	r2, #0
 800377a:	2110      	movs	r1, #16
 800377c:	4818      	ldr	r0, [pc, #96]	@ (80037e0 <PDM_Data_Conversion+0x47c>)
 800377e:	f003 f92f 	bl	80069e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 8003782:	2200      	movs	r2, #0
 8003784:	2108      	movs	r1, #8
 8003786:	4816      	ldr	r0, [pc, #88]	@ (80037e0 <PDM_Data_Conversion+0x47c>)
 8003788:	f003 f92a 	bl	80069e0 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Current0;
 800378c:	4b15      	ldr	r3, [pc, #84]	@ (80037e4 <PDM_Data_Conversion+0x480>)
 800378e:	2202      	movs	r2, #2
 8003790:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_CURR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037aa:	60da      	str	r2, [r3, #12]

		break;
 80037ac:	bf00      	nop
	}

	//Convert ADC into MCU temperature
	dataBuffer[25] = adcBuffer[9];//__PDM_CONVERT_MCU_TEMPERATURE(adcBuffer[9]);
 80037ae:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <PDM_Data_Conversion+0x470>)
 80037b0:	8a5a      	ldrh	r2, [r3, #18]
 80037b2:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <PDM_Data_Conversion+0x474>)
 80037b4:	865a      	strh	r2, [r3, #50]	@ 0x32

	//Start readings timer
	retVal = HAL_TIM_Base_Start_IT(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f006 fbc0 	bl	8009f3c <HAL_TIM_Base_Start_IT>
 80037bc:	4603      	mov	r3, r0
 80037be:	72fb      	strb	r3, [r7, #11]

	//If there is any virtual fuse tripped
	if(flag_fuse != 0)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <PDM_Data_Conversion+0x466>
		PDM_Output_Process();
 80037c6:	f7fe fdbb 	bl	8002340 <PDM_Output_Process>

	return retVal;
 80037ca:	7afb      	ldrb	r3, [r7, #11]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	200007c4 	.word	0x200007c4
 80037d8:	2000074c 	.word	0x2000074c
 80037dc:	20000788 	.word	0x20000788
 80037e0:	40021000 	.word	0x40021000
 80037e4:	200007dc 	.word	0x200007dc

080037e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	4b10      	ldr	r3, [pc, #64]	@ (8003834 <HAL_MspInit+0x4c>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003834 <HAL_MspInit+0x4c>)
 80037f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <HAL_MspInit+0x4c>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <HAL_MspInit+0x4c>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	4a08      	ldr	r2, [pc, #32]	@ (8003834 <HAL_MspInit+0x4c>)
 8003814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003818:	6413      	str	r3, [r2, #64]	@ 0x40
 800381a:	4b06      	ldr	r3, [pc, #24]	@ (8003834 <HAL_MspInit+0x4c>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800

08003838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08c      	sub	sp, #48	@ 0x30
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 031c 	add.w	r3, r7, #28
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a6b      	ldr	r2, [pc, #428]	@ (8003a04 <HAL_ADC_MspInit+0x1cc>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d172      	bne.n	8003940 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	4a69      	ldr	r2, [pc, #420]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 8003864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003868:	6453      	str	r3, [r2, #68]	@ 0x44
 800386a:	4b67      	ldr	r3, [pc, #412]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	4b63      	ldr	r3, [pc, #396]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	4a62      	ldr	r2, [pc, #392]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6313      	str	r3, [r2, #48]	@ 0x30
 8003886:	4b60      	ldr	r3, [pc, #384]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	4b5c      	ldr	r3, [pc, #368]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	4a5b      	ldr	r2, [pc, #364]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 800389c:	f043 0304 	orr.w	r3, r3, #4
 80038a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a2:	4b59      	ldr	r3, [pc, #356]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	693b      	ldr	r3, [r7, #16]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 80038ae:	23e0      	movs	r3, #224	@ 0xe0
 80038b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038b2:	2303      	movs	r3, #3
 80038b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ba:	f107 031c 	add.w	r3, r7, #28
 80038be:	4619      	mov	r1, r3
 80038c0:	4852      	ldr	r0, [pc, #328]	@ (8003a0c <HAL_ADC_MspInit+0x1d4>)
 80038c2:	f002 fded 	bl	80064a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ANALOG9_Pin;
 80038c6:	2310      	movs	r3, #16
 80038c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ca:	2303      	movs	r3, #3
 80038cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 80038d2:	f107 031c 	add.w	r3, r7, #28
 80038d6:	4619      	mov	r1, r3
 80038d8:	484d      	ldr	r0, [pc, #308]	@ (8003a10 <HAL_ADC_MspInit+0x1d8>)
 80038da:	f002 fde1 	bl	80064a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80038de:	4b4d      	ldr	r3, [pc, #308]	@ (8003a14 <HAL_ADC_MspInit+0x1dc>)
 80038e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003a18 <HAL_ADC_MspInit+0x1e0>)
 80038e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80038e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003a14 <HAL_ADC_MspInit+0x1dc>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003a14 <HAL_ADC_MspInit+0x1dc>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038f0:	4b48      	ldr	r3, [pc, #288]	@ (8003a14 <HAL_ADC_MspInit+0x1dc>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80038f6:	4b47      	ldr	r3, [pc, #284]	@ (8003a14 <HAL_ADC_MspInit+0x1dc>)
 80038f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038fe:	4b45      	ldr	r3, [pc, #276]	@ (8003a14 <HAL_ADC_MspInit+0x1dc>)
 8003900:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003904:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003906:	4b43      	ldr	r3, [pc, #268]	@ (8003a14 <HAL_ADC_MspInit+0x1dc>)
 8003908:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800390c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800390e:	4b41      	ldr	r3, [pc, #260]	@ (8003a14 <HAL_ADC_MspInit+0x1dc>)
 8003910:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003914:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003916:	4b3f      	ldr	r3, [pc, #252]	@ (8003a14 <HAL_ADC_MspInit+0x1dc>)
 8003918:	2200      	movs	r2, #0
 800391a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800391c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a14 <HAL_ADC_MspInit+0x1dc>)
 800391e:	2200      	movs	r2, #0
 8003920:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003922:	483c      	ldr	r0, [pc, #240]	@ (8003a14 <HAL_ADC_MspInit+0x1dc>)
 8003924:	f002 fa4c 	bl	8005dc0 <HAL_DMA_Init>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800392e:	f7fd fc65 	bl	80011fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a37      	ldr	r2, [pc, #220]	@ (8003a14 <HAL_ADC_MspInit+0x1dc>)
 8003936:	639a      	str	r2, [r3, #56]	@ 0x38
 8003938:	4a36      	ldr	r2, [pc, #216]	@ (8003a14 <HAL_ADC_MspInit+0x1dc>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800393e:	e05d      	b.n	80039fc <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a35      	ldr	r2, [pc, #212]	@ (8003a1c <HAL_ADC_MspInit+0x1e4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d158      	bne.n	80039fc <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003952:	4a2d      	ldr	r2, [pc, #180]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 8003954:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003958:	6453      	str	r3, [r2, #68]	@ 0x44
 800395a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	4b27      	ldr	r3, [pc, #156]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396e:	4a26      	ldr	r2, [pc, #152]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6313      	str	r3, [r2, #48]	@ 0x30
 8003976:	4b24      	ldr	r3, [pc, #144]	@ (8003a08 <HAL_ADC_MspInit+0x1d0>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin
 8003982:	231f      	movs	r3, #31
 8003984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003986:	2303      	movs	r3, #3
 8003988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800398e:	f107 031c 	add.w	r3, r7, #28
 8003992:	4619      	mov	r1, r3
 8003994:	481d      	ldr	r0, [pc, #116]	@ (8003a0c <HAL_ADC_MspInit+0x1d4>)
 8003996:	f002 fd83 	bl	80064a0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800399a:	4b21      	ldr	r3, [pc, #132]	@ (8003a20 <HAL_ADC_MspInit+0x1e8>)
 800399c:	4a21      	ldr	r2, [pc, #132]	@ (8003a24 <HAL_ADC_MspInit+0x1ec>)
 800399e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80039a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a20 <HAL_ADC_MspInit+0x1e8>)
 80039a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039a6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a20 <HAL_ADC_MspInit+0x1e8>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003a20 <HAL_ADC_MspInit+0x1e8>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80039b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a20 <HAL_ADC_MspInit+0x1e8>)
 80039b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039ba:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039bc:	4b18      	ldr	r3, [pc, #96]	@ (8003a20 <HAL_ADC_MspInit+0x1e8>)
 80039be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039c2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039c4:	4b16      	ldr	r3, [pc, #88]	@ (8003a20 <HAL_ADC_MspInit+0x1e8>)
 80039c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039ca:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80039cc:	4b14      	ldr	r3, [pc, #80]	@ (8003a20 <HAL_ADC_MspInit+0x1e8>)
 80039ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039d2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80039d4:	4b12      	ldr	r3, [pc, #72]	@ (8003a20 <HAL_ADC_MspInit+0x1e8>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039da:	4b11      	ldr	r3, [pc, #68]	@ (8003a20 <HAL_ADC_MspInit+0x1e8>)
 80039dc:	2200      	movs	r2, #0
 80039de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80039e0:	480f      	ldr	r0, [pc, #60]	@ (8003a20 <HAL_ADC_MspInit+0x1e8>)
 80039e2:	f002 f9ed 	bl	8005dc0 <HAL_DMA_Init>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 80039ec:	f7fd fc06 	bl	80011fc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a0b      	ldr	r2, [pc, #44]	@ (8003a20 <HAL_ADC_MspInit+0x1e8>)
 80039f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80039f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003a20 <HAL_ADC_MspInit+0x1e8>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80039fc:	bf00      	nop
 80039fe:	3730      	adds	r7, #48	@ 0x30
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40012000 	.word	0x40012000
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	40020800 	.word	0x40020800
 8003a14:	200001f8 	.word	0x200001f8
 8003a18:	40026410 	.word	0x40026410
 8003a1c:	40012100 	.word	0x40012100
 8003a20:	20000258 	.word	0x20000258
 8003a24:	40026440 	.word	0x40026440

08003a28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	@ 0x28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a30:	f107 0314 	add.w	r3, r7, #20
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	60da      	str	r2, [r3, #12]
 8003a3e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1d      	ldr	r2, [pc, #116]	@ (8003abc <HAL_CAN_MspInit+0x94>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d134      	bne.n	8003ab4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac0 <HAL_CAN_MspInit+0x98>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac0 <HAL_CAN_MspInit+0x98>)
 8003a54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a5a:	4b19      	ldr	r3, [pc, #100]	@ (8003ac0 <HAL_CAN_MspInit+0x98>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <HAL_CAN_MspInit+0x98>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	4a14      	ldr	r2, [pc, #80]	@ (8003ac0 <HAL_CAN_MspInit+0x98>)
 8003a70:	f043 0302 	orr.w	r3, r3, #2
 8003a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a76:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <HAL_CAN_MspInit+0x98>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a90:	2303      	movs	r3, #3
 8003a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003a94:	2309      	movs	r3, #9
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a98:	f107 0314 	add.w	r3, r7, #20
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4809      	ldr	r0, [pc, #36]	@ (8003ac4 <HAL_CAN_MspInit+0x9c>)
 8003aa0:	f002 fcfe 	bl	80064a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	2014      	movs	r0, #20
 8003aaa:	f002 f928 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003aae:	2014      	movs	r0, #20
 8003ab0:	f002 f941 	bl	8005d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003ab4:	bf00      	nop
 8003ab6:	3728      	adds	r7, #40	@ 0x28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40006400 	.word	0x40006400
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40020400 	.word	0x40020400

08003ac8 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8003b00 <HAL_CAN_MspDeInit+0x38>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10d      	bne.n	8003af6 <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8003ada:	4b0a      	ldr	r3, [pc, #40]	@ (8003b04 <HAL_CAN_MspDeInit+0x3c>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	4a09      	ldr	r2, [pc, #36]	@ (8003b04 <HAL_CAN_MspDeInit+0x3c>)
 8003ae0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003ae4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8003ae6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003aea:	4807      	ldr	r0, [pc, #28]	@ (8003b08 <HAL_CAN_MspDeInit+0x40>)
 8003aec:	f002 fe6c 	bl	80067c8 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8003af0:	2014      	movs	r0, #20
 8003af2:	f002 f92e 	bl	8005d52 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40006400 	.word	0x40006400
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40020400 	.word	0x40020400

08003b0c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0b      	ldr	r2, [pc, #44]	@ (8003b48 <HAL_CRC_MspInit+0x3c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10d      	bne.n	8003b3a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <HAL_CRC_MspInit+0x40>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b26:	4a09      	ldr	r2, [pc, #36]	@ (8003b4c <HAL_CRC_MspInit+0x40>)
 8003b28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b2e:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <HAL_CRC_MspInit+0x40>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40023000 	.word	0x40023000
 8003b4c:	40023800 	.word	0x40023800

08003b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	@ 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b58:	f107 0314 	add.w	r3, r7, #20
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	60da      	str	r2, [r3, #12]
 8003b66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a19      	ldr	r2, [pc, #100]	@ (8003bd4 <HAL_I2C_MspInit+0x84>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d12b      	bne.n	8003bca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	4b18      	ldr	r3, [pc, #96]	@ (8003bd8 <HAL_I2C_MspInit+0x88>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	4a17      	ldr	r2, [pc, #92]	@ (8003bd8 <HAL_I2C_MspInit+0x88>)
 8003b7c:	f043 0302 	orr.w	r3, r3, #2
 8003b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b82:	4b15      	ldr	r3, [pc, #84]	@ (8003bd8 <HAL_I2C_MspInit+0x88>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b8e:	23c0      	movs	r3, #192	@ 0xc0
 8003b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b92:	2312      	movs	r3, #18
 8003b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b9e:	2304      	movs	r3, #4
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba2:	f107 0314 	add.w	r3, r7, #20
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	480c      	ldr	r0, [pc, #48]	@ (8003bdc <HAL_I2C_MspInit+0x8c>)
 8003baa:	f002 fc79 	bl	80064a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	4b09      	ldr	r3, [pc, #36]	@ (8003bd8 <HAL_I2C_MspInit+0x88>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	4a08      	ldr	r2, [pc, #32]	@ (8003bd8 <HAL_I2C_MspInit+0x88>)
 8003bb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bbe:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_I2C_MspInit+0x88>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003bca:	bf00      	nop
 8003bcc:	3728      	adds	r7, #40	@ 0x28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40005400 	.word	0x40005400
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40020400 	.word	0x40020400

08003be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a98      	ldr	r2, [pc, #608]	@ (8003e50 <HAL_TIM_Base_MspInit+0x270>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d152      	bne.n	8003c98 <HAL_TIM_Base_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	4b97      	ldr	r3, [pc, #604]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	4a96      	ldr	r2, [pc, #600]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c02:	4b94      	ldr	r3, [pc, #592]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8003c0e:	4b92      	ldr	r3, [pc, #584]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c10:	4a92      	ldr	r2, [pc, #584]	@ (8003e5c <HAL_TIM_Base_MspInit+0x27c>)
 8003c12:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 8003c14:	4b90      	ldr	r3, [pc, #576]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c16:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8003c1a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c1c:	4b8e      	ldr	r3, [pc, #568]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c22:	4b8d      	ldr	r3, [pc, #564]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8003c28:	4b8b      	ldr	r3, [pc, #556]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c2e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c30:	4b89      	ldr	r3, [pc, #548]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c36:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c38:	4b87      	ldr	r3, [pc, #540]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c3e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8003c40:	4b85      	ldr	r3, [pc, #532]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8003c46:	4b84      	ldr	r3, [pc, #528]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c4c:	4b82      	ldr	r3, [pc, #520]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8003c52:	4881      	ldr	r0, [pc, #516]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c54:	f002 f8b4 	bl	8005dc0 <HAL_DMA_Init>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8003c5e:	f7fd facd 	bl	80011fc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a7c      	ldr	r2, [pc, #496]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c66:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c68:	4a7b      	ldr	r2, [pc, #492]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a79      	ldr	r2, [pc, #484]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c72:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c74:	4a78      	ldr	r2, [pc, #480]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a76      	ldr	r2, [pc, #472]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c80:	4a75      	ldr	r2, [pc, #468]	@ (8003e58 <HAL_TIM_Base_MspInit+0x278>)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003c86:	2200      	movs	r2, #0
 8003c88:	2100      	movs	r1, #0
 8003c8a:	2019      	movs	r0, #25
 8003c8c:	f002 f837 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c90:	2019      	movs	r0, #25
 8003c92:	f002 f850 	bl	8005d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c96:	e13c      	b.n	8003f12 <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca0:	d14c      	bne.n	8003d3c <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	4b6b      	ldr	r3, [pc, #428]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	4a6a      	ldr	r2, [pc, #424]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cb2:	4b68      	ldr	r3, [pc, #416]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8003cbe:	4b68      	ldr	r3, [pc, #416]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003cc0:	4a68      	ldr	r2, [pc, #416]	@ (8003e64 <HAL_TIM_Base_MspInit+0x284>)
 8003cc2:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8003cc4:	4b66      	ldr	r3, [pc, #408]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003cc6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003cca:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ccc:	4b64      	ldr	r3, [pc, #400]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cd2:	4b63      	ldr	r3, [pc, #396]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003cd8:	4b61      	ldr	r3, [pc, #388]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003cda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cde:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ce0:	4b5f      	ldr	r3, [pc, #380]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003ce2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ce6:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ce8:	4b5d      	ldr	r3, [pc, #372]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003cea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cee:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 8003cf0:	4b5b      	ldr	r3, [pc, #364]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003cf6:	4b5a      	ldr	r3, [pc, #360]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cfc:	4b58      	ldr	r3, [pc, #352]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8003d02:	4857      	ldr	r0, [pc, #348]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003d04:	f002 f85c 	bl	8005dc0 <HAL_DMA_Init>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_TIM_Base_MspInit+0x132>
      Error_Handler();
 8003d0e:	f7fd fa75 	bl	80011fc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a52      	ldr	r2, [pc, #328]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003d16:	621a      	str	r2, [r3, #32]
 8003d18:	4a51      	ldr	r2, [pc, #324]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4f      	ldr	r2, [pc, #316]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003d22:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d24:	4a4e      	ldr	r2, [pc, #312]	@ (8003e60 <HAL_TIM_Base_MspInit+0x280>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	201c      	movs	r0, #28
 8003d30:	f001 ffe5 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d34:	201c      	movs	r0, #28
 8003d36:	f001 fffe 	bl	8005d36 <HAL_NVIC_EnableIRQ>
}
 8003d3a:	e0ea      	b.n	8003f12 <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM3)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a49      	ldr	r2, [pc, #292]	@ (8003e68 <HAL_TIM_Base_MspInit+0x288>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d14c      	bne.n	8003de0 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	4b42      	ldr	r3, [pc, #264]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	4a41      	ldr	r2, [pc, #260]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003d50:	f043 0302 	orr.w	r3, r3, #2
 8003d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d56:	4b3f      	ldr	r3, [pc, #252]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8003d62:	4b42      	ldr	r3, [pc, #264]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003d64:	4a42      	ldr	r2, [pc, #264]	@ (8003e70 <HAL_TIM_Base_MspInit+0x290>)
 8003d66:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8003d68:	4b40      	ldr	r3, [pc, #256]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003d6a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003d6e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d70:	4b3e      	ldr	r3, [pc, #248]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d76:	4b3d      	ldr	r3, [pc, #244]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8003d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003d7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d82:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d84:	4b39      	ldr	r3, [pc, #228]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003d86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d8a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d8c:	4b37      	ldr	r3, [pc, #220]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003d8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d92:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8003d94:	4b35      	ldr	r3, [pc, #212]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003d9a:	4b34      	ldr	r3, [pc, #208]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003da0:	4b32      	ldr	r3, [pc, #200]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8003da6:	4831      	ldr	r0, [pc, #196]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003da8:	f002 f80a 	bl	8005dc0 <HAL_DMA_Init>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_TIM_Base_MspInit+0x1d6>
      Error_Handler();
 8003db2:	f7fd fa23 	bl	80011fc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2c      	ldr	r2, [pc, #176]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003dba:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a29      	ldr	r2, [pc, #164]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003dc6:	621a      	str	r2, [r3, #32]
 8003dc8:	4a28      	ldr	r2, [pc, #160]	@ (8003e6c <HAL_TIM_Base_MspInit+0x28c>)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	201d      	movs	r0, #29
 8003dd4:	f001 ff93 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003dd8:	201d      	movs	r0, #29
 8003dda:	f001 ffac 	bl	8005d36 <HAL_NVIC_EnableIRQ>
}
 8003dde:	e098      	b.n	8003f12 <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM6)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a23      	ldr	r2, [pc, #140]	@ (8003e74 <HAL_TIM_Base_MspInit+0x294>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d116      	bne.n	8003e18 <HAL_TIM_Base_MspInit+0x238>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	4b19      	ldr	r3, [pc, #100]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	4a18      	ldr	r2, [pc, #96]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003df4:	f043 0310 	orr.w	r3, r3, #16
 8003df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dfa:	4b16      	ldr	r3, [pc, #88]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2100      	movs	r1, #0
 8003e0a:	2036      	movs	r0, #54	@ 0x36
 8003e0c:	f001 ff77 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e10:	2036      	movs	r0, #54	@ 0x36
 8003e12:	f001 ff90 	bl	8005d36 <HAL_NVIC_EnableIRQ>
}
 8003e16:	e07c      	b.n	8003f12 <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM7)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a16      	ldr	r2, [pc, #88]	@ (8003e78 <HAL_TIM_Base_MspInit+0x298>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d12c      	bne.n	8003e7c <HAL_TIM_Base_MspInit+0x29c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003e2c:	f043 0320 	orr.w	r3, r3, #32
 8003e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e32:	4b08      	ldr	r3, [pc, #32]	@ (8003e54 <HAL_TIM_Base_MspInit+0x274>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2100      	movs	r1, #0
 8003e42:	2037      	movs	r0, #55	@ 0x37
 8003e44:	f001 ff5b 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e48:	2037      	movs	r0, #55	@ 0x37
 8003e4a:	f001 ff74 	bl	8005d36 <HAL_NVIC_EnableIRQ>
}
 8003e4e:	e060      	b.n	8003f12 <HAL_TIM_Base_MspInit+0x332>
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40023800 	.word	0x40023800
 8003e58:	200004ec 	.word	0x200004ec
 8003e5c:	40026470 	.word	0x40026470
 8003e60:	2000054c 	.word	0x2000054c
 8003e64:	40026028 	.word	0x40026028
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	200005ac 	.word	0x200005ac
 8003e70:	40026040 	.word	0x40026040
 8003e74:	40001000 	.word	0x40001000
 8003e78:	40001400 	.word	0x40001400
  else if(htim_base->Instance==TIM8)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a26      	ldr	r2, [pc, #152]	@ (8003f1c <HAL_TIM_Base_MspInit+0x33c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d145      	bne.n	8003f12 <HAL_TIM_Base_MspInit+0x332>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <HAL_TIM_Base_MspInit+0x340>)
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8e:	4a24      	ldr	r2, [pc, #144]	@ (8003f20 <HAL_TIM_Base_MspInit+0x340>)
 8003e90:	f043 0302 	orr.w	r3, r3, #2
 8003e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e96:	4b22      	ldr	r3, [pc, #136]	@ (8003f20 <HAL_TIM_Base_MspInit+0x340>)
 8003e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch2.Instance = DMA2_Stream3;
 8003ea2:	4b20      	ldr	r3, [pc, #128]	@ (8003f24 <HAL_TIM_Base_MspInit+0x344>)
 8003ea4:	4a20      	ldr	r2, [pc, #128]	@ (8003f28 <HAL_TIM_Base_MspInit+0x348>)
 8003ea6:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Channel = DMA_CHANNEL_7;
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f24 <HAL_TIM_Base_MspInit+0x344>)
 8003eaa:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8003eae:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f24 <HAL_TIM_Base_MspInit+0x344>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f24 <HAL_TIM_Base_MspInit+0x344>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003ebc:	4b19      	ldr	r3, [pc, #100]	@ (8003f24 <HAL_TIM_Base_MspInit+0x344>)
 8003ebe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ec2:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ec4:	4b17      	ldr	r3, [pc, #92]	@ (8003f24 <HAL_TIM_Base_MspInit+0x344>)
 8003ec6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003eca:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ecc:	4b15      	ldr	r3, [pc, #84]	@ (8003f24 <HAL_TIM_Base_MspInit+0x344>)
 8003ece:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ed2:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8003ed4:	4b13      	ldr	r3, [pc, #76]	@ (8003f24 <HAL_TIM_Base_MspInit+0x344>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003eda:	4b12      	ldr	r3, [pc, #72]	@ (8003f24 <HAL_TIM_Base_MspInit+0x344>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ee0:	4b10      	ldr	r3, [pc, #64]	@ (8003f24 <HAL_TIM_Base_MspInit+0x344>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8003ee6:	480f      	ldr	r0, [pc, #60]	@ (8003f24 <HAL_TIM_Base_MspInit+0x344>)
 8003ee8:	f001 ff6a 	bl	8005dc0 <HAL_DMA_Init>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_TIM_Base_MspInit+0x316>
      Error_Handler();
 8003ef2:	f7fd f983 	bl	80011fc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8003f24 <HAL_TIM_Base_MspInit+0x344>)
 8003efa:	629a      	str	r2, [r3, #40]	@ 0x28
 8003efc:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <HAL_TIM_Base_MspInit+0x344>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003f02:	2200      	movs	r2, #0
 8003f04:	2100      	movs	r1, #0
 8003f06:	202c      	movs	r0, #44	@ 0x2c
 8003f08:	f001 fef9 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003f0c:	202c      	movs	r0, #44	@ 0x2c
 8003f0e:	f001 ff12 	bl	8005d36 <HAL_NVIC_EnableIRQ>
}
 8003f12:	bf00      	nop
 8003f14:	3720      	adds	r7, #32
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40010400 	.word	0x40010400
 8003f20:	40023800 	.word	0x40023800
 8003f24:	2000060c 	.word	0x2000060c
 8003f28:	40026458 	.word	0x40026458

08003f2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08c      	sub	sp, #48	@ 0x30
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	f107 031c 	add.w	r3, r7, #28
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a49      	ldr	r2, [pc, #292]	@ (8004070 <HAL_TIM_MspPostInit+0x144>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d11f      	bne.n	8003f8e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	4b48      	ldr	r3, [pc, #288]	@ (8004074 <HAL_TIM_MspPostInit+0x148>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	4a47      	ldr	r2, [pc, #284]	@ (8004074 <HAL_TIM_MspPostInit+0x148>)
 8003f58:	f043 0310 	orr.w	r3, r3, #16
 8003f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f5e:	4b45      	ldr	r3, [pc, #276]	@ (8004074 <HAL_TIM_MspPostInit+0x148>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 8003f6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f70:	2312      	movs	r3, #18
 8003f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 8003f80:	f107 031c 	add.w	r3, r7, #28
 8003f84:	4619      	mov	r1, r3
 8003f86:	483c      	ldr	r0, [pc, #240]	@ (8004078 <HAL_TIM_MspPostInit+0x14c>)
 8003f88:	f002 fa8a 	bl	80064a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003f8c:	e06b      	b.n	8004066 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f96:	d11f      	bne.n	8003fd8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	4b35      	ldr	r3, [pc, #212]	@ (8004074 <HAL_TIM_MspPostInit+0x148>)
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	4a34      	ldr	r2, [pc, #208]	@ (8004074 <HAL_TIM_MspPostInit+0x148>)
 8003fa2:	f043 0302 	orr.w	r3, r3, #2
 8003fa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fa8:	4b32      	ldr	r3, [pc, #200]	@ (8004074 <HAL_TIM_MspPostInit+0x148>)
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 8003fb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fba:	2312      	movs	r3, #18
 8003fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 8003fca:	f107 031c 	add.w	r3, r7, #28
 8003fce:	4619      	mov	r1, r3
 8003fd0:	482a      	ldr	r0, [pc, #168]	@ (800407c <HAL_TIM_MspPostInit+0x150>)
 8003fd2:	f002 fa65 	bl	80064a0 <HAL_GPIO_Init>
}
 8003fd6:	e046      	b.n	8004066 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a28      	ldr	r2, [pc, #160]	@ (8004080 <HAL_TIM_MspPostInit+0x154>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d11e      	bne.n	8004020 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	4b23      	ldr	r3, [pc, #140]	@ (8004074 <HAL_TIM_MspPostInit+0x148>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	4a22      	ldr	r2, [pc, #136]	@ (8004074 <HAL_TIM_MspPostInit+0x148>)
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff2:	4b20      	ldr	r3, [pc, #128]	@ (8004074 <HAL_TIM_MspPostInit+0x148>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 8003ffe:	2302      	movs	r3, #2
 8004000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004002:	2312      	movs	r3, #18
 8004004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	2300      	movs	r3, #0
 8004008:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800400a:	2300      	movs	r3, #0
 800400c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800400e:	2302      	movs	r3, #2
 8004010:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 8004012:	f107 031c 	add.w	r3, r7, #28
 8004016:	4619      	mov	r1, r3
 8004018:	4818      	ldr	r0, [pc, #96]	@ (800407c <HAL_TIM_MspPostInit+0x150>)
 800401a:	f002 fa41 	bl	80064a0 <HAL_GPIO_Init>
}
 800401e:	e022      	b.n	8004066 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a17      	ldr	r2, [pc, #92]	@ (8004084 <HAL_TIM_MspPostInit+0x158>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d11d      	bne.n	8004066 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	4b11      	ldr	r3, [pc, #68]	@ (8004074 <HAL_TIM_MspPostInit+0x148>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	4a10      	ldr	r2, [pc, #64]	@ (8004074 <HAL_TIM_MspPostInit+0x148>)
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	6313      	str	r3, [r2, #48]	@ 0x30
 800403a:	4b0e      	ldr	r3, [pc, #56]	@ (8004074 <HAL_TIM_MspPostInit+0x148>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 8004046:	2301      	movs	r3, #1
 8004048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800404a:	2312      	movs	r3, #18
 800404c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404e:	2300      	movs	r3, #0
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004052:	2300      	movs	r3, #0
 8004054:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004056:	2303      	movs	r3, #3
 8004058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 800405a:	f107 031c 	add.w	r3, r7, #28
 800405e:	4619      	mov	r1, r3
 8004060:	4806      	ldr	r0, [pc, #24]	@ (800407c <HAL_TIM_MspPostInit+0x150>)
 8004062:	f002 fa1d 	bl	80064a0 <HAL_GPIO_Init>
}
 8004066:	bf00      	nop
 8004068:	3730      	adds	r7, #48	@ 0x30
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40010000 	.word	0x40010000
 8004074:	40023800 	.word	0x40023800
 8004078:	40021000 	.word	0x40021000
 800407c:	40020400 	.word	0x40020400
 8004080:	40000400 	.word	0x40000400
 8004084:	40010400 	.word	0x40010400

08004088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800408c:	bf00      	nop
 800408e:	e7fd      	b.n	800408c <NMI_Handler+0x4>

08004090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004094:	bf00      	nop
 8004096:	e7fd      	b.n	8004094 <HardFault_Handler+0x4>

08004098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800409c:	bf00      	nop
 800409e:	e7fd      	b.n	800409c <MemManage_Handler+0x4>

080040a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <BusFault_Handler+0x4>

080040a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040ac:	bf00      	nop
 80040ae:	e7fd      	b.n	80040ac <UsageFault_Handler+0x4>

080040b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040be:	b480      	push	{r7}
 80040c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040de:	f000 f9a7 	bl	8004430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT1_Pin);
 80040ea:	2001      	movs	r0, #1
 80040ec:	f002 fcac 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT2_Pin);
 80040f8:	2002      	movs	r0, #2
 80040fa:	f002 fca5 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}

08004102 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT3_Pin);
 8004106:	2004      	movs	r0, #4
 8004108:	f002 fc9e 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800410c:	bf00      	nop
 800410e:	bd80      	pop	{r7, pc}

08004110 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT4_Pin);
 8004114:	2008      	movs	r0, #8
 8004116:	f002 fc97 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}

0800411e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT5_Pin);
 8004122:	2010      	movs	r0, #16
 8004124:	f002 fc90 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004128:	bf00      	nop
 800412a:	bd80      	pop	{r7, pc}

0800412c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8004130:	4802      	ldr	r0, [pc, #8]	@ (800413c <DMA1_Stream1_IRQHandler+0x10>)
 8004132:	f001 ff4b 	bl	8005fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	2000054c 	.word	0x2000054c

08004140 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8004144:	4802      	ldr	r0, [pc, #8]	@ (8004150 <DMA1_Stream2_IRQHandler+0x10>)
 8004146:	f001 ff41 	bl	8005fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	200005ac 	.word	0x200005ac

08004154 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004158:	4802      	ldr	r0, [pc, #8]	@ (8004164 <CAN1_RX0_IRQHandler+0x10>)
 800415a:	f001 faa2 	bl	80056a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	200002b8 	.word	0x200002b8

08004168 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT6_Pin);
 800416c:	2020      	movs	r0, #32
 800416e:	f002 fc6b 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT7_Pin);
 8004172:	2040      	movs	r0, #64	@ 0x40
 8004174:	f002 fc68 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT8_Pin);
 8004178:	2080      	movs	r0, #128	@ 0x80
 800417a:	f002 fc65 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT9_Pin);
 800417e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004182:	f002 fc61 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT10_Pin);
 8004186:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800418a:	f002 fc5d 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004198:	4802      	ldr	r0, [pc, #8]	@ (80041a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800419a:	f006 fac7 	bl	800a72c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	2000033c 	.word	0x2000033c

080041a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041ac:	4802      	ldr	r0, [pc, #8]	@ (80041b8 <TIM2_IRQHandler+0x10>)
 80041ae:	f006 fabd 	bl	800a72c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041b2:	bf00      	nop
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000384 	.word	0x20000384

080041bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041c0:	4802      	ldr	r0, [pc, #8]	@ (80041cc <TIM3_IRQHandler+0x10>)
 80041c2:	f006 fab3 	bl	800a72c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	200003cc 	.word	0x200003cc

080041d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT11_Pin);
 80041d4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80041d8:	f002 fc36 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT12_Pin);
 80041dc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80041e0:	f002 fc32 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT13_Pin);
 80041e4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80041e8:	f002 fc2e 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT14_Pin);
 80041ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80041f0:	f002 fc2a 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT15_Pin);
 80041f4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80041f8:	f002 fc26 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT16_Pin);
 80041fc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004200:	f002 fc22 	bl	8006a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}

08004208 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800420c:	4802      	ldr	r0, [pc, #8]	@ (8004218 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800420e:	f006 fa8d 	bl	800a72c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	200004a4 	.word	0x200004a4

0800421c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004220:	4802      	ldr	r0, [pc, #8]	@ (800422c <TIM6_DAC_IRQHandler+0x10>)
 8004222:	f006 fa83 	bl	800a72c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000414 	.word	0x20000414

08004230 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004234:	4802      	ldr	r0, [pc, #8]	@ (8004240 <TIM7_IRQHandler+0x10>)
 8004236:	f006 fa79 	bl	800a72c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	2000045c 	.word	0x2000045c

08004244 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004248:	4802      	ldr	r0, [pc, #8]	@ (8004254 <DMA2_Stream0_IRQHandler+0x10>)
 800424a:	f001 febf 	bl	8005fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200001f8 	.word	0x200001f8

08004258 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800425c:	4802      	ldr	r0, [pc, #8]	@ (8004268 <DMA2_Stream2_IRQHandler+0x10>)
 800425e:	f001 feb5 	bl	8005fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000258 	.word	0x20000258

0800426c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8004270:	4802      	ldr	r0, [pc, #8]	@ (800427c <DMA2_Stream3_IRQHandler+0x10>)
 8004272:	f001 feab 	bl	8005fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	2000060c 	.word	0x2000060c

08004280 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8004284:	4802      	ldr	r0, [pc, #8]	@ (8004290 <DMA2_Stream4_IRQHandler+0x10>)
 8004286:	f001 fea1 	bl	8005fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	200004ec 	.word	0x200004ec

08004294 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004298:	4802      	ldr	r0, [pc, #8]	@ (80042a4 <OTG_FS_IRQHandler+0x10>)
 800429a:	f003 fb32 	bl	8007902 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20001e84 	.word	0x20001e84

080042a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042b0:	4a14      	ldr	r2, [pc, #80]	@ (8004304 <_sbrk+0x5c>)
 80042b2:	4b15      	ldr	r3, [pc, #84]	@ (8004308 <_sbrk+0x60>)
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042bc:	4b13      	ldr	r3, [pc, #76]	@ (800430c <_sbrk+0x64>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042c4:	4b11      	ldr	r3, [pc, #68]	@ (800430c <_sbrk+0x64>)
 80042c6:	4a12      	ldr	r2, [pc, #72]	@ (8004310 <_sbrk+0x68>)
 80042c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ca:	4b10      	ldr	r3, [pc, #64]	@ (800430c <_sbrk+0x64>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4413      	add	r3, r2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d207      	bcs.n	80042e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042d8:	f00b ff0a 	bl	80100f0 <__errno>
 80042dc:	4603      	mov	r3, r0
 80042de:	220c      	movs	r2, #12
 80042e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
 80042e6:	e009      	b.n	80042fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042e8:	4b08      	ldr	r3, [pc, #32]	@ (800430c <_sbrk+0x64>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042ee:	4b07      	ldr	r3, [pc, #28]	@ (800430c <_sbrk+0x64>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	4a05      	ldr	r2, [pc, #20]	@ (800430c <_sbrk+0x64>)
 80042f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042fa:	68fb      	ldr	r3, [r7, #12]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20020000 	.word	0x20020000
 8004308:	00004000 	.word	0x00004000
 800430c:	2000099c 	.word	0x2000099c
 8004310:	200026f8 	.word	0x200026f8

08004314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004318:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <SystemInit+0x20>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	4a05      	ldr	r2, [pc, #20]	@ (8004334 <SystemInit+0x20>)
 8004320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004328:	bf00      	nop
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004338:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004370 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800433c:	480d      	ldr	r0, [pc, #52]	@ (8004374 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800433e:	490e      	ldr	r1, [pc, #56]	@ (8004378 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004340:	4a0e      	ldr	r2, [pc, #56]	@ (800437c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004344:	e002      	b.n	800434c <LoopCopyDataInit>

08004346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800434a:	3304      	adds	r3, #4

0800434c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800434c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800434e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004350:	d3f9      	bcc.n	8004346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004352:	4a0b      	ldr	r2, [pc, #44]	@ (8004380 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004354:	4c0b      	ldr	r4, [pc, #44]	@ (8004384 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004358:	e001      	b.n	800435e <LoopFillZerobss>

0800435a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800435a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800435c:	3204      	adds	r2, #4

0800435e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800435e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004360:	d3fb      	bcc.n	800435a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004362:	f7ff ffd7 	bl	8004314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004366:	f00b fec9 	bl	80100fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800436a:	f7fc f8c3 	bl	80004f4 <main>
  bx  lr    
 800436e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004378:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 800437c:	0801026c 	.word	0x0801026c
  ldr r2, =_sbss
 8004380:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8004384:	200026f8 	.word	0x200026f8

08004388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004388:	e7fe      	b.n	8004388 <ADC_IRQHandler>
	...

0800438c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004390:	4b0e      	ldr	r3, [pc, #56]	@ (80043cc <HAL_Init+0x40>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0d      	ldr	r2, [pc, #52]	@ (80043cc <HAL_Init+0x40>)
 8004396:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800439a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800439c:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <HAL_Init+0x40>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0a      	ldr	r2, [pc, #40]	@ (80043cc <HAL_Init+0x40>)
 80043a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043a8:	4b08      	ldr	r3, [pc, #32]	@ (80043cc <HAL_Init+0x40>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a07      	ldr	r2, [pc, #28]	@ (80043cc <HAL_Init+0x40>)
 80043ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043b4:	2003      	movs	r0, #3
 80043b6:	f001 fc97 	bl	8005ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ba:	200f      	movs	r0, #15
 80043bc:	f000 f808 	bl	80043d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043c0:	f7ff fa12 	bl	80037e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023c00 	.word	0x40023c00

080043d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043d8:	4b12      	ldr	r3, [pc, #72]	@ (8004424 <HAL_InitTick+0x54>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b12      	ldr	r3, [pc, #72]	@ (8004428 <HAL_InitTick+0x58>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	4619      	mov	r1, r3
 80043e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 fcbd 	bl	8005d6e <HAL_SYSTICK_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e00e      	b.n	800441c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b0f      	cmp	r3, #15
 8004402:	d80a      	bhi.n	800441a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004404:	2200      	movs	r2, #0
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	f001 fc77 	bl	8005cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004410:	4a06      	ldr	r2, [pc, #24]	@ (800442c <HAL_InitTick+0x5c>)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e000      	b.n	800441c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000000 	.word	0x20000000
 8004428:	20000008 	.word	0x20000008
 800442c:	20000004 	.word	0x20000004

08004430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004434:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <HAL_IncTick+0x20>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	4b06      	ldr	r3, [pc, #24]	@ (8004454 <HAL_IncTick+0x24>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4413      	add	r3, r2
 8004440:	4a04      	ldr	r2, [pc, #16]	@ (8004454 <HAL_IncTick+0x24>)
 8004442:	6013      	str	r3, [r2, #0]
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20000008 	.word	0x20000008
 8004454:	200009a0 	.word	0x200009a0

08004458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return uwTick;
 800445c:	4b03      	ldr	r3, [pc, #12]	@ (800446c <HAL_GetTick+0x14>)
 800445e:	681b      	ldr	r3, [r3, #0]
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	200009a0 	.word	0x200009a0

08004470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004478:	f7ff ffee 	bl	8004458 <HAL_GetTick>
 800447c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d005      	beq.n	8004496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800448a:	4b0a      	ldr	r3, [pc, #40]	@ (80044b4 <HAL_Delay+0x44>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004496:	bf00      	nop
 8004498:	f7ff ffde 	bl	8004458 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d8f7      	bhi.n	8004498 <HAL_Delay+0x28>
  {
  }
}
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000008 	.word	0x20000008

080044b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e033      	b.n	8004536 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff f9ae 	bl	8003838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d118      	bne.n	8004528 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044fe:	f023 0302 	bic.w	r3, r3, #2
 8004502:	f043 0202 	orr.w	r2, r3, #2
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fa78 	bl	8004a00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	f043 0201 	orr.w	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	641a      	str	r2, [r3, #64]	@ 0x40
 8004526:	e001      	b.n	800452c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004534:	7bfb      	ldrb	r3, [r7, #15]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_ADC_Start_DMA+0x1e>
 800455a:	2302      	movs	r3, #2
 800455c:	e0e9      	b.n	8004732 <HAL_ADC_Start_DMA+0x1f2>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	d018      	beq.n	80045a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004584:	4b6d      	ldr	r3, [pc, #436]	@ (800473c <HAL_ADC_Start_DMA+0x1fc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a6d      	ldr	r2, [pc, #436]	@ (8004740 <HAL_ADC_Start_DMA+0x200>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	0c9a      	lsrs	r2, r3, #18
 8004590:	4613      	mov	r3, r2
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	4413      	add	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004598:	e002      	b.n	80045a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3b01      	subs	r3, #1
 800459e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f9      	bne.n	800459a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b4:	d107      	bne.n	80045c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	f040 80a1 	bne.w	8004718 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004600:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004614:	d106      	bne.n	8004624 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461a:	f023 0206 	bic.w	r2, r3, #6
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	645a      	str	r2, [r3, #68]	@ 0x44
 8004622:	e002      	b.n	800462a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004632:	4b44      	ldr	r3, [pc, #272]	@ (8004744 <HAL_ADC_Start_DMA+0x204>)
 8004634:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463a:	4a43      	ldr	r2, [pc, #268]	@ (8004748 <HAL_ADC_Start_DMA+0x208>)
 800463c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	4a42      	ldr	r2, [pc, #264]	@ (800474c <HAL_ADC_Start_DMA+0x20c>)
 8004644:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464a:	4a41      	ldr	r2, [pc, #260]	@ (8004750 <HAL_ADC_Start_DMA+0x210>)
 800464c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004656:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004666:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004676:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	334c      	adds	r3, #76	@ 0x4c
 8004682:	4619      	mov	r1, r3
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f001 fc48 	bl	8005f1c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	2b00      	cmp	r3, #0
 8004696:	d12a      	bne.n	80046ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2d      	ldr	r2, [pc, #180]	@ (8004754 <HAL_ADC_Start_DMA+0x214>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d015      	beq.n	80046ce <HAL_ADC_Start_DMA+0x18e>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004758 <HAL_ADC_Start_DMA+0x218>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d105      	bne.n	80046b8 <HAL_ADC_Start_DMA+0x178>
 80046ac:	4b25      	ldr	r3, [pc, #148]	@ (8004744 <HAL_ADC_Start_DMA+0x204>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a27      	ldr	r2, [pc, #156]	@ (800475c <HAL_ADC_Start_DMA+0x21c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d136      	bne.n	8004730 <HAL_ADC_Start_DMA+0x1f0>
 80046c2:	4b20      	ldr	r3, [pc, #128]	@ (8004744 <HAL_ADC_Start_DMA+0x204>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0310 	and.w	r3, r3, #16
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d130      	bne.n	8004730 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d129      	bne.n	8004730 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80046ea:	609a      	str	r2, [r3, #8]
 80046ec:	e020      	b.n	8004730 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	@ (8004754 <HAL_ADC_Start_DMA+0x214>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d11b      	bne.n	8004730 <HAL_ADC_Start_DMA+0x1f0>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d114      	bne.n	8004730 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004714:	609a      	str	r2, [r3, #8]
 8004716:	e00b      	b.n	8004730 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471c:	f043 0210 	orr.w	r2, r3, #16
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004728:	f043 0201 	orr.w	r2, r3, #1
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000000 	.word	0x20000000
 8004740:	431bde83 	.word	0x431bde83
 8004744:	40012300 	.word	0x40012300
 8004748:	08004bf9 	.word	0x08004bf9
 800474c:	08004cb3 	.word	0x08004cb3
 8004750:	08004ccf 	.word	0x08004ccf
 8004754:	40012000 	.word	0x40012000
 8004758:	40012100 	.word	0x40012100
 800475c:	40012200 	.word	0x40012200

08004760 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x1c>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e113      	b.n	80049e0 <HAL_ADC_ConfigChannel+0x244>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b09      	cmp	r3, #9
 80047c6:	d925      	bls.n	8004814 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68d9      	ldr	r1, [r3, #12]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	3b1e      	subs	r3, #30
 80047de:	2207      	movs	r2, #7
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	43da      	mvns	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	400a      	ands	r2, r1
 80047ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68d9      	ldr	r1, [r3, #12]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	4618      	mov	r0, r3
 8004800:	4603      	mov	r3, r0
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	4403      	add	r3, r0
 8004806:	3b1e      	subs	r3, #30
 8004808:	409a      	lsls	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	60da      	str	r2, [r3, #12]
 8004812:	e022      	b.n	800485a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6919      	ldr	r1, [r3, #16]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	b29b      	uxth	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	4613      	mov	r3, r2
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	4413      	add	r3, r2
 8004828:	2207      	movs	r2, #7
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43da      	mvns	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	400a      	ands	r2, r1
 8004836:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6919      	ldr	r1, [r3, #16]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	4618      	mov	r0, r3
 800484a:	4603      	mov	r3, r0
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4403      	add	r3, r0
 8004850:	409a      	lsls	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b06      	cmp	r3, #6
 8004860:	d824      	bhi.n	80048ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	3b05      	subs	r3, #5
 8004874:	221f      	movs	r2, #31
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43da      	mvns	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	400a      	ands	r2, r1
 8004882:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	4618      	mov	r0, r3
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	3b05      	subs	r3, #5
 800489e:	fa00 f203 	lsl.w	r2, r0, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80048aa:	e04c      	b.n	8004946 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d824      	bhi.n	80048fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	3b23      	subs	r3, #35	@ 0x23
 80048c6:	221f      	movs	r2, #31
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43da      	mvns	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	400a      	ands	r2, r1
 80048d4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	4618      	mov	r0, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	3b23      	subs	r3, #35	@ 0x23
 80048f0:	fa00 f203 	lsl.w	r2, r0, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80048fc:	e023      	b.n	8004946 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	3b41      	subs	r3, #65	@ 0x41
 8004910:	221f      	movs	r2, #31
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43da      	mvns	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	400a      	ands	r2, r1
 800491e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	4618      	mov	r0, r3
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	3b41      	subs	r3, #65	@ 0x41
 800493a:	fa00 f203 	lsl.w	r2, r0, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004946:	4b29      	ldr	r3, [pc, #164]	@ (80049ec <HAL_ADC_ConfigChannel+0x250>)
 8004948:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a28      	ldr	r2, [pc, #160]	@ (80049f0 <HAL_ADC_ConfigChannel+0x254>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d10f      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x1d8>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b12      	cmp	r3, #18
 800495a:	d10b      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1d      	ldr	r2, [pc, #116]	@ (80049f0 <HAL_ADC_ConfigChannel+0x254>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d12b      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x23a>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1c      	ldr	r2, [pc, #112]	@ (80049f4 <HAL_ADC_ConfigChannel+0x258>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <HAL_ADC_ConfigChannel+0x1f4>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b11      	cmp	r3, #17
 800498e:	d122      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a11      	ldr	r2, [pc, #68]	@ (80049f4 <HAL_ADC_ConfigChannel+0x258>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d111      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049b2:	4b11      	ldr	r3, [pc, #68]	@ (80049f8 <HAL_ADC_ConfigChannel+0x25c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a11      	ldr	r2, [pc, #68]	@ (80049fc <HAL_ADC_ConfigChannel+0x260>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	0c9a      	lsrs	r2, r3, #18
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049c8:	e002      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f9      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	40012300 	.word	0x40012300
 80049f0:	40012000 	.word	0x40012000
 80049f4:	10000012 	.word	0x10000012
 80049f8:	20000000 	.word	0x20000000
 80049fc:	431bde83 	.word	0x431bde83

08004a00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a08:	4b79      	ldr	r3, [pc, #484]	@ (8004bf0 <ADC_Init+0x1f0>)
 8004a0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6859      	ldr	r1, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	021a      	lsls	r2, r3, #8
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6859      	ldr	r1, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6899      	ldr	r1, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a92:	4a58      	ldr	r2, [pc, #352]	@ (8004bf4 <ADC_Init+0x1f4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d022      	beq.n	8004ade <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004aa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6899      	ldr	r1, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004ac8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6899      	ldr	r1, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	609a      	str	r2, [r3, #8]
 8004adc:	e00f      	b.n	8004afe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004afc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0202 	bic.w	r2, r2, #2
 8004b0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6899      	ldr	r1, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	7e1b      	ldrb	r3, [r3, #24]
 8004b18:	005a      	lsls	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01b      	beq.n	8004b64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004b4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6859      	ldr	r1, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b56:	3b01      	subs	r3, #1
 8004b58:	035a      	lsls	r2, r3, #13
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	e007      	b.n	8004b74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	051a      	lsls	r2, r3, #20
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004ba8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6899      	ldr	r1, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bb6:	025a      	lsls	r2, r3, #9
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6899      	ldr	r1, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	029a      	lsls	r2, r3, #10
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
}
 8004be4:	bf00      	nop
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	40012300 	.word	0x40012300
 8004bf4:	0f000001 	.word	0x0f000001

08004bf8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c04:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d13c      	bne.n	8004c8c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c16:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d12b      	bne.n	8004c84 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d127      	bne.n	8004c84 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d006      	beq.n	8004c50 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d119      	bne.n	8004c84 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0220 	bic.w	r2, r2, #32
 8004c5e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7c:	f043 0201 	orr.w	r2, r3, #1
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7ff fd6b 	bl	8004760 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c8a:	e00e      	b.n	8004caa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff fd75 	bl	8004788 <HAL_ADC_ErrorCallback>
}
 8004c9e:	e004      	b.n	8004caa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	4798      	blx	r3
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff fd57 	bl	8004774 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cda:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2240      	movs	r2, #64	@ 0x40
 8004ce0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce6:	f043 0204 	orr.w	r2, r3, #4
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff fd4a 	bl	8004788 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cf4:	bf00      	nop
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e0ed      	b.n	8004eea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fe fe84 	bl	8003a28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d30:	f7ff fb92 	bl	8004458 <HAL_GetTick>
 8004d34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d36:	e012      	b.n	8004d5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d38:	f7ff fb8e 	bl	8004458 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b0a      	cmp	r3, #10
 8004d44:	d90b      	bls.n	8004d5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2205      	movs	r2, #5
 8004d56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e0c5      	b.n	8004eea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0e5      	beq.n	8004d38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0202 	bic.w	r2, r2, #2
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d7c:	f7ff fb6c 	bl	8004458 <HAL_GetTick>
 8004d80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d82:	e012      	b.n	8004daa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d84:	f7ff fb68 	bl	8004458 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b0a      	cmp	r3, #10
 8004d90:	d90b      	bls.n	8004daa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2205      	movs	r2, #5
 8004da2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e09f      	b.n	8004eea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e5      	bne.n	8004d84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	7e1b      	ldrb	r3, [r3, #24]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d108      	bne.n	8004dd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	e007      	b.n	8004de2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004de0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	7e5b      	ldrb	r3, [r3, #25]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d108      	bne.n	8004dfc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e007      	b.n	8004e0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	7e9b      	ldrb	r3, [r3, #26]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d108      	bne.n	8004e26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0220 	orr.w	r2, r2, #32
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e007      	b.n	8004e36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0220 	bic.w	r2, r2, #32
 8004e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	7edb      	ldrb	r3, [r3, #27]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d108      	bne.n	8004e50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0210 	bic.w	r2, r2, #16
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e007      	b.n	8004e60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0210 	orr.w	r2, r2, #16
 8004e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	7f1b      	ldrb	r3, [r3, #28]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d108      	bne.n	8004e7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0208 	orr.w	r2, r2, #8
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	e007      	b.n	8004e8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0208 	bic.w	r2, r2, #8
 8004e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	7f5b      	ldrb	r3, [r3, #29]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d108      	bne.n	8004ea4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0204 	orr.w	r2, r2, #4
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e007      	b.n	8004eb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0204 	bic.w	r2, r2, #4
 8004eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	ea42 0103 	orr.w	r1, r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	1e5a      	subs	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e015      	b.n	8004f30 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f93b 	bl	8005180 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fe fddc 	bl	8003ac8 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f4e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d003      	beq.n	8004f5e <HAL_CAN_ConfigFilter+0x26>
 8004f56:	7cfb      	ldrb	r3, [r7, #19]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	f040 80be 	bne.w	80050da <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004f5e:	4b65      	ldr	r3, [pc, #404]	@ (80050f4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004f60:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004f68:	f043 0201 	orr.w	r2, r3, #1
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004f78:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	401a      	ands	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d123      	bne.n	8005008 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	401a      	ands	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004fe2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	3248      	adds	r2, #72	@ 0x48
 8004fe8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ffc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ffe:	6979      	ldr	r1, [r7, #20]
 8005000:	3348      	adds	r3, #72	@ 0x48
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	440b      	add	r3, r1
 8005006:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d122      	bne.n	8005056 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	431a      	orrs	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005030:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	3248      	adds	r2, #72	@ 0x48
 8005036:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800504a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800504c:	6979      	ldr	r1, [r7, #20]
 800504e:	3348      	adds	r3, #72	@ 0x48
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	440b      	add	r3, r1
 8005054:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	43db      	mvns	r3, r3
 8005068:	401a      	ands	r2, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005070:	e007      	b.n	8005082 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	431a      	orrs	r2, r3
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	43db      	mvns	r3, r3
 8005094:	401a      	ands	r2, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800509c:	e007      	b.n	80050ae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d107      	bne.n	80050c6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	431a      	orrs	r2, r3
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80050cc:	f023 0201 	bic.w	r2, r3, #1
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e006      	b.n	80050e8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050de:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
  }
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40006400 	.word	0x40006400

080050f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d12e      	bne.n	800516a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005124:	f7ff f998 	bl	8004458 <HAL_GetTick>
 8005128:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800512a:	e012      	b.n	8005152 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800512c:	f7ff f994 	bl	8004458 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b0a      	cmp	r3, #10
 8005138:	d90b      	bls.n	8005152 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2205      	movs	r2, #5
 800514a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e012      	b.n	8005178 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e5      	bne.n	800512c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e006      	b.n	8005178 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
  }
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d133      	bne.n	80051fc <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051a4:	f7ff f958 	bl	8004458 <HAL_GetTick>
 80051a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051aa:	e012      	b.n	80051d2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051ac:	f7ff f954 	bl	8004458 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b0a      	cmp	r3, #10
 80051b8:	d90b      	bls.n	80051d2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2205      	movs	r2, #5
 80051ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e01b      	b.n	800520a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0e5      	beq.n	80051ac <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0202 	bic.w	r2, r2, #2
 80051ee:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e006      	b.n	800520a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005200:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
  }
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005212:	b480      	push	{r7}
 8005214:	b089      	sub	sp, #36	@ 0x24
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	607a      	str	r2, [r7, #4]
 800521e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005226:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005230:	7ffb      	ldrb	r3, [r7, #31]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d003      	beq.n	800523e <HAL_CAN_AddTxMessage+0x2c>
 8005236:	7ffb      	ldrb	r3, [r7, #31]
 8005238:	2b02      	cmp	r3, #2
 800523a:	f040 80b8 	bne.w	80053ae <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800524e:	2b00      	cmp	r3, #0
 8005250:	d105      	bne.n	800525e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80a0 	beq.w	800539e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	0e1b      	lsrs	r3, r3, #24
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d907      	bls.n	800527e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e09e      	b.n	80053bc <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800527e:	2201      	movs	r2, #1
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	409a      	lsls	r2, r3
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10d      	bne.n	80052ac <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800529a:	68f9      	ldr	r1, [r7, #12]
 800529c:	6809      	ldr	r1, [r1, #0]
 800529e:	431a      	orrs	r2, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	3318      	adds	r3, #24
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	440b      	add	r3, r1
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e00f      	b.n	80052cc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052b6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052bc:	68f9      	ldr	r1, [r7, #12]
 80052be:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80052c0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	3318      	adds	r3, #24
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	440b      	add	r3, r1
 80052ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6819      	ldr	r1, [r3, #0]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	3318      	adds	r3, #24
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	440b      	add	r3, r1
 80052dc:	3304      	adds	r3, #4
 80052de:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	7d1b      	ldrb	r3, [r3, #20]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d111      	bne.n	800530c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	3318      	adds	r3, #24
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	4413      	add	r3, r2
 80052f4:	3304      	adds	r3, #4
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	6811      	ldr	r1, [r2, #0]
 80052fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	3318      	adds	r3, #24
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	440b      	add	r3, r1
 8005308:	3304      	adds	r3, #4
 800530a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3307      	adds	r3, #7
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	061a      	lsls	r2, r3, #24
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3306      	adds	r3, #6
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	041b      	lsls	r3, r3, #16
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3305      	adds	r3, #5
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	4313      	orrs	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	3204      	adds	r2, #4
 800532c:	7812      	ldrb	r2, [r2, #0]
 800532e:	4610      	mov	r0, r2
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	6811      	ldr	r1, [r2, #0]
 8005334:	ea43 0200 	orr.w	r2, r3, r0
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	440b      	add	r3, r1
 800533e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005342:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3303      	adds	r3, #3
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	061a      	lsls	r2, r3, #24
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3302      	adds	r3, #2
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	041b      	lsls	r3, r3, #16
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3301      	adds	r3, #1
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	4313      	orrs	r3, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	7812      	ldrb	r2, [r2, #0]
 8005364:	4610      	mov	r0, r2
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	6811      	ldr	r1, [r2, #0]
 800536a:	ea43 0200 	orr.w	r2, r3, r0
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	440b      	add	r3, r1
 8005374:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005378:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	3318      	adds	r3, #24
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	4413      	add	r3, r2
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	6811      	ldr	r1, [r2, #0]
 800538c:	f043 0201 	orr.w	r2, r3, #1
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	3318      	adds	r3, #24
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	440b      	add	r3, r1
 8005398:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	e00e      	b.n	80053bc <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e006      	b.n	80053bc <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
  }
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3724      	adds	r7, #36	@ 0x24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053da:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80053dc:	7afb      	ldrb	r3, [r7, #11]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d002      	beq.n	80053e8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80053e2:	7afb      	ldrb	r3, [r7, #11]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d11d      	bne.n	8005424 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3301      	adds	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3301      	adds	r3, #1
 800540e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3301      	adds	r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005424:	68fb      	ldr	r3, [r7, #12]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005432:	b480      	push	{r7}
 8005434:	b087      	sub	sp, #28
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
 800543e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005446:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d003      	beq.n	8005456 <HAL_CAN_GetRxMessage+0x24>
 800544e:	7dfb      	ldrb	r3, [r7, #23]
 8005450:	2b02      	cmp	r3, #2
 8005452:	f040 80f3 	bne.w	800563c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10e      	bne.n	800547a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d116      	bne.n	8005498 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e0e7      	b.n	800564a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d107      	bne.n	8005498 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0d8      	b.n	800564a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	331b      	adds	r3, #27
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	4413      	add	r3, r2
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0204 	and.w	r2, r3, #4
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10c      	bne.n	80054d0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	331b      	adds	r3, #27
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	4413      	add	r3, r2
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	0d5b      	lsrs	r3, r3, #21
 80054c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	e00b      	b.n	80054e8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	331b      	adds	r3, #27
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	4413      	add	r3, r2
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	08db      	lsrs	r3, r3, #3
 80054e0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	331b      	adds	r3, #27
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	4413      	add	r3, r2
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0202 	and.w	r2, r3, #2
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	331b      	adds	r3, #27
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	4413      	add	r3, r2
 800550a:	3304      	adds	r3, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 020f 	and.w	r2, r3, #15
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	331b      	adds	r3, #27
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	4413      	add	r3, r2
 8005522:	3304      	adds	r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	b2da      	uxtb	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	331b      	adds	r3, #27
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	4413      	add	r3, r2
 800553a:	3304      	adds	r3, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	0c1b      	lsrs	r3, r3, #16
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	4413      	add	r3, r2
 8005550:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	b2da      	uxtb	r2, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	4413      	add	r3, r2
 8005566:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	0a1a      	lsrs	r2, r3, #8
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	3301      	adds	r3, #1
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4413      	add	r3, r2
 8005580:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	0c1a      	lsrs	r2, r3, #16
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	3302      	adds	r3, #2
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	4413      	add	r3, r2
 800559a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	0e1a      	lsrs	r2, r3, #24
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	3303      	adds	r3, #3
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3304      	adds	r3, #4
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	0a1a      	lsrs	r2, r3, #8
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	3305      	adds	r3, #5
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	0c1a      	lsrs	r2, r3, #16
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	3306      	adds	r3, #6
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	4413      	add	r3, r2
 8005600:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	0e1a      	lsrs	r2, r3, #24
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	3307      	adds	r3, #7
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d108      	bne.n	8005628 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0220 	orr.w	r2, r2, #32
 8005624:	60da      	str	r2, [r3, #12]
 8005626:	e007      	b.n	8005638 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0220 	orr.w	r2, r2, #32
 8005636:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	e006      	b.n	800564a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005640:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
  }
}
 800564a:	4618      	mov	r0, r3
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005666:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d002      	beq.n	8005674 <HAL_CAN_ActivateNotification+0x1e>
 800566e:	7bfb      	ldrb	r3, [r7, #15]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d109      	bne.n	8005688 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6959      	ldr	r1, [r3, #20]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	e006      	b.n	8005696 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
  }
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b08a      	sub	sp, #40	@ 0x28
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d07c      	beq.n	80057e2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d023      	beq.n	800573a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2201      	movs	r2, #1
 80056f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f983 	bl	8005a10 <HAL_CAN_TxMailbox0CompleteCallback>
 800570a:	e016      	b.n	800573a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005718:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
 800571e:	e00c      	b.n	800573a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d004      	beq.n	8005734 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
 8005732:	e002      	b.n	800573a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f989 	bl	8005a4c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d024      	beq.n	800578e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800574c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f963 	bl	8005a24 <HAL_CAN_TxMailbox1CompleteCallback>
 800575e:	e016      	b.n	800578e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005766:	2b00      	cmp	r3, #0
 8005768:	d004      	beq.n	8005774 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
 8005772:	e00c      	b.n	800578e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800577a:	2b00      	cmp	r3, #0
 800577c:	d004      	beq.n	8005788 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
 8005786:	e002      	b.n	800578e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f969 	bl	8005a60 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d024      	beq.n	80057e2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80057a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f943 	bl	8005a38 <HAL_CAN_TxMailbox2CompleteCallback>
 80057b2:	e016      	b.n	80057e2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d004      	beq.n	80057c8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c6:	e00c      	b.n	80057e2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d004      	beq.n	80057dc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057da:	e002      	b.n	80057e2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f949 	bl	8005a74 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00c      	beq.n	8005806 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f003 0310 	and.w	r3, r3, #16
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2210      	movs	r2, #16
 8005804:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00b      	beq.n	8005828 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d006      	beq.n	8005828 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2208      	movs	r2, #8
 8005820:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f930 	bl	8005a88 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0303 	and.w	r3, r3, #3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7fd fcc7 	bl	80031d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00c      	beq.n	800586a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f003 0310 	and.w	r3, r3, #16
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2210      	movs	r2, #16
 8005868:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00b      	beq.n	800588c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d006      	beq.n	800588c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2208      	movs	r2, #8
 8005884:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f912 	bl	8005ab0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b00      	cmp	r3, #0
 8005894:	d009      	beq.n	80058aa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f8f9 	bl	8005a9c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00b      	beq.n	80058cc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2210      	movs	r2, #16
 80058c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f8fc 	bl	8005ac4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00b      	beq.n	80058ee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d006      	beq.n	80058ee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2208      	movs	r2, #8
 80058e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f8f5 	bl	8005ad8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d07b      	beq.n	80059f0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d072      	beq.n	80059e8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	f043 0302 	orr.w	r3, r3, #2
 8005938:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	f043 0304 	orr.w	r3, r3, #4
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800595c:	2b00      	cmp	r3, #0
 800595e:	d043      	beq.n	80059e8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005966:	2b00      	cmp	r3, #0
 8005968:	d03e      	beq.n	80059e8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005970:	2b60      	cmp	r3, #96	@ 0x60
 8005972:	d02b      	beq.n	80059cc <HAL_CAN_IRQHandler+0x32a>
 8005974:	2b60      	cmp	r3, #96	@ 0x60
 8005976:	d82e      	bhi.n	80059d6 <HAL_CAN_IRQHandler+0x334>
 8005978:	2b50      	cmp	r3, #80	@ 0x50
 800597a:	d022      	beq.n	80059c2 <HAL_CAN_IRQHandler+0x320>
 800597c:	2b50      	cmp	r3, #80	@ 0x50
 800597e:	d82a      	bhi.n	80059d6 <HAL_CAN_IRQHandler+0x334>
 8005980:	2b40      	cmp	r3, #64	@ 0x40
 8005982:	d019      	beq.n	80059b8 <HAL_CAN_IRQHandler+0x316>
 8005984:	2b40      	cmp	r3, #64	@ 0x40
 8005986:	d826      	bhi.n	80059d6 <HAL_CAN_IRQHandler+0x334>
 8005988:	2b30      	cmp	r3, #48	@ 0x30
 800598a:	d010      	beq.n	80059ae <HAL_CAN_IRQHandler+0x30c>
 800598c:	2b30      	cmp	r3, #48	@ 0x30
 800598e:	d822      	bhi.n	80059d6 <HAL_CAN_IRQHandler+0x334>
 8005990:	2b10      	cmp	r3, #16
 8005992:	d002      	beq.n	800599a <HAL_CAN_IRQHandler+0x2f8>
 8005994:	2b20      	cmp	r3, #32
 8005996:	d005      	beq.n	80059a4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005998:	e01d      	b.n	80059d6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	f043 0308 	orr.w	r3, r3, #8
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059a2:	e019      	b.n	80059d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	f043 0310 	orr.w	r3, r3, #16
 80059aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059ac:	e014      	b.n	80059d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	f043 0320 	orr.w	r3, r3, #32
 80059b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059b6:	e00f      	b.n	80059d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059c0:	e00a      	b.n	80059d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059ca:	e005      	b.n	80059d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80059d4:	e000      	b.n	80059d8 <HAL_CAN_IRQHandler+0x336>
            break;
 80059d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80059e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2204      	movs	r2, #4
 80059ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d008      	beq.n	8005a08 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f872 	bl	8005aec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005a08:	bf00      	nop
 8005a0a:	3728      	adds	r7, #40	@ 0x28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b10:	4b0c      	ldr	r3, [pc, #48]	@ (8005b44 <__NVIC_SetPriorityGrouping+0x44>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b32:	4a04      	ldr	r2, [pc, #16]	@ (8005b44 <__NVIC_SetPriorityGrouping+0x44>)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	60d3      	str	r3, [r2, #12]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	e000ed00 	.word	0xe000ed00

08005b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b4c:	4b04      	ldr	r3, [pc, #16]	@ (8005b60 <__NVIC_GetPriorityGrouping+0x18>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	f003 0307 	and.w	r3, r3, #7
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	e000ed00 	.word	0xe000ed00

08005b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	db0b      	blt.n	8005b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	f003 021f 	and.w	r2, r3, #31
 8005b7c:	4907      	ldr	r1, [pc, #28]	@ (8005b9c <__NVIC_EnableIRQ+0x38>)
 8005b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	2001      	movs	r0, #1
 8005b86:	fa00 f202 	lsl.w	r2, r0, r2
 8005b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	e000e100 	.word	0xe000e100

08005ba0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	db12      	blt.n	8005bd8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	f003 021f 	and.w	r2, r3, #31
 8005bb8:	490a      	ldr	r1, [pc, #40]	@ (8005be4 <__NVIC_DisableIRQ+0x44>)
 8005bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8005bc6:	3320      	adds	r3, #32
 8005bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005bcc:	f3bf 8f4f 	dsb	sy
}
 8005bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005bd2:	f3bf 8f6f 	isb	sy
}
 8005bd6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	e000e100 	.word	0xe000e100

08005be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	6039      	str	r1, [r7, #0]
 8005bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	db0a      	blt.n	8005c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	490c      	ldr	r1, [pc, #48]	@ (8005c34 <__NVIC_SetPriority+0x4c>)
 8005c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c06:	0112      	lsls	r2, r2, #4
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c10:	e00a      	b.n	8005c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	4908      	ldr	r1, [pc, #32]	@ (8005c38 <__NVIC_SetPriority+0x50>)
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	3b04      	subs	r3, #4
 8005c20:	0112      	lsls	r2, r2, #4
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	440b      	add	r3, r1
 8005c26:	761a      	strb	r2, [r3, #24]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	e000e100 	.word	0xe000e100
 8005c38:	e000ed00 	.word	0xe000ed00

08005c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b089      	sub	sp, #36	@ 0x24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f1c3 0307 	rsb	r3, r3, #7
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	bf28      	it	cs
 8005c5a:	2304      	movcs	r3, #4
 8005c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3304      	adds	r3, #4
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d902      	bls.n	8005c6c <NVIC_EncodePriority+0x30>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3b03      	subs	r3, #3
 8005c6a:	e000      	b.n	8005c6e <NVIC_EncodePriority+0x32>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c70:	f04f 32ff 	mov.w	r2, #4294967295
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	43da      	mvns	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	401a      	ands	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c84:	f04f 31ff 	mov.w	r1, #4294967295
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8e:	43d9      	mvns	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c94:	4313      	orrs	r3, r2
         );
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3724      	adds	r7, #36	@ 0x24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
	...

08005ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cb4:	d301      	bcc.n	8005cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e00f      	b.n	8005cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cba:	4a0a      	ldr	r2, [pc, #40]	@ (8005ce4 <SysTick_Config+0x40>)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cc2:	210f      	movs	r1, #15
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	f7ff ff8e 	bl	8005be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ccc:	4b05      	ldr	r3, [pc, #20]	@ (8005ce4 <SysTick_Config+0x40>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cd2:	4b04      	ldr	r3, [pc, #16]	@ (8005ce4 <SysTick_Config+0x40>)
 8005cd4:	2207      	movs	r2, #7
 8005cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	e000e010 	.word	0xe000e010

08005ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ff05 	bl	8005b00 <__NVIC_SetPriorityGrouping>
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b086      	sub	sp, #24
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	4603      	mov	r3, r0
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d10:	f7ff ff1a 	bl	8005b48 <__NVIC_GetPriorityGrouping>
 8005d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	6978      	ldr	r0, [r7, #20]
 8005d1c:	f7ff ff8e 	bl	8005c3c <NVIC_EncodePriority>
 8005d20:	4602      	mov	r2, r0
 8005d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d26:	4611      	mov	r1, r2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff ff5d 	bl	8005be8 <__NVIC_SetPriority>
}
 8005d2e:	bf00      	nop
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff ff0d 	bl	8005b64 <__NVIC_EnableIRQ>
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	4603      	mov	r3, r0
 8005d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff ff1d 	bl	8005ba0 <__NVIC_DisableIRQ>
}
 8005d66:	bf00      	nop
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff ff94 	bl	8005ca4 <SysTick_Config>
 8005d7c:	4603      	mov	r3, r0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e00e      	b.n	8005db6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	795b      	ldrb	r3, [r3, #5]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d105      	bne.n	8005dae <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7fd feaf 	bl	8003b0c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005dcc:	f7fe fb44 	bl	8004458 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e099      	b.n	8005f10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0201 	bic.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dfc:	e00f      	b.n	8005e1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dfe:	f7fe fb2b 	bl	8004458 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b05      	cmp	r3, #5
 8005e0a:	d908      	bls.n	8005e1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2203      	movs	r2, #3
 8005e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e078      	b.n	8005f10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e8      	bne.n	8005dfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4b38      	ldr	r3, [pc, #224]	@ (8005f18 <HAL_DMA_Init+0x158>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d107      	bne.n	8005e88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e80:	4313      	orrs	r3, r2
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f023 0307 	bic.w	r3, r3, #7
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d117      	bne.n	8005ee2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00e      	beq.n	8005ee2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fa6f 	bl	80063a8 <DMA_CheckFifoParam>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2240      	movs	r2, #64	@ 0x40
 8005ed4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e016      	b.n	8005f10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa26 	bl	800633c <DMA_CalcBaseAndBitshift>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef8:	223f      	movs	r2, #63	@ 0x3f
 8005efa:	409a      	lsls	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	f010803f 	.word	0xf010803f

08005f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_DMA_Start_IT+0x26>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e040      	b.n	8005fc4 <HAL_DMA_Start_IT+0xa8>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d12f      	bne.n	8005fb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 f9b8 	bl	80062e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f74:	223f      	movs	r2, #63	@ 0x3f
 8005f76:	409a      	lsls	r2, r3
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0216 	orr.w	r2, r2, #22
 8005f8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0208 	orr.w	r2, r2, #8
 8005fa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e005      	b.n	8005fc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fd8:	4b8e      	ldr	r3, [pc, #568]	@ (8006214 <HAL_DMA_IRQHandler+0x248>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a8e      	ldr	r2, [pc, #568]	@ (8006218 <HAL_DMA_IRQHandler+0x24c>)
 8005fde:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe2:	0a9b      	lsrs	r3, r3, #10
 8005fe4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff6:	2208      	movs	r2, #8
 8005ff8:	409a      	lsls	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d01a      	beq.n	8006038 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d013      	beq.n	8006038 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0204 	bic.w	r2, r2, #4
 800601e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006024:	2208      	movs	r2, #8
 8006026:	409a      	lsls	r2, r3
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006030:	f043 0201 	orr.w	r2, r3, #1
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800603c:	2201      	movs	r2, #1
 800603e:	409a      	lsls	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4013      	ands	r3, r2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d012      	beq.n	800606e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00b      	beq.n	800606e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800605a:	2201      	movs	r2, #1
 800605c:	409a      	lsls	r2, r3
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006066:	f043 0202 	orr.w	r2, r3, #2
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006072:	2204      	movs	r2, #4
 8006074:	409a      	lsls	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4013      	ands	r3, r2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d012      	beq.n	80060a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00b      	beq.n	80060a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006090:	2204      	movs	r2, #4
 8006092:	409a      	lsls	r2, r3
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609c:	f043 0204 	orr.w	r2, r3, #4
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a8:	2210      	movs	r2, #16
 80060aa:	409a      	lsls	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d043      	beq.n	800613c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d03c      	beq.n	800613c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c6:	2210      	movs	r2, #16
 80060c8:	409a      	lsls	r2, r3
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d018      	beq.n	800610e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d108      	bne.n	80060fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d024      	beq.n	800613c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
 80060fa:	e01f      	b.n	800613c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01b      	beq.n	800613c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
 800610c:	e016      	b.n	800613c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006118:	2b00      	cmp	r3, #0
 800611a:	d107      	bne.n	800612c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0208 	bic.w	r2, r2, #8
 800612a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d003      	beq.n	800613c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006140:	2220      	movs	r2, #32
 8006142:	409a      	lsls	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4013      	ands	r3, r2
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 808f 	beq.w	800626c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8087 	beq.w	800626c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006162:	2220      	movs	r2, #32
 8006164:	409a      	lsls	r2, r3
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b05      	cmp	r3, #5
 8006174:	d136      	bne.n	80061e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0216 	bic.w	r2, r2, #22
 8006184:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695a      	ldr	r2, [r3, #20]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006194:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d103      	bne.n	80061a6 <HAL_DMA_IRQHandler+0x1da>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0208 	bic.w	r2, r2, #8
 80061b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ba:	223f      	movs	r2, #63	@ 0x3f
 80061bc:	409a      	lsls	r2, r3
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d07e      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
        }
        return;
 80061e2:	e079      	b.n	80062d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01d      	beq.n	800622e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10d      	bne.n	800621c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006204:	2b00      	cmp	r3, #0
 8006206:	d031      	beq.n	800626c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	4798      	blx	r3
 8006210:	e02c      	b.n	800626c <HAL_DMA_IRQHandler+0x2a0>
 8006212:	bf00      	nop
 8006214:	20000000 	.word	0x20000000
 8006218:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006220:	2b00      	cmp	r3, #0
 8006222:	d023      	beq.n	800626c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	4798      	blx	r3
 800622c:	e01e      	b.n	800626c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10f      	bne.n	800625c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0210 	bic.w	r2, r2, #16
 800624a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006260:	2b00      	cmp	r3, #0
 8006262:	d003      	beq.n	800626c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006270:	2b00      	cmp	r3, #0
 8006272:	d032      	beq.n	80062da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d022      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2205      	movs	r2, #5
 8006284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	3301      	adds	r3, #1
 800629c:	60bb      	str	r3, [r7, #8]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d307      	bcc.n	80062b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f2      	bne.n	8006298 <HAL_DMA_IRQHandler+0x2cc>
 80062b2:	e000      	b.n	80062b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80062b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
 80062d6:	e000      	b.n	80062da <HAL_DMA_IRQHandler+0x30e>
        return;
 80062d8:	bf00      	nop
    }
  }
}
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80062fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b40      	cmp	r3, #64	@ 0x40
 800630c:	d108      	bne.n	8006320 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800631e:	e007      	b.n	8006330 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	60da      	str	r2, [r3, #12]
}
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	3b10      	subs	r3, #16
 800634c:	4a14      	ldr	r2, [pc, #80]	@ (80063a0 <DMA_CalcBaseAndBitshift+0x64>)
 800634e:	fba2 2303 	umull	r2, r3, r2, r3
 8006352:	091b      	lsrs	r3, r3, #4
 8006354:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006356:	4a13      	ldr	r2, [pc, #76]	@ (80063a4 <DMA_CalcBaseAndBitshift+0x68>)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4413      	add	r3, r2
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b03      	cmp	r3, #3
 8006368:	d909      	bls.n	800637e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006372:	f023 0303 	bic.w	r3, r3, #3
 8006376:	1d1a      	adds	r2, r3, #4
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	659a      	str	r2, [r3, #88]	@ 0x58
 800637c:	e007      	b.n	800638e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006386:	f023 0303 	bic.w	r3, r3, #3
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	aaaaaaab 	.word	0xaaaaaaab
 80063a4:	08010254 	.word	0x08010254

080063a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d11f      	bne.n	8006402 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d856      	bhi.n	8006476 <DMA_CheckFifoParam+0xce>
 80063c8:	a201      	add	r2, pc, #4	@ (adr r2, 80063d0 <DMA_CheckFifoParam+0x28>)
 80063ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ce:	bf00      	nop
 80063d0:	080063e1 	.word	0x080063e1
 80063d4:	080063f3 	.word	0x080063f3
 80063d8:	080063e1 	.word	0x080063e1
 80063dc:	08006477 	.word	0x08006477
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d046      	beq.n	800647a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063f0:	e043      	b.n	800647a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063fa:	d140      	bne.n	800647e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006400:	e03d      	b.n	800647e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800640a:	d121      	bne.n	8006450 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b03      	cmp	r3, #3
 8006410:	d837      	bhi.n	8006482 <DMA_CheckFifoParam+0xda>
 8006412:	a201      	add	r2, pc, #4	@ (adr r2, 8006418 <DMA_CheckFifoParam+0x70>)
 8006414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006418:	08006429 	.word	0x08006429
 800641c:	0800642f 	.word	0x0800642f
 8006420:	08006429 	.word	0x08006429
 8006424:	08006441 	.word	0x08006441
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
      break;
 800642c:	e030      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006432:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d025      	beq.n	8006486 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800643e:	e022      	b.n	8006486 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006444:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006448:	d11f      	bne.n	800648a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800644e:	e01c      	b.n	800648a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d903      	bls.n	800645e <DMA_CheckFifoParam+0xb6>
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b03      	cmp	r3, #3
 800645a:	d003      	beq.n	8006464 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800645c:	e018      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	73fb      	strb	r3, [r7, #15]
      break;
 8006462:	e015      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00e      	beq.n	800648e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
      break;
 8006474:	e00b      	b.n	800648e <DMA_CheckFifoParam+0xe6>
      break;
 8006476:	bf00      	nop
 8006478:	e00a      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
      break;
 800647a:	bf00      	nop
 800647c:	e008      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
      break;
 800647e:	bf00      	nop
 8006480:	e006      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
      break;
 8006482:	bf00      	nop
 8006484:	e004      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
      break;
 8006486:	bf00      	nop
 8006488:	e002      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
      break;   
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <DMA_CheckFifoParam+0xe8>
      break;
 800648e:	bf00      	nop
    }
  } 
  
  return status; 
 8006490:	7bfb      	ldrb	r3, [r7, #15]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop

080064a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b089      	sub	sp, #36	@ 0x24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	e165      	b.n	8006788 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064bc:	2201      	movs	r2, #1
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4013      	ands	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	f040 8154 	bne.w	8006782 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d005      	beq.n	80064f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d130      	bne.n	8006554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	2203      	movs	r2, #3
 80064fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006502:	43db      	mvns	r3, r3
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	4013      	ands	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	4313      	orrs	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006528:	2201      	movs	r2, #1
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	fa02 f303 	lsl.w	r3, r2, r3
 8006530:	43db      	mvns	r3, r3
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	4013      	ands	r3, r2
 8006536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	091b      	lsrs	r3, r3, #4
 800653e:	f003 0201 	and.w	r2, r3, #1
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	4313      	orrs	r3, r2
 800654c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f003 0303 	and.w	r3, r3, #3
 800655c:	2b03      	cmp	r3, #3
 800655e:	d017      	beq.n	8006590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	2203      	movs	r2, #3
 800656c:	fa02 f303 	lsl.w	r3, r2, r3
 8006570:	43db      	mvns	r3, r3
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	4013      	ands	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	4313      	orrs	r3, r2
 8006588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d123      	bne.n	80065e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	08da      	lsrs	r2, r3, #3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	3208      	adds	r2, #8
 80065a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	220f      	movs	r2, #15
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	43db      	mvns	r3, r3
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	4013      	ands	r3, r2
 80065be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	08da      	lsrs	r2, r3, #3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3208      	adds	r2, #8
 80065de:	69b9      	ldr	r1, [r7, #24]
 80065e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	2203      	movs	r2, #3
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	43db      	mvns	r3, r3
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	4013      	ands	r3, r2
 80065fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f003 0203 	and.w	r2, r3, #3
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	fa02 f303 	lsl.w	r3, r2, r3
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	4313      	orrs	r3, r2
 8006610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 80ae 	beq.w	8006782 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	4b5d      	ldr	r3, [pc, #372]	@ (80067a0 <HAL_GPIO_Init+0x300>)
 800662c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800662e:	4a5c      	ldr	r2, [pc, #368]	@ (80067a0 <HAL_GPIO_Init+0x300>)
 8006630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006634:	6453      	str	r3, [r2, #68]	@ 0x44
 8006636:	4b5a      	ldr	r3, [pc, #360]	@ (80067a0 <HAL_GPIO_Init+0x300>)
 8006638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006642:	4a58      	ldr	r2, [pc, #352]	@ (80067a4 <HAL_GPIO_Init+0x304>)
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	089b      	lsrs	r3, r3, #2
 8006648:	3302      	adds	r3, #2
 800664a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800664e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	220f      	movs	r2, #15
 800665a:	fa02 f303 	lsl.w	r3, r2, r3
 800665e:	43db      	mvns	r3, r3
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	4013      	ands	r3, r2
 8006664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a4f      	ldr	r2, [pc, #316]	@ (80067a8 <HAL_GPIO_Init+0x308>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d025      	beq.n	80066ba <HAL_GPIO_Init+0x21a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a4e      	ldr	r2, [pc, #312]	@ (80067ac <HAL_GPIO_Init+0x30c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d01f      	beq.n	80066b6 <HAL_GPIO_Init+0x216>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a4d      	ldr	r2, [pc, #308]	@ (80067b0 <HAL_GPIO_Init+0x310>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d019      	beq.n	80066b2 <HAL_GPIO_Init+0x212>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a4c      	ldr	r2, [pc, #304]	@ (80067b4 <HAL_GPIO_Init+0x314>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <HAL_GPIO_Init+0x20e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a4b      	ldr	r2, [pc, #300]	@ (80067b8 <HAL_GPIO_Init+0x318>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00d      	beq.n	80066aa <HAL_GPIO_Init+0x20a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a4a      	ldr	r2, [pc, #296]	@ (80067bc <HAL_GPIO_Init+0x31c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d007      	beq.n	80066a6 <HAL_GPIO_Init+0x206>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a49      	ldr	r2, [pc, #292]	@ (80067c0 <HAL_GPIO_Init+0x320>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d101      	bne.n	80066a2 <HAL_GPIO_Init+0x202>
 800669e:	2306      	movs	r3, #6
 80066a0:	e00c      	b.n	80066bc <HAL_GPIO_Init+0x21c>
 80066a2:	2307      	movs	r3, #7
 80066a4:	e00a      	b.n	80066bc <HAL_GPIO_Init+0x21c>
 80066a6:	2305      	movs	r3, #5
 80066a8:	e008      	b.n	80066bc <HAL_GPIO_Init+0x21c>
 80066aa:	2304      	movs	r3, #4
 80066ac:	e006      	b.n	80066bc <HAL_GPIO_Init+0x21c>
 80066ae:	2303      	movs	r3, #3
 80066b0:	e004      	b.n	80066bc <HAL_GPIO_Init+0x21c>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e002      	b.n	80066bc <HAL_GPIO_Init+0x21c>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e000      	b.n	80066bc <HAL_GPIO_Init+0x21c>
 80066ba:	2300      	movs	r3, #0
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	f002 0203 	and.w	r2, r2, #3
 80066c2:	0092      	lsls	r2, r2, #2
 80066c4:	4093      	lsls	r3, r2
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066cc:	4935      	ldr	r1, [pc, #212]	@ (80067a4 <HAL_GPIO_Init+0x304>)
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	089b      	lsrs	r3, r3, #2
 80066d2:	3302      	adds	r3, #2
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066da:	4b3a      	ldr	r3, [pc, #232]	@ (80067c4 <HAL_GPIO_Init+0x324>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	43db      	mvns	r3, r3
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	4013      	ands	r3, r2
 80066e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066fe:	4a31      	ldr	r2, [pc, #196]	@ (80067c4 <HAL_GPIO_Init+0x324>)
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006704:	4b2f      	ldr	r3, [pc, #188]	@ (80067c4 <HAL_GPIO_Init+0x324>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	43db      	mvns	r3, r3
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	4013      	ands	r3, r2
 8006712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006728:	4a26      	ldr	r2, [pc, #152]	@ (80067c4 <HAL_GPIO_Init+0x324>)
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800672e:	4b25      	ldr	r3, [pc, #148]	@ (80067c4 <HAL_GPIO_Init+0x324>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	43db      	mvns	r3, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	4013      	ands	r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006752:	4a1c      	ldr	r2, [pc, #112]	@ (80067c4 <HAL_GPIO_Init+0x324>)
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006758:	4b1a      	ldr	r3, [pc, #104]	@ (80067c4 <HAL_GPIO_Init+0x324>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	43db      	mvns	r3, r3
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	4013      	ands	r3, r2
 8006766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800677c:	4a11      	ldr	r2, [pc, #68]	@ (80067c4 <HAL_GPIO_Init+0x324>)
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	3301      	adds	r3, #1
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	2b0f      	cmp	r3, #15
 800678c:	f67f ae96 	bls.w	80064bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	3724      	adds	r7, #36	@ 0x24
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40023800 	.word	0x40023800
 80067a4:	40013800 	.word	0x40013800
 80067a8:	40020000 	.word	0x40020000
 80067ac:	40020400 	.word	0x40020400
 80067b0:	40020800 	.word	0x40020800
 80067b4:	40020c00 	.word	0x40020c00
 80067b8:	40021000 	.word	0x40021000
 80067bc:	40021400 	.word	0x40021400
 80067c0:	40021800 	.word	0x40021800
 80067c4:	40013c00 	.word	0x40013c00

080067c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80067da:	2300      	movs	r3, #0
 80067dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	e0c7      	b.n	8006974 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067e4:	2201      	movs	r2, #1
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	4013      	ands	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	f040 80b7 	bne.w	800696e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006800:	4a62      	ldr	r2, [pc, #392]	@ (800698c <HAL_GPIO_DeInit+0x1c4>)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	089b      	lsrs	r3, r3, #2
 8006806:	3302      	adds	r3, #2
 8006808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f003 0303 	and.w	r3, r3, #3
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	220f      	movs	r2, #15
 8006818:	fa02 f303 	lsl.w	r3, r2, r3
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	4013      	ands	r3, r2
 8006820:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a5a      	ldr	r2, [pc, #360]	@ (8006990 <HAL_GPIO_DeInit+0x1c8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d025      	beq.n	8006876 <HAL_GPIO_DeInit+0xae>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a59      	ldr	r2, [pc, #356]	@ (8006994 <HAL_GPIO_DeInit+0x1cc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d01f      	beq.n	8006872 <HAL_GPIO_DeInit+0xaa>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a58      	ldr	r2, [pc, #352]	@ (8006998 <HAL_GPIO_DeInit+0x1d0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d019      	beq.n	800686e <HAL_GPIO_DeInit+0xa6>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a57      	ldr	r2, [pc, #348]	@ (800699c <HAL_GPIO_DeInit+0x1d4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <HAL_GPIO_DeInit+0xa2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a56      	ldr	r2, [pc, #344]	@ (80069a0 <HAL_GPIO_DeInit+0x1d8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00d      	beq.n	8006866 <HAL_GPIO_DeInit+0x9e>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a55      	ldr	r2, [pc, #340]	@ (80069a4 <HAL_GPIO_DeInit+0x1dc>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <HAL_GPIO_DeInit+0x9a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a54      	ldr	r2, [pc, #336]	@ (80069a8 <HAL_GPIO_DeInit+0x1e0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d101      	bne.n	800685e <HAL_GPIO_DeInit+0x96>
 800685a:	2306      	movs	r3, #6
 800685c:	e00c      	b.n	8006878 <HAL_GPIO_DeInit+0xb0>
 800685e:	2307      	movs	r3, #7
 8006860:	e00a      	b.n	8006878 <HAL_GPIO_DeInit+0xb0>
 8006862:	2305      	movs	r3, #5
 8006864:	e008      	b.n	8006878 <HAL_GPIO_DeInit+0xb0>
 8006866:	2304      	movs	r3, #4
 8006868:	e006      	b.n	8006878 <HAL_GPIO_DeInit+0xb0>
 800686a:	2303      	movs	r3, #3
 800686c:	e004      	b.n	8006878 <HAL_GPIO_DeInit+0xb0>
 800686e:	2302      	movs	r3, #2
 8006870:	e002      	b.n	8006878 <HAL_GPIO_DeInit+0xb0>
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <HAL_GPIO_DeInit+0xb0>
 8006876:	2300      	movs	r3, #0
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	f002 0203 	and.w	r2, r2, #3
 800687e:	0092      	lsls	r2, r2, #2
 8006880:	4093      	lsls	r3, r2
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	429a      	cmp	r2, r3
 8006886:	d132      	bne.n	80068ee <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006888:	4b48      	ldr	r3, [pc, #288]	@ (80069ac <HAL_GPIO_DeInit+0x1e4>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	43db      	mvns	r3, r3
 8006890:	4946      	ldr	r1, [pc, #280]	@ (80069ac <HAL_GPIO_DeInit+0x1e4>)
 8006892:	4013      	ands	r3, r2
 8006894:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006896:	4b45      	ldr	r3, [pc, #276]	@ (80069ac <HAL_GPIO_DeInit+0x1e4>)
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	43db      	mvns	r3, r3
 800689e:	4943      	ldr	r1, [pc, #268]	@ (80069ac <HAL_GPIO_DeInit+0x1e4>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80068a4:	4b41      	ldr	r3, [pc, #260]	@ (80069ac <HAL_GPIO_DeInit+0x1e4>)
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	43db      	mvns	r3, r3
 80068ac:	493f      	ldr	r1, [pc, #252]	@ (80069ac <HAL_GPIO_DeInit+0x1e4>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80068b2:	4b3e      	ldr	r3, [pc, #248]	@ (80069ac <HAL_GPIO_DeInit+0x1e4>)
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	43db      	mvns	r3, r3
 80068ba:	493c      	ldr	r1, [pc, #240]	@ (80069ac <HAL_GPIO_DeInit+0x1e4>)
 80068bc:	4013      	ands	r3, r2
 80068be:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	220f      	movs	r2, #15
 80068ca:	fa02 f303 	lsl.w	r3, r2, r3
 80068ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80068d0:	4a2e      	ldr	r2, [pc, #184]	@ (800698c <HAL_GPIO_DeInit+0x1c4>)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	089b      	lsrs	r3, r3, #2
 80068d6:	3302      	adds	r3, #2
 80068d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	43da      	mvns	r2, r3
 80068e0:	482a      	ldr	r0, [pc, #168]	@ (800698c <HAL_GPIO_DeInit+0x1c4>)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	089b      	lsrs	r3, r3, #2
 80068e6:	400a      	ands	r2, r1
 80068e8:	3302      	adds	r3, #2
 80068ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	2103      	movs	r1, #3
 80068f8:	fa01 f303 	lsl.w	r3, r1, r3
 80068fc:	43db      	mvns	r3, r3
 80068fe:	401a      	ands	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	08da      	lsrs	r2, r3, #3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3208      	adds	r2, #8
 800690c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	220f      	movs	r2, #15
 800691a:	fa02 f303 	lsl.w	r3, r2, r3
 800691e:	43db      	mvns	r3, r3
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	08d2      	lsrs	r2, r2, #3
 8006924:	4019      	ands	r1, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	3208      	adds	r2, #8
 800692a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	2103      	movs	r1, #3
 8006938:	fa01 f303 	lsl.w	r3, r1, r3
 800693c:	43db      	mvns	r3, r3
 800693e:	401a      	ands	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	2101      	movs	r1, #1
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	fa01 f303 	lsl.w	r3, r1, r3
 8006950:	43db      	mvns	r3, r3
 8006952:	401a      	ands	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	2103      	movs	r1, #3
 8006962:	fa01 f303 	lsl.w	r3, r1, r3
 8006966:	43db      	mvns	r3, r3
 8006968:	401a      	ands	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	3301      	adds	r3, #1
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2b0f      	cmp	r3, #15
 8006978:	f67f af34 	bls.w	80067e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40013800 	.word	0x40013800
 8006990:	40020000 	.word	0x40020000
 8006994:	40020400 	.word	0x40020400
 8006998:	40020800 	.word	0x40020800
 800699c:	40020c00 	.word	0x40020c00
 80069a0:	40021000 	.word	0x40021000
 80069a4:	40021400 	.word	0x40021400
 80069a8:	40021800 	.word	0x40021800
 80069ac:	40013c00 	.word	0x40013c00

080069b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	887b      	ldrh	r3, [r7, #2]
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]
 80069cc:	e001      	b.n	80069d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	807b      	strh	r3, [r7, #2]
 80069ec:	4613      	mov	r3, r2
 80069ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069f0:	787b      	ldrb	r3, [r7, #1]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069f6:	887a      	ldrh	r2, [r7, #2]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069fc:	e003      	b.n	8006a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069fe:	887b      	ldrh	r3, [r7, #2]
 8006a00:	041a      	lsls	r2, r3, #16
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	619a      	str	r2, [r3, #24]
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a24:	887a      	ldrh	r2, [r7, #2]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	041a      	lsls	r2, r3, #16
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	43d9      	mvns	r1, r3
 8006a30:	887b      	ldrh	r3, [r7, #2]
 8006a32:	400b      	ands	r3, r1
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	619a      	str	r2, [r3, #24]
}
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
	...

08006a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006a52:	4b08      	ldr	r3, [pc, #32]	@ (8006a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a54:	695a      	ldr	r2, [r3, #20]
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d006      	beq.n	8006a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a5e:	4a05      	ldr	r2, [pc, #20]	@ (8006a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a64:	88fb      	ldrh	r3, [r7, #6]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fc fbd2 	bl	8003210 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40013c00 	.word	0x40013c00

08006a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e12b      	b.n	8006ce2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fd f856 	bl	8003b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2224      	movs	r2, #36	@ 0x24
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0201 	bic.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006aca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006adc:	f002 f9d2 	bl	8008e84 <HAL_RCC_GetPCLK1Freq>
 8006ae0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	4a81      	ldr	r2, [pc, #516]	@ (8006cec <HAL_I2C_Init+0x274>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d807      	bhi.n	8006afc <HAL_I2C_Init+0x84>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4a80      	ldr	r2, [pc, #512]	@ (8006cf0 <HAL_I2C_Init+0x278>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	bf94      	ite	ls
 8006af4:	2301      	movls	r3, #1
 8006af6:	2300      	movhi	r3, #0
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	e006      	b.n	8006b0a <HAL_I2C_Init+0x92>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4a7d      	ldr	r2, [pc, #500]	@ (8006cf4 <HAL_I2C_Init+0x27c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	bf94      	ite	ls
 8006b04:	2301      	movls	r3, #1
 8006b06:	2300      	movhi	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e0e7      	b.n	8006ce2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a78      	ldr	r2, [pc, #480]	@ (8006cf8 <HAL_I2C_Init+0x280>)
 8006b16:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1a:	0c9b      	lsrs	r3, r3, #18
 8006b1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	4a6a      	ldr	r2, [pc, #424]	@ (8006cec <HAL_I2C_Init+0x274>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d802      	bhi.n	8006b4c <HAL_I2C_Init+0xd4>
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	e009      	b.n	8006b60 <HAL_I2C_Init+0xe8>
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006b52:	fb02 f303 	mul.w	r3, r2, r3
 8006b56:	4a69      	ldr	r2, [pc, #420]	@ (8006cfc <HAL_I2C_Init+0x284>)
 8006b58:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5c:	099b      	lsrs	r3, r3, #6
 8006b5e:	3301      	adds	r3, #1
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6812      	ldr	r2, [r2, #0]
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006b72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	495c      	ldr	r1, [pc, #368]	@ (8006cec <HAL_I2C_Init+0x274>)
 8006b7c:	428b      	cmp	r3, r1
 8006b7e:	d819      	bhi.n	8006bb4 <HAL_I2C_Init+0x13c>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	1e59      	subs	r1, r3, #1
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b8e:	1c59      	adds	r1, r3, #1
 8006b90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006b94:	400b      	ands	r3, r1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <HAL_I2C_Init+0x138>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1e59      	subs	r1, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ba8:	3301      	adds	r3, #1
 8006baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bae:	e051      	b.n	8006c54 <HAL_I2C_Init+0x1dc>
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	e04f      	b.n	8006c54 <HAL_I2C_Init+0x1dc>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d111      	bne.n	8006be0 <HAL_I2C_Init+0x168>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	1e58      	subs	r0, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6859      	ldr	r1, [r3, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	440b      	add	r3, r1
 8006bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bce:	3301      	adds	r3, #1
 8006bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	bf0c      	ite	eq
 8006bd8:	2301      	moveq	r3, #1
 8006bda:	2300      	movne	r3, #0
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	e012      	b.n	8006c06 <HAL_I2C_Init+0x18e>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	1e58      	subs	r0, r3, #1
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6859      	ldr	r1, [r3, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	0099      	lsls	r1, r3, #2
 8006bf0:	440b      	add	r3, r1
 8006bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	bf0c      	ite	eq
 8006c00:	2301      	moveq	r3, #1
 8006c02:	2300      	movne	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_I2C_Init+0x196>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e022      	b.n	8006c54 <HAL_I2C_Init+0x1dc>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10e      	bne.n	8006c34 <HAL_I2C_Init+0x1bc>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	1e58      	subs	r0, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6859      	ldr	r1, [r3, #4]
 8006c1e:	460b      	mov	r3, r1
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	440b      	add	r3, r1
 8006c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c28:	3301      	adds	r3, #1
 8006c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c32:	e00f      	b.n	8006c54 <HAL_I2C_Init+0x1dc>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	1e58      	subs	r0, r3, #1
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6859      	ldr	r1, [r3, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	440b      	add	r3, r1
 8006c42:	0099      	lsls	r1, r3, #2
 8006c44:	440b      	add	r3, r1
 8006c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	6809      	ldr	r1, [r1, #0]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69da      	ldr	r2, [r3, #28]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006c82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6911      	ldr	r1, [r2, #16]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	68d2      	ldr	r2, [r2, #12]
 8006c8e:	4311      	orrs	r1, r2
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6812      	ldr	r2, [r2, #0]
 8006c94:	430b      	orrs	r3, r1
 8006c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	695a      	ldr	r2, [r3, #20]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	431a      	orrs	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0201 	orr.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	000186a0 	.word	0x000186a0
 8006cf0:	001e847f 	.word	0x001e847f
 8006cf4:	003d08ff 	.word	0x003d08ff
 8006cf8:	431bde83 	.word	0x431bde83
 8006cfc:	10624dd3 	.word	0x10624dd3

08006d00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08c      	sub	sp, #48	@ 0x30
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	4608      	mov	r0, r1
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	4603      	mov	r3, r0
 8006d10:	817b      	strh	r3, [r7, #10]
 8006d12:	460b      	mov	r3, r1
 8006d14:	813b      	strh	r3, [r7, #8]
 8006d16:	4613      	mov	r3, r2
 8006d18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d1a:	f7fd fb9d 	bl	8004458 <HAL_GetTick>
 8006d1e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	f040 8208 	bne.w	800713e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	2319      	movs	r3, #25
 8006d34:	2201      	movs	r2, #1
 8006d36:	497b      	ldr	r1, [pc, #492]	@ (8006f24 <HAL_I2C_Mem_Read+0x224>)
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 faef 	bl	800731c <I2C_WaitOnFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006d44:	2302      	movs	r3, #2
 8006d46:	e1fb      	b.n	8007140 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <HAL_I2C_Mem_Read+0x56>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e1f4      	b.n	8007140 <HAL_I2C_Mem_Read+0x440>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d007      	beq.n	8006d7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2222      	movs	r2, #34	@ 0x22
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2240      	movs	r2, #64	@ 0x40
 8006d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006da6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4a5b      	ldr	r2, [pc, #364]	@ (8006f28 <HAL_I2C_Mem_Read+0x228>)
 8006dbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006dbe:	88f8      	ldrh	r0, [r7, #6]
 8006dc0:	893a      	ldrh	r2, [r7, #8]
 8006dc2:	8979      	ldrh	r1, [r7, #10]
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	9301      	str	r3, [sp, #4]
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	4603      	mov	r3, r0
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 f9bc 	bl	800714c <I2C_RequestMemoryRead>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e1b0      	b.n	8007140 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d113      	bne.n	8006e0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006de6:	2300      	movs	r3, #0
 8006de8:	623b      	str	r3, [r7, #32]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	623b      	str	r3, [r7, #32]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	623b      	str	r3, [r7, #32]
 8006dfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	e184      	b.n	8007118 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d11b      	bne.n	8006e4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e26:	2300      	movs	r3, #0
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	e164      	b.n	8007118 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d11b      	bne.n	8006e8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e76:	2300      	movs	r3, #0
 8006e78:	61bb      	str	r3, [r7, #24]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	61bb      	str	r3, [r7, #24]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	e144      	b.n	8007118 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e8e:	2300      	movs	r3, #0
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ea4:	e138      	b.n	8007118 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	f200 80f1 	bhi.w	8007092 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d123      	bne.n	8006f00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 fb44 	bl	800754a <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e139      	b.n	8007140 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691a      	ldr	r2, [r3, #16]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006efe:	e10b      	b.n	8007118 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d14e      	bne.n	8006fa6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0e:	2200      	movs	r2, #0
 8006f10:	4906      	ldr	r1, [pc, #24]	@ (8006f2c <HAL_I2C_Mem_Read+0x22c>)
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 fa02 	bl	800731c <I2C_WaitOnFlagUntilTimeout>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d008      	beq.n	8006f30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e10e      	b.n	8007140 <HAL_I2C_Mem_Read+0x440>
 8006f22:	bf00      	nop
 8006f24:	00100002 	.word	0x00100002
 8006f28:	ffff0000 	.word	0xffff0000
 8006f2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691a      	ldr	r2, [r3, #16]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7c:	b2d2      	uxtb	r2, r2
 8006f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006fa4:	e0b8      	b.n	8007118 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fac:	2200      	movs	r2, #0
 8006fae:	4966      	ldr	r1, [pc, #408]	@ (8007148 <HAL_I2C_Mem_Read+0x448>)
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f9b3 	bl	800731c <I2C_WaitOnFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e0bf      	b.n	8007140 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	691a      	ldr	r2, [r3, #16]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fec:	3b01      	subs	r3, #1
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007008:	2200      	movs	r2, #0
 800700a:	494f      	ldr	r1, [pc, #316]	@ (8007148 <HAL_I2C_Mem_Read+0x448>)
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f985 	bl	800731c <I2C_WaitOnFlagUntilTimeout>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e091      	b.n	8007140 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800702a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691a      	ldr	r2, [r3, #16]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007048:	3b01      	subs	r3, #1
 800704a:	b29a      	uxth	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007054:	b29b      	uxth	r3, r3
 8007056:	3b01      	subs	r3, #1
 8007058:	b29a      	uxth	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	b2d2      	uxtb	r2, r2
 800706a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800707a:	3b01      	subs	r3, #1
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007090:	e042      	b.n	8007118 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007094:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 fa57 	bl	800754a <I2C_WaitOnRXNEFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e04c      	b.n	8007140 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b0:	b2d2      	uxtb	r2, r2
 80070b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d118      	bne.n	8007118 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	691a      	ldr	r2, [r3, #16]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f0:	b2d2      	uxtb	r2, r2
 80070f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007102:	3b01      	subs	r3, #1
 8007104:	b29a      	uxth	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710e:	b29b      	uxth	r3, r3
 8007110:	3b01      	subs	r3, #1
 8007112:	b29a      	uxth	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800711c:	2b00      	cmp	r3, #0
 800711e:	f47f aec2 	bne.w	8006ea6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2220      	movs	r2, #32
 8007126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	e000      	b.n	8007140 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800713e:	2302      	movs	r3, #2
  }
}
 8007140:	4618      	mov	r0, r3
 8007142:	3728      	adds	r7, #40	@ 0x28
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	00010004 	.word	0x00010004

0800714c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af02      	add	r7, sp, #8
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	4608      	mov	r0, r1
 8007156:	4611      	mov	r1, r2
 8007158:	461a      	mov	r2, r3
 800715a:	4603      	mov	r3, r0
 800715c:	817b      	strh	r3, [r7, #10]
 800715e:	460b      	mov	r3, r1
 8007160:	813b      	strh	r3, [r7, #8]
 8007162:	4613      	mov	r3, r2
 8007164:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007174:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007184:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	2200      	movs	r2, #0
 800718e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 f8c2 	bl	800731c <I2C_WaitOnFlagUntilTimeout>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00d      	beq.n	80071ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ac:	d103      	bne.n	80071b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e0aa      	b.n	8007310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071ba:	897b      	ldrh	r3, [r7, #10]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80071c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071cc:	6a3a      	ldr	r2, [r7, #32]
 80071ce:	4952      	ldr	r1, [pc, #328]	@ (8007318 <I2C_RequestMemoryRead+0x1cc>)
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f8fa 	bl	80073ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e097      	b.n	8007310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f8:	6a39      	ldr	r1, [r7, #32]
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 f964 	bl	80074c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00d      	beq.n	8007222 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720a:	2b04      	cmp	r3, #4
 800720c:	d107      	bne.n	800721e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800721c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e076      	b.n	8007310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007222:	88fb      	ldrh	r3, [r7, #6]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d105      	bne.n	8007234 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007228:	893b      	ldrh	r3, [r7, #8]
 800722a:	b2da      	uxtb	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	611a      	str	r2, [r3, #16]
 8007232:	e021      	b.n	8007278 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007234:	893b      	ldrh	r3, [r7, #8]
 8007236:	0a1b      	lsrs	r3, r3, #8
 8007238:	b29b      	uxth	r3, r3
 800723a:	b2da      	uxtb	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007244:	6a39      	ldr	r1, [r7, #32]
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 f93e 	bl	80074c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00d      	beq.n	800726e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007256:	2b04      	cmp	r3, #4
 8007258:	d107      	bne.n	800726a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007268:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e050      	b.n	8007310 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800726e:	893b      	ldrh	r3, [r7, #8]
 8007270:	b2da      	uxtb	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800727a:	6a39      	ldr	r1, [r7, #32]
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 f923 	bl	80074c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00d      	beq.n	80072a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728c:	2b04      	cmp	r3, #4
 800728e:	d107      	bne.n	80072a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800729e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e035      	b.n	8007310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 f82b 	bl	800731c <I2C_WaitOnFlagUntilTimeout>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00d      	beq.n	80072e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072da:	d103      	bne.n	80072e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e013      	b.n	8007310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80072e8:	897b      	ldrh	r3, [r7, #10]
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	f043 0301 	orr.w	r3, r3, #1
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fa:	6a3a      	ldr	r2, [r7, #32]
 80072fc:	4906      	ldr	r1, [pc, #24]	@ (8007318 <I2C_RequestMemoryRead+0x1cc>)
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f863 	bl	80073ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e000      	b.n	8007310 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	00010002 	.word	0x00010002

0800731c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	603b      	str	r3, [r7, #0]
 8007328:	4613      	mov	r3, r2
 800732a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800732c:	e025      	b.n	800737a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007334:	d021      	beq.n	800737a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007336:	f7fd f88f 	bl	8004458 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d302      	bcc.n	800734c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d116      	bne.n	800737a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2220      	movs	r2, #32
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	f043 0220 	orr.w	r2, r3, #32
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e023      	b.n	80073c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	0c1b      	lsrs	r3, r3, #16
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b01      	cmp	r3, #1
 8007382:	d10d      	bne.n	80073a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	43da      	mvns	r2, r3
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	4013      	ands	r3, r2
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	bf0c      	ite	eq
 8007396:	2301      	moveq	r3, #1
 8007398:	2300      	movne	r3, #0
 800739a:	b2db      	uxtb	r3, r3
 800739c:	461a      	mov	r2, r3
 800739e:	e00c      	b.n	80073ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	43da      	mvns	r2, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4013      	ands	r3, r2
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	bf0c      	ite	eq
 80073b2:	2301      	moveq	r3, #1
 80073b4:	2300      	movne	r3, #0
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	461a      	mov	r2, r3
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d0b6      	beq.n	800732e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	607a      	str	r2, [r7, #4]
 80073d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073d8:	e051      	b.n	800747e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073e8:	d123      	bne.n	8007432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007402:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2220      	movs	r2, #32
 800740e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741e:	f043 0204 	orr.w	r2, r3, #4
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e046      	b.n	80074c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d021      	beq.n	800747e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800743a:	f7fd f80d 	bl	8004458 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	429a      	cmp	r2, r3
 8007448:	d302      	bcc.n	8007450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d116      	bne.n	800747e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2220      	movs	r2, #32
 800745a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746a:	f043 0220 	orr.w	r2, r3, #32
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e020      	b.n	80074c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	0c1b      	lsrs	r3, r3, #16
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b01      	cmp	r3, #1
 8007486:	d10c      	bne.n	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	43da      	mvns	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4013      	ands	r3, r2
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	bf14      	ite	ne
 800749a:	2301      	movne	r3, #1
 800749c:	2300      	moveq	r3, #0
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	e00b      	b.n	80074ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	43da      	mvns	r2, r3
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	4013      	ands	r3, r2
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	bf14      	ite	ne
 80074b4:	2301      	movne	r3, #1
 80074b6:	2300      	moveq	r3, #0
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d18d      	bne.n	80073da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074d4:	e02d      	b.n	8007532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 f88d 	bl	80075f6 <I2C_IsAcknowledgeFailed>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e02d      	b.n	8007542 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ec:	d021      	beq.n	8007532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ee:	f7fc ffb3 	bl	8004458 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d302      	bcc.n	8007504 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d116      	bne.n	8007532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2220      	movs	r2, #32
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751e:	f043 0220 	orr.w	r2, r3, #32
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e007      	b.n	8007542 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753c:	2b80      	cmp	r3, #128	@ 0x80
 800753e:	d1ca      	bne.n	80074d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007556:	e042      	b.n	80075de <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	f003 0310 	and.w	r3, r3, #16
 8007562:	2b10      	cmp	r3, #16
 8007564:	d119      	bne.n	800759a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f06f 0210 	mvn.w	r2, #16
 800756e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2220      	movs	r2, #32
 800757a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e029      	b.n	80075ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800759a:	f7fc ff5d 	bl	8004458 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d302      	bcc.n	80075b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d116      	bne.n	80075de <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ca:	f043 0220 	orr.w	r2, r3, #32
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e007      	b.n	80075ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e8:	2b40      	cmp	r3, #64	@ 0x40
 80075ea:	d1b5      	bne.n	8007558 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800760c:	d11b      	bne.n	8007646 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007616:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2220      	movs	r2, #32
 8007622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007632:	f043 0204 	orr.w	r2, r3, #4
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007656:	b08f      	sub	sp, #60	@ 0x3c
 8007658:	af0a      	add	r7, sp, #40	@ 0x28
 800765a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e116      	b.n	8007894 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d106      	bne.n	8007686 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f008 f91d 	bl	800f8c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2203      	movs	r2, #3
 800768a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f004 fc2e 	bl	800bf06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	687e      	ldr	r6, [r7, #4]
 80076b2:	466d      	mov	r5, sp
 80076b4:	f106 0410 	add.w	r4, r6, #16
 80076b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80076c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80076c8:	1d33      	adds	r3, r6, #4
 80076ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076cc:	6838      	ldr	r0, [r7, #0]
 80076ce:	f004 fb05 	bl	800bcdc <USB_CoreInit>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e0d7      	b.n	8007894 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2100      	movs	r1, #0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f004 fc1c 	bl	800bf28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
 80076f4:	e04a      	b.n	800778c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80076f6:	7bfa      	ldrb	r2, [r7, #15]
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	4613      	mov	r3, r2
 80076fc:	00db      	lsls	r3, r3, #3
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	333d      	adds	r3, #61	@ 0x3d
 8007706:	2201      	movs	r2, #1
 8007708:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800770a:	7bfa      	ldrb	r2, [r7, #15]
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	4613      	mov	r3, r2
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	440b      	add	r3, r1
 8007718:	333c      	adds	r3, #60	@ 0x3c
 800771a:	7bfa      	ldrb	r2, [r7, #15]
 800771c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800771e:	7bfa      	ldrb	r2, [r7, #15]
 8007720:	7bfb      	ldrb	r3, [r7, #15]
 8007722:	b298      	uxth	r0, r3
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	4613      	mov	r3, r2
 8007728:	00db      	lsls	r3, r3, #3
 800772a:	4413      	add	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	440b      	add	r3, r1
 8007730:	3344      	adds	r3, #68	@ 0x44
 8007732:	4602      	mov	r2, r0
 8007734:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007736:	7bfa      	ldrb	r2, [r7, #15]
 8007738:	6879      	ldr	r1, [r7, #4]
 800773a:	4613      	mov	r3, r2
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	440b      	add	r3, r1
 8007744:	3340      	adds	r3, #64	@ 0x40
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800774a:	7bfa      	ldrb	r2, [r7, #15]
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	440b      	add	r3, r1
 8007758:	3348      	adds	r3, #72	@ 0x48
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800775e:	7bfa      	ldrb	r2, [r7, #15]
 8007760:	6879      	ldr	r1, [r7, #4]
 8007762:	4613      	mov	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	440b      	add	r3, r1
 800776c:	334c      	adds	r3, #76	@ 0x4c
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007772:	7bfa      	ldrb	r2, [r7, #15]
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	3354      	adds	r3, #84	@ 0x54
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	3301      	adds	r3, #1
 800778a:	73fb      	strb	r3, [r7, #15]
 800778c:	7bfa      	ldrb	r2, [r7, #15]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	429a      	cmp	r2, r3
 8007794:	d3af      	bcc.n	80076f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]
 800779a:	e044      	b.n	8007826 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800779c:	7bfa      	ldrb	r2, [r7, #15]
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	4613      	mov	r3, r2
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	440b      	add	r3, r1
 80077aa:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80077b2:	7bfa      	ldrb	r2, [r7, #15]
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	4613      	mov	r3, r2
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	4413      	add	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	440b      	add	r3, r1
 80077c0:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80077c4:	7bfa      	ldrb	r2, [r7, #15]
 80077c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80077c8:	7bfa      	ldrb	r2, [r7, #15]
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	4613      	mov	r3, r2
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	440b      	add	r3, r1
 80077d6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80077da:	2200      	movs	r2, #0
 80077dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80077de:	7bfa      	ldrb	r2, [r7, #15]
 80077e0:	6879      	ldr	r1, [r7, #4]
 80077e2:	4613      	mov	r3, r2
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	440b      	add	r3, r1
 80077ec:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80077f4:	7bfa      	ldrb	r2, [r7, #15]
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	4613      	mov	r3, r2
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	440b      	add	r3, r1
 8007802:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800780a:	7bfa      	ldrb	r2, [r7, #15]
 800780c:	6879      	ldr	r1, [r7, #4]
 800780e:	4613      	mov	r3, r2
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	440b      	add	r3, r1
 8007818:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	3301      	adds	r3, #1
 8007824:	73fb      	strb	r3, [r7, #15]
 8007826:	7bfa      	ldrb	r2, [r7, #15]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	429a      	cmp	r2, r3
 800782e:	d3b5      	bcc.n	800779c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	603b      	str	r3, [r7, #0]
 8007836:	687e      	ldr	r6, [r7, #4]
 8007838:	466d      	mov	r5, sp
 800783a:	f106 0410 	add.w	r4, r6, #16
 800783e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007846:	e894 0003 	ldmia.w	r4, {r0, r1}
 800784a:	e885 0003 	stmia.w	r5, {r0, r1}
 800784e:	1d33      	adds	r3, r6, #4
 8007850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007852:	6838      	ldr	r0, [r7, #0]
 8007854:	f004 fbb4 	bl	800bfc0 <USB_DevInit>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2202      	movs	r2, #2
 8007862:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e014      	b.n	8007894 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787e:	2b01      	cmp	r3, #1
 8007880:	d102      	bne.n	8007888 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 f98c 	bl	8008ba0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4618      	mov	r0, r3
 800788e:	f005 fcf6 	bl	800d27e <USB_DevDisconnect>

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800789c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_PCD_Start+0x1c>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e020      	b.n	80078fa <HAL_PCD_Start+0x5e>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d109      	bne.n	80078dc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d005      	beq.n	80078dc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f004 faff 	bl	800bee4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f005 fca6 	bl	800d23c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007902:	b590      	push	{r4, r7, lr}
 8007904:	b08d      	sub	sp, #52	@ 0x34
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	f005 fd64 	bl	800d3e6 <USB_GetMode>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	f040 84b7 	bne.w	8008294 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4618      	mov	r0, r3
 800792c:	f005 fcc8 	bl	800d2c0 <USB_ReadInterrupts>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 84ad 	beq.w	8008292 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	0a1b      	lsrs	r3, r3, #8
 8007942:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4618      	mov	r0, r3
 8007952:	f005 fcb5 	bl	800d2c0 <USB_ReadInterrupts>
 8007956:	4603      	mov	r3, r0
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b02      	cmp	r3, #2
 800795e:	d107      	bne.n	8007970 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	695a      	ldr	r2, [r3, #20]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f002 0202 	and.w	r2, r2, #2
 800796e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	f005 fca3 	bl	800d2c0 <USB_ReadInterrupts>
 800797a:	4603      	mov	r3, r0
 800797c:	f003 0310 	and.w	r3, r3, #16
 8007980:	2b10      	cmp	r3, #16
 8007982:	d161      	bne.n	8007a48 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	699a      	ldr	r2, [r3, #24]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0210 	bic.w	r2, r2, #16
 8007992:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f003 020f 	and.w	r2, r3, #15
 80079a0:	4613      	mov	r3, r2
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	4413      	add	r3, r2
 80079b0:	3304      	adds	r3, #4
 80079b2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	0c5b      	lsrs	r3, r3, #17
 80079b8:	f003 030f 	and.w	r3, r3, #15
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d124      	bne.n	8007a0a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80079c6:	4013      	ands	r3, r2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d035      	beq.n	8007a38 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	091b      	lsrs	r3, r3, #4
 80079d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80079d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079da:	b29b      	uxth	r3, r3
 80079dc:	461a      	mov	r2, r3
 80079de:	6a38      	ldr	r0, [r7, #32]
 80079e0:	f005 fada 	bl	800cf98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	091b      	lsrs	r3, r3, #4
 80079ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079f0:	441a      	add	r2, r3
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	6a1a      	ldr	r2, [r3, #32]
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	091b      	lsrs	r3, r3, #4
 80079fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a02:	441a      	add	r2, r3
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	621a      	str	r2, [r3, #32]
 8007a08:	e016      	b.n	8007a38 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	0c5b      	lsrs	r3, r3, #17
 8007a0e:	f003 030f 	and.w	r3, r3, #15
 8007a12:	2b06      	cmp	r3, #6
 8007a14:	d110      	bne.n	8007a38 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007a1c:	2208      	movs	r2, #8
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6a38      	ldr	r0, [r7, #32]
 8007a22:	f005 fab9 	bl	800cf98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	6a1a      	ldr	r2, [r3, #32]
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	091b      	lsrs	r3, r3, #4
 8007a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a32:	441a      	add	r2, r3
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0210 	orr.w	r2, r2, #16
 8007a46:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f005 fc37 	bl	800d2c0 <USB_ReadInterrupts>
 8007a52:	4603      	mov	r3, r0
 8007a54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a58:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007a5c:	f040 80a7 	bne.w	8007bae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f005 fc3c 	bl	800d2e6 <USB_ReadDevAllOutEpInterrupt>
 8007a6e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007a70:	e099      	b.n	8007ba6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 808e 	beq.w	8007b9a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a84:	b2d2      	uxtb	r2, r2
 8007a86:	4611      	mov	r1, r2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f005 fc60 	bl	800d34e <USB_ReadDevOutEPInterrupt>
 8007a8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00c      	beq.n	8007ab4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007aac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fef0 	bl	8008894 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f003 0308 	and.w	r3, r3, #8
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00c      	beq.n	8007ad8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aca:	461a      	mov	r2, r3
 8007acc:	2308      	movs	r3, #8
 8007ace:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007ad0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 ffc6 	bl	8008a64 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f003 0310 	and.w	r3, r3, #16
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d008      	beq.n	8007af4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aee:	461a      	mov	r2, r3
 8007af0:	2310      	movs	r3, #16
 8007af2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d030      	beq.n	8007b60 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b06:	2b80      	cmp	r3, #128	@ 0x80
 8007b08:	d109      	bne.n	8007b1e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b1c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b20:	4613      	mov	r3, r2
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	4413      	add	r3, r2
 8007b30:	3304      	adds	r3, #4
 8007b32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	78db      	ldrb	r3, [r3, #3]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d108      	bne.n	8007b4e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f007 ffed 	bl	800fb28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d008      	beq.n	8007b7c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b76:	461a      	mov	r2, r3
 8007b78:	2320      	movs	r3, #32
 8007b7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b92:	461a      	mov	r2, r3
 8007b94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007b98:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba2:	085b      	lsrs	r3, r3, #1
 8007ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f47f af62 	bne.w	8007a72 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f005 fb84 	bl	800d2c0 <USB_ReadInterrupts>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007bc2:	f040 80db 	bne.w	8007d7c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f005 fba5 	bl	800d31a <USB_ReadDevAllInEpInterrupt>
 8007bd0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007bd6:	e0cd      	b.n	8007d74 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 80c2 	beq.w	8007d68 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	4611      	mov	r1, r2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f005 fbcb 	bl	800d38a <USB_ReadDevInEPInterrupt>
 8007bf4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d057      	beq.n	8007cb0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	f003 030f 	and.w	r3, r3, #15
 8007c06:	2201      	movs	r2, #1
 8007c08:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	69f9      	ldr	r1, [r7, #28]
 8007c1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c20:	4013      	ands	r3, r2
 8007c22:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c30:	461a      	mov	r2, r3
 8007c32:	2301      	movs	r3, #1
 8007c34:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d132      	bne.n	8007ca4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c42:	4613      	mov	r3, r2
 8007c44:	00db      	lsls	r3, r3, #3
 8007c46:	4413      	add	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	440b      	add	r3, r1
 8007c4c:	334c      	adds	r3, #76	@ 0x4c
 8007c4e:	6819      	ldr	r1, [r3, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c54:	4613      	mov	r3, r2
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4403      	add	r3, r0
 8007c5e:	3348      	adds	r3, #72	@ 0x48
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4419      	add	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c68:	4613      	mov	r3, r2
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4403      	add	r3, r0
 8007c72:	334c      	adds	r3, #76	@ 0x4c
 8007c74:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d113      	bne.n	8007ca4 <HAL_PCD_IRQHandler+0x3a2>
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c80:	4613      	mov	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	3354      	adds	r3, #84	@ 0x54
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d108      	bne.n	8007ca4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6818      	ldr	r0, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	f005 fbd2 	bl	800d448 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f007 feb7 	bl	800fa1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f003 0308 	and.w	r3, r3, #8
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d008      	beq.n	8007ccc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	2308      	movs	r3, #8
 8007cca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	f003 0310 	and.w	r3, r3, #16
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d008      	beq.n	8007ce8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	2310      	movs	r3, #16
 8007ce6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d008      	beq.n	8007d04 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cfe:	461a      	mov	r2, r3
 8007d00:	2340      	movs	r3, #64	@ 0x40
 8007d02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d023      	beq.n	8007d56 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007d0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d10:	6a38      	ldr	r0, [r7, #32]
 8007d12:	f004 fab3 	bl	800c27c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d18:	4613      	mov	r3, r2
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	3338      	adds	r3, #56	@ 0x38
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	4413      	add	r3, r2
 8007d26:	3304      	adds	r3, #4
 8007d28:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	78db      	ldrb	r3, [r3, #3]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d108      	bne.n	8007d44 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2200      	movs	r2, #0
 8007d36:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f007 ff04 	bl	800fb4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d50:	461a      	mov	r2, r3
 8007d52:	2302      	movs	r3, #2
 8007d54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007d60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fd08 	bl	8008778 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d70:	085b      	lsrs	r3, r3, #1
 8007d72:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f47f af2e 	bne.w	8007bd8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f005 fa9d 	bl	800d2c0 <USB_ReadInterrupts>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d90:	d122      	bne.n	8007dd8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	69fa      	ldr	r2, [r7, #28]
 8007d9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007da0:	f023 0301 	bic.w	r3, r3, #1
 8007da4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d108      	bne.n	8007dc2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007db8:	2100      	movs	r1, #0
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 ff14 	bl	8008be8 <HAL_PCDEx_LPM_Callback>
 8007dc0:	e002      	b.n	8007dc8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f007 fea2 	bl	800fb0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695a      	ldr	r2, [r3, #20]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f005 fa6f 	bl	800d2c0 <USB_ReadInterrupts>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dec:	d112      	bne.n	8007e14 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d102      	bne.n	8007e04 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f007 fe5e 	bl	800fac0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695a      	ldr	r2, [r3, #20]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007e12:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f005 fa51 	bl	800d2c0 <USB_ReadInterrupts>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e28:	d121      	bne.n	8007e6e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	695a      	ldr	r2, [r3, #20]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007e38:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d111      	bne.n	8007e68 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e52:	089b      	lsrs	r3, r3, #2
 8007e54:	f003 020f 	and.w	r2, r3, #15
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007e5e:	2101      	movs	r1, #1
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fec1 	bl	8008be8 <HAL_PCDEx_LPM_Callback>
 8007e66:	e002      	b.n	8007e6e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f007 fe29 	bl	800fac0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f005 fa24 	bl	800d2c0 <USB_ReadInterrupts>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e82:	f040 80b7 	bne.w	8007ff4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e94:	f023 0301 	bic.w	r3, r3, #1
 8007e98:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2110      	movs	r1, #16
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f004 f9eb 	bl	800c27c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eaa:	e046      	b.n	8007f3a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ebe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ed0:	0151      	lsls	r1, r2, #5
 8007ed2:	69fa      	ldr	r2, [r7, #28]
 8007ed4:	440a      	add	r2, r1
 8007ed6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ede:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eec:	461a      	mov	r2, r3
 8007eee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ef2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f04:	0151      	lsls	r1, r2, #5
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	440a      	add	r2, r1
 8007f0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f24:	0151      	lsls	r1, r2, #5
 8007f26:	69fa      	ldr	r2, [r7, #28]
 8007f28:	440a      	add	r2, r1
 8007f2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f32:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f36:	3301      	adds	r3, #1
 8007f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d3b3      	bcc.n	8007eac <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f4a:	69db      	ldr	r3, [r3, #28]
 8007f4c:	69fa      	ldr	r2, [r7, #28]
 8007f4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f52:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007f56:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d016      	beq.n	8007f8e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f70:	f043 030b 	orr.w	r3, r3, #11
 8007f74:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f80:	69fa      	ldr	r2, [r7, #28]
 8007f82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f86:	f043 030b 	orr.w	r3, r3, #11
 8007f8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8007f8c:	e015      	b.n	8007fba <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007fa0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007fa4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	69fa      	ldr	r2, [r7, #28]
 8007fb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fb4:	f043 030b 	orr.w	r3, r3, #11
 8007fb8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fc8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007fcc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f005 fa32 	bl	800d448 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	695a      	ldr	r2, [r3, #20]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007ff2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f005 f961 	bl	800d2c0 <USB_ReadInterrupts>
 8007ffe:	4603      	mov	r3, r0
 8008000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008008:	d124      	bne.n	8008054 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f005 f9f7 	bl	800d402 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4618      	mov	r0, r3
 800801a:	f004 f9ac 	bl	800c376 <USB_GetDevSpeed>
 800801e:	4603      	mov	r3, r0
 8008020:	461a      	mov	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681c      	ldr	r4, [r3, #0]
 800802a:	f000 ff1f 	bl	8008e6c <HAL_RCC_GetHCLKFreq>
 800802e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008034:	b2db      	uxtb	r3, r3
 8008036:	461a      	mov	r2, r3
 8008038:	4620      	mov	r0, r4
 800803a:	f003 feb1 	bl	800bda0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f007 fd15 	bl	800fa6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695a      	ldr	r2, [r3, #20]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008052:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4618      	mov	r0, r3
 800805a:	f005 f931 	bl	800d2c0 <USB_ReadInterrupts>
 800805e:	4603      	mov	r3, r0
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	2b08      	cmp	r3, #8
 8008066:	d10a      	bne.n	800807e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f007 fcf2 	bl	800fa52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695a      	ldr	r2, [r3, #20]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f002 0208 	and.w	r2, r2, #8
 800807c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f005 f91c 	bl	800d2c0 <USB_ReadInterrupts>
 8008088:	4603      	mov	r3, r0
 800808a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800808e:	2b80      	cmp	r3, #128	@ 0x80
 8008090:	d122      	bne.n	80080d8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800809a:	6a3b      	ldr	r3, [r7, #32]
 800809c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800809e:	2301      	movs	r3, #1
 80080a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80080a2:	e014      	b.n	80080ce <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80080a4:	6879      	ldr	r1, [r7, #4]
 80080a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080a8:	4613      	mov	r3, r2
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d105      	bne.n	80080c8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80080bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fb27 	bl	8008716 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ca:	3301      	adds	r3, #1
 80080cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d3e5      	bcc.n	80080a4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4618      	mov	r0, r3
 80080de:	f005 f8ef 	bl	800d2c0 <USB_ReadInterrupts>
 80080e2:	4603      	mov	r3, r0
 80080e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080ec:	d13b      	bne.n	8008166 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080ee:	2301      	movs	r3, #1
 80080f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80080f2:	e02b      	b.n	800814c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80080f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008108:	4613      	mov	r3, r2
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	440b      	add	r3, r1
 8008112:	3340      	adds	r3, #64	@ 0x40
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d115      	bne.n	8008146 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800811a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800811c:	2b00      	cmp	r3, #0
 800811e:	da12      	bge.n	8008146 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008124:	4613      	mov	r3, r2
 8008126:	00db      	lsls	r3, r3, #3
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	440b      	add	r3, r1
 800812e:	333f      	adds	r3, #63	@ 0x3f
 8008130:	2201      	movs	r2, #1
 8008132:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800813c:	b2db      	uxtb	r3, r3
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fae8 	bl	8008716 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008148:	3301      	adds	r3, #1
 800814a:	627b      	str	r3, [r7, #36]	@ 0x24
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008152:	429a      	cmp	r2, r3
 8008154:	d3ce      	bcc.n	80080f4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	695a      	ldr	r2, [r3, #20]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008164:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4618      	mov	r0, r3
 800816c:	f005 f8a8 	bl	800d2c0 <USB_ReadInterrupts>
 8008170:	4603      	mov	r3, r0
 8008172:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008176:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800817a:	d155      	bne.n	8008228 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800817c:	2301      	movs	r3, #1
 800817e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008180:	e045      	b.n	800820e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008196:	4613      	mov	r3, r2
 8008198:	00db      	lsls	r3, r3, #3
 800819a:	4413      	add	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	440b      	add	r3, r1
 80081a0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d12e      	bne.n	8008208 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80081aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	da2b      	bge.n	8008208 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80081bc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d121      	bne.n	8008208 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081c8:	4613      	mov	r3, r2
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	4413      	add	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	440b      	add	r3, r1
 80081d2:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80081d6:	2201      	movs	r2, #1
 80081d8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80081da:	6a3b      	ldr	r3, [r7, #32]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10a      	bne.n	8008208 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008200:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008204:	6053      	str	r3, [r2, #4]
            break;
 8008206:	e007      	b.n	8008218 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820a:	3301      	adds	r3, #1
 800820c:	627b      	str	r3, [r7, #36]	@ 0x24
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008214:	429a      	cmp	r2, r3
 8008216:	d3b4      	bcc.n	8008182 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	695a      	ldr	r2, [r3, #20]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008226:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4618      	mov	r0, r3
 800822e:	f005 f847 	bl	800d2c0 <USB_ReadInterrupts>
 8008232:	4603      	mov	r3, r0
 8008234:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800823c:	d10a      	bne.n	8008254 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f007 fc96 	bl	800fb70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695a      	ldr	r2, [r3, #20]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008252:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4618      	mov	r0, r3
 800825a:	f005 f831 	bl	800d2c0 <USB_ReadInterrupts>
 800825e:	4603      	mov	r3, r0
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	2b04      	cmp	r3, #4
 8008266:	d115      	bne.n	8008294 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	f003 0304 	and.w	r3, r3, #4
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f007 fc86 	bl	800fb8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6859      	ldr	r1, [r3, #4]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	430a      	orrs	r2, r1
 800828e:	605a      	str	r2, [r3, #4]
 8008290:	e000      	b.n	8008294 <HAL_PCD_IRQHandler+0x992>
      return;
 8008292:	bf00      	nop
    }
  }
}
 8008294:	3734      	adds	r7, #52	@ 0x34
 8008296:	46bd      	mov	sp, r7
 8008298:	bd90      	pop	{r4, r7, pc}

0800829a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	460b      	mov	r3, r1
 80082a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d101      	bne.n	80082b4 <HAL_PCD_SetAddress+0x1a>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e013      	b.n	80082dc <HAL_PCD_SetAddress+0x42>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	78fa      	ldrb	r2, [r7, #3]
 80082c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	78fa      	ldrb	r2, [r7, #3]
 80082ca:	4611      	mov	r1, r2
 80082cc:	4618      	mov	r0, r3
 80082ce:	f004 ff8f 	bl	800d1f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	4608      	mov	r0, r1
 80082ee:	4611      	mov	r1, r2
 80082f0:	461a      	mov	r2, r3
 80082f2:	4603      	mov	r3, r0
 80082f4:	70fb      	strb	r3, [r7, #3]
 80082f6:	460b      	mov	r3, r1
 80082f8:	803b      	strh	r3, [r7, #0]
 80082fa:	4613      	mov	r3, r2
 80082fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008306:	2b00      	cmp	r3, #0
 8008308:	da0f      	bge.n	800832a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800830a:	78fb      	ldrb	r3, [r7, #3]
 800830c:	f003 020f 	and.w	r2, r3, #15
 8008310:	4613      	mov	r3, r2
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	4413      	add	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	3338      	adds	r3, #56	@ 0x38
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	4413      	add	r3, r2
 800831e:	3304      	adds	r3, #4
 8008320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2201      	movs	r2, #1
 8008326:	705a      	strb	r2, [r3, #1]
 8008328:	e00f      	b.n	800834a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	f003 020f 	and.w	r2, r3, #15
 8008330:	4613      	mov	r3, r2
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	4413      	add	r3, r2
 8008340:	3304      	adds	r3, #4
 8008342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800834a:	78fb      	ldrb	r3, [r7, #3]
 800834c:	f003 030f 	and.w	r3, r3, #15
 8008350:	b2da      	uxtb	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008356:	883a      	ldrh	r2, [r7, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	78ba      	ldrb	r2, [r7, #2]
 8008360:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d004      	beq.n	8008374 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008374:	78bb      	ldrb	r3, [r7, #2]
 8008376:	2b02      	cmp	r3, #2
 8008378:	d102      	bne.n	8008380 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8008386:	2b01      	cmp	r3, #1
 8008388:	d101      	bne.n	800838e <HAL_PCD_EP_Open+0xaa>
 800838a:	2302      	movs	r3, #2
 800838c:	e00e      	b.n	80083ac <HAL_PCD_EP_Open+0xc8>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68f9      	ldr	r1, [r7, #12]
 800839c:	4618      	mov	r0, r3
 800839e:	f004 f80f 	bl	800c3c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80083aa:	7afb      	ldrb	r3, [r7, #11]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80083c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	da0f      	bge.n	80083e8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	f003 020f 	and.w	r2, r3, #15
 80083ce:	4613      	mov	r3, r2
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	3338      	adds	r3, #56	@ 0x38
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	4413      	add	r3, r2
 80083dc:	3304      	adds	r3, #4
 80083de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2201      	movs	r2, #1
 80083e4:	705a      	strb	r2, [r3, #1]
 80083e6:	e00f      	b.n	8008408 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	f003 020f 	and.w	r2, r3, #15
 80083ee:	4613      	mov	r3, r2
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	4413      	add	r3, r2
 80083fe:	3304      	adds	r3, #4
 8008400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008408:	78fb      	ldrb	r3, [r7, #3]
 800840a:	f003 030f 	and.w	r3, r3, #15
 800840e:	b2da      	uxtb	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <HAL_PCD_EP_Close+0x6e>
 800841e:	2302      	movs	r3, #2
 8008420:	e00e      	b.n	8008440 <HAL_PCD_EP_Close+0x8c>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68f9      	ldr	r1, [r7, #12]
 8008430:	4618      	mov	r0, r3
 8008432:	f004 f84d 	bl	800c4d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	607a      	str	r2, [r7, #4]
 8008452:	603b      	str	r3, [r7, #0]
 8008454:	460b      	mov	r3, r1
 8008456:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008458:	7afb      	ldrb	r3, [r7, #11]
 800845a:	f003 020f 	and.w	r2, r3, #15
 800845e:	4613      	mov	r3, r2
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	4413      	add	r3, r2
 800846e:	3304      	adds	r3, #4
 8008470:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2200      	movs	r2, #0
 8008482:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2200      	movs	r2, #0
 8008488:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800848a:	7afb      	ldrb	r3, [r7, #11]
 800848c:	f003 030f 	and.w	r3, r3, #15
 8008490:	b2da      	uxtb	r2, r3
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d102      	bne.n	80084a4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80084a4:	7afb      	ldrb	r3, [r7, #11]
 80084a6:	f003 030f 	and.w	r3, r3, #15
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d109      	bne.n	80084c2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6818      	ldr	r0, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	461a      	mov	r2, r3
 80084ba:	6979      	ldr	r1, [r7, #20]
 80084bc:	f004 fb2c 	bl	800cb18 <USB_EP0StartXfer>
 80084c0:	e008      	b.n	80084d4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	461a      	mov	r2, r3
 80084ce:	6979      	ldr	r1, [r7, #20]
 80084d0:	f004 f8da 	bl	800c688 <USB_EPStartXfer>
  }

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80084ea:	78fb      	ldrb	r3, [r7, #3]
 80084ec:	f003 020f 	and.w	r2, r3, #15
 80084f0:	6879      	ldr	r1, [r7, #4]
 80084f2:	4613      	mov	r3, r2
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	440b      	add	r3, r1
 80084fc:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8008500:	681b      	ldr	r3, [r3, #0]
}
 8008502:	4618      	mov	r0, r3
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b086      	sub	sp, #24
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	603b      	str	r3, [r7, #0]
 800851a:	460b      	mov	r3, r1
 800851c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800851e:	7afb      	ldrb	r3, [r7, #11]
 8008520:	f003 020f 	and.w	r2, r3, #15
 8008524:	4613      	mov	r3, r2
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	3338      	adds	r3, #56	@ 0x38
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	4413      	add	r3, r2
 8008532:	3304      	adds	r3, #4
 8008534:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2200      	movs	r2, #0
 8008546:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2201      	movs	r2, #1
 800854c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800854e:	7afb      	ldrb	r3, [r7, #11]
 8008550:	f003 030f 	and.w	r3, r3, #15
 8008554:	b2da      	uxtb	r2, r3
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d102      	bne.n	8008568 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008568:	7afb      	ldrb	r3, [r7, #11]
 800856a:	f003 030f 	and.w	r3, r3, #15
 800856e:	2b00      	cmp	r3, #0
 8008570:	d109      	bne.n	8008586 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6818      	ldr	r0, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	461a      	mov	r2, r3
 800857e:	6979      	ldr	r1, [r7, #20]
 8008580:	f004 faca 	bl	800cb18 <USB_EP0StartXfer>
 8008584:	e008      	b.n	8008598 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6818      	ldr	r0, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	b2db      	uxtb	r3, r3
 8008590:	461a      	mov	r2, r3
 8008592:	6979      	ldr	r1, [r7, #20]
 8008594:	f004 f878 	bl	800c688 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	460b      	mov	r3, r1
 80085ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	f003 020f 	and.w	r2, r3, #15
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d901      	bls.n	80085c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e050      	b.n	8008662 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80085c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	da0f      	bge.n	80085e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085c8:	78fb      	ldrb	r3, [r7, #3]
 80085ca:	f003 020f 	and.w	r2, r3, #15
 80085ce:	4613      	mov	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	3338      	adds	r3, #56	@ 0x38
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	4413      	add	r3, r2
 80085dc:	3304      	adds	r3, #4
 80085de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2201      	movs	r2, #1
 80085e4:	705a      	strb	r2, [r3, #1]
 80085e6:	e00d      	b.n	8008604 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	4613      	mov	r3, r2
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	4413      	add	r3, r2
 80085fa:	3304      	adds	r3, #4
 80085fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2201      	movs	r2, #1
 8008608:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	f003 030f 	and.w	r3, r3, #15
 8008610:	b2da      	uxtb	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800861c:	2b01      	cmp	r3, #1
 800861e:	d101      	bne.n	8008624 <HAL_PCD_EP_SetStall+0x82>
 8008620:	2302      	movs	r3, #2
 8008622:	e01e      	b.n	8008662 <HAL_PCD_EP_SetStall+0xc0>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68f9      	ldr	r1, [r7, #12]
 8008632:	4618      	mov	r0, r3
 8008634:	f004 fd08 	bl	800d048 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008638:	78fb      	ldrb	r3, [r7, #3]
 800863a:	f003 030f 	and.w	r3, r3, #15
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	b2d9      	uxtb	r1, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008652:	461a      	mov	r2, r3
 8008654:	f004 fef8 	bl	800d448 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b084      	sub	sp, #16
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	460b      	mov	r3, r1
 8008674:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	f003 020f 	and.w	r2, r3, #15
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	429a      	cmp	r2, r3
 8008682:	d901      	bls.n	8008688 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e042      	b.n	800870e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800868c:	2b00      	cmp	r3, #0
 800868e:	da0f      	bge.n	80086b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	f003 020f 	and.w	r2, r3, #15
 8008696:	4613      	mov	r3, r2
 8008698:	00db      	lsls	r3, r3, #3
 800869a:	4413      	add	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	3338      	adds	r3, #56	@ 0x38
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	4413      	add	r3, r2
 80086a4:	3304      	adds	r3, #4
 80086a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2201      	movs	r2, #1
 80086ac:	705a      	strb	r2, [r3, #1]
 80086ae:	e00f      	b.n	80086d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	f003 020f 	and.w	r2, r3, #15
 80086b6:	4613      	mov	r3, r2
 80086b8:	00db      	lsls	r3, r3, #3
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	4413      	add	r3, r2
 80086c6:	3304      	adds	r3, #4
 80086c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086d6:	78fb      	ldrb	r3, [r7, #3]
 80086d8:	f003 030f 	and.w	r3, r3, #15
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d101      	bne.n	80086f0 <HAL_PCD_EP_ClrStall+0x86>
 80086ec:	2302      	movs	r3, #2
 80086ee:	e00e      	b.n	800870e <HAL_PCD_EP_ClrStall+0xa4>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68f9      	ldr	r1, [r7, #12]
 80086fe:	4618      	mov	r0, r3
 8008700:	f004 fd10 	bl	800d124 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	460b      	mov	r3, r1
 8008720:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008726:	2b00      	cmp	r3, #0
 8008728:	da0c      	bge.n	8008744 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800872a:	78fb      	ldrb	r3, [r7, #3]
 800872c:	f003 020f 	and.w	r2, r3, #15
 8008730:	4613      	mov	r3, r2
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	3338      	adds	r3, #56	@ 0x38
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	3304      	adds	r3, #4
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	e00c      	b.n	800875e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	f003 020f 	and.w	r2, r3, #15
 800874a:	4613      	mov	r3, r2
 800874c:	00db      	lsls	r3, r3, #3
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	4413      	add	r3, r2
 800875a:	3304      	adds	r3, #4
 800875c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68f9      	ldr	r1, [r7, #12]
 8008764:	4618      	mov	r0, r3
 8008766:	f004 fb2f 	bl	800cdc8 <USB_EPStopXfer>
 800876a:	4603      	mov	r3, r0
 800876c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800876e:	7afb      	ldrb	r3, [r7, #11]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08a      	sub	sp, #40	@ 0x28
 800877c:	af02      	add	r7, sp, #8
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	4613      	mov	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	3338      	adds	r3, #56	@ 0x38
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	4413      	add	r3, r2
 800879c:	3304      	adds	r3, #4
 800879e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a1a      	ldr	r2, [r3, #32]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d901      	bls.n	80087b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e06c      	b.n	800888a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	699a      	ldr	r2, [r3, #24]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6a1b      	ldr	r3, [r3, #32]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d902      	bls.n	80087cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	3303      	adds	r3, #3
 80087d0:	089b      	lsrs	r3, r3, #2
 80087d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087d4:	e02b      	b.n	800882e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	699a      	ldr	r2, [r3, #24]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d902      	bls.n	80087f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	3303      	adds	r3, #3
 80087f6:	089b      	lsrs	r3, r3, #2
 80087f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6919      	ldr	r1, [r3, #16]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	b2da      	uxtb	r2, r3
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800880a:	b2db      	uxtb	r3, r3
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	4603      	mov	r3, r0
 8008810:	6978      	ldr	r0, [r7, #20]
 8008812:	f004 fb83 	bl	800cf1c <USB_WritePacket>

    ep->xfer_buff  += len;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	691a      	ldr	r2, [r3, #16]
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	441a      	add	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a1a      	ldr	r2, [r3, #32]
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	441a      	add	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	4413      	add	r3, r2
 8008836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	429a      	cmp	r2, r3
 8008842:	d809      	bhi.n	8008858 <PCD_WriteEmptyTxFifo+0xe0>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a1a      	ldr	r2, [r3, #32]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800884c:	429a      	cmp	r2, r3
 800884e:	d203      	bcs.n	8008858 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1be      	bne.n	80087d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	699a      	ldr	r2, [r3, #24]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	429a      	cmp	r2, r3
 8008862:	d811      	bhi.n	8008888 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	f003 030f 	and.w	r3, r3, #15
 800886a:	2201      	movs	r2, #1
 800886c:	fa02 f303 	lsl.w	r3, r2, r3
 8008870:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	43db      	mvns	r3, r3
 800887e:	6939      	ldr	r1, [r7, #16]
 8008880:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008884:	4013      	ands	r3, r2
 8008886:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3720      	adds	r7, #32
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
	...

08008894 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	333c      	adds	r3, #60	@ 0x3c
 80088ac:	3304      	adds	r3, #4
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d17b      	bne.n	80089c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f003 0308 	and.w	r3, r3, #8
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d015      	beq.n	8008900 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	4a61      	ldr	r2, [pc, #388]	@ (8008a5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	f240 80b9 	bls.w	8008a50 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 80b3 	beq.w	8008a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088f6:	461a      	mov	r2, r3
 80088f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088fc:	6093      	str	r3, [r2, #8]
 80088fe:	e0a7      	b.n	8008a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f003 0320 	and.w	r3, r3, #32
 8008906:	2b00      	cmp	r3, #0
 8008908:	d009      	beq.n	800891e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	4413      	add	r3, r2
 8008912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008916:	461a      	mov	r2, r3
 8008918:	2320      	movs	r3, #32
 800891a:	6093      	str	r3, [r2, #8]
 800891c:	e098      	b.n	8008a50 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008924:	2b00      	cmp	r3, #0
 8008926:	f040 8093 	bne.w	8008a50 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	4a4b      	ldr	r2, [pc, #300]	@ (8008a5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d90f      	bls.n	8008952 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00a      	beq.n	8008952 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008948:	461a      	mov	r2, r3
 800894a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800894e:	6093      	str	r3, [r2, #8]
 8008950:	e07e      	b.n	8008a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	4613      	mov	r3, r2
 8008956:	00db      	lsls	r3, r3, #3
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	4413      	add	r3, r2
 8008964:	3304      	adds	r3, #4
 8008966:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	69da      	ldr	r2, [r3, #28]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	0159      	lsls	r1, r3, #5
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	440b      	add	r3, r1
 8008974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800897e:	1ad2      	subs	r2, r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d114      	bne.n	80089b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d109      	bne.n	80089a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800899c:	461a      	mov	r2, r3
 800899e:	2101      	movs	r1, #1
 80089a0:	f004 fd52 	bl	800d448 <USB_EP0_OutStart>
 80089a4:	e006      	b.n	80089b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	691a      	ldr	r2, [r3, #16]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	441a      	add	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f007 f814 	bl	800f9e8 <HAL_PCD_DataOutStageCallback>
 80089c0:	e046      	b.n	8008a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	4a26      	ldr	r2, [pc, #152]	@ (8008a60 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d124      	bne.n	8008a14 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00a      	beq.n	80089ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e0:	461a      	mov	r2, r3
 80089e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089e6:	6093      	str	r3, [r2, #8]
 80089e8:	e032      	b.n	8008a50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	f003 0320 	and.w	r3, r3, #32
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d008      	beq.n	8008a06 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a00:	461a      	mov	r2, r3
 8008a02:	2320      	movs	r3, #32
 8008a04:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f006 ffeb 	bl	800f9e8 <HAL_PCD_DataOutStageCallback>
 8008a12:	e01d      	b.n	8008a50 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d114      	bne.n	8008a44 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008a1a:	6879      	ldr	r1, [r7, #4]
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	00db      	lsls	r3, r3, #3
 8008a22:	4413      	add	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	440b      	add	r3, r1
 8008a28:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d108      	bne.n	8008a44 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	2100      	movs	r1, #0
 8008a40:	f004 fd02 	bl	800d448 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f006 ffcc 	bl	800f9e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3720      	adds	r7, #32
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	4f54300a 	.word	0x4f54300a
 8008a60:	4f54310a 	.word	0x4f54310a

08008a64 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	333c      	adds	r3, #60	@ 0x3c
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4a15      	ldr	r2, [pc, #84]	@ (8008aec <PCD_EP_OutSetupPacket_int+0x88>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d90e      	bls.n	8008ab8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d009      	beq.n	8008ab8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ab6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f006 ff83 	bl	800f9c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8008aec <PCD_EP_OutSetupPacket_int+0x88>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d90c      	bls.n	8008ae0 <PCD_EP_OutSetupPacket_int+0x7c>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d108      	bne.n	8008ae0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008ad8:	461a      	mov	r2, r3
 8008ada:	2101      	movs	r1, #1
 8008adc:	f004 fcb4 	bl	800d448 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3718      	adds	r7, #24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	4f54300a 	.word	0x4f54300a

08008af0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
 8008afc:	4613      	mov	r3, r2
 8008afe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b06:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008b08:	78fb      	ldrb	r3, [r7, #3]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d107      	bne.n	8008b1e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008b0e:	883b      	ldrh	r3, [r7, #0]
 8008b10:	0419      	lsls	r1, r3, #16
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b1c:	e028      	b.n	8008b70 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b24:	0c1b      	lsrs	r3, r3, #16
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	4413      	add	r3, r2
 8008b2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]
 8008b30:	e00d      	b.n	8008b4e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	3340      	adds	r3, #64	@ 0x40
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	0c1b      	lsrs	r3, r3, #16
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	4413      	add	r3, r2
 8008b46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	73fb      	strb	r3, [r7, #15]
 8008b4e:	7bfa      	ldrb	r2, [r7, #15]
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	3b01      	subs	r3, #1
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d3ec      	bcc.n	8008b32 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008b58:	883b      	ldrh	r3, [r7, #0]
 8008b5a:	0418      	lsls	r0, r3, #16
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6819      	ldr	r1, [r3, #0]
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	4302      	orrs	r2, r0
 8008b68:	3340      	adds	r3, #64	@ 0x40
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	887a      	ldrh	r2, [r7, #2]
 8008b90:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bd2:	f043 0303 	orr.w	r3, r3, #3
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	603b      	str	r3, [r7, #0]
 8008c0e:	4b20      	ldr	r3, [pc, #128]	@ (8008c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8008c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c12:	4a1f      	ldr	r2, [pc, #124]	@ (8008c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8008c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8008c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c22:	603b      	str	r3, [r7, #0]
 8008c24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008c26:	4b1b      	ldr	r3, [pc, #108]	@ (8008c94 <HAL_PWREx_EnableOverDrive+0x94>)
 8008c28:	2201      	movs	r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c2c:	f7fb fc14 	bl	8004458 <HAL_GetTick>
 8008c30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008c32:	e009      	b.n	8008c48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008c34:	f7fb fc10 	bl	8004458 <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c42:	d901      	bls.n	8008c48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e01f      	b.n	8008c88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008c48:	4b13      	ldr	r3, [pc, #76]	@ (8008c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c54:	d1ee      	bne.n	8008c34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008c56:	4b11      	ldr	r3, [pc, #68]	@ (8008c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c5c:	f7fb fbfc 	bl	8004458 <HAL_GetTick>
 8008c60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008c62:	e009      	b.n	8008c78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008c64:	f7fb fbf8 	bl	8004458 <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c72:	d901      	bls.n	8008c78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e007      	b.n	8008c88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008c78:	4b07      	ldr	r3, [pc, #28]	@ (8008c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c84:	d1ee      	bne.n	8008c64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	40023800 	.word	0x40023800
 8008c94:	420e0040 	.word	0x420e0040
 8008c98:	40007000 	.word	0x40007000
 8008c9c:	420e0044 	.word	0x420e0044

08008ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e0cc      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008cb4:	4b68      	ldr	r3, [pc, #416]	@ (8008e58 <HAL_RCC_ClockConfig+0x1b8>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 030f 	and.w	r3, r3, #15
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d90c      	bls.n	8008cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cc2:	4b65      	ldr	r3, [pc, #404]	@ (8008e58 <HAL_RCC_ClockConfig+0x1b8>)
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	b2d2      	uxtb	r2, r2
 8008cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cca:	4b63      	ldr	r3, [pc, #396]	@ (8008e58 <HAL_RCC_ClockConfig+0x1b8>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 030f 	and.w	r3, r3, #15
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d001      	beq.n	8008cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e0b8      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d020      	beq.n	8008d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0304 	and.w	r3, r3, #4
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d005      	beq.n	8008d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cf4:	4b59      	ldr	r3, [pc, #356]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	4a58      	ldr	r2, [pc, #352]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008cfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0308 	and.w	r3, r3, #8
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d005      	beq.n	8008d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d0c:	4b53      	ldr	r3, [pc, #332]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	4a52      	ldr	r2, [pc, #328]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008d12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d18:	4b50      	ldr	r3, [pc, #320]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	494d      	ldr	r1, [pc, #308]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d044      	beq.n	8008dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d107      	bne.n	8008d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d3e:	4b47      	ldr	r3, [pc, #284]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d119      	bne.n	8008d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e07f      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d003      	beq.n	8008d5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d107      	bne.n	8008d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d109      	bne.n	8008d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e06f      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0302 	and.w	r3, r3, #2
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e067      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d7e:	4b37      	ldr	r3, [pc, #220]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f023 0203 	bic.w	r2, r3, #3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	4934      	ldr	r1, [pc, #208]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d90:	f7fb fb62 	bl	8004458 <HAL_GetTick>
 8008d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d96:	e00a      	b.n	8008dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d98:	f7fb fb5e 	bl	8004458 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d901      	bls.n	8008dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e04f      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dae:	4b2b      	ldr	r3, [pc, #172]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f003 020c 	and.w	r2, r3, #12
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d1eb      	bne.n	8008d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008dc0:	4b25      	ldr	r3, [pc, #148]	@ (8008e58 <HAL_RCC_ClockConfig+0x1b8>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d20c      	bcs.n	8008de8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dce:	4b22      	ldr	r3, [pc, #136]	@ (8008e58 <HAL_RCC_ClockConfig+0x1b8>)
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	b2d2      	uxtb	r2, r2
 8008dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dd6:	4b20      	ldr	r3, [pc, #128]	@ (8008e58 <HAL_RCC_ClockConfig+0x1b8>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 030f 	and.w	r3, r3, #15
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d001      	beq.n	8008de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e032      	b.n	8008e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0304 	and.w	r3, r3, #4
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d008      	beq.n	8008e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008df4:	4b19      	ldr	r3, [pc, #100]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	4916      	ldr	r1, [pc, #88]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0308 	and.w	r3, r3, #8
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d009      	beq.n	8008e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e12:	4b12      	ldr	r3, [pc, #72]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	490e      	ldr	r1, [pc, #56]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e26:	f000 fb6b 	bl	8009500 <HAL_RCC_GetSysClockFreq>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e5c <HAL_RCC_ClockConfig+0x1bc>)
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	091b      	lsrs	r3, r3, #4
 8008e32:	f003 030f 	and.w	r3, r3, #15
 8008e36:	490a      	ldr	r1, [pc, #40]	@ (8008e60 <HAL_RCC_ClockConfig+0x1c0>)
 8008e38:	5ccb      	ldrb	r3, [r1, r3]
 8008e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3e:	4a09      	ldr	r2, [pc, #36]	@ (8008e64 <HAL_RCC_ClockConfig+0x1c4>)
 8008e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e42:	4b09      	ldr	r3, [pc, #36]	@ (8008e68 <HAL_RCC_ClockConfig+0x1c8>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fb fac2 	bl	80043d0 <HAL_InitTick>

  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	40023c00 	.word	0x40023c00
 8008e5c:	40023800 	.word	0x40023800
 8008e60:	0801023c 	.word	0x0801023c
 8008e64:	20000000 	.word	0x20000000
 8008e68:	20000004 	.word	0x20000004

08008e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e70:	4b03      	ldr	r3, [pc, #12]	@ (8008e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e72:	681b      	ldr	r3, [r3, #0]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20000000 	.word	0x20000000

08008e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e88:	f7ff fff0 	bl	8008e6c <HAL_RCC_GetHCLKFreq>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	4b05      	ldr	r3, [pc, #20]	@ (8008ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	0a9b      	lsrs	r3, r3, #10
 8008e94:	f003 0307 	and.w	r3, r3, #7
 8008e98:	4903      	ldr	r1, [pc, #12]	@ (8008ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e9a:	5ccb      	ldrb	r3, [r1, r3]
 8008e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	40023800 	.word	0x40023800
 8008ea8:	0801024c 	.word	0x0801024c

08008eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08c      	sub	sp, #48	@ 0x30
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0301 	and.w	r3, r3, #1
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d010      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eea:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef2:	496c      	ldr	r1, [pc, #432]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8008f02:	2301      	movs	r3, #1
 8008f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0302 	and.w	r3, r3, #2
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d010      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008f12:	4b64      	ldr	r3, [pc, #400]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f18:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f20:	4960      	ldr	r1, [pc, #384]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8008f30:	2301      	movs	r3, #1
 8008f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d017      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f40:	4b58      	ldr	r3, [pc, #352]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f4e:	4955      	ldr	r1, [pc, #340]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f50:	4313      	orrs	r3, r2
 8008f52:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f5e:	d101      	bne.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8008f60:	2301      	movs	r3, #1
 8008f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0308 	and.w	r3, r3, #8
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d017      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008f7c:	4b49      	ldr	r3, [pc, #292]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f8a:	4946      	ldr	r1, [pc, #280]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f9a:	d101      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d101      	bne.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 0320 	and.w	r3, r3, #32
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 808a 	beq.w	80090ce <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60bb      	str	r3, [r7, #8]
 8008fbe:	4b39      	ldr	r3, [pc, #228]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc2:	4a38      	ldr	r2, [pc, #224]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8008fca:	4b36      	ldr	r3, [pc, #216]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fd2:	60bb      	str	r3, [r7, #8]
 8008fd4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008fd6:	4b34      	ldr	r3, [pc, #208]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a33      	ldr	r2, [pc, #204]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fe0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fe2:	f7fb fa39 	bl	8004458 <HAL_GetTick>
 8008fe6:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008fe8:	e008      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008fea:	f7fb fa35 	bl	8004458 <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d901      	bls.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e278      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0f0      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009008:	4b26      	ldr	r3, [pc, #152]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800900a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800900c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009010:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d02f      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009020:	6a3a      	ldr	r2, [r7, #32]
 8009022:	429a      	cmp	r2, r3
 8009024:	d028      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009026:	4b1f      	ldr	r3, [pc, #124]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800902a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800902e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009030:	4b1e      	ldr	r3, [pc, #120]	@ (80090ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8009032:	2201      	movs	r2, #1
 8009034:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009036:	4b1d      	ldr	r3, [pc, #116]	@ (80090ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800903c:	4a19      	ldr	r2, [pc, #100]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009042:	4b18      	ldr	r3, [pc, #96]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b01      	cmp	r3, #1
 800904c:	d114      	bne.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800904e:	f7fb fa03 	bl	8004458 <HAL_GetTick>
 8009052:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009054:	e00a      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009056:	f7fb f9ff 	bl	8004458 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009064:	4293      	cmp	r3, r2
 8009066:	d901      	bls.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e240      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800906c:	4b0d      	ldr	r3, [pc, #52]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800906e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009070:	f003 0302 	and.w	r3, r3, #2
 8009074:	2b00      	cmp	r3, #0
 8009076:	d0ee      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800907c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009080:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009084:	d114      	bne.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8009086:	4b07      	ldr	r3, [pc, #28]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009092:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800909a:	4902      	ldr	r1, [pc, #8]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800909c:	4313      	orrs	r3, r2
 800909e:	608b      	str	r3, [r1, #8]
 80090a0:	e00c      	b.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80090a2:	bf00      	nop
 80090a4:	40023800 	.word	0x40023800
 80090a8:	40007000 	.word	0x40007000
 80090ac:	42470e40 	.word	0x42470e40
 80090b0:	4b4a      	ldr	r3, [pc, #296]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	4a49      	ldr	r2, [pc, #292]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80090b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80090ba:	6093      	str	r3, [r2, #8]
 80090bc:	4b47      	ldr	r3, [pc, #284]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80090be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090c8:	4944      	ldr	r1, [pc, #272]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0310 	and.w	r3, r3, #16
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d004      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80090e0:	4b3f      	ldr	r3, [pc, #252]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80090e2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00a      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80090f0:	4b3a      	ldr	r3, [pc, #232]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80090f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090fe:	4937      	ldr	r1, [pc, #220]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009100:	4313      	orrs	r3, r2
 8009102:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00a      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009112:	4b32      	ldr	r3, [pc, #200]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009114:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009118:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009120:	492e      	ldr	r1, [pc, #184]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009122:	4313      	orrs	r3, r2
 8009124:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009130:	2b00      	cmp	r3, #0
 8009132:	d011      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009134:	4b29      	ldr	r3, [pc, #164]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800913a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009142:	4926      	ldr	r1, [pc, #152]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009144:	4313      	orrs	r3, r2
 8009146:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800914e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009152:	d101      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8009154:	2301      	movs	r3, #1
 8009156:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00a      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009164:	4b1d      	ldr	r3, [pc, #116]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800916a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009172:	491a      	ldr	r1, [pc, #104]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009174:	4313      	orrs	r3, r2
 8009176:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009182:	2b00      	cmp	r3, #0
 8009184:	d011      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8009186:	4b15      	ldr	r3, [pc, #84]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800918c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009194:	4911      	ldr	r1, [pc, #68]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009196:	4313      	orrs	r3, r2
 8009198:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091a4:	d101      	bne.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80091a6:	2301      	movs	r3, #1
 80091a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80091aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d005      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091b8:	f040 80ff 	bne.w	80093ba <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80091bc:	4b09      	ldr	r3, [pc, #36]	@ (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80091c2:	f7fb f949 	bl	8004458 <HAL_GetTick>
 80091c6:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80091c8:	e00e      	b.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80091ca:	f7fb f945 	bl	8004458 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d907      	bls.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e188      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 80091dc:	40023800 	.word	0x40023800
 80091e0:	424711e0 	.word	0x424711e0
 80091e4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80091e8:	4b7e      	ldr	r3, [pc, #504]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1ea      	bne.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d003      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009204:	2b00      	cmp	r3, #0
 8009206:	d009      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009210:	2b00      	cmp	r3, #0
 8009212:	d028      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009218:	2b00      	cmp	r3, #0
 800921a:	d124      	bne.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800921c:	4b71      	ldr	r3, [pc, #452]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800921e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009222:	0c1b      	lsrs	r3, r3, #16
 8009224:	f003 0303 	and.w	r3, r3, #3
 8009228:	3301      	adds	r3, #1
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800922e:	4b6d      	ldr	r3, [pc, #436]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009234:	0e1b      	lsrs	r3, r3, #24
 8009236:	f003 030f 	and.w	r3, r3, #15
 800923a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	019b      	lsls	r3, r3, #6
 8009246:	431a      	orrs	r2, r3
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	085b      	lsrs	r3, r3, #1
 800924c:	3b01      	subs	r3, #1
 800924e:	041b      	lsls	r3, r3, #16
 8009250:	431a      	orrs	r2, r3
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	061b      	lsls	r3, r3, #24
 8009256:	431a      	orrs	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	071b      	lsls	r3, r3, #28
 800925e:	4961      	ldr	r1, [pc, #388]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009260:	4313      	orrs	r3, r2
 8009262:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0304 	and.w	r3, r3, #4
 800926e:	2b00      	cmp	r3, #0
 8009270:	d004      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800927a:	d00a      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009284:	2b00      	cmp	r3, #0
 8009286:	d035      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800928c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009290:	d130      	bne.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009292:	4b54      	ldr	r3, [pc, #336]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009294:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009298:	0c1b      	lsrs	r3, r3, #16
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	3301      	adds	r3, #1
 80092a0:	005b      	lsls	r3, r3, #1
 80092a2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80092a4:	4b4f      	ldr	r3, [pc, #316]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80092a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092aa:	0f1b      	lsrs	r3, r3, #28
 80092ac:	f003 0307 	and.w	r3, r3, #7
 80092b0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	019b      	lsls	r3, r3, #6
 80092bc:	431a      	orrs	r2, r3
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	085b      	lsrs	r3, r3, #1
 80092c2:	3b01      	subs	r3, #1
 80092c4:	041b      	lsls	r3, r3, #16
 80092c6:	431a      	orrs	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	061b      	lsls	r3, r3, #24
 80092ce:	431a      	orrs	r2, r3
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	071b      	lsls	r3, r3, #28
 80092d4:	4943      	ldr	r1, [pc, #268]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80092dc:	4b41      	ldr	r3, [pc, #260]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80092de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092e2:	f023 021f 	bic.w	r2, r3, #31
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ea:	3b01      	subs	r3, #1
 80092ec:	493d      	ldr	r1, [pc, #244]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d029      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009308:	d124      	bne.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800930a:	4b36      	ldr	r3, [pc, #216]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800930c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009310:	0c1b      	lsrs	r3, r3, #16
 8009312:	f003 0303 	and.w	r3, r3, #3
 8009316:	3301      	adds	r3, #1
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800931c:	4b31      	ldr	r3, [pc, #196]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800931e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009322:	0f1b      	lsrs	r3, r3, #28
 8009324:	f003 0307 	and.w	r3, r3, #7
 8009328:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	019b      	lsls	r3, r3, #6
 8009334:	431a      	orrs	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	085b      	lsrs	r3, r3, #1
 800933c:	3b01      	subs	r3, #1
 800933e:	041b      	lsls	r3, r3, #16
 8009340:	431a      	orrs	r2, r3
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	061b      	lsls	r3, r3, #24
 8009346:	431a      	orrs	r2, r3
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	071b      	lsls	r3, r3, #28
 800934c:	4925      	ldr	r1, [pc, #148]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800934e:	4313      	orrs	r3, r2
 8009350:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800935c:	2b00      	cmp	r3, #0
 800935e:	d016      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685a      	ldr	r2, [r3, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	019b      	lsls	r3, r3, #6
 800936a:	431a      	orrs	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	085b      	lsrs	r3, r3, #1
 8009372:	3b01      	subs	r3, #1
 8009374:	041b      	lsls	r3, r3, #16
 8009376:	431a      	orrs	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	061b      	lsls	r3, r3, #24
 800937e:	431a      	orrs	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	071b      	lsls	r3, r3, #28
 8009386:	4917      	ldr	r1, [pc, #92]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009388:	4313      	orrs	r3, r2
 800938a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800938e:	4b16      	ldr	r3, [pc, #88]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8009390:	2201      	movs	r2, #1
 8009392:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009394:	f7fb f860 	bl	8004458 <HAL_GetTick>
 8009398:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800939a:	e008      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800939c:	f7fb f85c 	bl	8004458 <HAL_GetTick>
 80093a0:	4602      	mov	r2, r0
 80093a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d901      	bls.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e09f      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80093ae:	4b0d      	ldr	r3, [pc, #52]	@ (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0f0      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80093ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093bc:	2b01      	cmp	r3, #1
 80093be:	f040 8095 	bne.w	80094ec <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80093c2:	4b0a      	ldr	r3, [pc, #40]	@ (80093ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80093c8:	f7fb f846 	bl	8004458 <HAL_GetTick>
 80093cc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80093ce:	e00f      	b.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80093d0:	f7fb f842 	bl	8004458 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d908      	bls.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e085      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 80093e2:	bf00      	nop
 80093e4:	40023800 	.word	0x40023800
 80093e8:	42470068 	.word	0x42470068
 80093ec:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80093f0:	4b41      	ldr	r3, [pc, #260]	@ (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093fc:	d0e8      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 0304 	and.w	r3, r3, #4
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800940e:	2b00      	cmp	r3, #0
 8009410:	d009      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800941a:	2b00      	cmp	r3, #0
 800941c:	d02b      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009422:	2b00      	cmp	r3, #0
 8009424:	d127      	bne.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009426:	4b34      	ldr	r3, [pc, #208]	@ (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800942c:	0c1b      	lsrs	r3, r3, #16
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	3301      	adds	r3, #1
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	699a      	ldr	r2, [r3, #24]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	69db      	ldr	r3, [r3, #28]
 8009440:	019b      	lsls	r3, r3, #6
 8009442:	431a      	orrs	r2, r3
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	085b      	lsrs	r3, r3, #1
 8009448:	3b01      	subs	r3, #1
 800944a:	041b      	lsls	r3, r3, #16
 800944c:	431a      	orrs	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009452:	061b      	lsls	r3, r3, #24
 8009454:	4928      	ldr	r1, [pc, #160]	@ (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009456:	4313      	orrs	r3, r2
 8009458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800945c:	4b26      	ldr	r3, [pc, #152]	@ (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800945e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009462:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800946a:	3b01      	subs	r3, #1
 800946c:	021b      	lsls	r3, r3, #8
 800946e:	4922      	ldr	r1, [pc, #136]	@ (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009470:	4313      	orrs	r3, r2
 8009472:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800947e:	2b00      	cmp	r3, #0
 8009480:	d01d      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x612>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009486:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800948a:	d118      	bne.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800948c:	4b1a      	ldr	r3, [pc, #104]	@ (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800948e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009492:	0e1b      	lsrs	r3, r3, #24
 8009494:	f003 030f 	and.w	r3, r3, #15
 8009498:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699a      	ldr	r2, [r3, #24]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	019b      	lsls	r3, r3, #6
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	085b      	lsrs	r3, r3, #1
 80094ac:	3b01      	subs	r3, #1
 80094ae:	041b      	lsls	r3, r3, #16
 80094b0:	431a      	orrs	r2, r3
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	061b      	lsls	r3, r3, #24
 80094b6:	4910      	ldr	r1, [pc, #64]	@ (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80094be:	4b0f      	ldr	r3, [pc, #60]	@ (80094fc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80094c0:	2201      	movs	r2, #1
 80094c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80094c4:	f7fa ffc8 	bl	8004458 <HAL_GetTick>
 80094c8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80094ca:	e008      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80094cc:	f7fa ffc4 	bl	8004458 <HAL_GetTick>
 80094d0:	4602      	mov	r2, r0
 80094d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d901      	bls.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094da:	2303      	movs	r3, #3
 80094dc:	e007      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80094de:	4b06      	ldr	r3, [pc, #24]	@ (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094ea:	d1ef      	bne.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3730      	adds	r7, #48	@ 0x30
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	40023800 	.word	0x40023800
 80094fc:	42470070 	.word	0x42470070

08009500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009504:	b0ae      	sub	sp, #184	@ 0xb8
 8009506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800951a:	2300      	movs	r3, #0
 800951c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8009520:	2300      	movs	r3, #0
 8009522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009526:	4bcb      	ldr	r3, [pc, #812]	@ (8009854 <HAL_RCC_GetSysClockFreq+0x354>)
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f003 030c 	and.w	r3, r3, #12
 800952e:	2b0c      	cmp	r3, #12
 8009530:	f200 8206 	bhi.w	8009940 <HAL_RCC_GetSysClockFreq+0x440>
 8009534:	a201      	add	r2, pc, #4	@ (adr r2, 800953c <HAL_RCC_GetSysClockFreq+0x3c>)
 8009536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953a:	bf00      	nop
 800953c:	08009571 	.word	0x08009571
 8009540:	08009941 	.word	0x08009941
 8009544:	08009941 	.word	0x08009941
 8009548:	08009941 	.word	0x08009941
 800954c:	08009579 	.word	0x08009579
 8009550:	08009941 	.word	0x08009941
 8009554:	08009941 	.word	0x08009941
 8009558:	08009941 	.word	0x08009941
 800955c:	08009581 	.word	0x08009581
 8009560:	08009941 	.word	0x08009941
 8009564:	08009941 	.word	0x08009941
 8009568:	08009941 	.word	0x08009941
 800956c:	08009771 	.word	0x08009771
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009570:	4bb9      	ldr	r3, [pc, #740]	@ (8009858 <HAL_RCC_GetSysClockFreq+0x358>)
 8009572:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8009576:	e1e7      	b.n	8009948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009578:	4bb8      	ldr	r3, [pc, #736]	@ (800985c <HAL_RCC_GetSysClockFreq+0x35c>)
 800957a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800957e:	e1e3      	b.n	8009948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009580:	4bb4      	ldr	r3, [pc, #720]	@ (8009854 <HAL_RCC_GetSysClockFreq+0x354>)
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009588:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800958c:	4bb1      	ldr	r3, [pc, #708]	@ (8009854 <HAL_RCC_GetSysClockFreq+0x354>)
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d071      	beq.n	800967c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009598:	4bae      	ldr	r3, [pc, #696]	@ (8009854 <HAL_RCC_GetSysClockFreq+0x354>)
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	099b      	lsrs	r3, r3, #6
 800959e:	2200      	movs	r2, #0
 80095a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80095a4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80095a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095b4:	2300      	movs	r3, #0
 80095b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80095be:	4622      	mov	r2, r4
 80095c0:	462b      	mov	r3, r5
 80095c2:	f04f 0000 	mov.w	r0, #0
 80095c6:	f04f 0100 	mov.w	r1, #0
 80095ca:	0159      	lsls	r1, r3, #5
 80095cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80095d0:	0150      	lsls	r0, r2, #5
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4621      	mov	r1, r4
 80095d8:	1a51      	subs	r1, r2, r1
 80095da:	6439      	str	r1, [r7, #64]	@ 0x40
 80095dc:	4629      	mov	r1, r5
 80095de:	eb63 0301 	sbc.w	r3, r3, r1
 80095e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80095e4:	f04f 0200 	mov.w	r2, #0
 80095e8:	f04f 0300 	mov.w	r3, #0
 80095ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80095f0:	4649      	mov	r1, r9
 80095f2:	018b      	lsls	r3, r1, #6
 80095f4:	4641      	mov	r1, r8
 80095f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80095fa:	4641      	mov	r1, r8
 80095fc:	018a      	lsls	r2, r1, #6
 80095fe:	4641      	mov	r1, r8
 8009600:	1a51      	subs	r1, r2, r1
 8009602:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009604:	4649      	mov	r1, r9
 8009606:	eb63 0301 	sbc.w	r3, r3, r1
 800960a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800960c:	f04f 0200 	mov.w	r2, #0
 8009610:	f04f 0300 	mov.w	r3, #0
 8009614:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8009618:	4649      	mov	r1, r9
 800961a:	00cb      	lsls	r3, r1, #3
 800961c:	4641      	mov	r1, r8
 800961e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009622:	4641      	mov	r1, r8
 8009624:	00ca      	lsls	r2, r1, #3
 8009626:	4610      	mov	r0, r2
 8009628:	4619      	mov	r1, r3
 800962a:	4603      	mov	r3, r0
 800962c:	4622      	mov	r2, r4
 800962e:	189b      	adds	r3, r3, r2
 8009630:	633b      	str	r3, [r7, #48]	@ 0x30
 8009632:	462b      	mov	r3, r5
 8009634:	460a      	mov	r2, r1
 8009636:	eb42 0303 	adc.w	r3, r2, r3
 800963a:	637b      	str	r3, [r7, #52]	@ 0x34
 800963c:	f04f 0200 	mov.w	r2, #0
 8009640:	f04f 0300 	mov.w	r3, #0
 8009644:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009648:	4629      	mov	r1, r5
 800964a:	024b      	lsls	r3, r1, #9
 800964c:	4621      	mov	r1, r4
 800964e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009652:	4621      	mov	r1, r4
 8009654:	024a      	lsls	r2, r1, #9
 8009656:	4610      	mov	r0, r2
 8009658:	4619      	mov	r1, r3
 800965a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800965e:	2200      	movs	r2, #0
 8009660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009664:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009668:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800966c:	f7f6 fdca 	bl	8000204 <__aeabi_uldivmod>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	4613      	mov	r3, r2
 8009676:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800967a:	e067      	b.n	800974c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800967c:	4b75      	ldr	r3, [pc, #468]	@ (8009854 <HAL_RCC_GetSysClockFreq+0x354>)
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	099b      	lsrs	r3, r3, #6
 8009682:	2200      	movs	r2, #0
 8009684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009688:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800968c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009694:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009696:	2300      	movs	r3, #0
 8009698:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800969a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800969e:	4622      	mov	r2, r4
 80096a0:	462b      	mov	r3, r5
 80096a2:	f04f 0000 	mov.w	r0, #0
 80096a6:	f04f 0100 	mov.w	r1, #0
 80096aa:	0159      	lsls	r1, r3, #5
 80096ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80096b0:	0150      	lsls	r0, r2, #5
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4621      	mov	r1, r4
 80096b8:	1a51      	subs	r1, r2, r1
 80096ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80096bc:	4629      	mov	r1, r5
 80096be:	eb63 0301 	sbc.w	r3, r3, r1
 80096c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	f04f 0300 	mov.w	r3, #0
 80096cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80096d0:	4649      	mov	r1, r9
 80096d2:	018b      	lsls	r3, r1, #6
 80096d4:	4641      	mov	r1, r8
 80096d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80096da:	4641      	mov	r1, r8
 80096dc:	018a      	lsls	r2, r1, #6
 80096de:	4641      	mov	r1, r8
 80096e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80096e4:	4649      	mov	r1, r9
 80096e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80096ea:	f04f 0200 	mov.w	r2, #0
 80096ee:	f04f 0300 	mov.w	r3, #0
 80096f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80096f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096fe:	4692      	mov	sl, r2
 8009700:	469b      	mov	fp, r3
 8009702:	4623      	mov	r3, r4
 8009704:	eb1a 0303 	adds.w	r3, sl, r3
 8009708:	623b      	str	r3, [r7, #32]
 800970a:	462b      	mov	r3, r5
 800970c:	eb4b 0303 	adc.w	r3, fp, r3
 8009710:	627b      	str	r3, [r7, #36]	@ 0x24
 8009712:	f04f 0200 	mov.w	r2, #0
 8009716:	f04f 0300 	mov.w	r3, #0
 800971a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800971e:	4629      	mov	r1, r5
 8009720:	028b      	lsls	r3, r1, #10
 8009722:	4621      	mov	r1, r4
 8009724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009728:	4621      	mov	r1, r4
 800972a:	028a      	lsls	r2, r1, #10
 800972c:	4610      	mov	r0, r2
 800972e:	4619      	mov	r1, r3
 8009730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009734:	2200      	movs	r2, #0
 8009736:	673b      	str	r3, [r7, #112]	@ 0x70
 8009738:	677a      	str	r2, [r7, #116]	@ 0x74
 800973a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800973e:	f7f6 fd61 	bl	8000204 <__aeabi_uldivmod>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4613      	mov	r3, r2
 8009748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800974c:	4b41      	ldr	r3, [pc, #260]	@ (8009854 <HAL_RCC_GetSysClockFreq+0x354>)
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	0c1b      	lsrs	r3, r3, #16
 8009752:	f003 0303 	and.w	r3, r3, #3
 8009756:	3301      	adds	r3, #1
 8009758:	005b      	lsls	r3, r3, #1
 800975a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800975e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009766:	fbb2 f3f3 	udiv	r3, r2, r3
 800976a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800976e:	e0eb      	b.n	8009948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009770:	4b38      	ldr	r3, [pc, #224]	@ (8009854 <HAL_RCC_GetSysClockFreq+0x354>)
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800977c:	4b35      	ldr	r3, [pc, #212]	@ (8009854 <HAL_RCC_GetSysClockFreq+0x354>)
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d06b      	beq.n	8009860 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009788:	4b32      	ldr	r3, [pc, #200]	@ (8009854 <HAL_RCC_GetSysClockFreq+0x354>)
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	099b      	lsrs	r3, r3, #6
 800978e:	2200      	movs	r2, #0
 8009790:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009792:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009794:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800979a:	663b      	str	r3, [r7, #96]	@ 0x60
 800979c:	2300      	movs	r3, #0
 800979e:	667b      	str	r3, [r7, #100]	@ 0x64
 80097a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80097a4:	4622      	mov	r2, r4
 80097a6:	462b      	mov	r3, r5
 80097a8:	f04f 0000 	mov.w	r0, #0
 80097ac:	f04f 0100 	mov.w	r1, #0
 80097b0:	0159      	lsls	r1, r3, #5
 80097b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80097b6:	0150      	lsls	r0, r2, #5
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	4621      	mov	r1, r4
 80097be:	1a51      	subs	r1, r2, r1
 80097c0:	61b9      	str	r1, [r7, #24]
 80097c2:	4629      	mov	r1, r5
 80097c4:	eb63 0301 	sbc.w	r3, r3, r1
 80097c8:	61fb      	str	r3, [r7, #28]
 80097ca:	f04f 0200 	mov.w	r2, #0
 80097ce:	f04f 0300 	mov.w	r3, #0
 80097d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80097d6:	4659      	mov	r1, fp
 80097d8:	018b      	lsls	r3, r1, #6
 80097da:	4651      	mov	r1, sl
 80097dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80097e0:	4651      	mov	r1, sl
 80097e2:	018a      	lsls	r2, r1, #6
 80097e4:	4651      	mov	r1, sl
 80097e6:	ebb2 0801 	subs.w	r8, r2, r1
 80097ea:	4659      	mov	r1, fp
 80097ec:	eb63 0901 	sbc.w	r9, r3, r1
 80097f0:	f04f 0200 	mov.w	r2, #0
 80097f4:	f04f 0300 	mov.w	r3, #0
 80097f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80097fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009800:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009804:	4690      	mov	r8, r2
 8009806:	4699      	mov	r9, r3
 8009808:	4623      	mov	r3, r4
 800980a:	eb18 0303 	adds.w	r3, r8, r3
 800980e:	613b      	str	r3, [r7, #16]
 8009810:	462b      	mov	r3, r5
 8009812:	eb49 0303 	adc.w	r3, r9, r3
 8009816:	617b      	str	r3, [r7, #20]
 8009818:	f04f 0200 	mov.w	r2, #0
 800981c:	f04f 0300 	mov.w	r3, #0
 8009820:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009824:	4629      	mov	r1, r5
 8009826:	024b      	lsls	r3, r1, #9
 8009828:	4621      	mov	r1, r4
 800982a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800982e:	4621      	mov	r1, r4
 8009830:	024a      	lsls	r2, r1, #9
 8009832:	4610      	mov	r0, r2
 8009834:	4619      	mov	r1, r3
 8009836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800983a:	2200      	movs	r2, #0
 800983c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800983e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009840:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009844:	f7f6 fcde 	bl	8000204 <__aeabi_uldivmod>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4613      	mov	r3, r2
 800984e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009852:	e065      	b.n	8009920 <HAL_RCC_GetSysClockFreq+0x420>
 8009854:	40023800 	.word	0x40023800
 8009858:	00f42400 	.word	0x00f42400
 800985c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009860:	4b3d      	ldr	r3, [pc, #244]	@ (8009958 <HAL_RCC_GetSysClockFreq+0x458>)
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	099b      	lsrs	r3, r3, #6
 8009866:	2200      	movs	r2, #0
 8009868:	4618      	mov	r0, r3
 800986a:	4611      	mov	r1, r2
 800986c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009870:	653b      	str	r3, [r7, #80]	@ 0x50
 8009872:	2300      	movs	r3, #0
 8009874:	657b      	str	r3, [r7, #84]	@ 0x54
 8009876:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800987a:	4642      	mov	r2, r8
 800987c:	464b      	mov	r3, r9
 800987e:	f04f 0000 	mov.w	r0, #0
 8009882:	f04f 0100 	mov.w	r1, #0
 8009886:	0159      	lsls	r1, r3, #5
 8009888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800988c:	0150      	lsls	r0, r2, #5
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4641      	mov	r1, r8
 8009894:	1a51      	subs	r1, r2, r1
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	4649      	mov	r1, r9
 800989a:	eb63 0301 	sbc.w	r3, r3, r1
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	f04f 0200 	mov.w	r2, #0
 80098a4:	f04f 0300 	mov.w	r3, #0
 80098a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80098ac:	4659      	mov	r1, fp
 80098ae:	018b      	lsls	r3, r1, #6
 80098b0:	4651      	mov	r1, sl
 80098b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80098b6:	4651      	mov	r1, sl
 80098b8:	018a      	lsls	r2, r1, #6
 80098ba:	4651      	mov	r1, sl
 80098bc:	1a54      	subs	r4, r2, r1
 80098be:	4659      	mov	r1, fp
 80098c0:	eb63 0501 	sbc.w	r5, r3, r1
 80098c4:	f04f 0200 	mov.w	r2, #0
 80098c8:	f04f 0300 	mov.w	r3, #0
 80098cc:	00eb      	lsls	r3, r5, #3
 80098ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098d2:	00e2      	lsls	r2, r4, #3
 80098d4:	4614      	mov	r4, r2
 80098d6:	461d      	mov	r5, r3
 80098d8:	4643      	mov	r3, r8
 80098da:	18e3      	adds	r3, r4, r3
 80098dc:	603b      	str	r3, [r7, #0]
 80098de:	464b      	mov	r3, r9
 80098e0:	eb45 0303 	adc.w	r3, r5, r3
 80098e4:	607b      	str	r3, [r7, #4]
 80098e6:	f04f 0200 	mov.w	r2, #0
 80098ea:	f04f 0300 	mov.w	r3, #0
 80098ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80098f2:	4629      	mov	r1, r5
 80098f4:	028b      	lsls	r3, r1, #10
 80098f6:	4621      	mov	r1, r4
 80098f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80098fc:	4621      	mov	r1, r4
 80098fe:	028a      	lsls	r2, r1, #10
 8009900:	4610      	mov	r0, r2
 8009902:	4619      	mov	r1, r3
 8009904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009908:	2200      	movs	r2, #0
 800990a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800990c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800990e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009912:	f7f6 fc77 	bl	8000204 <__aeabi_uldivmod>
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	4613      	mov	r3, r2
 800991c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009920:	4b0d      	ldr	r3, [pc, #52]	@ (8009958 <HAL_RCC_GetSysClockFreq+0x458>)
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	0f1b      	lsrs	r3, r3, #28
 8009926:	f003 0307 	and.w	r3, r3, #7
 800992a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800992e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009936:	fbb2 f3f3 	udiv	r3, r2, r3
 800993a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800993e:	e003      	b.n	8009948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009940:	4b06      	ldr	r3, [pc, #24]	@ (800995c <HAL_RCC_GetSysClockFreq+0x45c>)
 8009942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009946:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009948:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800994c:	4618      	mov	r0, r3
 800994e:	37b8      	adds	r7, #184	@ 0xb8
 8009950:	46bd      	mov	sp, r7
 8009952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009956:	bf00      	nop
 8009958:	40023800 	.word	0x40023800
 800995c:	00f42400 	.word	0x00f42400

08009960 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e28d      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 8083 	beq.w	8009a86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009980:	4b94      	ldr	r3, [pc, #592]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f003 030c 	and.w	r3, r3, #12
 8009988:	2b04      	cmp	r3, #4
 800998a:	d019      	beq.n	80099c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800998c:	4b91      	ldr	r3, [pc, #580]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009994:	2b08      	cmp	r3, #8
 8009996:	d106      	bne.n	80099a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009998:	4b8e      	ldr	r3, [pc, #568]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099a4:	d00c      	beq.n	80099c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80099a6:	4b8b      	ldr	r3, [pc, #556]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80099ae:	2b0c      	cmp	r3, #12
 80099b0:	d112      	bne.n	80099d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80099b2:	4b88      	ldr	r3, [pc, #544]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099be:	d10b      	bne.n	80099d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099c0:	4b84      	ldr	r3, [pc, #528]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d05b      	beq.n	8009a84 <HAL_RCC_OscConfig+0x124>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d157      	bne.n	8009a84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e25a      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099e0:	d106      	bne.n	80099f0 <HAL_RCC_OscConfig+0x90>
 80099e2:	4b7c      	ldr	r3, [pc, #496]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a7b      	ldr	r2, [pc, #492]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 80099e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	e01d      	b.n	8009a2c <HAL_RCC_OscConfig+0xcc>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80099f8:	d10c      	bne.n	8009a14 <HAL_RCC_OscConfig+0xb4>
 80099fa:	4b76      	ldr	r3, [pc, #472]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a75      	ldr	r2, [pc, #468]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a04:	6013      	str	r3, [r2, #0]
 8009a06:	4b73      	ldr	r3, [pc, #460]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a72      	ldr	r2, [pc, #456]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a10:	6013      	str	r3, [r2, #0]
 8009a12:	e00b      	b.n	8009a2c <HAL_RCC_OscConfig+0xcc>
 8009a14:	4b6f      	ldr	r3, [pc, #444]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a6e      	ldr	r2, [pc, #440]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	4b6c      	ldr	r3, [pc, #432]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a6b      	ldr	r2, [pc, #428]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d013      	beq.n	8009a5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a34:	f7fa fd10 	bl	8004458 <HAL_GetTick>
 8009a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a3a:	e008      	b.n	8009a4e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a3c:	f7fa fd0c 	bl	8004458 <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b64      	cmp	r3, #100	@ 0x64
 8009a48:	d901      	bls.n	8009a4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e21f      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a4e:	4b61      	ldr	r3, [pc, #388]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0f0      	beq.n	8009a3c <HAL_RCC_OscConfig+0xdc>
 8009a5a:	e014      	b.n	8009a86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a5c:	f7fa fcfc 	bl	8004458 <HAL_GetTick>
 8009a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a62:	e008      	b.n	8009a76 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a64:	f7fa fcf8 	bl	8004458 <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	2b64      	cmp	r3, #100	@ 0x64
 8009a70:	d901      	bls.n	8009a76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e20b      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a76:	4b57      	ldr	r3, [pc, #348]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1f0      	bne.n	8009a64 <HAL_RCC_OscConfig+0x104>
 8009a82:	e000      	b.n	8009a86 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d06f      	beq.n	8009b72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009a92:	4b50      	ldr	r3, [pc, #320]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	f003 030c 	and.w	r3, r3, #12
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d017      	beq.n	8009ace <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009aa6:	2b08      	cmp	r3, #8
 8009aa8:	d105      	bne.n	8009ab6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00b      	beq.n	8009ace <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ab6:	4b47      	ldr	r3, [pc, #284]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009abe:	2b0c      	cmp	r3, #12
 8009ac0:	d11c      	bne.n	8009afc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ac2:	4b44      	ldr	r3, [pc, #272]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d116      	bne.n	8009afc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ace:	4b41      	ldr	r3, [pc, #260]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0302 	and.w	r3, r3, #2
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d005      	beq.n	8009ae6 <HAL_RCC_OscConfig+0x186>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d001      	beq.n	8009ae6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e1d3      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	00db      	lsls	r3, r3, #3
 8009af4:	4937      	ldr	r1, [pc, #220]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009af6:	4313      	orrs	r3, r2
 8009af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009afa:	e03a      	b.n	8009b72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d020      	beq.n	8009b46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b04:	4b34      	ldr	r3, [pc, #208]	@ (8009bd8 <HAL_RCC_OscConfig+0x278>)
 8009b06:	2201      	movs	r2, #1
 8009b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b0a:	f7fa fca5 	bl	8004458 <HAL_GetTick>
 8009b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b10:	e008      	b.n	8009b24 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b12:	f7fa fca1 	bl	8004458 <HAL_GetTick>
 8009b16:	4602      	mov	r2, r0
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d901      	bls.n	8009b24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e1b4      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b24:	4b2b      	ldr	r3, [pc, #172]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0f0      	beq.n	8009b12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b30:	4b28      	ldr	r3, [pc, #160]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	00db      	lsls	r3, r3, #3
 8009b3e:	4925      	ldr	r1, [pc, #148]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009b40:	4313      	orrs	r3, r2
 8009b42:	600b      	str	r3, [r1, #0]
 8009b44:	e015      	b.n	8009b72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b46:	4b24      	ldr	r3, [pc, #144]	@ (8009bd8 <HAL_RCC_OscConfig+0x278>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b4c:	f7fa fc84 	bl	8004458 <HAL_GetTick>
 8009b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b52:	e008      	b.n	8009b66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b54:	f7fa fc80 	bl	8004458 <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d901      	bls.n	8009b66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009b62:	2303      	movs	r3, #3
 8009b64:	e193      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b66:	4b1b      	ldr	r3, [pc, #108]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0302 	and.w	r3, r3, #2
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1f0      	bne.n	8009b54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 0308 	and.w	r3, r3, #8
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d036      	beq.n	8009bec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d016      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b86:	4b15      	ldr	r3, [pc, #84]	@ (8009bdc <HAL_RCC_OscConfig+0x27c>)
 8009b88:	2201      	movs	r2, #1
 8009b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b8c:	f7fa fc64 	bl	8004458 <HAL_GetTick>
 8009b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b92:	e008      	b.n	8009ba6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b94:	f7fa fc60 	bl	8004458 <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d901      	bls.n	8009ba6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e173      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8009bd4 <HAL_RCC_OscConfig+0x274>)
 8009ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0f0      	beq.n	8009b94 <HAL_RCC_OscConfig+0x234>
 8009bb2:	e01b      	b.n	8009bec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009bb4:	4b09      	ldr	r3, [pc, #36]	@ (8009bdc <HAL_RCC_OscConfig+0x27c>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bba:	f7fa fc4d 	bl	8004458 <HAL_GetTick>
 8009bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009bc0:	e00e      	b.n	8009be0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009bc2:	f7fa fc49 	bl	8004458 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d907      	bls.n	8009be0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e15c      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
 8009bd4:	40023800 	.word	0x40023800
 8009bd8:	42470000 	.word	0x42470000
 8009bdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009be0:	4b8a      	ldr	r3, [pc, #552]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1ea      	bne.n	8009bc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0304 	and.w	r3, r3, #4
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 8097 	beq.w	8009d28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bfe:	4b83      	ldr	r3, [pc, #524]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10f      	bne.n	8009c2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60bb      	str	r3, [r7, #8]
 8009c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c12:	4a7e      	ldr	r2, [pc, #504]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8009c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c22:	60bb      	str	r3, [r7, #8]
 8009c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c26:	2301      	movs	r3, #1
 8009c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c2a:	4b79      	ldr	r3, [pc, #484]	@ (8009e10 <HAL_RCC_OscConfig+0x4b0>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d118      	bne.n	8009c68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c36:	4b76      	ldr	r3, [pc, #472]	@ (8009e10 <HAL_RCC_OscConfig+0x4b0>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a75      	ldr	r2, [pc, #468]	@ (8009e10 <HAL_RCC_OscConfig+0x4b0>)
 8009c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c42:	f7fa fc09 	bl	8004458 <HAL_GetTick>
 8009c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c48:	e008      	b.n	8009c5c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c4a:	f7fa fc05 	bl	8004458 <HAL_GetTick>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d901      	bls.n	8009c5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e118      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c5c:	4b6c      	ldr	r3, [pc, #432]	@ (8009e10 <HAL_RCC_OscConfig+0x4b0>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d0f0      	beq.n	8009c4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d106      	bne.n	8009c7e <HAL_RCC_OscConfig+0x31e>
 8009c70:	4b66      	ldr	r3, [pc, #408]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c74:	4a65      	ldr	r2, [pc, #404]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009c76:	f043 0301 	orr.w	r3, r3, #1
 8009c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c7c:	e01c      	b.n	8009cb8 <HAL_RCC_OscConfig+0x358>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	2b05      	cmp	r3, #5
 8009c84:	d10c      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x340>
 8009c86:	4b61      	ldr	r3, [pc, #388]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c8a:	4a60      	ldr	r2, [pc, #384]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009c8c:	f043 0304 	orr.w	r3, r3, #4
 8009c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c92:	4b5e      	ldr	r3, [pc, #376]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c96:	4a5d      	ldr	r2, [pc, #372]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009c98:	f043 0301 	orr.w	r3, r3, #1
 8009c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c9e:	e00b      	b.n	8009cb8 <HAL_RCC_OscConfig+0x358>
 8009ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ca4:	4a59      	ldr	r2, [pc, #356]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009ca6:	f023 0301 	bic.w	r3, r3, #1
 8009caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cac:	4b57      	ldr	r3, [pc, #348]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cb0:	4a56      	ldr	r2, [pc, #344]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009cb2:	f023 0304 	bic.w	r3, r3, #4
 8009cb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d015      	beq.n	8009cec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cc0:	f7fa fbca 	bl	8004458 <HAL_GetTick>
 8009cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cc6:	e00a      	b.n	8009cde <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cc8:	f7fa fbc6 	bl	8004458 <HAL_GetTick>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d901      	bls.n	8009cde <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e0d7      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cde:	4b4b      	ldr	r3, [pc, #300]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ce2:	f003 0302 	and.w	r3, r3, #2
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0ee      	beq.n	8009cc8 <HAL_RCC_OscConfig+0x368>
 8009cea:	e014      	b.n	8009d16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cec:	f7fa fbb4 	bl	8004458 <HAL_GetTick>
 8009cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009cf2:	e00a      	b.n	8009d0a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cf4:	f7fa fbb0 	bl	8004458 <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d901      	bls.n	8009d0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e0c1      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d0a:	4b40      	ldr	r3, [pc, #256]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d0e:	f003 0302 	and.w	r3, r3, #2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1ee      	bne.n	8009cf4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d105      	bne.n	8009d28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d20:	4a3a      	ldr	r2, [pc, #232]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009d22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 80ad 	beq.w	8009e8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009d32:	4b36      	ldr	r3, [pc, #216]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	f003 030c 	and.w	r3, r3, #12
 8009d3a:	2b08      	cmp	r3, #8
 8009d3c:	d060      	beq.n	8009e00 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d145      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d46:	4b33      	ldr	r3, [pc, #204]	@ (8009e14 <HAL_RCC_OscConfig+0x4b4>)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d4c:	f7fa fb84 	bl	8004458 <HAL_GetTick>
 8009d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d52:	e008      	b.n	8009d66 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d54:	f7fa fb80 	bl	8004458 <HAL_GetTick>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d901      	bls.n	8009d66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009d62:	2303      	movs	r3, #3
 8009d64:	e093      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d66:	4b29      	ldr	r3, [pc, #164]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1f0      	bne.n	8009d54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	69da      	ldr	r2, [r3, #28]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a1b      	ldr	r3, [r3, #32]
 8009d7a:	431a      	orrs	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d80:	019b      	lsls	r3, r3, #6
 8009d82:	431a      	orrs	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d88:	085b      	lsrs	r3, r3, #1
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	041b      	lsls	r3, r3, #16
 8009d8e:	431a      	orrs	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d94:	061b      	lsls	r3, r3, #24
 8009d96:	431a      	orrs	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d9c:	071b      	lsls	r3, r3, #28
 8009d9e:	491b      	ldr	r1, [pc, #108]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009da0:	4313      	orrs	r3, r2
 8009da2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009da4:	4b1b      	ldr	r3, [pc, #108]	@ (8009e14 <HAL_RCC_OscConfig+0x4b4>)
 8009da6:	2201      	movs	r2, #1
 8009da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009daa:	f7fa fb55 	bl	8004458 <HAL_GetTick>
 8009dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009db0:	e008      	b.n	8009dc4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009db2:	f7fa fb51 	bl	8004458 <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d901      	bls.n	8009dc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	e064      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dc4:	4b11      	ldr	r3, [pc, #68]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d0f0      	beq.n	8009db2 <HAL_RCC_OscConfig+0x452>
 8009dd0:	e05c      	b.n	8009e8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dd2:	4b10      	ldr	r3, [pc, #64]	@ (8009e14 <HAL_RCC_OscConfig+0x4b4>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dd8:	f7fa fb3e 	bl	8004458 <HAL_GetTick>
 8009ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dde:	e008      	b.n	8009df2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009de0:	f7fa fb3a 	bl	8004458 <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d901      	bls.n	8009df2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e04d      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009df2:	4b06      	ldr	r3, [pc, #24]	@ (8009e0c <HAL_RCC_OscConfig+0x4ac>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1f0      	bne.n	8009de0 <HAL_RCC_OscConfig+0x480>
 8009dfe:	e045      	b.n	8009e8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d107      	bne.n	8009e18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e040      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
 8009e0c:	40023800 	.word	0x40023800
 8009e10:	40007000 	.word	0x40007000
 8009e14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009e18:	4b1f      	ldr	r3, [pc, #124]	@ (8009e98 <HAL_RCC_OscConfig+0x538>)
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d030      	beq.n	8009e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d129      	bne.n	8009e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d122      	bne.n	8009e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009e48:	4013      	ands	r3, r2
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009e4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d119      	bne.n	8009e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e5e:	085b      	lsrs	r3, r3, #1
 8009e60:	3b01      	subs	r3, #1
 8009e62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d10f      	bne.n	8009e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d107      	bne.n	8009e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d001      	beq.n	8009e8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e000      	b.n	8009e8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	40023800 	.word	0x40023800

08009e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e041      	b.n	8009f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d106      	bne.n	8009ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7f9 fe8c 	bl	8003be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2202      	movs	r2, #2
 8009ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4610      	mov	r0, r2
 8009edc:	f000 ffc4 	bl	800ae68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d001      	beq.n	8009f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e04e      	b.n	8009ff2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2202      	movs	r2, #2
 8009f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0201 	orr.w	r2, r2, #1
 8009f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a23      	ldr	r2, [pc, #140]	@ (800a000 <HAL_TIM_Base_Start_IT+0xc4>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d022      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f7e:	d01d      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a1f      	ldr	r2, [pc, #124]	@ (800a004 <HAL_TIM_Base_Start_IT+0xc8>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d018      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a1e      	ldr	r2, [pc, #120]	@ (800a008 <HAL_TIM_Base_Start_IT+0xcc>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d013      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a1c      	ldr	r2, [pc, #112]	@ (800a00c <HAL_TIM_Base_Start_IT+0xd0>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d00e      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a1b      	ldr	r2, [pc, #108]	@ (800a010 <HAL_TIM_Base_Start_IT+0xd4>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d009      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a19      	ldr	r2, [pc, #100]	@ (800a014 <HAL_TIM_Base_Start_IT+0xd8>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d004      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a18      	ldr	r2, [pc, #96]	@ (800a018 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d111      	bne.n	8009fe0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	f003 0307 	and.w	r3, r3, #7
 8009fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2b06      	cmp	r3, #6
 8009fcc:	d010      	beq.n	8009ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f042 0201 	orr.w	r2, r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fde:	e007      	b.n	8009ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f042 0201 	orr.w	r2, r2, #1
 8009fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	40010000 	.word	0x40010000
 800a004:	40000400 	.word	0x40000400
 800a008:	40000800 	.word	0x40000800
 800a00c:	40000c00 	.word	0x40000c00
 800a010:	40010400 	.word	0x40010400
 800a014:	40014000 	.word	0x40014000
 800a018:	40001800 	.word	0x40001800

0800a01c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68da      	ldr	r2, [r3, #12]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f022 0201 	bic.w	r2, r2, #1
 800a032:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6a1a      	ldr	r2, [r3, #32]
 800a03a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a03e:	4013      	ands	r3, r2
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10f      	bne.n	800a064 <HAL_TIM_Base_Stop_IT+0x48>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6a1a      	ldr	r2, [r3, #32]
 800a04a:	f240 4344 	movw	r3, #1092	@ 0x444
 800a04e:	4013      	ands	r3, r2
 800a050:	2b00      	cmp	r3, #0
 800a052:	d107      	bne.n	800a064 <HAL_TIM_Base_Stop_IT+0x48>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f022 0201 	bic.w	r2, r2, #1
 800a062:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b082      	sub	sp, #8
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e041      	b.n	800a110 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b00      	cmp	r3, #0
 800a096:	d106      	bne.n	800a0a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f839 	bl	800a118 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	f000 fed5 	bl	800ae68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d109      	bne.n	800a150 <HAL_TIM_PWM_Start+0x24>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b01      	cmp	r3, #1
 800a146:	bf14      	ite	ne
 800a148:	2301      	movne	r3, #1
 800a14a:	2300      	moveq	r3, #0
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	e022      	b.n	800a196 <HAL_TIM_PWM_Start+0x6a>
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	2b04      	cmp	r3, #4
 800a154:	d109      	bne.n	800a16a <HAL_TIM_PWM_Start+0x3e>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b01      	cmp	r3, #1
 800a160:	bf14      	ite	ne
 800a162:	2301      	movne	r3, #1
 800a164:	2300      	moveq	r3, #0
 800a166:	b2db      	uxtb	r3, r3
 800a168:	e015      	b.n	800a196 <HAL_TIM_PWM_Start+0x6a>
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	2b08      	cmp	r3, #8
 800a16e:	d109      	bne.n	800a184 <HAL_TIM_PWM_Start+0x58>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a176:	b2db      	uxtb	r3, r3
 800a178:	2b01      	cmp	r3, #1
 800a17a:	bf14      	ite	ne
 800a17c:	2301      	movne	r3, #1
 800a17e:	2300      	moveq	r3, #0
 800a180:	b2db      	uxtb	r3, r3
 800a182:	e008      	b.n	800a196 <HAL_TIM_PWM_Start+0x6a>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	bf14      	ite	ne
 800a190:	2301      	movne	r3, #1
 800a192:	2300      	moveq	r3, #0
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e07c      	b.n	800a298 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d104      	bne.n	800a1ae <HAL_TIM_PWM_Start+0x82>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1ac:	e013      	b.n	800a1d6 <HAL_TIM_PWM_Start+0xaa>
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	d104      	bne.n	800a1be <HAL_TIM_PWM_Start+0x92>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1bc:	e00b      	b.n	800a1d6 <HAL_TIM_PWM_Start+0xaa>
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	d104      	bne.n	800a1ce <HAL_TIM_PWM_Start+0xa2>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2202      	movs	r2, #2
 800a1c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1cc:	e003      	b.n	800a1d6 <HAL_TIM_PWM_Start+0xaa>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f001 f92c 	bl	800b43c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a2d      	ldr	r2, [pc, #180]	@ (800a2a0 <HAL_TIM_PWM_Start+0x174>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d004      	beq.n	800a1f8 <HAL_TIM_PWM_Start+0xcc>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a2c      	ldr	r2, [pc, #176]	@ (800a2a4 <HAL_TIM_PWM_Start+0x178>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d101      	bne.n	800a1fc <HAL_TIM_PWM_Start+0xd0>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e000      	b.n	800a1fe <HAL_TIM_PWM_Start+0xd2>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d007      	beq.n	800a212 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a210:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a22      	ldr	r2, [pc, #136]	@ (800a2a0 <HAL_TIM_PWM_Start+0x174>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d022      	beq.n	800a262 <HAL_TIM_PWM_Start+0x136>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a224:	d01d      	beq.n	800a262 <HAL_TIM_PWM_Start+0x136>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a1f      	ldr	r2, [pc, #124]	@ (800a2a8 <HAL_TIM_PWM_Start+0x17c>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d018      	beq.n	800a262 <HAL_TIM_PWM_Start+0x136>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a1d      	ldr	r2, [pc, #116]	@ (800a2ac <HAL_TIM_PWM_Start+0x180>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d013      	beq.n	800a262 <HAL_TIM_PWM_Start+0x136>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a1c      	ldr	r2, [pc, #112]	@ (800a2b0 <HAL_TIM_PWM_Start+0x184>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d00e      	beq.n	800a262 <HAL_TIM_PWM_Start+0x136>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a16      	ldr	r2, [pc, #88]	@ (800a2a4 <HAL_TIM_PWM_Start+0x178>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d009      	beq.n	800a262 <HAL_TIM_PWM_Start+0x136>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a18      	ldr	r2, [pc, #96]	@ (800a2b4 <HAL_TIM_PWM_Start+0x188>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d004      	beq.n	800a262 <HAL_TIM_PWM_Start+0x136>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a16      	ldr	r2, [pc, #88]	@ (800a2b8 <HAL_TIM_PWM_Start+0x18c>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d111      	bne.n	800a286 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	f003 0307 	and.w	r3, r3, #7
 800a26c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b06      	cmp	r3, #6
 800a272:	d010      	beq.n	800a296 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f042 0201 	orr.w	r2, r2, #1
 800a282:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a284:	e007      	b.n	800a296 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f042 0201 	orr.w	r2, r2, #1
 800a294:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	40010000 	.word	0x40010000
 800a2a4:	40010400 	.word	0x40010400
 800a2a8:	40000400 	.word	0x40000400
 800a2ac:	40000800 	.word	0x40000800
 800a2b0:	40000c00 	.word	0x40000c00
 800a2b4:	40014000 	.word	0x40014000
 800a2b8:	40001800 	.word	0x40001800

0800a2bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f001 f8b4 	bl	800b43c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a2e      	ldr	r2, [pc, #184]	@ (800a394 <HAL_TIM_PWM_Stop+0xd8>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d004      	beq.n	800a2e8 <HAL_TIM_PWM_Stop+0x2c>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a2d      	ldr	r2, [pc, #180]	@ (800a398 <HAL_TIM_PWM_Stop+0xdc>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d101      	bne.n	800a2ec <HAL_TIM_PWM_Stop+0x30>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e000      	b.n	800a2ee <HAL_TIM_PWM_Stop+0x32>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d017      	beq.n	800a322 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	6a1a      	ldr	r2, [r3, #32]
 800a2f8:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10f      	bne.n	800a322 <HAL_TIM_PWM_Stop+0x66>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6a1a      	ldr	r2, [r3, #32]
 800a308:	f240 4344 	movw	r3, #1092	@ 0x444
 800a30c:	4013      	ands	r3, r2
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d107      	bne.n	800a322 <HAL_TIM_PWM_Stop+0x66>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a320:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6a1a      	ldr	r2, [r3, #32]
 800a328:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a32c:	4013      	ands	r3, r2
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10f      	bne.n	800a352 <HAL_TIM_PWM_Stop+0x96>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6a1a      	ldr	r2, [r3, #32]
 800a338:	f240 4344 	movw	r3, #1092	@ 0x444
 800a33c:	4013      	ands	r3, r2
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d107      	bne.n	800a352 <HAL_TIM_PWM_Stop+0x96>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f022 0201 	bic.w	r2, r2, #1
 800a350:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d104      	bne.n	800a362 <HAL_TIM_PWM_Stop+0xa6>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a360:	e013      	b.n	800a38a <HAL_TIM_PWM_Stop+0xce>
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2b04      	cmp	r3, #4
 800a366:	d104      	bne.n	800a372 <HAL_TIM_PWM_Stop+0xb6>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a370:	e00b      	b.n	800a38a <HAL_TIM_PWM_Stop+0xce>
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b08      	cmp	r3, #8
 800a376:	d104      	bne.n	800a382 <HAL_TIM_PWM_Stop+0xc6>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a380:	e003      	b.n	800a38a <HAL_TIM_PWM_Stop+0xce>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	40010000 	.word	0x40010000
 800a398:	40010400 	.word	0x40010400

0800a39c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d109      	bne.n	800a3c8 <HAL_TIM_PWM_Start_DMA+0x2c>
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	bf0c      	ite	eq
 800a3c0:	2301      	moveq	r3, #1
 800a3c2:	2300      	movne	r3, #0
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	e022      	b.n	800a40e <HAL_TIM_PWM_Start_DMA+0x72>
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	2b04      	cmp	r3, #4
 800a3cc:	d109      	bne.n	800a3e2 <HAL_TIM_PWM_Start_DMA+0x46>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	bf0c      	ite	eq
 800a3da:	2301      	moveq	r3, #1
 800a3dc:	2300      	movne	r3, #0
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	e015      	b.n	800a40e <HAL_TIM_PWM_Start_DMA+0x72>
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2b08      	cmp	r3, #8
 800a3e6:	d109      	bne.n	800a3fc <HAL_TIM_PWM_Start_DMA+0x60>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b02      	cmp	r3, #2
 800a3f2:	bf0c      	ite	eq
 800a3f4:	2301      	moveq	r3, #1
 800a3f6:	2300      	movne	r3, #0
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	e008      	b.n	800a40e <HAL_TIM_PWM_Start_DMA+0x72>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b02      	cmp	r3, #2
 800a406:	bf0c      	ite	eq
 800a408:	2301      	moveq	r3, #1
 800a40a:	2300      	movne	r3, #0
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800a412:	2302      	movs	r3, #2
 800a414:	e171      	b.n	800a6fa <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d109      	bne.n	800a430 <HAL_TIM_PWM_Start_DMA+0x94>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a422:	b2db      	uxtb	r3, r3
 800a424:	2b01      	cmp	r3, #1
 800a426:	bf0c      	ite	eq
 800a428:	2301      	moveq	r3, #1
 800a42a:	2300      	movne	r3, #0
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	e022      	b.n	800a476 <HAL_TIM_PWM_Start_DMA+0xda>
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	2b04      	cmp	r3, #4
 800a434:	d109      	bne.n	800a44a <HAL_TIM_PWM_Start_DMA+0xae>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b01      	cmp	r3, #1
 800a440:	bf0c      	ite	eq
 800a442:	2301      	moveq	r3, #1
 800a444:	2300      	movne	r3, #0
 800a446:	b2db      	uxtb	r3, r3
 800a448:	e015      	b.n	800a476 <HAL_TIM_PWM_Start_DMA+0xda>
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d109      	bne.n	800a464 <HAL_TIM_PWM_Start_DMA+0xc8>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a456:	b2db      	uxtb	r3, r3
 800a458:	2b01      	cmp	r3, #1
 800a45a:	bf0c      	ite	eq
 800a45c:	2301      	moveq	r3, #1
 800a45e:	2300      	movne	r3, #0
 800a460:	b2db      	uxtb	r3, r3
 800a462:	e008      	b.n	800a476 <HAL_TIM_PWM_Start_DMA+0xda>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	bf0c      	ite	eq
 800a470:	2301      	moveq	r3, #1
 800a472:	2300      	movne	r3, #0
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d024      	beq.n	800a4c4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d104      	bne.n	800a48a <HAL_TIM_PWM_Start_DMA+0xee>
 800a480:	887b      	ldrh	r3, [r7, #2]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e137      	b.n	800a6fa <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d104      	bne.n	800a49a <HAL_TIM_PWM_Start_DMA+0xfe>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2202      	movs	r2, #2
 800a494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a498:	e016      	b.n	800a4c8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	d104      	bne.n	800a4aa <HAL_TIM_PWM_Start_DMA+0x10e>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a4a8:	e00e      	b.n	800a4c8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2b08      	cmp	r3, #8
 800a4ae:	d104      	bne.n	800a4ba <HAL_TIM_PWM_Start_DMA+0x11e>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a4b8:	e006      	b.n	800a4c8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2202      	movs	r2, #2
 800a4be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a4c2:	e001      	b.n	800a4c8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e118      	b.n	800a6fa <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b0c      	cmp	r3, #12
 800a4cc:	f200 80ae 	bhi.w	800a62c <HAL_TIM_PWM_Start_DMA+0x290>
 800a4d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800a4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d6:	bf00      	nop
 800a4d8:	0800a50d 	.word	0x0800a50d
 800a4dc:	0800a62d 	.word	0x0800a62d
 800a4e0:	0800a62d 	.word	0x0800a62d
 800a4e4:	0800a62d 	.word	0x0800a62d
 800a4e8:	0800a555 	.word	0x0800a555
 800a4ec:	0800a62d 	.word	0x0800a62d
 800a4f0:	0800a62d 	.word	0x0800a62d
 800a4f4:	0800a62d 	.word	0x0800a62d
 800a4f8:	0800a59d 	.word	0x0800a59d
 800a4fc:	0800a62d 	.word	0x0800a62d
 800a500:	0800a62d 	.word	0x0800a62d
 800a504:	0800a62d 	.word	0x0800a62d
 800a508:	0800a5e5 	.word	0x0800a5e5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a510:	4a7c      	ldr	r2, [pc, #496]	@ (800a704 <HAL_TIM_PWM_Start_DMA+0x368>)
 800a512:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a518:	4a7b      	ldr	r2, [pc, #492]	@ (800a708 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800a51a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a520:	4a7a      	ldr	r2, [pc, #488]	@ (800a70c <HAL_TIM_PWM_Start_DMA+0x370>)
 800a522:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a528:	6879      	ldr	r1, [r7, #4]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3334      	adds	r3, #52	@ 0x34
 800a530:	461a      	mov	r2, r3
 800a532:	887b      	ldrh	r3, [r7, #2]
 800a534:	f7fb fcf2 	bl	8005f1c <HAL_DMA_Start_IT>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e0db      	b.n	800a6fa <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68da      	ldr	r2, [r3, #12]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a550:	60da      	str	r2, [r3, #12]
      break;
 800a552:	e06e      	b.n	800a632 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a558:	4a6a      	ldr	r2, [pc, #424]	@ (800a704 <HAL_TIM_PWM_Start_DMA+0x368>)
 800a55a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a560:	4a69      	ldr	r2, [pc, #420]	@ (800a708 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800a562:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a568:	4a68      	ldr	r2, [pc, #416]	@ (800a70c <HAL_TIM_PWM_Start_DMA+0x370>)
 800a56a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	3338      	adds	r3, #56	@ 0x38
 800a578:	461a      	mov	r2, r3
 800a57a:	887b      	ldrh	r3, [r7, #2]
 800a57c:	f7fb fcce 	bl	8005f1c <HAL_DMA_Start_IT>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	e0b7      	b.n	800a6fa <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a598:	60da      	str	r2, [r3, #12]
      break;
 800a59a:	e04a      	b.n	800a632 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a0:	4a58      	ldr	r2, [pc, #352]	@ (800a704 <HAL_TIM_PWM_Start_DMA+0x368>)
 800a5a2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a8:	4a57      	ldr	r2, [pc, #348]	@ (800a708 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800a5aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b0:	4a56      	ldr	r2, [pc, #344]	@ (800a70c <HAL_TIM_PWM_Start_DMA+0x370>)
 800a5b2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a5b8:	6879      	ldr	r1, [r7, #4]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	333c      	adds	r3, #60	@ 0x3c
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	887b      	ldrh	r3, [r7, #2]
 800a5c4:	f7fb fcaa 	bl	8005f1c <HAL_DMA_Start_IT>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e093      	b.n	800a6fa <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68da      	ldr	r2, [r3, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5e0:	60da      	str	r2, [r3, #12]
      break;
 800a5e2:	e026      	b.n	800a632 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e8:	4a46      	ldr	r2, [pc, #280]	@ (800a704 <HAL_TIM_PWM_Start_DMA+0x368>)
 800a5ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f0:	4a45      	ldr	r2, [pc, #276]	@ (800a708 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800a5f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f8:	4a44      	ldr	r2, [pc, #272]	@ (800a70c <HAL_TIM_PWM_Start_DMA+0x370>)
 800a5fa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a600:	6879      	ldr	r1, [r7, #4]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	3340      	adds	r3, #64	@ 0x40
 800a608:	461a      	mov	r2, r3
 800a60a:	887b      	ldrh	r3, [r7, #2]
 800a60c:	f7fb fc86 	bl	8005f1c <HAL_DMA_Start_IT>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e06f      	b.n	800a6fa <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68da      	ldr	r2, [r3, #12]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a628:	60da      	str	r2, [r3, #12]
      break;
 800a62a:	e002      	b.n	800a632 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	75fb      	strb	r3, [r7, #23]
      break;
 800a630:	bf00      	nop
  }

  if (status == HAL_OK)
 800a632:	7dfb      	ldrb	r3, [r7, #23]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d15f      	bne.n	800a6f8 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2201      	movs	r2, #1
 800a63e:	68b9      	ldr	r1, [r7, #8]
 800a640:	4618      	mov	r0, r3
 800a642:	f000 fefb 	bl	800b43c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a31      	ldr	r2, [pc, #196]	@ (800a710 <HAL_TIM_PWM_Start_DMA+0x374>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d004      	beq.n	800a65a <HAL_TIM_PWM_Start_DMA+0x2be>
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a2f      	ldr	r2, [pc, #188]	@ (800a714 <HAL_TIM_PWM_Start_DMA+0x378>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d101      	bne.n	800a65e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800a65a:	2301      	movs	r3, #1
 800a65c:	e000      	b.n	800a660 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800a65e:	2300      	movs	r3, #0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d007      	beq.n	800a674 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a672:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a25      	ldr	r2, [pc, #148]	@ (800a710 <HAL_TIM_PWM_Start_DMA+0x374>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d022      	beq.n	800a6c4 <HAL_TIM_PWM_Start_DMA+0x328>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a686:	d01d      	beq.n	800a6c4 <HAL_TIM_PWM_Start_DMA+0x328>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a22      	ldr	r2, [pc, #136]	@ (800a718 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d018      	beq.n	800a6c4 <HAL_TIM_PWM_Start_DMA+0x328>
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a21      	ldr	r2, [pc, #132]	@ (800a71c <HAL_TIM_PWM_Start_DMA+0x380>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d013      	beq.n	800a6c4 <HAL_TIM_PWM_Start_DMA+0x328>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a1f      	ldr	r2, [pc, #124]	@ (800a720 <HAL_TIM_PWM_Start_DMA+0x384>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00e      	beq.n	800a6c4 <HAL_TIM_PWM_Start_DMA+0x328>
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a1a      	ldr	r2, [pc, #104]	@ (800a714 <HAL_TIM_PWM_Start_DMA+0x378>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d009      	beq.n	800a6c4 <HAL_TIM_PWM_Start_DMA+0x328>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a724 <HAL_TIM_PWM_Start_DMA+0x388>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d004      	beq.n	800a6c4 <HAL_TIM_PWM_Start_DMA+0x328>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a1a      	ldr	r2, [pc, #104]	@ (800a728 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d111      	bne.n	800a6e8 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	f003 0307 	and.w	r3, r3, #7
 800a6ce:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	2b06      	cmp	r3, #6
 800a6d4:	d010      	beq.n	800a6f8 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f042 0201 	orr.w	r2, r2, #1
 800a6e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6e6:	e007      	b.n	800a6f8 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f042 0201 	orr.w	r2, r2, #1
 800a6f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3718      	adds	r7, #24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	0800ad59 	.word	0x0800ad59
 800a708:	0800ae01 	.word	0x0800ae01
 800a70c:	0800acc7 	.word	0x0800acc7
 800a710:	40010000 	.word	0x40010000
 800a714:	40010400 	.word	0x40010400
 800a718:	40000400 	.word	0x40000400
 800a71c:	40000800 	.word	0x40000800
 800a720:	40000c00 	.word	0x40000c00
 800a724:	40014000 	.word	0x40014000
 800a728:	40001800 	.word	0x40001800

0800a72c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	f003 0302 	and.w	r3, r3, #2
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d122      	bne.n	800a788 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	f003 0302 	and.w	r3, r3, #2
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d11b      	bne.n	800a788 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f06f 0202 	mvn.w	r2, #2
 800a758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2201      	movs	r2, #1
 800a75e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	f003 0303 	and.w	r3, r3, #3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fa77 	bl	800ac62 <HAL_TIM_IC_CaptureCallback>
 800a774:	e005      	b.n	800a782 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fa69 	bl	800ac4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fa7a 	bl	800ac76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	f003 0304 	and.w	r3, r3, #4
 800a792:	2b04      	cmp	r3, #4
 800a794:	d122      	bne.n	800a7dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f003 0304 	and.w	r3, r3, #4
 800a7a0:	2b04      	cmp	r3, #4
 800a7a2:	d11b      	bne.n	800a7dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f06f 0204 	mvn.w	r2, #4
 800a7ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2202      	movs	r2, #2
 800a7b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d003      	beq.n	800a7ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fa4d 	bl	800ac62 <HAL_TIM_IC_CaptureCallback>
 800a7c8:	e005      	b.n	800a7d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fa3f 	bl	800ac4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fa50 	bl	800ac76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	f003 0308 	and.w	r3, r3, #8
 800a7e6:	2b08      	cmp	r3, #8
 800a7e8:	d122      	bne.n	800a830 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	f003 0308 	and.w	r3, r3, #8
 800a7f4:	2b08      	cmp	r3, #8
 800a7f6:	d11b      	bne.n	800a830 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f06f 0208 	mvn.w	r2, #8
 800a800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2204      	movs	r2, #4
 800a806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	f003 0303 	and.w	r3, r3, #3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fa23 	bl	800ac62 <HAL_TIM_IC_CaptureCallback>
 800a81c:	e005      	b.n	800a82a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fa15 	bl	800ac4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fa26 	bl	800ac76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	f003 0310 	and.w	r3, r3, #16
 800a83a:	2b10      	cmp	r3, #16
 800a83c:	d122      	bne.n	800a884 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	f003 0310 	and.w	r3, r3, #16
 800a848:	2b10      	cmp	r3, #16
 800a84a:	d11b      	bne.n	800a884 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f06f 0210 	mvn.w	r2, #16
 800a854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2208      	movs	r2, #8
 800a85a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f9f9 	bl	800ac62 <HAL_TIM_IC_CaptureCallback>
 800a870:	e005      	b.n	800a87e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f9eb 	bl	800ac4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f9fc 	bl	800ac76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	f003 0301 	and.w	r3, r3, #1
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d10e      	bne.n	800a8b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d107      	bne.n	800a8b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f06f 0201 	mvn.w	r2, #1
 800a8a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7f8 fcbe 	bl	800322c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ba:	2b80      	cmp	r3, #128	@ 0x80
 800a8bc:	d10e      	bne.n	800a8dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8c8:	2b80      	cmp	r3, #128	@ 0x80
 800a8ca:	d107      	bne.n	800a8dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a8d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f001 f946 	bl	800bb68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8e6:	2b40      	cmp	r3, #64	@ 0x40
 800a8e8:	d10e      	bne.n	800a908 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8f4:	2b40      	cmp	r3, #64	@ 0x40
 800a8f6:	d107      	bne.n	800a908 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f9cb 	bl	800ac9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	f003 0320 	and.w	r3, r3, #32
 800a912:	2b20      	cmp	r3, #32
 800a914:	d10e      	bne.n	800a934 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	f003 0320 	and.w	r3, r3, #32
 800a920:	2b20      	cmp	r3, #32
 800a922:	d107      	bne.n	800a934 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f06f 0220 	mvn.w	r2, #32
 800a92c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f001 f910 	bl	800bb54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a934:	bf00      	nop
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a948:	2300      	movs	r3, #0
 800a94a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a952:	2b01      	cmp	r3, #1
 800a954:	d101      	bne.n	800a95a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a956:	2302      	movs	r3, #2
 800a958:	e0ae      	b.n	800aab8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b0c      	cmp	r3, #12
 800a966:	f200 809f 	bhi.w	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a96a:	a201      	add	r2, pc, #4	@ (adr r2, 800a970 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a970:	0800a9a5 	.word	0x0800a9a5
 800a974:	0800aaa9 	.word	0x0800aaa9
 800a978:	0800aaa9 	.word	0x0800aaa9
 800a97c:	0800aaa9 	.word	0x0800aaa9
 800a980:	0800a9e5 	.word	0x0800a9e5
 800a984:	0800aaa9 	.word	0x0800aaa9
 800a988:	0800aaa9 	.word	0x0800aaa9
 800a98c:	0800aaa9 	.word	0x0800aaa9
 800a990:	0800aa27 	.word	0x0800aa27
 800a994:	0800aaa9 	.word	0x0800aaa9
 800a998:	0800aaa9 	.word	0x0800aaa9
 800a99c:	0800aaa9 	.word	0x0800aaa9
 800a9a0:	0800aa67 	.word	0x0800aa67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68b9      	ldr	r1, [r7, #8]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 fafc 	bl	800afa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	699a      	ldr	r2, [r3, #24]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f042 0208 	orr.w	r2, r2, #8
 800a9be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	699a      	ldr	r2, [r3, #24]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f022 0204 	bic.w	r2, r2, #4
 800a9ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	6999      	ldr	r1, [r3, #24]
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	691a      	ldr	r2, [r3, #16]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	619a      	str	r2, [r3, #24]
      break;
 800a9e2:	e064      	b.n	800aaae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68b9      	ldr	r1, [r7, #8]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 fb4c 	bl	800b088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	699a      	ldr	r2, [r3, #24]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a9fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	699a      	ldr	r2, [r3, #24]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6999      	ldr	r1, [r3, #24]
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	021a      	lsls	r2, r3, #8
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	430a      	orrs	r2, r1
 800aa22:	619a      	str	r2, [r3, #24]
      break;
 800aa24:	e043      	b.n	800aaae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68b9      	ldr	r1, [r7, #8]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 fba1 	bl	800b174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	69da      	ldr	r2, [r3, #28]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f042 0208 	orr.w	r2, r2, #8
 800aa40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	69da      	ldr	r2, [r3, #28]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f022 0204 	bic.w	r2, r2, #4
 800aa50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	69d9      	ldr	r1, [r3, #28]
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	691a      	ldr	r2, [r3, #16]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	430a      	orrs	r2, r1
 800aa62:	61da      	str	r2, [r3, #28]
      break;
 800aa64:	e023      	b.n	800aaae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68b9      	ldr	r1, [r7, #8]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 fbf5 	bl	800b25c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	69da      	ldr	r2, [r3, #28]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	69da      	ldr	r2, [r3, #28]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	69d9      	ldr	r1, [r3, #28]
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	691b      	ldr	r3, [r3, #16]
 800aa9c:	021a      	lsls	r2, r3, #8
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	430a      	orrs	r2, r1
 800aaa4:	61da      	str	r2, [r3, #28]
      break;
 800aaa6:	e002      	b.n	800aaae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	75fb      	strb	r3, [r7, #23]
      break;
 800aaac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aab6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d101      	bne.n	800aadc <HAL_TIM_ConfigClockSource+0x1c>
 800aad8:	2302      	movs	r3, #2
 800aada:	e0b4      	b.n	800ac46 <HAL_TIM_ConfigClockSource+0x186>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2202      	movs	r2, #2
 800aae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aafa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab14:	d03e      	beq.n	800ab94 <HAL_TIM_ConfigClockSource+0xd4>
 800ab16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab1a:	f200 8087 	bhi.w	800ac2c <HAL_TIM_ConfigClockSource+0x16c>
 800ab1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab22:	f000 8086 	beq.w	800ac32 <HAL_TIM_ConfigClockSource+0x172>
 800ab26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab2a:	d87f      	bhi.n	800ac2c <HAL_TIM_ConfigClockSource+0x16c>
 800ab2c:	2b70      	cmp	r3, #112	@ 0x70
 800ab2e:	d01a      	beq.n	800ab66 <HAL_TIM_ConfigClockSource+0xa6>
 800ab30:	2b70      	cmp	r3, #112	@ 0x70
 800ab32:	d87b      	bhi.n	800ac2c <HAL_TIM_ConfigClockSource+0x16c>
 800ab34:	2b60      	cmp	r3, #96	@ 0x60
 800ab36:	d050      	beq.n	800abda <HAL_TIM_ConfigClockSource+0x11a>
 800ab38:	2b60      	cmp	r3, #96	@ 0x60
 800ab3a:	d877      	bhi.n	800ac2c <HAL_TIM_ConfigClockSource+0x16c>
 800ab3c:	2b50      	cmp	r3, #80	@ 0x50
 800ab3e:	d03c      	beq.n	800abba <HAL_TIM_ConfigClockSource+0xfa>
 800ab40:	2b50      	cmp	r3, #80	@ 0x50
 800ab42:	d873      	bhi.n	800ac2c <HAL_TIM_ConfigClockSource+0x16c>
 800ab44:	2b40      	cmp	r3, #64	@ 0x40
 800ab46:	d058      	beq.n	800abfa <HAL_TIM_ConfigClockSource+0x13a>
 800ab48:	2b40      	cmp	r3, #64	@ 0x40
 800ab4a:	d86f      	bhi.n	800ac2c <HAL_TIM_ConfigClockSource+0x16c>
 800ab4c:	2b30      	cmp	r3, #48	@ 0x30
 800ab4e:	d064      	beq.n	800ac1a <HAL_TIM_ConfigClockSource+0x15a>
 800ab50:	2b30      	cmp	r3, #48	@ 0x30
 800ab52:	d86b      	bhi.n	800ac2c <HAL_TIM_ConfigClockSource+0x16c>
 800ab54:	2b20      	cmp	r3, #32
 800ab56:	d060      	beq.n	800ac1a <HAL_TIM_ConfigClockSource+0x15a>
 800ab58:	2b20      	cmp	r3, #32
 800ab5a:	d867      	bhi.n	800ac2c <HAL_TIM_ConfigClockSource+0x16c>
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d05c      	beq.n	800ac1a <HAL_TIM_ConfigClockSource+0x15a>
 800ab60:	2b10      	cmp	r3, #16
 800ab62:	d05a      	beq.n	800ac1a <HAL_TIM_ConfigClockSource+0x15a>
 800ab64:	e062      	b.n	800ac2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6818      	ldr	r0, [r3, #0]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	6899      	ldr	r1, [r3, #8]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	685a      	ldr	r2, [r3, #4]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	f000 fc41 	bl	800b3fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ab88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	609a      	str	r2, [r3, #8]
      break;
 800ab92:	e04f      	b.n	800ac34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6818      	ldr	r0, [r3, #0]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	6899      	ldr	r1, [r3, #8]
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	f000 fc2a 	bl	800b3fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	689a      	ldr	r2, [r3, #8]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800abb6:	609a      	str	r2, [r3, #8]
      break;
 800abb8:	e03c      	b.n	800ac34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6818      	ldr	r0, [r3, #0]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	6859      	ldr	r1, [r3, #4]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	461a      	mov	r2, r3
 800abc8:	f000 fb9e 	bl	800b308 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2150      	movs	r1, #80	@ 0x50
 800abd2:	4618      	mov	r0, r3
 800abd4:	f000 fbf7 	bl	800b3c6 <TIM_ITRx_SetConfig>
      break;
 800abd8:	e02c      	b.n	800ac34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6818      	ldr	r0, [r3, #0]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	6859      	ldr	r1, [r3, #4]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	461a      	mov	r2, r3
 800abe8:	f000 fbbd 	bl	800b366 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2160      	movs	r1, #96	@ 0x60
 800abf2:	4618      	mov	r0, r3
 800abf4:	f000 fbe7 	bl	800b3c6 <TIM_ITRx_SetConfig>
      break;
 800abf8:	e01c      	b.n	800ac34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6818      	ldr	r0, [r3, #0]
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	6859      	ldr	r1, [r3, #4]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	461a      	mov	r2, r3
 800ac08:	f000 fb7e 	bl	800b308 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2140      	movs	r1, #64	@ 0x40
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 fbd7 	bl	800b3c6 <TIM_ITRx_SetConfig>
      break;
 800ac18:	e00c      	b.n	800ac34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4619      	mov	r1, r3
 800ac24:	4610      	mov	r0, r2
 800ac26:	f000 fbce 	bl	800b3c6 <TIM_ITRx_SetConfig>
      break;
 800ac2a:	e003      	b.n	800ac34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac30:	e000      	b.n	800ac34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ac32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac4e:	b480      	push	{r7}
 800ac50:	b083      	sub	sp, #12
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac56:	bf00      	nop
 800ac58:	370c      	adds	r7, #12
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b083      	sub	sp, #12
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac6a:	bf00      	nop
 800ac6c:	370c      	adds	r7, #12
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac7e:	bf00      	nop
 800ac80:	370c      	adds	r7, #12
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b083      	sub	sp, #12
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ac92:	bf00      	nop
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aca6:	bf00      	nop
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b083      	sub	sp, #12
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800acba:	bf00      	nop
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acd2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d107      	bne.n	800acee <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2201      	movs	r2, #1
 800ace2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800acec:	e02a      	b.n	800ad44 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d107      	bne.n	800ad08 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2202      	movs	r2, #2
 800acfc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2201      	movs	r2, #1
 800ad02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad06:	e01d      	b.n	800ad44 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d107      	bne.n	800ad22 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2204      	movs	r2, #4
 800ad16:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad20:	e010      	b.n	800ad44 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d107      	bne.n	800ad3c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2208      	movs	r2, #8
 800ad30:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad3a:	e003      	b.n	800ad44 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7ff ffb4 	bl	800acb2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	771a      	strb	r2, [r3, #28]
}
 800ad50:	bf00      	nop
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad64:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d10b      	bne.n	800ad88 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2201      	movs	r2, #1
 800ad74:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d136      	bne.n	800adec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad86:	e031      	b.n	800adec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d10b      	bne.n	800adaa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2202      	movs	r2, #2
 800ad96:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	69db      	ldr	r3, [r3, #28]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d125      	bne.n	800adec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ada8:	e020      	b.n	800adec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d10b      	bne.n	800adcc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2204      	movs	r2, #4
 800adb8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	69db      	ldr	r3, [r3, #28]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d114      	bne.n	800adec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2201      	movs	r2, #1
 800adc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800adca:	e00f      	b.n	800adec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	429a      	cmp	r2, r3
 800add4:	d10a      	bne.n	800adec <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2208      	movs	r2, #8
 800adda:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	69db      	ldr	r3, [r3, #28]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d103      	bne.n	800adec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f7ff ff42 	bl	800ac76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	771a      	strb	r2, [r3, #28]
}
 800adf8:	bf00      	nop
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae0c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d103      	bne.n	800ae20 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	771a      	strb	r2, [r3, #28]
 800ae1e:	e019      	b.n	800ae54 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d103      	bne.n	800ae32 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2202      	movs	r2, #2
 800ae2e:	771a      	strb	r2, [r3, #28]
 800ae30:	e010      	b.n	800ae54 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d103      	bne.n	800ae44 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2204      	movs	r2, #4
 800ae40:	771a      	strb	r2, [r3, #28]
 800ae42:	e007      	b.n	800ae54 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d102      	bne.n	800ae54 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2208      	movs	r2, #8
 800ae52:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7ff ff18 	bl	800ac8a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	771a      	strb	r2, [r3, #28]
}
 800ae60:	bf00      	nop
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a40      	ldr	r2, [pc, #256]	@ (800af7c <TIM_Base_SetConfig+0x114>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d013      	beq.n	800aea8 <TIM_Base_SetConfig+0x40>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae86:	d00f      	beq.n	800aea8 <TIM_Base_SetConfig+0x40>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a3d      	ldr	r2, [pc, #244]	@ (800af80 <TIM_Base_SetConfig+0x118>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d00b      	beq.n	800aea8 <TIM_Base_SetConfig+0x40>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a3c      	ldr	r2, [pc, #240]	@ (800af84 <TIM_Base_SetConfig+0x11c>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d007      	beq.n	800aea8 <TIM_Base_SetConfig+0x40>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a3b      	ldr	r2, [pc, #236]	@ (800af88 <TIM_Base_SetConfig+0x120>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d003      	beq.n	800aea8 <TIM_Base_SetConfig+0x40>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a3a      	ldr	r2, [pc, #232]	@ (800af8c <TIM_Base_SetConfig+0x124>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d108      	bne.n	800aeba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aeae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a2f      	ldr	r2, [pc, #188]	@ (800af7c <TIM_Base_SetConfig+0x114>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d02b      	beq.n	800af1a <TIM_Base_SetConfig+0xb2>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aec8:	d027      	beq.n	800af1a <TIM_Base_SetConfig+0xb2>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a2c      	ldr	r2, [pc, #176]	@ (800af80 <TIM_Base_SetConfig+0x118>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d023      	beq.n	800af1a <TIM_Base_SetConfig+0xb2>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a2b      	ldr	r2, [pc, #172]	@ (800af84 <TIM_Base_SetConfig+0x11c>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d01f      	beq.n	800af1a <TIM_Base_SetConfig+0xb2>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4a2a      	ldr	r2, [pc, #168]	@ (800af88 <TIM_Base_SetConfig+0x120>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d01b      	beq.n	800af1a <TIM_Base_SetConfig+0xb2>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a29      	ldr	r2, [pc, #164]	@ (800af8c <TIM_Base_SetConfig+0x124>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d017      	beq.n	800af1a <TIM_Base_SetConfig+0xb2>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a28      	ldr	r2, [pc, #160]	@ (800af90 <TIM_Base_SetConfig+0x128>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d013      	beq.n	800af1a <TIM_Base_SetConfig+0xb2>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a27      	ldr	r2, [pc, #156]	@ (800af94 <TIM_Base_SetConfig+0x12c>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d00f      	beq.n	800af1a <TIM_Base_SetConfig+0xb2>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a26      	ldr	r2, [pc, #152]	@ (800af98 <TIM_Base_SetConfig+0x130>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d00b      	beq.n	800af1a <TIM_Base_SetConfig+0xb2>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a25      	ldr	r2, [pc, #148]	@ (800af9c <TIM_Base_SetConfig+0x134>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d007      	beq.n	800af1a <TIM_Base_SetConfig+0xb2>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a24      	ldr	r2, [pc, #144]	@ (800afa0 <TIM_Base_SetConfig+0x138>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d003      	beq.n	800af1a <TIM_Base_SetConfig+0xb2>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a23      	ldr	r2, [pc, #140]	@ (800afa4 <TIM_Base_SetConfig+0x13c>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d108      	bne.n	800af2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	4313      	orrs	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	689a      	ldr	r2, [r3, #8]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a0a      	ldr	r2, [pc, #40]	@ (800af7c <TIM_Base_SetConfig+0x114>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d003      	beq.n	800af60 <TIM_Base_SetConfig+0xf8>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a0c      	ldr	r2, [pc, #48]	@ (800af8c <TIM_Base_SetConfig+0x124>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d103      	bne.n	800af68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	691a      	ldr	r2, [r3, #16]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	615a      	str	r2, [r3, #20]
}
 800af6e:	bf00      	nop
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	40010000 	.word	0x40010000
 800af80:	40000400 	.word	0x40000400
 800af84:	40000800 	.word	0x40000800
 800af88:	40000c00 	.word	0x40000c00
 800af8c:	40010400 	.word	0x40010400
 800af90:	40014000 	.word	0x40014000
 800af94:	40014400 	.word	0x40014400
 800af98:	40014800 	.word	0x40014800
 800af9c:	40001800 	.word	0x40001800
 800afa0:	40001c00 	.word	0x40001c00
 800afa4:	40002000 	.word	0x40002000

0800afa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b087      	sub	sp, #28
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	f023 0201 	bic.w	r2, r3, #1
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	699b      	ldr	r3, [r3, #24]
 800afce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f023 0303 	bic.w	r3, r3, #3
 800afde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f023 0302 	bic.w	r3, r3, #2
 800aff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	4313      	orrs	r3, r2
 800affa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a20      	ldr	r2, [pc, #128]	@ (800b080 <TIM_OC1_SetConfig+0xd8>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d003      	beq.n	800b00c <TIM_OC1_SetConfig+0x64>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a1f      	ldr	r2, [pc, #124]	@ (800b084 <TIM_OC1_SetConfig+0xdc>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d10c      	bne.n	800b026 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	f023 0308 	bic.w	r3, r3, #8
 800b012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	697a      	ldr	r2, [r7, #20]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	f023 0304 	bic.w	r3, r3, #4
 800b024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a15      	ldr	r2, [pc, #84]	@ (800b080 <TIM_OC1_SetConfig+0xd8>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d003      	beq.n	800b036 <TIM_OC1_SetConfig+0x8e>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a14      	ldr	r2, [pc, #80]	@ (800b084 <TIM_OC1_SetConfig+0xdc>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d111      	bne.n	800b05a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b03c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	695b      	ldr	r3, [r3, #20]
 800b04a:	693a      	ldr	r2, [r7, #16]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	4313      	orrs	r3, r2
 800b058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	685a      	ldr	r2, [r3, #4]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	621a      	str	r2, [r3, #32]
}
 800b074:	bf00      	nop
 800b076:	371c      	adds	r7, #28
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr
 800b080:	40010000 	.word	0x40010000
 800b084:	40010400 	.word	0x40010400

0800b088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b088:	b480      	push	{r7}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	f023 0210 	bic.w	r2, r3, #16
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	021b      	lsls	r3, r3, #8
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f023 0320 	bic.w	r3, r3, #32
 800b0d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	011b      	lsls	r3, r3, #4
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a22      	ldr	r2, [pc, #136]	@ (800b16c <TIM_OC2_SetConfig+0xe4>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d003      	beq.n	800b0f0 <TIM_OC2_SetConfig+0x68>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a21      	ldr	r2, [pc, #132]	@ (800b170 <TIM_OC2_SetConfig+0xe8>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d10d      	bne.n	800b10c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	011b      	lsls	r3, r3, #4
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	4313      	orrs	r3, r2
 800b102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b10a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4a17      	ldr	r2, [pc, #92]	@ (800b16c <TIM_OC2_SetConfig+0xe4>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d003      	beq.n	800b11c <TIM_OC2_SetConfig+0x94>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a16      	ldr	r2, [pc, #88]	@ (800b170 <TIM_OC2_SetConfig+0xe8>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d113      	bne.n	800b144 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b12a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	695b      	ldr	r3, [r3, #20]
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	4313      	orrs	r3, r2
 800b136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	4313      	orrs	r3, r2
 800b142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	685a      	ldr	r2, [r3, #4]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	621a      	str	r2, [r3, #32]
}
 800b15e:	bf00      	nop
 800b160:	371c      	adds	r7, #28
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	40010000 	.word	0x40010000
 800b170:	40010400 	.word	0x40010400

0800b174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b174:	b480      	push	{r7}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	69db      	ldr	r3, [r3, #28]
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f023 0303 	bic.w	r3, r3, #3
 800b1aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b1bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	021b      	lsls	r3, r3, #8
 800b1c4:	697a      	ldr	r2, [r7, #20]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a21      	ldr	r2, [pc, #132]	@ (800b254 <TIM_OC3_SetConfig+0xe0>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d003      	beq.n	800b1da <TIM_OC3_SetConfig+0x66>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a20      	ldr	r2, [pc, #128]	@ (800b258 <TIM_OC3_SetConfig+0xe4>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d10d      	bne.n	800b1f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b1e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	021b      	lsls	r3, r3, #8
 800b1e8:	697a      	ldr	r2, [r7, #20]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b1f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a16      	ldr	r2, [pc, #88]	@ (800b254 <TIM_OC3_SetConfig+0xe0>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d003      	beq.n	800b206 <TIM_OC3_SetConfig+0x92>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a15      	ldr	r2, [pc, #84]	@ (800b258 <TIM_OC3_SetConfig+0xe4>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d113      	bne.n	800b22e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b20c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	011b      	lsls	r3, r3, #4
 800b21c:	693a      	ldr	r2, [r7, #16]
 800b21e:	4313      	orrs	r3, r2
 800b220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	011b      	lsls	r3, r3, #4
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	693a      	ldr	r2, [r7, #16]
 800b232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	697a      	ldr	r2, [r7, #20]
 800b246:	621a      	str	r2, [r3, #32]
}
 800b248:	bf00      	nop
 800b24a:	371c      	adds	r7, #28
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	40010000 	.word	0x40010000
 800b258:	40010400 	.word	0x40010400

0800b25c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b087      	sub	sp, #28
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a1b      	ldr	r3, [r3, #32]
 800b26a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a1b      	ldr	r3, [r3, #32]
 800b276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	69db      	ldr	r3, [r3, #28]
 800b282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b28a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	021b      	lsls	r3, r3, #8
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b2a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	031b      	lsls	r3, r3, #12
 800b2ae:	693a      	ldr	r2, [r7, #16]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a12      	ldr	r2, [pc, #72]	@ (800b300 <TIM_OC4_SetConfig+0xa4>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d003      	beq.n	800b2c4 <TIM_OC4_SetConfig+0x68>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4a11      	ldr	r2, [pc, #68]	@ (800b304 <TIM_OC4_SetConfig+0xa8>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d109      	bne.n	800b2d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b2ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	695b      	ldr	r3, [r3, #20]
 800b2d0:	019b      	lsls	r3, r3, #6
 800b2d2:	697a      	ldr	r2, [r7, #20]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	693a      	ldr	r2, [r7, #16]
 800b2f0:	621a      	str	r2, [r3, #32]
}
 800b2f2:	bf00      	nop
 800b2f4:	371c      	adds	r7, #28
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	40010000 	.word	0x40010000
 800b304:	40010400 	.word	0x40010400

0800b308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b308:	b480      	push	{r7}
 800b30a:	b087      	sub	sp, #28
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6a1b      	ldr	r3, [r3, #32]
 800b318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	f023 0201 	bic.w	r2, r3, #1
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	011b      	lsls	r3, r3, #4
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f023 030a 	bic.w	r3, r3, #10
 800b344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	621a      	str	r2, [r3, #32]
}
 800b35a:	bf00      	nop
 800b35c:	371c      	adds	r7, #28
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b366:	b480      	push	{r7}
 800b368:	b087      	sub	sp, #28
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	60f8      	str	r0, [r7, #12]
 800b36e:	60b9      	str	r1, [r7, #8]
 800b370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	f023 0210 	bic.w	r2, r3, #16
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	699b      	ldr	r3, [r3, #24]
 800b382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6a1b      	ldr	r3, [r3, #32]
 800b388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b390:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	031b      	lsls	r3, r3, #12
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	4313      	orrs	r3, r2
 800b39a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b3a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	011b      	lsls	r3, r3, #4
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	693a      	ldr	r2, [r7, #16]
 800b3b8:	621a      	str	r2, [r3, #32]
}
 800b3ba:	bf00      	nop
 800b3bc:	371c      	adds	r7, #28
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b085      	sub	sp, #20
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	f043 0307 	orr.w	r3, r3, #7
 800b3e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	609a      	str	r2, [r3, #8]
}
 800b3f0:	bf00      	nop
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b087      	sub	sp, #28
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
 800b408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	021a      	lsls	r2, r3, #8
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	431a      	orrs	r2, r3
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	4313      	orrs	r3, r2
 800b424:	697a      	ldr	r2, [r7, #20]
 800b426:	4313      	orrs	r3, r2
 800b428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	697a      	ldr	r2, [r7, #20]
 800b42e:	609a      	str	r2, [r3, #8]
}
 800b430:	bf00      	nop
 800b432:	371c      	adds	r7, #28
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b087      	sub	sp, #28
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	f003 031f 	and.w	r3, r3, #31
 800b44e:	2201      	movs	r2, #1
 800b450:	fa02 f303 	lsl.w	r3, r2, r3
 800b454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6a1a      	ldr	r2, [r3, #32]
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	43db      	mvns	r3, r3
 800b45e:	401a      	ands	r2, r3
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6a1a      	ldr	r2, [r3, #32]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f003 031f 	and.w	r3, r3, #31
 800b46e:	6879      	ldr	r1, [r7, #4]
 800b470:	fa01 f303 	lsl.w	r3, r1, r3
 800b474:	431a      	orrs	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	621a      	str	r2, [r3, #32]
}
 800b47a:	bf00      	nop
 800b47c:	371c      	adds	r7, #28
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
	...

0800b488 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d109      	bne.n	800b4ac <HAL_TIMEx_PWMN_Start+0x24>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	bf14      	ite	ne
 800b4a4:	2301      	movne	r3, #1
 800b4a6:	2300      	moveq	r3, #0
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	e022      	b.n	800b4f2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	2b04      	cmp	r3, #4
 800b4b0:	d109      	bne.n	800b4c6 <HAL_TIMEx_PWMN_Start+0x3e>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	bf14      	ite	ne
 800b4be:	2301      	movne	r3, #1
 800b4c0:	2300      	moveq	r3, #0
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	e015      	b.n	800b4f2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b08      	cmp	r3, #8
 800b4ca:	d109      	bne.n	800b4e0 <HAL_TIMEx_PWMN_Start+0x58>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	bf14      	ite	ne
 800b4d8:	2301      	movne	r3, #1
 800b4da:	2300      	moveq	r3, #0
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	e008      	b.n	800b4f2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	bf14      	ite	ne
 800b4ec:	2301      	movne	r3, #1
 800b4ee:	2300      	moveq	r3, #0
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e06d      	b.n	800b5d6 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d104      	bne.n	800b50a <HAL_TIMEx_PWMN_Start+0x82>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2202      	movs	r2, #2
 800b504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b508:	e013      	b.n	800b532 <HAL_TIMEx_PWMN_Start+0xaa>
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	2b04      	cmp	r3, #4
 800b50e:	d104      	bne.n	800b51a <HAL_TIMEx_PWMN_Start+0x92>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2202      	movs	r2, #2
 800b514:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b518:	e00b      	b.n	800b532 <HAL_TIMEx_PWMN_Start+0xaa>
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	2b08      	cmp	r3, #8
 800b51e:	d104      	bne.n	800b52a <HAL_TIMEx_PWMN_Start+0xa2>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2202      	movs	r2, #2
 800b524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b528:	e003      	b.n	800b532 <HAL_TIMEx_PWMN_Start+0xaa>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2202      	movs	r2, #2
 800b52e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2204      	movs	r2, #4
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f000 fba9 	bl	800bc92 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b54e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a22      	ldr	r2, [pc, #136]	@ (800b5e0 <HAL_TIMEx_PWMN_Start+0x158>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d022      	beq.n	800b5a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b562:	d01d      	beq.n	800b5a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a1e      	ldr	r2, [pc, #120]	@ (800b5e4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d018      	beq.n	800b5a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a1d      	ldr	r2, [pc, #116]	@ (800b5e8 <HAL_TIMEx_PWMN_Start+0x160>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d013      	beq.n	800b5a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4a1b      	ldr	r2, [pc, #108]	@ (800b5ec <HAL_TIMEx_PWMN_Start+0x164>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d00e      	beq.n	800b5a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a1a      	ldr	r2, [pc, #104]	@ (800b5f0 <HAL_TIMEx_PWMN_Start+0x168>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d009      	beq.n	800b5a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a18      	ldr	r2, [pc, #96]	@ (800b5f4 <HAL_TIMEx_PWMN_Start+0x16c>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d004      	beq.n	800b5a0 <HAL_TIMEx_PWMN_Start+0x118>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a17      	ldr	r2, [pc, #92]	@ (800b5f8 <HAL_TIMEx_PWMN_Start+0x170>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d111      	bne.n	800b5c4 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	f003 0307 	and.w	r3, r3, #7
 800b5aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2b06      	cmp	r3, #6
 800b5b0:	d010      	beq.n	800b5d4 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f042 0201 	orr.w	r2, r2, #1
 800b5c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5c2:	e007      	b.n	800b5d4 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f042 0201 	orr.w	r2, r2, #1
 800b5d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	40010000 	.word	0x40010000
 800b5e4:	40000400 	.word	0x40000400
 800b5e8:	40000800 	.word	0x40000800
 800b5ec:	40000c00 	.word	0x40000c00
 800b5f0:	40010400 	.word	0x40010400
 800b5f4:	40014000 	.word	0x40014000
 800b5f8:	40001800 	.word	0x40001800

0800b5fc <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2200      	movs	r2, #0
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 fb3f 	bl	800bc92 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	6a1a      	ldr	r2, [r3, #32]
 800b61a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b61e:	4013      	ands	r3, r2
 800b620:	2b00      	cmp	r3, #0
 800b622:	d10f      	bne.n	800b644 <HAL_TIMEx_PWMN_Stop+0x48>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	6a1a      	ldr	r2, [r3, #32]
 800b62a:	f240 4344 	movw	r3, #1092	@ 0x444
 800b62e:	4013      	ands	r3, r2
 800b630:	2b00      	cmp	r3, #0
 800b632:	d107      	bne.n	800b644 <HAL_TIMEx_PWMN_Stop+0x48>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b642:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6a1a      	ldr	r2, [r3, #32]
 800b64a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b64e:	4013      	ands	r3, r2
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10f      	bne.n	800b674 <HAL_TIMEx_PWMN_Stop+0x78>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	6a1a      	ldr	r2, [r3, #32]
 800b65a:	f240 4344 	movw	r3, #1092	@ 0x444
 800b65e:	4013      	ands	r3, r2
 800b660:	2b00      	cmp	r3, #0
 800b662:	d107      	bne.n	800b674 <HAL_TIMEx_PWMN_Stop+0x78>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f022 0201 	bic.w	r2, r2, #1
 800b672:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d104      	bne.n	800b684 <HAL_TIMEx_PWMN_Stop+0x88>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b682:	e013      	b.n	800b6ac <HAL_TIMEx_PWMN_Stop+0xb0>
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	2b04      	cmp	r3, #4
 800b688:	d104      	bne.n	800b694 <HAL_TIMEx_PWMN_Stop+0x98>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b692:	e00b      	b.n	800b6ac <HAL_TIMEx_PWMN_Stop+0xb0>
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	2b08      	cmp	r3, #8
 800b698:	d104      	bne.n	800b6a4 <HAL_TIMEx_PWMN_Stop+0xa8>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6a2:	e003      	b.n	800b6ac <HAL_TIMEx_PWMN_Stop+0xb0>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
	...

0800b6b8 <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
 800b6c4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d109      	bne.n	800b6e4 <HAL_TIMEx_PWMN_Start_DMA+0x2c>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	bf0c      	ite	eq
 800b6dc:	2301      	moveq	r3, #1
 800b6de:	2300      	movne	r3, #0
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	e022      	b.n	800b72a <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b04      	cmp	r3, #4
 800b6e8:	d109      	bne.n	800b6fe <HAL_TIMEx_PWMN_Start_DMA+0x46>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	2b02      	cmp	r3, #2
 800b6f4:	bf0c      	ite	eq
 800b6f6:	2301      	moveq	r3, #1
 800b6f8:	2300      	movne	r3, #0
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	e015      	b.n	800b72a <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	2b08      	cmp	r3, #8
 800b702:	d109      	bne.n	800b718 <HAL_TIMEx_PWMN_Start_DMA+0x60>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	bf0c      	ite	eq
 800b710:	2301      	moveq	r3, #1
 800b712:	2300      	movne	r3, #0
 800b714:	b2db      	uxtb	r3, r3
 800b716:	e008      	b.n	800b72a <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	2b02      	cmp	r3, #2
 800b722:	bf0c      	ite	eq
 800b724:	2301      	moveq	r3, #1
 800b726:	2300      	movne	r3, #0
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d001      	beq.n	800b732 <HAL_TIMEx_PWMN_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800b72e:	2302      	movs	r3, #2
 800b730:	e129      	b.n	800b986 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d109      	bne.n	800b74c <HAL_TIMEx_PWMN_Start_DMA+0x94>
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	2b01      	cmp	r3, #1
 800b742:	bf0c      	ite	eq
 800b744:	2301      	moveq	r3, #1
 800b746:	2300      	movne	r3, #0
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	e022      	b.n	800b792 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	2b04      	cmp	r3, #4
 800b750:	d109      	bne.n	800b766 <HAL_TIMEx_PWMN_Start_DMA+0xae>
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	bf0c      	ite	eq
 800b75e:	2301      	moveq	r3, #1
 800b760:	2300      	movne	r3, #0
 800b762:	b2db      	uxtb	r3, r3
 800b764:	e015      	b.n	800b792 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	2b08      	cmp	r3, #8
 800b76a:	d109      	bne.n	800b780 <HAL_TIMEx_PWMN_Start_DMA+0xc8>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b01      	cmp	r3, #1
 800b776:	bf0c      	ite	eq
 800b778:	2301      	moveq	r3, #1
 800b77a:	2300      	movne	r3, #0
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	e008      	b.n	800b792 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b786:	b2db      	uxtb	r3, r3
 800b788:	2b01      	cmp	r3, #1
 800b78a:	bf0c      	ite	eq
 800b78c:	2301      	moveq	r3, #1
 800b78e:	2300      	movne	r3, #0
 800b790:	b2db      	uxtb	r3, r3
 800b792:	2b00      	cmp	r3, #0
 800b794:	d024      	beq.n	800b7e0 <HAL_TIMEx_PWMN_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d104      	bne.n	800b7a6 <HAL_TIMEx_PWMN_Start_DMA+0xee>
 800b79c:	887b      	ldrh	r3, [r7, #2]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <HAL_TIMEx_PWMN_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e0ef      	b.n	800b986 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d104      	bne.n	800b7b6 <HAL_TIMEx_PWMN_Start_DMA+0xfe>
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7b4:	e016      	b.n	800b7e4 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2b04      	cmp	r3, #4
 800b7ba:	d104      	bne.n	800b7c6 <HAL_TIMEx_PWMN_Start_DMA+0x10e>
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2202      	movs	r2, #2
 800b7c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b7c4:	e00e      	b.n	800b7e4 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	2b08      	cmp	r3, #8
 800b7ca:	d104      	bne.n	800b7d6 <HAL_TIMEx_PWMN_Start_DMA+0x11e>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2202      	movs	r2, #2
 800b7d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7d4:	e006      	b.n	800b7e4 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2202      	movs	r2, #2
 800b7da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7de:	e001      	b.n	800b7e4 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e0d0      	b.n	800b986 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
  }

  switch (Channel)
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b08      	cmp	r3, #8
 800b7e8:	d051      	beq.n	800b88e <HAL_TIMEx_PWMN_Start_DMA+0x1d6>
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b08      	cmp	r3, #8
 800b7ee:	d872      	bhi.n	800b8d6 <HAL_TIMEx_PWMN_Start_DMA+0x21e>
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <HAL_TIMEx_PWMN_Start_DMA+0x146>
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d024      	beq.n	800b846 <HAL_TIMEx_PWMN_Start_DMA+0x18e>
 800b7fc:	e06b      	b.n	800b8d6 <HAL_TIMEx_PWMN_Start_DMA+0x21e>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b802:	4a63      	ldr	r2, [pc, #396]	@ (800b990 <HAL_TIMEx_PWMN_Start_DMA+0x2d8>)
 800b804:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b80a:	4a62      	ldr	r2, [pc, #392]	@ (800b994 <HAL_TIMEx_PWMN_Start_DMA+0x2dc>)
 800b80c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b812:	4a61      	ldr	r2, [pc, #388]	@ (800b998 <HAL_TIMEx_PWMN_Start_DMA+0x2e0>)
 800b814:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b81a:	6879      	ldr	r1, [r7, #4]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3334      	adds	r3, #52	@ 0x34
 800b822:	461a      	mov	r2, r3
 800b824:	887b      	ldrh	r3, [r7, #2]
 800b826:	f7fa fb79 	bl	8005f1c <HAL_DMA_Start_IT>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d001      	beq.n	800b834 <HAL_TIMEx_PWMN_Start_DMA+0x17c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	e0a8      	b.n	800b986 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68da      	ldr	r2, [r3, #12]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b842:	60da      	str	r2, [r3, #12]
      break;
 800b844:	e04a      	b.n	800b8dc <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b84a:	4a51      	ldr	r2, [pc, #324]	@ (800b990 <HAL_TIMEx_PWMN_Start_DMA+0x2d8>)
 800b84c:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b852:	4a50      	ldr	r2, [pc, #320]	@ (800b994 <HAL_TIMEx_PWMN_Start_DMA+0x2dc>)
 800b854:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b85a:	4a4f      	ldr	r2, [pc, #316]	@ (800b998 <HAL_TIMEx_PWMN_Start_DMA+0x2e0>)
 800b85c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b862:	6879      	ldr	r1, [r7, #4]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3338      	adds	r3, #56	@ 0x38
 800b86a:	461a      	mov	r2, r3
 800b86c:	887b      	ldrh	r3, [r7, #2]
 800b86e:	f7fa fb55 	bl	8005f1c <HAL_DMA_Start_IT>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d001      	beq.n	800b87c <HAL_TIMEx_PWMN_Start_DMA+0x1c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	e084      	b.n	800b986 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68da      	ldr	r2, [r3, #12]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b88a:	60da      	str	r2, [r3, #12]
      break;
 800b88c:	e026      	b.n	800b8dc <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b892:	4a3f      	ldr	r2, [pc, #252]	@ (800b990 <HAL_TIMEx_PWMN_Start_DMA+0x2d8>)
 800b894:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b89a:	4a3e      	ldr	r2, [pc, #248]	@ (800b994 <HAL_TIMEx_PWMN_Start_DMA+0x2dc>)
 800b89c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a2:	4a3d      	ldr	r2, [pc, #244]	@ (800b998 <HAL_TIMEx_PWMN_Start_DMA+0x2e0>)
 800b8a4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b8aa:	6879      	ldr	r1, [r7, #4]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	333c      	adds	r3, #60	@ 0x3c
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	887b      	ldrh	r3, [r7, #2]
 800b8b6:	f7fa fb31 	bl	8005f1c <HAL_DMA_Start_IT>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d001      	beq.n	800b8c4 <HAL_TIMEx_PWMN_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e060      	b.n	800b986 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	68da      	ldr	r2, [r3, #12]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b8d2:	60da      	str	r2, [r3, #12]
      break;
 800b8d4:	e002      	b.n	800b8dc <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    default:
      status = HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	75fb      	strb	r3, [r7, #23]
      break;
 800b8da:	bf00      	nop
  }

  if (status == HAL_OK)
 800b8dc:	7dfb      	ldrb	r3, [r7, #23]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d150      	bne.n	800b984 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
  {
    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2204      	movs	r2, #4
 800b8e8:	68b9      	ldr	r1, [r7, #8]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 f9d1 	bl	800bc92 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b8fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a25      	ldr	r2, [pc, #148]	@ (800b99c <HAL_TIMEx_PWMN_Start_DMA+0x2e4>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d022      	beq.n	800b950 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b912:	d01d      	beq.n	800b950 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a21      	ldr	r2, [pc, #132]	@ (800b9a0 <HAL_TIMEx_PWMN_Start_DMA+0x2e8>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d018      	beq.n	800b950 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a20      	ldr	r2, [pc, #128]	@ (800b9a4 <HAL_TIMEx_PWMN_Start_DMA+0x2ec>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d013      	beq.n	800b950 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a1e      	ldr	r2, [pc, #120]	@ (800b9a8 <HAL_TIMEx_PWMN_Start_DMA+0x2f0>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d00e      	beq.n	800b950 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a1d      	ldr	r2, [pc, #116]	@ (800b9ac <HAL_TIMEx_PWMN_Start_DMA+0x2f4>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d009      	beq.n	800b950 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a1b      	ldr	r2, [pc, #108]	@ (800b9b0 <HAL_TIMEx_PWMN_Start_DMA+0x2f8>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d004      	beq.n	800b950 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a1a      	ldr	r2, [pc, #104]	@ (800b9b4 <HAL_TIMEx_PWMN_Start_DMA+0x2fc>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d111      	bne.n	800b974 <HAL_TIMEx_PWMN_Start_DMA+0x2bc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	f003 0307 	and.w	r3, r3, #7
 800b95a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	2b06      	cmp	r3, #6
 800b960:	d010      	beq.n	800b984 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
      {
        __HAL_TIM_ENABLE(htim);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f042 0201 	orr.w	r2, r2, #1
 800b970:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b972:	e007      	b.n	800b984 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f042 0201 	orr.w	r2, r2, #1
 800b982:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b984:	7dfb      	ldrb	r3, [r7, #23]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3718      	adds	r7, #24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	0800bb7d 	.word	0x0800bb7d
 800b994:	0800ae01 	.word	0x0800ae01
 800b998:	0800bc25 	.word	0x0800bc25
 800b99c:	40010000 	.word	0x40010000
 800b9a0:	40000400 	.word	0x40000400
 800b9a4:	40000800 	.word	0x40000800
 800b9a8:	40000c00 	.word	0x40000c00
 800b9ac:	40010400 	.word	0x40010400
 800b9b0:	40014000 	.word	0x40014000
 800b9b4:	40001800 	.word	0x40001800

0800b9b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d101      	bne.n	800b9d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9cc:	2302      	movs	r3, #2
 800b9ce:	e05a      	b.n	800ba86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2202      	movs	r2, #2
 800b9dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a21      	ldr	r2, [pc, #132]	@ (800ba94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d022      	beq.n	800ba5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba1c:	d01d      	beq.n	800ba5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a1d      	ldr	r2, [pc, #116]	@ (800ba98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d018      	beq.n	800ba5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a1b      	ldr	r2, [pc, #108]	@ (800ba9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d013      	beq.n	800ba5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a1a      	ldr	r2, [pc, #104]	@ (800baa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d00e      	beq.n	800ba5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a18      	ldr	r2, [pc, #96]	@ (800baa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d009      	beq.n	800ba5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a17      	ldr	r2, [pc, #92]	@ (800baa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d004      	beq.n	800ba5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a15      	ldr	r2, [pc, #84]	@ (800baac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d10c      	bne.n	800ba74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	40010000 	.word	0x40010000
 800ba98:	40000400 	.word	0x40000400
 800ba9c:	40000800 	.word	0x40000800
 800baa0:	40000c00 	.word	0x40000c00
 800baa4:	40010400 	.word	0x40010400
 800baa8:	40014000 	.word	0x40014000
 800baac:	40001800 	.word	0x40001800

0800bab0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800baba:	2300      	movs	r3, #0
 800babc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d101      	bne.n	800bacc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bac8:	2302      	movs	r3, #2
 800baca:	e03d      	b.n	800bb48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	4313      	orrs	r3, r2
 800bae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	4313      	orrs	r3, r2
 800baee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	695b      	ldr	r3, [r3, #20]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	69db      	ldr	r3, [r3, #28]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68fa      	ldr	r2, [r7, #12]
 800bb3c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3714      	adds	r7, #20
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <TIM_DMADelayPulseNCplt>:
  * @brief  TIM DMA Delay Pulse complete callback (complementary channel).
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseNCplt(DMA_HandleTypeDef *hdma)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb88:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d10b      	bne.n	800bbac <TIM_DMADelayPulseNCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2201      	movs	r2, #1
 800bb98:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	69db      	ldr	r3, [r3, #28]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d136      	bne.n	800bc10 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2201      	movs	r2, #1
 800bba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bbaa:	e031      	b.n	800bc10 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d10b      	bne.n	800bbce <TIM_DMADelayPulseNCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2202      	movs	r2, #2
 800bbba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d125      	bne.n	800bc10 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bbcc:	e020      	b.n	800bc10 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d10b      	bne.n	800bbf0 <TIM_DMADelayPulseNCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2204      	movs	r2, #4
 800bbdc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	69db      	ldr	r3, [r3, #28]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d114      	bne.n	800bc10 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bbee:	e00f      	b.n	800bc10 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d10a      	bne.n	800bc10 <TIM_DMADelayPulseNCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2208      	movs	r2, #8
 800bbfe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	69db      	ldr	r3, [r3, #28]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d103      	bne.n	800bc10 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f7ff f830 	bl	800ac76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	771a      	strb	r2, [r3, #28]
}
 800bc1c:	bf00      	nop
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <TIM_DMAErrorCCxN>:
  * @brief  TIM DMA error callback (complementary channel)
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAErrorCCxN(DMA_HandleTypeDef *hdma)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc30:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d107      	bne.n	800bc4c <TIM_DMAErrorCCxN+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bc4a:	e018      	b.n	800bc7e <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d107      	bne.n	800bc66 <TIM_DMAErrorCCxN+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2202      	movs	r2, #2
 800bc5a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bc64:	e00b      	b.n	800bc7e <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d106      	bne.n	800bc7e <TIM_DMAErrorCCxN+0x5a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2204      	movs	r2, #4
 800bc74:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	f7ff f817 	bl	800acb2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2200      	movs	r2, #0
 800bc88:	771a      	strb	r2, [r3, #28]
}
 800bc8a:	bf00      	nop
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800bc92:	b480      	push	{r7}
 800bc94:	b087      	sub	sp, #28
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	60f8      	str	r0, [r7, #12]
 800bc9a:	60b9      	str	r1, [r7, #8]
 800bc9c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	f003 031f 	and.w	r3, r3, #31
 800bca4:	2204      	movs	r2, #4
 800bca6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcaa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6a1a      	ldr	r2, [r3, #32]
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	43db      	mvns	r3, r3
 800bcb4:	401a      	ands	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6a1a      	ldr	r2, [r3, #32]
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	f003 031f 	and.w	r3, r3, #31
 800bcc4:	6879      	ldr	r1, [r7, #4]
 800bcc6:	fa01 f303 	lsl.w	r3, r1, r3
 800bcca:	431a      	orrs	r2, r3
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	621a      	str	r2, [r3, #32]
}
 800bcd0:	bf00      	nop
 800bcd2:	371c      	adds	r7, #28
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bcdc:	b084      	sub	sp, #16
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b084      	sub	sp, #16
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	f107 001c 	add.w	r0, r7, #28
 800bcea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bcee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d122      	bne.n	800bd3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcf8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800bd08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bd1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d105      	bne.n	800bd2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f001 fbe8 	bl	800d504 <USB_CoreReset>
 800bd34:	4603      	mov	r3, r0
 800bd36:	73fb      	strb	r3, [r7, #15]
 800bd38:	e01a      	b.n	800bd70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f001 fbdc 	bl	800d504 <USB_CoreReset>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bd50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d106      	bne.n	800bd64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	639a      	str	r2, [r3, #56]	@ 0x38
 800bd62:	e005      	b.n	800bd70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bd70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d10b      	bne.n	800bd8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	f043 0206 	orr.w	r2, r3, #6
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	f043 0220 	orr.w	r2, r3, #32
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd9a:	b004      	add	sp, #16
 800bd9c:	4770      	bx	lr
	...

0800bda0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b087      	sub	sp, #28
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bdae:	79fb      	ldrb	r3, [r7, #7]
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d165      	bne.n	800be80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	4a41      	ldr	r2, [pc, #260]	@ (800bebc <USB_SetTurnaroundTime+0x11c>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d906      	bls.n	800bdca <USB_SetTurnaroundTime+0x2a>
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	4a40      	ldr	r2, [pc, #256]	@ (800bec0 <USB_SetTurnaroundTime+0x120>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d202      	bcs.n	800bdca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bdc4:	230f      	movs	r3, #15
 800bdc6:	617b      	str	r3, [r7, #20]
 800bdc8:	e062      	b.n	800be90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	4a3c      	ldr	r2, [pc, #240]	@ (800bec0 <USB_SetTurnaroundTime+0x120>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d306      	bcc.n	800bde0 <USB_SetTurnaroundTime+0x40>
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	4a3b      	ldr	r2, [pc, #236]	@ (800bec4 <USB_SetTurnaroundTime+0x124>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d202      	bcs.n	800bde0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bdda:	230e      	movs	r3, #14
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	e057      	b.n	800be90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	4a38      	ldr	r2, [pc, #224]	@ (800bec4 <USB_SetTurnaroundTime+0x124>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d306      	bcc.n	800bdf6 <USB_SetTurnaroundTime+0x56>
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	4a37      	ldr	r2, [pc, #220]	@ (800bec8 <USB_SetTurnaroundTime+0x128>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d202      	bcs.n	800bdf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bdf0:	230d      	movs	r3, #13
 800bdf2:	617b      	str	r3, [r7, #20]
 800bdf4:	e04c      	b.n	800be90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	4a33      	ldr	r2, [pc, #204]	@ (800bec8 <USB_SetTurnaroundTime+0x128>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d306      	bcc.n	800be0c <USB_SetTurnaroundTime+0x6c>
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	4a32      	ldr	r2, [pc, #200]	@ (800becc <USB_SetTurnaroundTime+0x12c>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d802      	bhi.n	800be0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800be06:	230c      	movs	r3, #12
 800be08:	617b      	str	r3, [r7, #20]
 800be0a:	e041      	b.n	800be90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	4a2f      	ldr	r2, [pc, #188]	@ (800becc <USB_SetTurnaroundTime+0x12c>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d906      	bls.n	800be22 <USB_SetTurnaroundTime+0x82>
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	4a2e      	ldr	r2, [pc, #184]	@ (800bed0 <USB_SetTurnaroundTime+0x130>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d802      	bhi.n	800be22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800be1c:	230b      	movs	r3, #11
 800be1e:	617b      	str	r3, [r7, #20]
 800be20:	e036      	b.n	800be90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	4a2a      	ldr	r2, [pc, #168]	@ (800bed0 <USB_SetTurnaroundTime+0x130>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d906      	bls.n	800be38 <USB_SetTurnaroundTime+0x98>
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	4a29      	ldr	r2, [pc, #164]	@ (800bed4 <USB_SetTurnaroundTime+0x134>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d802      	bhi.n	800be38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800be32:	230a      	movs	r3, #10
 800be34:	617b      	str	r3, [r7, #20]
 800be36:	e02b      	b.n	800be90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	4a26      	ldr	r2, [pc, #152]	@ (800bed4 <USB_SetTurnaroundTime+0x134>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d906      	bls.n	800be4e <USB_SetTurnaroundTime+0xae>
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	4a25      	ldr	r2, [pc, #148]	@ (800bed8 <USB_SetTurnaroundTime+0x138>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d202      	bcs.n	800be4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800be48:	2309      	movs	r3, #9
 800be4a:	617b      	str	r3, [r7, #20]
 800be4c:	e020      	b.n	800be90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	4a21      	ldr	r2, [pc, #132]	@ (800bed8 <USB_SetTurnaroundTime+0x138>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d306      	bcc.n	800be64 <USB_SetTurnaroundTime+0xc4>
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	4a20      	ldr	r2, [pc, #128]	@ (800bedc <USB_SetTurnaroundTime+0x13c>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d802      	bhi.n	800be64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800be5e:	2308      	movs	r3, #8
 800be60:	617b      	str	r3, [r7, #20]
 800be62:	e015      	b.n	800be90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	4a1d      	ldr	r2, [pc, #116]	@ (800bedc <USB_SetTurnaroundTime+0x13c>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d906      	bls.n	800be7a <USB_SetTurnaroundTime+0xda>
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	4a1c      	ldr	r2, [pc, #112]	@ (800bee0 <USB_SetTurnaroundTime+0x140>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d202      	bcs.n	800be7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800be74:	2307      	movs	r3, #7
 800be76:	617b      	str	r3, [r7, #20]
 800be78:	e00a      	b.n	800be90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800be7a:	2306      	movs	r3, #6
 800be7c:	617b      	str	r3, [r7, #20]
 800be7e:	e007      	b.n	800be90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800be80:	79fb      	ldrb	r3, [r7, #7]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d102      	bne.n	800be8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800be86:	2309      	movs	r3, #9
 800be88:	617b      	str	r3, [r7, #20]
 800be8a:	e001      	b.n	800be90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800be8c:	2309      	movs	r3, #9
 800be8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	68da      	ldr	r2, [r3, #12]
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	029b      	lsls	r3, r3, #10
 800bea4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800bea8:	431a      	orrs	r2, r3
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800beae:	2300      	movs	r3, #0
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	371c      	adds	r7, #28
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr
 800bebc:	00d8acbf 	.word	0x00d8acbf
 800bec0:	00e4e1c0 	.word	0x00e4e1c0
 800bec4:	00f42400 	.word	0x00f42400
 800bec8:	01067380 	.word	0x01067380
 800becc:	011a499f 	.word	0x011a499f
 800bed0:	01312cff 	.word	0x01312cff
 800bed4:	014ca43f 	.word	0x014ca43f
 800bed8:	016e3600 	.word	0x016e3600
 800bedc:	01a6ab1f 	.word	0x01a6ab1f
 800bee0:	01e84800 	.word	0x01e84800

0800bee4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	f043 0201 	orr.w	r2, r3, #1
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	370c      	adds	r7, #12
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf06:	b480      	push	{r7}
 800bf08:	b083      	sub	sp, #12
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	f023 0201 	bic.w	r2, r3, #1
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	460b      	mov	r3, r1
 800bf32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bf34:	2300      	movs	r3, #0
 800bf36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf44:	78fb      	ldrb	r3, [r7, #3]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d115      	bne.n	800bf76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bf56:	2001      	movs	r0, #1
 800bf58:	f7f8 fa8a 	bl	8004470 <HAL_Delay>
      ms++;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f001 fa3f 	bl	800d3e6 <USB_GetMode>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d01e      	beq.n	800bfac <USB_SetCurrentMode+0x84>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2b31      	cmp	r3, #49	@ 0x31
 800bf72:	d9f0      	bls.n	800bf56 <USB_SetCurrentMode+0x2e>
 800bf74:	e01a      	b.n	800bfac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bf76:	78fb      	ldrb	r3, [r7, #3]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d115      	bne.n	800bfa8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bf88:	2001      	movs	r0, #1
 800bf8a:	f7f8 fa71 	bl	8004470 <HAL_Delay>
      ms++;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	3301      	adds	r3, #1
 800bf92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f001 fa26 	bl	800d3e6 <USB_GetMode>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d005      	beq.n	800bfac <USB_SetCurrentMode+0x84>
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2b31      	cmp	r3, #49	@ 0x31
 800bfa4:	d9f0      	bls.n	800bf88 <USB_SetCurrentMode+0x60>
 800bfa6:	e001      	b.n	800bfac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e005      	b.n	800bfb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b32      	cmp	r3, #50	@ 0x32
 800bfb0:	d101      	bne.n	800bfb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e000      	b.n	800bfb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bfc0:	b084      	sub	sp, #16
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b086      	sub	sp, #24
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800bfce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bfda:	2300      	movs	r3, #0
 800bfdc:	613b      	str	r3, [r7, #16]
 800bfde:	e009      	b.n	800bff4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	3340      	adds	r3, #64	@ 0x40
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	4413      	add	r3, r2
 800bfea:	2200      	movs	r2, #0
 800bfec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	3301      	adds	r3, #1
 800bff2:	613b      	str	r3, [r7, #16]
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	2b0e      	cmp	r3, #14
 800bff8:	d9f2      	bls.n	800bfe0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d11c      	bne.n	800c03a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c00e:	f043 0302 	orr.w	r3, r3, #2
 800c012:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c018:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	601a      	str	r2, [r3, #0]
 800c038:	e005      	b.n	800c046 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c03e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c04c:	461a      	mov	r2, r3
 800c04e:	2300      	movs	r3, #0
 800c050:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c058:	4619      	mov	r1, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c060:	461a      	mov	r2, r3
 800c062:	680b      	ldr	r3, [r1, #0]
 800c064:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d10c      	bne.n	800c086 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d104      	bne.n	800c07c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c072:	2100      	movs	r1, #0
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 f965 	bl	800c344 <USB_SetDevSpeed>
 800c07a:	e008      	b.n	800c08e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c07c:	2101      	movs	r1, #1
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f960 	bl	800c344 <USB_SetDevSpeed>
 800c084:	e003      	b.n	800c08e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c086:	2103      	movs	r1, #3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 f95b 	bl	800c344 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c08e:	2110      	movs	r1, #16
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 f8f3 	bl	800c27c <USB_FlushTxFifo>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c09c:	2301      	movs	r3, #1
 800c09e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 f91f 	bl	800c2e4 <USB_FlushRxFifo>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d001      	beq.n	800c0b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	613b      	str	r3, [r7, #16]
 800c0d8:	e043      	b.n	800c162 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	015a      	lsls	r2, r3, #5
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c0ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c0f0:	d118      	bne.n	800c124 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10a      	bne.n	800c10e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	015a      	lsls	r2, r3, #5
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	4413      	add	r3, r2
 800c100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c104:	461a      	mov	r2, r3
 800c106:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c10a:	6013      	str	r3, [r2, #0]
 800c10c:	e013      	b.n	800c136 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	015a      	lsls	r2, r3, #5
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	4413      	add	r3, r2
 800c116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c11a:	461a      	mov	r2, r3
 800c11c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c120:	6013      	str	r3, [r2, #0]
 800c122:	e008      	b.n	800c136 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	015a      	lsls	r2, r3, #5
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	4413      	add	r3, r2
 800c12c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c130:	461a      	mov	r2, r3
 800c132:	2300      	movs	r3, #0
 800c134:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	015a      	lsls	r2, r3, #5
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	4413      	add	r3, r2
 800c13e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c142:	461a      	mov	r2, r3
 800c144:	2300      	movs	r3, #0
 800c146:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c154:	461a      	mov	r2, r3
 800c156:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c15a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	3301      	adds	r3, #1
 800c160:	613b      	str	r3, [r7, #16]
 800c162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	429a      	cmp	r2, r3
 800c168:	d3b7      	bcc.n	800c0da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c16a:	2300      	movs	r3, #0
 800c16c:	613b      	str	r3, [r7, #16]
 800c16e:	e043      	b.n	800c1f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	015a      	lsls	r2, r3, #5
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	4413      	add	r3, r2
 800c178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c182:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c186:	d118      	bne.n	800c1ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d10a      	bne.n	800c1a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	015a      	lsls	r2, r3, #5
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	4413      	add	r3, r2
 800c196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c19a:	461a      	mov	r2, r3
 800c19c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c1a0:	6013      	str	r3, [r2, #0]
 800c1a2:	e013      	b.n	800c1cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	015a      	lsls	r2, r3, #5
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c1b6:	6013      	str	r3, [r2, #0]
 800c1b8:	e008      	b.n	800c1cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	015a      	lsls	r2, r3, #5
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	015a      	lsls	r2, r3, #5
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1d8:	461a      	mov	r2, r3
 800c1da:	2300      	movs	r3, #0
 800c1dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	015a      	lsls	r2, r3, #5
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c1f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	613b      	str	r3, [r7, #16]
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fa:	693a      	ldr	r2, [r7, #16]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d3b7      	bcc.n	800c170 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c20e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c212:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c220:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c224:	2b00      	cmp	r3, #0
 800c226:	d105      	bne.n	800c234 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	f043 0210 	orr.w	r2, r3, #16
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	699a      	ldr	r2, [r3, #24]
 800c238:	4b0f      	ldr	r3, [pc, #60]	@ (800c278 <USB_DevInit+0x2b8>)
 800c23a:	4313      	orrs	r3, r2
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c242:	2b00      	cmp	r3, #0
 800c244:	d005      	beq.n	800c252 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	f043 0208 	orr.w	r2, r3, #8
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c254:	2b01      	cmp	r3, #1
 800c256:	d107      	bne.n	800c268 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	699b      	ldr	r3, [r3, #24]
 800c25c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c260:	f043 0304 	orr.w	r3, r3, #4
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c268:	7dfb      	ldrb	r3, [r7, #23]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3718      	adds	r7, #24
 800c26e:	46bd      	mov	sp, r7
 800c270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c274:	b004      	add	sp, #16
 800c276:	4770      	bx	lr
 800c278:	803c3800 	.word	0x803c3800

0800c27c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c286:	2300      	movs	r3, #0
 800c288:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	3301      	adds	r3, #1
 800c28e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	4a13      	ldr	r2, [pc, #76]	@ (800c2e0 <USB_FlushTxFifo+0x64>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d901      	bls.n	800c29c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c298:	2303      	movs	r3, #3
 800c29a:	e01b      	b.n	800c2d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	691b      	ldr	r3, [r3, #16]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	daf2      	bge.n	800c28a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	019b      	lsls	r3, r3, #6
 800c2ac:	f043 0220 	orr.w	r2, r3, #32
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	4a08      	ldr	r2, [pc, #32]	@ (800c2e0 <USB_FlushTxFifo+0x64>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d901      	bls.n	800c2c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	e006      	b.n	800c2d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	f003 0320 	and.w	r3, r3, #32
 800c2ce:	2b20      	cmp	r3, #32
 800c2d0:	d0f0      	beq.n	800c2b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	00030d40 	.word	0x00030d40

0800c2e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	4a11      	ldr	r2, [pc, #68]	@ (800c340 <USB_FlushRxFifo+0x5c>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d901      	bls.n	800c302 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c2fe:	2303      	movs	r3, #3
 800c300:	e018      	b.n	800c334 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	691b      	ldr	r3, [r3, #16]
 800c306:	2b00      	cmp	r3, #0
 800c308:	daf2      	bge.n	800c2f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c30a:	2300      	movs	r3, #0
 800c30c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2210      	movs	r2, #16
 800c312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	3301      	adds	r3, #1
 800c318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	4a08      	ldr	r2, [pc, #32]	@ (800c340 <USB_FlushRxFifo+0x5c>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d901      	bls.n	800c326 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c322:	2303      	movs	r3, #3
 800c324:	e006      	b.n	800c334 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	f003 0310 	and.w	r3, r3, #16
 800c32e:	2b10      	cmp	r3, #16
 800c330:	d0f0      	beq.n	800c314 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3714      	adds	r7, #20
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	00030d40 	.word	0x00030d40

0800c344 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	460b      	mov	r3, r1
 800c34e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	78fb      	ldrb	r3, [r7, #3]
 800c35e:	68f9      	ldr	r1, [r7, #12]
 800c360:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c364:	4313      	orrs	r3, r2
 800c366:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c376:	b480      	push	{r7}
 800c378:	b087      	sub	sp, #28
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	f003 0306 	and.w	r3, r3, #6
 800c38e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d102      	bne.n	800c39c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c396:	2300      	movs	r3, #0
 800c398:	75fb      	strb	r3, [r7, #23]
 800c39a:	e00a      	b.n	800c3b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2b02      	cmp	r3, #2
 800c3a0:	d002      	beq.n	800c3a8 <USB_GetDevSpeed+0x32>
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2b06      	cmp	r3, #6
 800c3a6:	d102      	bne.n	800c3ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	75fb      	strb	r3, [r7, #23]
 800c3ac:	e001      	b.n	800c3b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c3ae:	230f      	movs	r3, #15
 800c3b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c3b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	371c      	adds	r7, #28
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	785b      	ldrb	r3, [r3, #1]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d13a      	bne.n	800c452 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3e2:	69da      	ldr	r2, [r3, #28]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	f003 030f 	and.w	r3, r3, #15
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	fa01 f303 	lsl.w	r3, r1, r3
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	68f9      	ldr	r1, [r7, #12]
 800c3f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	015a      	lsls	r2, r3, #5
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	4413      	add	r3, r2
 800c406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c410:	2b00      	cmp	r3, #0
 800c412:	d155      	bne.n	800c4c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	015a      	lsls	r2, r3, #5
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	4413      	add	r3, r2
 800c41c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	791b      	ldrb	r3, [r3, #4]
 800c42e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c430:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	059b      	lsls	r3, r3, #22
 800c436:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c438:	4313      	orrs	r3, r2
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	0151      	lsls	r1, r2, #5
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	440a      	add	r2, r1
 800c442:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c44a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c44e:	6013      	str	r3, [r2, #0]
 800c450:	e036      	b.n	800c4c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c458:	69da      	ldr	r2, [r3, #28]
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	f003 030f 	and.w	r3, r3, #15
 800c462:	2101      	movs	r1, #1
 800c464:	fa01 f303 	lsl.w	r3, r1, r3
 800c468:	041b      	lsls	r3, r3, #16
 800c46a:	68f9      	ldr	r1, [r7, #12]
 800c46c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c470:	4313      	orrs	r3, r2
 800c472:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	015a      	lsls	r2, r3, #5
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	4413      	add	r3, r2
 800c47c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c486:	2b00      	cmp	r3, #0
 800c488:	d11a      	bne.n	800c4c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	015a      	lsls	r2, r3, #5
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	4413      	add	r3, r2
 800c492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	791b      	ldrb	r3, [r3, #4]
 800c4a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c4a6:	430b      	orrs	r3, r1
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	0151      	lsls	r1, r2, #5
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	440a      	add	r2, r1
 800c4b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c4ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3714      	adds	r7, #20
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr
	...

0800c4d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	785b      	ldrb	r3, [r3, #1]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d161      	bne.n	800c5b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	015a      	lsls	r2, r3, #5
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c4fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c502:	d11f      	bne.n	800c544 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	015a      	lsls	r2, r3, #5
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	4413      	add	r3, r2
 800c50c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	0151      	lsls	r1, r2, #5
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	440a      	add	r2, r1
 800c51a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c51e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c522:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	015a      	lsls	r2, r3, #5
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	4413      	add	r3, r2
 800c52c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	68ba      	ldr	r2, [r7, #8]
 800c534:	0151      	lsls	r1, r2, #5
 800c536:	68fa      	ldr	r2, [r7, #12]
 800c538:	440a      	add	r2, r1
 800c53a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c53e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c542:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c54a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	f003 030f 	and.w	r3, r3, #15
 800c554:	2101      	movs	r1, #1
 800c556:	fa01 f303 	lsl.w	r3, r1, r3
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	43db      	mvns	r3, r3
 800c55e:	68f9      	ldr	r1, [r7, #12]
 800c560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c564:	4013      	ands	r3, r2
 800c566:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c56e:	69da      	ldr	r2, [r3, #28]
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	f003 030f 	and.w	r3, r3, #15
 800c578:	2101      	movs	r1, #1
 800c57a:	fa01 f303 	lsl.w	r3, r1, r3
 800c57e:	b29b      	uxth	r3, r3
 800c580:	43db      	mvns	r3, r3
 800c582:	68f9      	ldr	r1, [r7, #12]
 800c584:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c588:	4013      	ands	r3, r2
 800c58a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	015a      	lsls	r2, r3, #5
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	4413      	add	r3, r2
 800c594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	0159      	lsls	r1, r3, #5
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	440b      	add	r3, r1
 800c5a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	4b35      	ldr	r3, [pc, #212]	@ (800c680 <USB_DeactivateEndpoint+0x1b0>)
 800c5aa:	4013      	ands	r3, r2
 800c5ac:	600b      	str	r3, [r1, #0]
 800c5ae:	e060      	b.n	800c672 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c5c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5c6:	d11f      	bne.n	800c608 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	015a      	lsls	r2, r3, #5
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	68ba      	ldr	r2, [r7, #8]
 800c5d8:	0151      	lsls	r1, r2, #5
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	440a      	add	r2, r1
 800c5de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c5e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c5e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	015a      	lsls	r2, r3, #5
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	68ba      	ldr	r2, [r7, #8]
 800c5f8:	0151      	lsls	r1, r2, #5
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	440a      	add	r2, r1
 800c5fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c602:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c606:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c60e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	f003 030f 	and.w	r3, r3, #15
 800c618:	2101      	movs	r1, #1
 800c61a:	fa01 f303 	lsl.w	r3, r1, r3
 800c61e:	041b      	lsls	r3, r3, #16
 800c620:	43db      	mvns	r3, r3
 800c622:	68f9      	ldr	r1, [r7, #12]
 800c624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c628:	4013      	ands	r3, r2
 800c62a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c632:	69da      	ldr	r2, [r3, #28]
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	f003 030f 	and.w	r3, r3, #15
 800c63c:	2101      	movs	r1, #1
 800c63e:	fa01 f303 	lsl.w	r3, r1, r3
 800c642:	041b      	lsls	r3, r3, #16
 800c644:	43db      	mvns	r3, r3
 800c646:	68f9      	ldr	r1, [r7, #12]
 800c648:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c64c:	4013      	ands	r3, r2
 800c64e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	015a      	lsls	r2, r3, #5
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	4413      	add	r3, r2
 800c658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	0159      	lsls	r1, r3, #5
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	440b      	add	r3, r1
 800c666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c66a:	4619      	mov	r1, r3
 800c66c:	4b05      	ldr	r3, [pc, #20]	@ (800c684 <USB_DeactivateEndpoint+0x1b4>)
 800c66e:	4013      	ands	r3, r2
 800c670:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr
 800c680:	ec337800 	.word	0xec337800
 800c684:	eff37800 	.word	0xeff37800

0800c688 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b08a      	sub	sp, #40	@ 0x28
 800c68c:	af02      	add	r7, sp, #8
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	4613      	mov	r3, r2
 800c694:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	785b      	ldrb	r3, [r3, #1]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	f040 815c 	bne.w	800c962 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	699b      	ldr	r3, [r3, #24]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d132      	bne.n	800c718 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	015a      	lsls	r2, r3, #5
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	69ba      	ldr	r2, [r7, #24]
 800c6c2:	0151      	lsls	r1, r2, #5
 800c6c4:	69fa      	ldr	r2, [r7, #28]
 800c6c6:	440a      	add	r2, r1
 800c6c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6cc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800c6d0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800c6d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	015a      	lsls	r2, r3, #5
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	4413      	add	r3, r2
 800c6de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	69ba      	ldr	r2, [r7, #24]
 800c6e6:	0151      	lsls	r1, r2, #5
 800c6e8:	69fa      	ldr	r2, [r7, #28]
 800c6ea:	440a      	add	r2, r1
 800c6ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c6f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	015a      	lsls	r2, r3, #5
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c702:	691b      	ldr	r3, [r3, #16]
 800c704:	69ba      	ldr	r2, [r7, #24]
 800c706:	0151      	lsls	r1, r2, #5
 800c708:	69fa      	ldr	r2, [r7, #28]
 800c70a:	440a      	add	r2, r1
 800c70c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c710:	0cdb      	lsrs	r3, r3, #19
 800c712:	04db      	lsls	r3, r3, #19
 800c714:	6113      	str	r3, [r2, #16]
 800c716:	e074      	b.n	800c802 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	015a      	lsls	r2, r3, #5
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	4413      	add	r3, r2
 800c720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c724:	691b      	ldr	r3, [r3, #16]
 800c726:	69ba      	ldr	r2, [r7, #24]
 800c728:	0151      	lsls	r1, r2, #5
 800c72a:	69fa      	ldr	r2, [r7, #28]
 800c72c:	440a      	add	r2, r1
 800c72e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c732:	0cdb      	lsrs	r3, r3, #19
 800c734:	04db      	lsls	r3, r3, #19
 800c736:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	015a      	lsls	r2, r3, #5
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	4413      	add	r3, r2
 800c740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c744:	691b      	ldr	r3, [r3, #16]
 800c746:	69ba      	ldr	r2, [r7, #24]
 800c748:	0151      	lsls	r1, r2, #5
 800c74a:	69fa      	ldr	r2, [r7, #28]
 800c74c:	440a      	add	r2, r1
 800c74e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c752:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800c756:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800c75a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	015a      	lsls	r2, r3, #5
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	4413      	add	r3, r2
 800c764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c768:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	6999      	ldr	r1, [r3, #24]
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	440b      	add	r3, r1
 800c774:	1e59      	subs	r1, r3, #1
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c77e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c780:	4b9d      	ldr	r3, [pc, #628]	@ (800c9f8 <USB_EPStartXfer+0x370>)
 800c782:	400b      	ands	r3, r1
 800c784:	69b9      	ldr	r1, [r7, #24]
 800c786:	0148      	lsls	r0, r1, #5
 800c788:	69f9      	ldr	r1, [r7, #28]
 800c78a:	4401      	add	r1, r0
 800c78c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c790:	4313      	orrs	r3, r2
 800c792:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c794:	69bb      	ldr	r3, [r7, #24]
 800c796:	015a      	lsls	r2, r3, #5
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	4413      	add	r3, r2
 800c79c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7a0:	691a      	ldr	r2, [r3, #16]
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	699b      	ldr	r3, [r3, #24]
 800c7a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7aa:	69b9      	ldr	r1, [r7, #24]
 800c7ac:	0148      	lsls	r0, r1, #5
 800c7ae:	69f9      	ldr	r1, [r7, #28]
 800c7b0:	4401      	add	r1, r0
 800c7b2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	791b      	ldrb	r3, [r3, #4]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d11f      	bne.n	800c802 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	015a      	lsls	r2, r3, #5
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	69ba      	ldr	r2, [r7, #24]
 800c7d2:	0151      	lsls	r1, r2, #5
 800c7d4:	69fa      	ldr	r2, [r7, #28]
 800c7d6:	440a      	add	r2, r1
 800c7d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7dc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800c7e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	015a      	lsls	r2, r3, #5
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7ee:	691b      	ldr	r3, [r3, #16]
 800c7f0:	69ba      	ldr	r2, [r7, #24]
 800c7f2:	0151      	lsls	r1, r2, #5
 800c7f4:	69fa      	ldr	r2, [r7, #28]
 800c7f6:	440a      	add	r2, r1
 800c7f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c7fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c800:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c802:	79fb      	ldrb	r3, [r7, #7]
 800c804:	2b01      	cmp	r3, #1
 800c806:	d14b      	bne.n	800c8a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	695b      	ldr	r3, [r3, #20]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d009      	beq.n	800c824 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	015a      	lsls	r2, r3, #5
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	4413      	add	r3, r2
 800c818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c81c:	461a      	mov	r2, r3
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	791b      	ldrb	r3, [r3, #4]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d128      	bne.n	800c87e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d110      	bne.n	800c85e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	015a      	lsls	r2, r3, #5
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	4413      	add	r3, r2
 800c844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	69ba      	ldr	r2, [r7, #24]
 800c84c:	0151      	lsls	r1, r2, #5
 800c84e:	69fa      	ldr	r2, [r7, #28]
 800c850:	440a      	add	r2, r1
 800c852:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c856:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c85a:	6013      	str	r3, [r2, #0]
 800c85c:	e00f      	b.n	800c87e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	015a      	lsls	r2, r3, #5
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	4413      	add	r3, r2
 800c866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	69ba      	ldr	r2, [r7, #24]
 800c86e:	0151      	lsls	r1, r2, #5
 800c870:	69fa      	ldr	r2, [r7, #28]
 800c872:	440a      	add	r2, r1
 800c874:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c87c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	015a      	lsls	r2, r3, #5
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	4413      	add	r3, r2
 800c886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	69ba      	ldr	r2, [r7, #24]
 800c88e:	0151      	lsls	r1, r2, #5
 800c890:	69fa      	ldr	r2, [r7, #28]
 800c892:	440a      	add	r2, r1
 800c894:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c898:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c89c:	6013      	str	r3, [r2, #0]
 800c89e:	e133      	b.n	800cb08 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	015a      	lsls	r2, r3, #5
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	69ba      	ldr	r2, [r7, #24]
 800c8b0:	0151      	lsls	r1, r2, #5
 800c8b2:	69fa      	ldr	r2, [r7, #28]
 800c8b4:	440a      	add	r2, r1
 800c8b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c8ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c8be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	791b      	ldrb	r3, [r3, #4]
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d015      	beq.n	800c8f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	699b      	ldr	r3, [r3, #24]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	f000 811b 	beq.w	800cb08 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	f003 030f 	and.w	r3, r3, #15
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	fa01 f303 	lsl.w	r3, r1, r3
 800c8e8:	69f9      	ldr	r1, [r7, #28]
 800c8ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	634b      	str	r3, [r1, #52]	@ 0x34
 800c8f2:	e109      	b.n	800cb08 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c900:	2b00      	cmp	r3, #0
 800c902:	d110      	bne.n	800c926 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	015a      	lsls	r2, r3, #5
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	4413      	add	r3, r2
 800c90c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	69ba      	ldr	r2, [r7, #24]
 800c914:	0151      	lsls	r1, r2, #5
 800c916:	69fa      	ldr	r2, [r7, #28]
 800c918:	440a      	add	r2, r1
 800c91a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c91e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c922:	6013      	str	r3, [r2, #0]
 800c924:	e00f      	b.n	800c946 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	015a      	lsls	r2, r3, #5
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	4413      	add	r3, r2
 800c92e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	69ba      	ldr	r2, [r7, #24]
 800c936:	0151      	lsls	r1, r2, #5
 800c938:	69fa      	ldr	r2, [r7, #28]
 800c93a:	440a      	add	r2, r1
 800c93c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c944:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	6919      	ldr	r1, [r3, #16]
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	781a      	ldrb	r2, [r3, #0]
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	699b      	ldr	r3, [r3, #24]
 800c952:	b298      	uxth	r0, r3
 800c954:	79fb      	ldrb	r3, [r7, #7]
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	4603      	mov	r3, r0
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	f000 fade 	bl	800cf1c <USB_WritePacket>
 800c960:	e0d2      	b.n	800cb08 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	015a      	lsls	r2, r3, #5
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	4413      	add	r3, r2
 800c96a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c96e:	691b      	ldr	r3, [r3, #16]
 800c970:	69ba      	ldr	r2, [r7, #24]
 800c972:	0151      	lsls	r1, r2, #5
 800c974:	69fa      	ldr	r2, [r7, #28]
 800c976:	440a      	add	r2, r1
 800c978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c97c:	0cdb      	lsrs	r3, r3, #19
 800c97e:	04db      	lsls	r3, r3, #19
 800c980:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	015a      	lsls	r2, r3, #5
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	4413      	add	r3, r2
 800c98a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	69ba      	ldr	r2, [r7, #24]
 800c992:	0151      	lsls	r1, r2, #5
 800c994:	69fa      	ldr	r2, [r7, #28]
 800c996:	440a      	add	r2, r1
 800c998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c99c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800c9a0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800c9a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	699b      	ldr	r3, [r3, #24]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d126      	bne.n	800c9fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	015a      	lsls	r2, r3, #5
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9ba:	691a      	ldr	r2, [r3, #16]
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9c4:	69b9      	ldr	r1, [r7, #24]
 800c9c6:	0148      	lsls	r0, r1, #5
 800c9c8:	69f9      	ldr	r1, [r7, #28]
 800c9ca:	4401      	add	r1, r0
 800c9cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	015a      	lsls	r2, r3, #5
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	4413      	add	r3, r2
 800c9dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	69ba      	ldr	r2, [r7, #24]
 800c9e4:	0151      	lsls	r1, r2, #5
 800c9e6:	69fa      	ldr	r2, [r7, #28]
 800c9e8:	440a      	add	r2, r1
 800c9ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c9ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c9f2:	6113      	str	r3, [r2, #16]
 800c9f4:	e03a      	b.n	800ca6c <USB_EPStartXfer+0x3e4>
 800c9f6:	bf00      	nop
 800c9f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	699a      	ldr	r2, [r3, #24]
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	4413      	add	r3, r2
 800ca06:	1e5a      	subs	r2, r3, #1
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca10:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	8afa      	ldrh	r2, [r7, #22]
 800ca18:	fb03 f202 	mul.w	r2, r3, r2
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	015a      	lsls	r2, r3, #5
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	4413      	add	r3, r2
 800ca28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca2c:	691a      	ldr	r2, [r3, #16]
 800ca2e:	8afb      	ldrh	r3, [r7, #22]
 800ca30:	04d9      	lsls	r1, r3, #19
 800ca32:	4b38      	ldr	r3, [pc, #224]	@ (800cb14 <USB_EPStartXfer+0x48c>)
 800ca34:	400b      	ands	r3, r1
 800ca36:	69b9      	ldr	r1, [r7, #24]
 800ca38:	0148      	lsls	r0, r1, #5
 800ca3a:	69f9      	ldr	r1, [r7, #28]
 800ca3c:	4401      	add	r1, r0
 800ca3e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ca42:	4313      	orrs	r3, r2
 800ca44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	015a      	lsls	r2, r3, #5
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca52:	691a      	ldr	r2, [r3, #16]
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	69db      	ldr	r3, [r3, #28]
 800ca58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca5c:	69b9      	ldr	r1, [r7, #24]
 800ca5e:	0148      	lsls	r0, r1, #5
 800ca60:	69f9      	ldr	r1, [r7, #28]
 800ca62:	4401      	add	r1, r0
 800ca64:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ca6c:	79fb      	ldrb	r3, [r7, #7]
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d10d      	bne.n	800ca8e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d009      	beq.n	800ca8e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	6919      	ldr	r1, [r3, #16]
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	015a      	lsls	r2, r3, #5
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	4413      	add	r3, r2
 800ca86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca8a:	460a      	mov	r2, r1
 800ca8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	791b      	ldrb	r3, [r3, #4]
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d128      	bne.n	800cae8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d110      	bne.n	800cac8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	015a      	lsls	r2, r3, #5
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	4413      	add	r3, r2
 800caae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	69ba      	ldr	r2, [r7, #24]
 800cab6:	0151      	lsls	r1, r2, #5
 800cab8:	69fa      	ldr	r2, [r7, #28]
 800caba:	440a      	add	r2, r1
 800cabc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cac0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cac4:	6013      	str	r3, [r2, #0]
 800cac6:	e00f      	b.n	800cae8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	015a      	lsls	r2, r3, #5
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	4413      	add	r3, r2
 800cad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	69ba      	ldr	r2, [r7, #24]
 800cad8:	0151      	lsls	r1, r2, #5
 800cada:	69fa      	ldr	r2, [r7, #28]
 800cadc:	440a      	add	r2, r1
 800cade:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cae6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cae8:	69bb      	ldr	r3, [r7, #24]
 800caea:	015a      	lsls	r2, r3, #5
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	4413      	add	r3, r2
 800caf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	69ba      	ldr	r2, [r7, #24]
 800caf8:	0151      	lsls	r1, r2, #5
 800cafa:	69fa      	ldr	r2, [r7, #28]
 800cafc:	440a      	add	r2, r1
 800cafe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cb02:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cb06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3720      	adds	r7, #32
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	1ff80000 	.word	0x1ff80000

0800cb18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b087      	sub	sp, #28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	4613      	mov	r3, r2
 800cb24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	785b      	ldrb	r3, [r3, #1]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	f040 80ce 	bne.w	800ccd6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	699b      	ldr	r3, [r3, #24]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d132      	bne.n	800cba8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	015a      	lsls	r2, r3, #5
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	4413      	add	r3, r2
 800cb4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	693a      	ldr	r2, [r7, #16]
 800cb52:	0151      	lsls	r1, r2, #5
 800cb54:	697a      	ldr	r2, [r7, #20]
 800cb56:	440a      	add	r2, r1
 800cb58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cb5c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800cb60:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800cb64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	693a      	ldr	r2, [r7, #16]
 800cb76:	0151      	lsls	r1, r2, #5
 800cb78:	697a      	ldr	r2, [r7, #20]
 800cb7a:	440a      	add	r2, r1
 800cb7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cb80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cb84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	015a      	lsls	r2, r3, #5
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb92:	691b      	ldr	r3, [r3, #16]
 800cb94:	693a      	ldr	r2, [r7, #16]
 800cb96:	0151      	lsls	r1, r2, #5
 800cb98:	697a      	ldr	r2, [r7, #20]
 800cb9a:	440a      	add	r2, r1
 800cb9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cba0:	0cdb      	lsrs	r3, r3, #19
 800cba2:	04db      	lsls	r3, r3, #19
 800cba4:	6113      	str	r3, [r2, #16]
 800cba6:	e04e      	b.n	800cc46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	015a      	lsls	r2, r3, #5
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	4413      	add	r3, r2
 800cbb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbb4:	691b      	ldr	r3, [r3, #16]
 800cbb6:	693a      	ldr	r2, [r7, #16]
 800cbb8:	0151      	lsls	r1, r2, #5
 800cbba:	697a      	ldr	r2, [r7, #20]
 800cbbc:	440a      	add	r2, r1
 800cbbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cbc2:	0cdb      	lsrs	r3, r3, #19
 800cbc4:	04db      	lsls	r3, r3, #19
 800cbc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	015a      	lsls	r2, r3, #5
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	4413      	add	r3, r2
 800cbd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	693a      	ldr	r2, [r7, #16]
 800cbd8:	0151      	lsls	r1, r2, #5
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	440a      	add	r2, r1
 800cbde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cbe2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800cbe6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800cbea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	699a      	ldr	r2, [r3, #24]
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d903      	bls.n	800cc00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	68da      	ldr	r2, [r3, #12]
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	015a      	lsls	r2, r3, #5
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	4413      	add	r3, r2
 800cc08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	693a      	ldr	r2, [r7, #16]
 800cc10:	0151      	lsls	r1, r2, #5
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	440a      	add	r2, r1
 800cc16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cc1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	015a      	lsls	r2, r3, #5
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	4413      	add	r3, r2
 800cc28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc2c:	691a      	ldr	r2, [r3, #16]
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	699b      	ldr	r3, [r3, #24]
 800cc32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc36:	6939      	ldr	r1, [r7, #16]
 800cc38:	0148      	lsls	r0, r1, #5
 800cc3a:	6979      	ldr	r1, [r7, #20]
 800cc3c:	4401      	add	r1, r0
 800cc3e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800cc42:	4313      	orrs	r3, r2
 800cc44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cc46:	79fb      	ldrb	r3, [r7, #7]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d11e      	bne.n	800cc8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	695b      	ldr	r3, [r3, #20]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d009      	beq.n	800cc68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	015a      	lsls	r2, r3, #5
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc60:	461a      	mov	r2, r3
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	695b      	ldr	r3, [r3, #20]
 800cc66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	015a      	lsls	r2, r3, #5
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	4413      	add	r3, r2
 800cc70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	693a      	ldr	r2, [r7, #16]
 800cc78:	0151      	lsls	r1, r2, #5
 800cc7a:	697a      	ldr	r2, [r7, #20]
 800cc7c:	440a      	add	r2, r1
 800cc7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cc82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cc86:	6013      	str	r3, [r2, #0]
 800cc88:	e097      	b.n	800cdba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	015a      	lsls	r2, r3, #5
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	4413      	add	r3, r2
 800cc92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	693a      	ldr	r2, [r7, #16]
 800cc9a:	0151      	lsls	r1, r2, #5
 800cc9c:	697a      	ldr	r2, [r7, #20]
 800cc9e:	440a      	add	r2, r1
 800cca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cca4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cca8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	699b      	ldr	r3, [r3, #24]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f000 8083 	beq.w	800cdba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ccba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	f003 030f 	and.w	r3, r3, #15
 800ccc4:	2101      	movs	r1, #1
 800ccc6:	fa01 f303 	lsl.w	r3, r1, r3
 800ccca:	6979      	ldr	r1, [r7, #20]
 800cccc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	634b      	str	r3, [r1, #52]	@ 0x34
 800ccd4:	e071      	b.n	800cdba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	015a      	lsls	r2, r3, #5
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	4413      	add	r3, r2
 800ccde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	693a      	ldr	r2, [r7, #16]
 800cce6:	0151      	lsls	r1, r2, #5
 800cce8:	697a      	ldr	r2, [r7, #20]
 800ccea:	440a      	add	r2, r1
 800ccec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ccf0:	0cdb      	lsrs	r3, r3, #19
 800ccf2:	04db      	lsls	r3, r3, #19
 800ccf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	015a      	lsls	r2, r3, #5
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd02:	691b      	ldr	r3, [r3, #16]
 800cd04:	693a      	ldr	r2, [r7, #16]
 800cd06:	0151      	lsls	r1, r2, #5
 800cd08:	697a      	ldr	r2, [r7, #20]
 800cd0a:	440a      	add	r2, r1
 800cd0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd10:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800cd14:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800cd18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	699b      	ldr	r3, [r3, #24]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d003      	beq.n	800cd2a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	68da      	ldr	r2, [r3, #12]
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	68da      	ldr	r2, [r3, #12]
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	015a      	lsls	r2, r3, #5
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	4413      	add	r3, r2
 800cd3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd3e:	691b      	ldr	r3, [r3, #16]
 800cd40:	693a      	ldr	r2, [r7, #16]
 800cd42:	0151      	lsls	r1, r2, #5
 800cd44:	697a      	ldr	r2, [r7, #20]
 800cd46:	440a      	add	r2, r1
 800cd48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cd50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	015a      	lsls	r2, r3, #5
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	4413      	add	r3, r2
 800cd5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd5e:	691a      	ldr	r2, [r3, #16]
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd68:	6939      	ldr	r1, [r7, #16]
 800cd6a:	0148      	lsls	r0, r1, #5
 800cd6c:	6979      	ldr	r1, [r7, #20]
 800cd6e:	4401      	add	r1, r0
 800cd70:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800cd74:	4313      	orrs	r3, r2
 800cd76:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cd78:	79fb      	ldrb	r3, [r7, #7]
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d10d      	bne.n	800cd9a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d009      	beq.n	800cd9a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	6919      	ldr	r1, [r3, #16]
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	015a      	lsls	r2, r3, #5
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	4413      	add	r3, r2
 800cd92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd96:	460a      	mov	r2, r1
 800cd98:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	015a      	lsls	r2, r3, #5
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	4413      	add	r3, r2
 800cda2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	693a      	ldr	r2, [r7, #16]
 800cdaa:	0151      	lsls	r1, r2, #5
 800cdac:	697a      	ldr	r2, [r7, #20]
 800cdae:	440a      	add	r2, r1
 800cdb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cdb4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800cdb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	371c      	adds	r7, #28
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b087      	sub	sp, #28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	785b      	ldrb	r3, [r3, #1]
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d14a      	bne.n	800ce7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	015a      	lsls	r2, r3, #5
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	4413      	add	r3, r2
 800cdf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cdfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cdfe:	f040 8086 	bne.w	800cf0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	015a      	lsls	r2, r3, #5
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	683a      	ldr	r2, [r7, #0]
 800ce14:	7812      	ldrb	r2, [r2, #0]
 800ce16:	0151      	lsls	r1, r2, #5
 800ce18:	693a      	ldr	r2, [r7, #16]
 800ce1a:	440a      	add	r2, r1
 800ce1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ce20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ce24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	015a      	lsls	r2, r3, #5
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	4413      	add	r3, r2
 800ce30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	683a      	ldr	r2, [r7, #0]
 800ce38:	7812      	ldrb	r2, [r2, #0]
 800ce3a:	0151      	lsls	r1, r2, #5
 800ce3c:	693a      	ldr	r2, [r7, #16]
 800ce3e:	440a      	add	r2, r1
 800ce40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ce44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ce48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d902      	bls.n	800ce60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	75fb      	strb	r3, [r7, #23]
          break;
 800ce5e:	e056      	b.n	800cf0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	015a      	lsls	r2, r3, #5
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	4413      	add	r3, r2
 800ce6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ce74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ce78:	d0e7      	beq.n	800ce4a <USB_EPStopXfer+0x82>
 800ce7a:	e048      	b.n	800cf0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	015a      	lsls	r2, r3, #5
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	4413      	add	r3, r2
 800ce86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ce90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ce94:	d13b      	bne.n	800cf0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	015a      	lsls	r2, r3, #5
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	4413      	add	r3, r2
 800cea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	683a      	ldr	r2, [r7, #0]
 800cea8:	7812      	ldrb	r2, [r2, #0]
 800ceaa:	0151      	lsls	r1, r2, #5
 800ceac:	693a      	ldr	r2, [r7, #16]
 800ceae:	440a      	add	r2, r1
 800ceb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ceb4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ceb8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	015a      	lsls	r2, r3, #5
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	4413      	add	r3, r2
 800cec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	683a      	ldr	r2, [r7, #0]
 800cecc:	7812      	ldrb	r2, [r2, #0]
 800cece:	0151      	lsls	r1, r2, #5
 800ced0:	693a      	ldr	r2, [r7, #16]
 800ced2:	440a      	add	r2, r1
 800ced4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ced8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cedc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	3301      	adds	r3, #1
 800cee2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d902      	bls.n	800cef4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ceee:	2301      	movs	r3, #1
 800cef0:	75fb      	strb	r3, [r7, #23]
          break;
 800cef2:	e00c      	b.n	800cf0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	015a      	lsls	r2, r3, #5
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	4413      	add	r3, r2
 800cefe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cf08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cf0c:	d0e7      	beq.n	800cede <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800cf0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	371c      	adds	r7, #28
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b089      	sub	sp, #36	@ 0x24
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	4611      	mov	r1, r2
 800cf28:	461a      	mov	r2, r3
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	71fb      	strb	r3, [r7, #7]
 800cf2e:	4613      	mov	r3, r2
 800cf30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cf3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d123      	bne.n	800cf8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cf42:	88bb      	ldrh	r3, [r7, #4]
 800cf44:	3303      	adds	r3, #3
 800cf46:	089b      	lsrs	r3, r3, #2
 800cf48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	61bb      	str	r3, [r7, #24]
 800cf4e:	e018      	b.n	800cf82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cf50:	79fb      	ldrb	r3, [r7, #7]
 800cf52:	031a      	lsls	r2, r3, #12
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	4413      	add	r3, r2
 800cf58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	3301      	adds	r3, #1
 800cf68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	3301      	adds	r3, #1
 800cf74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	61bb      	str	r3, [r7, #24]
 800cf82:	69ba      	ldr	r2, [r7, #24]
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d3e2      	bcc.n	800cf50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cf8a:	2300      	movs	r3, #0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3724      	adds	r7, #36	@ 0x24
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr

0800cf98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b08b      	sub	sp, #44	@ 0x2c
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cfae:	88fb      	ldrh	r3, [r7, #6]
 800cfb0:	089b      	lsrs	r3, r3, #2
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cfb6:	88fb      	ldrh	r3, [r7, #6]
 800cfb8:	f003 0303 	and.w	r3, r3, #3
 800cfbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	623b      	str	r3, [r7, #32]
 800cfc2:	e014      	b.n	800cfee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfce:	601a      	str	r2, [r3, #0]
    pDest++;
 800cfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd8:	3301      	adds	r3, #1
 800cfda:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfde:	3301      	adds	r3, #1
 800cfe0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800cfe8:	6a3b      	ldr	r3, [r7, #32]
 800cfea:	3301      	adds	r3, #1
 800cfec:	623b      	str	r3, [r7, #32]
 800cfee:	6a3a      	ldr	r2, [r7, #32]
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d3e6      	bcc.n	800cfc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cff6:	8bfb      	ldrh	r3, [r7, #30]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d01e      	beq.n	800d03a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cffc:	2300      	movs	r3, #0
 800cffe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d006:	461a      	mov	r2, r3
 800d008:	f107 0310 	add.w	r3, r7, #16
 800d00c:	6812      	ldr	r2, [r2, #0]
 800d00e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d010:	693a      	ldr	r2, [r7, #16]
 800d012:	6a3b      	ldr	r3, [r7, #32]
 800d014:	b2db      	uxtb	r3, r3
 800d016:	00db      	lsls	r3, r3, #3
 800d018:	fa22 f303 	lsr.w	r3, r2, r3
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d020:	701a      	strb	r2, [r3, #0]
      i++;
 800d022:	6a3b      	ldr	r3, [r7, #32]
 800d024:	3301      	adds	r3, #1
 800d026:	623b      	str	r3, [r7, #32]
      pDest++;
 800d028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02a:	3301      	adds	r3, #1
 800d02c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d02e:	8bfb      	ldrh	r3, [r7, #30]
 800d030:	3b01      	subs	r3, #1
 800d032:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d034:	8bfb      	ldrh	r3, [r7, #30]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1ea      	bne.n	800d010 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	372c      	adds	r7, #44	@ 0x2c
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d048:	b480      	push	{r7}
 800d04a:	b085      	sub	sp, #20
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	785b      	ldrb	r3, [r3, #1]
 800d060:	2b01      	cmp	r3, #1
 800d062:	d12c      	bne.n	800d0be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	015a      	lsls	r2, r3, #5
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4413      	add	r3, r2
 800d06c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	db12      	blt.n	800d09c <USB_EPSetStall+0x54>
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00f      	beq.n	800d09c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	015a      	lsls	r2, r3, #5
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	4413      	add	r3, r2
 800d084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	0151      	lsls	r1, r2, #5
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	440a      	add	r2, r1
 800d092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d096:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d09a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	015a      	lsls	r2, r3, #5
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	0151      	lsls	r1, r2, #5
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	440a      	add	r2, r1
 800d0b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d0b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d0ba:	6013      	str	r3, [r2, #0]
 800d0bc:	e02b      	b.n	800d116 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	015a      	lsls	r2, r3, #5
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	db12      	blt.n	800d0f6 <USB_EPSetStall+0xae>
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00f      	beq.n	800d0f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	015a      	lsls	r2, r3, #5
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	4413      	add	r3, r2
 800d0de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	68ba      	ldr	r2, [r7, #8]
 800d0e6:	0151      	lsls	r1, r2, #5
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	440a      	add	r2, r1
 800d0ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d0f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	015a      	lsls	r2, r3, #5
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	68ba      	ldr	r2, [r7, #8]
 800d106:	0151      	lsls	r1, r2, #5
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	440a      	add	r2, r1
 800d10c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d110:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d114:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	785b      	ldrb	r3, [r3, #1]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d128      	bne.n	800d192 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	015a      	lsls	r2, r3, #5
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	4413      	add	r3, r2
 800d148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	68ba      	ldr	r2, [r7, #8]
 800d150:	0151      	lsls	r1, r2, #5
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	440a      	add	r2, r1
 800d156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d15a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d15e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	791b      	ldrb	r3, [r3, #4]
 800d164:	2b03      	cmp	r3, #3
 800d166:	d003      	beq.n	800d170 <USB_EPClearStall+0x4c>
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	791b      	ldrb	r3, [r3, #4]
 800d16c:	2b02      	cmp	r3, #2
 800d16e:	d138      	bne.n	800d1e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	015a      	lsls	r2, r3, #5
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	4413      	add	r3, r2
 800d178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	0151      	lsls	r1, r2, #5
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	440a      	add	r2, r1
 800d186:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d18a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d18e:	6013      	str	r3, [r2, #0]
 800d190:	e027      	b.n	800d1e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	015a      	lsls	r2, r3, #5
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	4413      	add	r3, r2
 800d19a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	68ba      	ldr	r2, [r7, #8]
 800d1a2:	0151      	lsls	r1, r2, #5
 800d1a4:	68fa      	ldr	r2, [r7, #12]
 800d1a6:	440a      	add	r2, r1
 800d1a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d1ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d1b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	791b      	ldrb	r3, [r3, #4]
 800d1b6:	2b03      	cmp	r3, #3
 800d1b8:	d003      	beq.n	800d1c2 <USB_EPClearStall+0x9e>
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	791b      	ldrb	r3, [r3, #4]
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	d10f      	bne.n	800d1e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	015a      	lsls	r2, r3, #5
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68ba      	ldr	r2, [r7, #8]
 800d1d2:	0151      	lsls	r1, r2, #5
 800d1d4:	68fa      	ldr	r2, [r7, #12]
 800d1d6:	440a      	add	r2, r1
 800d1d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d1dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d1e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d1e2:	2300      	movs	r3, #0
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3714      	adds	r7, #20
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d20e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d212:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	78fb      	ldrb	r3, [r7, #3]
 800d21e:	011b      	lsls	r3, r3, #4
 800d220:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800d224:	68f9      	ldr	r1, [r7, #12]
 800d226:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d22a:	4313      	orrs	r3, r2
 800d22c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	3714      	adds	r7, #20
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b085      	sub	sp, #20
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d256:	f023 0303 	bic.w	r3, r3, #3
 800d25a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d26a:	f023 0302 	bic.w	r3, r3, #2
 800d26e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3714      	adds	r7, #20
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr

0800d27e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d27e:	b480      	push	{r7}
 800d280:	b085      	sub	sp, #20
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d298:	f023 0303 	bic.w	r3, r3, #3
 800d29c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	68fa      	ldr	r2, [r7, #12]
 800d2a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d2ac:	f043 0302 	orr.w	r3, r3, #2
 800d2b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d2b2:	2300      	movs	r3, #0
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3714      	adds	r7, #20
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr

0800d2c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b085      	sub	sp, #20
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	695b      	ldr	r3, [r3, #20]
 800d2cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	699b      	ldr	r3, [r3, #24]
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	4013      	ands	r3, r2
 800d2d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3714      	adds	r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr

0800d2e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2e6:	b480      	push	{r7}
 800d2e8:	b085      	sub	sp, #20
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2f8:	699b      	ldr	r3, [r3, #24]
 800d2fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d302:	69db      	ldr	r3, [r3, #28]
 800d304:	68ba      	ldr	r2, [r7, #8]
 800d306:	4013      	ands	r3, r2
 800d308:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	0c1b      	lsrs	r3, r3, #16
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3714      	adds	r7, #20
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d31a:	b480      	push	{r7}
 800d31c:	b085      	sub	sp, #20
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d32c:	699b      	ldr	r3, [r3, #24]
 800d32e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d336:	69db      	ldr	r3, [r3, #28]
 800d338:	68ba      	ldr	r2, [r7, #8]
 800d33a:	4013      	ands	r3, r2
 800d33c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	b29b      	uxth	r3, r3
}
 800d342:	4618      	mov	r0, r3
 800d344:	3714      	adds	r7, #20
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr

0800d34e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d34e:	b480      	push	{r7}
 800d350:	b085      	sub	sp, #20
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
 800d356:	460b      	mov	r3, r1
 800d358:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d35e:	78fb      	ldrb	r3, [r7, #3]
 800d360:	015a      	lsls	r2, r3, #5
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	4413      	add	r3, r2
 800d366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d374:	695b      	ldr	r3, [r3, #20]
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	4013      	ands	r3, r2
 800d37a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d37c:	68bb      	ldr	r3, [r7, #8]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b087      	sub	sp, #28
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
 800d392:	460b      	mov	r3, r1
 800d394:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d3ae:	78fb      	ldrb	r3, [r7, #3]
 800d3b0:	f003 030f 	and.w	r3, r3, #15
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	fa22 f303 	lsr.w	r3, r2, r3
 800d3ba:	01db      	lsls	r3, r3, #7
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	693a      	ldr	r2, [r7, #16]
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d3c4:	78fb      	ldrb	r3, [r7, #3]
 800d3c6:	015a      	lsls	r2, r3, #5
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	693a      	ldr	r2, [r7, #16]
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d3d8:	68bb      	ldr	r3, [r7, #8]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	371c      	adds	r7, #28
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr

0800d3e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d3e6:	b480      	push	{r7}
 800d3e8:	b083      	sub	sp, #12
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	695b      	ldr	r3, [r3, #20]
 800d3f2:	f003 0301 	and.w	r3, r3, #1
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	370c      	adds	r7, #12
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d402:	b480      	push	{r7}
 800d404:	b085      	sub	sp, #20
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d41c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d420:	f023 0307 	bic.w	r3, r3, #7
 800d424:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d438:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3714      	adds	r7, #20
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d448:	b480      	push	{r7}
 800d44a:	b087      	sub	sp, #28
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	460b      	mov	r3, r1
 800d452:	607a      	str	r2, [r7, #4]
 800d454:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	333c      	adds	r3, #60	@ 0x3c
 800d45e:	3304      	adds	r3, #4
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	4a26      	ldr	r2, [pc, #152]	@ (800d500 <USB_EP0_OutStart+0xb8>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d90a      	bls.n	800d482 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d47c:	d101      	bne.n	800d482 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d47e:	2300      	movs	r3, #0
 800d480:	e037      	b.n	800d4f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d488:	461a      	mov	r2, r3
 800d48a:	2300      	movs	r3, #0
 800d48c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	697a      	ldr	r2, [r7, #20]
 800d498:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d49c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d4a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4a8:	691b      	ldr	r3, [r3, #16]
 800d4aa:	697a      	ldr	r2, [r7, #20]
 800d4ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d4b0:	f043 0318 	orr.w	r3, r3, #24
 800d4b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4bc:	691b      	ldr	r3, [r3, #16]
 800d4be:	697a      	ldr	r2, [r7, #20]
 800d4c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d4c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800d4c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d4ca:	7afb      	ldrb	r3, [r7, #11]
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d10f      	bne.n	800d4f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	697a      	ldr	r2, [r7, #20]
 800d4e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d4ea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800d4ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d4f0:	2300      	movs	r3, #0
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	371c      	adds	r7, #28
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	4f54300a 	.word	0x4f54300a

0800d504 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d50c:	2300      	movs	r3, #0
 800d50e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	3301      	adds	r3, #1
 800d514:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	4a13      	ldr	r2, [pc, #76]	@ (800d568 <USB_CoreReset+0x64>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d901      	bls.n	800d522 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d51e:	2303      	movs	r3, #3
 800d520:	e01b      	b.n	800d55a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	691b      	ldr	r3, [r3, #16]
 800d526:	2b00      	cmp	r3, #0
 800d528:	daf2      	bge.n	800d510 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d52a:	2300      	movs	r3, #0
 800d52c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	691b      	ldr	r3, [r3, #16]
 800d532:	f043 0201 	orr.w	r2, r3, #1
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	3301      	adds	r3, #1
 800d53e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	4a09      	ldr	r2, [pc, #36]	@ (800d568 <USB_CoreReset+0x64>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d901      	bls.n	800d54c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d548:	2303      	movs	r3, #3
 800d54a:	e006      	b.n	800d55a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	691b      	ldr	r3, [r3, #16]
 800d550:	f003 0301 	and.w	r3, r3, #1
 800d554:	2b01      	cmp	r3, #1
 800d556:	d0f0      	beq.n	800d53a <USB_CoreReset+0x36>

  return HAL_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr
 800d566:	bf00      	nop
 800d568:	00030d40 	.word	0x00030d40

0800d56c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d578:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d57c:	f002 fc9e 	bl	800febc <USBD_static_malloc>
 800d580:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d109      	bne.n	800d59c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	32b0      	adds	r2, #176	@ 0xb0
 800d592:	2100      	movs	r1, #0
 800d594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d598:	2302      	movs	r3, #2
 800d59a:	e0d4      	b.n	800d746 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d59c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f002 fd8c 	bl	80100c0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	32b0      	adds	r2, #176	@ 0xb0
 800d5b2:	68f9      	ldr	r1, [r7, #12]
 800d5b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	32b0      	adds	r2, #176	@ 0xb0
 800d5c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	7c1b      	ldrb	r3, [r3, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d138      	bne.n	800d646 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d5d4:	4b5e      	ldr	r3, [pc, #376]	@ (800d750 <USBD_CDC_Init+0x1e4>)
 800d5d6:	7819      	ldrb	r1, [r3, #0]
 800d5d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d5dc:	2202      	movs	r2, #2
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f002 fb49 	bl	800fc76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d5e4:	4b5a      	ldr	r3, [pc, #360]	@ (800d750 <USBD_CDC_Init+0x1e4>)
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	f003 020f 	and.w	r2, r3, #15
 800d5ec:	6879      	ldr	r1, [r7, #4]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	4413      	add	r3, r2
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	440b      	add	r3, r1
 800d5f8:	3324      	adds	r3, #36	@ 0x24
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d5fe:	4b55      	ldr	r3, [pc, #340]	@ (800d754 <USBD_CDC_Init+0x1e8>)
 800d600:	7819      	ldrb	r1, [r3, #0]
 800d602:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d606:	2202      	movs	r2, #2
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f002 fb34 	bl	800fc76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d60e:	4b51      	ldr	r3, [pc, #324]	@ (800d754 <USBD_CDC_Init+0x1e8>)
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	f003 020f 	and.w	r2, r3, #15
 800d616:	6879      	ldr	r1, [r7, #4]
 800d618:	4613      	mov	r3, r2
 800d61a:	009b      	lsls	r3, r3, #2
 800d61c:	4413      	add	r3, r2
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	440b      	add	r3, r1
 800d622:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d626:	2201      	movs	r2, #1
 800d628:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d62a:	4b4b      	ldr	r3, [pc, #300]	@ (800d758 <USBD_CDC_Init+0x1ec>)
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	f003 020f 	and.w	r2, r3, #15
 800d632:	6879      	ldr	r1, [r7, #4]
 800d634:	4613      	mov	r3, r2
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	4413      	add	r3, r2
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	440b      	add	r3, r1
 800d63e:	3326      	adds	r3, #38	@ 0x26
 800d640:	2210      	movs	r2, #16
 800d642:	801a      	strh	r2, [r3, #0]
 800d644:	e035      	b.n	800d6b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d646:	4b42      	ldr	r3, [pc, #264]	@ (800d750 <USBD_CDC_Init+0x1e4>)
 800d648:	7819      	ldrb	r1, [r3, #0]
 800d64a:	2340      	movs	r3, #64	@ 0x40
 800d64c:	2202      	movs	r2, #2
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f002 fb11 	bl	800fc76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d654:	4b3e      	ldr	r3, [pc, #248]	@ (800d750 <USBD_CDC_Init+0x1e4>)
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	f003 020f 	and.w	r2, r3, #15
 800d65c:	6879      	ldr	r1, [r7, #4]
 800d65e:	4613      	mov	r3, r2
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	4413      	add	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	440b      	add	r3, r1
 800d668:	3324      	adds	r3, #36	@ 0x24
 800d66a:	2201      	movs	r2, #1
 800d66c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d66e:	4b39      	ldr	r3, [pc, #228]	@ (800d754 <USBD_CDC_Init+0x1e8>)
 800d670:	7819      	ldrb	r1, [r3, #0]
 800d672:	2340      	movs	r3, #64	@ 0x40
 800d674:	2202      	movs	r2, #2
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f002 fafd 	bl	800fc76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d67c:	4b35      	ldr	r3, [pc, #212]	@ (800d754 <USBD_CDC_Init+0x1e8>)
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	f003 020f 	and.w	r2, r3, #15
 800d684:	6879      	ldr	r1, [r7, #4]
 800d686:	4613      	mov	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	4413      	add	r3, r2
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	440b      	add	r3, r1
 800d690:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d694:	2201      	movs	r2, #1
 800d696:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d698:	4b2f      	ldr	r3, [pc, #188]	@ (800d758 <USBD_CDC_Init+0x1ec>)
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	f003 020f 	and.w	r2, r3, #15
 800d6a0:	6879      	ldr	r1, [r7, #4]
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	440b      	add	r3, r1
 800d6ac:	3326      	adds	r3, #38	@ 0x26
 800d6ae:	2210      	movs	r2, #16
 800d6b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d6b2:	4b29      	ldr	r3, [pc, #164]	@ (800d758 <USBD_CDC_Init+0x1ec>)
 800d6b4:	7819      	ldrb	r1, [r3, #0]
 800d6b6:	2308      	movs	r3, #8
 800d6b8:	2203      	movs	r2, #3
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f002 fadb 	bl	800fc76 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d6c0:	4b25      	ldr	r3, [pc, #148]	@ (800d758 <USBD_CDC_Init+0x1ec>)
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	f003 020f 	and.w	r2, r3, #15
 800d6c8:	6879      	ldr	r1, [r7, #4]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	4413      	add	r3, r2
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	440b      	add	r3, r1
 800d6d4:	3324      	adds	r3, #36	@ 0x24
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	33b0      	adds	r3, #176	@ 0xb0
 800d6ec:	009b      	lsls	r3, r3, #2
 800d6ee:	4413      	add	r3, r2
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2200      	movs	r2, #0
 800d702:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d710:	2302      	movs	r3, #2
 800d712:	e018      	b.n	800d746 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	7c1b      	ldrb	r3, [r3, #16]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10a      	bne.n	800d732 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d71c:	4b0d      	ldr	r3, [pc, #52]	@ (800d754 <USBD_CDC_Init+0x1e8>)
 800d71e:	7819      	ldrb	r1, [r3, #0]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d726:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f002 fb92 	bl	800fe54 <USBD_LL_PrepareReceive>
 800d730:	e008      	b.n	800d744 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d732:	4b08      	ldr	r3, [pc, #32]	@ (800d754 <USBD_CDC_Init+0x1e8>)
 800d734:	7819      	ldrb	r1, [r3, #0]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d73c:	2340      	movs	r3, #64	@ 0x40
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f002 fb88 	bl	800fe54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	20000093 	.word	0x20000093
 800d754:	20000094 	.word	0x20000094
 800d758:	20000095 	.word	0x20000095

0800d75c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	460b      	mov	r3, r1
 800d766:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d768:	4b3a      	ldr	r3, [pc, #232]	@ (800d854 <USBD_CDC_DeInit+0xf8>)
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	4619      	mov	r1, r3
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f002 faa7 	bl	800fcc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d774:	4b37      	ldr	r3, [pc, #220]	@ (800d854 <USBD_CDC_DeInit+0xf8>)
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	f003 020f 	and.w	r2, r3, #15
 800d77c:	6879      	ldr	r1, [r7, #4]
 800d77e:	4613      	mov	r3, r2
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	4413      	add	r3, r2
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	440b      	add	r3, r1
 800d788:	3324      	adds	r3, #36	@ 0x24
 800d78a:	2200      	movs	r2, #0
 800d78c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d78e:	4b32      	ldr	r3, [pc, #200]	@ (800d858 <USBD_CDC_DeInit+0xfc>)
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	4619      	mov	r1, r3
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f002 fa94 	bl	800fcc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d79a:	4b2f      	ldr	r3, [pc, #188]	@ (800d858 <USBD_CDC_DeInit+0xfc>)
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	f003 020f 	and.w	r2, r3, #15
 800d7a2:	6879      	ldr	r1, [r7, #4]
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	4413      	add	r3, r2
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	440b      	add	r3, r1
 800d7ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d7b6:	4b29      	ldr	r3, [pc, #164]	@ (800d85c <USBD_CDC_DeInit+0x100>)
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f002 fa80 	bl	800fcc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d7c2:	4b26      	ldr	r3, [pc, #152]	@ (800d85c <USBD_CDC_DeInit+0x100>)
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	f003 020f 	and.w	r2, r3, #15
 800d7ca:	6879      	ldr	r1, [r7, #4]
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	4413      	add	r3, r2
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	440b      	add	r3, r1
 800d7d6:	3324      	adds	r3, #36	@ 0x24
 800d7d8:	2200      	movs	r2, #0
 800d7da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d7dc:	4b1f      	ldr	r3, [pc, #124]	@ (800d85c <USBD_CDC_DeInit+0x100>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	f003 020f 	and.w	r2, r3, #15
 800d7e4:	6879      	ldr	r1, [r7, #4]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	4413      	add	r3, r2
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	440b      	add	r3, r1
 800d7f0:	3326      	adds	r3, #38	@ 0x26
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	32b0      	adds	r2, #176	@ 0xb0
 800d800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d01f      	beq.n	800d848 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	33b0      	adds	r3, #176	@ 0xb0
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	4413      	add	r3, r2
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	32b0      	adds	r2, #176	@ 0xb0
 800d826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f002 fb54 	bl	800fed8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	32b0      	adds	r2, #176	@ 0xb0
 800d83a:	2100      	movs	r1, #0
 800d83c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d848:	2300      	movs	r3, #0
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3708      	adds	r7, #8
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	20000093 	.word	0x20000093
 800d858:	20000094 	.word	0x20000094
 800d85c:	20000095 	.word	0x20000095

0800d860 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	32b0      	adds	r2, #176	@ 0xb0
 800d874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d878:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d87a:	2300      	movs	r3, #0
 800d87c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d87e:	2300      	movs	r3, #0
 800d880:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d882:	2300      	movs	r3, #0
 800d884:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d101      	bne.n	800d890 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d88c:	2303      	movs	r3, #3
 800d88e:	e0bf      	b.n	800da10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d050      	beq.n	800d93e <USBD_CDC_Setup+0xde>
 800d89c:	2b20      	cmp	r3, #32
 800d89e:	f040 80af 	bne.w	800da00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	88db      	ldrh	r3, [r3, #6]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d03a      	beq.n	800d920 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	b25b      	sxtb	r3, r3
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	da1b      	bge.n	800d8ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	33b0      	adds	r3, #176	@ 0xb0
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	4413      	add	r3, r2
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	683a      	ldr	r2, [r7, #0]
 800d8c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d8ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	88d2      	ldrh	r2, [r2, #6]
 800d8d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	88db      	ldrh	r3, [r3, #6]
 800d8d6:	2b07      	cmp	r3, #7
 800d8d8:	bf28      	it	cs
 800d8da:	2307      	movcs	r3, #7
 800d8dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	89fa      	ldrh	r2, [r7, #14]
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f001 fd41 	bl	800f36c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d8ea:	e090      	b.n	800da0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	785a      	ldrb	r2, [r3, #1]
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	88db      	ldrh	r3, [r3, #6]
 800d8fa:	2b3f      	cmp	r3, #63	@ 0x3f
 800d8fc:	d803      	bhi.n	800d906 <USBD_CDC_Setup+0xa6>
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	88db      	ldrh	r3, [r3, #6]
 800d902:	b2da      	uxtb	r2, r3
 800d904:	e000      	b.n	800d908 <USBD_CDC_Setup+0xa8>
 800d906:	2240      	movs	r2, #64	@ 0x40
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d90e:	6939      	ldr	r1, [r7, #16]
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d916:	461a      	mov	r2, r3
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f001 fd53 	bl	800f3c4 <USBD_CtlPrepareRx>
      break;
 800d91e:	e076      	b.n	800da0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d926:	687a      	ldr	r2, [r7, #4]
 800d928:	33b0      	adds	r3, #176	@ 0xb0
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4413      	add	r3, r2
 800d92e:	685b      	ldr	r3, [r3, #4]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	683a      	ldr	r2, [r7, #0]
 800d934:	7850      	ldrb	r0, [r2, #1]
 800d936:	2200      	movs	r2, #0
 800d938:	6839      	ldr	r1, [r7, #0]
 800d93a:	4798      	blx	r3
      break;
 800d93c:	e067      	b.n	800da0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	785b      	ldrb	r3, [r3, #1]
 800d942:	2b0b      	cmp	r3, #11
 800d944:	d851      	bhi.n	800d9ea <USBD_CDC_Setup+0x18a>
 800d946:	a201      	add	r2, pc, #4	@ (adr r2, 800d94c <USBD_CDC_Setup+0xec>)
 800d948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d94c:	0800d97d 	.word	0x0800d97d
 800d950:	0800d9f9 	.word	0x0800d9f9
 800d954:	0800d9eb 	.word	0x0800d9eb
 800d958:	0800d9eb 	.word	0x0800d9eb
 800d95c:	0800d9eb 	.word	0x0800d9eb
 800d960:	0800d9eb 	.word	0x0800d9eb
 800d964:	0800d9eb 	.word	0x0800d9eb
 800d968:	0800d9eb 	.word	0x0800d9eb
 800d96c:	0800d9eb 	.word	0x0800d9eb
 800d970:	0800d9eb 	.word	0x0800d9eb
 800d974:	0800d9a7 	.word	0x0800d9a7
 800d978:	0800d9d1 	.word	0x0800d9d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d982:	b2db      	uxtb	r3, r3
 800d984:	2b03      	cmp	r3, #3
 800d986:	d107      	bne.n	800d998 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d988:	f107 030a 	add.w	r3, r7, #10
 800d98c:	2202      	movs	r2, #2
 800d98e:	4619      	mov	r1, r3
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f001 fceb 	bl	800f36c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d996:	e032      	b.n	800d9fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d998:	6839      	ldr	r1, [r7, #0]
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f001 fc75 	bl	800f28a <USBD_CtlError>
            ret = USBD_FAIL;
 800d9a0:	2303      	movs	r3, #3
 800d9a2:	75fb      	strb	r3, [r7, #23]
          break;
 800d9a4:	e02b      	b.n	800d9fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	2b03      	cmp	r3, #3
 800d9b0:	d107      	bne.n	800d9c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d9b2:	f107 030d 	add.w	r3, r7, #13
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f001 fcd6 	bl	800f36c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d9c0:	e01d      	b.n	800d9fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d9c2:	6839      	ldr	r1, [r7, #0]
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f001 fc60 	bl	800f28a <USBD_CtlError>
            ret = USBD_FAIL;
 800d9ca:	2303      	movs	r3, #3
 800d9cc:	75fb      	strb	r3, [r7, #23]
          break;
 800d9ce:	e016      	b.n	800d9fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	2b03      	cmp	r3, #3
 800d9da:	d00f      	beq.n	800d9fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d9dc:	6839      	ldr	r1, [r7, #0]
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f001 fc53 	bl	800f28a <USBD_CtlError>
            ret = USBD_FAIL;
 800d9e4:	2303      	movs	r3, #3
 800d9e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d9e8:	e008      	b.n	800d9fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d9ea:	6839      	ldr	r1, [r7, #0]
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f001 fc4c 	bl	800f28a <USBD_CtlError>
          ret = USBD_FAIL;
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	75fb      	strb	r3, [r7, #23]
          break;
 800d9f6:	e002      	b.n	800d9fe <USBD_CDC_Setup+0x19e>
          break;
 800d9f8:	bf00      	nop
 800d9fa:	e008      	b.n	800da0e <USBD_CDC_Setup+0x1ae>
          break;
 800d9fc:	bf00      	nop
      }
      break;
 800d9fe:	e006      	b.n	800da0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800da00:	6839      	ldr	r1, [r7, #0]
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f001 fc41 	bl	800f28a <USBD_CtlError>
      ret = USBD_FAIL;
 800da08:	2303      	movs	r3, #3
 800da0a:	75fb      	strb	r3, [r7, #23]
      break;
 800da0c:	bf00      	nop
  }

  return (uint8_t)ret;
 800da0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3718      	adds	r7, #24
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	460b      	mov	r3, r1
 800da22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	32b0      	adds	r2, #176	@ 0xb0
 800da36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d101      	bne.n	800da42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800da3e:	2303      	movs	r3, #3
 800da40:	e065      	b.n	800db0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	32b0      	adds	r2, #176	@ 0xb0
 800da4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800da52:	78fb      	ldrb	r3, [r7, #3]
 800da54:	f003 020f 	and.w	r2, r3, #15
 800da58:	6879      	ldr	r1, [r7, #4]
 800da5a:	4613      	mov	r3, r2
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	4413      	add	r3, r2
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	440b      	add	r3, r1
 800da64:	3318      	adds	r3, #24
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d02f      	beq.n	800dacc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800da6c:	78fb      	ldrb	r3, [r7, #3]
 800da6e:	f003 020f 	and.w	r2, r3, #15
 800da72:	6879      	ldr	r1, [r7, #4]
 800da74:	4613      	mov	r3, r2
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	4413      	add	r3, r2
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	440b      	add	r3, r1
 800da7e:	3318      	adds	r3, #24
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	78fb      	ldrb	r3, [r7, #3]
 800da84:	f003 010f 	and.w	r1, r3, #15
 800da88:	68f8      	ldr	r0, [r7, #12]
 800da8a:	460b      	mov	r3, r1
 800da8c:	00db      	lsls	r3, r3, #3
 800da8e:	440b      	add	r3, r1
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	4403      	add	r3, r0
 800da94:	3348      	adds	r3, #72	@ 0x48
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	fbb2 f1f3 	udiv	r1, r2, r3
 800da9c:	fb01 f303 	mul.w	r3, r1, r3
 800daa0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d112      	bne.n	800dacc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800daa6:	78fb      	ldrb	r3, [r7, #3]
 800daa8:	f003 020f 	and.w	r2, r3, #15
 800daac:	6879      	ldr	r1, [r7, #4]
 800daae:	4613      	mov	r3, r2
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	4413      	add	r3, r2
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	440b      	add	r3, r1
 800dab8:	3318      	adds	r3, #24
 800daba:	2200      	movs	r2, #0
 800dabc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dabe:	78f9      	ldrb	r1, [r7, #3]
 800dac0:	2300      	movs	r3, #0
 800dac2:	2200      	movs	r2, #0
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f002 f9a4 	bl	800fe12 <USBD_LL_Transmit>
 800daca:	e01f      	b.n	800db0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	2200      	movs	r2, #0
 800dad0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	33b0      	adds	r3, #176	@ 0xb0
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	4413      	add	r3, r2
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	691b      	ldr	r3, [r3, #16]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d010      	beq.n	800db0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	33b0      	adds	r3, #176	@ 0xb0
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	4413      	add	r3, r2
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	691b      	ldr	r3, [r3, #16]
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800db08:	78fa      	ldrb	r2, [r7, #3]
 800db0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800db0c:	2300      	movs	r3, #0
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b084      	sub	sp, #16
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
 800db1e:	460b      	mov	r3, r1
 800db20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	32b0      	adds	r2, #176	@ 0xb0
 800db2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	32b0      	adds	r2, #176	@ 0xb0
 800db3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d101      	bne.n	800db48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800db44:	2303      	movs	r3, #3
 800db46:	e01a      	b.n	800db7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800db48:	78fb      	ldrb	r3, [r7, #3]
 800db4a:	4619      	mov	r1, r3
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f002 f9a2 	bl	800fe96 <USBD_LL_GetRxDataSize>
 800db52:	4602      	mov	r2, r0
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	33b0      	adds	r3, #176	@ 0xb0
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	4413      	add	r3, r2
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800db78:	4611      	mov	r1, r2
 800db7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b084      	sub	sp, #16
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	32b0      	adds	r2, #176	@ 0xb0
 800db98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d101      	bne.n	800dba8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dba4:	2303      	movs	r3, #3
 800dba6:	e024      	b.n	800dbf2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	33b0      	adds	r3, #176	@ 0xb0
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	4413      	add	r3, r2
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d019      	beq.n	800dbf0 <USBD_CDC_EP0_RxReady+0x6a>
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800dbc2:	2bff      	cmp	r3, #255	@ 0xff
 800dbc4:	d014      	beq.n	800dbf0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	33b0      	adds	r3, #176	@ 0xb0
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	4413      	add	r3, r2
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800dbde:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800dbe0:	68fa      	ldr	r2, [r7, #12]
 800dbe2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dbe6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	22ff      	movs	r2, #255	@ 0xff
 800dbec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
	...

0800dbfc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dc04:	2182      	movs	r1, #130	@ 0x82
 800dc06:	4818      	ldr	r0, [pc, #96]	@ (800dc68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dc08:	f000 fd09 	bl	800e61e <USBD_GetEpDesc>
 800dc0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dc0e:	2101      	movs	r1, #1
 800dc10:	4815      	ldr	r0, [pc, #84]	@ (800dc68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dc12:	f000 fd04 	bl	800e61e <USBD_GetEpDesc>
 800dc16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dc18:	2181      	movs	r1, #129	@ 0x81
 800dc1a:	4813      	ldr	r0, [pc, #76]	@ (800dc68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dc1c:	f000 fcff 	bl	800e61e <USBD_GetEpDesc>
 800dc20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d002      	beq.n	800dc2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	2210      	movs	r2, #16
 800dc2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d006      	beq.n	800dc42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	2200      	movs	r2, #0
 800dc38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc3c:	711a      	strb	r2, [r3, #4]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d006      	beq.n	800dc56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc50:	711a      	strb	r2, [r3, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2243      	movs	r2, #67	@ 0x43
 800dc5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dc5c:	4b02      	ldr	r3, [pc, #8]	@ (800dc68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3718      	adds	r7, #24
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	20000050 	.word	0x20000050

0800dc6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b086      	sub	sp, #24
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dc74:	2182      	movs	r1, #130	@ 0x82
 800dc76:	4818      	ldr	r0, [pc, #96]	@ (800dcd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dc78:	f000 fcd1 	bl	800e61e <USBD_GetEpDesc>
 800dc7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dc7e:	2101      	movs	r1, #1
 800dc80:	4815      	ldr	r0, [pc, #84]	@ (800dcd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dc82:	f000 fccc 	bl	800e61e <USBD_GetEpDesc>
 800dc86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dc88:	2181      	movs	r1, #129	@ 0x81
 800dc8a:	4813      	ldr	r0, [pc, #76]	@ (800dcd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dc8c:	f000 fcc7 	bl	800e61e <USBD_GetEpDesc>
 800dc90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d002      	beq.n	800dc9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	2210      	movs	r2, #16
 800dc9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d006      	beq.n	800dcb2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	2200      	movs	r2, #0
 800dca8:	711a      	strb	r2, [r3, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f042 0202 	orr.w	r2, r2, #2
 800dcb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d006      	beq.n	800dcc6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	711a      	strb	r2, [r3, #4]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f042 0202 	orr.w	r2, r2, #2
 800dcc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2243      	movs	r2, #67	@ 0x43
 800dcca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dccc:	4b02      	ldr	r3, [pc, #8]	@ (800dcd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3718      	adds	r7, #24
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	20000050 	.word	0x20000050

0800dcdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dce4:	2182      	movs	r1, #130	@ 0x82
 800dce6:	4818      	ldr	r0, [pc, #96]	@ (800dd48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dce8:	f000 fc99 	bl	800e61e <USBD_GetEpDesc>
 800dcec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dcee:	2101      	movs	r1, #1
 800dcf0:	4815      	ldr	r0, [pc, #84]	@ (800dd48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dcf2:	f000 fc94 	bl	800e61e <USBD_GetEpDesc>
 800dcf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dcf8:	2181      	movs	r1, #129	@ 0x81
 800dcfa:	4813      	ldr	r0, [pc, #76]	@ (800dd48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dcfc:	f000 fc8f 	bl	800e61e <USBD_GetEpDesc>
 800dd00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	2210      	movs	r2, #16
 800dd0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d006      	beq.n	800dd22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	2200      	movs	r2, #0
 800dd18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd1c:	711a      	strb	r2, [r3, #4]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d006      	beq.n	800dd36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd30:	711a      	strb	r2, [r3, #4]
 800dd32:	2200      	movs	r2, #0
 800dd34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2243      	movs	r2, #67	@ 0x43
 800dd3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dd3c:	4b02      	ldr	r3, [pc, #8]	@ (800dd48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3718      	adds	r7, #24
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	20000050 	.word	0x20000050

0800dd4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	220a      	movs	r2, #10
 800dd58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dd5a:	4b03      	ldr	r3, [pc, #12]	@ (800dd68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	370c      	adds	r7, #12
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr
 800dd68:	2000000c 	.word	0x2000000c

0800dd6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d101      	bne.n	800dd80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dd7c:	2303      	movs	r3, #3
 800dd7e:	e009      	b.n	800dd94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	33b0      	adds	r3, #176	@ 0xb0
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	4413      	add	r3, r2
 800dd8e:	683a      	ldr	r2, [r7, #0]
 800dd90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dd92:	2300      	movs	r3, #0
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	370c      	adds	r7, #12
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr

0800dda0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b087      	sub	sp, #28
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	32b0      	adds	r2, #176	@ 0xb0
 800ddb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d101      	bne.n	800ddc6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ddc2:	2303      	movs	r3, #3
 800ddc4:	e008      	b.n	800ddd8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	68ba      	ldr	r2, [r7, #8]
 800ddca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ddd6:	2300      	movs	r3, #0
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	371c      	adds	r7, #28
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	32b0      	adds	r2, #176	@ 0xb0
 800ddf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddfc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d101      	bne.n	800de08 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800de04:	2303      	movs	r3, #3
 800de06:	e004      	b.n	800de12 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	683a      	ldr	r2, [r7, #0]
 800de0c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3714      	adds	r7, #20
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr
	...

0800de20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	32b0      	adds	r2, #176	@ 0xb0
 800de32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	32b0      	adds	r2, #176	@ 0xb0
 800de42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d101      	bne.n	800de4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800de4a:	2303      	movs	r3, #3
 800de4c:	e018      	b.n	800de80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	7c1b      	ldrb	r3, [r3, #16]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d10a      	bne.n	800de6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800de56:	4b0c      	ldr	r3, [pc, #48]	@ (800de88 <USBD_CDC_ReceivePacket+0x68>)
 800de58:	7819      	ldrb	r1, [r3, #0]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800de60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f001 fff5 	bl	800fe54 <USBD_LL_PrepareReceive>
 800de6a:	e008      	b.n	800de7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800de6c:	4b06      	ldr	r3, [pc, #24]	@ (800de88 <USBD_CDC_ReceivePacket+0x68>)
 800de6e:	7819      	ldrb	r1, [r3, #0]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800de76:	2340      	movs	r3, #64	@ 0x40
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f001 ffeb 	bl	800fe54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800de7e:	2300      	movs	r3, #0
}
 800de80:	4618      	mov	r0, r3
 800de82:	3710      	adds	r7, #16
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	20000094 	.word	0x20000094

0800de8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b086      	sub	sp, #24
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	4613      	mov	r3, r2
 800de98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d101      	bne.n	800dea4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dea0:	2303      	movs	r3, #3
 800dea2:	e01f      	b.n	800dee4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2200      	movs	r2, #0
 800dea8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	2200      	movs	r2, #0
 800deb0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2200      	movs	r2, #0
 800deb8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d003      	beq.n	800deca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	68ba      	ldr	r2, [r7, #8]
 800dec6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2201      	movs	r2, #1
 800dece:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	79fa      	ldrb	r2, [r7, #7]
 800ded6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f001 fe65 	bl	800fba8 <USBD_LL_Init>
 800dede:	4603      	mov	r3, r0
 800dee0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dee2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3718      	adds	r7, #24
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800def6:	2300      	movs	r3, #0
 800def8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d101      	bne.n	800df04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800df00:	2303      	movs	r3, #3
 800df02:	e025      	b.n	800df50 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	683a      	ldr	r2, [r7, #0]
 800df08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	32ae      	adds	r2, #174	@ 0xae
 800df16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00f      	beq.n	800df40 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	32ae      	adds	r2, #174	@ 0xae
 800df2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df30:	f107 020e 	add.w	r2, r7, #14
 800df34:	4610      	mov	r0, r2
 800df36:	4798      	blx	r3
 800df38:	4602      	mov	r2, r0
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800df46:	1c5a      	adds	r2, r3, #1
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800df4e:	2300      	movs	r3, #0
}
 800df50:	4618      	mov	r0, r3
 800df52:	3710      	adds	r7, #16
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f001 fe6d 	bl	800fc40 <USBD_LL_Start>
 800df66:	4603      	mov	r3, r0
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3708      	adds	r7, #8
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800df78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b084      	sub	sp, #16
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
 800df8e:	460b      	mov	r3, r1
 800df90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800df92:	2300      	movs	r3, #0
 800df94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d009      	beq.n	800dfb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	78fa      	ldrb	r2, [r7, #3]
 800dfaa:	4611      	mov	r1, r2
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	4798      	blx	r3
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dfb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3710      	adds	r7, #16
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b084      	sub	sp, #16
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	78fa      	ldrb	r2, [r7, #3]
 800dfd8:	4611      	mov	r1, r2
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	4798      	blx	r3
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d001      	beq.n	800dfe8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dfe4:	2303      	movs	r3, #3
 800dfe6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3710      	adds	r7, #16
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}

0800dff2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b084      	sub	sp, #16
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
 800dffa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e002:	6839      	ldr	r1, [r7, #0]
 800e004:	4618      	mov	r0, r3
 800e006:	f001 f906 	bl	800f216 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2201      	movs	r2, #1
 800e00e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e018:	461a      	mov	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e026:	f003 031f 	and.w	r3, r3, #31
 800e02a:	2b02      	cmp	r3, #2
 800e02c:	d01a      	beq.n	800e064 <USBD_LL_SetupStage+0x72>
 800e02e:	2b02      	cmp	r3, #2
 800e030:	d822      	bhi.n	800e078 <USBD_LL_SetupStage+0x86>
 800e032:	2b00      	cmp	r3, #0
 800e034:	d002      	beq.n	800e03c <USBD_LL_SetupStage+0x4a>
 800e036:	2b01      	cmp	r3, #1
 800e038:	d00a      	beq.n	800e050 <USBD_LL_SetupStage+0x5e>
 800e03a:	e01d      	b.n	800e078 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e042:	4619      	mov	r1, r3
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 fb5d 	bl	800e704 <USBD_StdDevReq>
 800e04a:	4603      	mov	r3, r0
 800e04c:	73fb      	strb	r3, [r7, #15]
      break;
 800e04e:	e020      	b.n	800e092 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e056:	4619      	mov	r1, r3
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 fbc5 	bl	800e7e8 <USBD_StdItfReq>
 800e05e:	4603      	mov	r3, r0
 800e060:	73fb      	strb	r3, [r7, #15]
      break;
 800e062:	e016      	b.n	800e092 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e06a:	4619      	mov	r1, r3
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f000 fc27 	bl	800e8c0 <USBD_StdEPReq>
 800e072:	4603      	mov	r3, r0
 800e074:	73fb      	strb	r3, [r7, #15]
      break;
 800e076:	e00c      	b.n	800e092 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e07e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e082:	b2db      	uxtb	r3, r3
 800e084:	4619      	mov	r1, r3
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f001 fe3a 	bl	800fd00 <USBD_LL_StallEP>
 800e08c:	4603      	mov	r3, r0
 800e08e:	73fb      	strb	r3, [r7, #15]
      break;
 800e090:	bf00      	nop
  }

  return ret;
 800e092:	7bfb      	ldrb	r3, [r7, #15]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3710      	adds	r7, #16
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b086      	sub	sp, #24
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	607a      	str	r2, [r7, #4]
 800e0a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e0ae:	7afb      	ldrb	r3, [r7, #11]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d16e      	bne.n	800e192 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e0ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e0c2:	2b03      	cmp	r3, #3
 800e0c4:	f040 8098 	bne.w	800e1f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	689a      	ldr	r2, [r3, #8]
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d913      	bls.n	800e0fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	689a      	ldr	r2, [r3, #8]
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	1ad2      	subs	r2, r2, r3
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	68da      	ldr	r2, [r3, #12]
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	689b      	ldr	r3, [r3, #8]
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	bf28      	it	cs
 800e0ee:	4613      	movcs	r3, r2
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	6879      	ldr	r1, [r7, #4]
 800e0f4:	68f8      	ldr	r0, [r7, #12]
 800e0f6:	f001 f982 	bl	800f3fe <USBD_CtlContinueRx>
 800e0fa:	e07d      	b.n	800e1f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e102:	f003 031f 	and.w	r3, r3, #31
 800e106:	2b02      	cmp	r3, #2
 800e108:	d014      	beq.n	800e134 <USBD_LL_DataOutStage+0x98>
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d81d      	bhi.n	800e14a <USBD_LL_DataOutStage+0xae>
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d002      	beq.n	800e118 <USBD_LL_DataOutStage+0x7c>
 800e112:	2b01      	cmp	r3, #1
 800e114:	d003      	beq.n	800e11e <USBD_LL_DataOutStage+0x82>
 800e116:	e018      	b.n	800e14a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e118:	2300      	movs	r3, #0
 800e11a:	75bb      	strb	r3, [r7, #22]
            break;
 800e11c:	e018      	b.n	800e150 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e124:	b2db      	uxtb	r3, r3
 800e126:	4619      	mov	r1, r3
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f000 fa5e 	bl	800e5ea <USBD_CoreFindIF>
 800e12e:	4603      	mov	r3, r0
 800e130:	75bb      	strb	r3, [r7, #22]
            break;
 800e132:	e00d      	b.n	800e150 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	4619      	mov	r1, r3
 800e13e:	68f8      	ldr	r0, [r7, #12]
 800e140:	f000 fa60 	bl	800e604 <USBD_CoreFindEP>
 800e144:	4603      	mov	r3, r0
 800e146:	75bb      	strb	r3, [r7, #22]
            break;
 800e148:	e002      	b.n	800e150 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e14a:	2300      	movs	r3, #0
 800e14c:	75bb      	strb	r3, [r7, #22]
            break;
 800e14e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e150:	7dbb      	ldrb	r3, [r7, #22]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d119      	bne.n	800e18a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	2b03      	cmp	r3, #3
 800e160:	d113      	bne.n	800e18a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e162:	7dba      	ldrb	r2, [r7, #22]
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	32ae      	adds	r2, #174	@ 0xae
 800e168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e16c:	691b      	ldr	r3, [r3, #16]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00b      	beq.n	800e18a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e172:	7dba      	ldrb	r2, [r7, #22]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e17a:	7dba      	ldrb	r2, [r7, #22]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	32ae      	adds	r2, #174	@ 0xae
 800e180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e184:	691b      	ldr	r3, [r3, #16]
 800e186:	68f8      	ldr	r0, [r7, #12]
 800e188:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f001 f948 	bl	800f420 <USBD_CtlSendStatus>
 800e190:	e032      	b.n	800e1f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e192:	7afb      	ldrb	r3, [r7, #11]
 800e194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	4619      	mov	r1, r3
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f000 fa31 	bl	800e604 <USBD_CoreFindEP>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e1a6:	7dbb      	ldrb	r3, [r7, #22]
 800e1a8:	2bff      	cmp	r3, #255	@ 0xff
 800e1aa:	d025      	beq.n	800e1f8 <USBD_LL_DataOutStage+0x15c>
 800e1ac:	7dbb      	ldrb	r3, [r7, #22]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d122      	bne.n	800e1f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	2b03      	cmp	r3, #3
 800e1bc:	d117      	bne.n	800e1ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e1be:	7dba      	ldrb	r2, [r7, #22]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	32ae      	adds	r2, #174	@ 0xae
 800e1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1c8:	699b      	ldr	r3, [r3, #24]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00f      	beq.n	800e1ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e1ce:	7dba      	ldrb	r2, [r7, #22]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e1d6:	7dba      	ldrb	r2, [r7, #22]
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	32ae      	adds	r2, #174	@ 0xae
 800e1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1e0:	699b      	ldr	r3, [r3, #24]
 800e1e2:	7afa      	ldrb	r2, [r7, #11]
 800e1e4:	4611      	mov	r1, r2
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	4798      	blx	r3
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e1ee:	7dfb      	ldrb	r3, [r7, #23]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d001      	beq.n	800e1f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e1f4:	7dfb      	ldrb	r3, [r7, #23]
 800e1f6:	e000      	b.n	800e1fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e1f8:	2300      	movs	r3, #0
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3718      	adds	r7, #24
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}

0800e202 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e202:	b580      	push	{r7, lr}
 800e204:	b086      	sub	sp, #24
 800e206:	af00      	add	r7, sp, #0
 800e208:	60f8      	str	r0, [r7, #12]
 800e20a:	460b      	mov	r3, r1
 800e20c:	607a      	str	r2, [r7, #4]
 800e20e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e210:	7afb      	ldrb	r3, [r7, #11]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d16f      	bne.n	800e2f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	3314      	adds	r3, #20
 800e21a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e222:	2b02      	cmp	r3, #2
 800e224:	d15a      	bne.n	800e2dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	689a      	ldr	r2, [r3, #8]
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	68db      	ldr	r3, [r3, #12]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d914      	bls.n	800e25c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	689a      	ldr	r2, [r3, #8]
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	1ad2      	subs	r2, r2, r3
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	461a      	mov	r2, r3
 800e246:	6879      	ldr	r1, [r7, #4]
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f001 f8aa 	bl	800f3a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e24e:	2300      	movs	r3, #0
 800e250:	2200      	movs	r2, #0
 800e252:	2100      	movs	r1, #0
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f001 fdfd 	bl	800fe54 <USBD_LL_PrepareReceive>
 800e25a:	e03f      	b.n	800e2dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	68da      	ldr	r2, [r3, #12]
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	429a      	cmp	r2, r3
 800e266:	d11c      	bne.n	800e2a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	685a      	ldr	r2, [r3, #4]
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e270:	429a      	cmp	r2, r3
 800e272:	d316      	bcc.n	800e2a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	685a      	ldr	r2, [r3, #4]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e27e:	429a      	cmp	r2, r3
 800e280:	d20f      	bcs.n	800e2a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e282:	2200      	movs	r2, #0
 800e284:	2100      	movs	r1, #0
 800e286:	68f8      	ldr	r0, [r7, #12]
 800e288:	f001 f88b 	bl	800f3a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2200      	movs	r2, #0
 800e290:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e294:	2300      	movs	r3, #0
 800e296:	2200      	movs	r2, #0
 800e298:	2100      	movs	r1, #0
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f001 fdda 	bl	800fe54 <USBD_LL_PrepareReceive>
 800e2a0:	e01c      	b.n	800e2dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2a8:	b2db      	uxtb	r3, r3
 800e2aa:	2b03      	cmp	r3, #3
 800e2ac:	d10f      	bne.n	800e2ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d009      	beq.n	800e2ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	68f8      	ldr	r0, [r7, #12]
 800e2cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2ce:	2180      	movs	r1, #128	@ 0x80
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f001 fd15 	bl	800fd00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	f001 f8b5 	bl	800f446 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d03a      	beq.n	800e35c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e2e6:	68f8      	ldr	r0, [r7, #12]
 800e2e8:	f7ff fe42 	bl	800df70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e2f4:	e032      	b.n	800e35c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e2f6:	7afb      	ldrb	r3, [r7, #11]
 800e2f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	4619      	mov	r1, r3
 800e300:	68f8      	ldr	r0, [r7, #12]
 800e302:	f000 f97f 	bl	800e604 <USBD_CoreFindEP>
 800e306:	4603      	mov	r3, r0
 800e308:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e30a:	7dfb      	ldrb	r3, [r7, #23]
 800e30c:	2bff      	cmp	r3, #255	@ 0xff
 800e30e:	d025      	beq.n	800e35c <USBD_LL_DataInStage+0x15a>
 800e310:	7dfb      	ldrb	r3, [r7, #23]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d122      	bne.n	800e35c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	2b03      	cmp	r3, #3
 800e320:	d11c      	bne.n	800e35c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e322:	7dfa      	ldrb	r2, [r7, #23]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	32ae      	adds	r2, #174	@ 0xae
 800e328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e32c:	695b      	ldr	r3, [r3, #20]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d014      	beq.n	800e35c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e332:	7dfa      	ldrb	r2, [r7, #23]
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e33a:	7dfa      	ldrb	r2, [r7, #23]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	32ae      	adds	r2, #174	@ 0xae
 800e340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e344:	695b      	ldr	r3, [r3, #20]
 800e346:	7afa      	ldrb	r2, [r7, #11]
 800e348:	4611      	mov	r1, r2
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	4798      	blx	r3
 800e34e:	4603      	mov	r3, r0
 800e350:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e352:	7dbb      	ldrb	r3, [r7, #22]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d001      	beq.n	800e35c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e358:	7dbb      	ldrb	r3, [r7, #22]
 800e35a:	e000      	b.n	800e35e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e35c:	2300      	movs	r3, #0
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3718      	adds	r7, #24
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}

0800e366 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e366:	b580      	push	{r7, lr}
 800e368:	b084      	sub	sp, #16
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2201      	movs	r2, #1
 800e376:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2200      	movs	r2, #0
 800e37e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2200      	movs	r2, #0
 800e38c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d014      	beq.n	800e3cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00e      	beq.n	800e3cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	6852      	ldr	r2, [r2, #4]
 800e3ba:	b2d2      	uxtb	r2, r2
 800e3bc:	4611      	mov	r1, r2
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	4798      	blx	r3
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d001      	beq.n	800e3cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e3c8:	2303      	movs	r3, #3
 800e3ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e3cc:	2340      	movs	r3, #64	@ 0x40
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f001 fc4f 	bl	800fc76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2240      	movs	r2, #64	@ 0x40
 800e3e4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e3e8:	2340      	movs	r3, #64	@ 0x40
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	2180      	movs	r1, #128	@ 0x80
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f001 fc41 	bl	800fc76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2240      	movs	r2, #64	@ 0x40
 800e3fe:	621a      	str	r2, [r3, #32]

  return ret;
 800e400:	7bfb      	ldrb	r3, [r7, #15]
}
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e40a:	b480      	push	{r7}
 800e40c:	b083      	sub	sp, #12
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
 800e412:	460b      	mov	r3, r1
 800e414:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	78fa      	ldrb	r2, [r7, #3]
 800e41a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e41c:	2300      	movs	r3, #0
}
 800e41e:	4618      	mov	r0, r3
 800e420:	370c      	adds	r7, #12
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr

0800e42a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e42a:	b480      	push	{r7}
 800e42c:	b083      	sub	sp, #12
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e438:	b2da      	uxtb	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2204      	movs	r2, #4
 800e444:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e448:	2300      	movs	r3, #0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	370c      	adds	r7, #12
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr

0800e456 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e456:	b480      	push	{r7}
 800e458:	b083      	sub	sp, #12
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e464:	b2db      	uxtb	r3, r3
 800e466:	2b04      	cmp	r3, #4
 800e468:	d106      	bne.n	800e478 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e470:	b2da      	uxtb	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e478:	2300      	movs	r3, #0
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	370c      	adds	r7, #12
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr

0800e486 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e486:	b580      	push	{r7, lr}
 800e488:	b082      	sub	sp, #8
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e494:	b2db      	uxtb	r3, r3
 800e496:	2b03      	cmp	r3, #3
 800e498:	d110      	bne.n	800e4bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d00b      	beq.n	800e4bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4aa:	69db      	ldr	r3, [r3, #28]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d005      	beq.n	800e4bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4b6:	69db      	ldr	r3, [r3, #28]
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b082      	sub	sp, #8
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
 800e4ce:	460b      	mov	r3, r1
 800e4d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	32ae      	adds	r2, #174	@ 0xae
 800e4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d101      	bne.n	800e4e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e4e4:	2303      	movs	r3, #3
 800e4e6:	e01c      	b.n	800e522 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	2b03      	cmp	r3, #3
 800e4f2:	d115      	bne.n	800e520 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	32ae      	adds	r2, #174	@ 0xae
 800e4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e502:	6a1b      	ldr	r3, [r3, #32]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d00b      	beq.n	800e520 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	32ae      	adds	r2, #174	@ 0xae
 800e512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e516:	6a1b      	ldr	r3, [r3, #32]
 800e518:	78fa      	ldrb	r2, [r7, #3]
 800e51a:	4611      	mov	r1, r2
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e520:	2300      	movs	r3, #0
}
 800e522:	4618      	mov	r0, r3
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b082      	sub	sp, #8
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
 800e532:	460b      	mov	r3, r1
 800e534:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	32ae      	adds	r2, #174	@ 0xae
 800e540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d101      	bne.n	800e54c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e548:	2303      	movs	r3, #3
 800e54a:	e01c      	b.n	800e586 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e552:	b2db      	uxtb	r3, r3
 800e554:	2b03      	cmp	r3, #3
 800e556:	d115      	bne.n	800e584 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	32ae      	adds	r2, #174	@ 0xae
 800e562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00b      	beq.n	800e584 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	32ae      	adds	r2, #174	@ 0xae
 800e576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e57c:	78fa      	ldrb	r2, [r7, #3]
 800e57e:	4611      	mov	r1, r2
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e584:	2300      	movs	r3, #0
}
 800e586:	4618      	mov	r0, r3
 800e588:	3708      	adds	r7, #8
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e58e:	b480      	push	{r7}
 800e590:	b083      	sub	sp, #12
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e596:	2300      	movs	r3, #0
}
 800e598:	4618      	mov	r0, r3
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d00e      	beq.n	800e5e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	6852      	ldr	r2, [r2, #4]
 800e5ce:	b2d2      	uxtb	r2, r2
 800e5d0:	4611      	mov	r1, r2
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	4798      	blx	r3
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d001      	beq.n	800e5e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e5dc:	2303      	movs	r3, #3
 800e5de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3710      	adds	r7, #16
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}

0800e5ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e5ea:	b480      	push	{r7}
 800e5ec:	b083      	sub	sp, #12
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e5f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	370c      	adds	r7, #12
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr

0800e604 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e604:	b480      	push	{r7}
 800e606:	b083      	sub	sp, #12
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	460b      	mov	r3, r1
 800e60e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e610:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e612:	4618      	mov	r0, r3
 800e614:	370c      	adds	r7, #12
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr

0800e61e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b086      	sub	sp, #24
 800e622:	af00      	add	r7, sp, #0
 800e624:	6078      	str	r0, [r7, #4]
 800e626:	460b      	mov	r3, r1
 800e628:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e632:	2300      	movs	r3, #0
 800e634:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	885b      	ldrh	r3, [r3, #2]
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	68fa      	ldr	r2, [r7, #12]
 800e63e:	7812      	ldrb	r2, [r2, #0]
 800e640:	4293      	cmp	r3, r2
 800e642:	d91f      	bls.n	800e684 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e64a:	e013      	b.n	800e674 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e64c:	f107 030a 	add.w	r3, r7, #10
 800e650:	4619      	mov	r1, r3
 800e652:	6978      	ldr	r0, [r7, #20]
 800e654:	f000 f81b 	bl	800e68e <USBD_GetNextDesc>
 800e658:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	785b      	ldrb	r3, [r3, #1]
 800e65e:	2b05      	cmp	r3, #5
 800e660:	d108      	bne.n	800e674 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	789b      	ldrb	r3, [r3, #2]
 800e66a:	78fa      	ldrb	r2, [r7, #3]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d008      	beq.n	800e682 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e670:	2300      	movs	r3, #0
 800e672:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	885b      	ldrh	r3, [r3, #2]
 800e678:	b29a      	uxth	r2, r3
 800e67a:	897b      	ldrh	r3, [r7, #10]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d8e5      	bhi.n	800e64c <USBD_GetEpDesc+0x2e>
 800e680:	e000      	b.n	800e684 <USBD_GetEpDesc+0x66>
          break;
 800e682:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e684:	693b      	ldr	r3, [r7, #16]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3718      	adds	r7, #24
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e68e:	b480      	push	{r7}
 800e690:	b085      	sub	sp, #20
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
 800e696:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	881b      	ldrh	r3, [r3, #0]
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	7812      	ldrb	r2, [r2, #0]
 800e6a4:	4413      	add	r3, r2
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3714      	adds	r7, #20
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr

0800e6c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e6c6:	b480      	push	{r7}
 800e6c8:	b087      	sub	sp, #28
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e6e4:	8a3b      	ldrh	r3, [r7, #16]
 800e6e6:	021b      	lsls	r3, r3, #8
 800e6e8:	b21a      	sxth	r2, r3
 800e6ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e6ee:	4313      	orrs	r3, r2
 800e6f0:	b21b      	sxth	r3, r3
 800e6f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e6f4:	89fb      	ldrh	r3, [r7, #14]
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	371c      	adds	r7, #28
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr
	...

0800e704 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e70e:	2300      	movs	r3, #0
 800e710:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e71a:	2b40      	cmp	r3, #64	@ 0x40
 800e71c:	d005      	beq.n	800e72a <USBD_StdDevReq+0x26>
 800e71e:	2b40      	cmp	r3, #64	@ 0x40
 800e720:	d857      	bhi.n	800e7d2 <USBD_StdDevReq+0xce>
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00f      	beq.n	800e746 <USBD_StdDevReq+0x42>
 800e726:	2b20      	cmp	r3, #32
 800e728:	d153      	bne.n	800e7d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	32ae      	adds	r2, #174	@ 0xae
 800e734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e738:	689b      	ldr	r3, [r3, #8]
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	4798      	blx	r3
 800e740:	4603      	mov	r3, r0
 800e742:	73fb      	strb	r3, [r7, #15]
      break;
 800e744:	e04a      	b.n	800e7dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	785b      	ldrb	r3, [r3, #1]
 800e74a:	2b09      	cmp	r3, #9
 800e74c:	d83b      	bhi.n	800e7c6 <USBD_StdDevReq+0xc2>
 800e74e:	a201      	add	r2, pc, #4	@ (adr r2, 800e754 <USBD_StdDevReq+0x50>)
 800e750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e754:	0800e7a9 	.word	0x0800e7a9
 800e758:	0800e7bd 	.word	0x0800e7bd
 800e75c:	0800e7c7 	.word	0x0800e7c7
 800e760:	0800e7b3 	.word	0x0800e7b3
 800e764:	0800e7c7 	.word	0x0800e7c7
 800e768:	0800e787 	.word	0x0800e787
 800e76c:	0800e77d 	.word	0x0800e77d
 800e770:	0800e7c7 	.word	0x0800e7c7
 800e774:	0800e79f 	.word	0x0800e79f
 800e778:	0800e791 	.word	0x0800e791
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e77c:	6839      	ldr	r1, [r7, #0]
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 fa3c 	bl	800ebfc <USBD_GetDescriptor>
          break;
 800e784:	e024      	b.n	800e7d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e786:	6839      	ldr	r1, [r7, #0]
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f000 fba1 	bl	800eed0 <USBD_SetAddress>
          break;
 800e78e:	e01f      	b.n	800e7d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e790:	6839      	ldr	r1, [r7, #0]
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fbe0 	bl	800ef58 <USBD_SetConfig>
 800e798:	4603      	mov	r3, r0
 800e79a:	73fb      	strb	r3, [r7, #15]
          break;
 800e79c:	e018      	b.n	800e7d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e79e:	6839      	ldr	r1, [r7, #0]
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 fc83 	bl	800f0ac <USBD_GetConfig>
          break;
 800e7a6:	e013      	b.n	800e7d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e7a8:	6839      	ldr	r1, [r7, #0]
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 fcb4 	bl	800f118 <USBD_GetStatus>
          break;
 800e7b0:	e00e      	b.n	800e7d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e7b2:	6839      	ldr	r1, [r7, #0]
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f000 fce3 	bl	800f180 <USBD_SetFeature>
          break;
 800e7ba:	e009      	b.n	800e7d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e7bc:	6839      	ldr	r1, [r7, #0]
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fd07 	bl	800f1d2 <USBD_ClrFeature>
          break;
 800e7c4:	e004      	b.n	800e7d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e7c6:	6839      	ldr	r1, [r7, #0]
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f000 fd5e 	bl	800f28a <USBD_CtlError>
          break;
 800e7ce:	bf00      	nop
      }
      break;
 800e7d0:	e004      	b.n	800e7dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e7d2:	6839      	ldr	r1, [r7, #0]
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f000 fd58 	bl	800f28a <USBD_CtlError>
      break;
 800e7da:	bf00      	nop
  }

  return ret;
 800e7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop

0800e7e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e7fe:	2b40      	cmp	r3, #64	@ 0x40
 800e800:	d005      	beq.n	800e80e <USBD_StdItfReq+0x26>
 800e802:	2b40      	cmp	r3, #64	@ 0x40
 800e804:	d852      	bhi.n	800e8ac <USBD_StdItfReq+0xc4>
 800e806:	2b00      	cmp	r3, #0
 800e808:	d001      	beq.n	800e80e <USBD_StdItfReq+0x26>
 800e80a:	2b20      	cmp	r3, #32
 800e80c:	d14e      	bne.n	800e8ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e814:	b2db      	uxtb	r3, r3
 800e816:	3b01      	subs	r3, #1
 800e818:	2b02      	cmp	r3, #2
 800e81a:	d840      	bhi.n	800e89e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	889b      	ldrh	r3, [r3, #4]
 800e820:	b2db      	uxtb	r3, r3
 800e822:	2b01      	cmp	r3, #1
 800e824:	d836      	bhi.n	800e894 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	889b      	ldrh	r3, [r3, #4]
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	4619      	mov	r1, r3
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f7ff fedb 	bl	800e5ea <USBD_CoreFindIF>
 800e834:	4603      	mov	r3, r0
 800e836:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e838:	7bbb      	ldrb	r3, [r7, #14]
 800e83a:	2bff      	cmp	r3, #255	@ 0xff
 800e83c:	d01d      	beq.n	800e87a <USBD_StdItfReq+0x92>
 800e83e:	7bbb      	ldrb	r3, [r7, #14]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d11a      	bne.n	800e87a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e844:	7bba      	ldrb	r2, [r7, #14]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	32ae      	adds	r2, #174	@ 0xae
 800e84a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e84e:	689b      	ldr	r3, [r3, #8]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d00f      	beq.n	800e874 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e854:	7bba      	ldrb	r2, [r7, #14]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e85c:	7bba      	ldrb	r2, [r7, #14]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	32ae      	adds	r2, #174	@ 0xae
 800e862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	6839      	ldr	r1, [r7, #0]
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	4798      	blx	r3
 800e86e:	4603      	mov	r3, r0
 800e870:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e872:	e004      	b.n	800e87e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e874:	2303      	movs	r3, #3
 800e876:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e878:	e001      	b.n	800e87e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e87a:	2303      	movs	r3, #3
 800e87c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	88db      	ldrh	r3, [r3, #6]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d110      	bne.n	800e8a8 <USBD_StdItfReq+0xc0>
 800e886:	7bfb      	ldrb	r3, [r7, #15]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10d      	bne.n	800e8a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 fdc7 	bl	800f420 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e892:	e009      	b.n	800e8a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e894:	6839      	ldr	r1, [r7, #0]
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f000 fcf7 	bl	800f28a <USBD_CtlError>
          break;
 800e89c:	e004      	b.n	800e8a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e89e:	6839      	ldr	r1, [r7, #0]
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 fcf2 	bl	800f28a <USBD_CtlError>
          break;
 800e8a6:	e000      	b.n	800e8aa <USBD_StdItfReq+0xc2>
          break;
 800e8a8:	bf00      	nop
      }
      break;
 800e8aa:	e004      	b.n	800e8b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e8ac:	6839      	ldr	r1, [r7, #0]
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f000 fceb 	bl	800f28a <USBD_CtlError>
      break;
 800e8b4:	bf00      	nop
  }

  return ret;
 800e8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3710      	adds	r7, #16
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	889b      	ldrh	r3, [r3, #4]
 800e8d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e8dc:	2b40      	cmp	r3, #64	@ 0x40
 800e8de:	d007      	beq.n	800e8f0 <USBD_StdEPReq+0x30>
 800e8e0:	2b40      	cmp	r3, #64	@ 0x40
 800e8e2:	f200 817f 	bhi.w	800ebe4 <USBD_StdEPReq+0x324>
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d02a      	beq.n	800e940 <USBD_StdEPReq+0x80>
 800e8ea:	2b20      	cmp	r3, #32
 800e8ec:	f040 817a 	bne.w	800ebe4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e8f0:	7bbb      	ldrb	r3, [r7, #14]
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f7ff fe85 	bl	800e604 <USBD_CoreFindEP>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e8fe:	7b7b      	ldrb	r3, [r7, #13]
 800e900:	2bff      	cmp	r3, #255	@ 0xff
 800e902:	f000 8174 	beq.w	800ebee <USBD_StdEPReq+0x32e>
 800e906:	7b7b      	ldrb	r3, [r7, #13]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f040 8170 	bne.w	800ebee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e90e:	7b7a      	ldrb	r2, [r7, #13]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e916:	7b7a      	ldrb	r2, [r7, #13]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	32ae      	adds	r2, #174	@ 0xae
 800e91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e920:	689b      	ldr	r3, [r3, #8]
 800e922:	2b00      	cmp	r3, #0
 800e924:	f000 8163 	beq.w	800ebee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e928:	7b7a      	ldrb	r2, [r7, #13]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	32ae      	adds	r2, #174	@ 0xae
 800e92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e932:	689b      	ldr	r3, [r3, #8]
 800e934:	6839      	ldr	r1, [r7, #0]
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	4798      	blx	r3
 800e93a:	4603      	mov	r3, r0
 800e93c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e93e:	e156      	b.n	800ebee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	785b      	ldrb	r3, [r3, #1]
 800e944:	2b03      	cmp	r3, #3
 800e946:	d008      	beq.n	800e95a <USBD_StdEPReq+0x9a>
 800e948:	2b03      	cmp	r3, #3
 800e94a:	f300 8145 	bgt.w	800ebd8 <USBD_StdEPReq+0x318>
 800e94e:	2b00      	cmp	r3, #0
 800e950:	f000 809b 	beq.w	800ea8a <USBD_StdEPReq+0x1ca>
 800e954:	2b01      	cmp	r3, #1
 800e956:	d03c      	beq.n	800e9d2 <USBD_StdEPReq+0x112>
 800e958:	e13e      	b.n	800ebd8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e960:	b2db      	uxtb	r3, r3
 800e962:	2b02      	cmp	r3, #2
 800e964:	d002      	beq.n	800e96c <USBD_StdEPReq+0xac>
 800e966:	2b03      	cmp	r3, #3
 800e968:	d016      	beq.n	800e998 <USBD_StdEPReq+0xd8>
 800e96a:	e02c      	b.n	800e9c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e96c:	7bbb      	ldrb	r3, [r7, #14]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00d      	beq.n	800e98e <USBD_StdEPReq+0xce>
 800e972:	7bbb      	ldrb	r3, [r7, #14]
 800e974:	2b80      	cmp	r3, #128	@ 0x80
 800e976:	d00a      	beq.n	800e98e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e978:	7bbb      	ldrb	r3, [r7, #14]
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f001 f9bf 	bl	800fd00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e982:	2180      	movs	r1, #128	@ 0x80
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f001 f9bb 	bl	800fd00 <USBD_LL_StallEP>
 800e98a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e98c:	e020      	b.n	800e9d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e98e:	6839      	ldr	r1, [r7, #0]
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 fc7a 	bl	800f28a <USBD_CtlError>
              break;
 800e996:	e01b      	b.n	800e9d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	885b      	ldrh	r3, [r3, #2]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d10e      	bne.n	800e9be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e9a0:	7bbb      	ldrb	r3, [r7, #14]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d00b      	beq.n	800e9be <USBD_StdEPReq+0xfe>
 800e9a6:	7bbb      	ldrb	r3, [r7, #14]
 800e9a8:	2b80      	cmp	r3, #128	@ 0x80
 800e9aa:	d008      	beq.n	800e9be <USBD_StdEPReq+0xfe>
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	88db      	ldrh	r3, [r3, #6]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d104      	bne.n	800e9be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e9b4:	7bbb      	ldrb	r3, [r7, #14]
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f001 f9a1 	bl	800fd00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 fd2e 	bl	800f420 <USBD_CtlSendStatus>

              break;
 800e9c4:	e004      	b.n	800e9d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e9c6:	6839      	ldr	r1, [r7, #0]
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f000 fc5e 	bl	800f28a <USBD_CtlError>
              break;
 800e9ce:	bf00      	nop
          }
          break;
 800e9d0:	e107      	b.n	800ebe2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	2b02      	cmp	r3, #2
 800e9dc:	d002      	beq.n	800e9e4 <USBD_StdEPReq+0x124>
 800e9de:	2b03      	cmp	r3, #3
 800e9e0:	d016      	beq.n	800ea10 <USBD_StdEPReq+0x150>
 800e9e2:	e04b      	b.n	800ea7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e9e4:	7bbb      	ldrb	r3, [r7, #14]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d00d      	beq.n	800ea06 <USBD_StdEPReq+0x146>
 800e9ea:	7bbb      	ldrb	r3, [r7, #14]
 800e9ec:	2b80      	cmp	r3, #128	@ 0x80
 800e9ee:	d00a      	beq.n	800ea06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e9f0:	7bbb      	ldrb	r3, [r7, #14]
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f001 f983 	bl	800fd00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9fa:	2180      	movs	r1, #128	@ 0x80
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f001 f97f 	bl	800fd00 <USBD_LL_StallEP>
 800ea02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ea04:	e040      	b.n	800ea88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ea06:	6839      	ldr	r1, [r7, #0]
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 fc3e 	bl	800f28a <USBD_CtlError>
              break;
 800ea0e:	e03b      	b.n	800ea88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	885b      	ldrh	r3, [r3, #2]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d136      	bne.n	800ea86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ea18:	7bbb      	ldrb	r3, [r7, #14]
 800ea1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d004      	beq.n	800ea2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ea22:	7bbb      	ldrb	r3, [r7, #14]
 800ea24:	4619      	mov	r1, r3
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f001 f989 	bl	800fd3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 fcf7 	bl	800f420 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ea32:	7bbb      	ldrb	r3, [r7, #14]
 800ea34:	4619      	mov	r1, r3
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f7ff fde4 	bl	800e604 <USBD_CoreFindEP>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea40:	7b7b      	ldrb	r3, [r7, #13]
 800ea42:	2bff      	cmp	r3, #255	@ 0xff
 800ea44:	d01f      	beq.n	800ea86 <USBD_StdEPReq+0x1c6>
 800ea46:	7b7b      	ldrb	r3, [r7, #13]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d11c      	bne.n	800ea86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ea4c:	7b7a      	ldrb	r2, [r7, #13]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ea54:	7b7a      	ldrb	r2, [r7, #13]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	32ae      	adds	r2, #174	@ 0xae
 800ea5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d010      	beq.n	800ea86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ea64:	7b7a      	ldrb	r2, [r7, #13]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	32ae      	adds	r2, #174	@ 0xae
 800ea6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea6e:	689b      	ldr	r3, [r3, #8]
 800ea70:	6839      	ldr	r1, [r7, #0]
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	4798      	blx	r3
 800ea76:	4603      	mov	r3, r0
 800ea78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ea7a:	e004      	b.n	800ea86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ea7c:	6839      	ldr	r1, [r7, #0]
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 fc03 	bl	800f28a <USBD_CtlError>
              break;
 800ea84:	e000      	b.n	800ea88 <USBD_StdEPReq+0x1c8>
              break;
 800ea86:	bf00      	nop
          }
          break;
 800ea88:	e0ab      	b.n	800ebe2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	2b02      	cmp	r3, #2
 800ea94:	d002      	beq.n	800ea9c <USBD_StdEPReq+0x1dc>
 800ea96:	2b03      	cmp	r3, #3
 800ea98:	d032      	beq.n	800eb00 <USBD_StdEPReq+0x240>
 800ea9a:	e097      	b.n	800ebcc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ea9c:	7bbb      	ldrb	r3, [r7, #14]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d007      	beq.n	800eab2 <USBD_StdEPReq+0x1f2>
 800eaa2:	7bbb      	ldrb	r3, [r7, #14]
 800eaa4:	2b80      	cmp	r3, #128	@ 0x80
 800eaa6:	d004      	beq.n	800eab2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800eaa8:	6839      	ldr	r1, [r7, #0]
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 fbed 	bl	800f28a <USBD_CtlError>
                break;
 800eab0:	e091      	b.n	800ebd6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	da0b      	bge.n	800ead2 <USBD_StdEPReq+0x212>
 800eaba:	7bbb      	ldrb	r3, [r7, #14]
 800eabc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eac0:	4613      	mov	r3, r2
 800eac2:	009b      	lsls	r3, r3, #2
 800eac4:	4413      	add	r3, r2
 800eac6:	009b      	lsls	r3, r3, #2
 800eac8:	3310      	adds	r3, #16
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	4413      	add	r3, r2
 800eace:	3304      	adds	r3, #4
 800ead0:	e00b      	b.n	800eaea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ead2:	7bbb      	ldrb	r3, [r7, #14]
 800ead4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ead8:	4613      	mov	r3, r2
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	4413      	add	r3, r2
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	4413      	add	r3, r2
 800eae8:	3304      	adds	r3, #4
 800eaea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	2202      	movs	r2, #2
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 fc37 	bl	800f36c <USBD_CtlSendData>
              break;
 800eafe:	e06a      	b.n	800ebd6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800eb00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	da11      	bge.n	800eb2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800eb08:	7bbb      	ldrb	r3, [r7, #14]
 800eb0a:	f003 020f 	and.w	r2, r3, #15
 800eb0e:	6879      	ldr	r1, [r7, #4]
 800eb10:	4613      	mov	r3, r2
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	4413      	add	r3, r2
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	440b      	add	r3, r1
 800eb1a:	3324      	adds	r3, #36	@ 0x24
 800eb1c:	881b      	ldrh	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d117      	bne.n	800eb52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800eb22:	6839      	ldr	r1, [r7, #0]
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fbb0 	bl	800f28a <USBD_CtlError>
                  break;
 800eb2a:	e054      	b.n	800ebd6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eb2c:	7bbb      	ldrb	r3, [r7, #14]
 800eb2e:	f003 020f 	and.w	r2, r3, #15
 800eb32:	6879      	ldr	r1, [r7, #4]
 800eb34:	4613      	mov	r3, r2
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	4413      	add	r3, r2
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	440b      	add	r3, r1
 800eb3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800eb42:	881b      	ldrh	r3, [r3, #0]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d104      	bne.n	800eb52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800eb48:	6839      	ldr	r1, [r7, #0]
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 fb9d 	bl	800f28a <USBD_CtlError>
                  break;
 800eb50:	e041      	b.n	800ebd6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	da0b      	bge.n	800eb72 <USBD_StdEPReq+0x2b2>
 800eb5a:	7bbb      	ldrb	r3, [r7, #14]
 800eb5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eb60:	4613      	mov	r3, r2
 800eb62:	009b      	lsls	r3, r3, #2
 800eb64:	4413      	add	r3, r2
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	3310      	adds	r3, #16
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	3304      	adds	r3, #4
 800eb70:	e00b      	b.n	800eb8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eb72:	7bbb      	ldrb	r3, [r7, #14]
 800eb74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb78:	4613      	mov	r3, r2
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	4413      	add	r3, r2
 800eb7e:	009b      	lsls	r3, r3, #2
 800eb80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800eb84:	687a      	ldr	r2, [r7, #4]
 800eb86:	4413      	add	r3, r2
 800eb88:	3304      	adds	r3, #4
 800eb8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800eb8c:	7bbb      	ldrb	r3, [r7, #14]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d002      	beq.n	800eb98 <USBD_StdEPReq+0x2d8>
 800eb92:	7bbb      	ldrb	r3, [r7, #14]
 800eb94:	2b80      	cmp	r3, #128	@ 0x80
 800eb96:	d103      	bne.n	800eba0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	601a      	str	r2, [r3, #0]
 800eb9e:	e00e      	b.n	800ebbe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800eba0:	7bbb      	ldrb	r3, [r7, #14]
 800eba2:	4619      	mov	r1, r3
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f001 f8e9 	bl	800fd7c <USBD_LL_IsStallEP>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d003      	beq.n	800ebb8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	601a      	str	r2, [r3, #0]
 800ebb6:	e002      	b.n	800ebbe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	2202      	movs	r2, #2
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 fbd1 	bl	800f36c <USBD_CtlSendData>
              break;
 800ebca:	e004      	b.n	800ebd6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ebcc:	6839      	ldr	r1, [r7, #0]
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 fb5b 	bl	800f28a <USBD_CtlError>
              break;
 800ebd4:	bf00      	nop
          }
          break;
 800ebd6:	e004      	b.n	800ebe2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ebd8:	6839      	ldr	r1, [r7, #0]
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 fb55 	bl	800f28a <USBD_CtlError>
          break;
 800ebe0:	bf00      	nop
      }
      break;
 800ebe2:	e005      	b.n	800ebf0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 fb4f 	bl	800f28a <USBD_CtlError>
      break;
 800ebec:	e000      	b.n	800ebf0 <USBD_StdEPReq+0x330>
      break;
 800ebee:	bf00      	nop
  }

  return ret;
 800ebf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
	...

0800ebfc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ec06:	2300      	movs	r3, #0
 800ec08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	885b      	ldrh	r3, [r3, #2]
 800ec16:	0a1b      	lsrs	r3, r3, #8
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	2b06      	cmp	r3, #6
 800ec1e:	f200 8128 	bhi.w	800ee72 <USBD_GetDescriptor+0x276>
 800ec22:	a201      	add	r2, pc, #4	@ (adr r2, 800ec28 <USBD_GetDescriptor+0x2c>)
 800ec24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec28:	0800ec45 	.word	0x0800ec45
 800ec2c:	0800ec5d 	.word	0x0800ec5d
 800ec30:	0800ec9d 	.word	0x0800ec9d
 800ec34:	0800ee73 	.word	0x0800ee73
 800ec38:	0800ee73 	.word	0x0800ee73
 800ec3c:	0800ee13 	.word	0x0800ee13
 800ec40:	0800ee3f 	.word	0x0800ee3f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	7c12      	ldrb	r2, [r2, #16]
 800ec50:	f107 0108 	add.w	r1, r7, #8
 800ec54:	4610      	mov	r0, r2
 800ec56:	4798      	blx	r3
 800ec58:	60f8      	str	r0, [r7, #12]
      break;
 800ec5a:	e112      	b.n	800ee82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	7c1b      	ldrb	r3, [r3, #16]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d10d      	bne.n	800ec80 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec6c:	f107 0208 	add.w	r2, r7, #8
 800ec70:	4610      	mov	r0, r2
 800ec72:	4798      	blx	r3
 800ec74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	2202      	movs	r2, #2
 800ec7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ec7e:	e100      	b.n	800ee82 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec88:	f107 0208 	add.w	r2, r7, #8
 800ec8c:	4610      	mov	r0, r2
 800ec8e:	4798      	blx	r3
 800ec90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	3301      	adds	r3, #1
 800ec96:	2202      	movs	r2, #2
 800ec98:	701a      	strb	r2, [r3, #0]
      break;
 800ec9a:	e0f2      	b.n	800ee82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	885b      	ldrh	r3, [r3, #2]
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	2b05      	cmp	r3, #5
 800eca4:	f200 80ac 	bhi.w	800ee00 <USBD_GetDescriptor+0x204>
 800eca8:	a201      	add	r2, pc, #4	@ (adr r2, 800ecb0 <USBD_GetDescriptor+0xb4>)
 800ecaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecae:	bf00      	nop
 800ecb0:	0800ecc9 	.word	0x0800ecc9
 800ecb4:	0800ecfd 	.word	0x0800ecfd
 800ecb8:	0800ed31 	.word	0x0800ed31
 800ecbc:	0800ed65 	.word	0x0800ed65
 800ecc0:	0800ed99 	.word	0x0800ed99
 800ecc4:	0800edcd 	.word	0x0800edcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d00b      	beq.n	800ecec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	7c12      	ldrb	r2, [r2, #16]
 800ece0:	f107 0108 	add.w	r1, r7, #8
 800ece4:	4610      	mov	r0, r2
 800ece6:	4798      	blx	r3
 800ece8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ecea:	e091      	b.n	800ee10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ecec:	6839      	ldr	r1, [r7, #0]
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 facb 	bl	800f28a <USBD_CtlError>
            err++;
 800ecf4:	7afb      	ldrb	r3, [r7, #11]
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	72fb      	strb	r3, [r7, #11]
          break;
 800ecfa:	e089      	b.n	800ee10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d00b      	beq.n	800ed20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	7c12      	ldrb	r2, [r2, #16]
 800ed14:	f107 0108 	add.w	r1, r7, #8
 800ed18:	4610      	mov	r0, r2
 800ed1a:	4798      	blx	r3
 800ed1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed1e:	e077      	b.n	800ee10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ed20:	6839      	ldr	r1, [r7, #0]
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 fab1 	bl	800f28a <USBD_CtlError>
            err++;
 800ed28:	7afb      	ldrb	r3, [r7, #11]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	72fb      	strb	r3, [r7, #11]
          break;
 800ed2e:	e06f      	b.n	800ee10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00b      	beq.n	800ed54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	7c12      	ldrb	r2, [r2, #16]
 800ed48:	f107 0108 	add.w	r1, r7, #8
 800ed4c:	4610      	mov	r0, r2
 800ed4e:	4798      	blx	r3
 800ed50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed52:	e05d      	b.n	800ee10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ed54:	6839      	ldr	r1, [r7, #0]
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f000 fa97 	bl	800f28a <USBD_CtlError>
            err++;
 800ed5c:	7afb      	ldrb	r3, [r7, #11]
 800ed5e:	3301      	adds	r3, #1
 800ed60:	72fb      	strb	r3, [r7, #11]
          break;
 800ed62:	e055      	b.n	800ee10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed6a:	691b      	ldr	r3, [r3, #16]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00b      	beq.n	800ed88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed76:	691b      	ldr	r3, [r3, #16]
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	7c12      	ldrb	r2, [r2, #16]
 800ed7c:	f107 0108 	add.w	r1, r7, #8
 800ed80:	4610      	mov	r0, r2
 800ed82:	4798      	blx	r3
 800ed84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed86:	e043      	b.n	800ee10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ed88:	6839      	ldr	r1, [r7, #0]
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f000 fa7d 	bl	800f28a <USBD_CtlError>
            err++;
 800ed90:	7afb      	ldrb	r3, [r7, #11]
 800ed92:	3301      	adds	r3, #1
 800ed94:	72fb      	strb	r3, [r7, #11]
          break;
 800ed96:	e03b      	b.n	800ee10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed9e:	695b      	ldr	r3, [r3, #20]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00b      	beq.n	800edbc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800edaa:	695b      	ldr	r3, [r3, #20]
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	7c12      	ldrb	r2, [r2, #16]
 800edb0:	f107 0108 	add.w	r1, r7, #8
 800edb4:	4610      	mov	r0, r2
 800edb6:	4798      	blx	r3
 800edb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edba:	e029      	b.n	800ee10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800edbc:	6839      	ldr	r1, [r7, #0]
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 fa63 	bl	800f28a <USBD_CtlError>
            err++;
 800edc4:	7afb      	ldrb	r3, [r7, #11]
 800edc6:	3301      	adds	r3, #1
 800edc8:	72fb      	strb	r3, [r7, #11]
          break;
 800edca:	e021      	b.n	800ee10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800edd2:	699b      	ldr	r3, [r3, #24]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d00b      	beq.n	800edf0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800edde:	699b      	ldr	r3, [r3, #24]
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	7c12      	ldrb	r2, [r2, #16]
 800ede4:	f107 0108 	add.w	r1, r7, #8
 800ede8:	4610      	mov	r0, r2
 800edea:	4798      	blx	r3
 800edec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edee:	e00f      	b.n	800ee10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800edf0:	6839      	ldr	r1, [r7, #0]
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f000 fa49 	bl	800f28a <USBD_CtlError>
            err++;
 800edf8:	7afb      	ldrb	r3, [r7, #11]
 800edfa:	3301      	adds	r3, #1
 800edfc:	72fb      	strb	r3, [r7, #11]
          break;
 800edfe:	e007      	b.n	800ee10 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ee00:	6839      	ldr	r1, [r7, #0]
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 fa41 	bl	800f28a <USBD_CtlError>
          err++;
 800ee08:	7afb      	ldrb	r3, [r7, #11]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ee0e:	bf00      	nop
      }
      break;
 800ee10:	e037      	b.n	800ee82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	7c1b      	ldrb	r3, [r3, #16]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d109      	bne.n	800ee2e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee22:	f107 0208 	add.w	r2, r7, #8
 800ee26:	4610      	mov	r0, r2
 800ee28:	4798      	blx	r3
 800ee2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee2c:	e029      	b.n	800ee82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ee2e:	6839      	ldr	r1, [r7, #0]
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f000 fa2a 	bl	800f28a <USBD_CtlError>
        err++;
 800ee36:	7afb      	ldrb	r3, [r7, #11]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	72fb      	strb	r3, [r7, #11]
      break;
 800ee3c:	e021      	b.n	800ee82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	7c1b      	ldrb	r3, [r3, #16]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d10d      	bne.n	800ee62 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee4e:	f107 0208 	add.w	r2, r7, #8
 800ee52:	4610      	mov	r0, r2
 800ee54:	4798      	blx	r3
 800ee56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	2207      	movs	r2, #7
 800ee5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee60:	e00f      	b.n	800ee82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ee62:	6839      	ldr	r1, [r7, #0]
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 fa10 	bl	800f28a <USBD_CtlError>
        err++;
 800ee6a:	7afb      	ldrb	r3, [r7, #11]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	72fb      	strb	r3, [r7, #11]
      break;
 800ee70:	e007      	b.n	800ee82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 fa08 	bl	800f28a <USBD_CtlError>
      err++;
 800ee7a:	7afb      	ldrb	r3, [r7, #11]
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	72fb      	strb	r3, [r7, #11]
      break;
 800ee80:	bf00      	nop
  }

  if (err != 0U)
 800ee82:	7afb      	ldrb	r3, [r7, #11]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d11e      	bne.n	800eec6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	88db      	ldrh	r3, [r3, #6]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d016      	beq.n	800eebe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ee90:	893b      	ldrh	r3, [r7, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d00e      	beq.n	800eeb4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	88da      	ldrh	r2, [r3, #6]
 800ee9a:	893b      	ldrh	r3, [r7, #8]
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	bf28      	it	cs
 800eea0:	4613      	movcs	r3, r2
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800eea6:	893b      	ldrh	r3, [r7, #8]
 800eea8:	461a      	mov	r2, r3
 800eeaa:	68f9      	ldr	r1, [r7, #12]
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 fa5d 	bl	800f36c <USBD_CtlSendData>
 800eeb2:	e009      	b.n	800eec8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800eeb4:	6839      	ldr	r1, [r7, #0]
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 f9e7 	bl	800f28a <USBD_CtlError>
 800eebc:	e004      	b.n	800eec8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 faae 	bl	800f420 <USBD_CtlSendStatus>
 800eec4:	e000      	b.n	800eec8 <USBD_GetDescriptor+0x2cc>
    return;
 800eec6:	bf00      	nop
  }
}
 800eec8:	3710      	adds	r7, #16
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop

0800eed0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	889b      	ldrh	r3, [r3, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d131      	bne.n	800ef46 <USBD_SetAddress+0x76>
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	88db      	ldrh	r3, [r3, #6]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d12d      	bne.n	800ef46 <USBD_SetAddress+0x76>
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	885b      	ldrh	r3, [r3, #2]
 800eeee:	2b7f      	cmp	r3, #127	@ 0x7f
 800eef0:	d829      	bhi.n	800ef46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	885b      	ldrh	r3, [r3, #2]
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eefc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	2b03      	cmp	r3, #3
 800ef08:	d104      	bne.n	800ef14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ef0a:	6839      	ldr	r1, [r7, #0]
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 f9bc 	bl	800f28a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef12:	e01d      	b.n	800ef50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	7bfa      	ldrb	r2, [r7, #15]
 800ef18:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ef1c:	7bfb      	ldrb	r3, [r7, #15]
 800ef1e:	4619      	mov	r1, r3
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f000 ff57 	bl	800fdd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 fa7a 	bl	800f420 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ef2c:	7bfb      	ldrb	r3, [r7, #15]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d004      	beq.n	800ef3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2202      	movs	r2, #2
 800ef36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef3a:	e009      	b.n	800ef50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef44:	e004      	b.n	800ef50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ef46:	6839      	ldr	r1, [r7, #0]
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f000 f99e 	bl	800f28a <USBD_CtlError>
  }
}
 800ef4e:	bf00      	nop
 800ef50:	bf00      	nop
 800ef52:	3710      	adds	r7, #16
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef62:	2300      	movs	r3, #0
 800ef64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	885b      	ldrh	r3, [r3, #2]
 800ef6a:	b2da      	uxtb	r2, r3
 800ef6c:	4b4e      	ldr	r3, [pc, #312]	@ (800f0a8 <USBD_SetConfig+0x150>)
 800ef6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ef70:	4b4d      	ldr	r3, [pc, #308]	@ (800f0a8 <USBD_SetConfig+0x150>)
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d905      	bls.n	800ef84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ef78:	6839      	ldr	r1, [r7, #0]
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 f985 	bl	800f28a <USBD_CtlError>
    return USBD_FAIL;
 800ef80:	2303      	movs	r3, #3
 800ef82:	e08c      	b.n	800f09e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef8a:	b2db      	uxtb	r3, r3
 800ef8c:	2b02      	cmp	r3, #2
 800ef8e:	d002      	beq.n	800ef96 <USBD_SetConfig+0x3e>
 800ef90:	2b03      	cmp	r3, #3
 800ef92:	d029      	beq.n	800efe8 <USBD_SetConfig+0x90>
 800ef94:	e075      	b.n	800f082 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ef96:	4b44      	ldr	r3, [pc, #272]	@ (800f0a8 <USBD_SetConfig+0x150>)
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d020      	beq.n	800efe0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ef9e:	4b42      	ldr	r3, [pc, #264]	@ (800f0a8 <USBD_SetConfig+0x150>)
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	461a      	mov	r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800efa8:	4b3f      	ldr	r3, [pc, #252]	@ (800f0a8 <USBD_SetConfig+0x150>)
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	4619      	mov	r1, r3
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f7fe ffe9 	bl	800df86 <USBD_SetClassConfig>
 800efb4:	4603      	mov	r3, r0
 800efb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800efb8:	7bfb      	ldrb	r3, [r7, #15]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d008      	beq.n	800efd0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800efbe:	6839      	ldr	r1, [r7, #0]
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 f962 	bl	800f28a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2202      	movs	r2, #2
 800efca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800efce:	e065      	b.n	800f09c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 fa25 	bl	800f420 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2203      	movs	r2, #3
 800efda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800efde:	e05d      	b.n	800f09c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f000 fa1d 	bl	800f420 <USBD_CtlSendStatus>
      break;
 800efe6:	e059      	b.n	800f09c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800efe8:	4b2f      	ldr	r3, [pc, #188]	@ (800f0a8 <USBD_SetConfig+0x150>)
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d112      	bne.n	800f016 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2202      	movs	r2, #2
 800eff4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800eff8:	4b2b      	ldr	r3, [pc, #172]	@ (800f0a8 <USBD_SetConfig+0x150>)
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	461a      	mov	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f002:	4b29      	ldr	r3, [pc, #164]	@ (800f0a8 <USBD_SetConfig+0x150>)
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	4619      	mov	r1, r3
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f7fe ffd8 	bl	800dfbe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 fa06 	bl	800f420 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f014:	e042      	b.n	800f09c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f016:	4b24      	ldr	r3, [pc, #144]	@ (800f0a8 <USBD_SetConfig+0x150>)
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	461a      	mov	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	429a      	cmp	r2, r3
 800f022:	d02a      	beq.n	800f07a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	4619      	mov	r1, r3
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7fe ffc6 	bl	800dfbe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f032:	4b1d      	ldr	r3, [pc, #116]	@ (800f0a8 <USBD_SetConfig+0x150>)
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	461a      	mov	r2, r3
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f03c:	4b1a      	ldr	r3, [pc, #104]	@ (800f0a8 <USBD_SetConfig+0x150>)
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	4619      	mov	r1, r3
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7fe ff9f 	bl	800df86 <USBD_SetClassConfig>
 800f048:	4603      	mov	r3, r0
 800f04a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f04c:	7bfb      	ldrb	r3, [r7, #15]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00f      	beq.n	800f072 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f052:	6839      	ldr	r1, [r7, #0]
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f000 f918 	bl	800f28a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	b2db      	uxtb	r3, r3
 800f060:	4619      	mov	r1, r3
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7fe ffab 	bl	800dfbe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2202      	movs	r2, #2
 800f06c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f070:	e014      	b.n	800f09c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 f9d4 	bl	800f420 <USBD_CtlSendStatus>
      break;
 800f078:	e010      	b.n	800f09c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f000 f9d0 	bl	800f420 <USBD_CtlSendStatus>
      break;
 800f080:	e00c      	b.n	800f09c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f082:	6839      	ldr	r1, [r7, #0]
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 f900 	bl	800f28a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f08a:	4b07      	ldr	r3, [pc, #28]	@ (800f0a8 <USBD_SetConfig+0x150>)
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	4619      	mov	r1, r3
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f7fe ff94 	bl	800dfbe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f096:	2303      	movs	r3, #3
 800f098:	73fb      	strb	r3, [r7, #15]
      break;
 800f09a:	bf00      	nop
  }

  return ret;
 800f09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3710      	adds	r7, #16
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	200009a4 	.word	0x200009a4

0800f0ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b082      	sub	sp, #8
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	88db      	ldrh	r3, [r3, #6]
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d004      	beq.n	800f0c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f0be:	6839      	ldr	r1, [r7, #0]
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f000 f8e2 	bl	800f28a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f0c6:	e023      	b.n	800f110 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	2b02      	cmp	r3, #2
 800f0d2:	dc02      	bgt.n	800f0da <USBD_GetConfig+0x2e>
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	dc03      	bgt.n	800f0e0 <USBD_GetConfig+0x34>
 800f0d8:	e015      	b.n	800f106 <USBD_GetConfig+0x5a>
 800f0da:	2b03      	cmp	r3, #3
 800f0dc:	d00b      	beq.n	800f0f6 <USBD_GetConfig+0x4a>
 800f0de:	e012      	b.n	800f106 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	3308      	adds	r3, #8
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 f93c 	bl	800f36c <USBD_CtlSendData>
        break;
 800f0f4:	e00c      	b.n	800f110 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f934 	bl	800f36c <USBD_CtlSendData>
        break;
 800f104:	e004      	b.n	800f110 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f106:	6839      	ldr	r1, [r7, #0]
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f000 f8be 	bl	800f28a <USBD_CtlError>
        break;
 800f10e:	bf00      	nop
}
 800f110:	bf00      	nop
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f128:	b2db      	uxtb	r3, r3
 800f12a:	3b01      	subs	r3, #1
 800f12c:	2b02      	cmp	r3, #2
 800f12e:	d81e      	bhi.n	800f16e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	88db      	ldrh	r3, [r3, #6]
 800f134:	2b02      	cmp	r3, #2
 800f136:	d004      	beq.n	800f142 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f138:	6839      	ldr	r1, [r7, #0]
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f000 f8a5 	bl	800f28a <USBD_CtlError>
        break;
 800f140:	e01a      	b.n	800f178 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2201      	movs	r2, #1
 800f146:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d005      	beq.n	800f15e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	f043 0202 	orr.w	r2, r3, #2
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	330c      	adds	r3, #12
 800f162:	2202      	movs	r2, #2
 800f164:	4619      	mov	r1, r3
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 f900 	bl	800f36c <USBD_CtlSendData>
      break;
 800f16c:	e004      	b.n	800f178 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f16e:	6839      	ldr	r1, [r7, #0]
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f000 f88a 	bl	800f28a <USBD_CtlError>
      break;
 800f176:	bf00      	nop
  }
}
 800f178:	bf00      	nop
 800f17a:	3708      	adds	r7, #8
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	885b      	ldrh	r3, [r3, #2]
 800f18e:	2b01      	cmp	r3, #1
 800f190:	d107      	bne.n	800f1a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2201      	movs	r2, #1
 800f196:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 f940 	bl	800f420 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f1a0:	e013      	b.n	800f1ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	885b      	ldrh	r3, [r3, #2]
 800f1a6:	2b02      	cmp	r3, #2
 800f1a8:	d10b      	bne.n	800f1c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	889b      	ldrh	r3, [r3, #4]
 800f1ae:	0a1b      	lsrs	r3, r3, #8
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	b2da      	uxtb	r2, r3
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f000 f930 	bl	800f420 <USBD_CtlSendStatus>
}
 800f1c0:	e003      	b.n	800f1ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f1c2:	6839      	ldr	r1, [r7, #0]
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f000 f860 	bl	800f28a <USBD_CtlError>
}
 800f1ca:	bf00      	nop
 800f1cc:	3708      	adds	r7, #8
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}

0800f1d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b082      	sub	sp, #8
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
 800f1da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	3b01      	subs	r3, #1
 800f1e6:	2b02      	cmp	r3, #2
 800f1e8:	d80b      	bhi.n	800f202 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	885b      	ldrh	r3, [r3, #2]
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d10c      	bne.n	800f20c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f000 f910 	bl	800f420 <USBD_CtlSendStatus>
      }
      break;
 800f200:	e004      	b.n	800f20c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f202:	6839      	ldr	r1, [r7, #0]
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f000 f840 	bl	800f28a <USBD_CtlError>
      break;
 800f20a:	e000      	b.n	800f20e <USBD_ClrFeature+0x3c>
      break;
 800f20c:	bf00      	nop
  }
}
 800f20e:	bf00      	nop
 800f210:	3708      	adds	r7, #8
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b084      	sub	sp, #16
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
 800f21e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	781a      	ldrb	r2, [r3, #0]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	3301      	adds	r3, #1
 800f230:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	781a      	ldrb	r2, [r3, #0]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	3301      	adds	r3, #1
 800f23e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f7ff fa40 	bl	800e6c6 <SWAPBYTE>
 800f246:	4603      	mov	r3, r0
 800f248:	461a      	mov	r2, r3
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	3301      	adds	r3, #1
 800f252:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	3301      	adds	r3, #1
 800f258:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	f7ff fa33 	bl	800e6c6 <SWAPBYTE>
 800f260:	4603      	mov	r3, r0
 800f262:	461a      	mov	r2, r3
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	3301      	adds	r3, #1
 800f26c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	3301      	adds	r3, #1
 800f272:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	f7ff fa26 	bl	800e6c6 <SWAPBYTE>
 800f27a:	4603      	mov	r3, r0
 800f27c:	461a      	mov	r2, r3
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	80da      	strh	r2, [r3, #6]
}
 800f282:	bf00      	nop
 800f284:	3710      	adds	r7, #16
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}

0800f28a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b082      	sub	sp, #8
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
 800f292:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f294:	2180      	movs	r1, #128	@ 0x80
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f000 fd32 	bl	800fd00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f29c:	2100      	movs	r1, #0
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f000 fd2e 	bl	800fd00 <USBD_LL_StallEP>
}
 800f2a4:	bf00      	nop
 800f2a6:	3708      	adds	r7, #8
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b086      	sub	sp, #24
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d036      	beq.n	800f330 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f2c6:	6938      	ldr	r0, [r7, #16]
 800f2c8:	f000 f836 	bl	800f338 <USBD_GetLen>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	005b      	lsls	r3, r3, #1
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f2da:	7dfb      	ldrb	r3, [r7, #23]
 800f2dc:	68ba      	ldr	r2, [r7, #8]
 800f2de:	4413      	add	r3, r2
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	7812      	ldrb	r2, [r2, #0]
 800f2e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800f2e6:	7dfb      	ldrb	r3, [r7, #23]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f2ec:	7dfb      	ldrb	r3, [r7, #23]
 800f2ee:	68ba      	ldr	r2, [r7, #8]
 800f2f0:	4413      	add	r3, r2
 800f2f2:	2203      	movs	r2, #3
 800f2f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800f2f6:	7dfb      	ldrb	r3, [r7, #23]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f2fc:	e013      	b.n	800f326 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f2fe:	7dfb      	ldrb	r3, [r7, #23]
 800f300:	68ba      	ldr	r2, [r7, #8]
 800f302:	4413      	add	r3, r2
 800f304:	693a      	ldr	r2, [r7, #16]
 800f306:	7812      	ldrb	r2, [r2, #0]
 800f308:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	3301      	adds	r3, #1
 800f30e:	613b      	str	r3, [r7, #16]
    idx++;
 800f310:	7dfb      	ldrb	r3, [r7, #23]
 800f312:	3301      	adds	r3, #1
 800f314:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f316:	7dfb      	ldrb	r3, [r7, #23]
 800f318:	68ba      	ldr	r2, [r7, #8]
 800f31a:	4413      	add	r3, r2
 800f31c:	2200      	movs	r2, #0
 800f31e:	701a      	strb	r2, [r3, #0]
    idx++;
 800f320:	7dfb      	ldrb	r3, [r7, #23]
 800f322:	3301      	adds	r3, #1
 800f324:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d1e7      	bne.n	800f2fe <USBD_GetString+0x52>
 800f32e:	e000      	b.n	800f332 <USBD_GetString+0x86>
    return;
 800f330:	bf00      	nop
  }
}
 800f332:	3718      	adds	r7, #24
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f338:	b480      	push	{r7}
 800f33a:	b085      	sub	sp, #20
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f340:	2300      	movs	r3, #0
 800f342:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f348:	e005      	b.n	800f356 <USBD_GetLen+0x1e>
  {
    len++;
 800f34a:	7bfb      	ldrb	r3, [r7, #15]
 800f34c:	3301      	adds	r3, #1
 800f34e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	3301      	adds	r3, #1
 800f354:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d1f5      	bne.n	800f34a <USBD_GetLen+0x12>
  }

  return len;
 800f35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f360:	4618      	mov	r0, r3
 800f362:	3714      	adds	r7, #20
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr

0800f36c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	60f8      	str	r0, [r7, #12]
 800f374:	60b9      	str	r1, [r7, #8]
 800f376:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2202      	movs	r2, #2
 800f37c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	687a      	ldr	r2, [r7, #4]
 800f38a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	68ba      	ldr	r2, [r7, #8]
 800f390:	2100      	movs	r1, #0
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	f000 fd3d 	bl	800fe12 <USBD_LL_Transmit>

  return USBD_OK;
 800f398:	2300      	movs	r3, #0
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}

0800f3a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f3a2:	b580      	push	{r7, lr}
 800f3a4:	b084      	sub	sp, #16
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	60f8      	str	r0, [r7, #12]
 800f3aa:	60b9      	str	r1, [r7, #8]
 800f3ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	68ba      	ldr	r2, [r7, #8]
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f000 fd2c 	bl	800fe12 <USBD_LL_Transmit>

  return USBD_OK;
 800f3ba:	2300      	movs	r3, #0
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3710      	adds	r7, #16
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	60b9      	str	r1, [r7, #8]
 800f3ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2203      	movs	r2, #3
 800f3d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	687a      	ldr	r2, [r7, #4]
 800f3dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	68ba      	ldr	r2, [r7, #8]
 800f3ec:	2100      	movs	r1, #0
 800f3ee:	68f8      	ldr	r0, [r7, #12]
 800f3f0:	f000 fd30 	bl	800fe54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f3f4:	2300      	movs	r3, #0
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b084      	sub	sp, #16
 800f402:	af00      	add	r7, sp, #0
 800f404:	60f8      	str	r0, [r7, #12]
 800f406:	60b9      	str	r1, [r7, #8]
 800f408:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	68ba      	ldr	r2, [r7, #8]
 800f40e:	2100      	movs	r1, #0
 800f410:	68f8      	ldr	r0, [r7, #12]
 800f412:	f000 fd1f 	bl	800fe54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f416:	2300      	movs	r3, #0
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3710      	adds	r7, #16
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2204      	movs	r2, #4
 800f42c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f430:	2300      	movs	r3, #0
 800f432:	2200      	movs	r2, #0
 800f434:	2100      	movs	r1, #0
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 fceb 	bl	800fe12 <USBD_LL_Transmit>

  return USBD_OK;
 800f43c:	2300      	movs	r3, #0
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3708      	adds	r7, #8
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}

0800f446 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f446:	b580      	push	{r7, lr}
 800f448:	b082      	sub	sp, #8
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2205      	movs	r2, #5
 800f452:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f456:	2300      	movs	r3, #0
 800f458:	2200      	movs	r2, #0
 800f45a:	2100      	movs	r1, #0
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f000 fcf9 	bl	800fe54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f462:	2300      	movs	r3, #0
}
 800f464:	4618      	mov	r0, r3
 800f466:	3708      	adds	r7, #8
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f470:	2200      	movs	r2, #0
 800f472:	4912      	ldr	r1, [pc, #72]	@ (800f4bc <MX_USB_DEVICE_Init+0x50>)
 800f474:	4812      	ldr	r0, [pc, #72]	@ (800f4c0 <MX_USB_DEVICE_Init+0x54>)
 800f476:	f7fe fd09 	bl	800de8c <USBD_Init>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d001      	beq.n	800f484 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f480:	f7f1 febc 	bl	80011fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f484:	490f      	ldr	r1, [pc, #60]	@ (800f4c4 <MX_USB_DEVICE_Init+0x58>)
 800f486:	480e      	ldr	r0, [pc, #56]	@ (800f4c0 <MX_USB_DEVICE_Init+0x54>)
 800f488:	f7fe fd30 	bl	800deec <USBD_RegisterClass>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d001      	beq.n	800f496 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f492:	f7f1 feb3 	bl	80011fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f496:	490c      	ldr	r1, [pc, #48]	@ (800f4c8 <MX_USB_DEVICE_Init+0x5c>)
 800f498:	4809      	ldr	r0, [pc, #36]	@ (800f4c0 <MX_USB_DEVICE_Init+0x54>)
 800f49a:	f7fe fc67 	bl	800dd6c <USBD_CDC_RegisterInterface>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d001      	beq.n	800f4a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f4a4:	f7f1 feaa 	bl	80011fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f4a8:	4805      	ldr	r0, [pc, #20]	@ (800f4c0 <MX_USB_DEVICE_Init+0x54>)
 800f4aa:	f7fe fd55 	bl	800df58 <USBD_Start>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d001      	beq.n	800f4b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f4b4:	f7f1 fea2 	bl	80011fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f4b8:	bf00      	nop
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	200000ac 	.word	0x200000ac
 800f4c0:	200009a8 	.word	0x200009a8
 800f4c4:	20000018 	.word	0x20000018
 800f4c8:	20000098 	.word	0x20000098

0800f4cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	4905      	ldr	r1, [pc, #20]	@ (800f4e8 <CDC_Init_FS+0x1c>)
 800f4d4:	4805      	ldr	r0, [pc, #20]	@ (800f4ec <CDC_Init_FS+0x20>)
 800f4d6:	f7fe fc63 	bl	800dda0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f4da:	4905      	ldr	r1, [pc, #20]	@ (800f4f0 <CDC_Init_FS+0x24>)
 800f4dc:	4803      	ldr	r0, [pc, #12]	@ (800f4ec <CDC_Init_FS+0x20>)
 800f4de:	f7fe fc81 	bl	800dde4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f4e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	20001484 	.word	0x20001484
 800f4ec:	200009a8 	.word	0x200009a8
 800f4f0:	20000c84 	.word	0x20000c84

0800f4f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f4f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	4603      	mov	r3, r0
 800f50c:	6039      	str	r1, [r7, #0]
 800f50e:	71fb      	strb	r3, [r7, #7]
 800f510:	4613      	mov	r3, r2
 800f512:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f514:	79fb      	ldrb	r3, [r7, #7]
 800f516:	2b23      	cmp	r3, #35	@ 0x23
 800f518:	f200 808c 	bhi.w	800f634 <CDC_Control_FS+0x130>
 800f51c:	a201      	add	r2, pc, #4	@ (adr r2, 800f524 <CDC_Control_FS+0x20>)
 800f51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f522:	bf00      	nop
 800f524:	0800f635 	.word	0x0800f635
 800f528:	0800f635 	.word	0x0800f635
 800f52c:	0800f635 	.word	0x0800f635
 800f530:	0800f635 	.word	0x0800f635
 800f534:	0800f635 	.word	0x0800f635
 800f538:	0800f635 	.word	0x0800f635
 800f53c:	0800f635 	.word	0x0800f635
 800f540:	0800f635 	.word	0x0800f635
 800f544:	0800f635 	.word	0x0800f635
 800f548:	0800f635 	.word	0x0800f635
 800f54c:	0800f635 	.word	0x0800f635
 800f550:	0800f635 	.word	0x0800f635
 800f554:	0800f635 	.word	0x0800f635
 800f558:	0800f635 	.word	0x0800f635
 800f55c:	0800f635 	.word	0x0800f635
 800f560:	0800f635 	.word	0x0800f635
 800f564:	0800f635 	.word	0x0800f635
 800f568:	0800f635 	.word	0x0800f635
 800f56c:	0800f635 	.word	0x0800f635
 800f570:	0800f635 	.word	0x0800f635
 800f574:	0800f635 	.word	0x0800f635
 800f578:	0800f635 	.word	0x0800f635
 800f57c:	0800f635 	.word	0x0800f635
 800f580:	0800f635 	.word	0x0800f635
 800f584:	0800f635 	.word	0x0800f635
 800f588:	0800f635 	.word	0x0800f635
 800f58c:	0800f635 	.word	0x0800f635
 800f590:	0800f635 	.word	0x0800f635
 800f594:	0800f635 	.word	0x0800f635
 800f598:	0800f635 	.word	0x0800f635
 800f59c:	0800f635 	.word	0x0800f635
 800f5a0:	0800f635 	.word	0x0800f635
 800f5a4:	0800f5b5 	.word	0x0800f5b5
 800f5a8:	0800f5ef 	.word	0x0800f5ef
 800f5ac:	0800f635 	.word	0x0800f635
 800f5b0:	0800f635 	.word	0x0800f635
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	usbVcpParameters[0] = pbuf[0];
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	781a      	ldrb	r2, [r3, #0]
 800f5b8:	4b22      	ldr	r3, [pc, #136]	@ (800f644 <CDC_Control_FS+0x140>)
 800f5ba:	701a      	strb	r2, [r3, #0]
    	usbVcpParameters[1] = pbuf[1];
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	785a      	ldrb	r2, [r3, #1]
 800f5c0:	4b20      	ldr	r3, [pc, #128]	@ (800f644 <CDC_Control_FS+0x140>)
 800f5c2:	705a      	strb	r2, [r3, #1]
    	usbVcpParameters[2] = pbuf[2];
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	789a      	ldrb	r2, [r3, #2]
 800f5c8:	4b1e      	ldr	r3, [pc, #120]	@ (800f644 <CDC_Control_FS+0x140>)
 800f5ca:	709a      	strb	r2, [r3, #2]
    	usbVcpParameters[3] = pbuf[3];
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	78da      	ldrb	r2, [r3, #3]
 800f5d0:	4b1c      	ldr	r3, [pc, #112]	@ (800f644 <CDC_Control_FS+0x140>)
 800f5d2:	70da      	strb	r2, [r3, #3]
    	usbVcpParameters[4] = pbuf[4];
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	791a      	ldrb	r2, [r3, #4]
 800f5d8:	4b1a      	ldr	r3, [pc, #104]	@ (800f644 <CDC_Control_FS+0x140>)
 800f5da:	711a      	strb	r2, [r3, #4]
    	usbVcpParameters[5] = pbuf[5];
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	795a      	ldrb	r2, [r3, #5]
 800f5e0:	4b18      	ldr	r3, [pc, #96]	@ (800f644 <CDC_Control_FS+0x140>)
 800f5e2:	715a      	strb	r2, [r3, #5]
    	usbVcpParameters[6] = pbuf[6];
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	799a      	ldrb	r2, [r3, #6]
 800f5e8:	4b16      	ldr	r3, [pc, #88]	@ (800f644 <CDC_Control_FS+0x140>)
 800f5ea:	719a      	strb	r2, [r3, #6]

    break;
 800f5ec:	e023      	b.n	800f636 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = usbVcpParameters[0];
 800f5ee:	4b15      	ldr	r3, [pc, #84]	@ (800f644 <CDC_Control_FS+0x140>)
 800f5f0:	781a      	ldrb	r2, [r3, #0]
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = usbVcpParameters[1];
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	4a12      	ldr	r2, [pc, #72]	@ (800f644 <CDC_Control_FS+0x140>)
 800f5fc:	7852      	ldrb	r2, [r2, #1]
 800f5fe:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = usbVcpParameters[2];
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	3302      	adds	r3, #2
 800f604:	4a0f      	ldr	r2, [pc, #60]	@ (800f644 <CDC_Control_FS+0x140>)
 800f606:	7892      	ldrb	r2, [r2, #2]
 800f608:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = usbVcpParameters[3];
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	3303      	adds	r3, #3
 800f60e:	4a0d      	ldr	r2, [pc, #52]	@ (800f644 <CDC_Control_FS+0x140>)
 800f610:	78d2      	ldrb	r2, [r2, #3]
 800f612:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = usbVcpParameters[4];
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	3304      	adds	r3, #4
 800f618:	4a0a      	ldr	r2, [pc, #40]	@ (800f644 <CDC_Control_FS+0x140>)
 800f61a:	7912      	ldrb	r2, [r2, #4]
 800f61c:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = usbVcpParameters[5];
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	3305      	adds	r3, #5
 800f622:	4a08      	ldr	r2, [pc, #32]	@ (800f644 <CDC_Control_FS+0x140>)
 800f624:	7952      	ldrb	r2, [r2, #5]
 800f626:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = usbVcpParameters[6];
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	3306      	adds	r3, #6
 800f62c:	4a05      	ldr	r2, [pc, #20]	@ (800f644 <CDC_Control_FS+0x140>)
 800f62e:	7992      	ldrb	r2, [r2, #6]
 800f630:	701a      	strb	r2, [r3, #0]

    break;
 800f632:	e000      	b.n	800f636 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f634:	bf00      	nop
  }

  return (USBD_OK);
 800f636:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f638:	4618      	mov	r0, r3
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr
 800f644:	20000724 	.word	0x20000724

0800f648 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f652:	6879      	ldr	r1, [r7, #4]
 800f654:	4808      	ldr	r0, [pc, #32]	@ (800f678 <CDC_Receive_FS+0x30>)
 800f656:	f7fe fbc5 	bl	800dde4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f65a:	4807      	ldr	r0, [pc, #28]	@ (800f678 <CDC_Receive_FS+0x30>)
 800f65c:	f7fe fbe0 	bl	800de20 <USBD_CDC_ReceivePacket>

  PDM_USB_Process(Buf, *Len);
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	b29b      	uxth	r3, r3
 800f666:	4619      	mov	r1, r3
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f7f1 fff5 	bl	8001658 <PDM_USB_Process>

  return (USBD_OK);
 800f66e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f670:	4618      	mov	r0, r3
 800f672:	3708      	adds	r7, #8
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	200009a8 	.word	0x200009a8

0800f67c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b087      	sub	sp, #28
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	60b9      	str	r1, [r7, #8]
 800f686:	4613      	mov	r3, r2
 800f688:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f68a:	2300      	movs	r3, #0
 800f68c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f68e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f692:	4618      	mov	r0, r3
 800f694:	371c      	adds	r7, #28
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
	...

0800f6a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b083      	sub	sp, #12
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	6039      	str	r1, [r7, #0]
 800f6aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	2212      	movs	r2, #18
 800f6b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f6b2:	4b03      	ldr	r3, [pc, #12]	@ (800f6c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr
 800f6c0:	200000c8 	.word	0x200000c8

0800f6c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	6039      	str	r1, [r7, #0]
 800f6ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	2204      	movs	r2, #4
 800f6d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f6d6:	4b03      	ldr	r3, [pc, #12]	@ (800f6e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr
 800f6e4:	200000dc 	.word	0x200000dc

0800f6e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	6039      	str	r1, [r7, #0]
 800f6f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6f4:	79fb      	ldrb	r3, [r7, #7]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d105      	bne.n	800f706 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6fa:	683a      	ldr	r2, [r7, #0]
 800f6fc:	4907      	ldr	r1, [pc, #28]	@ (800f71c <USBD_FS_ProductStrDescriptor+0x34>)
 800f6fe:	4808      	ldr	r0, [pc, #32]	@ (800f720 <USBD_FS_ProductStrDescriptor+0x38>)
 800f700:	f7ff fdd4 	bl	800f2ac <USBD_GetString>
 800f704:	e004      	b.n	800f710 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f706:	683a      	ldr	r2, [r7, #0]
 800f708:	4904      	ldr	r1, [pc, #16]	@ (800f71c <USBD_FS_ProductStrDescriptor+0x34>)
 800f70a:	4805      	ldr	r0, [pc, #20]	@ (800f720 <USBD_FS_ProductStrDescriptor+0x38>)
 800f70c:	f7ff fdce 	bl	800f2ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800f710:	4b02      	ldr	r3, [pc, #8]	@ (800f71c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f712:	4618      	mov	r0, r3
 800f714:	3708      	adds	r7, #8
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	20001c84 	.word	0x20001c84
 800f720:	080101f4 	.word	0x080101f4

0800f724 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	4603      	mov	r3, r0
 800f72c:	6039      	str	r1, [r7, #0]
 800f72e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f730:	683a      	ldr	r2, [r7, #0]
 800f732:	4904      	ldr	r1, [pc, #16]	@ (800f744 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f734:	4804      	ldr	r0, [pc, #16]	@ (800f748 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f736:	f7ff fdb9 	bl	800f2ac <USBD_GetString>
  return USBD_StrDesc;
 800f73a:	4b02      	ldr	r3, [pc, #8]	@ (800f744 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3708      	adds	r7, #8
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}
 800f744:	20001c84 	.word	0x20001c84
 800f748:	0801020c 	.word	0x0801020c

0800f74c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	4603      	mov	r3, r0
 800f754:	6039      	str	r1, [r7, #0]
 800f756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	221a      	movs	r2, #26
 800f75c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f75e:	f000 f843 	bl	800f7e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f762:	4b02      	ldr	r3, [pc, #8]	@ (800f76c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f764:	4618      	mov	r0, r3
 800f766:	3708      	adds	r7, #8
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	200000e0 	.word	0x200000e0

0800f770 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	4603      	mov	r3, r0
 800f778:	6039      	str	r1, [r7, #0]
 800f77a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f77c:	79fb      	ldrb	r3, [r7, #7]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d105      	bne.n	800f78e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f782:	683a      	ldr	r2, [r7, #0]
 800f784:	4907      	ldr	r1, [pc, #28]	@ (800f7a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f786:	4808      	ldr	r0, [pc, #32]	@ (800f7a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f788:	f7ff fd90 	bl	800f2ac <USBD_GetString>
 800f78c:	e004      	b.n	800f798 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f78e:	683a      	ldr	r2, [r7, #0]
 800f790:	4904      	ldr	r1, [pc, #16]	@ (800f7a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f792:	4805      	ldr	r0, [pc, #20]	@ (800f7a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f794:	f7ff fd8a 	bl	800f2ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800f798:	4b02      	ldr	r3, [pc, #8]	@ (800f7a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3708      	adds	r7, #8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
 800f7a2:	bf00      	nop
 800f7a4:	20001c84 	.word	0x20001c84
 800f7a8:	08010220 	.word	0x08010220

0800f7ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	6039      	str	r1, [r7, #0]
 800f7b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f7b8:	79fb      	ldrb	r3, [r7, #7]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d105      	bne.n	800f7ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7be:	683a      	ldr	r2, [r7, #0]
 800f7c0:	4907      	ldr	r1, [pc, #28]	@ (800f7e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7c2:	4808      	ldr	r0, [pc, #32]	@ (800f7e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7c4:	f7ff fd72 	bl	800f2ac <USBD_GetString>
 800f7c8:	e004      	b.n	800f7d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f7ca:	683a      	ldr	r2, [r7, #0]
 800f7cc:	4904      	ldr	r1, [pc, #16]	@ (800f7e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f7ce:	4805      	ldr	r0, [pc, #20]	@ (800f7e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f7d0:	f7ff fd6c 	bl	800f2ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7d4:	4b02      	ldr	r3, [pc, #8]	@ (800f7e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3708      	adds	r7, #8
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	20001c84 	.word	0x20001c84
 800f7e4:	0801022c 	.word	0x0801022c

0800f7e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f7ee:	4b0f      	ldr	r3, [pc, #60]	@ (800f82c <Get_SerialNum+0x44>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f7f4:	4b0e      	ldr	r3, [pc, #56]	@ (800f830 <Get_SerialNum+0x48>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f7fa:	4b0e      	ldr	r3, [pc, #56]	@ (800f834 <Get_SerialNum+0x4c>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f800:	68fa      	ldr	r2, [r7, #12]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4413      	add	r3, r2
 800f806:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d009      	beq.n	800f822 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f80e:	2208      	movs	r2, #8
 800f810:	4909      	ldr	r1, [pc, #36]	@ (800f838 <Get_SerialNum+0x50>)
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f000 f814 	bl	800f840 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f818:	2204      	movs	r2, #4
 800f81a:	4908      	ldr	r1, [pc, #32]	@ (800f83c <Get_SerialNum+0x54>)
 800f81c:	68b8      	ldr	r0, [r7, #8]
 800f81e:	f000 f80f 	bl	800f840 <IntToUnicode>
  }
}
 800f822:	bf00      	nop
 800f824:	3710      	adds	r7, #16
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	1fff7a10 	.word	0x1fff7a10
 800f830:	1fff7a14 	.word	0x1fff7a14
 800f834:	1fff7a18 	.word	0x1fff7a18
 800f838:	200000e2 	.word	0x200000e2
 800f83c:	200000f2 	.word	0x200000f2

0800f840 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f840:	b480      	push	{r7}
 800f842:	b087      	sub	sp, #28
 800f844:	af00      	add	r7, sp, #0
 800f846:	60f8      	str	r0, [r7, #12]
 800f848:	60b9      	str	r1, [r7, #8]
 800f84a:	4613      	mov	r3, r2
 800f84c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f84e:	2300      	movs	r3, #0
 800f850:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f852:	2300      	movs	r3, #0
 800f854:	75fb      	strb	r3, [r7, #23]
 800f856:	e027      	b.n	800f8a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	0f1b      	lsrs	r3, r3, #28
 800f85c:	2b09      	cmp	r3, #9
 800f85e:	d80b      	bhi.n	800f878 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	0f1b      	lsrs	r3, r3, #28
 800f864:	b2da      	uxtb	r2, r3
 800f866:	7dfb      	ldrb	r3, [r7, #23]
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	4619      	mov	r1, r3
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	440b      	add	r3, r1
 800f870:	3230      	adds	r2, #48	@ 0x30
 800f872:	b2d2      	uxtb	r2, r2
 800f874:	701a      	strb	r2, [r3, #0]
 800f876:	e00a      	b.n	800f88e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	0f1b      	lsrs	r3, r3, #28
 800f87c:	b2da      	uxtb	r2, r3
 800f87e:	7dfb      	ldrb	r3, [r7, #23]
 800f880:	005b      	lsls	r3, r3, #1
 800f882:	4619      	mov	r1, r3
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	440b      	add	r3, r1
 800f888:	3237      	adds	r2, #55	@ 0x37
 800f88a:	b2d2      	uxtb	r2, r2
 800f88c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	011b      	lsls	r3, r3, #4
 800f892:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f894:	7dfb      	ldrb	r3, [r7, #23]
 800f896:	005b      	lsls	r3, r3, #1
 800f898:	3301      	adds	r3, #1
 800f89a:	68ba      	ldr	r2, [r7, #8]
 800f89c:	4413      	add	r3, r2
 800f89e:	2200      	movs	r2, #0
 800f8a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f8a2:	7dfb      	ldrb	r3, [r7, #23]
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	75fb      	strb	r3, [r7, #23]
 800f8a8:	7dfa      	ldrb	r2, [r7, #23]
 800f8aa:	79fb      	ldrb	r3, [r7, #7]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d3d3      	bcc.n	800f858 <IntToUnicode+0x18>
  }
}
 800f8b0:	bf00      	nop
 800f8b2:	bf00      	nop
 800f8b4:	371c      	adds	r7, #28
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
	...

0800f8c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b0a0      	sub	sp, #128	@ 0x80
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f8c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	601a      	str	r2, [r3, #0]
 800f8d0:	605a      	str	r2, [r3, #4]
 800f8d2:	609a      	str	r2, [r3, #8]
 800f8d4:	60da      	str	r2, [r3, #12]
 800f8d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f8d8:	f107 0310 	add.w	r3, r7, #16
 800f8dc:	225c      	movs	r2, #92	@ 0x5c
 800f8de:	2100      	movs	r1, #0
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f000 fbed 	bl	80100c0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f8ee:	d161      	bne.n	800f9b4 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f8f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f8f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 800f8f6:	2308      	movs	r3, #8
 800f8f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800f8fa:	23c0      	movs	r3, #192	@ 0xc0
 800f8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800f8fe:	2302      	movs	r3, #2
 800f900:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800f902:	2304      	movs	r3, #4
 800f904:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800f906:	2301      	movs	r3, #1
 800f908:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800f90a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f90e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f910:	f107 0310 	add.w	r3, r7, #16
 800f914:	4618      	mov	r0, r3
 800f916:	f7f9 fac9 	bl	8008eac <HAL_RCCEx_PeriphCLKConfig>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d001      	beq.n	800f924 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 800f920:	f7f1 fc6c 	bl	80011fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f924:	2300      	movs	r3, #0
 800f926:	60fb      	str	r3, [r7, #12]
 800f928:	4b24      	ldr	r3, [pc, #144]	@ (800f9bc <HAL_PCD_MspInit+0xfc>)
 800f92a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f92c:	4a23      	ldr	r2, [pc, #140]	@ (800f9bc <HAL_PCD_MspInit+0xfc>)
 800f92e:	f043 0301 	orr.w	r3, r3, #1
 800f932:	6313      	str	r3, [r2, #48]	@ 0x30
 800f934:	4b21      	ldr	r3, [pc, #132]	@ (800f9bc <HAL_PCD_MspInit+0xfc>)
 800f936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f938:	f003 0301 	and.w	r3, r3, #1
 800f93c:	60fb      	str	r3, [r7, #12]
 800f93e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f940:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f944:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f946:	2300      	movs	r3, #0
 800f948:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f94a:	2300      	movs	r3, #0
 800f94c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f94e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800f952:	4619      	mov	r1, r3
 800f954:	481a      	ldr	r0, [pc, #104]	@ (800f9c0 <HAL_PCD_MspInit+0x100>)
 800f956:	f7f6 fda3 	bl	80064a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f95a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f95e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f960:	2302      	movs	r3, #2
 800f962:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f964:	2300      	movs	r3, #0
 800f966:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f968:	2303      	movs	r3, #3
 800f96a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f96c:	230a      	movs	r3, #10
 800f96e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f970:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800f974:	4619      	mov	r1, r3
 800f976:	4812      	ldr	r0, [pc, #72]	@ (800f9c0 <HAL_PCD_MspInit+0x100>)
 800f978:	f7f6 fd92 	bl	80064a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f97c:	4b0f      	ldr	r3, [pc, #60]	@ (800f9bc <HAL_PCD_MspInit+0xfc>)
 800f97e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f980:	4a0e      	ldr	r2, [pc, #56]	@ (800f9bc <HAL_PCD_MspInit+0xfc>)
 800f982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f986:	6353      	str	r3, [r2, #52]	@ 0x34
 800f988:	2300      	movs	r3, #0
 800f98a:	60bb      	str	r3, [r7, #8]
 800f98c:	4b0b      	ldr	r3, [pc, #44]	@ (800f9bc <HAL_PCD_MspInit+0xfc>)
 800f98e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f990:	4a0a      	ldr	r2, [pc, #40]	@ (800f9bc <HAL_PCD_MspInit+0xfc>)
 800f992:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f996:	6453      	str	r3, [r2, #68]	@ 0x44
 800f998:	4b08      	ldr	r3, [pc, #32]	@ (800f9bc <HAL_PCD_MspInit+0xfc>)
 800f99a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f99c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f9a0:	60bb      	str	r3, [r7, #8]
 800f9a2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	2043      	movs	r0, #67	@ 0x43
 800f9aa:	f7f6 f9a8 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f9ae:	2043      	movs	r0, #67	@ 0x43
 800f9b0:	f7f6 f9c1 	bl	8005d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f9b4:	bf00      	nop
 800f9b6:	3780      	adds	r7, #128	@ 0x80
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	40023800 	.word	0x40023800
 800f9c0:	40020000 	.word	0x40020000

0800f9c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800f9d8:	4619      	mov	r1, r3
 800f9da:	4610      	mov	r0, r2
 800f9dc:	f7fe fb09 	bl	800dff2 <USBD_LL_SetupStage>
}
 800f9e0:	bf00      	nop
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800f9fa:	78fa      	ldrb	r2, [r7, #3]
 800f9fc:	6879      	ldr	r1, [r7, #4]
 800f9fe:	4613      	mov	r3, r2
 800fa00:	00db      	lsls	r3, r3, #3
 800fa02:	4413      	add	r3, r2
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	440b      	add	r3, r1
 800fa08:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	78fb      	ldrb	r3, [r7, #3]
 800fa10:	4619      	mov	r1, r3
 800fa12:	f7fe fb43 	bl	800e09c <USBD_LL_DataOutStage>
}
 800fa16:	bf00      	nop
 800fa18:	3708      	adds	r7, #8
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}

0800fa1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa1e:	b580      	push	{r7, lr}
 800fa20:	b082      	sub	sp, #8
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
 800fa26:	460b      	mov	r3, r1
 800fa28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800fa30:	78fa      	ldrb	r2, [r7, #3]
 800fa32:	6879      	ldr	r1, [r7, #4]
 800fa34:	4613      	mov	r3, r2
 800fa36:	00db      	lsls	r3, r3, #3
 800fa38:	4413      	add	r3, r2
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	440b      	add	r3, r1
 800fa3e:	334c      	adds	r3, #76	@ 0x4c
 800fa40:	681a      	ldr	r2, [r3, #0]
 800fa42:	78fb      	ldrb	r3, [r7, #3]
 800fa44:	4619      	mov	r1, r3
 800fa46:	f7fe fbdc 	bl	800e202 <USBD_LL_DataInStage>
}
 800fa4a:	bf00      	nop
 800fa4c:	3708      	adds	r7, #8
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b082      	sub	sp, #8
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7fe fd10 	bl	800e486 <USBD_LL_SOF>
}
 800fa66:	bf00      	nop
 800fa68:	3708      	adds	r7, #8
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}

0800fa6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa6e:	b580      	push	{r7, lr}
 800fa70:	b084      	sub	sp, #16
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fa76:	2301      	movs	r3, #1
 800fa78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d102      	bne.n	800fa88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fa82:	2300      	movs	r3, #0
 800fa84:	73fb      	strb	r3, [r7, #15]
 800fa86:	e008      	b.n	800fa9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	2b02      	cmp	r3, #2
 800fa8e:	d102      	bne.n	800fa96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fa90:	2301      	movs	r3, #1
 800fa92:	73fb      	strb	r3, [r7, #15]
 800fa94:	e001      	b.n	800fa9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fa96:	f7f1 fbb1 	bl	80011fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800faa0:	7bfa      	ldrb	r2, [r7, #15]
 800faa2:	4611      	mov	r1, r2
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7fe fcb0 	bl	800e40a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7fe fc58 	bl	800e366 <USBD_LL_Reset>
}
 800fab6:	bf00      	nop
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
	...

0800fac0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800face:	4618      	mov	r0, r3
 800fad0:	f7fe fcab 	bl	800e42a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	687a      	ldr	r2, [r7, #4]
 800fae0:	6812      	ldr	r2, [r2, #0]
 800fae2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fae6:	f043 0301 	orr.w	r3, r3, #1
 800faea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6a1b      	ldr	r3, [r3, #32]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d005      	beq.n	800fb00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800faf4:	4b04      	ldr	r3, [pc, #16]	@ (800fb08 <HAL_PCD_SuspendCallback+0x48>)
 800faf6:	691b      	ldr	r3, [r3, #16]
 800faf8:	4a03      	ldr	r2, [pc, #12]	@ (800fb08 <HAL_PCD_SuspendCallback+0x48>)
 800fafa:	f043 0306 	orr.w	r3, r3, #6
 800fafe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fb00:	bf00      	nop
 800fb02:	3708      	adds	r7, #8
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	e000ed00 	.word	0xe000ed00

0800fb0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fe fc9b 	bl	800e456 <USBD_LL_Resume>
}
 800fb20:	bf00      	nop
 800fb22:	3708      	adds	r7, #8
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	460b      	mov	r3, r1
 800fb32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fb3a:	78fa      	ldrb	r2, [r7, #3]
 800fb3c:	4611      	mov	r1, r2
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fe fcf3 	bl	800e52a <USBD_LL_IsoOUTIncomplete>
}
 800fb44:	bf00      	nop
 800fb46:	3708      	adds	r7, #8
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	460b      	mov	r3, r1
 800fb56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fb5e:	78fa      	ldrb	r2, [r7, #3]
 800fb60:	4611      	mov	r1, r2
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fe fcaf 	bl	800e4c6 <USBD_LL_IsoINIncomplete>
}
 800fb68:	bf00      	nop
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fe fd05 	bl	800e58e <USBD_LL_DevConnected>
}
 800fb84:	bf00      	nop
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7fe fd02 	bl	800e5a4 <USBD_LL_DevDisconnected>
}
 800fba0:	bf00      	nop
 800fba2:	3708      	adds	r7, #8
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}

0800fba8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d13c      	bne.n	800fc32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fbb8:	4a20      	ldr	r2, [pc, #128]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	4a1e      	ldr	r2, [pc, #120]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fbc4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fbc8:	4b1c      	ldr	r3, [pc, #112]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fbca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800fbce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800fbd0:	4b1a      	ldr	r3, [pc, #104]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fbd2:	2206      	movs	r2, #6
 800fbd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fbd6:	4b19      	ldr	r3, [pc, #100]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fbd8:	2202      	movs	r2, #2
 800fbda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fbdc:	4b17      	ldr	r3, [pc, #92]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fbde:	2200      	movs	r2, #0
 800fbe0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fbe2:	4b16      	ldr	r3, [pc, #88]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fbe4:	2202      	movs	r2, #2
 800fbe6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fbe8:	4b14      	ldr	r3, [pc, #80]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fbee:	4b13      	ldr	r3, [pc, #76]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fbf4:	4b11      	ldr	r3, [pc, #68]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800fbfa:	4b10      	ldr	r3, [pc, #64]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fc00:	4b0e      	ldr	r3, [pc, #56]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fc02:	2200      	movs	r2, #0
 800fc04:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fc06:	480d      	ldr	r0, [pc, #52]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fc08:	f7f7 fd24 	bl	8007654 <HAL_PCD_Init>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d001      	beq.n	800fc16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fc12:	f7f1 faf3 	bl	80011fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fc16:	2180      	movs	r1, #128	@ 0x80
 800fc18:	4808      	ldr	r0, [pc, #32]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fc1a:	f7f8 ffb0 	bl	8008b7e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fc1e:	2240      	movs	r2, #64	@ 0x40
 800fc20:	2100      	movs	r1, #0
 800fc22:	4806      	ldr	r0, [pc, #24]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fc24:	f7f8 ff64 	bl	8008af0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fc28:	2280      	movs	r2, #128	@ 0x80
 800fc2a:	2101      	movs	r1, #1
 800fc2c:	4803      	ldr	r0, [pc, #12]	@ (800fc3c <USBD_LL_Init+0x94>)
 800fc2e:	f7f8 ff5f 	bl	8008af0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fc32:	2300      	movs	r3, #0
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3708      	adds	r7, #8
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	20001e84 	.word	0x20001e84

0800fc40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b084      	sub	sp, #16
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7f7 fe20 	bl	800789c <HAL_PCD_Start>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc60:	7bfb      	ldrb	r3, [r7, #15]
 800fc62:	4618      	mov	r0, r3
 800fc64:	f000 f942 	bl	800feec <USBD_Get_USB_Status>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b084      	sub	sp, #16
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
 800fc7e:	4608      	mov	r0, r1
 800fc80:	4611      	mov	r1, r2
 800fc82:	461a      	mov	r2, r3
 800fc84:	4603      	mov	r3, r0
 800fc86:	70fb      	strb	r3, [r7, #3]
 800fc88:	460b      	mov	r3, r1
 800fc8a:	70bb      	strb	r3, [r7, #2]
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc90:	2300      	movs	r3, #0
 800fc92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc94:	2300      	movs	r3, #0
 800fc96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fc9e:	78bb      	ldrb	r3, [r7, #2]
 800fca0:	883a      	ldrh	r2, [r7, #0]
 800fca2:	78f9      	ldrb	r1, [r7, #3]
 800fca4:	f7f8 fb1e 	bl	80082e4 <HAL_PCD_EP_Open>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcac:	7bfb      	ldrb	r3, [r7, #15]
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f000 f91c 	bl	800feec <USBD_Get_USB_Status>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b084      	sub	sp, #16
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
 800fcca:	460b      	mov	r3, r1
 800fccc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fcdc:	78fa      	ldrb	r2, [r7, #3]
 800fcde:	4611      	mov	r1, r2
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7f8 fb67 	bl	80083b4 <HAL_PCD_EP_Close>
 800fce6:	4603      	mov	r3, r0
 800fce8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcea:	7bfb      	ldrb	r3, [r7, #15]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f000 f8fd 	bl	800feec <USBD_Get_USB_Status>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3710      	adds	r7, #16
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b084      	sub	sp, #16
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	460b      	mov	r3, r1
 800fd0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd10:	2300      	movs	r3, #0
 800fd12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fd1a:	78fa      	ldrb	r2, [r7, #3]
 800fd1c:	4611      	mov	r1, r2
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7f8 fc3f 	bl	80085a2 <HAL_PCD_EP_SetStall>
 800fd24:	4603      	mov	r3, r0
 800fd26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd28:	7bfb      	ldrb	r3, [r7, #15]
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f000 f8de 	bl	800feec <USBD_Get_USB_Status>
 800fd30:	4603      	mov	r3, r0
 800fd32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd34:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3710      	adds	r7, #16
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b084      	sub	sp, #16
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
 800fd46:	460b      	mov	r3, r1
 800fd48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fd58:	78fa      	ldrb	r2, [r7, #3]
 800fd5a:	4611      	mov	r1, r2
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7f8 fc84 	bl	800866a <HAL_PCD_EP_ClrStall>
 800fd62:	4603      	mov	r3, r0
 800fd64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd66:	7bfb      	ldrb	r3, [r7, #15]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f000 f8bf 	bl	800feec <USBD_Get_USB_Status>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd72:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3710      	adds	r7, #16
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}

0800fd7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b085      	sub	sp, #20
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	460b      	mov	r3, r1
 800fd86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fd8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fd90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	da0b      	bge.n	800fdb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fd98:	78fb      	ldrb	r3, [r7, #3]
 800fd9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fd9e:	68f9      	ldr	r1, [r7, #12]
 800fda0:	4613      	mov	r3, r2
 800fda2:	00db      	lsls	r3, r3, #3
 800fda4:	4413      	add	r3, r2
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	440b      	add	r3, r1
 800fdaa:	333e      	adds	r3, #62	@ 0x3e
 800fdac:	781b      	ldrb	r3, [r3, #0]
 800fdae:	e00b      	b.n	800fdc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fdb0:	78fb      	ldrb	r3, [r7, #3]
 800fdb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fdb6:	68f9      	ldr	r1, [r7, #12]
 800fdb8:	4613      	mov	r3, r2
 800fdba:	00db      	lsls	r3, r3, #3
 800fdbc:	4413      	add	r3, r2
 800fdbe:	009b      	lsls	r3, r3, #2
 800fdc0:	440b      	add	r3, r1
 800fdc2:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800fdc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3714      	adds	r7, #20
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr

0800fdd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b084      	sub	sp, #16
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	460b      	mov	r3, r1
 800fdde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fde0:	2300      	movs	r3, #0
 800fde2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fde4:	2300      	movs	r3, #0
 800fde6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fdee:	78fa      	ldrb	r2, [r7, #3]
 800fdf0:	4611      	mov	r1, r2
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7f8 fa51 	bl	800829a <HAL_PCD_SetAddress>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdfc:	7bfb      	ldrb	r3, [r7, #15]
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f000 f874 	bl	800feec <USBD_Get_USB_Status>
 800fe04:	4603      	mov	r3, r0
 800fe06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe08:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3710      	adds	r7, #16
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b086      	sub	sp, #24
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	60f8      	str	r0, [r7, #12]
 800fe1a:	607a      	str	r2, [r7, #4]
 800fe1c:	603b      	str	r3, [r7, #0]
 800fe1e:	460b      	mov	r3, r1
 800fe20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe22:	2300      	movs	r3, #0
 800fe24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe26:	2300      	movs	r3, #0
 800fe28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fe30:	7af9      	ldrb	r1, [r7, #11]
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	f7f8 fb6a 	bl	800850e <HAL_PCD_EP_Transmit>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe3e:	7dfb      	ldrb	r3, [r7, #23]
 800fe40:	4618      	mov	r0, r3
 800fe42:	f000 f853 	bl	800feec <USBD_Get_USB_Status>
 800fe46:	4603      	mov	r3, r0
 800fe48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3718      	adds	r7, #24
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b086      	sub	sp, #24
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	60f8      	str	r0, [r7, #12]
 800fe5c:	607a      	str	r2, [r7, #4]
 800fe5e:	603b      	str	r3, [r7, #0]
 800fe60:	460b      	mov	r3, r1
 800fe62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe64:	2300      	movs	r3, #0
 800fe66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fe72:	7af9      	ldrb	r1, [r7, #11]
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	f7f8 fae6 	bl	8008448 <HAL_PCD_EP_Receive>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe80:	7dfb      	ldrb	r3, [r7, #23]
 800fe82:	4618      	mov	r0, r3
 800fe84:	f000 f832 	bl	800feec <USBD_Get_USB_Status>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3718      	adds	r7, #24
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe96:	b580      	push	{r7, lr}
 800fe98:	b082      	sub	sp, #8
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
 800fe9e:	460b      	mov	r3, r1
 800fea0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fea8:	78fa      	ldrb	r2, [r7, #3]
 800feaa:	4611      	mov	r1, r2
 800feac:	4618      	mov	r0, r3
 800feae:	f7f8 fb16 	bl	80084de <HAL_PCD_EP_GetRxCount>
 800feb2:	4603      	mov	r3, r0
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3708      	adds	r7, #8
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}

0800febc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fec4:	4b03      	ldr	r3, [pc, #12]	@ (800fed4 <USBD_static_malloc+0x18>)
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	370c      	adds	r7, #12
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr
 800fed2:	bf00      	nop
 800fed4:	20002390 	.word	0x20002390

0800fed8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]

}
 800fee0:	bf00      	nop
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	4603      	mov	r3, r0
 800fef4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fef6:	2300      	movs	r3, #0
 800fef8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fefa:	79fb      	ldrb	r3, [r7, #7]
 800fefc:	2b03      	cmp	r3, #3
 800fefe:	d817      	bhi.n	800ff30 <USBD_Get_USB_Status+0x44>
 800ff00:	a201      	add	r2, pc, #4	@ (adr r2, 800ff08 <USBD_Get_USB_Status+0x1c>)
 800ff02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff06:	bf00      	nop
 800ff08:	0800ff19 	.word	0x0800ff19
 800ff0c:	0800ff1f 	.word	0x0800ff1f
 800ff10:	0800ff25 	.word	0x0800ff25
 800ff14:	0800ff2b 	.word	0x0800ff2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ff1c:	e00b      	b.n	800ff36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ff1e:	2303      	movs	r3, #3
 800ff20:	73fb      	strb	r3, [r7, #15]
    break;
 800ff22:	e008      	b.n	800ff36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ff24:	2301      	movs	r3, #1
 800ff26:	73fb      	strb	r3, [r7, #15]
    break;
 800ff28:	e005      	b.n	800ff36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ff2a:	2303      	movs	r3, #3
 800ff2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ff2e:	e002      	b.n	800ff36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ff30:	2303      	movs	r3, #3
 800ff32:	73fb      	strb	r3, [r7, #15]
    break;
 800ff34:	bf00      	nop
  }
  return usb_status;
 800ff36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3714      	adds	r7, #20
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <malloc>:
 800ff44:	4b02      	ldr	r3, [pc, #8]	@ (800ff50 <malloc+0xc>)
 800ff46:	4601      	mov	r1, r0
 800ff48:	6818      	ldr	r0, [r3, #0]
 800ff4a:	f000 b82d 	b.w	800ffa8 <_malloc_r>
 800ff4e:	bf00      	nop
 800ff50:	200000fc 	.word	0x200000fc

0800ff54 <free>:
 800ff54:	4b02      	ldr	r3, [pc, #8]	@ (800ff60 <free+0xc>)
 800ff56:	4601      	mov	r1, r0
 800ff58:	6818      	ldr	r0, [r3, #0]
 800ff5a:	f000 b8f5 	b.w	8010148 <_free_r>
 800ff5e:	bf00      	nop
 800ff60:	200000fc 	.word	0x200000fc

0800ff64 <sbrk_aligned>:
 800ff64:	b570      	push	{r4, r5, r6, lr}
 800ff66:	4e0f      	ldr	r6, [pc, #60]	@ (800ffa4 <sbrk_aligned+0x40>)
 800ff68:	460c      	mov	r4, r1
 800ff6a:	6831      	ldr	r1, [r6, #0]
 800ff6c:	4605      	mov	r5, r0
 800ff6e:	b911      	cbnz	r1, 800ff76 <sbrk_aligned+0x12>
 800ff70:	f000 f8ae 	bl	80100d0 <_sbrk_r>
 800ff74:	6030      	str	r0, [r6, #0]
 800ff76:	4621      	mov	r1, r4
 800ff78:	4628      	mov	r0, r5
 800ff7a:	f000 f8a9 	bl	80100d0 <_sbrk_r>
 800ff7e:	1c43      	adds	r3, r0, #1
 800ff80:	d103      	bne.n	800ff8a <sbrk_aligned+0x26>
 800ff82:	f04f 34ff 	mov.w	r4, #4294967295
 800ff86:	4620      	mov	r0, r4
 800ff88:	bd70      	pop	{r4, r5, r6, pc}
 800ff8a:	1cc4      	adds	r4, r0, #3
 800ff8c:	f024 0403 	bic.w	r4, r4, #3
 800ff90:	42a0      	cmp	r0, r4
 800ff92:	d0f8      	beq.n	800ff86 <sbrk_aligned+0x22>
 800ff94:	1a21      	subs	r1, r4, r0
 800ff96:	4628      	mov	r0, r5
 800ff98:	f000 f89a 	bl	80100d0 <_sbrk_r>
 800ff9c:	3001      	adds	r0, #1
 800ff9e:	d1f2      	bne.n	800ff86 <sbrk_aligned+0x22>
 800ffa0:	e7ef      	b.n	800ff82 <sbrk_aligned+0x1e>
 800ffa2:	bf00      	nop
 800ffa4:	200025b0 	.word	0x200025b0

0800ffa8 <_malloc_r>:
 800ffa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffac:	1ccd      	adds	r5, r1, #3
 800ffae:	f025 0503 	bic.w	r5, r5, #3
 800ffb2:	3508      	adds	r5, #8
 800ffb4:	2d0c      	cmp	r5, #12
 800ffb6:	bf38      	it	cc
 800ffb8:	250c      	movcc	r5, #12
 800ffba:	2d00      	cmp	r5, #0
 800ffbc:	4606      	mov	r6, r0
 800ffbe:	db01      	blt.n	800ffc4 <_malloc_r+0x1c>
 800ffc0:	42a9      	cmp	r1, r5
 800ffc2:	d904      	bls.n	800ffce <_malloc_r+0x26>
 800ffc4:	230c      	movs	r3, #12
 800ffc6:	6033      	str	r3, [r6, #0]
 800ffc8:	2000      	movs	r0, #0
 800ffca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80100a4 <_malloc_r+0xfc>
 800ffd2:	f000 f869 	bl	80100a8 <__malloc_lock>
 800ffd6:	f8d8 3000 	ldr.w	r3, [r8]
 800ffda:	461c      	mov	r4, r3
 800ffdc:	bb44      	cbnz	r4, 8010030 <_malloc_r+0x88>
 800ffde:	4629      	mov	r1, r5
 800ffe0:	4630      	mov	r0, r6
 800ffe2:	f7ff ffbf 	bl	800ff64 <sbrk_aligned>
 800ffe6:	1c43      	adds	r3, r0, #1
 800ffe8:	4604      	mov	r4, r0
 800ffea:	d158      	bne.n	801009e <_malloc_r+0xf6>
 800ffec:	f8d8 4000 	ldr.w	r4, [r8]
 800fff0:	4627      	mov	r7, r4
 800fff2:	2f00      	cmp	r7, #0
 800fff4:	d143      	bne.n	801007e <_malloc_r+0xd6>
 800fff6:	2c00      	cmp	r4, #0
 800fff8:	d04b      	beq.n	8010092 <_malloc_r+0xea>
 800fffa:	6823      	ldr	r3, [r4, #0]
 800fffc:	4639      	mov	r1, r7
 800fffe:	4630      	mov	r0, r6
 8010000:	eb04 0903 	add.w	r9, r4, r3
 8010004:	f000 f864 	bl	80100d0 <_sbrk_r>
 8010008:	4581      	cmp	r9, r0
 801000a:	d142      	bne.n	8010092 <_malloc_r+0xea>
 801000c:	6821      	ldr	r1, [r4, #0]
 801000e:	1a6d      	subs	r5, r5, r1
 8010010:	4629      	mov	r1, r5
 8010012:	4630      	mov	r0, r6
 8010014:	f7ff ffa6 	bl	800ff64 <sbrk_aligned>
 8010018:	3001      	adds	r0, #1
 801001a:	d03a      	beq.n	8010092 <_malloc_r+0xea>
 801001c:	6823      	ldr	r3, [r4, #0]
 801001e:	442b      	add	r3, r5
 8010020:	6023      	str	r3, [r4, #0]
 8010022:	f8d8 3000 	ldr.w	r3, [r8]
 8010026:	685a      	ldr	r2, [r3, #4]
 8010028:	bb62      	cbnz	r2, 8010084 <_malloc_r+0xdc>
 801002a:	f8c8 7000 	str.w	r7, [r8]
 801002e:	e00f      	b.n	8010050 <_malloc_r+0xa8>
 8010030:	6822      	ldr	r2, [r4, #0]
 8010032:	1b52      	subs	r2, r2, r5
 8010034:	d420      	bmi.n	8010078 <_malloc_r+0xd0>
 8010036:	2a0b      	cmp	r2, #11
 8010038:	d917      	bls.n	801006a <_malloc_r+0xc2>
 801003a:	1961      	adds	r1, r4, r5
 801003c:	42a3      	cmp	r3, r4
 801003e:	6025      	str	r5, [r4, #0]
 8010040:	bf18      	it	ne
 8010042:	6059      	strne	r1, [r3, #4]
 8010044:	6863      	ldr	r3, [r4, #4]
 8010046:	bf08      	it	eq
 8010048:	f8c8 1000 	streq.w	r1, [r8]
 801004c:	5162      	str	r2, [r4, r5]
 801004e:	604b      	str	r3, [r1, #4]
 8010050:	4630      	mov	r0, r6
 8010052:	f000 f82f 	bl	80100b4 <__malloc_unlock>
 8010056:	f104 000b 	add.w	r0, r4, #11
 801005a:	1d23      	adds	r3, r4, #4
 801005c:	f020 0007 	bic.w	r0, r0, #7
 8010060:	1ac2      	subs	r2, r0, r3
 8010062:	bf1c      	itt	ne
 8010064:	1a1b      	subne	r3, r3, r0
 8010066:	50a3      	strne	r3, [r4, r2]
 8010068:	e7af      	b.n	800ffca <_malloc_r+0x22>
 801006a:	6862      	ldr	r2, [r4, #4]
 801006c:	42a3      	cmp	r3, r4
 801006e:	bf0c      	ite	eq
 8010070:	f8c8 2000 	streq.w	r2, [r8]
 8010074:	605a      	strne	r2, [r3, #4]
 8010076:	e7eb      	b.n	8010050 <_malloc_r+0xa8>
 8010078:	4623      	mov	r3, r4
 801007a:	6864      	ldr	r4, [r4, #4]
 801007c:	e7ae      	b.n	800ffdc <_malloc_r+0x34>
 801007e:	463c      	mov	r4, r7
 8010080:	687f      	ldr	r7, [r7, #4]
 8010082:	e7b6      	b.n	800fff2 <_malloc_r+0x4a>
 8010084:	461a      	mov	r2, r3
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	42a3      	cmp	r3, r4
 801008a:	d1fb      	bne.n	8010084 <_malloc_r+0xdc>
 801008c:	2300      	movs	r3, #0
 801008e:	6053      	str	r3, [r2, #4]
 8010090:	e7de      	b.n	8010050 <_malloc_r+0xa8>
 8010092:	230c      	movs	r3, #12
 8010094:	6033      	str	r3, [r6, #0]
 8010096:	4630      	mov	r0, r6
 8010098:	f000 f80c 	bl	80100b4 <__malloc_unlock>
 801009c:	e794      	b.n	800ffc8 <_malloc_r+0x20>
 801009e:	6005      	str	r5, [r0, #0]
 80100a0:	e7d6      	b.n	8010050 <_malloc_r+0xa8>
 80100a2:	bf00      	nop
 80100a4:	200025b4 	.word	0x200025b4

080100a8 <__malloc_lock>:
 80100a8:	4801      	ldr	r0, [pc, #4]	@ (80100b0 <__malloc_lock+0x8>)
 80100aa:	f000 b84b 	b.w	8010144 <__retarget_lock_acquire_recursive>
 80100ae:	bf00      	nop
 80100b0:	200026f4 	.word	0x200026f4

080100b4 <__malloc_unlock>:
 80100b4:	4801      	ldr	r0, [pc, #4]	@ (80100bc <__malloc_unlock+0x8>)
 80100b6:	f000 b846 	b.w	8010146 <__retarget_lock_release_recursive>
 80100ba:	bf00      	nop
 80100bc:	200026f4 	.word	0x200026f4

080100c0 <memset>:
 80100c0:	4402      	add	r2, r0
 80100c2:	4603      	mov	r3, r0
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d100      	bne.n	80100ca <memset+0xa>
 80100c8:	4770      	bx	lr
 80100ca:	f803 1b01 	strb.w	r1, [r3], #1
 80100ce:	e7f9      	b.n	80100c4 <memset+0x4>

080100d0 <_sbrk_r>:
 80100d0:	b538      	push	{r3, r4, r5, lr}
 80100d2:	4d06      	ldr	r5, [pc, #24]	@ (80100ec <_sbrk_r+0x1c>)
 80100d4:	2300      	movs	r3, #0
 80100d6:	4604      	mov	r4, r0
 80100d8:	4608      	mov	r0, r1
 80100da:	602b      	str	r3, [r5, #0]
 80100dc:	f7f4 f8e4 	bl	80042a8 <_sbrk>
 80100e0:	1c43      	adds	r3, r0, #1
 80100e2:	d102      	bne.n	80100ea <_sbrk_r+0x1a>
 80100e4:	682b      	ldr	r3, [r5, #0]
 80100e6:	b103      	cbz	r3, 80100ea <_sbrk_r+0x1a>
 80100e8:	6023      	str	r3, [r4, #0]
 80100ea:	bd38      	pop	{r3, r4, r5, pc}
 80100ec:	200026f0 	.word	0x200026f0

080100f0 <__errno>:
 80100f0:	4b01      	ldr	r3, [pc, #4]	@ (80100f8 <__errno+0x8>)
 80100f2:	6818      	ldr	r0, [r3, #0]
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop
 80100f8:	200000fc 	.word	0x200000fc

080100fc <__libc_init_array>:
 80100fc:	b570      	push	{r4, r5, r6, lr}
 80100fe:	4d0d      	ldr	r5, [pc, #52]	@ (8010134 <__libc_init_array+0x38>)
 8010100:	4c0d      	ldr	r4, [pc, #52]	@ (8010138 <__libc_init_array+0x3c>)
 8010102:	1b64      	subs	r4, r4, r5
 8010104:	10a4      	asrs	r4, r4, #2
 8010106:	2600      	movs	r6, #0
 8010108:	42a6      	cmp	r6, r4
 801010a:	d109      	bne.n	8010120 <__libc_init_array+0x24>
 801010c:	4d0b      	ldr	r5, [pc, #44]	@ (801013c <__libc_init_array+0x40>)
 801010e:	4c0c      	ldr	r4, [pc, #48]	@ (8010140 <__libc_init_array+0x44>)
 8010110:	f000 f864 	bl	80101dc <_init>
 8010114:	1b64      	subs	r4, r4, r5
 8010116:	10a4      	asrs	r4, r4, #2
 8010118:	2600      	movs	r6, #0
 801011a:	42a6      	cmp	r6, r4
 801011c:	d105      	bne.n	801012a <__libc_init_array+0x2e>
 801011e:	bd70      	pop	{r4, r5, r6, pc}
 8010120:	f855 3b04 	ldr.w	r3, [r5], #4
 8010124:	4798      	blx	r3
 8010126:	3601      	adds	r6, #1
 8010128:	e7ee      	b.n	8010108 <__libc_init_array+0xc>
 801012a:	f855 3b04 	ldr.w	r3, [r5], #4
 801012e:	4798      	blx	r3
 8010130:	3601      	adds	r6, #1
 8010132:	e7f2      	b.n	801011a <__libc_init_array+0x1e>
 8010134:	08010264 	.word	0x08010264
 8010138:	08010264 	.word	0x08010264
 801013c:	08010264 	.word	0x08010264
 8010140:	08010268 	.word	0x08010268

08010144 <__retarget_lock_acquire_recursive>:
 8010144:	4770      	bx	lr

08010146 <__retarget_lock_release_recursive>:
 8010146:	4770      	bx	lr

08010148 <_free_r>:
 8010148:	b538      	push	{r3, r4, r5, lr}
 801014a:	4605      	mov	r5, r0
 801014c:	2900      	cmp	r1, #0
 801014e:	d041      	beq.n	80101d4 <_free_r+0x8c>
 8010150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010154:	1f0c      	subs	r4, r1, #4
 8010156:	2b00      	cmp	r3, #0
 8010158:	bfb8      	it	lt
 801015a:	18e4      	addlt	r4, r4, r3
 801015c:	f7ff ffa4 	bl	80100a8 <__malloc_lock>
 8010160:	4a1d      	ldr	r2, [pc, #116]	@ (80101d8 <_free_r+0x90>)
 8010162:	6813      	ldr	r3, [r2, #0]
 8010164:	b933      	cbnz	r3, 8010174 <_free_r+0x2c>
 8010166:	6063      	str	r3, [r4, #4]
 8010168:	6014      	str	r4, [r2, #0]
 801016a:	4628      	mov	r0, r5
 801016c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010170:	f7ff bfa0 	b.w	80100b4 <__malloc_unlock>
 8010174:	42a3      	cmp	r3, r4
 8010176:	d908      	bls.n	801018a <_free_r+0x42>
 8010178:	6820      	ldr	r0, [r4, #0]
 801017a:	1821      	adds	r1, r4, r0
 801017c:	428b      	cmp	r3, r1
 801017e:	bf01      	itttt	eq
 8010180:	6819      	ldreq	r1, [r3, #0]
 8010182:	685b      	ldreq	r3, [r3, #4]
 8010184:	1809      	addeq	r1, r1, r0
 8010186:	6021      	streq	r1, [r4, #0]
 8010188:	e7ed      	b.n	8010166 <_free_r+0x1e>
 801018a:	461a      	mov	r2, r3
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	b10b      	cbz	r3, 8010194 <_free_r+0x4c>
 8010190:	42a3      	cmp	r3, r4
 8010192:	d9fa      	bls.n	801018a <_free_r+0x42>
 8010194:	6811      	ldr	r1, [r2, #0]
 8010196:	1850      	adds	r0, r2, r1
 8010198:	42a0      	cmp	r0, r4
 801019a:	d10b      	bne.n	80101b4 <_free_r+0x6c>
 801019c:	6820      	ldr	r0, [r4, #0]
 801019e:	4401      	add	r1, r0
 80101a0:	1850      	adds	r0, r2, r1
 80101a2:	4283      	cmp	r3, r0
 80101a4:	6011      	str	r1, [r2, #0]
 80101a6:	d1e0      	bne.n	801016a <_free_r+0x22>
 80101a8:	6818      	ldr	r0, [r3, #0]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	6053      	str	r3, [r2, #4]
 80101ae:	4408      	add	r0, r1
 80101b0:	6010      	str	r0, [r2, #0]
 80101b2:	e7da      	b.n	801016a <_free_r+0x22>
 80101b4:	d902      	bls.n	80101bc <_free_r+0x74>
 80101b6:	230c      	movs	r3, #12
 80101b8:	602b      	str	r3, [r5, #0]
 80101ba:	e7d6      	b.n	801016a <_free_r+0x22>
 80101bc:	6820      	ldr	r0, [r4, #0]
 80101be:	1821      	adds	r1, r4, r0
 80101c0:	428b      	cmp	r3, r1
 80101c2:	bf04      	itt	eq
 80101c4:	6819      	ldreq	r1, [r3, #0]
 80101c6:	685b      	ldreq	r3, [r3, #4]
 80101c8:	6063      	str	r3, [r4, #4]
 80101ca:	bf04      	itt	eq
 80101cc:	1809      	addeq	r1, r1, r0
 80101ce:	6021      	streq	r1, [r4, #0]
 80101d0:	6054      	str	r4, [r2, #4]
 80101d2:	e7ca      	b.n	801016a <_free_r+0x22>
 80101d4:	bd38      	pop	{r3, r4, r5, pc}
 80101d6:	bf00      	nop
 80101d8:	200025b4 	.word	0x200025b4

080101dc <_init>:
 80101dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101de:	bf00      	nop
 80101e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101e2:	bc08      	pop	{r3}
 80101e4:	469e      	mov	lr, r3
 80101e6:	4770      	bx	lr

080101e8 <_fini>:
 80101e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ea:	bf00      	nop
 80101ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101ee:	bc08      	pop	{r3}
 80101f0:	469e      	mov	lr, r3
 80101f2:	4770      	bx	lr
