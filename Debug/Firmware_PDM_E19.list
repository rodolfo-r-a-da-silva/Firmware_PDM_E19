
Firmware_PDM_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb20  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800fce4  0800fce4  0001fce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd4c  0800fd4c  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd4c  0800fd4c  0001fd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd54  0800fd54  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd54  0800fd54  0001fd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd58  0800fd58  0001fd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800fd5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002450  20000160  0800febc  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 0000c000  200025b0  0800febc  000225b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002266e  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e1f  00000000  00000000  000427fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d8  00000000  00000000  00047620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a0  00000000  00000000  00048ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029507  00000000  00000000  0004a798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024895  00000000  00000000  00073c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6be4  00000000  00000000  00098534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017f118  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d20  00000000  00000000  0017f168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000160 	.word	0x20000160
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800fccc 	.word	0x0800fccc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000164 	.word	0x20000164
 8000200:	0800fccc 	.word	0x0800fccc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f003 fdd0 	bl	80040b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f874 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fd62 	bl	8000fdc <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 fd0a 	bl	8000f30 <MX_DMA_Init>
  MX_ADC1_Init();
 800051c:	f000 f8e0 	bl	80006e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000520:	f000 f96a 	bl	80007f8 <MX_ADC2_Init>
  MX_TIM7_Init();
 8000524:	f000 fc2e 	bl	8000d84 <MX_TIM7_Init>
  MX_CAN1_Init();
 8000528:	f000 f9f0 	bl	800090c <MX_CAN1_Init>
  MX_TIM1_Init();
 800052c:	f000 fa66 	bl	80009fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000530:	f000 fb04 	bl	8000b3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000534:	f000 fb78 	bl	8000c28 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000538:	f000 fc58 	bl	8000dec <MX_TIM8_Init>
  MX_I2C1_Init();
 800053c:	f000 fa30 	bl	80009a0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000540:	f00e fd18 	bl	800ef74 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000544:	f000 fa18 	bl	8000978 <MX_CRC_Init>
  MX_TIM6_Init();
 8000548:	f000 fbe6 	bl	8000d18 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  PDM_Init(&hcan1, &hi2c1);
 800054c:	4922      	ldr	r1, [pc, #136]	; (80005d8 <main+0xd0>)
 800054e:	4823      	ldr	r0, [pc, #140]	; (80005dc <main+0xd4>)
 8000550:	f000 feee 	bl	8001330 <PDM_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Convert ADC values to data channels
	  if(flagReading[1] == Data_Read_Ready)
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <main+0xd8>)
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d102      	bne.n	8000562 <main+0x5a>
		  PDM_Data_Conversion(&htim6);
 800055c:	4821      	ldr	r0, [pc, #132]	; (80005e4 <main+0xdc>)
 800055e:	f002 fdc9 	bl	80030f4 <PDM_Data_Conversion>

	  //Transmit 10 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg10Hz >= DATA_FREQ_10HZ)
 8000562:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <main+0xe0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800056a:	d306      	bcc.n	800057a <main+0x72>
	  {
		  accMsg10Hz = 0;
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <main+0xe0>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_10Hz);
 8000572:	2101      	movs	r1, #1
 8000574:	4819      	ldr	r0, [pc, #100]	; (80005dc <main+0xd4>)
 8000576:	f000 fe95 	bl	80012a4 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 25 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg25Hz >= DATA_FREQ_25HZ)
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <main+0xe4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000582:	d306      	bcc.n	8000592 <main+0x8a>
	  {
		  accMsg25Hz = 0;
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <main+0xe4>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_25Hz);
 800058a:	2102      	movs	r1, #2
 800058c:	4813      	ldr	r0, [pc, #76]	; (80005dc <main+0xd4>)
 800058e:	f000 fe89 	bl	80012a4 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 50 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg50Hz >= DATA_FREQ_50HZ)
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <main+0xe8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2bc7      	cmp	r3, #199	; 0xc7
 8000598:	d906      	bls.n	80005a8 <main+0xa0>
	  {
		  accMsg50Hz = 0;
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <main+0xe8>)
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_50Hz);
 80005a0:	2103      	movs	r1, #3
 80005a2:	480e      	ldr	r0, [pc, #56]	; (80005dc <main+0xd4>)
 80005a4:	f000 fe7e 	bl	80012a4 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 80 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg80Hz >= DATA_FREQ_80HZ)
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <main+0xec>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b7c      	cmp	r3, #124	; 0x7c
 80005ae:	d906      	bls.n	80005be <main+0xb6>
	  {
		  accMsg80Hz = 0;
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <main+0xec>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_80Hz);
 80005b6:	2104      	movs	r1, #4
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <main+0xd4>)
 80005ba:	f000 fe73 	bl	80012a4 <PDM_CAN_Transmit_Data>
	  }

	  //Transmit 100 Hz data channels via CAN bus if accumulator is above time threshold
	  if(accMsg100Hz >= DATA_FREQ_100HZ)
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <main+0xf0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b63      	cmp	r3, #99	; 0x63
 80005c4:	d9c6      	bls.n	8000554 <main+0x4c>
	  {
		  accMsg100Hz = 0;
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <main+0xf0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
		  PDM_CAN_Transmit_Data(&hcan1, Data_Freq_100Hz);
 80005cc:	2105      	movs	r1, #5
 80005ce:	4803      	ldr	r0, [pc, #12]	; (80005dc <main+0xd4>)
 80005d0:	f000 fe68 	bl	80012a4 <PDM_CAN_Transmit_Data>
	  if(flagReading[1] == Data_Read_Ready)
 80005d4:	e7be      	b.n	8000554 <main+0x4c>
 80005d6:	bf00      	nop
 80005d8:	200002fc 	.word	0x200002fc
 80005dc:	200002cc 	.word	0x200002cc
 80005e0:	200007cc 	.word	0x200007cc
 80005e4:	20000428 	.word	0x20000428
 80005e8:	20000934 	.word	0x20000934
 80005ec:	20000938 	.word	0x20000938
 80005f0:	2000093c 	.word	0x2000093c
 80005f4:	20000940 	.word	0x20000940
 80005f8:	20000944 	.word	0x20000944

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2234      	movs	r2, #52	; 0x34
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f00f fa58 	bl	800fac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <SystemClock_Config+0xdc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a2b      	ldr	r2, [pc, #172]	; (80006d8 <SystemClock_Config+0xdc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <SystemClock_Config+0xdc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemClock_Config+0xe0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a25      	ldr	r2, [pc, #148]	; (80006dc <SystemClock_Config+0xe0>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemClock_Config+0xe0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000670:	23b4      	movs	r3, #180	; 0xb4
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4618      	mov	r0, r3
 8000686:	f008 feed 	bl	8009464 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000690:	f000 fdc0 	bl	8001214 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000694:	f008 f836 	bl	8008704 <HAL_PWREx_EnableOverDrive>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800069e:	f000 fdb9 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2105      	movs	r1, #5
 80006c0:	4618      	mov	r0, r3
 80006c2:	f008 f86f 	bl	80087a4 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006cc:	f000 fda2 	bl	8001214 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	; 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f2:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <MX_ADC1_Init+0x108>)
 80006f4:	4a3d      	ldr	r2, [pc, #244]	; (80007ec <MX_ADC1_Init+0x10c>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f8:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <MX_ADC1_Init+0x108>)
 80006fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000700:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000708:	2201      	movs	r2, #1
 800070a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800070c:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <MX_ADC1_Init+0x108>)
 800070e:	2201      	movs	r2, #1
 8000710:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071a:	4b33      	ldr	r3, [pc, #204]	; (80007e8 <MX_ADC1_Init+0x108>)
 800071c:	2200      	movs	r2, #0
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000720:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000722:	4a33      	ldr	r2, [pc, #204]	; (80007f0 <MX_ADC1_Init+0x110>)
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000726:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800072c:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <MX_ADC1_Init+0x108>)
 800072e:	2205      	movs	r2, #5
 8000730:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000734:	2201      	movs	r2, #1
 8000736:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_ADC1_Init+0x108>)
 800073c:	2201      	movs	r2, #1
 800073e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000740:	4829      	ldr	r0, [pc, #164]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000742:	f003 fd4b 	bl	80041dc <HAL_ADC_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800074c:	f000 fd62 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000750:	2305      	movs	r3, #5
 8000752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000758:	2307      	movs	r3, #7
 800075a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4821      	ldr	r0, [pc, #132]	; (80007e8 <MX_ADC1_Init+0x108>)
 8000762:	f003 fead 	bl	80044c0 <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800076c:	f000 fd52 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000770:	2306      	movs	r3, #6
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	481a      	ldr	r0, [pc, #104]	; (80007e8 <MX_ADC1_Init+0x108>)
 800077e:	f003 fe9f 	bl	80044c0 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000788:	f000 fd44 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800078c:	2307      	movs	r3, #7
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000790:	2303      	movs	r3, #3
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4813      	ldr	r0, [pc, #76]	; (80007e8 <MX_ADC1_Init+0x108>)
 800079a:	f003 fe91 	bl	80044c0 <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80007a4:	f000 fd36 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007a8:	230e      	movs	r3, #14
 80007aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <MX_ADC1_Init+0x108>)
 80007b6:	f003 fe83 	bl	80044c0 <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80007c0:	f000 fd28 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_ADC1_Init+0x114>)
 80007c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80007c8:	2305      	movs	r3, #5
 80007ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_ADC1_Init+0x108>)
 80007d2:	f003 fe75 	bl	80044c0 <HAL_ADC_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80007dc:	f000 fd1a 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000017c 	.word	0x2000017c
 80007ec:	40012000 	.word	0x40012000
 80007f0:	0f000001 	.word	0x0f000001
 80007f4:	10000012 	.word	0x10000012

080007f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007fe:	463b      	mov	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800080a:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <MX_ADC2_Init+0x108>)
 800080c:	4a3d      	ldr	r2, [pc, #244]	; (8000904 <MX_ADC2_Init+0x10c>)
 800080e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000810:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <MX_ADC2_Init+0x108>)
 8000812:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000816:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000818:	4b39      	ldr	r3, [pc, #228]	; (8000900 <MX_ADC2_Init+0x108>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <MX_ADC2_Init+0x108>)
 8000820:	2201      	movs	r2, #1
 8000822:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000824:	4b36      	ldr	r3, [pc, #216]	; (8000900 <MX_ADC2_Init+0x108>)
 8000826:	2201      	movs	r2, #1
 8000828:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <MX_ADC2_Init+0x108>)
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000832:	4b33      	ldr	r3, [pc, #204]	; (8000900 <MX_ADC2_Init+0x108>)
 8000834:	2200      	movs	r2, #0
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000838:	4b31      	ldr	r3, [pc, #196]	; (8000900 <MX_ADC2_Init+0x108>)
 800083a:	4a33      	ldr	r2, [pc, #204]	; (8000908 <MX_ADC2_Init+0x110>)
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <MX_ADC2_Init+0x108>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8000844:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <MX_ADC2_Init+0x108>)
 8000846:	2205      	movs	r2, #5
 8000848:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_ADC2_Init+0x108>)
 800084c:	2201      	movs	r2, #1
 800084e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <MX_ADC2_Init+0x108>)
 8000854:	2201      	movs	r2, #1
 8000856:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000858:	4829      	ldr	r0, [pc, #164]	; (8000900 <MX_ADC2_Init+0x108>)
 800085a:	f003 fcbf 	bl	80041dc <HAL_ADC_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000864:	f000 fcd6 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000868:	2300      	movs	r3, #0
 800086a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000870:	2307      	movs	r3, #7
 8000872:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	4821      	ldr	r0, [pc, #132]	; (8000900 <MX_ADC2_Init+0x108>)
 800087a:	f003 fe21 	bl	80044c0 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000884:	f000 fcc6 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000888:	2301      	movs	r3, #1
 800088a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	481a      	ldr	r0, [pc, #104]	; (8000900 <MX_ADC2_Init+0x108>)
 8000896:	f003 fe13 	bl	80044c0 <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80008a0:	f000 fcb8 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80008a8:	2303      	movs	r3, #3
 80008aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4813      	ldr	r0, [pc, #76]	; (8000900 <MX_ADC2_Init+0x108>)
 80008b2:	f003 fe05 	bl	80044c0 <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80008bc:	f000 fcaa 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008c0:	2303      	movs	r3, #3
 80008c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	4619      	mov	r1, r3
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <MX_ADC2_Init+0x108>)
 80008ce:	f003 fdf7 	bl	80044c0 <HAL_ADC_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80008d8:	f000 fc9c 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008dc:	2304      	movs	r3, #4
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80008e0:	2305      	movs	r3, #5
 80008e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_ADC2_Init+0x108>)
 80008ea:	f003 fde9 	bl	80044c0 <HAL_ADC_ConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80008f4:	f000 fc8e 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200001c4 	.word	0x200001c4
 8000904:	40012100 	.word	0x40012100
 8000908:	0f000001 	.word	0x0f000001

0800090c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_CAN1_Init+0x64>)
 8000912:	4a18      	ldr	r2, [pc, #96]	; (8000974 <MX_CAN1_Init+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_CAN1_Init+0x64>)
 8000918:	2205      	movs	r2, #5
 800091a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_CAN1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_CAN1_Init+0x64>)
 8000924:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000928:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_CAN1_Init+0x64>)
 800092c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000930:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_CAN1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_CAN1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_CAN1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_CAN1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_CAN1_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_CAN1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_CAN1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_CAN1_Init+0x64>)
 800095e:	f004 f85f 	bl	8004a20 <HAL_CAN_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000968:	f000 fc54 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200002cc 	.word	0x200002cc
 8000974:	40006400 	.word	0x40006400

08000978 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_CRC_Init+0x20>)
 800097e:	4a07      	ldr	r2, [pc, #28]	; (800099c <MX_CRC_Init+0x24>)
 8000980:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_CRC_Init+0x20>)
 8000984:	f004 ff81 	bl	800588a <HAL_CRC_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800098e:	f000 fc41 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200002f4 	.word	0x200002f4
 800099c:	40023000 	.word	0x40023000

080009a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009a6:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <MX_I2C1_Init+0x54>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009ac:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_I2C1_Init+0x58>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009de:	f005 fdcd 	bl	800657c <HAL_I2C_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e8:	f000 fc14 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200002fc 	.word	0x200002fc
 80009f4:	40005400 	.word	0x40005400
 80009f8:	00061a80 	.word	0x00061a80

080009fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b096      	sub	sp, #88	; 0x58
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
 8000a2a:	615a      	str	r2, [r3, #20]
 8000a2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2220      	movs	r2, #32
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f00f f843 	bl	800fac0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a3c:	4a3e      	ldr	r2, [pc, #248]	; (8000b38 <MX_TIM1_Init+0x13c>)
 8000a3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1799;
 8000a40:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a42:	f240 7207 	movw	r2, #1799	; 0x707
 8000a46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a4e:	4b39      	ldr	r3, [pc, #228]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a56:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a5c:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a68:	4832      	ldr	r0, [pc, #200]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a6a:	f008 ff99 	bl	80099a0 <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a74:	f000 fbce 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a82:	4619      	mov	r1, r3
 8000a84:	482b      	ldr	r0, [pc, #172]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a86:	f009 fd9d 	bl	800a5c4 <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a90:	f000 fbc0 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a94:	4827      	ldr	r0, [pc, #156]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a96:	f009 f872 	bl	8009b7e <HAL_TIM_PWM_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000aa0:	f000 fbb8 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4820      	ldr	r0, [pc, #128]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000ab4:	f00a fd02 	bl	800b4bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000abe:	f000 fba9 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac2:	2360      	movs	r3, #96	; 0x60
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	220c      	movs	r2, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4814      	ldr	r0, [pc, #80]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000ae4:	f009 fcac 	bl	800a440 <HAL_TIM_PWM_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000aee:	f000 fb91 	bl	8001214 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000b16:	f00a fd4d 	bl	800b5b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b20:	f000 fb78 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b24:	4803      	ldr	r0, [pc, #12]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000b26:	f003 f8c9 	bl	8003cbc <HAL_TIM_MspPostInit>

}
 8000b2a:	bf00      	nop
 8000b2c:	3758      	adds	r7, #88	; 0x58
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000350 	.word	0x20000350
 8000b38:	40010000 	.word	0x40010000

08000b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b6c:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 899;
 8000b74:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b76:	f240 3283 	movw	r2, #899	; 0x383
 8000b7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b82:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b96:	4823      	ldr	r0, [pc, #140]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b98:	f008 ff02 	bl	80099a0 <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ba2:	f000 fb37 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481c      	ldr	r0, [pc, #112]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000bb4:	f009 fd06 	bl	800a5c4 <HAL_TIM_ConfigClockSource>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000bbe:	f000 fb29 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bc2:	4818      	ldr	r0, [pc, #96]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000bc4:	f008 ffdb 	bl	8009b7e <HAL_TIM_PWM_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bce:	f000 fb21 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bda:	f107 0320 	add.w	r3, r7, #32
 8000bde:	4619      	mov	r1, r3
 8000be0:	4810      	ldr	r0, [pc, #64]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000be2:	f00a fc6b 	bl	800b4bc <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000bec:	f000 fb12 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf0:	2360      	movs	r3, #96	; 0x60
 8000bf2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2208      	movs	r2, #8
 8000c04:	4619      	mov	r1, r3
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000c08:	f009 fc1a 	bl	800a440 <HAL_TIM_PWM_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c12:	f000 faff 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000c18:	f003 f850 	bl	8003cbc <HAL_TIM_MspPostInit>

}
 8000c1c:	bf00      	nop
 8000c1e:	3738      	adds	r7, #56	; 0x38
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000398 	.word	0x20000398

08000c28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	; 0x38
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c58:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c5a:	4a2e      	ldr	r2, [pc, #184]	; (8000d14 <MX_TIM3_Init+0xec>)
 8000c5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 899;
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c60:	f240 3283 	movw	r2, #899	; 0x383
 8000c64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c6c:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c80:	4823      	ldr	r0, [pc, #140]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c82:	f008 fe8d 	bl	80099a0 <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c8c:	f000 fac2 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	481c      	ldr	r0, [pc, #112]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c9e:	f009 fc91 	bl	800a5c4 <HAL_TIM_ConfigClockSource>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ca8:	f000 fab4 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cac:	4818      	ldr	r0, [pc, #96]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000cae:	f008 ff66 	bl	8009b7e <HAL_TIM_PWM_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000cb8:	f000 faac 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cc4:	f107 0320 	add.w	r3, r7, #32
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4811      	ldr	r0, [pc, #68]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000ccc:	f00a fbf6 	bl	800b4bc <HAL_TIMEx_MasterConfigSynchronization>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000cd6:	f000 fa9d 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cda:	2360      	movs	r3, #96	; 0x60
 8000cdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	220c      	movs	r2, #12
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4807      	ldr	r0, [pc, #28]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000cf2:	f009 fba5 	bl	800a440 <HAL_TIM_PWM_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000cfc:	f000 fa8a 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000d02:	f002 ffdb 	bl	8003cbc <HAL_TIM_MspPostInit>

}
 8000d06:	bf00      	nop
 8000d08:	3738      	adds	r7, #56	; 0x38
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200003e0 	.word	0x200003e0
 8000d14:	40000400 	.word	0x40000400

08000d18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d28:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <MX_TIM6_Init+0x68>)
 8000d2a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d2e:	2259      	movs	r2, #89	; 0x59
 8000d30:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xfffe;
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d3a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d48:	f008 fe2a 	bl	80099a0 <HAL_TIM_Base_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d52:	f000 fa5f 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d5e:	463b      	mov	r3, r7
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_TIM6_Init+0x64>)
 8000d64:	f00a fbaa 	bl	800b4bc <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d6e:	f000 fa51 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000428 	.word	0x20000428
 8000d80:	40001000 	.word	0x40001000

08000d84 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <MX_TIM7_Init+0x64>)
 8000d96:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000d9a:	2259      	movs	r2, #89	; 0x59
 8000d9c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000da6:	2263      	movs	r2, #99	; 0x63
 8000da8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000db2:	f008 fdf5 	bl	80099a0 <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8000dbc:	f000 fa2a 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_TIM7_Init+0x60>)
 8000dce:	f00a fb75 	bl	800b4bc <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000dd8:	f000 fa1c 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000470 	.word	0x20000470
 8000de8:	40001400 	.word	0x40001400

08000dec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b096      	sub	sp, #88	; 0x58
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2220      	movs	r2, #32
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00e fe4b 	bl	800fac0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e2c:	4a3f      	ldr	r2, [pc, #252]	; (8000f2c <MX_TIM8_Init+0x140>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1799;
 8000e30:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e32:	f240 7207 	movw	r2, #1799	; 0x707
 8000e36:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000e3e:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e44:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e58:	4833      	ldr	r0, [pc, #204]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e5a:	f008 fda1 	bl	80099a0 <HAL_TIM_Base_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000e64:	f000 f9d6 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e72:	4619      	mov	r1, r3
 8000e74:	482c      	ldr	r0, [pc, #176]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e76:	f009 fba5 	bl	800a5c4 <HAL_TIM_ConfigClockSource>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000e80:	f000 f9c8 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e84:	4828      	ldr	r0, [pc, #160]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000e86:	f008 fe7a 	bl	8009b7e <HAL_TIM_PWM_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000e90:	f000 f9c0 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4821      	ldr	r0, [pc, #132]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000ea4:	f00a fb0a 	bl	800b4bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000eae:	f000 f9b1 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb2:	2360      	movs	r3, #96	; 0x60
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4814      	ldr	r0, [pc, #80]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000ed8:	f009 fab2 	bl	800a440 <HAL_TIM_PWM_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000ee2:	f000 f997 	bl	8001214 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000efa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000f0a:	f00a fb53 	bl	800b5b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8000f14:	f000 f97e 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM8_Init+0x13c>)
 8000f1a:	f002 fecf 	bl	8003cbc <HAL_TIM_MspPostInit>

}
 8000f1e:	bf00      	nop
 8000f20:	3758      	adds	r7, #88	; 0x58
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200004b8 	.word	0x200004b8
 8000f2c:	40010400 	.word	0x40010400

08000f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <MX_DMA_Init+0xa8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a26      	ldr	r2, [pc, #152]	; (8000fd8 <MX_DMA_Init+0xa8>)
 8000f40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <MX_DMA_Init+0xa8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_DMA_Init+0xa8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a1f      	ldr	r2, [pc, #124]	; (8000fd8 <MX_DMA_Init+0xa8>)
 8000f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_DMA_Init+0xa8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	200c      	movs	r0, #12
 8000f74:	f004 fc45 	bl	8005802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f78:	200c      	movs	r0, #12
 8000f7a:	f004 fc5e 	bl	800583a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	200d      	movs	r0, #13
 8000f84:	f004 fc3d 	bl	8005802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f88:	200d      	movs	r0, #13
 8000f8a:	f004 fc56 	bl	800583a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2038      	movs	r0, #56	; 0x38
 8000f94:	f004 fc35 	bl	8005802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f98:	2038      	movs	r0, #56	; 0x38
 8000f9a:	f004 fc4e 	bl	800583a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	203a      	movs	r0, #58	; 0x3a
 8000fa4:	f004 fc2d 	bl	8005802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fa8:	203a      	movs	r0, #58	; 0x3a
 8000faa:	f004 fc46 	bl	800583a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	203b      	movs	r0, #59	; 0x3b
 8000fb4:	f004 fc25 	bl	8005802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fb8:	203b      	movs	r0, #59	; 0x3b
 8000fba:	f004 fc3e 	bl	800583a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	203c      	movs	r0, #60	; 0x3c
 8000fc4:	f004 fc1d 	bl	8005802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000fc8:	203c      	movs	r0, #60	; 0x3c
 8000fca:	f004 fc36 	bl	800583a <HAL_NVIC_EnableIRQ>

}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08e      	sub	sp, #56	; 0x38
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
 8000ff6:	4b80      	ldr	r3, [pc, #512]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a7f      	ldr	r2, [pc, #508]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8000ffc:	f043 0310 	orr.w	r3, r3, #16
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b7d      	ldr	r3, [pc, #500]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	623b      	str	r3, [r7, #32]
 800100c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	4b79      	ldr	r3, [pc, #484]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a78      	ldr	r2, [pc, #480]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8001018:	f043 0320 	orr.w	r3, r3, #32
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b76      	ldr	r3, [pc, #472]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0320 	and.w	r3, r3, #32
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	4b72      	ldr	r3, [pc, #456]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a71      	ldr	r2, [pc, #452]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b6f      	ldr	r3, [pc, #444]	; (80011f8 <MX_GPIO_Init+0x21c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	4b6b      	ldr	r3, [pc, #428]	; (80011f8 <MX_GPIO_Init+0x21c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a6a      	ldr	r2, [pc, #424]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b64      	ldr	r3, [pc, #400]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a63      	ldr	r2, [pc, #396]	; (80011f8 <MX_GPIO_Init+0x21c>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b61      	ldr	r3, [pc, #388]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a5c      	ldr	r2, [pc, #368]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b5a      	ldr	r3, [pc, #360]	; (80011f8 <MX_GPIO_Init+0x21c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b56      	ldr	r3, [pc, #344]	; (80011f8 <MX_GPIO_Init+0x21c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a55      	ldr	r2, [pc, #340]	; (80011f8 <MX_GPIO_Init+0x21c>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b53      	ldr	r3, [pc, #332]	; (80011f8 <MX_GPIO_Init+0x21c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b4f      	ldr	r3, [pc, #316]	; (80011f8 <MX_GPIO_Init+0x21c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a4e      	ldr	r2, [pc, #312]	; (80011f8 <MX_GPIO_Init+0x21c>)
 80010c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b4c      	ldr	r3, [pc, #304]	; (80011f8 <MX_GPIO_Init+0x21c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	213c      	movs	r1, #60	; 0x3c
 80010d6:	4849      	ldr	r0, [pc, #292]	; (80011fc <MX_GPIO_Init+0x220>)
 80010d8:	f005 fa04 	bl	80064e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80010e2:	4847      	ldr	r0, [pc, #284]	; (8001200 <MX_GPIO_Init+0x224>)
 80010e4:	f005 f9fe 	bl	80064e4 <HAL_GPIO_WritePin>
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80010ee:	4845      	ldr	r0, [pc, #276]	; (8001204 <MX_GPIO_Init+0x228>)
 80010f0:	f005 f9f8 	bl	80064e4 <HAL_GPIO_WritePin>
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEL1_Pin SEL0_Pin FAULTRST_Pin SEN_Pin */
  GPIO_InitStruct.Pin = SEL1_Pin|SEL0_Pin|FAULTRST_Pin|SEN_Pin;
 80010f4:	233c      	movs	r3, #60	; 0x3c
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010f8:	2311      	movs	r3, #17
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001108:	4619      	mov	r1, r3
 800110a:	483c      	ldr	r0, [pc, #240]	; (80011fc <MX_GPIO_Init+0x220>)
 800110c:	f004 ff4a 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT1_Pin INPUT2_Pin INPUT3_Pin INPUT4_Pin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 8001110:	230f      	movs	r3, #15
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001114:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001122:	4619      	mov	r1, r3
 8001124:	4838      	ldr	r0, [pc, #224]	; (8001208 <MX_GPIO_Init+0x22c>)
 8001126:	f004 ff3d 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT13_Pin INPUT14_Pin INPUT15_Pin INPUT16_Pin
                           INPUT5_Pin INPUT6_Pin */
  GPIO_InitStruct.Pin = INPUT13_Pin|INPUT14_Pin|INPUT15_Pin|INPUT16_Pin
 800112a:	f24f 0330 	movw	r3, #61488	; 0xf030
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT5_Pin|INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001130:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	4619      	mov	r1, r3
 8001140:	4832      	ldr	r0, [pc, #200]	; (800120c <MX_GPIO_Init+0x230>)
 8001142:	f004 ff2f 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT6_Pin OUTPUT5_Pin OUTPUT8_Pin OUTPUT7_Pin
                           OUTPUT10_Pin OUTPUT9_Pin OUTPUT12_Pin OUTPUT11_Pin */
  GPIO_InitStruct.Pin = OUTPUT6_Pin|OUTPUT5_Pin|OUTPUT8_Pin|OUTPUT7_Pin
 8001146:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTPUT10_Pin|OUTPUT9_Pin|OUTPUT12_Pin|OUTPUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800114c:	2311      	movs	r3, #17
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	4828      	ldr	r0, [pc, #160]	; (8001200 <MX_GPIO_Init+0x224>)
 8001160:	f004 ff20 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT14_Pin OUTPUT13_Pin OUTPUT16_Pin OUTPUT15_Pin
                           CAN_RX_LED_Pin CAN_TX_LED_Pin */
  GPIO_InitStruct.Pin = OUTPUT14_Pin|OUTPUT13_Pin|OUTPUT16_Pin|OUTPUT15_Pin
 8001164:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
                          |CAN_RX_LED_Pin|CAN_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800116a:	2311      	movs	r3, #17
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	4619      	mov	r1, r3
 800117c:	4821      	ldr	r0, [pc, #132]	; (8001204 <MX_GPIO_Init+0x228>)
 800117e:	f004 ff11 	bl	8005fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT7_Pin INPUT8_Pin INPUT9_Pin INPUT10_Pin
                           INPUT11_Pin INPUT12_Pin */
  GPIO_InitStruct.Pin = INPUT7_Pin|INPUT8_Pin|INPUT9_Pin|INPUT10_Pin
 8001182:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
                          |INPUT11_Pin|INPUT12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001188:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	481d      	ldr	r0, [pc, #116]	; (8001210 <MX_GPIO_Init+0x234>)
 800119a:	f004 ff03 	bl	8005fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2101      	movs	r1, #1
 80011a2:	2006      	movs	r0, #6
 80011a4:	f004 fb2d 	bl	8005802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011a8:	2006      	movs	r0, #6
 80011aa:	f004 fb46 	bl	800583a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2101      	movs	r1, #1
 80011b2:	2007      	movs	r0, #7
 80011b4:	f004 fb25 	bl	8005802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011b8:	2007      	movs	r0, #7
 80011ba:	f004 fb3e 	bl	800583a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2101      	movs	r1, #1
 80011c2:	2008      	movs	r0, #8
 80011c4:	f004 fb1d 	bl	8005802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011c8:	2008      	movs	r0, #8
 80011ca:	f004 fb36 	bl	800583a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2101      	movs	r1, #1
 80011d2:	2009      	movs	r0, #9
 80011d4:	f004 fb15 	bl	8005802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011d8:	2009      	movs	r0, #9
 80011da:	f004 fb2e 	bl	800583a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2101      	movs	r1, #1
 80011e2:	200a      	movs	r0, #10
 80011e4:	f004 fb0d 	bl	8005802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011e8:	200a      	movs	r0, #10
 80011ea:	f004 fb26 	bl	800583a <HAL_NVIC_EnableIRQ>

}
 80011ee:	bf00      	nop
 80011f0:	3738      	adds	r7, #56	; 0x38
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40021000 	.word	0x40021000
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021800 	.word	0x40021800
 8001208:	40021400 	.word	0x40021400
 800120c:	40020400 	.word	0x40020400
 8001210:	40020800 	.word	0x40020800

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <PDM_CAN_Init>:
//													2: 250	kbps
//													3: 500	kbps
//													4: 1000 kbps
//Returns HAL_CAN_Start status
HAL_StatusTypeDef PDM_CAN_Init(CAN_HandleTypeDef *hcan, PDM_CAN_Config* filter_struct)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af02      	add	r7, sp, #8
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	//Deinitialize CAN bus for new configuration
	HAL_CAN_DeInit(hcan);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f003 fcf3 	bl	8004c16 <HAL_CAN_DeInit>

	//Sets CAN prescaler to match selected baud rate
	//If CAN bus is configured as disabled, leaves the function without initialization
	switch(filter_struct->baudRate)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	3b01      	subs	r3, #1
 8001236:	2b03      	cmp	r3, #3
 8001238:	d81a      	bhi.n	8001270 <PDM_CAN_Init+0x50>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <PDM_CAN_Init+0x20>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	08001251 	.word	0x08001251
 8001244:	08001259 	.word	0x08001259
 8001248:	08001261 	.word	0x08001261
 800124c:	08001269 	.word	0x08001269
	{
	case CAN_125kbps:
		hcan->Init.Prescaler = 40;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2228      	movs	r2, #40	; 0x28
 8001254:	605a      	str	r2, [r3, #4]
		break;
 8001256:	e00d      	b.n	8001274 <PDM_CAN_Init+0x54>

	case CAN_250kbps:
		hcan->Init.Prescaler = 20;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2214      	movs	r2, #20
 800125c:	605a      	str	r2, [r3, #4]
		break;
 800125e:	e009      	b.n	8001274 <PDM_CAN_Init+0x54>

	case CAN_500kbps:
		hcan->Init.Prescaler = 10;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	220a      	movs	r2, #10
 8001264:	605a      	str	r2, [r3, #4]
		break;
 8001266:	e005      	b.n	8001274 <PDM_CAN_Init+0x54>

	case CAN_1000kbps:
		hcan->Init.Prescaler = 5;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2205      	movs	r2, #5
 800126c:	605a      	str	r2, [r3, #4]
		break;
 800126e:	e001      	b.n	8001274 <PDM_CAN_Init+0x54>

		default:
			return HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	e012      	b.n	800129a <PDM_CAN_Init+0x7a>
	}

	//Reinitialize CAN bus
	HAL_CAN_Init(hcan);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f003 fbd3 	bl	8004a20 <HAL_CAN_Init>

	PDM_CAN_Filter_Config(hcan, 0, CAN_CONFIG_FILTER, CAN_CONFIG_MASK, CAN_ID_EXT);
 800127a:	2304      	movs	r3, #4
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2300      	movs	r3, #0
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f823 	bl	80012d0 <PDM_CAN_Filter_Config>

	//Initialize receive callbacks
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800128a:	2102      	movs	r1, #2
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f003 ff64 	bl	800515a <HAL_CAN_ActivateNotification>

	//Starts CAN bus communication and leaves the function
	return HAL_CAN_Start(hcan);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f003 fdc2 	bl	8004e1c <HAL_CAN_Start>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop

080012a4 <PDM_CAN_Transmit_Data>:
//													3: 50 Hz transmission
//													4: 80 Hz transmission
//													5: 100 Hz transmission
//Returns HAL_CAN_AddTxMessage status
HAL_StatusTypeDef PDM_CAN_Transmit_Data(CAN_HandleTypeDef* hcan, uint8_t data_freq)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret_val = HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]

	return ret_val;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
	}

	return ret_val;
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <PDM_CAN_Process_Rx_Data>:

//Process received data to set PWM output duty cycle
void PDM_CAN_Process_Rx_Data()
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
	return;
 80012c6:	bf00      	nop
}
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <PDM_CAN_Filter_Config>:
//CAN_HandleTypeDef *hcan - CAN handler struct pointer
//PWM_Control_Struct *pwm_struct - control struct for PWM output
//uint8_t pwm_out_number - number of PWM output
//Returns HAL_CAN_ConfigFilter status
static HAL_StatusTypeDef PDM_CAN_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t filter_nbr, uint32_t filter_id, uint32_t filter_mask, uint32_t filter_ide)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	; 0x38
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	460b      	mov	r3, r1
 80012de:	72fb      	strb	r3, [r7, #11]
	CAN_FilterTypeDef canFilterConfig;

	//Sets CAN filter configuration
	canFilterConfig.FilterBank = filter_nbr;
 80012e0:	7afb      	ldrb	r3, [r7, #11]
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
	canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80012e8:	2301      	movs	r3, #1
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	canFilterConfig.FilterIdHigh = filter_id >> 13;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	0b5b      	lsrs	r3, r3, #13
 80012f0:	613b      	str	r3, [r7, #16]
	canFilterConfig.FilterIdLow = (filter_id << 3) | (filter_ide & 0x0004);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	00da      	lsls	r2, r3, #3
 80012f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	4313      	orrs	r3, r2
 80012fe:	617b      	str	r3, [r7, #20]
	canFilterConfig.FilterMaskIdHigh = filter_mask >> 13;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	0b5b      	lsrs	r3, r3, #13
 8001304:	61bb      	str	r3, [r7, #24]
	canFilterConfig.FilterMaskIdLow = (filter_mask << 3) | 0x0004;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	61fb      	str	r3, [r7, #28]
	canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
	canFilterConfig.FilterActivation = ENABLE;
 8001314:	2301      	movs	r3, #1
 8001316:	633b      	str	r3, [r7, #48]	; 0x30

	//Loads CAN filter configuration into filter bank
	return HAL_CAN_ConfigFilter(hcan, &canFilterConfig);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f003 fc9c 	bl	8004c5c <HAL_CAN_ConfigFilter>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3738      	adds	r7, #56	; 0x38
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <PDM_Init>:

//Initialize PDM
//Loads from EEPROM
//Initializes PWM
void PDM_Init(CAN_HandleTypeDef *hcan, I2C_HandleTypeDef *hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
	//Sets all outputs to zero
	Output_Reset_State();
 800133a:	f000 fd2d 	bl	8001d98 <Output_Reset_State>

	//Weak function for data overwriting during initialization
	PDM_Hard_Code_Config();
 800133e:	f000 fc1f 	bl	8001b80 <PDM_Hard_Code_Config>
	//Loads both normal output and PWM output parameters
//	Output_Cfg_Load_From_EEPROM(hi2c);
//	PWM_Output_Cfg_Load_From_EEPROM(hi2c);

	//Initializes each PWM able output
	PDM_PWM_Init(hcan, &pwmOutStruct[0], 0);
 8001342:	2200      	movs	r2, #0
 8001344:	4922      	ldr	r1, [pc, #136]	; (80013d0 <PDM_Init+0xa0>)
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 ffa6 	bl	8002298 <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[1], 1);
 800134c:	2201      	movs	r2, #1
 800134e:	4921      	ldr	r1, [pc, #132]	; (80013d4 <PDM_Init+0xa4>)
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 ffa1 	bl	8002298 <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[2], 2);
 8001356:	2202      	movs	r2, #2
 8001358:	491f      	ldr	r1, [pc, #124]	; (80013d8 <PDM_Init+0xa8>)
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 ff9c 	bl	8002298 <PDM_PWM_Init>
	PDM_PWM_Init(hcan, &pwmOutStruct[3], 3);
 8001360:	2203      	movs	r2, #3
 8001362:	491e      	ldr	r1, [pc, #120]	; (80013dc <PDM_Init+0xac>)
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 ff97 	bl	8002298 <PDM_PWM_Init>

	//Checks input pin levels
	PDM_Input_Process();
 800136a:	f000 fdab 	bl	8001ec4 <PDM_Input_Process>

	//Initializes CAN bus
	PDM_CAN_Init(hcan, &canConfig);
 800136e:	491c      	ldr	r1, [pc, #112]	; (80013e0 <PDM_Init+0xb0>)
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff55 	bl	8001220 <PDM_CAN_Init>

	//Initializes CAN ID buffer
	__PDM_ID_BUFFER_INIT();
 8001376:	2300      	movs	r3, #0
 8001378:	81fb      	strh	r3, [r7, #14]
 800137a:	e009      	b.n	8001390 <PDM_Init+0x60>
 800137c:	89fb      	ldrh	r3, [r7, #14]
 800137e:	89fa      	ldrh	r2, [r7, #14]
 8001380:	0052      	lsls	r2, r2, #1
 8001382:	b291      	uxth	r1, r2
 8001384:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <PDM_Init+0xb4>)
 8001386:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	3301      	adds	r3, #1
 800138e:	81fb      	strh	r3, [r7, #14]
 8001390:	89fb      	ldrh	r3, [r7, #14]
 8001392:	2b1d      	cmp	r3, #29
 8001394:	d9f2      	bls.n	800137c <PDM_Init+0x4c>

	//Sets outputs based on input levels
	PDM_Output_Process();
 8001396:	f000 fe95 	bl	80020c4 <PDM_Output_Process>

	//Starts Multisense data conversion
	flagReading[0] = Data_Read_Ready;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <PDM_Init+0xb8>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
	flagReading[1] = Data_Read_Ready;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <PDM_Init+0xb8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	705a      	strb	r2, [r3, #1]
	PDM_Data_Conversion(&htim6);
 80013a6:	4811      	ldr	r0, [pc, #68]	; (80013ec <PDM_Init+0xbc>)
 80013a8:	f001 fea4 	bl	80030f4 <PDM_Data_Conversion>

	//Initializes timers and ADC conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcBuffer[5], 5);
 80013ac:	2205      	movs	r2, #5
 80013ae:	4910      	ldr	r1, [pc, #64]	; (80013f0 <PDM_Init+0xc0>)
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <PDM_Init+0xc4>)
 80013b2:	f002 ff57 	bl	8004264 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &adcBuffer[0], 5);
 80013b6:	2205      	movs	r2, #5
 80013b8:	490f      	ldr	r1, [pc, #60]	; (80013f8 <PDM_Init+0xc8>)
 80013ba:	4810      	ldr	r0, [pc, #64]	; (80013fc <PDM_Init+0xcc>)
 80013bc:	f002 ff52 	bl	8004264 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim7);
 80013c0:	480f      	ldr	r0, [pc, #60]	; (8001400 <PDM_Init+0xd0>)
 80013c2:	f008 fb3d 	bl	8009a40 <HAL_TIM_Base_Start_IT>

	return;
 80013c6:	bf00      	nop
}
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200008b4 	.word	0x200008b4
 80013d4:	200008d4 	.word	0x200008d4
 80013d8:	200008f4 	.word	0x200008f4
 80013dc:	20000914 	.word	0x20000914
 80013e0:	200006a4 	.word	0x200006a4
 80013e4:	20000778 	.word	0x20000778
 80013e8:	200007cc 	.word	0x200007cc
 80013ec:	20000428 	.word	0x20000428
 80013f0:	200007be 	.word	0x200007be
 80013f4:	2000017c 	.word	0x2000017c
 80013f8:	200007b4 	.word	0x200007b4
 80013fc:	200001c4 	.word	0x200001c4
 8001400:	20000470 	.word	0x20000470

08001404 <PDM_USB_Process>:

void PDM_USB_Process(uint8_t *Data, uint16_t Size)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
	return;
 8001410:	bf00      	nop
}
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <PDM_PWM_Load_SoftStart_From_EEPROM>:
{
	return;
}

HAL_StatusTypeDef PDM_PWM_Load_SoftStart_From_EEPROM(I2C_HandleTypeDef*hi2c, PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	4613      	mov	r3, r2
 8001428:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer;
	uint16_t buffer_address = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	82fb      	strh	r3, [r7, #22]
	HAL_StatusTypeDef retVal = HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	757b      	strb	r3, [r7, #21]

	switch(pwm_out_number)
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d817      	bhi.n	8001468 <PDM_PWM_Load_SoftStart_From_EEPROM+0x4c>
 8001438:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <PDM_PWM_Load_SoftStart_From_EEPROM+0x24>)
 800143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143e:	bf00      	nop
 8001440:	08001451 	.word	0x08001451
 8001444:	08001457 	.word	0x08001457
 8001448:	0800145d 	.word	0x0800145d
 800144c:	08001463 	.word	0x08001463
	{
	case 0:
		buffer_address = EEPROM_PWM1_SST1_ADDRESS;
 8001450:	2300      	movs	r3, #0
 8001452:	82fb      	strh	r3, [r7, #22]
		break;
 8001454:	e008      	b.n	8001468 <PDM_PWM_Load_SoftStart_From_EEPROM+0x4c>

	case 1:
		buffer_address = EEPROM_PWM2_SST1_ADDRESS;
 8001456:	2300      	movs	r3, #0
 8001458:	82fb      	strh	r3, [r7, #22]
		break;
 800145a:	e005      	b.n	8001468 <PDM_PWM_Load_SoftStart_From_EEPROM+0x4c>

	case 2:
		buffer_address = EEPROM_PWM3_SST1_ADDRESS;
 800145c:	2300      	movs	r3, #0
 800145e:	82fb      	strh	r3, [r7, #22]
		break;
 8001460:	e002      	b.n	8001468 <PDM_PWM_Load_SoftStart_From_EEPROM+0x4c>

	case 3:
		buffer_address = EEPROM_PWM4_SST1_ADDRESS;
 8001462:	2300      	movs	r3, #0
 8001464:	82fb      	strh	r3, [r7, #22]
		break;
 8001466:	bf00      	nop
	}



	switch(pwm_struct->pwmFrequency)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	885b      	ldrh	r3, [r3, #2]
 800146c:	f240 3283 	movw	r2, #899	; 0x383
 8001470:	4293      	cmp	r3, r2
 8001472:	d062      	beq.n	800153a <PDM_PWM_Load_SoftStart_From_EEPROM+0x11e>
 8001474:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001478:	f280 80e3 	bge.w	8001642 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 800147c:	f240 1267 	movw	r2, #359	; 0x167
 8001480:	4293      	cmp	r3, r2
 8001482:	d067      	beq.n	8001554 <PDM_PWM_Load_SoftStart_From_EEPROM+0x138>
 8001484:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001488:	f280 80db 	bge.w	8001642 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 800148c:	2bb3      	cmp	r3, #179	; 0xb3
 800148e:	d06d      	beq.n	800156c <PDM_PWM_Load_SoftStart_From_EEPROM+0x150>
 8001490:	2bb3      	cmp	r3, #179	; 0xb3
 8001492:	f300 80d6 	bgt.w	8001642 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 8001496:	2b77      	cmp	r3, #119	; 0x77
 8001498:	d073      	beq.n	8001582 <PDM_PWM_Load_SoftStart_From_EEPROM+0x166>
 800149a:	2b77      	cmp	r3, #119	; 0x77
 800149c:	f300 80d1 	bgt.w	8001642 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 80014a0:	2b23      	cmp	r3, #35	; 0x23
 80014a2:	dc47      	bgt.n	8001534 <PDM_PWM_Load_SoftStart_From_EEPROM+0x118>
 80014a4:	2b05      	cmp	r3, #5
 80014a6:	f2c0 80cc 	blt.w	8001642 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 80014aa:	3b05      	subs	r3, #5
 80014ac:	2b1e      	cmp	r3, #30
 80014ae:	f200 80c8 	bhi.w	8001642 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
 80014b2:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <PDM_PWM_Load_SoftStart_From_EEPROM+0x9c>)
 80014b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b8:	0800162d 	.word	0x0800162d
 80014bc:	08001643 	.word	0x08001643
 80014c0:	08001643 	.word	0x08001643
 80014c4:	08001613 	.word	0x08001613
 80014c8:	08001643 	.word	0x08001643
 80014cc:	08001643 	.word	0x08001643
 80014d0:	080015ef 	.word	0x080015ef
 80014d4:	08001643 	.word	0x08001643
 80014d8:	08001643 	.word	0x08001643
 80014dc:	08001643 	.word	0x08001643
 80014e0:	08001643 	.word	0x08001643
 80014e4:	08001643 	.word	0x08001643
 80014e8:	080015d9 	.word	0x080015d9
 80014ec:	08001643 	.word	0x08001643
 80014f0:	08001643 	.word	0x08001643
 80014f4:	08001643 	.word	0x08001643
 80014f8:	08001643 	.word	0x08001643
 80014fc:	08001643 	.word	0x08001643
 8001500:	08001643 	.word	0x08001643
 8001504:	08001643 	.word	0x08001643
 8001508:	08001643 	.word	0x08001643
 800150c:	08001643 	.word	0x08001643
 8001510:	08001643 	.word	0x08001643
 8001514:	08001643 	.word	0x08001643
 8001518:	08001643 	.word	0x08001643
 800151c:	08001643 	.word	0x08001643
 8001520:	08001643 	.word	0x08001643
 8001524:	08001643 	.word	0x08001643
 8001528:	08001643 	.word	0x08001643
 800152c:	08001643 	.word	0x08001643
 8001530:	080015b5 	.word	0x080015b5
 8001534:	2b59      	cmp	r3, #89	; 0x59
 8001536:	d036      	beq.n	80015a6 <PDM_PWM_Load_SoftStart_From_EEPROM+0x18a>
	case PWM_FREQ_15000HZ:
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 15000) / 1000;
		break;

	default:
		break;
 8001538:	e083      	b.n	8001642 <PDM_PWM_Load_SoftStart_From_EEPROM+0x226>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 100) / 1000;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	885b      	ldrh	r3, [r3, #2]
 8001540:	4a44      	ldr	r2, [pc, #272]	; (8001654 <PDM_PWM_Load_SoftStart_From_EEPROM+0x238>)
 8001542:	fb82 1203 	smull	r1, r2, r2, r3
 8001546:	1092      	asrs	r2, r2, #2
 8001548:	17db      	asrs	r3, r3, #31
 800154a:	1ad2      	subs	r2, r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	609a      	str	r2, [r3, #8]
		break;
 8001552:	e077      	b.n	8001644 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 250) / 1000;
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	885b      	ldrh	r3, [r3, #2]
 800155a:	2b00      	cmp	r3, #0
 800155c:	da00      	bge.n	8001560 <PDM_PWM_Load_SoftStart_From_EEPROM+0x144>
 800155e:	3303      	adds	r3, #3
 8001560:	109b      	asrs	r3, r3, #2
 8001562:	461a      	mov	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	609a      	str	r2, [r3, #8]
		break;
 800156a:	e06b      	b.n	8001644 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 500) / 1000;
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	885b      	ldrh	r3, [r3, #2]
 8001572:	0fda      	lsrs	r2, r3, #31
 8001574:	4413      	add	r3, r2
 8001576:	105b      	asrs	r3, r3, #1
 8001578:	461a      	mov	r2, r3
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	609a      	str	r2, [r3, #8]
		break;
 8001580:	e060      	b.n	8001644 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 750) / 1000;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	885b      	ldrh	r3, [r3, #2]
 8001588:	461a      	mov	r2, r3
 800158a:	f240 23ee 	movw	r3, #750	; 0x2ee
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a31      	ldr	r2, [pc, #196]	; (8001658 <PDM_PWM_Load_SoftStart_From_EEPROM+0x23c>)
 8001594:	fb82 1203 	smull	r1, r2, r2, r3
 8001598:	1192      	asrs	r2, r2, #6
 800159a:	17db      	asrs	r3, r3, #31
 800159c:	1ad2      	subs	r2, r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	609a      	str	r2, [r3, #8]
		break;
 80015a4:	e04e      	b.n	8001644 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 1000) / 1000;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	885a      	ldrh	r2, [r3, #2]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	609a      	str	r2, [r3, #8]
		break;
 80015b2:	e047      	b.n	8001644 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 2500) / 1000;
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	885b      	ldrh	r3, [r3, #2]
 80015ba:	461a      	mov	r2, r3
 80015bc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015c0:	fb02 f303 	mul.w	r3, r2, r3
 80015c4:	4a24      	ldr	r2, [pc, #144]	; (8001658 <PDM_PWM_Load_SoftStart_From_EEPROM+0x23c>)
 80015c6:	fb82 1203 	smull	r1, r2, r2, r3
 80015ca:	1192      	asrs	r2, r2, #6
 80015cc:	17db      	asrs	r3, r3, #31
 80015ce:	1ad2      	subs	r2, r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	609a      	str	r2, [r3, #8]
		break;
 80015d6:	e035      	b.n	8001644 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 5000) / 1000;
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	885b      	ldrh	r3, [r3, #2]
 80015de:	461a      	mov	r2, r3
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	441a      	add	r2, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	609a      	str	r2, [r3, #8]
		break;
 80015ec:	e02a      	b.n	8001644 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 7500) / 1000;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	885b      	ldrh	r3, [r3, #2]
 80015f4:	461a      	mov	r2, r3
 80015f6:	f641 534c 	movw	r3, #7500	; 0x1d4c
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	4a16      	ldr	r2, [pc, #88]	; (8001658 <PDM_PWM_Load_SoftStart_From_EEPROM+0x23c>)
 8001600:	fb82 1203 	smull	r1, r2, r2, r3
 8001604:	1192      	asrs	r2, r2, #6
 8001606:	17db      	asrs	r3, r3, #31
 8001608:	1ad2      	subs	r2, r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	609a      	str	r2, [r3, #8]
		break;
 8001610:	e018      	b.n	8001644 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 10000) / 1000;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	885b      	ldrh	r3, [r3, #2]
 8001618:	461a      	mov	r2, r3
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	461a      	mov	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	609a      	str	r2, [r3, #8]
		break;
 800162a:	e00b      	b.n	8001644 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		pwm_struct->softStartStruct->slope = (pwm_struct->softStartStruct->turnOnTime * 15000) / 1000;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	885b      	ldrh	r3, [r3, #2]
 8001632:	461a      	mov	r2, r3
 8001634:	4613      	mov	r3, r2
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	1a9a      	subs	r2, r3, r2
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	609a      	str	r2, [r3, #8]
		break;
 8001640:	e000      	b.n	8001644 <PDM_PWM_Load_SoftStart_From_EEPROM+0x228>
		break;
 8001642:	bf00      	nop
	}

	return retVal;
 8001644:	7d7b      	ldrb	r3, [r7, #21]
}
 8001646:	4618      	mov	r0, r3
 8001648:	371c      	adds	r7, #28
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	66666667 	.word	0x66666667
 8001658:	10624dd3 	.word	0x10624dd3

0800165c <PDM_PWM_Map_Load_From_EEPROM>:

HAL_StatusTypeDef PDM_PWM_Map_Load_From_EEPROM(I2C_HandleTypeDef* hi2c, PWM_Control_Struct* pwm_struct, uint16_t mem_address)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	f6ad 7dac 	subw	sp, sp, #4012	; 0xfac
 8001662:	af04      	add	r7, sp, #16
 8001664:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001668:	f6a3 738c 	subw	r3, r3, #3980	; 0xf8c
 800166c:	6018      	str	r0, [r3, #0]
 800166e:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001672:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001676:	6019      	str	r1, [r3, #0]
 8001678:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800167c:	f6a3 7392 	subw	r3, r3, #3986	; 0xf92
 8001680:	801a      	strh	r2, [r3, #0]
	uint8_t buffer[EEPROM_PWM_CFG_MAX_SIZE];
	uint16_t bufferAddress = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	f8a7 3f90 	strh.w	r3, [r7, #3984]	; 0xf90
	HAL_StatusTypeDef retVal = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	f887 3f8f 	strb.w	r3, [r7, #3983]	; 0xf8f

	if(pwm_struct->outputType != OutType_Map)
 800168e:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001692:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	791b      	ldrb	r3, [r3, #4]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d002      	beq.n	80016a4 <PDM_PWM_Map_Load_From_EEPROM+0x48>
		return retVal;
 800169e:	f897 3f8f 	ldrb.w	r3, [r7, #3983]	; 0xf8f
 80016a2:	e268      	b.n	8001b76 <PDM_PWM_Map_Load_From_EEPROM+0x51a>

	retVal = HAL_I2C_Mem_Read(hi2c, EEPROM_I2C_ADDRESS, mem_address, 2, buffer, sizeof(buffer), EEPROM_TIMEOUT);
 80016a4:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80016a8:	f6a3 7392 	subw	r3, r3, #3986	; 0xf92
 80016ac:	881a      	ldrh	r2, [r3, #0]
 80016ae:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80016b2:	f6a3 708c 	subw	r0, r3, #3980	; 0xf8c
 80016b6:	230a      	movs	r3, #10
 80016b8:	9302      	str	r3, [sp, #8]
 80016ba:	f640 737f 	movw	r3, #3967	; 0xf7f
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2302      	movs	r3, #2
 80016c8:	21a0      	movs	r1, #160	; 0xa0
 80016ca:	6800      	ldr	r0, [r0, #0]
 80016cc:	f005 f89a 	bl	8006804 <HAL_I2C_Mem_Read>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f887 3f8f 	strb.w	r3, [r7, #3983]	; 0xf8f

	if(pwm_struct->pwmMapStruct != NULL)
 80016d6:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80016da:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 823e 	beq.w	8001b64 <PDM_PWM_Map_Load_From_EEPROM+0x508>
	{
		pwm_struct->pwmMapStruct->mapLengths[0] = buffer[0];
 80016e8:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80016ec:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 80016f8:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	711a      	strb	r2, [r3, #4]
		pwm_struct->pwmMapStruct->mapLengths[1] = buffer[1];
 8001700:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001704:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 8001710:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 8001714:	7852      	ldrb	r2, [r2, #1]
 8001716:	715a      	strb	r2, [r3, #5]

		bufferAddress += 2;
 8001718:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 800171c:	3302      	adds	r3, #2
 800171e:	f8a7 3f90 	strh.w	r3, [r7, #3984]	; 0xf90

		if((pwm_struct->pwmMapStruct->mapLengths[0] > PWM_TABLE_MAX_SIZE)
 8001722:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001726:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	791b      	ldrb	r3, [r3, #4]
 8001730:	2b10      	cmp	r3, #16
 8001732:	d808      	bhi.n	8001746 <PDM_PWM_Map_Load_From_EEPROM+0xea>
				|| (pwm_struct->pwmMapStruct->mapLengths[1] > PWM_TABLE_MAX_SIZE))
 8001734:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001738:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	795b      	ldrb	r3, [r3, #5]
 8001742:	2b10      	cmp	r3, #16
 8001744:	d906      	bls.n	8001754 <PDM_PWM_Map_Load_From_EEPROM+0xf8>
			pwm_struct->outputType = OutType_Error;
 8001746:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800174a:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2204      	movs	r2, #4
 8001752:	711a      	strb	r2, [r3, #4]

		if(pwm_struct->outputType == OutType_Map)
 8001754:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001758:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	791b      	ldrb	r3, [r3, #4]
 8001760:	2b02      	cmp	r3, #2
 8001762:	f040 80a4 	bne.w	80018ae <PDM_PWM_Map_Load_From_EEPROM+0x252>
		{
			pwm_struct->pwmMapStruct->dutyCycleMap = malloc(pwm_struct->pwmMapStruct->mapLengths[0] * sizeof(uint16_t*));
 8001766:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800176a:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	791b      	ldrb	r3, [r3, #4]
 8001774:	009a      	lsls	r2, r3, #2
 8001776:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800177a:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699c      	ldr	r4, [r3, #24]
 8001782:	4610      	mov	r0, r2
 8001784:	f00e f98c 	bl	800faa0 <malloc>
 8001788:	4603      	mov	r3, r0
 800178a:	6163      	str	r3, [r4, #20]
			pwm_struct->pwmMapStruct->commandVarStep[0] = malloc(pwm_struct->pwmMapStruct->mapLengths[0] * sizeof(int16_t));
 800178c:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001790:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	791b      	ldrb	r3, [r3, #4]
 800179a:	005a      	lsls	r2, r3, #1
 800179c:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80017a0:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	699c      	ldr	r4, [r3, #24]
 80017a8:	4610      	mov	r0, r2
 80017aa:	f00e f979 	bl	800faa0 <malloc>
 80017ae:	4603      	mov	r3, r0
 80017b0:	60e3      	str	r3, [r4, #12]
			pwm_struct->pwmMapStruct->commandVarStep[1] = malloc(pwm_struct->pwmMapStruct->mapLengths[1] * sizeof(int16_t));
 80017b2:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80017b6:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	795b      	ldrb	r3, [r3, #5]
 80017c0:	005a      	lsls	r2, r3, #1
 80017c2:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80017c6:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	699c      	ldr	r4, [r3, #24]
 80017ce:	4610      	mov	r0, r2
 80017d0:	f00e f966 	bl	800faa0 <malloc>
 80017d4:	4603      	mov	r3, r0
 80017d6:	6123      	str	r3, [r4, #16]

			if((pwm_struct->pwmMapStruct->dutyCycleMap == NULL)
 80017d8:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80017dc:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d011      	beq.n	800180e <PDM_PWM_Map_Load_From_EEPROM+0x1b2>
					|| (pwm_struct->pwmMapStruct->commandVarStep[0] == NULL)
 80017ea:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80017ee:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <PDM_PWM_Map_Load_From_EEPROM+0x1b2>
					|| (pwm_struct->pwmMapStruct->commandVarStep[1] == NULL))
 80017fc:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001800:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <PDM_PWM_Map_Load_From_EEPROM+0x1c0>
				pwm_struct->outputType = OutType_Error;
 800180e:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001812:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2204      	movs	r2, #4
 800181a:	711a      	strb	r2, [r3, #4]

			for(uint8_t i = 0; (i < pwm_struct->pwmMapStruct->mapLengths[0]) && (pwm_struct->outputType == OutType_Map); i++)
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3f97 	strb.w	r3, [r7, #3991]	; 0xf97
 8001822:	e031      	b.n	8001888 <PDM_PWM_Map_Load_From_EEPROM+0x22c>
			{
				pwm_struct->pwmMapStruct->dutyCycleMap[i] = malloc(pwm_struct->pwmMapStruct->mapLengths[1] * sizeof(uint16_t));
 8001824:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001828:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	795b      	ldrb	r3, [r3, #5]
 8001832:	0059      	lsls	r1, r3, #1
 8001834:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001838:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	695a      	ldr	r2, [r3, #20]
 8001842:	f897 3f97 	ldrb.w	r3, [r7, #3991]	; 0xf97
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	18d4      	adds	r4, r2, r3
 800184a:	4608      	mov	r0, r1
 800184c:	f00e f928 	bl	800faa0 <malloc>
 8001850:	4603      	mov	r3, r0
 8001852:	6023      	str	r3, [r4, #0]

				if(pwm_struct->pwmMapStruct->dutyCycleMap[i] == NULL)
 8001854:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001858:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	f897 3f97 	ldrb.w	r3, [r7, #3991]	; 0xf97
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d106      	bne.n	800187e <PDM_PWM_Map_Load_From_EEPROM+0x222>
					pwm_struct->outputType = OutType_Error;
 8001870:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001874:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2204      	movs	r2, #4
 800187c:	711a      	strb	r2, [r3, #4]
			for(uint8_t i = 0; (i < pwm_struct->pwmMapStruct->mapLengths[0]) && (pwm_struct->outputType == OutType_Map); i++)
 800187e:	f897 3f97 	ldrb.w	r3, [r7, #3991]	; 0xf97
 8001882:	3301      	adds	r3, #1
 8001884:	f887 3f97 	strb.w	r3, [r7, #3991]	; 0xf97
 8001888:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800188c:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	791b      	ldrb	r3, [r3, #4]
 8001896:	f897 2f97 	ldrb.w	r2, [r7, #3991]	; 0xf97
 800189a:	429a      	cmp	r2, r3
 800189c:	d207      	bcs.n	80018ae <PDM_PWM_Map_Load_From_EEPROM+0x252>
 800189e:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80018a2:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d0ba      	beq.n	8001824 <PDM_PWM_Map_Load_From_EEPROM+0x1c8>
			}
		}

		if(pwm_struct->outputType == OutType_Map)
 80018ae:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80018b2:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	791b      	ldrb	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	f040 8159 	bne.w	8001b72 <PDM_PWM_Map_Load_From_EEPROM+0x516>
		{
			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3f96 	strb.w	r3, [r7, #3990]	; 0xf96
 80018c6:	e045      	b.n	8001954 <PDM_PWM_Map_Load_From_EEPROM+0x2f8>
			{
				pwm_struct->pwmMapStruct->commandVarStep[0][i]  = buffer[(i * 2) + bufferAddress] << 8;
 80018c8:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 80018cc:	005a      	lsls	r2, r3, #1
 80018ce:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 80018d2:	4413      	add	r3, r2
 80018d4:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 80018d8:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 80018dc:	5cd3      	ldrb	r3, [r2, r3]
 80018de:	0219      	lsls	r1, r3, #8
 80018e0:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80018e4:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	b20a      	sxth	r2, r1
 80018f8:	801a      	strh	r2, [r3, #0]
				pwm_struct->pwmMapStruct->commandVarStep[0][i] |= buffer[(i * 2) + 1 + bufferAddress];
 80018fa:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80018fe:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001914:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001920:	4413      	add	r3, r2
 8001922:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 8001926:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 800192a:	5cd3      	ldrb	r3, [r2, r3]
 800192c:	b21a      	sxth	r2, r3
 800192e:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001932:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	68d8      	ldr	r0, [r3, #12]
 800193c:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4403      	add	r3, r0
 8001944:	430a      	orrs	r2, r1
 8001946:	b212      	sxth	r2, r2
 8001948:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 800194a:	f897 3f96 	ldrb.w	r3, [r7, #3990]	; 0xf96
 800194e:	3301      	adds	r3, #1
 8001950:	f887 3f96 	strb.w	r3, [r7, #3990]	; 0xf96
 8001954:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001958:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	791b      	ldrb	r3, [r3, #4]
 8001962:	f897 2f96 	ldrb.w	r2, [r7, #3990]	; 0xf96
 8001966:	429a      	cmp	r2, r3
 8001968:	d3ae      	bcc.n	80018c8 <PDM_PWM_Map_Load_From_EEPROM+0x26c>
			}

			bufferAddress += pwm_struct->pwmMapStruct->mapLengths[0] * 2;
 800196a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 800196e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	791b      	ldrb	r3, [r3, #4]
 8001978:	b29b      	uxth	r3, r3
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001982:	4413      	add	r3, r2
 8001984:	f8a7 3f90 	strh.w	r3, [r7, #3984]	; 0xf90

			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[1]; i++)
 8001988:	2300      	movs	r3, #0
 800198a:	f887 3f95 	strb.w	r3, [r7, #3989]	; 0xf95
 800198e:	e045      	b.n	8001a1c <PDM_PWM_Map_Load_From_EEPROM+0x3c0>
			{
				pwm_struct->pwmMapStruct->commandVarStep[1][i]  = buffer[(i * 2) + bufferAddress] << 8;
 8001990:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 8001994:	005a      	lsls	r2, r3, #1
 8001996:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 800199a:	4413      	add	r3, r2
 800199c:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 80019a0:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 80019a4:	5cd3      	ldrb	r3, [r2, r3]
 80019a6:	0219      	lsls	r1, r3, #8
 80019a8:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80019ac:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	691a      	ldr	r2, [r3, #16]
 80019b6:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	b20a      	sxth	r2, r1
 80019c0:	801a      	strh	r2, [r3, #0]
				pwm_struct->pwmMapStruct->commandVarStep[1][i] |= buffer[(i * 2) + 1 + bufferAddress];
 80019c2:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80019c6:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80019dc:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 80019e8:	4413      	add	r3, r2
 80019ea:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 80019ee:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 80019fa:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	6918      	ldr	r0, [r3, #16]
 8001a04:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4403      	add	r3, r0
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	b212      	sxth	r2, r2
 8001a10:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[1]; i++)
 8001a12:	f897 3f95 	ldrb.w	r3, [r7, #3989]	; 0xf95
 8001a16:	3301      	adds	r3, #1
 8001a18:	f887 3f95 	strb.w	r3, [r7, #3989]	; 0xf95
 8001a1c:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001a20:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	795b      	ldrb	r3, [r3, #5]
 8001a2a:	f897 2f95 	ldrb.w	r2, [r7, #3989]	; 0xf95
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d3ae      	bcc.n	8001990 <PDM_PWM_Map_Load_From_EEPROM+0x334>
			}

			bufferAddress += pwm_struct->pwmMapStruct->mapLengths[1] * 2;
 8001a32:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001a36:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	795b      	ldrb	r3, [r3, #5]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f8a7 3f90 	strh.w	r3, [r7, #3984]	; 0xf90

			for(uint8_t x = 0; x < pwm_struct->pwmMapStruct->mapLengths[0]; x++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	f887 3f94 	strb.w	r3, [r7, #3988]	; 0xf94
 8001a56:	e078      	b.n	8001b4a <PDM_PWM_Map_Load_From_EEPROM+0x4ee>
			{
				for(uint8_t y = 0; y < pwm_struct->pwmMapStruct->mapLengths[1]; y++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 3f93 	strb.w	r3, [r7, #3987]	; 0xf93
 8001a5e:	e064      	b.n	8001b2a <PDM_PWM_Map_Load_From_EEPROM+0x4ce>
				{
					pwm_struct->pwmMapStruct->dutyCycleMap[x][y]  = buffer[(((10 * x) + y) * 2) + bufferAddress] << 8;
 8001a60:	f897 2f94 	ldrb.w	r2, [r7, #3988]	; 0xf94
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001a72:	4413      	add	r3, r2
 8001a74:	005a      	lsls	r2, r3, #1
 8001a76:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 8001a80:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 8001a84:	5cd3      	ldrb	r3, [r2, r3]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001a8c:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	6959      	ldr	r1, [r3, #20]
 8001a96:	f897 3f94 	ldrb.w	r3, [r7, #3988]	; 0xf94
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	440b      	add	r3, r1
 8001aa8:	0212      	lsls	r2, r2, #8
 8001aaa:	b292      	uxth	r2, r2
 8001aac:	801a      	strh	r2, [r3, #0]
					pwm_struct->pwmMapStruct->dutyCycleMap[x][y] |= buffer[(((10 * x) + y) * 2) + 1 + bufferAddress];
 8001aae:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001ab2:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	f897 3f94 	ldrb.w	r3, [r7, #3988]	; 0xf94
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	8819      	ldrh	r1, [r3, #0]
 8001ad0:	f897 2f94 	ldrb.w	r2, [r7, #3988]	; 0xf94
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	461a      	mov	r2, r3
 8001ade:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001ae2:	4413      	add	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	f8b7 3f90 	ldrh.w	r3, [r7, #3984]	; 0xf90
 8001aec:	4413      	add	r3, r2
 8001aee:	f607 7298 	addw	r2, r7, #3992	; 0xf98
 8001af2:	f6a2 7288 	subw	r2, r2, #3976	; 0xf88
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001afe:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	6958      	ldr	r0, [r3, #20]
 8001b08:	f897 3f94 	ldrb.w	r3, [r7, #3988]	; 0xf94
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4403      	add	r3, r0
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4403      	add	r3, r0
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	b292      	uxth	r2, r2
 8001b1e:	801a      	strh	r2, [r3, #0]
				for(uint8_t y = 0; y < pwm_struct->pwmMapStruct->mapLengths[1]; y++)
 8001b20:	f897 3f93 	ldrb.w	r3, [r7, #3987]	; 0xf93
 8001b24:	3301      	adds	r3, #1
 8001b26:	f887 3f93 	strb.w	r3, [r7, #3987]	; 0xf93
 8001b2a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001b2e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	795b      	ldrb	r3, [r3, #5]
 8001b38:	f897 2f93 	ldrb.w	r2, [r7, #3987]	; 0xf93
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d38f      	bcc.n	8001a60 <PDM_PWM_Map_Load_From_EEPROM+0x404>
			for(uint8_t x = 0; x < pwm_struct->pwmMapStruct->mapLengths[0]; x++)
 8001b40:	f897 3f94 	ldrb.w	r3, [r7, #3988]	; 0xf94
 8001b44:	3301      	adds	r3, #1
 8001b46:	f887 3f94 	strb.w	r3, [r7, #3988]	; 0xf94
 8001b4a:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001b4e:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	791b      	ldrb	r3, [r3, #4]
 8001b58:	f897 2f94 	ldrb.w	r2, [r7, #3988]	; 0xf94
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f4ff af7b 	bcc.w	8001a58 <PDM_PWM_Map_Load_From_EEPROM+0x3fc>
 8001b62:	e006      	b.n	8001b72 <PDM_PWM_Map_Load_From_EEPROM+0x516>
			}
		}
	}

	else
		pwm_struct->outputType = OutType_Error;
 8001b64:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8001b68:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2204      	movs	r2, #4
 8001b70:	711a      	strb	r2, [r3, #4]

	return retVal;
 8001b72:	f897 3f8f 	ldrb.w	r3, [r7, #3983]	; 0xf8f
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	f607 779c 	addw	r7, r7, #3996	; 0xf9c
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}

08001b80 <PDM_Hard_Code_Config>:

//Use for configuration without or with partial EEPROM data
__weak void PDM_Hard_Code_Config()
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
	//Output 1 - Bomba de Combustível
	outputStruct[0].outEnable[0] = Output_Enabled;
 8001b86:	4b80      	ldr	r3, [pc, #512]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	731a      	strb	r2, [r3, #12]
	outputStruct[0].inputEnable[0] = 0x0011;
 8001b8c:	4b7e      	ldr	r3, [pc, #504]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001b8e:	2211      	movs	r2, #17
 8001b90:	801a      	strh	r2, [r3, #0]
	outputStruct[0].inputLevels[0] = 0x0000;
 8001b92:	4b7d      	ldr	r3, [pc, #500]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	809a      	strh	r2, [r3, #4]
	pwmOutStruct[0].pwmFrequency = PWM_FREQ_10000HZ;
 8001b98:	4b7c      	ldr	r3, [pc, #496]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	805a      	strh	r2, [r3, #2]
	pwmOutStruct[0].outputType = OutType_Preset;
 8001b9e:	4b7b      	ldr	r3, [pc, #492]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	711a      	strb	r2, [r3, #4]
	pwmOutStruct[0].presetEnable[0] = 0x0011;
 8001ba4:	4b79      	ldr	r3, [pc, #484]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001ba6:	2211      	movs	r2, #17
 8001ba8:	80da      	strh	r2, [r3, #6]
	pwmOutStruct[0].presetInputs[0] = 0x0000;
 8001baa:	4b78      	ldr	r3, [pc, #480]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	815a      	strh	r2, [r3, #10]
	pwmOutStruct[0].presetDutyCycle[0] = 1000;
 8001bb0:	4b76      	ldr	r3, [pc, #472]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bb6:	81da      	strh	r2, [r3, #14]

	//Output 2 - Ventoinha Esquerda
	outputStruct[1].outEnable[0] = Output_Enabled;
 8001bb8:	4b73      	ldr	r3, [pc, #460]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	769a      	strb	r2, [r3, #26]
	outputStruct[1].inputEnable[0] = 0x001E;
 8001bbe:	4b72      	ldr	r3, [pc, #456]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001bc0:	221e      	movs	r2, #30
 8001bc2:	81da      	strh	r2, [r3, #14]
	outputStruct[1].inputLevels[0] = 0x0002;
 8001bc4:	4b70      	ldr	r3, [pc, #448]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	825a      	strh	r2, [r3, #18]
	pwmOutStruct[1].pwmFrequency = PWM_FREQ_10000HZ;
 8001bca:	4b70      	ldr	r3, [pc, #448]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001bcc:	2208      	movs	r2, #8
 8001bce:	845a      	strh	r2, [r3, #34]	; 0x22
	pwmOutStruct[1].outputType = OutType_Preset;
 8001bd0:	4b6e      	ldr	r3, [pc, #440]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pwmOutStruct[1].presetEnable[0] = 0x001E;
 8001bd8:	4b6c      	ldr	r3, [pc, #432]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001bda:	221e      	movs	r2, #30
 8001bdc:	84da      	strh	r2, [r3, #38]	; 0x26
	pwmOutStruct[1].presetInputs[0] = 0x0002;
 8001bde:	4b6b      	ldr	r3, [pc, #428]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001be0:	2202      	movs	r2, #2
 8001be2:	855a      	strh	r2, [r3, #42]	; 0x2a
	pwmOutStruct[1].presetDutyCycle[0] = 1000;
 8001be4:	4b69      	ldr	r3, [pc, #420]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bea:	85da      	strh	r2, [r3, #46]	; 0x2e

	//Output 3 - Ventoinha Direita
	outputStruct[2].outEnable[0] = Output_Enabled;
 8001bec:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	outputStruct[2].inputEnable[0] = 0x001E;
 8001bf4:	4b64      	ldr	r3, [pc, #400]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001bf6:	221e      	movs	r2, #30
 8001bf8:	839a      	strh	r2, [r3, #28]
	outputStruct[2].inputLevels[0] = 0x0002;
 8001bfa:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	841a      	strh	r2, [r3, #32]
	pwmOutStruct[2].pwmFrequency = PWM_FREQ_10000HZ;
 8001c00:	4b62      	ldr	r3, [pc, #392]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001c02:	2208      	movs	r2, #8
 8001c04:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pwmOutStruct[2].outputType = OutType_Preset;
 8001c08:	4b60      	ldr	r3, [pc, #384]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	pwmOutStruct[2].presetEnable[0] = 0x001E;
 8001c10:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001c12:	221e      	movs	r2, #30
 8001c14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	pwmOutStruct[2].presetInputs[0] = 0x0002;
 8001c18:	4b5c      	ldr	r3, [pc, #368]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	pwmOutStruct[2].presetDutyCycle[0] = 1000;
 8001c20:	4b5a      	ldr	r3, [pc, #360]	; (8001d8c <PDM_Hard_Code_Config+0x20c>)
 8001c22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
//	pwmOutStruct[3].pwmFrequency = PWM_FREQ_10000HZ;
//	pwmOutStruct[3].outputType = OutType_Preset;
//	pwmOutStruct[3].presetEnable[0] = 0x001E;
//	pwmOutStruct[3].presetInputs[0] = 0x0002;
//	pwmOutStruct[3].presetDutyCycle[0] = 1000;
	outputStruct[3].outEnable[0] = Output_Enabled;
 8001c2a:	4b57      	ldr	r3, [pc, #348]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	outputStruct[3].inputEnable[0] = 0x0010;
 8001c32:	4b55      	ldr	r3, [pc, #340]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c34:	2210      	movs	r2, #16
 8001c36:	855a      	strh	r2, [r3, #42]	; 0x2a
	outputStruct[3].inputLevels[0] = 0x0000;
 8001c38:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	85da      	strh	r2, [r3, #46]	; 0x2e

	//Output 5 - FT -> desabilitada
//	outputStruct[4].outEnable[0] = Output_Enabled;
	outputStruct[4].outEnable[0] = Output_Disabled;
 8001c3e:	4b52      	ldr	r3, [pc, #328]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	outputStruct[4].inputEnable[0] = 0x0010;
 8001c46:	4b50      	ldr	r3, [pc, #320]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c48:	2210      	movs	r2, #16
 8001c4a:	871a      	strh	r2, [r3, #56]	; 0x38
	outputStruct[4].inputLevels[0] = 0x0000;
 8001c4c:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	879a      	strh	r2, [r3, #60]	; 0x3c

	//Output 6 - Velocidade de Roda FL e FR
//	outputStruct[5].outEnable[0] = Output_Enabled;
	outputStruct[5].outEnable[0] = Output_Disabled;
 8001c52:	4b4d      	ldr	r3, [pc, #308]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	outputStruct[5].inputEnable[0] = 0x0018;
 8001c5a:	4b4b      	ldr	r3, [pc, #300]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c5c:	2218      	movs	r2, #24
 8001c5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	outputStruct[5].inputLevels[0] = 0x0000;
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	//Output 7 - Velocidade de Roda RL e RR
	outputStruct[6].outEnable[0] = Output_Enabled;
 8001c6a:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	outputStruct[6].inputEnable[0] = 0x0018;
 8001c72:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c74:	2218      	movs	r2, #24
 8001c76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	outputStruct[6].inputLevels[0] = 0x0000;
 8001c7a:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	//Output 8 - Buck DRS
	outputStruct[7].outEnable[0] = Output_Enabled;
 8001c82:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	outputStruct[7].inputEnable[0] = 0x0008;
 8001c8a:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	outputStruct[7].inputLevels[0] = 0x0000;
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	//Output 9 - ETM e CMP
	outputStruct[8].outEnable[0] = Output_Enabled;
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	outputStruct[8].inputEnable[0] = 0x0010;
 8001ca2:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	outputStruct[8].inputLevels[0] = 0x0000;
 8001caa:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

	//Output 10 - P. de Óleo e P. do Shifter
	outputStruct[9].outEnable[0] = Output_Enabled;
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	outputStruct[9].inputEnable[0] = 0x0010;
 8001cba:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	outputStruct[9].inputLevels[0] = 0x0000;
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	//Output 11 - Solenoides e P. de Combustível
	outputStruct[10].outEnable[0] = Output_Enabled;
 8001cca:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	outputStruct[10].inputEnable[0] = 0x0010;
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	outputStruct[10].inputLevels[0] = 0x0000;
 8001cda:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

	//Output 12 - Relay de Partida
	outputStruct[11].outEnable[0] = Output_Enabled;
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	outputStruct[11].inputEnable[0] = 0;//0x001A;
 8001cea:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	outputStruct[11].inputLevels[0] = 0;//0x0008;
 8001cf2:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

	//Output 13 - Buck DAq e Brake Light
	outputStruct[12].outEnable[0] = Output_Enabled;
 8001cfa:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	outputStruct[12].inputEnable[0] = 0x0008;
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001d04:	2208      	movs	r2, #8
 8001d06:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	outputStruct[12].inputLevels[0] = 0x0000;
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	//Output 14 - Bobina
	outputStruct[13].outEnable[0] = Output_Enabled;
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	outputStruct[13].inputEnable[0] = 0x0010;
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	outputStruct[13].inputLevels[0] = 0x0000;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

	//Output 15 - Bico Injetor
	outputStruct[14].outEnable[0] = Output_Enabled;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	outputStruct[14].inputEnable[0] = 0x0010;
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001d34:	2210      	movs	r2, #16
 8001d36:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	outputStruct[14].inputLevels[0] = 0x0000;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

	//Output 16 - WBO2
	outputStruct[15].outEnable[0] = Output_Enabled;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
	outputStruct[15].inputEnable[0] = 0x0010;
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
	outputStruct[15].inputLevels[0] = 0x0000;
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <PDM_Hard_Code_Config+0x208>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6

	canConfig.baudRate = CAN_1000kbps;
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <PDM_Hard_Code_Config+0x210>)
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < 16; i++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	71fb      	strb	r3, [r7, #7]
 8001d64:	e006      	b.n	8001d74 <PDM_Hard_Code_Config+0x1f4>
		dataFreqBuffer[i] = Data_Freq_50Hz;
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <PDM_Hard_Code_Config+0x214>)
 8001d6a:	2103      	movs	r1, #3
 8001d6c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 16; i++)
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	3301      	adds	r3, #1
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	d9f5      	bls.n	8001d66 <PDM_Hard_Code_Config+0x1e6>

	return;
 8001d7a:	bf00      	nop
}
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	200007d4 	.word	0x200007d4
 8001d8c:	200008b4 	.word	0x200008b4
 8001d90:	200006a4 	.word	0x200006a4
 8001d94:	2000071c 	.word	0x2000071c

08001d98 <Output_Reset_State>:

static void Output_Reset_State()
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FAULTRST_GPIO_Port, FAULTRST_Pin, GPIO_PIN_SET);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	2110      	movs	r1, #16
 8001da2:	4840      	ldr	r0, [pc, #256]	; (8001ea4 <Output_Reset_State+0x10c>)
 8001da4:	f004 fb9e 	bl	80064e4 <HAL_GPIO_WritePin>

	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	71fb      	strb	r3, [r7, #7]
 8001dac:	e00e      	b.n	8001dcc <Output_Reset_State+0x34>
		memset(&outputStruct[i], '\0', sizeof(Output_Control_Struct));
 8001dae:	79fa      	ldrb	r2, [r7, #7]
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4a3b      	ldr	r2, [pc, #236]	; (8001ea8 <Output_Reset_State+0x110>)
 8001dba:	4413      	add	r3, r2
 8001dbc:	220e      	movs	r2, #14
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f00d fe7d 	bl	800fac0 <memset>
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	d9ed      	bls.n	8001dae <Output_Reset_State+0x16>

	//Starts PWM timers
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001dd2:	210c      	movs	r1, #12
 8001dd4:	4835      	ldr	r0, [pc, #212]	; (8001eac <Output_Reset_State+0x114>)
 8001dd6:	f007 ff2b 	bl	8009c30 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8001dda:	2104      	movs	r1, #4
 8001ddc:	4834      	ldr	r0, [pc, #208]	; (8001eb0 <Output_Reset_State+0x118>)
 8001dde:	f009 f8d5 	bl	800af8c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001de2:	2108      	movs	r1, #8
 8001de4:	4833      	ldr	r0, [pc, #204]	; (8001eb4 <Output_Reset_State+0x11c>)
 8001de6:	f007 ff23 	bl	8009c30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001dea:	210c      	movs	r1, #12
 8001dec:	4832      	ldr	r0, [pc, #200]	; (8001eb8 <Output_Reset_State+0x120>)
 8001dee:	f007 ff1f 	bl	8009c30 <HAL_TIM_PWM_Start>

	//Zeroes all the PWM outputs duty cycles
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001df2:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <Output_Reset_State+0x114>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2200      	movs	r2, #0
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <Output_Reset_State+0x118>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001e02:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <Output_Reset_State+0x11c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2200      	movs	r2, #0
 8001e08:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001e0a:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <Output_Reset_State+0x120>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40

	//Sets all normal outputs to zero
	HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e18:	4828      	ldr	r0, [pc, #160]	; (8001ebc <Output_Reset_State+0x124>)
 8001e1a:	f004 fb63 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e24:	4825      	ldr	r0, [pc, #148]	; (8001ebc <Output_Reset_State+0x124>)
 8001e26:	f004 fb5d 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e30:	4822      	ldr	r0, [pc, #136]	; (8001ebc <Output_Reset_State+0x124>)
 8001e32:	f004 fb57 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e3c:	481f      	ldr	r0, [pc, #124]	; (8001ebc <Output_Reset_State+0x124>)
 8001e3e:	f004 fb51 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e48:	481c      	ldr	r0, [pc, #112]	; (8001ebc <Output_Reset_State+0x124>)
 8001e4a:	f004 fb4b 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e54:	4819      	ldr	r0, [pc, #100]	; (8001ebc <Output_Reset_State+0x124>)
 8001e56:	f004 fb45 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e60:	4816      	ldr	r0, [pc, #88]	; (8001ebc <Output_Reset_State+0x124>)
 8001e62:	f004 fb3f 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e6c:	4813      	ldr	r0, [pc, #76]	; (8001ebc <Output_Reset_State+0x124>)
 8001e6e:	f004 fb39 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2108      	movs	r1, #8
 8001e76:	4812      	ldr	r0, [pc, #72]	; (8001ec0 <Output_Reset_State+0x128>)
 8001e78:	f004 fb34 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, GPIO_PIN_RESET);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2104      	movs	r1, #4
 8001e80:	480f      	ldr	r0, [pc, #60]	; (8001ec0 <Output_Reset_State+0x128>)
 8001e82:	f004 fb2f 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2120      	movs	r1, #32
 8001e8a:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <Output_Reset_State+0x128>)
 8001e8c:	f004 fb2a 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, GPIO_PIN_RESET);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2110      	movs	r1, #16
 8001e94:	480a      	ldr	r0, [pc, #40]	; (8001ec0 <Output_Reset_State+0x128>)
 8001e96:	f004 fb25 	bl	80064e4 <HAL_GPIO_WritePin>

	return;
 8001e9a:	bf00      	nop
}
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	200007d4 	.word	0x200007d4
 8001eac:	200003e0 	.word	0x200003e0
 8001eb0:	200004b8 	.word	0x200004b8
 8001eb4:	20000398 	.word	0x20000398
 8001eb8:	20000350 	.word	0x20000350
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	40021800 	.word	0x40021800

08001ec4 <PDM_Input_Process>:

#include <pdm.h>

//Process input pin levels
void PDM_Input_Process()
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	inputLevels = 0x0000;
 8001ec8:	4b7a      	ldr	r3, [pc, #488]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	801a      	strh	r2, [r3, #0]

	inputLevels  =  HAL_GPIO_ReadPin(INPUT1_GPIO_Port, INPUT1_Pin);
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4879      	ldr	r0, [pc, #484]	; (80020b8 <PDM_Input_Process+0x1f4>)
 8001ed2:	f004 faef 	bl	80064b4 <HAL_GPIO_ReadPin>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b76      	ldr	r3, [pc, #472]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001edc:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT2_GPIO_Port, INPUT2_Pin) << 1);
 8001ede:	2102      	movs	r1, #2
 8001ee0:	4875      	ldr	r0, [pc, #468]	; (80020b8 <PDM_Input_Process+0x1f4>)
 8001ee2:	f004 fae7 	bl	80064b4 <HAL_GPIO_ReadPin>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	4b71      	ldr	r3, [pc, #452]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	4b6e      	ldr	r3, [pc, #440]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001efa:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT3_GPIO_Port, INPUT3_Pin) << 2);
 8001efc:	2104      	movs	r1, #4
 8001efe:	486e      	ldr	r0, [pc, #440]	; (80020b8 <PDM_Input_Process+0x1f4>)
 8001f00:	f004 fad8 	bl	80064b4 <HAL_GPIO_ReadPin>
 8001f04:	4603      	mov	r3, r0
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	4b67      	ldr	r3, [pc, #412]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001f18:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT4_GPIO_Port, INPUT4_Pin) << 3);
 8001f1a:	2108      	movs	r1, #8
 8001f1c:	4866      	ldr	r0, [pc, #408]	; (80020b8 <PDM_Input_Process+0x1f4>)
 8001f1e:	f004 fac9 	bl	80064b4 <HAL_GPIO_ReadPin>
 8001f22:	4603      	mov	r3, r0
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	4b62      	ldr	r3, [pc, #392]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4b5f      	ldr	r3, [pc, #380]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001f36:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT5_GPIO_Port, INPUT5_Pin) << 4);
 8001f38:	2110      	movs	r1, #16
 8001f3a:	4860      	ldr	r0, [pc, #384]	; (80020bc <PDM_Input_Process+0x1f8>)
 8001f3c:	f004 faba 	bl	80064b4 <HAL_GPIO_ReadPin>
 8001f40:	4603      	mov	r3, r0
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	b21a      	sxth	r2, r3
 8001f46:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b58      	ldr	r3, [pc, #352]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001f54:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT6_GPIO_Port, INPUT6_Pin) << 5);
 8001f56:	2120      	movs	r1, #32
 8001f58:	4858      	ldr	r0, [pc, #352]	; (80020bc <PDM_Input_Process+0x1f8>)
 8001f5a:	f004 faab 	bl	80064b4 <HAL_GPIO_ReadPin>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	015b      	lsls	r3, r3, #5
 8001f62:	b21a      	sxth	r2, r3
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b21b      	sxth	r3, r3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b50      	ldr	r3, [pc, #320]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001f72:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT7_GPIO_Port, INPUT7_Pin) << 6);
 8001f74:	2140      	movs	r1, #64	; 0x40
 8001f76:	4852      	ldr	r0, [pc, #328]	; (80020c0 <PDM_Input_Process+0x1fc>)
 8001f78:	f004 fa9c 	bl	80064b4 <HAL_GPIO_ReadPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	019b      	lsls	r3, r3, #6
 8001f80:	b21a      	sxth	r2, r3
 8001f82:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	4b49      	ldr	r3, [pc, #292]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001f90:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT8_GPIO_Port, INPUT8_Pin) << 7);
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	484a      	ldr	r0, [pc, #296]	; (80020c0 <PDM_Input_Process+0x1fc>)
 8001f96:	f004 fa8d 	bl	80064b4 <HAL_GPIO_ReadPin>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	01db      	lsls	r3, r3, #7
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	4b44      	ldr	r3, [pc, #272]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001fae:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT9_GPIO_Port, INPUT9_Pin) << 8);
 8001fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb4:	4842      	ldr	r0, [pc, #264]	; (80020c0 <PDM_Input_Process+0x1fc>)
 8001fb6:	f004 fa7d 	bl	80064b4 <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	b21a      	sxth	r2, r3
 8001fc0:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001fce:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT10_GPIO_Port, INPUT10_Pin) << 9);
 8001fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd4:	483a      	ldr	r0, [pc, #232]	; (80020c0 <PDM_Input_Process+0x1fc>)
 8001fd6:	f004 fa6d 	bl	80064b4 <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	025b      	lsls	r3, r3, #9
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b21b      	sxth	r3, r3
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8001fee:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT11_GPIO_Port, INPUT11_Pin) << 10);
 8001ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff4:	4832      	ldr	r0, [pc, #200]	; (80020c0 <PDM_Input_Process+0x1fc>)
 8001ff6:	f004 fa5d 	bl	80064b4 <HAL_GPIO_ReadPin>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	029b      	lsls	r3, r3, #10
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	b21b      	sxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b21b      	sxth	r3, r3
 800200a:	b29a      	uxth	r2, r3
 800200c:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <PDM_Input_Process+0x1f0>)
 800200e:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT12_GPIO_Port, INPUT12_Pin) << 11);
 8002010:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002014:	482a      	ldr	r0, [pc, #168]	; (80020c0 <PDM_Input_Process+0x1fc>)
 8002016:	f004 fa4d 	bl	80064b4 <HAL_GPIO_ReadPin>
 800201a:	4603      	mov	r3, r0
 800201c:	02db      	lsls	r3, r3, #11
 800201e:	b21a      	sxth	r2, r3
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b21b      	sxth	r3, r3
 8002026:	4313      	orrs	r3, r2
 8002028:	b21b      	sxth	r3, r3
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <PDM_Input_Process+0x1f0>)
 800202e:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT13_GPIO_Port, INPUT13_Pin) << 12);
 8002030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002034:	4821      	ldr	r0, [pc, #132]	; (80020bc <PDM_Input_Process+0x1f8>)
 8002036:	f004 fa3d 	bl	80064b4 <HAL_GPIO_ReadPin>
 800203a:	4603      	mov	r3, r0
 800203c:	031b      	lsls	r3, r3, #12
 800203e:	b21a      	sxth	r2, r3
 8002040:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	b21b      	sxth	r3, r3
 8002046:	4313      	orrs	r3, r2
 8002048:	b21b      	sxth	r3, r3
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <PDM_Input_Process+0x1f0>)
 800204e:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT14_GPIO_Port, INPUT14_Pin) << 13);
 8002050:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002054:	4819      	ldr	r0, [pc, #100]	; (80020bc <PDM_Input_Process+0x1f8>)
 8002056:	f004 fa2d 	bl	80064b4 <HAL_GPIO_ReadPin>
 800205a:	4603      	mov	r3, r0
 800205c:	035b      	lsls	r3, r3, #13
 800205e:	b21a      	sxth	r2, r3
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	b21b      	sxth	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	b21b      	sxth	r3, r3
 800206a:	b29a      	uxth	r2, r3
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <PDM_Input_Process+0x1f0>)
 800206e:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT15_GPIO_Port, INPUT15_Pin) << 14);
 8002070:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002074:	4811      	ldr	r0, [pc, #68]	; (80020bc <PDM_Input_Process+0x1f8>)
 8002076:	f004 fa1d 	bl	80064b4 <HAL_GPIO_ReadPin>
 800207a:	4603      	mov	r3, r0
 800207c:	039b      	lsls	r3, r3, #14
 800207e:	b21a      	sxth	r2, r3
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <PDM_Input_Process+0x1f0>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	b21b      	sxth	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	b21b      	sxth	r3, r3
 800208a:	b29a      	uxth	r2, r3
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <PDM_Input_Process+0x1f0>)
 800208e:	801a      	strh	r2, [r3, #0]

	inputLevels |= (HAL_GPIO_ReadPin(INPUT16_GPIO_Port, INPUT16_Pin) << 15);
 8002090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002094:	4809      	ldr	r0, [pc, #36]	; (80020bc <PDM_Input_Process+0x1f8>)
 8002096:	f004 fa0d 	bl	80064b4 <HAL_GPIO_ReadPin>
 800209a:	4603      	mov	r3, r0
 800209c:	03db      	lsls	r3, r3, #15
 800209e:	b21a      	sxth	r2, r3
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <PDM_Input_Process+0x1f0>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b01      	ldr	r3, [pc, #4]	; (80020b4 <PDM_Input_Process+0x1f0>)
 80020ae:	801a      	strh	r2, [r3, #0]

	return;
 80020b0:	bf00      	nop
}
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200007d0 	.word	0x200007d0
 80020b8:	40021400 	.word	0x40021400
 80020bc:	40020400 	.word	0x40020400
 80020c0:	40020800 	.word	0x40020800

080020c4 <PDM_Output_Process>:

//Process output pin levels
void PDM_Output_Process()
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
	GPIO_PinState output_levels[NBR_OF_OUTPUTS];

	//Process input conditions and safety flags for each output
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
 80020ce:	e062      	b.n	8002196 <PDM_Output_Process+0xd2>
	{
		if((((flagDriverSafety >> i) & 0x01) == 0)
 80020d0:	4b68      	ldr	r3, [pc, #416]	; (8002274 <PDM_Output_Process+0x1b0>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	7dfb      	ldrb	r3, [r7, #23]
 80020d8:	fa42 f303 	asr.w	r3, r2, r3
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d14f      	bne.n	8002184 <PDM_Output_Process+0xc0>
				&& (__PDM_INPUT_CONDITION_COMPARE(outputStruct[i].inputEnable[0], outputStruct[i].inputLevels[0], outputStruct[i].outEnable[0])
 80020e4:	7dfa      	ldrb	r2, [r7, #23]
 80020e6:	4964      	ldr	r1, [pc, #400]	; (8002278 <PDM_Output_Process+0x1b4>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	440b      	add	r3, r1
 80020f2:	3304      	adds	r3, #4
 80020f4:	881a      	ldrh	r2, [r3, #0]
 80020f6:	4b61      	ldr	r3, [pc, #388]	; (800227c <PDM_Output_Process+0x1b8>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	4053      	eors	r3, r2
 80020fc:	b299      	uxth	r1, r3
 80020fe:	7dfa      	ldrb	r2, [r7, #23]
 8002100:	485d      	ldr	r0, [pc, #372]	; (8002278 <PDM_Output_Process+0x1b4>)
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4403      	add	r3, r0
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	400b      	ands	r3, r1
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10a      	bne.n	800212c <PDM_Output_Process+0x68>
 8002116:	7dfa      	ldrb	r2, [r7, #23]
 8002118:	4957      	ldr	r1, [pc, #348]	; (8002278 <PDM_Output_Process+0x1b4>)
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	440b      	add	r3, r1
 8002124:	330c      	adds	r3, #12
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d024      	beq.n	8002176 <PDM_Output_Process+0xb2>
				||  __PDM_INPUT_CONDITION_COMPARE(outputStruct[i].inputEnable[1], outputStruct[i].inputLevels[1], outputStruct[i].outEnable[1])))
 800212c:	7dfa      	ldrb	r2, [r7, #23]
 800212e:	4952      	ldr	r1, [pc, #328]	; (8002278 <PDM_Output_Process+0x1b4>)
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	440b      	add	r3, r1
 800213a:	3306      	adds	r3, #6
 800213c:	881a      	ldrh	r2, [r3, #0]
 800213e:	4b4f      	ldr	r3, [pc, #316]	; (800227c <PDM_Output_Process+0x1b8>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	4053      	eors	r3, r2
 8002144:	b299      	uxth	r1, r3
 8002146:	7dfa      	ldrb	r2, [r7, #23]
 8002148:	484b      	ldr	r0, [pc, #300]	; (8002278 <PDM_Output_Process+0x1b4>)
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4403      	add	r3, r0
 8002154:	3302      	adds	r3, #2
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	400b      	ands	r3, r1
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d111      	bne.n	8002184 <PDM_Output_Process+0xc0>
 8002160:	7dfa      	ldrb	r2, [r7, #23]
 8002162:	4945      	ldr	r1, [pc, #276]	; (8002278 <PDM_Output_Process+0x1b4>)
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	440b      	add	r3, r1
 800216e:	330d      	adds	r3, #13
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d106      	bne.n	8002184 <PDM_Output_Process+0xc0>
			output_levels[i] = GPIO_PIN_SET;
 8002176:	7dfb      	ldrb	r3, [r7, #23]
 8002178:	3318      	adds	r3, #24
 800217a:	443b      	add	r3, r7
 800217c:	2201      	movs	r2, #1
 800217e:	f803 2c14 	strb.w	r2, [r3, #-20]
 8002182:	e005      	b.n	8002190 <PDM_Output_Process+0xcc>
		else
			output_levels[i] = GPIO_PIN_RESET;
 8002184:	7dfb      	ldrb	r3, [r7, #23]
 8002186:	3318      	adds	r3, #24
 8002188:	443b      	add	r3, r7
 800218a:	2200      	movs	r2, #0
 800218c:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t i = 0; i < NBR_OF_OUTPUTS; i++)
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	3301      	adds	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d999      	bls.n	80020d0 <PDM_Output_Process+0xc>
	}

	HAL_GPIO_WritePin(OUTPUT5_GPIO_Port, OUTPUT5_Pin, output_levels[4]);
 800219c:	7a3b      	ldrb	r3, [r7, #8]
 800219e:	461a      	mov	r2, r3
 80021a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021a4:	4836      	ldr	r0, [pc, #216]	; (8002280 <PDM_Output_Process+0x1bc>)
 80021a6:	f004 f99d 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT6_GPIO_Port, OUTPUT6_Pin, output_levels[5]);
 80021aa:	7a7b      	ldrb	r3, [r7, #9]
 80021ac:	461a      	mov	r2, r3
 80021ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b2:	4833      	ldr	r0, [pc, #204]	; (8002280 <PDM_Output_Process+0x1bc>)
 80021b4:	f004 f996 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT7_GPIO_Port, OUTPUT7_Pin, output_levels[6]);
 80021b8:	7abb      	ldrb	r3, [r7, #10]
 80021ba:	461a      	mov	r2, r3
 80021bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c0:	482f      	ldr	r0, [pc, #188]	; (8002280 <PDM_Output_Process+0x1bc>)
 80021c2:	f004 f98f 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT8_GPIO_Port, OUTPUT8_Pin, output_levels[7]);
 80021c6:	7afb      	ldrb	r3, [r7, #11]
 80021c8:	461a      	mov	r2, r3
 80021ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ce:	482c      	ldr	r0, [pc, #176]	; (8002280 <PDM_Output_Process+0x1bc>)
 80021d0:	f004 f988 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT9_GPIO_Port, OUTPUT9_Pin, output_levels[8]);
 80021d4:	7b3b      	ldrb	r3, [r7, #12]
 80021d6:	461a      	mov	r2, r3
 80021d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021dc:	4828      	ldr	r0, [pc, #160]	; (8002280 <PDM_Output_Process+0x1bc>)
 80021de:	f004 f981 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT10_GPIO_Port, OUTPUT10_Pin, output_levels[9]);
 80021e2:	7b7b      	ldrb	r3, [r7, #13]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ea:	4825      	ldr	r0, [pc, #148]	; (8002280 <PDM_Output_Process+0x1bc>)
 80021ec:	f004 f97a 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT11_GPIO_Port, OUTPUT11_Pin, output_levels[10]);
 80021f0:	7bbb      	ldrb	r3, [r7, #14]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f8:	4821      	ldr	r0, [pc, #132]	; (8002280 <PDM_Output_Process+0x1bc>)
 80021fa:	f004 f973 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT12_GPIO_Port, OUTPUT12_Pin, output_levels[11]);
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	461a      	mov	r2, r3
 8002202:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002206:	481e      	ldr	r0, [pc, #120]	; (8002280 <PDM_Output_Process+0x1bc>)
 8002208:	f004 f96c 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT13_GPIO_Port, OUTPUT13_Pin, output_levels[12]);
 800220c:	7c3b      	ldrb	r3, [r7, #16]
 800220e:	461a      	mov	r2, r3
 8002210:	2108      	movs	r1, #8
 8002212:	481c      	ldr	r0, [pc, #112]	; (8002284 <PDM_Output_Process+0x1c0>)
 8002214:	f004 f966 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT14_GPIO_Port, OUTPUT14_Pin, output_levels[13]);
 8002218:	7c7b      	ldrb	r3, [r7, #17]
 800221a:	461a      	mov	r2, r3
 800221c:	2104      	movs	r1, #4
 800221e:	4819      	ldr	r0, [pc, #100]	; (8002284 <PDM_Output_Process+0x1c0>)
 8002220:	f004 f960 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT15_GPIO_Port, OUTPUT15_Pin, output_levels[14]);
 8002224:	7cbb      	ldrb	r3, [r7, #18]
 8002226:	461a      	mov	r2, r3
 8002228:	2120      	movs	r1, #32
 800222a:	4816      	ldr	r0, [pc, #88]	; (8002284 <PDM_Output_Process+0x1c0>)
 800222c:	f004 f95a 	bl	80064e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT16_GPIO_Port, OUTPUT16_Pin, output_levels[15]);
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	461a      	mov	r2, r3
 8002234:	2110      	movs	r1, #16
 8002236:	4813      	ldr	r0, [pc, #76]	; (8002284 <PDM_Output_Process+0x1c0>)
 8002238:	f004 f954 	bl	80064e4 <HAL_GPIO_WritePin>
	PDM_PWM_Output_Process(&pwmOutStruct[0], 0, output_levels[0]);
 800223c:	793b      	ldrb	r3, [r7, #4]
 800223e:	461a      	mov	r2, r3
 8002240:	2100      	movs	r1, #0
 8002242:	4811      	ldr	r0, [pc, #68]	; (8002288 <PDM_Output_Process+0x1c4>)
 8002244:	f000 f8e6 	bl	8002414 <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[1], 1, output_levels[1]);
 8002248:	797b      	ldrb	r3, [r7, #5]
 800224a:	461a      	mov	r2, r3
 800224c:	2101      	movs	r1, #1
 800224e:	480f      	ldr	r0, [pc, #60]	; (800228c <PDM_Output_Process+0x1c8>)
 8002250:	f000 f8e0 	bl	8002414 <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[2], 2, output_levels[2]);
 8002254:	79bb      	ldrb	r3, [r7, #6]
 8002256:	461a      	mov	r2, r3
 8002258:	2102      	movs	r1, #2
 800225a:	480d      	ldr	r0, [pc, #52]	; (8002290 <PDM_Output_Process+0x1cc>)
 800225c:	f000 f8da 	bl	8002414 <PDM_PWM_Output_Process>
	PDM_PWM_Output_Process(&pwmOutStruct[3], 3, output_levels[3]);
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	461a      	mov	r2, r3
 8002264:	2103      	movs	r1, #3
 8002266:	480b      	ldr	r0, [pc, #44]	; (8002294 <PDM_Output_Process+0x1d0>)
 8002268:	f000 f8d4 	bl	8002414 <PDM_PWM_Output_Process>

	return;
 800226c:	bf00      	nop
}
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	200007c8 	.word	0x200007c8
 8002278:	200007d4 	.word	0x200007d4
 800227c:	200007d0 	.word	0x200007d0
 8002280:	40020c00 	.word	0x40020c00
 8002284:	40021800 	.word	0x40021800
 8002288:	200008b4 	.word	0x200008b4
 800228c:	200008d4 	.word	0x200008d4
 8002290:	200008f4 	.word	0x200008f4
 8002294:	20000914 	.word	0x20000914

08002298 <PDM_PWM_Init>:
static HAL_StatusTypeDef PWM_SoftStart(PWM_Control_Struct *pwm_struct);
static uint16_t PWM_Map_Duty_Cycle_Set(PDM_PWM_Map_Struct* pwm_map_struct);

//Initializes PWM output and sets its CAN bus filter
void PDM_PWM_Init(CAN_HandleTypeDef *hcan, PWM_Control_Struct* pwm_struct, uint8_t pwm_out_number)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	4613      	mov	r3, r2
 80022a4:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef* htim;
	uint16_t timChannel = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	837b      	strh	r3, [r7, #26]
	uint16_t prescaler = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	833b      	strh	r3, [r7, #24]
	uint16_t memAddress = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	82fb      	strh	r3, [r7, #22]

	//Sets the verify bit of the PWM output to sign if PWM is enabled
	dataIdBuffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] |= (pwmPinStatus >> pwm_out_number) & 0x01;
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	331a      	adds	r3, #26
 80022b6:	4a4e      	ldr	r2, [pc, #312]	; (80023f0 <PDM_PWM_Init+0x158>)
 80022b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022bc:	b21a      	sxth	r2, r3
 80022be:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <PDM_PWM_Init+0x15c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	4619      	mov	r1, r3
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	fa41 f303 	asr.w	r3, r1, r3
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	331a      	adds	r3, #26
 80022da:	b291      	uxth	r1, r2
 80022dc:	4a44      	ldr	r2, [pc, #272]	; (80023f0 <PDM_PWM_Init+0x158>)
 80022de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d87d      	bhi.n	80023e4 <PDM_PWM_Init+0x14c>
 80022e8:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <PDM_PWM_Init+0x58>)
 80022ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ee:	bf00      	nop
 80022f0:	08002301 	.word	0x08002301
 80022f4:	0800230b 	.word	0x0800230b
 80022f8:	08002315 	.word	0x08002315
 80022fc:	0800231f 	.word	0x0800231f
 8002300:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <PDM_PWM_Init+0x160>)
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	230c      	movs	r3, #12
 8002306:	837b      	strh	r3, [r7, #26]
 8002308:	e00d      	b.n	8002326 <PDM_PWM_Init+0x8e>
 800230a:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <PDM_PWM_Init+0x164>)
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	2304      	movs	r3, #4
 8002310:	837b      	strh	r3, [r7, #26]
 8002312:	e008      	b.n	8002326 <PDM_PWM_Init+0x8e>
 8002314:	4b3a      	ldr	r3, [pc, #232]	; (8002400 <PDM_PWM_Init+0x168>)
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	2308      	movs	r3, #8
 800231a:	837b      	strh	r3, [r7, #26]
 800231c:	e003      	b.n	8002326 <PDM_PWM_Init+0x8e>
 800231e:	4b39      	ldr	r3, [pc, #228]	; (8002404 <PDM_PWM_Init+0x16c>)
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	230c      	movs	r3, #12
 8002324:	837b      	strh	r3, [r7, #26]
 8002326:	bf00      	nop

	if(pwm_struct->pwmFrequency == 0)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	885b      	ldrh	r3, [r3, #2]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <PDM_PWM_Init+0xa0>
		pwm_struct->pwmFrequency = PWM_FREQ_100HZ;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f240 3283 	movw	r2, #899	; 0x383
 8002336:	805a      	strh	r2, [r3, #2]

	//Sets the PWM frequency
	if((htim->Instance == TIM1) || (htim->Instance == TIM8))
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a32      	ldr	r2, [pc, #200]	; (8002408 <PDM_PWM_Init+0x170>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d004      	beq.n	800234c <PDM_PWM_Init+0xb4>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a31      	ldr	r2, [pc, #196]	; (800240c <PDM_PWM_Init+0x174>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d106      	bne.n	800235a <PDM_PWM_Init+0xc2>
		prescaler = (pwm_struct->pwmFrequency * 2) + 1;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	885b      	ldrh	r3, [r3, #2]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	b29b      	uxth	r3, r3
 8002354:	3301      	adds	r3, #1
 8002356:	833b      	strh	r3, [r7, #24]
 8002358:	e002      	b.n	8002360 <PDM_PWM_Init+0xc8>
	else
		prescaler = pwm_struct->pwmFrequency;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	885b      	ldrh	r3, [r3, #2]
 800235e:	833b      	strh	r3, [r7, #24]

	__HAL_TIM_SET_PRESCALER(htim, prescaler);
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	8b3a      	ldrh	r2, [r7, #24]
 8002366:	629a      	str	r2, [r3, #40]	; 0x28

	//Zero the duty cycle
	pwm_struct->dutyCycle = 0;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2200      	movs	r2, #0
 800236c:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(htim, timChannel, 0);
 800236e:	8b7b      	ldrh	r3, [r7, #26]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d104      	bne.n	800237e <PDM_PWM_Init+0xe6>
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2200      	movs	r2, #0
 800237a:	635a      	str	r2, [r3, #52]	; 0x34
 800237c:	e013      	b.n	80023a6 <PDM_PWM_Init+0x10e>
 800237e:	8b7b      	ldrh	r3, [r7, #26]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d104      	bne.n	800238e <PDM_PWM_Init+0xf6>
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2300      	movs	r3, #0
 800238a:	6393      	str	r3, [r2, #56]	; 0x38
 800238c:	e00b      	b.n	80023a6 <PDM_PWM_Init+0x10e>
 800238e:	8b7b      	ldrh	r3, [r7, #26]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d104      	bne.n	800239e <PDM_PWM_Init+0x106>
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2300      	movs	r3, #0
 800239a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800239c:	e003      	b.n	80023a6 <PDM_PWM_Init+0x10e>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	2300      	movs	r3, #0
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40

	//Deallocates all pointers
	PWM_DeAlloc(pwm_struct);
 80023a6:	68b8      	ldr	r0, [r7, #8]
 80023a8:	f000 f952 	bl	8002650 <PWM_DeAlloc>

	if(pwm_struct->softStart == SoftStart_Enabled)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	795b      	ldrb	r3, [r3, #5]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d105      	bne.n	80023c0 <PDM_PWM_Init+0x128>
		PDM_PWM_Load_SoftStart_From_EEPROM(&hi2c1, pwm_struct, pwm_out_number);
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	4815      	ldr	r0, [pc, #84]	; (8002410 <PDM_PWM_Init+0x178>)
 80023bc:	f7ff f82e 	bl	800141c <PDM_PWM_Load_SoftStart_From_EEPROM>

	//Configures 3D map or Artificial Neural Network
	if(pwm_struct->outputType == OutType_Map)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	791b      	ldrb	r3, [r3, #4]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d105      	bne.n	80023d4 <PDM_PWM_Init+0x13c>
		PDM_PWM_Map_Load_From_EEPROM(&hi2c1, pwm_struct, memAddress);
 80023c8:	8afb      	ldrh	r3, [r7, #22]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	4810      	ldr	r0, [pc, #64]	; (8002410 <PDM_PWM_Init+0x178>)
 80023d0:	f7ff f944 	bl	800165c <PDM_PWM_Map_Load_From_EEPROM>

	//Deallocates all pointers if there is any allocation problem
	if(pwm_struct->outputType == OutType_Error)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	791b      	ldrb	r3, [r3, #4]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d105      	bne.n	80023e8 <PDM_PWM_Init+0x150>
		PWM_DeAlloc(pwm_struct);
 80023dc:	68b8      	ldr	r0, [r7, #8]
 80023de:	f000 f937 	bl	8002650 <PWM_DeAlloc>

	return;
 80023e2:	e001      	b.n	80023e8 <PDM_PWM_Init+0x150>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 80023e4:	bf00      	nop
 80023e6:	e000      	b.n	80023ea <PDM_PWM_Init+0x152>
	return;
 80023e8:	bf00      	nop
}
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000778 	.word	0x20000778
 80023f4:	200007ce 	.word	0x200007ce
 80023f8:	200003e0 	.word	0x200003e0
 80023fc:	200004b8 	.word	0x200004b8
 8002400:	20000398 	.word	0x20000398
 8002404:	20000350 	.word	0x20000350
 8002408:	40010000 	.word	0x40010000
 800240c:	40010400 	.word	0x40010400
 8002410:	200002fc 	.word	0x200002fc

08002414 <PDM_PWM_Output_Process>:

//Process input conditions and command variables and sets the PWM output duty cycle
void PDM_PWM_Output_Process(PWM_Control_Struct *pwm_struct, uint8_t pwm_out_number, GPIO_PinState output_level)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
 8002420:	4613      	mov	r3, r2
 8002422:	70bb      	strb	r3, [r7, #2]
	uint8_t softStart = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]
	uint16_t timChannel;
	TIM_HandleTypeDef* htim;

	//Select TIM_HandleTypeDef and channel based on pwm_out_number
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	2b03      	cmp	r3, #3
 800242c:	f200 80fe 	bhi.w	800262c <PDM_PWM_Output_Process+0x218>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <PDM_PWM_Output_Process+0x24>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	08002453 	.word	0x08002453
 8002440:	0800245d 	.word	0x0800245d
 8002444:	08002467 	.word	0x08002467
 8002448:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <PDM_PWM_Output_Process+0x220>)
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	230c      	movs	r3, #12
 800244e:	81bb      	strh	r3, [r7, #12]
 8002450:	e00d      	b.n	800246e <PDM_PWM_Output_Process+0x5a>
 8002452:	4b79      	ldr	r3, [pc, #484]	; (8002638 <PDM_PWM_Output_Process+0x224>)
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	2304      	movs	r3, #4
 8002458:	81bb      	strh	r3, [r7, #12]
 800245a:	e008      	b.n	800246e <PDM_PWM_Output_Process+0x5a>
 800245c:	4b77      	ldr	r3, [pc, #476]	; (800263c <PDM_PWM_Output_Process+0x228>)
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	2308      	movs	r3, #8
 8002462:	81bb      	strh	r3, [r7, #12]
 8002464:	e003      	b.n	800246e <PDM_PWM_Output_Process+0x5a>
 8002466:	4b76      	ldr	r3, [pc, #472]	; (8002640 <PDM_PWM_Output_Process+0x22c>)
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	230c      	movs	r3, #12
 800246c:	81bb      	strh	r3, [r7, #12]
 800246e:	bf00      	nop

	if((output_level == GPIO_PIN_SET)
 8002470:	78bb      	ldrb	r3, [r7, #2]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d15c      	bne.n	8002530 <PDM_PWM_Output_Process+0x11c>
			&& (((flagDriverSafety >> pwm_out_number) & 0x01) == 0)
 8002476:	4b73      	ldr	r3, [pc, #460]	; (8002644 <PDM_PWM_Output_Process+0x230>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	fa42 f303 	asr.w	r3, r2, r3
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d152      	bne.n	8002530 <PDM_PWM_Output_Process+0x11c>
			&& (pwm_struct->outputType != OutType_Error))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	791b      	ldrb	r3, [r3, #4]
 800248e:	2b04      	cmp	r3, #4
 8002490:	d04e      	beq.n	8002530 <PDM_PWM_Output_Process+0x11c>
	{
		if((pwm_struct->softStart == SoftStart_Enabled) && (pwm_struct->softStartStruct != NULL) && (pwm_struct->dutyCycle == 0))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	795b      	ldrb	r3, [r3, #5]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d109      	bne.n	80024ae <PDM_PWM_Output_Process+0x9a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <PDM_PWM_Output_Process+0x9a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <PDM_PWM_Output_Process+0x9a>
			softStart = 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]

		//Sets duty cycle to 100% if the output is set as standard
		if(pwm_struct->outputType == OutType_Standard)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	791b      	ldrb	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d104      	bne.n	80024c0 <PDM_PWM_Output_Process+0xac>
			pwm_struct->dutyCycle = 1000;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024bc:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 80024be:	e03a      	b.n	8002536 <PDM_PWM_Output_Process+0x122>

		//Checks if the inputs match the first PWM preset
		else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct->presetEnable[0], pwm_struct->presetInputs[0], Output_Enabled))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	895a      	ldrh	r2, [r3, #10]
 80024c4:	4b60      	ldr	r3, [pc, #384]	; (8002648 <PDM_PWM_Output_Process+0x234>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	4053      	eors	r3, r2
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	88db      	ldrh	r3, [r3, #6]
 80024d0:	4013      	ands	r3, r2
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d104      	bne.n	80024e2 <PDM_PWM_Output_Process+0xce>
			pwm_struct->dutyCycle = pwm_struct->presetDutyCycle[0];
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	89da      	ldrh	r2, [r3, #14]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 80024e0:	e029      	b.n	8002536 <PDM_PWM_Output_Process+0x122>

		//Checks if the inputs match the second PWM preset
		else if(__PDM_INPUT_CONDITION_COMPARE(pwm_struct->presetEnable[1], pwm_struct->presetInputs[1], Output_Enabled))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	899a      	ldrh	r2, [r3, #12]
 80024e6:	4b58      	ldr	r3, [pc, #352]	; (8002648 <PDM_PWM_Output_Process+0x234>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	4053      	eors	r3, r2
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	891b      	ldrh	r3, [r3, #8]
 80024f2:	4013      	ands	r3, r2
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d104      	bne.n	8002504 <PDM_PWM_Output_Process+0xf0>
			pwm_struct->dutyCycle = pwm_struct->presetDutyCycle[1];
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	8a1a      	ldrh	r2, [r3, #16]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8002502:	e018      	b.n	8002536 <PDM_PWM_Output_Process+0x122>

		//Sets duty cycle based on the 3D map if enabled
		else if((pwm_struct->outputType == OutType_Map) && (pwm_struct->pwmMapStruct != NULL))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	791b      	ldrb	r3, [r3, #4]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d10d      	bne.n	8002528 <PDM_PWM_Output_Process+0x114>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <PDM_PWM_Output_Process+0x114>
			pwm_struct->dutyCycle = PWM_Map_Duty_Cycle_Set(pwm_struct->pwmMapStruct);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f97f 	bl	800281c <PWM_Map_Duty_Cycle_Set>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 8002526:	e006      	b.n	8002536 <PDM_PWM_Output_Process+0x122>

		else
			pwm_struct->dutyCycle = 0;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]
		if(pwm_struct->outputType == OutType_Standard)
 800252e:	e002      	b.n	8002536 <PDM_PWM_Output_Process+0x122>
	}

	else
		pwm_struct->dutyCycle = 0;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	801a      	strh	r2, [r3, #0]

	if(softStart == 0)
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d123      	bne.n	8002584 <PDM_PWM_Output_Process+0x170>
		__HAL_TIM_SET_COMPARE(htim, timChannel, pwm_struct->dutyCycle);
 800253c:	89bb      	ldrh	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <PDM_PWM_Output_Process+0x13a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	881a      	ldrh	r2, [r3, #0]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	635a      	str	r2, [r3, #52]	; 0x34
 800254c:	e066      	b.n	800261c <PDM_PWM_Output_Process+0x208>
 800254e:	89bb      	ldrh	r3, [r7, #12]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d106      	bne.n	8002562 <PDM_PWM_Output_Process+0x14e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	8819      	ldrh	r1, [r3, #0]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	460b      	mov	r3, r1
 800255e:	6393      	str	r3, [r2, #56]	; 0x38
 8002560:	e05c      	b.n	800261c <PDM_PWM_Output_Process+0x208>
 8002562:	89bb      	ldrh	r3, [r7, #12]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d106      	bne.n	8002576 <PDM_PWM_Output_Process+0x162>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	8819      	ldrh	r1, [r3, #0]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	460b      	mov	r3, r1
 8002572:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002574:	e052      	b.n	800261c <PDM_PWM_Output_Process+0x208>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8819      	ldrh	r1, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	460b      	mov	r3, r1
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	e04b      	b.n	800261c <PDM_PWM_Output_Process+0x208>

	else
	{
		if(PWM_SoftStart(pwm_struct) == HAL_OK)
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f8f9 	bl	800277c <PWM_SoftStart>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d122      	bne.n	80025d6 <PDM_PWM_Output_Process+0x1c2>
		{
			if(pwm_out_number == 1)
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d10f      	bne.n	80025b6 <PDM_PWM_Output_Process+0x1a2>
			{
				HAL_TIMEx_PWMN_Stop(htim, timChannel);
 8002596:	89bb      	ldrh	r3, [r7, #12]
 8002598:	4619      	mov	r1, r3
 800259a:	68b8      	ldr	r0, [r7, #8]
 800259c:	f008 fdb0 	bl	800b100 <HAL_TIMEx_PWMN_Stop>
				HAL_TIMEx_PWMN_Start_DMA(htim, timChannel, (uint32_t*) pwm_struct->softStartStruct->dutyCycleBuffer, pwm_struct->softStartStruct->dutyCycles);
 80025a0:	89b9      	ldrh	r1, [r7, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	68b8      	ldr	r0, [r7, #8]
 80025b0:	f008 fe04 	bl	800b1bc <HAL_TIMEx_PWMN_Start_DMA>
 80025b4:	e032      	b.n	800261c <PDM_PWM_Output_Process+0x208>
			}

			else
			{
				HAL_TIM_PWM_Stop(htim, timChannel);
 80025b6:	89bb      	ldrh	r3, [r7, #12]
 80025b8:	4619      	mov	r1, r3
 80025ba:	68b8      	ldr	r0, [r7, #8]
 80025bc:	f007 fc00 	bl	8009dc0 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start_DMA(htim, timChannel, (uint32_t*) pwm_struct->softStartStruct->dutyCycleBuffer, pwm_struct->softStartStruct->dutyCycles);
 80025c0:	89b9      	ldrh	r1, [r7, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	68b8      	ldr	r0, [r7, #8]
 80025d0:	f007 fc66 	bl	8009ea0 <HAL_TIM_PWM_Start_DMA>
 80025d4:	e022      	b.n	800261c <PDM_PWM_Output_Process+0x208>
			}
		}

		else
			__HAL_TIM_SET_COMPARE(htim, timChannel, pwm_struct->dutyCycle);
 80025d6:	89bb      	ldrh	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d105      	bne.n	80025e8 <PDM_PWM_Output_Process+0x1d4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	881a      	ldrh	r2, [r3, #0]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34
 80025e6:	e019      	b.n	800261c <PDM_PWM_Output_Process+0x208>
 80025e8:	89bb      	ldrh	r3, [r7, #12]
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d106      	bne.n	80025fc <PDM_PWM_Output_Process+0x1e8>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	8819      	ldrh	r1, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	460b      	mov	r3, r1
 80025f8:	6393      	str	r3, [r2, #56]	; 0x38
 80025fa:	e00f      	b.n	800261c <PDM_PWM_Output_Process+0x208>
 80025fc:	89bb      	ldrh	r3, [r7, #12]
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d106      	bne.n	8002610 <PDM_PWM_Output_Process+0x1fc>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	8819      	ldrh	r1, [r3, #0]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	460b      	mov	r3, r1
 800260c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800260e:	e005      	b.n	800261c <PDM_PWM_Output_Process+0x208>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	8819      	ldrh	r1, [r3, #0]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	460b      	mov	r3, r1
 800261a:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//Stores output duty cycle inside the data buffer to be sent via CAN/USB
	dataBuffer[NBR_OF_DATA_CHANNELS - NBR_OF_PWM_OUTPUTS + pwm_out_number] = pwm_struct->dutyCycle;
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	331a      	adds	r3, #26
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	8811      	ldrh	r1, [r2, #0]
 8002624:	4a09      	ldr	r2, [pc, #36]	; (800264c <PDM_PWM_Output_Process+0x238>)
 8002626:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return;
 800262a:	e000      	b.n	800262e <PDM_PWM_Output_Process+0x21a>
	__PDM_PWM_SELECT_TIM(pwm_out_number);
 800262c:	bf00      	nop
}
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	200003e0 	.word	0x200003e0
 8002638:	200004b8 	.word	0x200004b8
 800263c:	20000398 	.word	0x20000398
 8002640:	20000350 	.word	0x20000350
 8002644:	200007c8 	.word	0x200007c8
 8002648:	200007d0 	.word	0x200007d0
 800264c:	2000073c 	.word	0x2000073c

08002650 <PWM_DeAlloc>:

static void PWM_DeAlloc(PWM_Control_Struct *pwm_struct)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	if(pwm_struct->softStartStruct != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d019      	beq.n	8002694 <PWM_DeAlloc+0x44>
	{

		if(pwm_struct->softStartStruct->dutyCycleBuffer != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <PWM_DeAlloc+0x2e>
		{
			free(pwm_struct->softStartStruct->dutyCycleBuffer);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4618      	mov	r0, r3
 8002672:	f00d fa1d 	bl	800fab0 <free>
			pwm_struct->softStartStruct->dutyCycleBuffer = NULL;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	2200      	movs	r2, #0
 800267c:	605a      	str	r2, [r3, #4]
		}

		free(pwm_struct->softStartStruct);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	4618      	mov	r0, r3
 8002684:	f00d fa14 	bl	800fab0 <free>
		pwm_struct->softStartStruct = NULL;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
		pwm_struct->softStart = SoftStart_Disabled;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	715a      	strb	r2, [r3, #5]
	}

	if(pwm_struct->pwmMapStruct != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d05b      	beq.n	8002754 <PWM_DeAlloc+0x104>
	{
		if(pwm_struct->pwmMapStruct->commandVarStep[0] != NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <PWM_DeAlloc+0x6a>
		{
			free(pwm_struct->pwmMapStruct->commandVarStep[0]);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f00d f9ff 	bl	800fab0 <free>
			pwm_struct->pwmMapStruct->commandVarStep[0] = NULL;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
		}

		if(pwm_struct->pwmMapStruct->commandVarStep[1] != NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <PWM_DeAlloc+0x88>
		{
			free(pwm_struct->pwmMapStruct->commandVarStep[1]);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f00d f9f0 	bl	800fab0 <free>
			pwm_struct->pwmMapStruct->commandVarStep[1] = NULL;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
		}

		for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e01d      	b.n	800271a <PWM_DeAlloc+0xca>
		{
			if(pwm_struct->pwmMapStruct->dutyCycleMap[i] != NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d011      	beq.n	8002714 <PWM_DeAlloc+0xc4>
			{
				free(pwm_struct->pwmMapStruct->dutyCycleMap[i]);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f00d f9d6 	bl	800fab0 <free>
				pwm_struct->pwmMapStruct->dutyCycleMap[i] = NULL;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < pwm_struct->pwmMapStruct->mapLengths[0]; i++)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	3301      	adds	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	791b      	ldrb	r3, [r3, #4]
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	429a      	cmp	r2, r3
 8002724:	d3db      	bcc.n	80026de <PWM_DeAlloc+0x8e>
			}
		}

		if(pwm_struct->pwmMapStruct->dutyCycleMap != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d009      	beq.n	8002744 <PWM_DeAlloc+0xf4>
		{
			free(pwm_struct->pwmMapStruct->dutyCycleMap);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	4618      	mov	r0, r3
 8002738:	f00d f9ba 	bl	800fab0 <free>
			pwm_struct->pwmMapStruct->dutyCycleMap = NULL;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2200      	movs	r2, #0
 8002742:	615a      	str	r2, [r3, #20]
		}

		free(pwm_struct->pwmMapStruct);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4618      	mov	r0, r3
 800274a:	f00d f9b1 	bl	800fab0 <free>
		pwm_struct->pwmMapStruct = NULL;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
	}

	if((pwm_struct->presetEnable[0] != 0)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	88db      	ldrh	r3, [r3, #6]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d103      	bne.n	8002764 <PWM_DeAlloc+0x114>
			|| (pwm_struct->presetEnable[1] != 0))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	891b      	ldrh	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <PWM_DeAlloc+0x11c>
		pwm_struct->outputType = OutType_Preset;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	711a      	strb	r2, [r3, #4]
 800276a:	e002      	b.n	8002772 <PWM_DeAlloc+0x122>

	else
		pwm_struct->outputType = OutType_Standard;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	711a      	strb	r2, [r3, #4]

	return;
 8002772:	bf00      	nop
}
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <PWM_SoftStart>:

//Sets the PWM soft start buffer
static HAL_StatusTypeDef PWM_SoftStart(PWM_Control_Struct *pwm_struct)
{
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retVal = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]

	pwm_struct->softStartStruct->dutyCycles = (pwm_struct->softStartStruct->slope * pwm_struct->dutyCycle) / 1000;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	8812      	ldrh	r2, [r2, #0]
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	4a20      	ldr	r2, [pc, #128]	; (8002818 <PWM_SoftStart+0x9c>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	099a      	lsrs	r2, r3, #6
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	b292      	uxth	r2, r2
 80027a4:	801a      	strh	r2, [r3, #0]

	pwm_struct->softStartStruct->dutyCycleBuffer = malloc(pwm_struct->softStartStruct->dutyCycles * sizeof(uint16_t));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	005a      	lsls	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69dc      	ldr	r4, [r3, #28]
 80027b2:	4610      	mov	r0, r2
 80027b4:	f00d f974 	bl	800faa0 <malloc>
 80027b8:	4603      	mov	r3, r0
 80027ba:	6063      	str	r3, [r4, #4]

	if(pwm_struct->softStartStruct->dutyCycleBuffer != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d020      	beq.n	8002808 <PWM_SoftStart+0x8c>
	{
		for(uint16_t i = 0; i < pwm_struct->softStartStruct->dutyCycles; i++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	81bb      	strh	r3, [r7, #12]
 80027ca:	e014      	b.n	80027f6 <PWM_SoftStart+0x7a>
			pwm_struct->softStartStruct->dutyCycleBuffer[i] = __PDM_LINEAR_INTERPOLATION(i, 0, pwm_struct->softStartStruct->dutyCycles,
 80027cc:	89bb      	ldrh	r3, [r7, #12]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	8812      	ldrh	r2, [r2, #0]
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	69d2      	ldr	r2, [r2, #28]
 80027da:	8812      	ldrh	r2, [r2, #0]
 80027dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	89bb      	ldrh	r3, [r7, #12]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	b28a      	uxth	r2, r1
 80027ee:	801a      	strh	r2, [r3, #0]
		for(uint16_t i = 0; i < pwm_struct->softStartStruct->dutyCycles; i++)
 80027f0:	89bb      	ldrh	r3, [r7, #12]
 80027f2:	3301      	adds	r3, #1
 80027f4:	81bb      	strh	r3, [r7, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	89ba      	ldrh	r2, [r7, #12]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d3e4      	bcc.n	80027cc <PWM_SoftStart+0x50>
																							0, pwm_struct->dutyCycle);

		retVal = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
 8002806:	e001      	b.n	800280c <PWM_SoftStart+0x90>
	}

	else
		retVal = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]

	return retVal;
 800280c:	7bfb      	ldrb	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bd90      	pop	{r4, r7, pc}
 8002816:	bf00      	nop
 8002818:	10624dd3 	.word	0x10624dd3

0800281c <PWM_Map_Duty_Cycle_Set>:

//Sets PWM output duty cycle using its command variables
static uint16_t PWM_Map_Duty_Cycle_Set(PDM_PWM_Map_Struct* pwm_map_struct)
{
 800281c:	b4b0      	push	{r4, r5, r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	uint16_t retVal = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	81fb      	strh	r3, [r7, #14]

	//Checks if both command variables out of the column and line limits and attributes the map's closest corner value
	if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002836:	429a      	cmp	r2, r3
 8002838:	dc0e      	bgt.n	8002858 <PWM_Map_Duty_Cycle_Set+0x3c>
		&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002848:	429a      	cmp	r2, r3
 800284a:	dc05      	bgt.n	8002858 <PWM_Map_Duty_Cycle_Set+0x3c>

		retVal = pwm_map_struct->dutyCycleMap[0][0];
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	81fb      	strh	r3, [r7, #14]
 8002856:	e37e      	b.n	8002f56 <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1])
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68d9      	ldr	r1, [r3, #12]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	791b      	ldrb	r3, [r3, #4]
 8002866:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800286a:	3b01      	subs	r3, #1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	440b      	add	r3, r1
 8002870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002874:	429a      	cmp	r2, r3
 8002876:	db15      	blt.n	80028a4 <PWM_Map_Duty_Cycle_Set+0x88>
			 && (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002886:	429a      	cmp	r2, r3
 8002888:	dc0c      	bgt.n	80028a4 <PWM_Map_Duty_Cycle_Set+0x88>

		retVal = pwm_map_struct->dutyCycleMap[pwm_map_struct->mapLengths[0] - 1][0];
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	791b      	ldrb	r3, [r3, #4]
 8002892:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002896:	3b01      	subs	r3, #1
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	81fb      	strh	r3, [r7, #14]
 80028a2:	e358      	b.n	8002f56 <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	dc1c      	bgt.n	80028f0 <PWM_Map_Duty_Cycle_Set+0xd4>
			 && (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1]))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6919      	ldr	r1, [r3, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	795b      	ldrb	r3, [r3, #5]
 80028c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80028c8:	3b01      	subs	r3, #1
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	440b      	add	r3, r1
 80028ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	db0c      	blt.n	80028f0 <PWM_Map_Duty_Cycle_Set+0xd4>

		retVal = pwm_map_struct->dutyCycleMap[0][pwm_map_struct->mapLengths[1] - 1];
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	795b      	ldrb	r3, [r3, #5]
 80028e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80028e4:	3b01      	subs	r3, #1
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	81fb      	strh	r3, [r7, #14]
 80028ee:	e332      	b.n	8002f56 <PWM_Map_Duty_Cycle_Set+0x73a>

	else if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1])
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68d9      	ldr	r1, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	791b      	ldrb	r3, [r3, #4]
 80028fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002902:	3b01      	subs	r3, #1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	440b      	add	r3, r1
 8002908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800290c:	429a      	cmp	r2, r3
 800290e:	db23      	blt.n	8002958 <PWM_Map_Duty_Cycle_Set+0x13c>
			 && (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1]))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6919      	ldr	r1, [r3, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	795b      	ldrb	r3, [r3, #5]
 800291e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002922:	3b01      	subs	r3, #1
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	440b      	add	r3, r1
 8002928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292c:	429a      	cmp	r2, r3
 800292e:	db13      	blt.n	8002958 <PWM_Map_Duty_Cycle_Set+0x13c>

		retVal = pwm_map_struct->dutyCycleMap[pwm_map_struct->mapLengths[0] - 1][pwm_map_struct->mapLengths[1] - 1];
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	791b      	ldrb	r3, [r3, #4]
 8002938:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800293c:	3b01      	subs	r3, #1
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	795b      	ldrb	r3, [r3, #5]
 8002948:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800294c:	3b01      	subs	r3, #1
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	81fb      	strh	r3, [r7, #14]
 8002956:	e2fe      	b.n	8002f56 <PWM_Map_Duty_Cycle_Set+0x73a>

	//Check if the command variable point is outside the lines (y limits) of the 3D map or there is only 1 variable input
	else if((pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0])
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002966:	429a      	cmp	r2, r3
 8002968:	dd14      	ble.n	8002994 <PWM_Map_Duty_Cycle_Set+0x178>
			|| (pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][pwm_map_struct->mapLengths[1] - 1])
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6919      	ldr	r1, [r3, #16]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	795b      	ldrb	r3, [r3, #5]
 8002978:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800297c:	3b01      	subs	r3, #1
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	440b      	add	r3, r1
 8002982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002986:	429a      	cmp	r2, r3
 8002988:	da04      	bge.n	8002994 <PWM_Map_Duty_Cycle_Set+0x178>
			|| (pwm_map_struct->mapLengths[1] == 1))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	795b      	ldrb	r3, [r3, #5]
 800298e:	2b01      	cmp	r3, #1
 8002990:	f040 80c4 	bne.w	8002b1c <PWM_Map_Duty_Cycle_Set+0x300>
	{
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002994:	2300      	movs	r3, #0
 8002996:	737b      	strb	r3, [r7, #13]
 8002998:	e0b8      	b.n	8002b0c <PWM_Map_Duty_Cycle_Set+0x2f0>
		{
			//Checks if the command variable point is inside the x, x + 1 column
			if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][x])
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68d9      	ldr	r1, [r3, #12]
 80029a4:	7b7b      	ldrb	r3, [r7, #13]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	440b      	add	r3, r1
 80029aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	f2c0 80a9 	blt.w	8002b06 <PWM_Map_Duty_Cycle_Set+0x2ea>
				&& (pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][x + 1]))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68d9      	ldr	r1, [r3, #12]
 80029be:	7b7b      	ldrb	r3, [r7, #13]
 80029c0:	3301      	adds	r3, #1
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	440b      	add	r3, r1
 80029c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	f300 809b 	bgt.w	8002b06 <PWM_Map_Duty_Cycle_Set+0x2ea>
			{
				//Checks if the command variable point is above or below the lines (y limits) of the 3D map then sets duty cycle via linear interpolation
				if((pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][0]) || (pwm_map_struct->mapLengths[1] == 1))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029de:	429a      	cmp	r2, r3
 80029e0:	dd03      	ble.n	80029ea <PWM_Map_Duty_Cycle_Set+0x1ce>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	795b      	ldrb	r3, [r3, #5]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d13c      	bne.n	8002a64 <PWM_Map_Duty_Cycle_Set+0x248>
				{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80029f0:	4619      	mov	r1, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	7b7b      	ldrb	r3, [r7, #13]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a00:	1acb      	subs	r3, r1, r3
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6951      	ldr	r1, [r2, #20]
 8002a06:	7b7a      	ldrb	r2, [r7, #13]
 8002a08:	3201      	adds	r2, #1
 8002a0a:	0092      	lsls	r2, r2, #2
 8002a0c:	440a      	add	r2, r1
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	8812      	ldrh	r2, [r2, #0]
 8002a12:	4610      	mov	r0, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6951      	ldr	r1, [r2, #20]
 8002a18:	7b7a      	ldrb	r2, [r7, #13]
 8002a1a:	0092      	lsls	r2, r2, #2
 8002a1c:	440a      	add	r2, r1
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	8812      	ldrh	r2, [r2, #0]
 8002a22:	1a82      	subs	r2, r0, r2
 8002a24:	fb03 f202 	mul.w	r2, r3, r2
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68d9      	ldr	r1, [r3, #12]
 8002a2c:	7b7b      	ldrb	r3, [r7, #13]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	440b      	add	r3, r1
 8002a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68d9      	ldr	r1, [r3, #12]
 8002a3e:	7b7b      	ldrb	r3, [r7, #13]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	440b      	add	r3, r1
 8002a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a48:	1ac3      	subs	r3, r0, r3
 8002a4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6959      	ldr	r1, [r3, #20]
 8002a54:	7b7b      	ldrb	r3, [r7, #13]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	81fb      	strh	r3, [r7, #14]
 8002a62:	e050      	b.n	8002b06 <PWM_Map_Duty_Cycle_Set+0x2ea>
																  	   pwm_map_struct->commandVarStep[0][x],
																	   pwm_map_struct->commandVarStep[0][x + 1],
																	   pwm_map_struct->dutyCycleMap[x][0],
																	   pwm_map_struct->dutyCycleMap[x + 1][0]);
				}else{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	7b7b      	ldrb	r3, [r7, #13]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a7a:	1aca      	subs	r2, r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6959      	ldr	r1, [r3, #20]
 8002a80:	7b7b      	ldrb	r3, [r7, #13]
 8002a82:	3301      	adds	r3, #1
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	6819      	ldr	r1, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	795b      	ldrb	r3, [r3, #5]
 8002a8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002a92:	3b01      	subs	r3, #1
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	440b      	add	r3, r1
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6959      	ldr	r1, [r3, #20]
 8002aa0:	7b7b      	ldrb	r3, [r7, #13]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	6819      	ldr	r1, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	795b      	ldrb	r3, [r3, #5]
 8002aac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	440b      	add	r3, r1
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	1ac3      	subs	r3, r0, r3
 8002aba:	fb03 f202 	mul.w	r2, r3, r2
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68d9      	ldr	r1, [r3, #12]
 8002ac2:	7b7b      	ldrb	r3, [r7, #13]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	440b      	add	r3, r1
 8002aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68d9      	ldr	r1, [r3, #12]
 8002ad4:	7b7b      	ldrb	r3, [r7, #13]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	440b      	add	r3, r1
 8002ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ade:	1ac3      	subs	r3, r0, r3
 8002ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6959      	ldr	r1, [r3, #20]
 8002aea:	7b7b      	ldrb	r3, [r7, #13]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	795b      	ldrb	r3, [r3, #5]
 8002af6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002afa:	3b01      	subs	r3, #1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	440b      	add	r3, r1
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	81fb      	strh	r3, [r7, #14]
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002b06:	7b7b      	ldrb	r3, [r7, #13]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	737b      	strb	r3, [r7, #13]
 8002b0c:	7b7a      	ldrb	r2, [r7, #13]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	791b      	ldrb	r3, [r3, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	429a      	cmp	r2, r3
 8002b16:	f6ff af40 	blt.w	800299a <PWM_Map_Duty_Cycle_Set+0x17e>
 8002b1a:	e21c      	b.n	8002f56 <PWM_Map_Duty_Cycle_Set+0x73a>
			}
		}
	}

	//Check if the command variable point is outside the columns (x limits) of the 3D map
	else if((pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	dd10      	ble.n	8002b50 <PWM_Map_Duty_Cycle_Set+0x334>
			|| (pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][pwm_map_struct->mapLengths[0] - 1]))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68d9      	ldr	r1, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	791b      	ldrb	r3, [r3, #4]
 8002b3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002b40:	3b01      	subs	r3, #1
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	440b      	add	r3, r1
 8002b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	f2c0 80c0 	blt.w	8002cd0 <PWM_Map_Duty_Cycle_Set+0x4b4>
	{
		for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002b50:	2300      	movs	r3, #0
 8002b52:	733b      	strb	r3, [r7, #12]
 8002b54:	e0b4      	b.n	8002cc0 <PWM_Map_Duty_Cycle_Set+0x4a4>
		{
			//Checks if the command variable point is inside the y, y + 1 line
			if((pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][y])
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6919      	ldr	r1, [r3, #16]
 8002b60:	7b3b      	ldrb	r3, [r7, #12]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	440b      	add	r3, r1
 8002b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	f2c0 80a5 	blt.w	8002cba <PWM_Map_Duty_Cycle_Set+0x49e>
				&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][y + 1]))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6919      	ldr	r1, [r3, #16]
 8002b7a:	7b3b      	ldrb	r3, [r7, #12]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	440b      	add	r3, r1
 8002b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f300 8097 	bgt.w	8002cba <PWM_Map_Duty_Cycle_Set+0x49e>
			{
				//Checks if the command variable point is to the left or to the right of the 3D map then sets duty cycle via linear interpolation
				if(pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][0])
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	dc3c      	bgt.n	8002c18 <PWM_Map_Duty_Cycle_Set+0x3fc>
				{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[1],
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	7b3b      	ldrb	r3, [r7, #12]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb4:	1acb      	subs	r3, r1, r3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6952      	ldr	r2, [r2, #20]
 8002bba:	6811      	ldr	r1, [r2, #0]
 8002bbc:	7b3a      	ldrb	r2, [r7, #12]
 8002bbe:	3201      	adds	r2, #1
 8002bc0:	0052      	lsls	r2, r2, #1
 8002bc2:	440a      	add	r2, r1
 8002bc4:	8812      	ldrh	r2, [r2, #0]
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6952      	ldr	r2, [r2, #20]
 8002bcc:	6811      	ldr	r1, [r2, #0]
 8002bce:	7b3a      	ldrb	r2, [r7, #12]
 8002bd0:	0052      	lsls	r2, r2, #1
 8002bd2:	440a      	add	r2, r1
 8002bd4:	8812      	ldrh	r2, [r2, #0]
 8002bd6:	1a82      	subs	r2, r0, r2
 8002bd8:	fb03 f202 	mul.w	r2, r3, r2
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6919      	ldr	r1, [r3, #16]
 8002be0:	7b3b      	ldrb	r3, [r7, #12]
 8002be2:	3301      	adds	r3, #1
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	440b      	add	r3, r1
 8002be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bec:	4618      	mov	r0, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6919      	ldr	r1, [r3, #16]
 8002bf2:	7b3b      	ldrb	r3, [r7, #12]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfc:	1ac3      	subs	r3, r0, r3
 8002bfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	6819      	ldr	r1, [r3, #0]
 8002c0a:	7b3b      	ldrb	r3, [r7, #12]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	440b      	add	r3, r1
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	81fb      	strh	r3, [r7, #14]
 8002c16:	e050      	b.n	8002cba <PWM_Map_Duty_Cycle_Set+0x49e>
																  	   pwm_map_struct->commandVarStep[1][y],
																	   pwm_map_struct->commandVarStep[1][y + 1],
																	   pwm_map_struct->dutyCycleMap[0][y],
																	   pwm_map_struct->dutyCycleMap[0][y + 1]);
				}else{
					retVal = __PDM_LINEAR_INTERPOLATION(pwm_map_struct->commandVar[1],
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	7b3b      	ldrb	r3, [r7, #12]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c2e:	1aca      	subs	r2, r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6959      	ldr	r1, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	791b      	ldrb	r3, [r3, #4]
 8002c38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	6819      	ldr	r1, [r3, #0]
 8002c44:	7b3b      	ldrb	r3, [r7, #12]
 8002c46:	3301      	adds	r3, #1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	440b      	add	r3, r1
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6959      	ldr	r1, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	791b      	ldrb	r3, [r3, #4]
 8002c58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	7b3b      	ldrb	r3, [r7, #12]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	440b      	add	r3, r1
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	1ac3      	subs	r3, r0, r3
 8002c6e:	fb03 f202 	mul.w	r2, r3, r2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6919      	ldr	r1, [r3, #16]
 8002c76:	7b3b      	ldrb	r3, [r7, #12]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c82:	4618      	mov	r0, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6919      	ldr	r1, [r3, #16]
 8002c88:	7b3b      	ldrb	r3, [r7, #12]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c92:	1ac3      	subs	r3, r0, r3
 8002c94:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6959      	ldr	r1, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	791b      	ldrb	r3, [r3, #4]
 8002ca2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	6819      	ldr	r1, [r3, #0]
 8002cae:	7b3b      	ldrb	r3, [r7, #12]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	440b      	add	r3, r1
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	81fb      	strh	r3, [r7, #14]
		for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002cba:	7b3b      	ldrb	r3, [r7, #12]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	733b      	strb	r3, [r7, #12]
 8002cc0:	7b3a      	ldrb	r2, [r7, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	795b      	ldrb	r3, [r3, #5]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	f6ff af44 	blt.w	8002b56 <PWM_Map_Duty_Cycle_Set+0x33a>
 8002cce:	e142      	b.n	8002f56 <PWM_Map_Duty_Cycle_Set+0x73a>
	}

	//Since the command variable point is inside the map's boundary, sets duty cycle via bilinear interpolation
	else
	{
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	72fb      	strb	r3, [r7, #11]
 8002cd4:	e138      	b.n	8002f48 <PWM_Map_Duty_Cycle_Set+0x72c>
		{
			//Checks if the command variable point is inside the x, x + 1 column
			if((pwm_map_struct->commandVar[0] >= pwm_map_struct->commandVarStep[0][x])
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68d9      	ldr	r1, [r3, #12]
 8002ce0:	7afb      	ldrb	r3, [r7, #11]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	f2c0 8129 	blt.w	8002f42 <PWM_Map_Duty_Cycle_Set+0x726>
				&& (pwm_map_struct->commandVar[0] <= pwm_map_struct->commandVarStep[0][x + 1]))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68d9      	ldr	r1, [r3, #12]
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	440b      	add	r3, r1
 8002d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	f300 811b 	bgt.w	8002f42 <PWM_Map_Duty_Cycle_Set+0x726>
			{
				for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	72bb      	strb	r3, [r7, #10]
 8002d10:	e110      	b.n	8002f34 <PWM_Map_Duty_Cycle_Set+0x718>
				{
					//Checks if the command variable point is inside the y, y + 1 line
					if((pwm_map_struct->commandVar[1] >= pwm_map_struct->commandVarStep[1][y])
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6919      	ldr	r1, [r3, #16]
 8002d1c:	7abb      	ldrb	r3, [r7, #10]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	440b      	add	r3, r1
 8002d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	f2c0 8101 	blt.w	8002f2e <PWM_Map_Duty_Cycle_Set+0x712>
						&& (pwm_map_struct->commandVar[1] <= pwm_map_struct->commandVarStep[1][y + 1]))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6919      	ldr	r1, [r3, #16]
 8002d36:	7abb      	ldrb	r3, [r7, #10]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	440b      	add	r3, r1
 8002d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	f300 80f3 	bgt.w	8002f2e <PWM_Map_Duty_Cycle_Set+0x712>
					{
						retVal = __PDM_BILINEAR_INTERPOLATION(pwm_map_struct->commandVar[0],
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	7abb      	ldrb	r3, [r7, #10]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d5e:	1acb      	subs	r3, r1, r3
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002d66:	4610      	mov	r0, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	68d1      	ldr	r1, [r2, #12]
 8002d6c:	7afa      	ldrb	r2, [r7, #11]
 8002d6e:	0052      	lsls	r2, r2, #1
 8002d70:	440a      	add	r2, r1
 8002d72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002d76:	1a82      	subs	r2, r0, r2
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	6948      	ldr	r0, [r1, #20]
 8002d7c:	7af9      	ldrb	r1, [r7, #11]
 8002d7e:	3101      	adds	r1, #1
 8002d80:	0089      	lsls	r1, r1, #2
 8002d82:	4401      	add	r1, r0
 8002d84:	6808      	ldr	r0, [r1, #0]
 8002d86:	7ab9      	ldrb	r1, [r7, #10]
 8002d88:	3101      	adds	r1, #1
 8002d8a:	0049      	lsls	r1, r1, #1
 8002d8c:	4401      	add	r1, r0
 8002d8e:	8809      	ldrh	r1, [r1, #0]
 8002d90:	460c      	mov	r4, r1
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	6948      	ldr	r0, [r1, #20]
 8002d96:	7af9      	ldrb	r1, [r7, #11]
 8002d98:	0089      	lsls	r1, r1, #2
 8002d9a:	4401      	add	r1, r0
 8002d9c:	6808      	ldr	r0, [r1, #0]
 8002d9e:	7ab9      	ldrb	r1, [r7, #10]
 8002da0:	3101      	adds	r1, #1
 8002da2:	0049      	lsls	r1, r1, #1
 8002da4:	4401      	add	r1, r0
 8002da6:	8809      	ldrh	r1, [r1, #0]
 8002da8:	1a61      	subs	r1, r4, r1
 8002daa:	fb02 f101 	mul.w	r1, r2, r1
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68d0      	ldr	r0, [r2, #12]
 8002db2:	7afa      	ldrb	r2, [r7, #11]
 8002db4:	3201      	adds	r2, #1
 8002db6:	0052      	lsls	r2, r2, #1
 8002db8:	4402      	add	r2, r0
 8002dba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002dbe:	4614      	mov	r4, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	68d0      	ldr	r0, [r2, #12]
 8002dc4:	7afa      	ldrb	r2, [r7, #11]
 8002dc6:	0052      	lsls	r2, r2, #1
 8002dc8:	4402      	add	r2, r0
 8002dca:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002dce:	1aa2      	subs	r2, r4, r2
 8002dd0:	fb91 f2f2 	sdiv	r2, r1, r2
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	6948      	ldr	r0, [r1, #20]
 8002dd8:	7af9      	ldrb	r1, [r7, #11]
 8002dda:	0089      	lsls	r1, r1, #2
 8002ddc:	4401      	add	r1, r0
 8002dde:	6808      	ldr	r0, [r1, #0]
 8002de0:	7ab9      	ldrb	r1, [r7, #10]
 8002de2:	3101      	adds	r1, #1
 8002de4:	0049      	lsls	r1, r1, #1
 8002de6:	4401      	add	r1, r0
 8002de8:	8809      	ldrh	r1, [r1, #0]
 8002dea:	4411      	add	r1, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002df2:	4614      	mov	r4, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	68d0      	ldr	r0, [r2, #12]
 8002df8:	7afa      	ldrb	r2, [r7, #11]
 8002dfa:	0052      	lsls	r2, r2, #1
 8002dfc:	4402      	add	r2, r0
 8002dfe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e02:	1aa2      	subs	r2, r4, r2
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	6944      	ldr	r4, [r0, #20]
 8002e08:	7af8      	ldrb	r0, [r7, #11]
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	0080      	lsls	r0, r0, #2
 8002e0e:	4420      	add	r0, r4
 8002e10:	6804      	ldr	r4, [r0, #0]
 8002e12:	7ab8      	ldrb	r0, [r7, #10]
 8002e14:	0040      	lsls	r0, r0, #1
 8002e16:	4420      	add	r0, r4
 8002e18:	8800      	ldrh	r0, [r0, #0]
 8002e1a:	4605      	mov	r5, r0
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	6944      	ldr	r4, [r0, #20]
 8002e20:	7af8      	ldrb	r0, [r7, #11]
 8002e22:	0080      	lsls	r0, r0, #2
 8002e24:	4420      	add	r0, r4
 8002e26:	6804      	ldr	r4, [r0, #0]
 8002e28:	7ab8      	ldrb	r0, [r7, #10]
 8002e2a:	0040      	lsls	r0, r0, #1
 8002e2c:	4420      	add	r0, r4
 8002e2e:	8800      	ldrh	r0, [r0, #0]
 8002e30:	1a28      	subs	r0, r5, r0
 8002e32:	fb02 f000 	mul.w	r0, r2, r0
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68d4      	ldr	r4, [r2, #12]
 8002e3a:	7afa      	ldrb	r2, [r7, #11]
 8002e3c:	3201      	adds	r2, #1
 8002e3e:	0052      	lsls	r2, r2, #1
 8002e40:	4422      	add	r2, r4
 8002e42:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e46:	4615      	mov	r5, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	68d4      	ldr	r4, [r2, #12]
 8002e4c:	7afa      	ldrb	r2, [r7, #11]
 8002e4e:	0052      	lsls	r2, r2, #1
 8002e50:	4422      	add	r2, r4
 8002e52:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e56:	1aaa      	subs	r2, r5, r2
 8002e58:	fb90 f2f2 	sdiv	r2, r0, r2
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	6944      	ldr	r4, [r0, #20]
 8002e60:	7af8      	ldrb	r0, [r7, #11]
 8002e62:	0080      	lsls	r0, r0, #2
 8002e64:	4420      	add	r0, r4
 8002e66:	6804      	ldr	r4, [r0, #0]
 8002e68:	7ab8      	ldrb	r0, [r7, #10]
 8002e6a:	0040      	lsls	r0, r0, #1
 8002e6c:	4420      	add	r0, r4
 8002e6e:	8800      	ldrh	r0, [r0, #0]
 8002e70:	4402      	add	r2, r0
 8002e72:	1a8a      	subs	r2, r1, r2
 8002e74:	fb03 f202 	mul.w	r2, r3, r2
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6919      	ldr	r1, [r3, #16]
 8002e7c:	7abb      	ldrb	r3, [r7, #10]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	440b      	add	r3, r1
 8002e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6919      	ldr	r1, [r3, #16]
 8002e8e:	7abb      	ldrb	r3, [r7, #10]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	440b      	add	r3, r1
 8002e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e98:	1ac3      	subs	r3, r0, r3
 8002e9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68d9      	ldr	r1, [r3, #12]
 8002eac:	7afb      	ldrb	r3, [r7, #11]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	440b      	add	r3, r1
 8002eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb6:	1ac3      	subs	r3, r0, r3
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	6948      	ldr	r0, [r1, #20]
 8002ebc:	7af9      	ldrb	r1, [r7, #11]
 8002ebe:	3101      	adds	r1, #1
 8002ec0:	0089      	lsls	r1, r1, #2
 8002ec2:	4401      	add	r1, r0
 8002ec4:	6808      	ldr	r0, [r1, #0]
 8002ec6:	7ab9      	ldrb	r1, [r7, #10]
 8002ec8:	0049      	lsls	r1, r1, #1
 8002eca:	4401      	add	r1, r0
 8002ecc:	8809      	ldrh	r1, [r1, #0]
 8002ece:	460c      	mov	r4, r1
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	6948      	ldr	r0, [r1, #20]
 8002ed4:	7af9      	ldrb	r1, [r7, #11]
 8002ed6:	0089      	lsls	r1, r1, #2
 8002ed8:	4401      	add	r1, r0
 8002eda:	6808      	ldr	r0, [r1, #0]
 8002edc:	7ab9      	ldrb	r1, [r7, #10]
 8002ede:	0049      	lsls	r1, r1, #1
 8002ee0:	4401      	add	r1, r0
 8002ee2:	8809      	ldrh	r1, [r1, #0]
 8002ee4:	1a61      	subs	r1, r4, r1
 8002ee6:	fb03 f101 	mul.w	r1, r3, r1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68d8      	ldr	r0, [r3, #12]
 8002eee:	7afb      	ldrb	r3, [r7, #11]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4403      	add	r3, r0
 8002ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002efa:	461c      	mov	r4, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68d8      	ldr	r0, [r3, #12]
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4403      	add	r3, r0
 8002f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0a:	1ae3      	subs	r3, r4, r3
 8002f0c:	fb91 f3f3 	sdiv	r3, r1, r3
 8002f10:	b299      	uxth	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6958      	ldr	r0, [r3, #20]
 8002f16:	7afb      	ldrb	r3, [r7, #11]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4403      	add	r3, r0
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	7abb      	ldrb	r3, [r7, #10]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4403      	add	r3, r0
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	440b      	add	r3, r1
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	81fb      	strh	r3, [r7, #14]
				for(uint8_t y = 0; y < (pwm_map_struct->mapLengths[1] - 1); y++)
 8002f2e:	7abb      	ldrb	r3, [r7, #10]
 8002f30:	3301      	adds	r3, #1
 8002f32:	72bb      	strb	r3, [r7, #10]
 8002f34:	7aba      	ldrb	r2, [r7, #10]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	795b      	ldrb	r3, [r3, #5]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	f6ff aee8 	blt.w	8002d12 <PWM_Map_Duty_Cycle_Set+0x4f6>
		for(uint8_t x = 0; x < (pwm_map_struct->mapLengths[0] - 1); x++)
 8002f42:	7afb      	ldrb	r3, [r7, #11]
 8002f44:	3301      	adds	r3, #1
 8002f46:	72fb      	strb	r3, [r7, #11]
 8002f48:	7afa      	ldrb	r2, [r7, #11]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	791b      	ldrb	r3, [r3, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	429a      	cmp	r2, r3
 8002f52:	f6ff aec0 	blt.w	8002cd6 <PWM_Map_Duty_Cycle_Set+0x4ba>
				}
			}
		}
	}

	return retVal;
 8002f56:	89fb      	ldrh	r3, [r7, #14]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bcb0      	pop	{r4, r5, r7}
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_CAN_RxFifo0MsgPendingCallback>:

#include "pdm.h"
#include "stdlib.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxMessage, canRxData) == HAL_OK)
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002f70:	2100      	movs	r1, #0
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f001 ffdf 	bl	8004f36 <HAL_CAN_GetRxMessage>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		PDM_CAN_Process_Rx_Data();
 8002f7e:	f7fe f9a0 	bl	80012c2 <PDM_CAN_Process_Rx_Data>

		HAL_GPIO_TogglePin(CAN_RX_LED_GPIO_Port, CAN_RX_LED_Pin);
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	4805      	ldr	r0, [pc, #20]	; (8002f9c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002f86:	f003 fac6 	bl	8006516 <HAL_GPIO_TogglePin>
	}

	return;
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
}
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000680 	.word	0x20000680
 8002f98:	20000688 	.word	0x20000688
 8002f9c:	40021800 	.word	0x40021800

08002fa0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	80fb      	strh	r3, [r7, #6]
	PDM_Input_Process();
 8002faa:	f7fe ff8b 	bl	8001ec4 <PDM_Input_Process>

	PDM_Output_Process();
 8002fae:	f7ff f889 	bl	80020c4 <PDM_Output_Process>

	return;
 8002fb2:	bf00      	nop
}
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a40      	ldr	r2, [pc, #256]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d106      	bne.n	8002fdc <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_TIM_Base_Stop_IT(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f006 fda6 	bl	8009b20 <HAL_TIM_Base_Stop_IT>
		flagReading[1] = Data_Read_Ready;
 8002fd4:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	705a      	strb	r2, [r3, #1]
//			HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
//			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, pwmOutStruct[3].dutyCycle);
//		}
//	}

	return;
 8002fda:	e073      	b.n	80030c4 <HAL_TIM_PeriodElapsedCallback+0x108>
	else if(htim->Instance == TIM7)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a3c      	ldr	r2, [pc, #240]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d16e      	bne.n	80030c4 <HAL_TIM_PeriodElapsedCallback+0x108>
		accMsg10Hz++;
 8002fe6:	4b3c      	ldr	r3, [pc, #240]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3301      	adds	r3, #1
 8002fec:	4a3a      	ldr	r2, [pc, #232]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002fee:	6013      	str	r3, [r2, #0]
		accMsg25Hz++;
 8002ff0:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	4a39      	ldr	r2, [pc, #228]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002ff8:	6013      	str	r3, [r2, #0]
		accMsg50Hz++;
 8002ffa:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3301      	adds	r3, #1
 8003000:	4a37      	ldr	r2, [pc, #220]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003002:	6013      	str	r3, [r2, #0]
		accMsg80Hz++,
 8003004:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	4a36      	ldr	r2, [pc, #216]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800300c:	6013      	str	r3, [r2, #0]
		accMsg100Hz++;
 800300e:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	4a34      	ldr	r2, [pc, #208]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003016:	6013      	str	r3, [r2, #0]
		accUsbData++;
 8003018:	4b34      	ldr	r3, [pc, #208]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x130>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	4a33      	ldr	r2, [pc, #204]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003020:	6013      	str	r3, [r2, #0]
		accOutputFuse[0]++;
 8003022:	4b33      	ldr	r3, [pc, #204]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3301      	adds	r3, #1
 8003028:	4a31      	ldr	r2, [pc, #196]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800302a:	6013      	str	r3, [r2, #0]
		accOutputFuse[1]++;
 800302c:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	3301      	adds	r3, #1
 8003032:	4a2f      	ldr	r2, [pc, #188]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003034:	6053      	str	r3, [r2, #4]
		accOutputFuse[2]++;
 8003036:	4b2e      	ldr	r3, [pc, #184]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	3301      	adds	r3, #1
 800303c:	4a2c      	ldr	r2, [pc, #176]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800303e:	6093      	str	r3, [r2, #8]
		accOutputFuse[3]++;
 8003040:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	3301      	adds	r3, #1
 8003046:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003048:	60d3      	str	r3, [r2, #12]
		accOutputFuse[4]++;
 800304a:	4b29      	ldr	r3, [pc, #164]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	3301      	adds	r3, #1
 8003050:	4a27      	ldr	r2, [pc, #156]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003052:	6113      	str	r3, [r2, #16]
		accOutputFuse[5]++;
 8003054:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	3301      	adds	r3, #1
 800305a:	4a25      	ldr	r2, [pc, #148]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800305c:	6153      	str	r3, [r2, #20]
		accOutputFuse[6]++;
 800305e:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	3301      	adds	r3, #1
 8003064:	4a22      	ldr	r2, [pc, #136]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003066:	6193      	str	r3, [r2, #24]
		accOutputFuse[7]++;
 8003068:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	3301      	adds	r3, #1
 800306e:	4a20      	ldr	r2, [pc, #128]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003070:	61d3      	str	r3, [r2, #28]
		accOutputFuse[8]++;
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	3301      	adds	r3, #1
 8003078:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800307a:	6213      	str	r3, [r2, #32]
		accOutputFuse[9]++;
 800307c:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	3301      	adds	r3, #1
 8003082:	4a1b      	ldr	r2, [pc, #108]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003084:	6253      	str	r3, [r2, #36]	; 0x24
		accOutputFuse[10]++;
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	3301      	adds	r3, #1
 800308c:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800308e:	6293      	str	r3, [r2, #40]	; 0x28
		accOutputFuse[11]++;
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	3301      	adds	r3, #1
 8003096:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003098:	62d3      	str	r3, [r2, #44]	; 0x2c
		accOutputFuse[12]++;
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	3301      	adds	r3, #1
 80030a0:	4a13      	ldr	r2, [pc, #76]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030a2:	6313      	str	r3, [r2, #48]	; 0x30
		accOutputFuse[13]++;
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a8:	3301      	adds	r3, #1
 80030aa:	4a11      	ldr	r2, [pc, #68]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030ac:	6353      	str	r3, [r2, #52]	; 0x34
		accOutputFuse[14]++;
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	3301      	adds	r3, #1
 80030b4:	4a0e      	ldr	r2, [pc, #56]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030b6:	6393      	str	r3, [r2, #56]	; 0x38
		accOutputFuse[15]++;
 80030b8:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030bc:	3301      	adds	r3, #1
 80030be:	4a0c      	ldr	r2, [pc, #48]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80030c0:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 80030c2:	bf00      	nop
 80030c4:	bf00      	nop
}
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40001000 	.word	0x40001000
 80030d0:	200007cc 	.word	0x200007cc
 80030d4:	40001400 	.word	0x40001400
 80030d8:	20000934 	.word	0x20000934
 80030dc:	20000938 	.word	0x20000938
 80030e0:	2000093c 	.word	0x2000093c
 80030e4:	20000940 	.word	0x20000940
 80030e8:	20000944 	.word	0x20000944
 80030ec:	20000948 	.word	0x20000948
 80030f0:	2000094c 	.word	0x2000094c

080030f4 <PDM_Data_Conversion>:


//Reads ADC value and converts into data
//Returns HAL_TIM_Base_Start_IT status
HAL_StatusTypeDef PDM_Data_Conversion(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	uint8_t flag_fuse = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef retVal = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	72fb      	strb	r3, [r7, #11]

	flagReading[1] = Data_Read_Waiting;
 8003104:	4baa      	ldr	r3, [pc, #680]	; (80033b0 <PDM_Data_Conversion+0x2bc>)
 8003106:	2201      	movs	r2, #1
 8003108:	705a      	strb	r2, [r3, #1]

	//Convert ADC value based on selected reading and sets delay for next reading
	switch(flagReading[0])
 800310a:	4ba9      	ldr	r3, [pc, #676]	; (80033b0 <PDM_Data_Conversion+0x2bc>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	3b02      	subs	r3, #2
 8003110:	2b03      	cmp	r3, #3
 8003112:	f200 81f4 	bhi.w	80034fe <PDM_Data_Conversion+0x40a>
 8003116:	a201      	add	r2, pc, #4	; (adr r2, 800311c <PDM_Data_Conversion+0x28>)
 8003118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311c:	0800312d 	.word	0x0800312d
 8003120:	0800325f 	.word	0x0800325f
 8003124:	080033ab 	.word	0x080033ab
 8003128:	0800347f 	.word	0x0800347f
	{
	case Data_Read_Current0:

		for(uint8_t i = 0; i < 8; i++)
 800312c:	2300      	movs	r3, #0
 800312e:	73bb      	strb	r3, [r7, #14]
 8003130:	e072      	b.n	8003218 <PDM_Data_Conversion+0x124>
		{
			//Convert ADC into current
			dataBuffer[i * 2] = adcBuffer[i];//__PDM_CONVERT_CURRENT(adcBuffer[i]);
 8003132:	7bba      	ldrb	r2, [r7, #14]
 8003134:	7bbb      	ldrb	r3, [r7, #14]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	499e      	ldr	r1, [pc, #632]	; (80033b4 <PDM_Data_Conversion+0x2c0>)
 800313a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800313e:	4a9e      	ldr	r2, [pc, #632]	; (80033b8 <PDM_Data_Conversion+0x2c4>)
 8003140:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((dataBuffer[i * 2] <= outputStruct[i * 2].currentThresholds)
 8003144:	7bbb      	ldrb	r3, [r7, #14]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4a9b      	ldr	r2, [pc, #620]	; (80033b8 <PDM_Data_Conversion+0x2c4>)
 800314a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800314e:	7bbb      	ldrb	r3, [r7, #14]
 8003150:	005a      	lsls	r2, r3, #1
 8003152:	489a      	ldr	r0, [pc, #616]	; (80033bc <PDM_Data_Conversion+0x2c8>)
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4403      	add	r3, r0
 800315e:	3308      	adds	r3, #8
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	4299      	cmp	r1, r3
 8003164:	d90b      	bls.n	800317e <PDM_Data_Conversion+0x8a>
					|| (outputStruct[i * 2].timeoutOutputFuse == 0))
 8003166:	7bbb      	ldrb	r3, [r7, #14]
 8003168:	005a      	lsls	r2, r3, #1
 800316a:	4994      	ldr	r1, [pc, #592]	; (80033bc <PDM_Data_Conversion+0x2c8>)
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	440b      	add	r3, r1
 8003176:	330a      	adds	r3, #10
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <PDM_Data_Conversion+0x98>
				accOutputFuse[i * 2] = 0;
 800317e:	7bbb      	ldrb	r3, [r7, #14]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4a8f      	ldr	r2, [pc, #572]	; (80033c0 <PDM_Data_Conversion+0x2cc>)
 8003184:	2100      	movs	r1, #0
 8003186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800318a:	e020      	b.n	80031ce <PDM_Data_Conversion+0xda>

			else if(accOutputFuse[i * 2] > outputStruct[i * 2].timeoutOutputFuse)
 800318c:	7bbb      	ldrb	r3, [r7, #14]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4a8b      	ldr	r2, [pc, #556]	; (80033c0 <PDM_Data_Conversion+0x2cc>)
 8003192:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003196:	7bbb      	ldrb	r3, [r7, #14]
 8003198:	005a      	lsls	r2, r3, #1
 800319a:	4888      	ldr	r0, [pc, #544]	; (80033bc <PDM_Data_Conversion+0x2c8>)
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4403      	add	r3, r0
 80031a6:	330a      	adds	r3, #10
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	4299      	cmp	r1, r3
 80031ac:	d90f      	bls.n	80031ce <PDM_Data_Conversion+0xda>
			{
				flag_fuse = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
				flagDriverSafety |= 1 << (i * 2);
 80031b2:	7bbb      	ldrb	r3, [r7, #14]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2201      	movs	r2, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	b21a      	sxth	r2, r3
 80031be:	4b81      	ldr	r3, [pc, #516]	; (80033c4 <PDM_Data_Conversion+0x2d0>)
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	b21b      	sxth	r3, r3
 80031c4:	4313      	orrs	r3, r2
 80031c6:	b21b      	sxth	r3, r3
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	4b7e      	ldr	r3, [pc, #504]	; (80033c4 <PDM_Data_Conversion+0x2d0>)
 80031cc:	801a      	strh	r2, [r3, #0]
			}

			if(adcBuffer[i] < ADC_THRESHOLD_HIGH)
 80031ce:	7bbb      	ldrb	r3, [r7, #14]
 80031d0:	4a78      	ldr	r2, [pc, #480]	; (80033b4 <PDM_Data_Conversion+0x2c0>)
 80031d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031d6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80031da:	d20d      	bcs.n	80031f8 <PDM_Data_Conversion+0x104>
				dataIdBuffer[i * 2] |= 1;
 80031dc:	7bbb      	ldrb	r3, [r7, #14]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4a79      	ldr	r2, [pc, #484]	; (80033c8 <PDM_Data_Conversion+0x2d4>)
 80031e2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80031e6:	7bbb      	ldrb	r3, [r7, #14]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	b291      	uxth	r1, r2
 80031f0:	4a75      	ldr	r2, [pc, #468]	; (80033c8 <PDM_Data_Conversion+0x2d4>)
 80031f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80031f6:	e00c      	b.n	8003212 <PDM_Data_Conversion+0x11e>
			else
				dataIdBuffer[i * 2] &= 0xFFFE;
 80031f8:	7bbb      	ldrb	r3, [r7, #14]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4a72      	ldr	r2, [pc, #456]	; (80033c8 <PDM_Data_Conversion+0x2d4>)
 80031fe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003202:	7bbb      	ldrb	r3, [r7, #14]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	b291      	uxth	r1, r2
 800320c:	4a6e      	ldr	r2, [pc, #440]	; (80033c8 <PDM_Data_Conversion+0x2d4>)
 800320e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003212:	7bbb      	ldrb	r3, [r7, #14]
 8003214:	3301      	adds	r3, #1
 8003216:	73bb      	strb	r3, [r7, #14]
 8003218:	7bbb      	ldrb	r3, [r7, #14]
 800321a:	2b07      	cmp	r3, #7
 800321c:	d989      	bls.n	8003132 <PDM_Data_Conversion+0x3e>
		}

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 800321e:	2201      	movs	r2, #1
 8003220:	2120      	movs	r1, #32
 8003222:	486a      	ldr	r0, [pc, #424]	; (80033cc <PDM_Data_Conversion+0x2d8>)
 8003224:	f003 f95e 	bl	80064e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8003228:	2200      	movs	r2, #0
 800322a:	2108      	movs	r1, #8
 800322c:	4867      	ldr	r0, [pc, #412]	; (80033cc <PDM_Data_Conversion+0x2d8>)
 800322e:	f003 f959 	bl	80064e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 8003232:	2201      	movs	r2, #1
 8003234:	2104      	movs	r1, #4
 8003236:	4865      	ldr	r0, [pc, #404]	; (80033cc <PDM_Data_Conversion+0x2d8>)
 8003238:	f003 f954 	bl	80064e4 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Current1;
 800323c:	4b5c      	ldr	r3, [pc, #368]	; (80033b0 <PDM_Data_Conversion+0x2bc>)
 800323e:	2203      	movs	r2, #3
 8003240:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2200      	movs	r2, #0
 8003248:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_CURR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800325a:	60da      	str	r2, [r3, #12]

		break;
 800325c:	e16f      	b.n	800353e <PDM_Data_Conversion+0x44a>

	case Data_Read_Current1:

		for(uint8_t i = 0; i < 8; i++)
 800325e:	2300      	movs	r3, #0
 8003260:	737b      	strb	r3, [r7, #13]
 8003262:	e07e      	b.n	8003362 <PDM_Data_Conversion+0x26e>
		{
			//Convert ADC into current
			dataBuffer[(i * 2) + 1] = adcBuffer[i];//__PDM_CONVERT_CURRENT(adcBuffer[i]);
 8003264:	7b7a      	ldrb	r2, [r7, #13]
 8003266:	7b7b      	ldrb	r3, [r7, #13]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	3301      	adds	r3, #1
 800326c:	4951      	ldr	r1, [pc, #324]	; (80033b4 <PDM_Data_Conversion+0x2c0>)
 800326e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8003272:	4a51      	ldr	r2, [pc, #324]	; (80033b8 <PDM_Data_Conversion+0x2c4>)
 8003274:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((dataBuffer[(i * 2) + 1] <= outputStruct[(i * 2) + 1].currentThresholds)
 8003278:	7b7b      	ldrb	r3, [r7, #13]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	3301      	adds	r3, #1
 800327e:	4a4e      	ldr	r2, [pc, #312]	; (80033b8 <PDM_Data_Conversion+0x2c4>)
 8003280:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003284:	7b7b      	ldrb	r3, [r7, #13]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	484c      	ldr	r0, [pc, #304]	; (80033bc <PDM_Data_Conversion+0x2c8>)
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4403      	add	r3, r0
 8003296:	3308      	adds	r3, #8
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	4299      	cmp	r1, r3
 800329c:	d90c      	bls.n	80032b8 <PDM_Data_Conversion+0x1c4>
					|| (outputStruct[(i * 2) + 1].timeoutOutputFuse == 0))
 800329e:	7b7b      	ldrb	r3, [r7, #13]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	4945      	ldr	r1, [pc, #276]	; (80033bc <PDM_Data_Conversion+0x2c8>)
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	440b      	add	r3, r1
 80032b0:	330a      	adds	r3, #10
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d107      	bne.n	80032c8 <PDM_Data_Conversion+0x1d4>
				accOutputFuse[(i * 2) + 1] = 0;
 80032b8:	7b7b      	ldrb	r3, [r7, #13]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	3301      	adds	r3, #1
 80032be:	4a40      	ldr	r2, [pc, #256]	; (80033c0 <PDM_Data_Conversion+0x2cc>)
 80032c0:	2100      	movs	r1, #0
 80032c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80032c6:	e023      	b.n	8003310 <PDM_Data_Conversion+0x21c>

			else if(accOutputFuse[(i * 2) + 1] > outputStruct[(i * 2) + 1].timeoutOutputFuse)
 80032c8:	7b7b      	ldrb	r3, [r7, #13]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	3301      	adds	r3, #1
 80032ce:	4a3c      	ldr	r2, [pc, #240]	; (80033c0 <PDM_Data_Conversion+0x2cc>)
 80032d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80032d4:	7b7b      	ldrb	r3, [r7, #13]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	4838      	ldr	r0, [pc, #224]	; (80033bc <PDM_Data_Conversion+0x2c8>)
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4403      	add	r3, r0
 80032e6:	330a      	adds	r3, #10
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	4299      	cmp	r1, r3
 80032ec:	d910      	bls.n	8003310 <PDM_Data_Conversion+0x21c>
			{
				flag_fuse = 1;
 80032ee:	2301      	movs	r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
				flagDriverSafety |= 1 << ((i * 2) + 1);
 80032f2:	7b7b      	ldrb	r3, [r7, #13]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	3301      	adds	r3, #1
 80032f8:	2201      	movs	r2, #1
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	b21a      	sxth	r2, r3
 8003300:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <PDM_Data_Conversion+0x2d0>)
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b21b      	sxth	r3, r3
 8003306:	4313      	orrs	r3, r2
 8003308:	b21b      	sxth	r3, r3
 800330a:	b29a      	uxth	r2, r3
 800330c:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <PDM_Data_Conversion+0x2d0>)
 800330e:	801a      	strh	r2, [r3, #0]
			}

			if(adcBuffer[i] < ADC_THRESHOLD_HIGH)
 8003310:	7b7b      	ldrb	r3, [r7, #13]
 8003312:	4a28      	ldr	r2, [pc, #160]	; (80033b4 <PDM_Data_Conversion+0x2c0>)
 8003314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003318:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800331c:	d20f      	bcs.n	800333e <PDM_Data_Conversion+0x24a>
				dataIdBuffer[(i * 2) + 1] |= 1;
 800331e:	7b7b      	ldrb	r3, [r7, #13]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	3301      	adds	r3, #1
 8003324:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <PDM_Data_Conversion+0x2d4>)
 8003326:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800332a:	7b7b      	ldrb	r3, [r7, #13]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	3301      	adds	r3, #1
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	b291      	uxth	r1, r2
 8003336:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <PDM_Data_Conversion+0x2d4>)
 8003338:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800333c:	e00e      	b.n	800335c <PDM_Data_Conversion+0x268>
			else
				dataIdBuffer[(i * 2) + 1] &= 0xFFFE;
 800333e:	7b7b      	ldrb	r3, [r7, #13]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	3301      	adds	r3, #1
 8003344:	4a20      	ldr	r2, [pc, #128]	; (80033c8 <PDM_Data_Conversion+0x2d4>)
 8003346:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800334a:	7b7b      	ldrb	r3, [r7, #13]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	3301      	adds	r3, #1
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	b291      	uxth	r1, r2
 8003356:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <PDM_Data_Conversion+0x2d4>)
 8003358:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 800335c:	7b7b      	ldrb	r3, [r7, #13]
 800335e:	3301      	adds	r3, #1
 8003360:	737b      	strb	r3, [r7, #13]
 8003362:	7b7b      	ldrb	r3, [r7, #13]
 8003364:	2b07      	cmp	r3, #7
 8003366:	f67f af7d 	bls.w	8003264 <PDM_Data_Conversion+0x170>
		}

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 800336a:	2201      	movs	r2, #1
 800336c:	2120      	movs	r1, #32
 800336e:	4817      	ldr	r0, [pc, #92]	; (80033cc <PDM_Data_Conversion+0x2d8>)
 8003370:	f003 f8b8 	bl	80064e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 8003374:	2201      	movs	r2, #1
 8003376:	2108      	movs	r1, #8
 8003378:	4814      	ldr	r0, [pc, #80]	; (80033cc <PDM_Data_Conversion+0x2d8>)
 800337a:	f003 f8b3 	bl	80064e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 800337e:	2200      	movs	r2, #0
 8003380:	2104      	movs	r1, #4
 8003382:	4812      	ldr	r0, [pc, #72]	; (80033cc <PDM_Data_Conversion+0x2d8>)
 8003384:	f003 f8ae 	bl	80064e4 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Temperature;
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <PDM_Data_Conversion+0x2bc>)
 800338a:	2204      	movs	r2, #4
 800338c:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_TEMP);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033a6:	60da      	str	r2, [r3, #12]

		break;
 80033a8:	e0c9      	b.n	800353e <PDM_Data_Conversion+0x44a>

	case Data_Read_Temperature:

		for(uint8_t i = 0; i < 8; i++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	733b      	strb	r3, [r7, #12]
 80033ae:	e043      	b.n	8003438 <PDM_Data_Conversion+0x344>
 80033b0:	200007cc 	.word	0x200007cc
 80033b4:	200007b4 	.word	0x200007b4
 80033b8:	2000073c 	.word	0x2000073c
 80033bc:	200007d4 	.word	0x200007d4
 80033c0:	2000094c 	.word	0x2000094c
 80033c4:	200007c8 	.word	0x200007c8
 80033c8:	20000778 	.word	0x20000778
 80033cc:	40021000 	.word	0x40021000
		{
			//Convert ADC into temperature
			dataBuffer[16 + i] = adcBuffer[i];//__PDM_CONVERT_TEMPERATURE(adcBuffer[i], adcBuffer[8]);
 80033d0:	7b3a      	ldrb	r2, [r7, #12]
 80033d2:	7b3b      	ldrb	r3, [r7, #12]
 80033d4:	3310      	adds	r3, #16
 80033d6:	4963      	ldr	r1, [pc, #396]	; (8003564 <PDM_Data_Conversion+0x470>)
 80033d8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80033dc:	4a62      	ldr	r2, [pc, #392]	; (8003568 <PDM_Data_Conversion+0x474>)
 80033de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if((adcBuffer[i] < ADC_THRESHOLD_LOW) || (adcBuffer[i] > ADC_THRESHOLD_HIGH))
 80033e2:	7b3b      	ldrb	r3, [r7, #12]
 80033e4:	4a5f      	ldr	r2, [pc, #380]	; (8003564 <PDM_Data_Conversion+0x470>)
 80033e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033ea:	2b09      	cmp	r3, #9
 80033ec:	d906      	bls.n	80033fc <PDM_Data_Conversion+0x308>
 80033ee:	7b3b      	ldrb	r3, [r7, #12]
 80033f0:	4a5c      	ldr	r2, [pc, #368]	; (8003564 <PDM_Data_Conversion+0x470>)
 80033f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033f6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80033fa:	d90d      	bls.n	8003418 <PDM_Data_Conversion+0x324>
				dataIdBuffer[16 + i] |= 1;
 80033fc:	7b3b      	ldrb	r3, [r7, #12]
 80033fe:	3310      	adds	r3, #16
 8003400:	4a5a      	ldr	r2, [pc, #360]	; (800356c <PDM_Data_Conversion+0x478>)
 8003402:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003406:	7b3b      	ldrb	r3, [r7, #12]
 8003408:	3310      	adds	r3, #16
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	b291      	uxth	r1, r2
 8003410:	4a56      	ldr	r2, [pc, #344]	; (800356c <PDM_Data_Conversion+0x478>)
 8003412:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003416:	e00c      	b.n	8003432 <PDM_Data_Conversion+0x33e>
			else
				dataIdBuffer[16 + i] &= 0xFFFE;
 8003418:	7b3b      	ldrb	r3, [r7, #12]
 800341a:	3310      	adds	r3, #16
 800341c:	4a53      	ldr	r2, [pc, #332]	; (800356c <PDM_Data_Conversion+0x478>)
 800341e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003422:	7b3b      	ldrb	r3, [r7, #12]
 8003424:	3310      	adds	r3, #16
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	b291      	uxth	r1, r2
 800342c:	4a4f      	ldr	r2, [pc, #316]	; (800356c <PDM_Data_Conversion+0x478>)
 800342e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i < 8; i++)
 8003432:	7b3b      	ldrb	r3, [r7, #12]
 8003434:	3301      	adds	r3, #1
 8003436:	733b      	strb	r3, [r7, #12]
 8003438:	7b3b      	ldrb	r3, [r7, #12]
 800343a:	2b07      	cmp	r3, #7
 800343c:	d9c8      	bls.n	80033d0 <PDM_Data_Conversion+0x2dc>
		}

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 800343e:	2201      	movs	r2, #1
 8003440:	2120      	movs	r1, #32
 8003442:	484b      	ldr	r0, [pc, #300]	; (8003570 <PDM_Data_Conversion+0x47c>)
 8003444:	f003 f84e 	bl	80064e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_SET);
 8003448:	2201      	movs	r2, #1
 800344a:	2108      	movs	r1, #8
 800344c:	4848      	ldr	r0, [pc, #288]	; (8003570 <PDM_Data_Conversion+0x47c>)
 800344e:	f003 f849 	bl	80064e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_SET);
 8003452:	2201      	movs	r2, #1
 8003454:	2104      	movs	r1, #4
 8003456:	4846      	ldr	r0, [pc, #280]	; (8003570 <PDM_Data_Conversion+0x47c>)
 8003458:	f003 f844 	bl	80064e4 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Voltage;
 800345c:	4b45      	ldr	r3, [pc, #276]	; (8003574 <PDM_Data_Conversion+0x480>)
 800345e:	2205      	movs	r2, #5
 8003460:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2200      	movs	r2, #0
 8003468:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_VOLT);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800347a:	60da      	str	r2, [r3, #12]

		break;
 800347c:	e05f      	b.n	800353e <PDM_Data_Conversion+0x44a>

	case Data_Read_Voltage:

		//Convert ADC into voltage if the ADC value is valid
		if((adcBuffer[1] < ADC_THRESHOLD_LOW) || (adcBuffer[1] > ADC_THRESHOLD_HIGH))
 800347e:	4b39      	ldr	r3, [pc, #228]	; (8003564 <PDM_Data_Conversion+0x470>)
 8003480:	885b      	ldrh	r3, [r3, #2]
 8003482:	2b09      	cmp	r3, #9
 8003484:	d904      	bls.n	8003490 <PDM_Data_Conversion+0x39c>
 8003486:	4b37      	ldr	r3, [pc, #220]	; (8003564 <PDM_Data_Conversion+0x470>)
 8003488:	885b      	ldrh	r3, [r3, #2]
 800348a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800348e:	d907      	bls.n	80034a0 <PDM_Data_Conversion+0x3ac>
			dataIdBuffer[24] &= 0xFFFE;
 8003490:	4b36      	ldr	r3, [pc, #216]	; (800356c <PDM_Data_Conversion+0x478>)
 8003492:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	4b34      	ldr	r3, [pc, #208]	; (800356c <PDM_Data_Conversion+0x478>)
 800349c:	861a      	strh	r2, [r3, #48]	; 0x30
 800349e:	e006      	b.n	80034ae <PDM_Data_Conversion+0x3ba>
		else
			dataIdBuffer[24] |= 1;
 80034a0:	4b32      	ldr	r3, [pc, #200]	; (800356c <PDM_Data_Conversion+0x478>)
 80034a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	4b30      	ldr	r3, [pc, #192]	; (800356c <PDM_Data_Conversion+0x478>)
 80034ac:	861a      	strh	r2, [r3, #48]	; 0x30

		dataBuffer[24] = adcBuffer[0] - adcBuffer[8];//__PDM_CONVERT_VOLTAGE(adcBuffer[0], adcBuffer[8]);
 80034ae:	4b2d      	ldr	r3, [pc, #180]	; (8003564 <PDM_Data_Conversion+0x470>)
 80034b0:	881a      	ldrh	r2, [r3, #0]
 80034b2:	4b2c      	ldr	r3, [pc, #176]	; (8003564 <PDM_Data_Conversion+0x470>)
 80034b4:	8a1b      	ldrh	r3, [r3, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <PDM_Data_Conversion+0x474>)
 80034bc:	861a      	strh	r2, [r3, #48]	; 0x30

		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80034be:	2201      	movs	r2, #1
 80034c0:	2120      	movs	r1, #32
 80034c2:	482b      	ldr	r0, [pc, #172]	; (8003570 <PDM_Data_Conversion+0x47c>)
 80034c4:	f003 f80e 	bl	80064e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 80034c8:	2200      	movs	r2, #0
 80034ca:	2108      	movs	r1, #8
 80034cc:	4828      	ldr	r0, [pc, #160]	; (8003570 <PDM_Data_Conversion+0x47c>)
 80034ce:	f003 f809 	bl	80064e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 80034d2:	2200      	movs	r2, #0
 80034d4:	2104      	movs	r1, #4
 80034d6:	4826      	ldr	r0, [pc, #152]	; (8003570 <PDM_Data_Conversion+0x47c>)
 80034d8:	f003 f804 	bl	80064e4 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Current0;
 80034dc:	4b25      	ldr	r3, [pc, #148]	; (8003574 <PDM_Data_Conversion+0x480>)
 80034de:	2202      	movs	r2, #2
 80034e0:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2200      	movs	r2, #0
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_CURR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034fa:	60da      	str	r2, [r3, #12]

		break;
 80034fc:	e01f      	b.n	800353e <PDM_Data_Conversion+0x44a>

	default:
		HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80034fe:	2201      	movs	r2, #1
 8003500:	2120      	movs	r1, #32
 8003502:	481b      	ldr	r0, [pc, #108]	; (8003570 <PDM_Data_Conversion+0x47c>)
 8003504:	f002 ffee 	bl	80064e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL0_GPIO_Port, SEL0_Pin, GPIO_PIN_RESET);
 8003508:	2200      	movs	r2, #0
 800350a:	2108      	movs	r1, #8
 800350c:	4818      	ldr	r0, [pc, #96]	; (8003570 <PDM_Data_Conversion+0x47c>)
 800350e:	f002 ffe9 	bl	80064e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, GPIO_PIN_RESET);
 8003512:	2200      	movs	r2, #0
 8003514:	2104      	movs	r1, #4
 8003516:	4816      	ldr	r0, [pc, #88]	; (8003570 <PDM_Data_Conversion+0x47c>)
 8003518:	f002 ffe4 	bl	80064e4 <HAL_GPIO_WritePin>

		flagReading[0] = Data_Read_Current0;
 800351c:	4b15      	ldr	r3, [pc, #84]	; (8003574 <PDM_Data_Conversion+0x480>)
 800351e:	2202      	movs	r2, #2
 8003520:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2200      	movs	r2, #0
 8003528:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(htim, READING_DELAY_CURR);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800353a:	60da      	str	r2, [r3, #12]

		break;
 800353c:	bf00      	nop
	}

	//Convert ADC into MCU temperature
	dataBuffer[25] = adcBuffer[9];//__PDM_CONVERT_MCU_TEMPERATURE(adcBuffer[9]);
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <PDM_Data_Conversion+0x470>)
 8003540:	8a5a      	ldrh	r2, [r3, #18]
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <PDM_Data_Conversion+0x474>)
 8003544:	865a      	strh	r2, [r3, #50]	; 0x32

	//Start readings timer
	retVal = HAL_TIM_Base_Start_IT(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f006 fa7a 	bl	8009a40 <HAL_TIM_Base_Start_IT>
 800354c:	4603      	mov	r3, r0
 800354e:	72fb      	strb	r3, [r7, #11]

	//If there is any virtual fuse tripped
	if(flag_fuse != 0)
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <PDM_Data_Conversion+0x466>
		PDM_Output_Process();
 8003556:	f7fe fdb5 	bl	80020c4 <PDM_Output_Process>

	return retVal;
 800355a:	7afb      	ldrb	r3, [r7, #11]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	200007b4 	.word	0x200007b4
 8003568:	2000073c 	.word	0x2000073c
 800356c:	20000778 	.word	0x20000778
 8003570:	40021000 	.word	0x40021000
 8003574:	200007cc 	.word	0x200007cc

08003578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <HAL_MspInit+0x4c>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	4a0f      	ldr	r2, [pc, #60]	; (80035c4 <HAL_MspInit+0x4c>)
 8003588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800358c:	6453      	str	r3, [r2, #68]	; 0x44
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <HAL_MspInit+0x4c>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003596:	607b      	str	r3, [r7, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_MspInit+0x4c>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	4a08      	ldr	r2, [pc, #32]	; (80035c4 <HAL_MspInit+0x4c>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a8:	6413      	str	r3, [r2, #64]	; 0x40
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_MspInit+0x4c>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800

080035c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08c      	sub	sp, #48	; 0x30
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d0:	f107 031c 	add.w	r3, r7, #28
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a6b      	ldr	r2, [pc, #428]	; (8003794 <HAL_ADC_MspInit+0x1cc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d172      	bne.n	80036d0 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	4a69      	ldr	r2, [pc, #420]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 80035f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f8:	6453      	str	r3, [r2, #68]	; 0x44
 80035fa:	4b67      	ldr	r3, [pc, #412]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	4b63      	ldr	r3, [pc, #396]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	4a62      	ldr	r2, [pc, #392]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6313      	str	r3, [r2, #48]	; 0x30
 8003616:	4b60      	ldr	r3, [pc, #384]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	4b5c      	ldr	r3, [pc, #368]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	4a5b      	ldr	r2, [pc, #364]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 800362c:	f043 0304 	orr.w	r3, r3, #4
 8003630:	6313      	str	r3, [r2, #48]	; 0x30
 8003632:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ANALOG6_Pin|ANALOG7_Pin|ANALOG8_Pin;
 800363e:	23e0      	movs	r3, #224	; 0xe0
 8003640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003642:	2303      	movs	r3, #3
 8003644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003646:	2300      	movs	r3, #0
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364a:	f107 031c 	add.w	r3, r7, #28
 800364e:	4619      	mov	r1, r3
 8003650:	4852      	ldr	r0, [pc, #328]	; (800379c <HAL_ADC_MspInit+0x1d4>)
 8003652:	f002 fca7 	bl	8005fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ANALOG9_Pin;
 8003656:	2310      	movs	r3, #16
 8003658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800365a:	2303      	movs	r3, #3
 800365c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ANALOG9_GPIO_Port, &GPIO_InitStruct);
 8003662:	f107 031c 	add.w	r3, r7, #28
 8003666:	4619      	mov	r1, r3
 8003668:	484d      	ldr	r0, [pc, #308]	; (80037a0 <HAL_ADC_MspInit+0x1d8>)
 800366a:	f002 fc9b 	bl	8005fa4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800366e:	4b4d      	ldr	r3, [pc, #308]	; (80037a4 <HAL_ADC_MspInit+0x1dc>)
 8003670:	4a4d      	ldr	r2, [pc, #308]	; (80037a8 <HAL_ADC_MspInit+0x1e0>)
 8003672:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <HAL_ADC_MspInit+0x1dc>)
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800367a:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <HAL_ADC_MspInit+0x1dc>)
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003680:	4b48      	ldr	r3, [pc, #288]	; (80037a4 <HAL_ADC_MspInit+0x1dc>)
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003686:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <HAL_ADC_MspInit+0x1dc>)
 8003688:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800368c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800368e:	4b45      	ldr	r3, [pc, #276]	; (80037a4 <HAL_ADC_MspInit+0x1dc>)
 8003690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003694:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003696:	4b43      	ldr	r3, [pc, #268]	; (80037a4 <HAL_ADC_MspInit+0x1dc>)
 8003698:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800369c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800369e:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <HAL_ADC_MspInit+0x1dc>)
 80036a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80036a6:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <HAL_ADC_MspInit+0x1dc>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ac:	4b3d      	ldr	r3, [pc, #244]	; (80037a4 <HAL_ADC_MspInit+0x1dc>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036b2:	483c      	ldr	r0, [pc, #240]	; (80037a4 <HAL_ADC_MspInit+0x1dc>)
 80036b4:	f002 f906 	bl	80058c4 <HAL_DMA_Init>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80036be:	f7fd fda9 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a37      	ldr	r2, [pc, #220]	; (80037a4 <HAL_ADC_MspInit+0x1dc>)
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
 80036c8:	4a36      	ldr	r2, [pc, #216]	; (80037a4 <HAL_ADC_MspInit+0x1dc>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80036ce:	e05d      	b.n	800378c <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a35      	ldr	r2, [pc, #212]	; (80037ac <HAL_ADC_MspInit+0x1e4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d158      	bne.n	800378c <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	4a2d      	ldr	r2, [pc, #180]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 80036e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036e8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ea:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	4b27      	ldr	r3, [pc, #156]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	4a26      	ldr	r2, [pc, #152]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	6313      	str	r3, [r2, #48]	; 0x30
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_ADC_MspInit+0x1d0>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin
 8003712:	231f      	movs	r3, #31
 8003714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003716:	2303      	movs	r3, #3
 8003718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371a:	2300      	movs	r3, #0
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371e:	f107 031c 	add.w	r3, r7, #28
 8003722:	4619      	mov	r1, r3
 8003724:	481d      	ldr	r0, [pc, #116]	; (800379c <HAL_ADC_MspInit+0x1d4>)
 8003726:	f002 fc3d 	bl	8005fa4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800372a:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <HAL_ADC_MspInit+0x1e8>)
 800372c:	4a21      	ldr	r2, [pc, #132]	; (80037b4 <HAL_ADC_MspInit+0x1ec>)
 800372e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003730:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <HAL_ADC_MspInit+0x1e8>)
 8003732:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003736:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <HAL_ADC_MspInit+0x1e8>)
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800373e:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <HAL_ADC_MspInit+0x1e8>)
 8003740:	2200      	movs	r2, #0
 8003742:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003744:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <HAL_ADC_MspInit+0x1e8>)
 8003746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800374a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800374c:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <HAL_ADC_MspInit+0x1e8>)
 800374e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003752:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003754:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <HAL_ADC_MspInit+0x1e8>)
 8003756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800375a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <HAL_ADC_MspInit+0x1e8>)
 800375e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003762:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <HAL_ADC_MspInit+0x1e8>)
 8003766:	2200      	movs	r2, #0
 8003768:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <HAL_ADC_MspInit+0x1e8>)
 800376c:	2200      	movs	r2, #0
 800376e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003770:	480f      	ldr	r0, [pc, #60]	; (80037b0 <HAL_ADC_MspInit+0x1e8>)
 8003772:	f002 f8a7 	bl	80058c4 <HAL_DMA_Init>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800377c:	f7fd fd4a 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <HAL_ADC_MspInit+0x1e8>)
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <HAL_ADC_MspInit+0x1e8>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800378c:	bf00      	nop
 800378e:	3730      	adds	r7, #48	; 0x30
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40012000 	.word	0x40012000
 8003798:	40023800 	.word	0x40023800
 800379c:	40020000 	.word	0x40020000
 80037a0:	40020800 	.word	0x40020800
 80037a4:	2000020c 	.word	0x2000020c
 80037a8:	40026410 	.word	0x40026410
 80037ac:	40012100 	.word	0x40012100
 80037b0:	2000026c 	.word	0x2000026c
 80037b4:	40026440 	.word	0x40026440

080037b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_CAN_MspInit+0x94>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d134      	bne.n	8003844 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_CAN_MspInit+0x98>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <HAL_CAN_MspInit+0x98>)
 80037e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037e8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ea:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_CAN_MspInit+0x98>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_CAN_MspInit+0x98>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	4a14      	ldr	r2, [pc, #80]	; (8003850 <HAL_CAN_MspInit+0x98>)
 8003800:	f043 0302 	orr.w	r3, r3, #2
 8003804:	6313      	str	r3, [r2, #48]	; 0x30
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_CAN_MspInit+0x98>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003812:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003818:	2302      	movs	r3, #2
 800381a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003820:	2303      	movs	r3, #3
 8003822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003824:	2309      	movs	r3, #9
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003828:	f107 0314 	add.w	r3, r7, #20
 800382c:	4619      	mov	r1, r3
 800382e:	4809      	ldr	r0, [pc, #36]	; (8003854 <HAL_CAN_MspInit+0x9c>)
 8003830:	f002 fbb8 	bl	8005fa4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8003834:	2200      	movs	r2, #0
 8003836:	2102      	movs	r1, #2
 8003838:	2014      	movs	r0, #20
 800383a:	f001 ffe2 	bl	8005802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800383e:	2014      	movs	r0, #20
 8003840:	f001 fffb 	bl	800583a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003844:	bf00      	nop
 8003846:	3728      	adds	r7, #40	; 0x28
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40006400 	.word	0x40006400
 8003850:	40023800 	.word	0x40023800
 8003854:	40020400 	.word	0x40020400

08003858 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <HAL_CAN_MspDeInit+0x38>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d10d      	bne.n	8003886 <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <HAL_CAN_MspDeInit+0x3c>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	4a09      	ldr	r2, [pc, #36]	; (8003894 <HAL_CAN_MspDeInit+0x3c>)
 8003870:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003874:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8003876:	f44f 7140 	mov.w	r1, #768	; 0x300
 800387a:	4807      	ldr	r0, [pc, #28]	; (8003898 <HAL_CAN_MspDeInit+0x40>)
 800387c:	f002 fd26 	bl	80062cc <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8003880:	2014      	movs	r0, #20
 8003882:	f001 ffe8 	bl	8005856 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40006400 	.word	0x40006400
 8003894:	40023800 	.word	0x40023800
 8003898:	40020400 	.word	0x40020400

0800389c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0b      	ldr	r2, [pc, #44]	; (80038d8 <HAL_CRC_MspInit+0x3c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d10d      	bne.n	80038ca <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_CRC_MspInit+0x40>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <HAL_CRC_MspInit+0x40>)
 80038b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b07      	ldr	r3, [pc, #28]	; (80038dc <HAL_CRC_MspInit+0x40>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80038ca:	bf00      	nop
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40023000 	.word	0x40023000
 80038dc:	40023800 	.word	0x40023800

080038e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a19      	ldr	r2, [pc, #100]	; (8003964 <HAL_I2C_MspInit+0x84>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d12b      	bne.n	800395a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	4b18      	ldr	r3, [pc, #96]	; (8003968 <HAL_I2C_MspInit+0x88>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4a17      	ldr	r2, [pc, #92]	; (8003968 <HAL_I2C_MspInit+0x88>)
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	6313      	str	r3, [r2, #48]	; 0x30
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <HAL_I2C_MspInit+0x88>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800391e:	23c0      	movs	r3, #192	; 0xc0
 8003920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003922:	2312      	movs	r3, #18
 8003924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392a:	2303      	movs	r3, #3
 800392c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800392e:	2304      	movs	r3, #4
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003932:	f107 0314 	add.w	r3, r7, #20
 8003936:	4619      	mov	r1, r3
 8003938:	480c      	ldr	r0, [pc, #48]	; (800396c <HAL_I2C_MspInit+0x8c>)
 800393a:	f002 fb33 	bl	8005fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	4b09      	ldr	r3, [pc, #36]	; (8003968 <HAL_I2C_MspInit+0x88>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a08      	ldr	r2, [pc, #32]	; (8003968 <HAL_I2C_MspInit+0x88>)
 8003948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_I2C_MspInit+0x88>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800395a:	bf00      	nop
 800395c:	3728      	adds	r7, #40	; 0x28
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40005400 	.word	0x40005400
 8003968:	40023800 	.word	0x40023800
 800396c:	40020400 	.word	0x40020400

08003970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a98      	ldr	r2, [pc, #608]	; (8003be0 <HAL_TIM_Base_MspInit+0x270>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d152      	bne.n	8003a28 <HAL_TIM_Base_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	4b97      	ldr	r3, [pc, #604]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	4a96      	ldr	r2, [pc, #600]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6453      	str	r3, [r2, #68]	; 0x44
 8003992:	4b94      	ldr	r3, [pc, #592]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 800399e:	4b92      	ldr	r3, [pc, #584]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 80039a0:	4a92      	ldr	r2, [pc, #584]	; (8003bec <HAL_TIM_Base_MspInit+0x27c>)
 80039a2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 80039a4:	4b90      	ldr	r3, [pc, #576]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 80039a6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80039aa:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039ac:	4b8e      	ldr	r3, [pc, #568]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b2:	4b8d      	ldr	r3, [pc, #564]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80039b8:	4b8b      	ldr	r3, [pc, #556]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 80039ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039be:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039c0:	4b89      	ldr	r3, [pc, #548]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 80039c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039c6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039c8:	4b87      	ldr	r3, [pc, #540]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 80039ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039ce:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 80039d0:	4b85      	ldr	r3, [pc, #532]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80039d6:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 80039d8:	2200      	movs	r2, #0
 80039da:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039dc:	4b82      	ldr	r3, [pc, #520]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 80039de:	2200      	movs	r2, #0
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 80039e2:	4881      	ldr	r0, [pc, #516]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 80039e4:	f001 ff6e 	bl	80058c4 <HAL_DMA_Init>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80039ee:	f7fd fc11 	bl	8001214 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a7c      	ldr	r2, [pc, #496]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
 80039f8:	4a7b      	ldr	r2, [pc, #492]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a79      	ldr	r2, [pc, #484]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
 8003a04:	4a78      	ldr	r2, [pc, #480]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a76      	ldr	r2, [pc, #472]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 8003a0e:	635a      	str	r2, [r3, #52]	; 0x34
 8003a10:	4a75      	ldr	r2, [pc, #468]	; (8003be8 <HAL_TIM_Base_MspInit+0x278>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2100      	movs	r1, #0
 8003a1a:	2019      	movs	r0, #25
 8003a1c:	f001 fef1 	bl	8005802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003a20:	2019      	movs	r0, #25
 8003a22:	f001 ff0a 	bl	800583a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003a26:	e13c      	b.n	8003ca2 <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a30:	d14c      	bne.n	8003acc <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	4b6b      	ldr	r3, [pc, #428]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4a6a      	ldr	r2, [pc, #424]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6413      	str	r3, [r2, #64]	; 0x40
 8003a42:	4b68      	ldr	r3, [pc, #416]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8003a4e:	4b68      	ldr	r3, [pc, #416]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003a50:	4a68      	ldr	r2, [pc, #416]	; (8003bf4 <HAL_TIM_Base_MspInit+0x284>)
 8003a52:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8003a54:	4b66      	ldr	r3, [pc, #408]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003a56:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003a5a:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a5c:	4b64      	ldr	r3, [pc, #400]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a62:	4b63      	ldr	r3, [pc, #396]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003a68:	4b61      	ldr	r3, [pc, #388]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a6e:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a70:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a76:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a78:	4b5d      	ldr	r3, [pc, #372]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a7e:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 8003a80:	4b5b      	ldr	r3, [pc, #364]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003a86:	4b5a      	ldr	r3, [pc, #360]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a8c:	4b58      	ldr	r3, [pc, #352]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8003a92:	4857      	ldr	r0, [pc, #348]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003a94:	f001 ff16 	bl	80058c4 <HAL_DMA_Init>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_TIM_Base_MspInit+0x132>
      Error_Handler();
 8003a9e:	f7fd fbb9 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a52      	ldr	r2, [pc, #328]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003aa6:	621a      	str	r2, [r3, #32]
 8003aa8:	4a51      	ldr	r2, [pc, #324]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a4f      	ldr	r2, [pc, #316]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003ab2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ab4:	4a4e      	ldr	r2, [pc, #312]	; (8003bf0 <HAL_TIM_Base_MspInit+0x280>)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003aba:	2200      	movs	r2, #0
 8003abc:	2100      	movs	r1, #0
 8003abe:	201c      	movs	r0, #28
 8003ac0:	f001 fe9f 	bl	8005802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ac4:	201c      	movs	r0, #28
 8003ac6:	f001 feb8 	bl	800583a <HAL_NVIC_EnableIRQ>
}
 8003aca:	e0ea      	b.n	8003ca2 <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM3)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a49      	ldr	r2, [pc, #292]	; (8003bf8 <HAL_TIM_Base_MspInit+0x288>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d14c      	bne.n	8003b70 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	4b42      	ldr	r3, [pc, #264]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	4a41      	ldr	r2, [pc, #260]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003ae0:	f043 0302 	orr.w	r3, r3, #2
 8003ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae6:	4b3f      	ldr	r3, [pc, #252]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8003af2:	4b42      	ldr	r3, [pc, #264]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003af4:	4a42      	ldr	r2, [pc, #264]	; (8003c00 <HAL_TIM_Base_MspInit+0x290>)
 8003af6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8003af8:	4b40      	ldr	r3, [pc, #256]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003afa:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003afe:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b00:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b06:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8003b0c:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b12:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b14:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003b16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b1a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b1c:	4b37      	ldr	r3, [pc, #220]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b22:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8003b24:	4b35      	ldr	r3, [pc, #212]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003b2a:	4b34      	ldr	r3, [pc, #208]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b30:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8003b36:	4831      	ldr	r0, [pc, #196]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003b38:	f001 fec4 	bl	80058c4 <HAL_DMA_Init>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_TIM_Base_MspInit+0x1d6>
      Error_Handler();
 8003b42:	f7fd fb67 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2c      	ldr	r2, [pc, #176]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003b56:	621a      	str	r2, [r3, #32]
 8003b58:	4a28      	ldr	r2, [pc, #160]	; (8003bfc <HAL_TIM_Base_MspInit+0x28c>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2100      	movs	r1, #0
 8003b62:	201d      	movs	r0, #29
 8003b64:	f001 fe4d 	bl	8005802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b68:	201d      	movs	r0, #29
 8003b6a:	f001 fe66 	bl	800583a <HAL_NVIC_EnableIRQ>
}
 8003b6e:	e098      	b.n	8003ca2 <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM6)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a23      	ldr	r2, [pc, #140]	; (8003c04 <HAL_TIM_Base_MspInit+0x294>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d116      	bne.n	8003ba8 <HAL_TIM_Base_MspInit+0x238>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003b84:	f043 0310 	orr.w	r3, r3, #16
 8003b88:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8a:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2100      	movs	r1, #0
 8003b9a:	2036      	movs	r0, #54	; 0x36
 8003b9c:	f001 fe31 	bl	8005802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ba0:	2036      	movs	r0, #54	; 0x36
 8003ba2:	f001 fe4a 	bl	800583a <HAL_NVIC_EnableIRQ>
}
 8003ba6:	e07c      	b.n	8003ca2 <HAL_TIM_Base_MspInit+0x332>
  else if(htim_base->Instance==TIM7)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <HAL_TIM_Base_MspInit+0x298>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d12c      	bne.n	8003c0c <HAL_TIM_Base_MspInit+0x29c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003bbc:	f043 0320 	orr.w	r3, r3, #32
 8003bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_TIM_Base_MspInit+0x274>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	2037      	movs	r0, #55	; 0x37
 8003bd4:	f001 fe15 	bl	8005802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003bd8:	2037      	movs	r0, #55	; 0x37
 8003bda:	f001 fe2e 	bl	800583a <HAL_NVIC_EnableIRQ>
}
 8003bde:	e060      	b.n	8003ca2 <HAL_TIM_Base_MspInit+0x332>
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40023800 	.word	0x40023800
 8003be8:	20000500 	.word	0x20000500
 8003bec:	40026470 	.word	0x40026470
 8003bf0:	20000560 	.word	0x20000560
 8003bf4:	40026028 	.word	0x40026028
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	200005c0 	.word	0x200005c0
 8003c00:	40026040 	.word	0x40026040
 8003c04:	40001000 	.word	0x40001000
 8003c08:	40001400 	.word	0x40001400
  else if(htim_base->Instance==TIM8)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a26      	ldr	r2, [pc, #152]	; (8003cac <HAL_TIM_Base_MspInit+0x33c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d145      	bne.n	8003ca2 <HAL_TIM_Base_MspInit+0x332>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	4b25      	ldr	r3, [pc, #148]	; (8003cb0 <HAL_TIM_Base_MspInit+0x340>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	4a24      	ldr	r2, [pc, #144]	; (8003cb0 <HAL_TIM_Base_MspInit+0x340>)
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	6453      	str	r3, [r2, #68]	; 0x44
 8003c26:	4b22      	ldr	r3, [pc, #136]	; (8003cb0 <HAL_TIM_Base_MspInit+0x340>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch2.Instance = DMA2_Stream3;
 8003c32:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <HAL_TIM_Base_MspInit+0x344>)
 8003c34:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <HAL_TIM_Base_MspInit+0x348>)
 8003c36:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Channel = DMA_CHANNEL_7;
 8003c38:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <HAL_TIM_Base_MspInit+0x344>)
 8003c3a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003c3e:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <HAL_TIM_Base_MspInit+0x344>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c46:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <HAL_TIM_Base_MspInit+0x344>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003c4c:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <HAL_TIM_Base_MspInit+0x344>)
 8003c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c52:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c54:	4b17      	ldr	r3, [pc, #92]	; (8003cb4 <HAL_TIM_Base_MspInit+0x344>)
 8003c56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c5a:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c5c:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <HAL_TIM_Base_MspInit+0x344>)
 8003c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c62:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <HAL_TIM_Base_MspInit+0x344>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003c6a:	4b12      	ldr	r3, [pc, #72]	; (8003cb4 <HAL_TIM_Base_MspInit+0x344>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c70:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <HAL_TIM_Base_MspInit+0x344>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8003c76:	480f      	ldr	r0, [pc, #60]	; (8003cb4 <HAL_TIM_Base_MspInit+0x344>)
 8003c78:	f001 fe24 	bl	80058c4 <HAL_DMA_Init>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_TIM_Base_MspInit+0x316>
      Error_Handler();
 8003c82:	f7fd fac7 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <HAL_TIM_Base_MspInit+0x344>)
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c8c:	4a09      	ldr	r2, [pc, #36]	; (8003cb4 <HAL_TIM_Base_MspInit+0x344>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003c92:	2200      	movs	r2, #0
 8003c94:	2100      	movs	r1, #0
 8003c96:	202c      	movs	r0, #44	; 0x2c
 8003c98:	f001 fdb3 	bl	8005802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003c9c:	202c      	movs	r0, #44	; 0x2c
 8003c9e:	f001 fdcc 	bl	800583a <HAL_NVIC_EnableIRQ>
}
 8003ca2:	bf00      	nop
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40010400 	.word	0x40010400
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	20000620 	.word	0x20000620
 8003cb8:	40026458 	.word	0x40026458

08003cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08c      	sub	sp, #48	; 0x30
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc4:	f107 031c 	add.w	r3, r7, #28
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	60da      	str	r2, [r3, #12]
 8003cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a49      	ldr	r2, [pc, #292]	; (8003e00 <HAL_TIM_MspPostInit+0x144>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d11f      	bne.n	8003d1e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	4b48      	ldr	r3, [pc, #288]	; (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	4a47      	ldr	r2, [pc, #284]	; (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003ce8:	f043 0310 	orr.w	r3, r3, #16
 8003cec:	6313      	str	r3, [r2, #48]	; 0x30
 8003cee:	4b45      	ldr	r3, [pc, #276]	; (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTPUT4_Pin;
 8003cfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d00:	2312      	movs	r3, #18
 8003d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT4_GPIO_Port, &GPIO_InitStruct);
 8003d10:	f107 031c 	add.w	r3, r7, #28
 8003d14:	4619      	mov	r1, r3
 8003d16:	483c      	ldr	r0, [pc, #240]	; (8003e08 <HAL_TIM_MspPostInit+0x14c>)
 8003d18:	f002 f944 	bl	8005fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003d1c:	e06b      	b.n	8003df6 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d26:	d11f      	bne.n	8003d68 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	4b35      	ldr	r3, [pc, #212]	; (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	4a34      	ldr	r2, [pc, #208]	; (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003d32:	f043 0302 	orr.w	r3, r3, #2
 8003d36:	6313      	str	r3, [r2, #48]	; 0x30
 8003d38:	4b32      	ldr	r3, [pc, #200]	; (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OUTPUT3_Pin;
 8003d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d4a:	2312      	movs	r3, #18
 8003d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d52:	2300      	movs	r3, #0
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d56:	2301      	movs	r3, #1
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT3_GPIO_Port, &GPIO_InitStruct);
 8003d5a:	f107 031c 	add.w	r3, r7, #28
 8003d5e:	4619      	mov	r1, r3
 8003d60:	482a      	ldr	r0, [pc, #168]	; (8003e0c <HAL_TIM_MspPostInit+0x150>)
 8003d62:	f002 f91f 	bl	8005fa4 <HAL_GPIO_Init>
}
 8003d66:	e046      	b.n	8003df6 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a28      	ldr	r2, [pc, #160]	; (8003e10 <HAL_TIM_MspPostInit+0x154>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d11e      	bne.n	8003db0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	4a22      	ldr	r2, [pc, #136]	; (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	6313      	str	r3, [r2, #48]	; 0x30
 8003d82:	4b20      	ldr	r3, [pc, #128]	; (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT1_Pin;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d92:	2312      	movs	r3, #18
 8003d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT1_GPIO_Port, &GPIO_InitStruct);
 8003da2:	f107 031c 	add.w	r3, r7, #28
 8003da6:	4619      	mov	r1, r3
 8003da8:	4818      	ldr	r0, [pc, #96]	; (8003e0c <HAL_TIM_MspPostInit+0x150>)
 8003daa:	f002 f8fb 	bl	8005fa4 <HAL_GPIO_Init>
}
 8003dae:	e022      	b.n	8003df6 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <HAL_TIM_MspPostInit+0x158>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d11d      	bne.n	8003df6 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	4a10      	ldr	r2, [pc, #64]	; (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003dc4:	f043 0302 	orr.w	r3, r3, #2
 8003dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dca:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <HAL_TIM_MspPostInit+0x148>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OUTPUT2_Pin;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dda:	2312      	movs	r3, #18
 8003ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2300      	movs	r3, #0
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003de6:	2303      	movs	r3, #3
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OUTPUT2_GPIO_Port, &GPIO_InitStruct);
 8003dea:	f107 031c 	add.w	r3, r7, #28
 8003dee:	4619      	mov	r1, r3
 8003df0:	4806      	ldr	r0, [pc, #24]	; (8003e0c <HAL_TIM_MspPostInit+0x150>)
 8003df2:	f002 f8d7 	bl	8005fa4 <HAL_GPIO_Init>
}
 8003df6:	bf00      	nop
 8003df8:	3730      	adds	r7, #48	; 0x30
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40020400 	.word	0x40020400
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40010400 	.word	0x40010400

08003e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e1c:	e7fe      	b.n	8003e1c <NMI_Handler+0x4>

08003e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e22:	e7fe      	b.n	8003e22 <HardFault_Handler+0x4>

08003e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e28:	e7fe      	b.n	8003e28 <MemManage_Handler+0x4>

08003e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e2e:	e7fe      	b.n	8003e2e <BusFault_Handler+0x4>

08003e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e34:	e7fe      	b.n	8003e34 <UsageFault_Handler+0x4>

08003e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e36:	b480      	push	{r7}
 8003e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e52:	b480      	push	{r7}
 8003e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e64:	f000 f976 	bl	8004154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT1_Pin);
 8003e70:	2001      	movs	r0, #1
 8003e72:	f002 fb6b 	bl	800654c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT2_Pin);
 8003e7e:	2002      	movs	r0, #2
 8003e80:	f002 fb64 	bl	800654c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003e84:	bf00      	nop
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT3_Pin);
 8003e8c:	2004      	movs	r0, #4
 8003e8e:	f002 fb5d 	bl	800654c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT4_Pin);
 8003e9a:	2008      	movs	r0, #8
 8003e9c:	f002 fb56 	bl	800654c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003ea0:	bf00      	nop
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT5_Pin);
 8003ea8:	2010      	movs	r0, #16
 8003eaa:	f002 fb4f 	bl	800654c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8003eb8:	4802      	ldr	r0, [pc, #8]	; (8003ec4 <DMA1_Stream1_IRQHandler+0x10>)
 8003eba:	f001 fe09 	bl	8005ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000560 	.word	0x20000560

08003ec8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8003ecc:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <DMA1_Stream2_IRQHandler+0x10>)
 8003ece:	f001 fdff 	bl	8005ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200005c0 	.word	0x200005c0

08003edc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ee0:	4802      	ldr	r0, [pc, #8]	; (8003eec <CAN1_RX0_IRQHandler+0x10>)
 8003ee2:	f001 f960 	bl	80051a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200002cc 	.word	0x200002cc

08003ef0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ef4:	4802      	ldr	r0, [pc, #8]	; (8003f00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003ef6:	f006 f99b 	bl	800a230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000350 	.word	0x20000350

08003f04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f08:	4802      	ldr	r0, [pc, #8]	; (8003f14 <TIM2_IRQHandler+0x10>)
 8003f0a:	f006 f991 	bl	800a230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000398 	.word	0x20000398

08003f18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <TIM3_IRQHandler+0x10>)
 8003f1e:	f006 f987 	bl	800a230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200003e0 	.word	0x200003e0

08003f2c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003f32:	f006 f97d 	bl	800a230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	200004b8 	.word	0x200004b8

08003f40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <TIM6_DAC_IRQHandler+0x10>)
 8003f46:	f006 f973 	bl	800a230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000428 	.word	0x20000428

08003f54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003f58:	4802      	ldr	r0, [pc, #8]	; (8003f64 <TIM7_IRQHandler+0x10>)
 8003f5a:	f006 f969 	bl	800a230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000470 	.word	0x20000470

08003f68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f6c:	4802      	ldr	r0, [pc, #8]	; (8003f78 <DMA2_Stream0_IRQHandler+0x10>)
 8003f6e:	f001 fdaf 	bl	8005ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	2000020c 	.word	0x2000020c

08003f7c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003f80:	4802      	ldr	r0, [pc, #8]	; (8003f8c <DMA2_Stream2_IRQHandler+0x10>)
 8003f82:	f001 fda5 	bl	8005ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	2000026c 	.word	0x2000026c

08003f90 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8003f94:	4802      	ldr	r0, [pc, #8]	; (8003fa0 <DMA2_Stream3_IRQHandler+0x10>)
 8003f96:	f001 fd9b 	bl	8005ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000620 	.word	0x20000620

08003fa4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8003fa8:	4802      	ldr	r0, [pc, #8]	; (8003fb4 <DMA2_Stream4_IRQHandler+0x10>)
 8003faa:	f001 fd91 	bl	8005ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000500 	.word	0x20000500

08003fb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003fbc:	4802      	ldr	r0, [pc, #8]	; (8003fc8 <OTG_FS_IRQHandler+0x10>)
 8003fbe:	f003 fa22 	bl	8007406 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20001e74 	.word	0x20001e74

08003fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fd4:	4a14      	ldr	r2, [pc, #80]	; (8004028 <_sbrk+0x5c>)
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <_sbrk+0x60>)
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <_sbrk+0x64>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <_sbrk+0x64>)
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <_sbrk+0x68>)
 8003fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <_sbrk+0x64>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d207      	bcs.n	800400c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ffc:	f00b fd26 	bl	800fa4c <__errno>
 8004000:	4603      	mov	r3, r0
 8004002:	220c      	movs	r2, #12
 8004004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004006:	f04f 33ff 	mov.w	r3, #4294967295
 800400a:	e009      	b.n	8004020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <_sbrk+0x64>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <_sbrk+0x64>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	4a05      	ldr	r2, [pc, #20]	; (8004030 <_sbrk+0x64>)
 800401c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20020000 	.word	0x20020000
 800402c:	00004000 	.word	0x00004000
 8004030:	2000098c 	.word	0x2000098c
 8004034:	200025b0 	.word	0x200025b0

08004038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <SystemInit+0x20>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004042:	4a05      	ldr	r2, [pc, #20]	; (8004058 <SystemInit+0x20>)
 8004044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800405c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004094 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004060:	480d      	ldr	r0, [pc, #52]	; (8004098 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004062:	490e      	ldr	r1, [pc, #56]	; (800409c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004064:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004068:	e002      	b.n	8004070 <LoopCopyDataInit>

0800406a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800406a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800406c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800406e:	3304      	adds	r3, #4

08004070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004074:	d3f9      	bcc.n	800406a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004076:	4a0b      	ldr	r2, [pc, #44]	; (80040a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004078:	4c0b      	ldr	r4, [pc, #44]	; (80040a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800407a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800407c:	e001      	b.n	8004082 <LoopFillZerobss>

0800407e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800407e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004080:	3204      	adds	r2, #4

08004082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004084:	d3fb      	bcc.n	800407e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004086:	f7ff ffd7 	bl	8004038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800408a:	f00b fce5 	bl	800fa58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800408e:	f7fc fa3b 	bl	8000508 <main>
  bx  lr    
 8004092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800409c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80040a0:	0800fd5c 	.word	0x0800fd5c
  ldr r2, =_sbss
 80040a4:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80040a8:	200025b0 	.word	0x200025b0

080040ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040ac:	e7fe      	b.n	80040ac <ADC_IRQHandler>
	...

080040b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <HAL_Init+0x40>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0d      	ldr	r2, [pc, #52]	; (80040f0 <HAL_Init+0x40>)
 80040ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_Init+0x40>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0a      	ldr	r2, [pc, #40]	; (80040f0 <HAL_Init+0x40>)
 80040c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040cc:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <HAL_Init+0x40>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a07      	ldr	r2, [pc, #28]	; (80040f0 <HAL_Init+0x40>)
 80040d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040d8:	2003      	movs	r0, #3
 80040da:	f001 fb87 	bl	80057ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040de:	200f      	movs	r0, #15
 80040e0:	f000 f808 	bl	80040f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040e4:	f7ff fa48 	bl	8003578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40023c00 	.word	0x40023c00

080040f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040fc:	4b12      	ldr	r3, [pc, #72]	; (8004148 <HAL_InitTick+0x54>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_InitTick+0x58>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	4619      	mov	r1, r3
 8004106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800410a:	fbb3 f3f1 	udiv	r3, r3, r1
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	4618      	mov	r0, r3
 8004114:	f001 fbad 	bl	8005872 <HAL_SYSTICK_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e00e      	b.n	8004140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b0f      	cmp	r3, #15
 8004126:	d80a      	bhi.n	800413e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004128:	2200      	movs	r2, #0
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	f001 fb67 	bl	8005802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004134:	4a06      	ldr	r2, [pc, #24]	; (8004150 <HAL_InitTick+0x5c>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e000      	b.n	8004140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000000 	.word	0x20000000
 800414c:	20000008 	.word	0x20000008
 8004150:	20000004 	.word	0x20000004

08004154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_IncTick+0x20>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <HAL_IncTick+0x24>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4413      	add	r3, r2
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <HAL_IncTick+0x24>)
 8004166:	6013      	str	r3, [r2, #0]
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000008 	.word	0x20000008
 8004178:	20000990 	.word	0x20000990

0800417c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return uwTick;
 8004180:	4b03      	ldr	r3, [pc, #12]	; (8004190 <HAL_GetTick+0x14>)
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000990 	.word	0x20000990

08004194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800419c:	f7ff ffee 	bl	800417c <HAL_GetTick>
 80041a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d005      	beq.n	80041ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ae:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <HAL_Delay+0x44>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4413      	add	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041ba:	bf00      	nop
 80041bc:	f7ff ffde 	bl	800417c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d8f7      	bhi.n	80041bc <HAL_Delay+0x28>
  {
  }
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000008 	.word	0x20000008

080041dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e033      	b.n	800425a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff f9e4 	bl	80035c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	d118      	bne.n	800424c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004222:	f023 0302 	bic.w	r3, r3, #2
 8004226:	f043 0202 	orr.w	r2, r3, #2
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa78 	bl	8004724 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f023 0303 	bic.w	r3, r3, #3
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
 800424a:	e001      	b.n	8004250 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_ADC_Start_DMA+0x1e>
 800427e:	2302      	movs	r3, #2
 8004280:	e0e9      	b.n	8004456 <HAL_ADC_Start_DMA+0x1f2>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d018      	beq.n	80042ca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042a8:	4b6d      	ldr	r3, [pc, #436]	; (8004460 <HAL_ADC_Start_DMA+0x1fc>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a6d      	ldr	r2, [pc, #436]	; (8004464 <HAL_ADC_Start_DMA+0x200>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	0c9a      	lsrs	r2, r3, #18
 80042b4:	4613      	mov	r3, r2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	4413      	add	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80042bc:	e002      	b.n	80042c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f9      	bne.n	80042be <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d8:	d107      	bne.n	80042ea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	f040 80a1 	bne.w	800443c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004324:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004338:	d106      	bne.n	8004348 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	f023 0206 	bic.w	r2, r3, #6
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	645a      	str	r2, [r3, #68]	; 0x44
 8004346:	e002      	b.n	800434e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004356:	4b44      	ldr	r3, [pc, #272]	; (8004468 <HAL_ADC_Start_DMA+0x204>)
 8004358:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	4a43      	ldr	r2, [pc, #268]	; (800446c <HAL_ADC_Start_DMA+0x208>)
 8004360:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	4a42      	ldr	r2, [pc, #264]	; (8004470 <HAL_ADC_Start_DMA+0x20c>)
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	4a41      	ldr	r2, [pc, #260]	; (8004474 <HAL_ADC_Start_DMA+0x210>)
 8004370:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800437a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800438a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800439a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	334c      	adds	r3, #76	; 0x4c
 80043a6:	4619      	mov	r1, r3
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f001 fb38 	bl	8005a20 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d12a      	bne.n	8004412 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a2d      	ldr	r2, [pc, #180]	; (8004478 <HAL_ADC_Start_DMA+0x214>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d015      	beq.n	80043f2 <HAL_ADC_Start_DMA+0x18e>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a2c      	ldr	r2, [pc, #176]	; (800447c <HAL_ADC_Start_DMA+0x218>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d105      	bne.n	80043dc <HAL_ADC_Start_DMA+0x178>
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_ADC_Start_DMA+0x204>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a27      	ldr	r2, [pc, #156]	; (8004480 <HAL_ADC_Start_DMA+0x21c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d136      	bne.n	8004454 <HAL_ADC_Start_DMA+0x1f0>
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <HAL_ADC_Start_DMA+0x204>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d130      	bne.n	8004454 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d129      	bne.n	8004454 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	e020      	b.n	8004454 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a18      	ldr	r2, [pc, #96]	; (8004478 <HAL_ADC_Start_DMA+0x214>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d11b      	bne.n	8004454 <HAL_ADC_Start_DMA+0x1f0>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d114      	bne.n	8004454 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004438:	609a      	str	r2, [r3, #8]
 800443a:	e00b      	b.n	8004454 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	f043 0210 	orr.w	r2, r3, #16
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444c:	f043 0201 	orr.w	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000000 	.word	0x20000000
 8004464:	431bde83 	.word	0x431bde83
 8004468:	40012300 	.word	0x40012300
 800446c:	0800491d 	.word	0x0800491d
 8004470:	080049d7 	.word	0x080049d7
 8004474:	080049f3 	.word	0x080049f3
 8004478:	40012000 	.word	0x40012000
 800447c:	40012100 	.word	0x40012100
 8004480:	40012200 	.word	0x40012200

08004484 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x1c>
 80044d8:	2302      	movs	r3, #2
 80044da:	e113      	b.n	8004704 <HAL_ADC_ConfigChannel+0x244>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b09      	cmp	r3, #9
 80044ea:	d925      	bls.n	8004538 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68d9      	ldr	r1, [r3, #12]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	4613      	mov	r3, r2
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	4413      	add	r3, r2
 8004500:	3b1e      	subs	r3, #30
 8004502:	2207      	movs	r2, #7
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43da      	mvns	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	400a      	ands	r2, r1
 8004510:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68d9      	ldr	r1, [r3, #12]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	b29b      	uxth	r3, r3
 8004522:	4618      	mov	r0, r3
 8004524:	4603      	mov	r3, r0
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	4403      	add	r3, r0
 800452a:	3b1e      	subs	r3, #30
 800452c:	409a      	lsls	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	e022      	b.n	800457e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6919      	ldr	r1, [r3, #16]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	4613      	mov	r3, r2
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	4413      	add	r3, r2
 800454c:	2207      	movs	r2, #7
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43da      	mvns	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	400a      	ands	r2, r1
 800455a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6919      	ldr	r1, [r3, #16]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	4618      	mov	r0, r3
 800456e:	4603      	mov	r3, r0
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	4403      	add	r3, r0
 8004574:	409a      	lsls	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b06      	cmp	r3, #6
 8004584:	d824      	bhi.n	80045d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	3b05      	subs	r3, #5
 8004598:	221f      	movs	r2, #31
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43da      	mvns	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	400a      	ands	r2, r1
 80045a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	4618      	mov	r0, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	3b05      	subs	r3, #5
 80045c2:	fa00 f203 	lsl.w	r2, r0, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	635a      	str	r2, [r3, #52]	; 0x34
 80045ce:	e04c      	b.n	800466a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b0c      	cmp	r3, #12
 80045d6:	d824      	bhi.n	8004622 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	3b23      	subs	r3, #35	; 0x23
 80045ea:	221f      	movs	r2, #31
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43da      	mvns	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	400a      	ands	r2, r1
 80045f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	b29b      	uxth	r3, r3
 8004606:	4618      	mov	r0, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	3b23      	subs	r3, #35	; 0x23
 8004614:	fa00 f203 	lsl.w	r2, r0, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	631a      	str	r2, [r3, #48]	; 0x30
 8004620:	e023      	b.n	800466a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	3b41      	subs	r3, #65	; 0x41
 8004634:	221f      	movs	r2, #31
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43da      	mvns	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	400a      	ands	r2, r1
 8004642:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	4618      	mov	r0, r3
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	3b41      	subs	r3, #65	; 0x41
 800465e:	fa00 f203 	lsl.w	r2, r0, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800466a:	4b29      	ldr	r3, [pc, #164]	; (8004710 <HAL_ADC_ConfigChannel+0x250>)
 800466c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a28      	ldr	r2, [pc, #160]	; (8004714 <HAL_ADC_ConfigChannel+0x254>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d10f      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x1d8>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b12      	cmp	r3, #18
 800467e:	d10b      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1d      	ldr	r2, [pc, #116]	; (8004714 <HAL_ADC_ConfigChannel+0x254>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d12b      	bne.n	80046fa <HAL_ADC_ConfigChannel+0x23a>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <HAL_ADC_ConfigChannel+0x258>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <HAL_ADC_ConfigChannel+0x1f4>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b11      	cmp	r3, #17
 80046b2:	d122      	bne.n	80046fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a11      	ldr	r2, [pc, #68]	; (8004718 <HAL_ADC_ConfigChannel+0x258>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d111      	bne.n	80046fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046d6:	4b11      	ldr	r3, [pc, #68]	; (800471c <HAL_ADC_ConfigChannel+0x25c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a11      	ldr	r2, [pc, #68]	; (8004720 <HAL_ADC_ConfigChannel+0x260>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	0c9a      	lsrs	r2, r3, #18
 80046e2:	4613      	mov	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046ec:	e002      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f9      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40012300 	.word	0x40012300
 8004714:	40012000 	.word	0x40012000
 8004718:	10000012 	.word	0x10000012
 800471c:	20000000 	.word	0x20000000
 8004720:	431bde83 	.word	0x431bde83

08004724 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800472c:	4b79      	ldr	r3, [pc, #484]	; (8004914 <ADC_Init+0x1f0>)
 800472e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	431a      	orrs	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6859      	ldr	r1, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	021a      	lsls	r2, r3, #8
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800477c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6859      	ldr	r1, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800479e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6899      	ldr	r1, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	4a58      	ldr	r2, [pc, #352]	; (8004918 <ADC_Init+0x1f4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d022      	beq.n	8004802 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6899      	ldr	r1, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6899      	ldr	r1, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	e00f      	b.n	8004822 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004820:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0202 	bic.w	r2, r2, #2
 8004830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6899      	ldr	r1, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7e1b      	ldrb	r3, [r3, #24]
 800483c:	005a      	lsls	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01b      	beq.n	8004888 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800485e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800486e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	3b01      	subs	r3, #1
 800487c:	035a      	lsls	r2, r3, #13
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	e007      	b.n	8004898 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004896:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80048a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	051a      	lsls	r2, r3, #20
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6899      	ldr	r1, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048da:	025a      	lsls	r2, r3, #9
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6899      	ldr	r1, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	029a      	lsls	r2, r3, #10
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40012300 	.word	0x40012300
 8004918:	0f000001 	.word	0x0f000001

0800491c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004932:	2b00      	cmp	r3, #0
 8004934:	d13c      	bne.n	80049b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d12b      	bne.n	80049a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004954:	2b00      	cmp	r3, #0
 8004956:	d127      	bne.n	80049a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004970:	2b00      	cmp	r3, #0
 8004972:	d119      	bne.n	80049a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0220 	bic.w	r2, r2, #32
 8004982:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d105      	bne.n	80049a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	f043 0201 	orr.w	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff fd6b 	bl	8004484 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80049ae:	e00e      	b.n	80049ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff fd75 	bl	80044ac <HAL_ADC_ErrorCallback>
}
 80049c2:	e004      	b.n	80049ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
}
 80049ce:	bf00      	nop
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7ff fd57 	bl	8004498 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2240      	movs	r2, #64	; 0x40
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	f043 0204 	orr.w	r2, r3, #4
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f7ff fd4a 	bl	80044ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e0ed      	b.n	8004c0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fe feba 	bl	80037b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a54:	f7ff fb92 	bl	800417c <HAL_GetTick>
 8004a58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a5a:	e012      	b.n	8004a82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a5c:	f7ff fb8e 	bl	800417c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b0a      	cmp	r3, #10
 8004a68:	d90b      	bls.n	8004a82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2205      	movs	r2, #5
 8004a7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e0c5      	b.n	8004c0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0e5      	beq.n	8004a5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0202 	bic.w	r2, r2, #2
 8004a9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aa0:	f7ff fb6c 	bl	800417c <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004aa6:	e012      	b.n	8004ace <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004aa8:	f7ff fb68 	bl	800417c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b0a      	cmp	r3, #10
 8004ab4:	d90b      	bls.n	8004ace <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2205      	movs	r2, #5
 8004ac6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e09f      	b.n	8004c0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e5      	bne.n	8004aa8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	7e1b      	ldrb	r3, [r3, #24]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d108      	bne.n	8004af6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	e007      	b.n	8004b06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	7e5b      	ldrb	r3, [r3, #25]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d108      	bne.n	8004b20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	e007      	b.n	8004b30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	7e9b      	ldrb	r3, [r3, #26]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d108      	bne.n	8004b4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0220 	orr.w	r2, r2, #32
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e007      	b.n	8004b5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0220 	bic.w	r2, r2, #32
 8004b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	7edb      	ldrb	r3, [r3, #27]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d108      	bne.n	8004b74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0210 	bic.w	r2, r2, #16
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e007      	b.n	8004b84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0210 	orr.w	r2, r2, #16
 8004b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	7f1b      	ldrb	r3, [r3, #28]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d108      	bne.n	8004b9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0208 	orr.w	r2, r2, #8
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e007      	b.n	8004bae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0208 	bic.w	r2, r2, #8
 8004bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	7f5b      	ldrb	r3, [r3, #29]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d108      	bne.n	8004bc8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0204 	orr.w	r2, r2, #4
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	e007      	b.n	8004bd8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0204 	bic.w	r2, r2, #4
 8004bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	ea42 0103 	orr.w	r1, r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	1e5a      	subs	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e015      	b.n	8004c54 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f93b 	bl	8004ea4 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fe fe12 	bl	8003858 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c42:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c72:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004c74:	7cfb      	ldrb	r3, [r7, #19]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d003      	beq.n	8004c82 <HAL_CAN_ConfigFilter+0x26>
 8004c7a:	7cfb      	ldrb	r3, [r7, #19]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	f040 80be 	bne.w	8004dfe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004c82:	4b65      	ldr	r3, [pc, #404]	; (8004e18 <HAL_CAN_ConfigFilter+0x1bc>)
 8004c84:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c8c:	f043 0201 	orr.w	r2, r3, #1
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	401a      	ands	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d123      	bne.n	8004d2c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	43db      	mvns	r3, r3
 8004cee:	401a      	ands	r2, r3
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d06:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	3248      	adds	r2, #72	; 0x48
 8004d0c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d20:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d22:	6979      	ldr	r1, [r7, #20]
 8004d24:	3348      	adds	r3, #72	; 0x48
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	440b      	add	r3, r1
 8004d2a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d122      	bne.n	8004d7a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d54:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	3248      	adds	r2, #72	; 0x48
 8004d5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d70:	6979      	ldr	r1, [r7, #20]
 8004d72:	3348      	adds	r3, #72	; 0x48
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	440b      	add	r3, r1
 8004d78:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004d94:	e007      	b.n	8004da6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	43db      	mvns	r3, r3
 8004db8:	401a      	ands	r2, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004dc0:	e007      	b.n	8004dd2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d107      	bne.n	8004dea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004df0:	f023 0201 	bic.w	r2, r3, #1
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e006      	b.n	8004e0c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
  }
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40006400 	.word	0x40006400

08004e1c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d12e      	bne.n	8004e8e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e48:	f7ff f998 	bl	800417c <HAL_GetTick>
 8004e4c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e4e:	e012      	b.n	8004e76 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e50:	f7ff f994 	bl	800417c <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b0a      	cmp	r3, #10
 8004e5c:	d90b      	bls.n	8004e76 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2205      	movs	r2, #5
 8004e6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e012      	b.n	8004e9c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e5      	bne.n	8004e50 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e006      	b.n	8004e9c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
  }
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d133      	bne.n	8004f20 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ec8:	f7ff f958 	bl	800417c <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004ece:	e012      	b.n	8004ef6 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ed0:	f7ff f954 	bl	800417c <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b0a      	cmp	r3, #10
 8004edc:	d90b      	bls.n	8004ef6 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2205      	movs	r2, #5
 8004eee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e01b      	b.n	8004f2e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0e5      	beq.n	8004ed0 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0202 	bic.w	r2, r2, #2
 8004f12:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e006      	b.n	8004f2e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
  }
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f36:	b480      	push	{r7}
 8004f38:	b087      	sub	sp, #28
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f4a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d003      	beq.n	8004f5a <HAL_CAN_GetRxMessage+0x24>
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	f040 80f3 	bne.w	8005140 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10e      	bne.n	8004f7e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d116      	bne.n	8004f9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e0e7      	b.n	800514e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d107      	bne.n	8004f9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0d8      	b.n	800514e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	331b      	adds	r3, #27
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	4413      	add	r3, r2
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0204 	and.w	r2, r3, #4
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	331b      	adds	r3, #27
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	4413      	add	r3, r2
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	0d5b      	lsrs	r3, r3, #21
 8004fca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	e00b      	b.n	8004fec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	331b      	adds	r3, #27
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	4413      	add	r3, r2
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	08db      	lsrs	r3, r3, #3
 8004fe4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	331b      	adds	r3, #27
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	4413      	add	r3, r2
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0202 	and.w	r2, r3, #2
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	331b      	adds	r3, #27
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	4413      	add	r3, r2
 800500e:	3304      	adds	r3, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 020f 	and.w	r2, r3, #15
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	331b      	adds	r3, #27
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	4413      	add	r3, r2
 8005026:	3304      	adds	r3, #4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	0a1b      	lsrs	r3, r3, #8
 800502c:	b2da      	uxtb	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	331b      	adds	r3, #27
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	4413      	add	r3, r2
 800503e:	3304      	adds	r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	0c1b      	lsrs	r3, r3, #16
 8005044:	b29a      	uxth	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	4413      	add	r3, r2
 8005054:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	4413      	add	r3, r2
 800506a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	0a1a      	lsrs	r2, r3, #8
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	3301      	adds	r3, #1
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	4413      	add	r3, r2
 8005084:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	0c1a      	lsrs	r2, r3, #16
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	3302      	adds	r3, #2
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	4413      	add	r3, r2
 800509e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	0e1a      	lsrs	r2, r3, #24
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	3303      	adds	r3, #3
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	3304      	adds	r3, #4
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	0a1a      	lsrs	r2, r3, #8
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	3305      	adds	r3, #5
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	0c1a      	lsrs	r2, r3, #16
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	3306      	adds	r3, #6
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	4413      	add	r3, r2
 8005104:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	0e1a      	lsrs	r2, r3, #24
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	3307      	adds	r3, #7
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d108      	bne.n	800512c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0220 	orr.w	r2, r2, #32
 8005128:	60da      	str	r2, [r3, #12]
 800512a:	e007      	b.n	800513c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0220 	orr.w	r2, r2, #32
 800513a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	e006      	b.n	800514e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
  }
}
 800514e:	4618      	mov	r0, r3
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800516a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d002      	beq.n	8005178 <HAL_CAN_ActivateNotification+0x1e>
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d109      	bne.n	800518c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6959      	ldr	r1, [r3, #20]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	e006      	b.n	800519a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
  }
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b08a      	sub	sp, #40	; 0x28
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d07c      	beq.n	80052e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d023      	beq.n	800523e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2201      	movs	r2, #1
 80051fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f983 	bl	8005514 <HAL_CAN_TxMailbox0CompleteCallback>
 800520e:	e016      	b.n	800523e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d004      	beq.n	8005224 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
 8005222:	e00c      	b.n	800523e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d004      	beq.n	8005238 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
 8005236:	e002      	b.n	800523e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f989 	bl	8005550 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d024      	beq.n	8005292 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005250:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f963 	bl	8005528 <HAL_CAN_TxMailbox1CompleteCallback>
 8005262:	e016      	b.n	8005292 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526a:	2b00      	cmp	r3, #0
 800526c:	d004      	beq.n	8005278 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
 8005276:	e00c      	b.n	8005292 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800527e:	2b00      	cmp	r3, #0
 8005280:	d004      	beq.n	800528c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
 800528a:	e002      	b.n	8005292 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f969 	bl	8005564 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d024      	beq.n	80052e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f943 	bl	800553c <HAL_CAN_TxMailbox2CompleteCallback>
 80052b6:	e016      	b.n	80052e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ca:	e00c      	b.n	80052e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d004      	beq.n	80052e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
 80052de:	e002      	b.n	80052e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f949 	bl	8005578 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00c      	beq.n	800530a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d007      	beq.n	800530a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005300:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2210      	movs	r2, #16
 8005308:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00b      	beq.n	800532c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d006      	beq.n	800532c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2208      	movs	r2, #8
 8005324:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f930 	bl	800558c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7fd fe0d 	bl	8002f64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00c      	beq.n	800536e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f003 0310 	and.w	r3, r3, #16
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005364:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2210      	movs	r2, #16
 800536c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00b      	beq.n	8005390 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d006      	beq.n	8005390 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2208      	movs	r2, #8
 8005388:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f912 	bl	80055b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	2b00      	cmp	r3, #0
 8005398:	d009      	beq.n	80053ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f8f9 	bl	80055a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00b      	beq.n	80053d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2210      	movs	r2, #16
 80053c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f8fc 	bl	80055c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d006      	beq.n	80053f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2208      	movs	r2, #8
 80053ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f8f5 	bl	80055dc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d07b      	beq.n	80054f4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d072      	beq.n	80054ec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	f043 0302 	orr.w	r3, r3, #2
 800543c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	f043 0304 	orr.w	r3, r3, #4
 8005458:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005460:	2b00      	cmp	r3, #0
 8005462:	d043      	beq.n	80054ec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800546a:	2b00      	cmp	r3, #0
 800546c:	d03e      	beq.n	80054ec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005474:	2b60      	cmp	r3, #96	; 0x60
 8005476:	d02b      	beq.n	80054d0 <HAL_CAN_IRQHandler+0x32a>
 8005478:	2b60      	cmp	r3, #96	; 0x60
 800547a:	d82e      	bhi.n	80054da <HAL_CAN_IRQHandler+0x334>
 800547c:	2b50      	cmp	r3, #80	; 0x50
 800547e:	d022      	beq.n	80054c6 <HAL_CAN_IRQHandler+0x320>
 8005480:	2b50      	cmp	r3, #80	; 0x50
 8005482:	d82a      	bhi.n	80054da <HAL_CAN_IRQHandler+0x334>
 8005484:	2b40      	cmp	r3, #64	; 0x40
 8005486:	d019      	beq.n	80054bc <HAL_CAN_IRQHandler+0x316>
 8005488:	2b40      	cmp	r3, #64	; 0x40
 800548a:	d826      	bhi.n	80054da <HAL_CAN_IRQHandler+0x334>
 800548c:	2b30      	cmp	r3, #48	; 0x30
 800548e:	d010      	beq.n	80054b2 <HAL_CAN_IRQHandler+0x30c>
 8005490:	2b30      	cmp	r3, #48	; 0x30
 8005492:	d822      	bhi.n	80054da <HAL_CAN_IRQHandler+0x334>
 8005494:	2b10      	cmp	r3, #16
 8005496:	d002      	beq.n	800549e <HAL_CAN_IRQHandler+0x2f8>
 8005498:	2b20      	cmp	r3, #32
 800549a:	d005      	beq.n	80054a8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800549c:	e01d      	b.n	80054da <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	f043 0308 	orr.w	r3, r3, #8
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054a6:	e019      	b.n	80054dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	f043 0310 	orr.w	r3, r3, #16
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054b0:	e014      	b.n	80054dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	f043 0320 	orr.w	r3, r3, #32
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054ba:	e00f      	b.n	80054dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054c4:	e00a      	b.n	80054dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054ce:	e005      	b.n	80054dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054d8:	e000      	b.n	80054dc <HAL_CAN_IRQHandler+0x336>
            break;
 80054da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80054ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2204      	movs	r2, #4
 80054f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f872 	bl	80055f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800550c:	bf00      	nop
 800550e:	3728      	adds	r7, #40	; 0x28
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005614:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <__NVIC_SetPriorityGrouping+0x44>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005620:	4013      	ands	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800562c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005636:	4a04      	ldr	r2, [pc, #16]	; (8005648 <__NVIC_SetPriorityGrouping+0x44>)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	60d3      	str	r3, [r2, #12]
}
 800563c:	bf00      	nop
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	e000ed00 	.word	0xe000ed00

0800564c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005650:	4b04      	ldr	r3, [pc, #16]	; (8005664 <__NVIC_GetPriorityGrouping+0x18>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	0a1b      	lsrs	r3, r3, #8
 8005656:	f003 0307 	and.w	r3, r3, #7
}
 800565a:	4618      	mov	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	e000ed00 	.word	0xe000ed00

08005668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005676:	2b00      	cmp	r3, #0
 8005678:	db0b      	blt.n	8005692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	f003 021f 	and.w	r2, r3, #31
 8005680:	4907      	ldr	r1, [pc, #28]	; (80056a0 <__NVIC_EnableIRQ+0x38>)
 8005682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	2001      	movs	r0, #1
 800568a:	fa00 f202 	lsl.w	r2, r0, r2
 800568e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	e000e100 	.word	0xe000e100

080056a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	db12      	blt.n	80056dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	f003 021f 	and.w	r2, r3, #31
 80056bc:	490a      	ldr	r1, [pc, #40]	; (80056e8 <__NVIC_DisableIRQ+0x44>)
 80056be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c2:	095b      	lsrs	r3, r3, #5
 80056c4:	2001      	movs	r0, #1
 80056c6:	fa00 f202 	lsl.w	r2, r0, r2
 80056ca:	3320      	adds	r3, #32
 80056cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80056d0:	f3bf 8f4f 	dsb	sy
}
 80056d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056d6:	f3bf 8f6f 	isb	sy
}
 80056da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	e000e100 	.word	0xe000e100

080056ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	6039      	str	r1, [r7, #0]
 80056f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	db0a      	blt.n	8005716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	b2da      	uxtb	r2, r3
 8005704:	490c      	ldr	r1, [pc, #48]	; (8005738 <__NVIC_SetPriority+0x4c>)
 8005706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570a:	0112      	lsls	r2, r2, #4
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	440b      	add	r3, r1
 8005710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005714:	e00a      	b.n	800572c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	b2da      	uxtb	r2, r3
 800571a:	4908      	ldr	r1, [pc, #32]	; (800573c <__NVIC_SetPriority+0x50>)
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	3b04      	subs	r3, #4
 8005724:	0112      	lsls	r2, r2, #4
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	440b      	add	r3, r1
 800572a:	761a      	strb	r2, [r3, #24]
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	e000e100 	.word	0xe000e100
 800573c:	e000ed00 	.word	0xe000ed00

08005740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005740:	b480      	push	{r7}
 8005742:	b089      	sub	sp, #36	; 0x24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f1c3 0307 	rsb	r3, r3, #7
 800575a:	2b04      	cmp	r3, #4
 800575c:	bf28      	it	cs
 800575e:	2304      	movcs	r3, #4
 8005760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3304      	adds	r3, #4
 8005766:	2b06      	cmp	r3, #6
 8005768:	d902      	bls.n	8005770 <NVIC_EncodePriority+0x30>
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3b03      	subs	r3, #3
 800576e:	e000      	b.n	8005772 <NVIC_EncodePriority+0x32>
 8005770:	2300      	movs	r3, #0
 8005772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005774:	f04f 32ff 	mov.w	r2, #4294967295
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	43da      	mvns	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	401a      	ands	r2, r3
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005788:	f04f 31ff 	mov.w	r1, #4294967295
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	fa01 f303 	lsl.w	r3, r1, r3
 8005792:	43d9      	mvns	r1, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005798:	4313      	orrs	r3, r2
         );
}
 800579a:	4618      	mov	r0, r3
 800579c:	3724      	adds	r7, #36	; 0x24
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
	...

080057a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057b8:	d301      	bcc.n	80057be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ba:	2301      	movs	r3, #1
 80057bc:	e00f      	b.n	80057de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057be:	4a0a      	ldr	r2, [pc, #40]	; (80057e8 <SysTick_Config+0x40>)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057c6:	210f      	movs	r1, #15
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295
 80057cc:	f7ff ff8e 	bl	80056ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057d0:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <SysTick_Config+0x40>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057d6:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <SysTick_Config+0x40>)
 80057d8:	2207      	movs	r2, #7
 80057da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	e000e010 	.word	0xe000e010

080057ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff ff05 	bl	8005604 <__NVIC_SetPriorityGrouping>
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005802:	b580      	push	{r7, lr}
 8005804:	b086      	sub	sp, #24
 8005806:	af00      	add	r7, sp, #0
 8005808:	4603      	mov	r3, r0
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	607a      	str	r2, [r7, #4]
 800580e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005814:	f7ff ff1a 	bl	800564c <__NVIC_GetPriorityGrouping>
 8005818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	6978      	ldr	r0, [r7, #20]
 8005820:	f7ff ff8e 	bl	8005740 <NVIC_EncodePriority>
 8005824:	4602      	mov	r2, r0
 8005826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800582a:	4611      	mov	r1, r2
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff ff5d 	bl	80056ec <__NVIC_SetPriority>
}
 8005832:	bf00      	nop
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	4603      	mov	r3, r0
 8005842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff ff0d 	bl	8005668 <__NVIC_EnableIRQ>
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	4603      	mov	r3, r0
 800585e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff ff1d 	bl	80056a4 <__NVIC_DisableIRQ>
}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff ff94 	bl	80057a8 <SysTick_Config>
 8005880:	4603      	mov	r3, r0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e00e      	b.n	80058ba <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	795b      	ldrb	r3, [r3, #5]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d105      	bne.n	80058b2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7fd fff5 	bl	800389c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80058d0:	f7fe fc54 	bl	800417c <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e099      	b.n	8005a14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0201 	bic.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005900:	e00f      	b.n	8005922 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005902:	f7fe fc3b 	bl	800417c <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b05      	cmp	r3, #5
 800590e:	d908      	bls.n	8005922 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2203      	movs	r2, #3
 800591a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e078      	b.n	8005a14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e8      	bne.n	8005902 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4b38      	ldr	r3, [pc, #224]	; (8005a1c <HAL_DMA_Init+0x158>)
 800593c:	4013      	ands	r3, r2
 800593e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800594e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800595a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	2b04      	cmp	r3, #4
 800597a:	d107      	bne.n	800598c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005984:	4313      	orrs	r3, r2
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f023 0307 	bic.w	r3, r3, #7
 80059a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d117      	bne.n	80059e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00e      	beq.n	80059e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fa6f 	bl	8005eac <DMA_CheckFifoParam>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2240      	movs	r2, #64	; 0x40
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80059e2:	2301      	movs	r3, #1
 80059e4:	e016      	b.n	8005a14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fa26 	bl	8005e40 <DMA_CalcBaseAndBitshift>
 80059f4:	4603      	mov	r3, r0
 80059f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fc:	223f      	movs	r2, #63	; 0x3f
 80059fe:	409a      	lsls	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	f010803f 	.word	0xf010803f

08005a20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_DMA_Start_IT+0x26>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e040      	b.n	8005ac8 <HAL_DMA_Start_IT+0xa8>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d12f      	bne.n	8005aba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f9b8 	bl	8005de4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a78:	223f      	movs	r2, #63	; 0x3f
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0216 	orr.w	r2, r2, #22
 8005a8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d007      	beq.n	8005aa8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0208 	orr.w	r2, r2, #8
 8005aa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	e005      	b.n	8005ac6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005adc:	4b8e      	ldr	r3, [pc, #568]	; (8005d18 <HAL_DMA_IRQHandler+0x248>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a8e      	ldr	r2, [pc, #568]	; (8005d1c <HAL_DMA_IRQHandler+0x24c>)
 8005ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae6:	0a9b      	lsrs	r3, r3, #10
 8005ae8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afa:	2208      	movs	r2, #8
 8005afc:	409a      	lsls	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4013      	ands	r3, r2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d01a      	beq.n	8005b3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d013      	beq.n	8005b3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0204 	bic.w	r2, r2, #4
 8005b22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b28:	2208      	movs	r2, #8
 8005b2a:	409a      	lsls	r2, r3
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b34:	f043 0201 	orr.w	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b40:	2201      	movs	r2, #1
 8005b42:	409a      	lsls	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d012      	beq.n	8005b72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00b      	beq.n	8005b72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5e:	2201      	movs	r2, #1
 8005b60:	409a      	lsls	r2, r3
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6a:	f043 0202 	orr.w	r2, r3, #2
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b76:	2204      	movs	r2, #4
 8005b78:	409a      	lsls	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d012      	beq.n	8005ba8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00b      	beq.n	8005ba8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b94:	2204      	movs	r2, #4
 8005b96:	409a      	lsls	r2, r3
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba0:	f043 0204 	orr.w	r2, r3, #4
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bac:	2210      	movs	r2, #16
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d043      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d03c      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bca:	2210      	movs	r2, #16
 8005bcc:	409a      	lsls	r2, r3
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d018      	beq.n	8005c12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d108      	bne.n	8005c00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d024      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	4798      	blx	r3
 8005bfe:	e01f      	b.n	8005c40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01b      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	4798      	blx	r3
 8005c10:	e016      	b.n	8005c40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d107      	bne.n	8005c30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0208 	bic.w	r2, r2, #8
 8005c2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c44:	2220      	movs	r2, #32
 8005c46:	409a      	lsls	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 808f 	beq.w	8005d70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 8087 	beq.w	8005d70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c66:	2220      	movs	r2, #32
 8005c68:	409a      	lsls	r2, r3
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b05      	cmp	r3, #5
 8005c78:	d136      	bne.n	8005ce8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0216 	bic.w	r2, r2, #22
 8005c88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d103      	bne.n	8005caa <HAL_DMA_IRQHandler+0x1da>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0208 	bic.w	r2, r2, #8
 8005cb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cbe:	223f      	movs	r2, #63	; 0x3f
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d07e      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	4798      	blx	r3
        }
        return;
 8005ce6:	e079      	b.n	8005ddc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01d      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10d      	bne.n	8005d20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d031      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4798      	blx	r3
 8005d14:	e02c      	b.n	8005d70 <HAL_DMA_IRQHandler+0x2a0>
 8005d16:	bf00      	nop
 8005d18:	20000000 	.word	0x20000000
 8005d1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d023      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
 8005d30:	e01e      	b.n	8005d70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10f      	bne.n	8005d60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0210 	bic.w	r2, r2, #16
 8005d4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d032      	beq.n	8005dde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d022      	beq.n	8005dca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2205      	movs	r2, #5
 8005d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0201 	bic.w	r2, r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60bb      	str	r3, [r7, #8]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d307      	bcc.n	8005db8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f2      	bne.n	8005d9c <HAL_DMA_IRQHandler+0x2cc>
 8005db6:	e000      	b.n	8005dba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005db8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	4798      	blx	r3
 8005dda:	e000      	b.n	8005dde <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ddc:	bf00      	nop
    }
  }
}
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b40      	cmp	r3, #64	; 0x40
 8005e10:	d108      	bne.n	8005e24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e22:	e007      	b.n	8005e34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	60da      	str	r2, [r3, #12]
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	3b10      	subs	r3, #16
 8005e50:	4a14      	ldr	r2, [pc, #80]	; (8005ea4 <DMA_CalcBaseAndBitshift+0x64>)
 8005e52:	fba2 2303 	umull	r2, r3, r2, r3
 8005e56:	091b      	lsrs	r3, r3, #4
 8005e58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e5a:	4a13      	ldr	r2, [pc, #76]	; (8005ea8 <DMA_CalcBaseAndBitshift+0x68>)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d909      	bls.n	8005e82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e76:	f023 0303 	bic.w	r3, r3, #3
 8005e7a:	1d1a      	adds	r2, r3, #4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	659a      	str	r2, [r3, #88]	; 0x58
 8005e80:	e007      	b.n	8005e92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	aaaaaaab 	.word	0xaaaaaaab
 8005ea8:	0800fd44 	.word	0x0800fd44

08005eac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d11f      	bne.n	8005f06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d856      	bhi.n	8005f7a <DMA_CheckFifoParam+0xce>
 8005ecc:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <DMA_CheckFifoParam+0x28>)
 8005ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed2:	bf00      	nop
 8005ed4:	08005ee5 	.word	0x08005ee5
 8005ed8:	08005ef7 	.word	0x08005ef7
 8005edc:	08005ee5 	.word	0x08005ee5
 8005ee0:	08005f7b 	.word	0x08005f7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d046      	beq.n	8005f7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ef4:	e043      	b.n	8005f7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005efe:	d140      	bne.n	8005f82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f04:	e03d      	b.n	8005f82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f0e:	d121      	bne.n	8005f54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d837      	bhi.n	8005f86 <DMA_CheckFifoParam+0xda>
 8005f16:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <DMA_CheckFifoParam+0x70>)
 8005f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1c:	08005f2d 	.word	0x08005f2d
 8005f20:	08005f33 	.word	0x08005f33
 8005f24:	08005f2d 	.word	0x08005f2d
 8005f28:	08005f45 	.word	0x08005f45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f30:	e030      	b.n	8005f94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d025      	beq.n	8005f8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f42:	e022      	b.n	8005f8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f4c:	d11f      	bne.n	8005f8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f52:	e01c      	b.n	8005f8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d903      	bls.n	8005f62 <DMA_CheckFifoParam+0xb6>
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d003      	beq.n	8005f68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f60:	e018      	b.n	8005f94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	73fb      	strb	r3, [r7, #15]
      break;
 8005f66:	e015      	b.n	8005f94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00e      	beq.n	8005f92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	73fb      	strb	r3, [r7, #15]
      break;
 8005f78:	e00b      	b.n	8005f92 <DMA_CheckFifoParam+0xe6>
      break;
 8005f7a:	bf00      	nop
 8005f7c:	e00a      	b.n	8005f94 <DMA_CheckFifoParam+0xe8>
      break;
 8005f7e:	bf00      	nop
 8005f80:	e008      	b.n	8005f94 <DMA_CheckFifoParam+0xe8>
      break;
 8005f82:	bf00      	nop
 8005f84:	e006      	b.n	8005f94 <DMA_CheckFifoParam+0xe8>
      break;
 8005f86:	bf00      	nop
 8005f88:	e004      	b.n	8005f94 <DMA_CheckFifoParam+0xe8>
      break;
 8005f8a:	bf00      	nop
 8005f8c:	e002      	b.n	8005f94 <DMA_CheckFifoParam+0xe8>
      break;   
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <DMA_CheckFifoParam+0xe8>
      break;
 8005f92:	bf00      	nop
    }
  } 
  
  return status; 
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop

08005fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b089      	sub	sp, #36	; 0x24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61fb      	str	r3, [r7, #28]
 8005fbe:	e165      	b.n	800628c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	f040 8154 	bne.w	8006286 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d005      	beq.n	8005ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d130      	bne.n	8006058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	2203      	movs	r2, #3
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	43db      	mvns	r3, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	4013      	ands	r3, r2
 800600c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4313      	orrs	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800602c:	2201      	movs	r2, #1
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	43db      	mvns	r3, r3
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	4013      	ands	r3, r2
 800603a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	091b      	lsrs	r3, r3, #4
 8006042:	f003 0201 	and.w	r2, r3, #1
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	4313      	orrs	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	2b03      	cmp	r3, #3
 8006062:	d017      	beq.n	8006094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	2203      	movs	r2, #3
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4013      	ands	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4313      	orrs	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d123      	bne.n	80060e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	08da      	lsrs	r2, r3, #3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3208      	adds	r2, #8
 80060a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	220f      	movs	r2, #15
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	43db      	mvns	r3, r3
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4013      	ands	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	08da      	lsrs	r2, r3, #3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3208      	adds	r2, #8
 80060e2:	69b9      	ldr	r1, [r7, #24]
 80060e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	2203      	movs	r2, #3
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	43db      	mvns	r3, r3
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4013      	ands	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f003 0203 	and.w	r2, r3, #3
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	4313      	orrs	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 80ae 	beq.w	8006286 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	4b5d      	ldr	r3, [pc, #372]	; (80062a4 <HAL_GPIO_Init+0x300>)
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	4a5c      	ldr	r2, [pc, #368]	; (80062a4 <HAL_GPIO_Init+0x300>)
 8006134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006138:	6453      	str	r3, [r2, #68]	; 0x44
 800613a:	4b5a      	ldr	r3, [pc, #360]	; (80062a4 <HAL_GPIO_Init+0x300>)
 800613c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006146:	4a58      	ldr	r2, [pc, #352]	; (80062a8 <HAL_GPIO_Init+0x304>)
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	089b      	lsrs	r3, r3, #2
 800614c:	3302      	adds	r3, #2
 800614e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	220f      	movs	r2, #15
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	43db      	mvns	r3, r3
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	4013      	ands	r3, r2
 8006168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a4f      	ldr	r2, [pc, #316]	; (80062ac <HAL_GPIO_Init+0x308>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d025      	beq.n	80061be <HAL_GPIO_Init+0x21a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a4e      	ldr	r2, [pc, #312]	; (80062b0 <HAL_GPIO_Init+0x30c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d01f      	beq.n	80061ba <HAL_GPIO_Init+0x216>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a4d      	ldr	r2, [pc, #308]	; (80062b4 <HAL_GPIO_Init+0x310>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d019      	beq.n	80061b6 <HAL_GPIO_Init+0x212>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a4c      	ldr	r2, [pc, #304]	; (80062b8 <HAL_GPIO_Init+0x314>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d013      	beq.n	80061b2 <HAL_GPIO_Init+0x20e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a4b      	ldr	r2, [pc, #300]	; (80062bc <HAL_GPIO_Init+0x318>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00d      	beq.n	80061ae <HAL_GPIO_Init+0x20a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a4a      	ldr	r2, [pc, #296]	; (80062c0 <HAL_GPIO_Init+0x31c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d007      	beq.n	80061aa <HAL_GPIO_Init+0x206>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a49      	ldr	r2, [pc, #292]	; (80062c4 <HAL_GPIO_Init+0x320>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d101      	bne.n	80061a6 <HAL_GPIO_Init+0x202>
 80061a2:	2306      	movs	r3, #6
 80061a4:	e00c      	b.n	80061c0 <HAL_GPIO_Init+0x21c>
 80061a6:	2307      	movs	r3, #7
 80061a8:	e00a      	b.n	80061c0 <HAL_GPIO_Init+0x21c>
 80061aa:	2305      	movs	r3, #5
 80061ac:	e008      	b.n	80061c0 <HAL_GPIO_Init+0x21c>
 80061ae:	2304      	movs	r3, #4
 80061b0:	e006      	b.n	80061c0 <HAL_GPIO_Init+0x21c>
 80061b2:	2303      	movs	r3, #3
 80061b4:	e004      	b.n	80061c0 <HAL_GPIO_Init+0x21c>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e002      	b.n	80061c0 <HAL_GPIO_Init+0x21c>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <HAL_GPIO_Init+0x21c>
 80061be:	2300      	movs	r3, #0
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	f002 0203 	and.w	r2, r2, #3
 80061c6:	0092      	lsls	r2, r2, #2
 80061c8:	4093      	lsls	r3, r2
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061d0:	4935      	ldr	r1, [pc, #212]	; (80062a8 <HAL_GPIO_Init+0x304>)
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	089b      	lsrs	r3, r3, #2
 80061d6:	3302      	adds	r3, #2
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061de:	4b3a      	ldr	r3, [pc, #232]	; (80062c8 <HAL_GPIO_Init+0x324>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	43db      	mvns	r3, r3
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	4013      	ands	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006202:	4a31      	ldr	r2, [pc, #196]	; (80062c8 <HAL_GPIO_Init+0x324>)
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006208:	4b2f      	ldr	r3, [pc, #188]	; (80062c8 <HAL_GPIO_Init+0x324>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	43db      	mvns	r3, r3
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	4013      	ands	r3, r2
 8006216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4313      	orrs	r3, r2
 800622a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800622c:	4a26      	ldr	r2, [pc, #152]	; (80062c8 <HAL_GPIO_Init+0x324>)
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006232:	4b25      	ldr	r3, [pc, #148]	; (80062c8 <HAL_GPIO_Init+0x324>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	43db      	mvns	r3, r3
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	4013      	ands	r3, r2
 8006240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006256:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <HAL_GPIO_Init+0x324>)
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800625c:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <HAL_GPIO_Init+0x324>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	43db      	mvns	r3, r3
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	4013      	ands	r3, r2
 800626a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006280:	4a11      	ldr	r2, [pc, #68]	; (80062c8 <HAL_GPIO_Init+0x324>)
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	3301      	adds	r3, #1
 800628a:	61fb      	str	r3, [r7, #28]
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	2b0f      	cmp	r3, #15
 8006290:	f67f ae96 	bls.w	8005fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	3724      	adds	r7, #36	; 0x24
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40023800 	.word	0x40023800
 80062a8:	40013800 	.word	0x40013800
 80062ac:	40020000 	.word	0x40020000
 80062b0:	40020400 	.word	0x40020400
 80062b4:	40020800 	.word	0x40020800
 80062b8:	40020c00 	.word	0x40020c00
 80062bc:	40021000 	.word	0x40021000
 80062c0:	40021400 	.word	0x40021400
 80062c4:	40021800 	.word	0x40021800
 80062c8:	40013c00 	.word	0x40013c00

080062cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80062de:	2300      	movs	r3, #0
 80062e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	e0c7      	b.n	8006478 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062e8:	2201      	movs	r2, #1
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	4013      	ands	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	429a      	cmp	r2, r3
 8006300:	f040 80b7 	bne.w	8006472 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006304:	4a62      	ldr	r2, [pc, #392]	; (8006490 <HAL_GPIO_DeInit+0x1c4>)
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	089b      	lsrs	r3, r3, #2
 800630a:	3302      	adds	r3, #2
 800630c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006310:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f003 0303 	and.w	r3, r3, #3
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	220f      	movs	r2, #15
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	4013      	ands	r3, r2
 8006324:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a5a      	ldr	r2, [pc, #360]	; (8006494 <HAL_GPIO_DeInit+0x1c8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d025      	beq.n	800637a <HAL_GPIO_DeInit+0xae>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a59      	ldr	r2, [pc, #356]	; (8006498 <HAL_GPIO_DeInit+0x1cc>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01f      	beq.n	8006376 <HAL_GPIO_DeInit+0xaa>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a58      	ldr	r2, [pc, #352]	; (800649c <HAL_GPIO_DeInit+0x1d0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d019      	beq.n	8006372 <HAL_GPIO_DeInit+0xa6>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a57      	ldr	r2, [pc, #348]	; (80064a0 <HAL_GPIO_DeInit+0x1d4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <HAL_GPIO_DeInit+0xa2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a56      	ldr	r2, [pc, #344]	; (80064a4 <HAL_GPIO_DeInit+0x1d8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00d      	beq.n	800636a <HAL_GPIO_DeInit+0x9e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a55      	ldr	r2, [pc, #340]	; (80064a8 <HAL_GPIO_DeInit+0x1dc>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d007      	beq.n	8006366 <HAL_GPIO_DeInit+0x9a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a54      	ldr	r2, [pc, #336]	; (80064ac <HAL_GPIO_DeInit+0x1e0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d101      	bne.n	8006362 <HAL_GPIO_DeInit+0x96>
 800635e:	2306      	movs	r3, #6
 8006360:	e00c      	b.n	800637c <HAL_GPIO_DeInit+0xb0>
 8006362:	2307      	movs	r3, #7
 8006364:	e00a      	b.n	800637c <HAL_GPIO_DeInit+0xb0>
 8006366:	2305      	movs	r3, #5
 8006368:	e008      	b.n	800637c <HAL_GPIO_DeInit+0xb0>
 800636a:	2304      	movs	r3, #4
 800636c:	e006      	b.n	800637c <HAL_GPIO_DeInit+0xb0>
 800636e:	2303      	movs	r3, #3
 8006370:	e004      	b.n	800637c <HAL_GPIO_DeInit+0xb0>
 8006372:	2302      	movs	r3, #2
 8006374:	e002      	b.n	800637c <HAL_GPIO_DeInit+0xb0>
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <HAL_GPIO_DeInit+0xb0>
 800637a:	2300      	movs	r3, #0
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	f002 0203 	and.w	r2, r2, #3
 8006382:	0092      	lsls	r2, r2, #2
 8006384:	4093      	lsls	r3, r2
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	429a      	cmp	r2, r3
 800638a:	d132      	bne.n	80063f2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800638c:	4b48      	ldr	r3, [pc, #288]	; (80064b0 <HAL_GPIO_DeInit+0x1e4>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	43db      	mvns	r3, r3
 8006394:	4946      	ldr	r1, [pc, #280]	; (80064b0 <HAL_GPIO_DeInit+0x1e4>)
 8006396:	4013      	ands	r3, r2
 8006398:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800639a:	4b45      	ldr	r3, [pc, #276]	; (80064b0 <HAL_GPIO_DeInit+0x1e4>)
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	43db      	mvns	r3, r3
 80063a2:	4943      	ldr	r1, [pc, #268]	; (80064b0 <HAL_GPIO_DeInit+0x1e4>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80063a8:	4b41      	ldr	r3, [pc, #260]	; (80064b0 <HAL_GPIO_DeInit+0x1e4>)
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	43db      	mvns	r3, r3
 80063b0:	493f      	ldr	r1, [pc, #252]	; (80064b0 <HAL_GPIO_DeInit+0x1e4>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80063b6:	4b3e      	ldr	r3, [pc, #248]	; (80064b0 <HAL_GPIO_DeInit+0x1e4>)
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	43db      	mvns	r3, r3
 80063be:	493c      	ldr	r1, [pc, #240]	; (80064b0 <HAL_GPIO_DeInit+0x1e4>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	220f      	movs	r2, #15
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80063d4:	4a2e      	ldr	r2, [pc, #184]	; (8006490 <HAL_GPIO_DeInit+0x1c4>)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	089b      	lsrs	r3, r3, #2
 80063da:	3302      	adds	r3, #2
 80063dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	43da      	mvns	r2, r3
 80063e4:	482a      	ldr	r0, [pc, #168]	; (8006490 <HAL_GPIO_DeInit+0x1c4>)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	089b      	lsrs	r3, r3, #2
 80063ea:	400a      	ands	r2, r1
 80063ec:	3302      	adds	r3, #2
 80063ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	2103      	movs	r1, #3
 80063fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006400:	43db      	mvns	r3, r3
 8006402:	401a      	ands	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	08da      	lsrs	r2, r3, #3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3208      	adds	r2, #8
 8006410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	220f      	movs	r2, #15
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43db      	mvns	r3, r3
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	08d2      	lsrs	r2, r2, #3
 8006428:	4019      	ands	r1, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3208      	adds	r2, #8
 800642e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	2103      	movs	r1, #3
 800643c:	fa01 f303 	lsl.w	r3, r1, r3
 8006440:	43db      	mvns	r3, r3
 8006442:	401a      	ands	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	2101      	movs	r1, #1
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	fa01 f303 	lsl.w	r3, r1, r3
 8006454:	43db      	mvns	r3, r3
 8006456:	401a      	ands	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	2103      	movs	r1, #3
 8006466:	fa01 f303 	lsl.w	r3, r1, r3
 800646a:	43db      	mvns	r3, r3
 800646c:	401a      	ands	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	3301      	adds	r3, #1
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2b0f      	cmp	r3, #15
 800647c:	f67f af34 	bls.w	80062e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	40013800 	.word	0x40013800
 8006494:	40020000 	.word	0x40020000
 8006498:	40020400 	.word	0x40020400
 800649c:	40020800 	.word	0x40020800
 80064a0:	40020c00 	.word	0x40020c00
 80064a4:	40021000 	.word	0x40021000
 80064a8:	40021400 	.word	0x40021400
 80064ac:	40021800 	.word	0x40021800
 80064b0:	40013c00 	.word	0x40013c00

080064b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	887b      	ldrh	r3, [r7, #2]
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80064cc:	2301      	movs	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
 80064d0:	e001      	b.n	80064d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	807b      	strh	r3, [r7, #2]
 80064f0:	4613      	mov	r3, r2
 80064f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064f4:	787b      	ldrb	r3, [r7, #1]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064fa:	887a      	ldrh	r2, [r7, #2]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006500:	e003      	b.n	800650a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006502:	887b      	ldrh	r3, [r7, #2]
 8006504:	041a      	lsls	r2, r3, #16
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	619a      	str	r2, [r3, #24]
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	460b      	mov	r3, r1
 8006520:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006528:	887a      	ldrh	r2, [r7, #2]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4013      	ands	r3, r2
 800652e:	041a      	lsls	r2, r3, #16
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	43d9      	mvns	r1, r3
 8006534:	887b      	ldrh	r3, [r7, #2]
 8006536:	400b      	ands	r3, r1
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	619a      	str	r2, [r3, #24]
}
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
	...

0800654c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006556:	4b08      	ldr	r3, [pc, #32]	; (8006578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006558:	695a      	ldr	r2, [r3, #20]
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	4013      	ands	r3, r2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d006      	beq.n	8006570 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006562:	4a05      	ldr	r2, [pc, #20]	; (8006578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006568:	88fb      	ldrh	r3, [r7, #6]
 800656a:	4618      	mov	r0, r3
 800656c:	f7fc fd18 	bl	8002fa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40013c00 	.word	0x40013c00

0800657c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e12b      	b.n	80067e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fd f99c 	bl	80038e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2224      	movs	r2, #36	; 0x24
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0201 	bic.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065e0:	f002 f9d2 	bl	8008988 <HAL_RCC_GetPCLK1Freq>
 80065e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	4a81      	ldr	r2, [pc, #516]	; (80067f0 <HAL_I2C_Init+0x274>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d807      	bhi.n	8006600 <HAL_I2C_Init+0x84>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a80      	ldr	r2, [pc, #512]	; (80067f4 <HAL_I2C_Init+0x278>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	bf94      	ite	ls
 80065f8:	2301      	movls	r3, #1
 80065fa:	2300      	movhi	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	e006      	b.n	800660e <HAL_I2C_Init+0x92>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a7d      	ldr	r2, [pc, #500]	; (80067f8 <HAL_I2C_Init+0x27c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	bf94      	ite	ls
 8006608:	2301      	movls	r3, #1
 800660a:	2300      	movhi	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e0e7      	b.n	80067e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4a78      	ldr	r2, [pc, #480]	; (80067fc <HAL_I2C_Init+0x280>)
 800661a:	fba2 2303 	umull	r2, r3, r2, r3
 800661e:	0c9b      	lsrs	r3, r3, #18
 8006620:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	430a      	orrs	r2, r1
 8006634:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	4a6a      	ldr	r2, [pc, #424]	; (80067f0 <HAL_I2C_Init+0x274>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d802      	bhi.n	8006650 <HAL_I2C_Init+0xd4>
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	3301      	adds	r3, #1
 800664e:	e009      	b.n	8006664 <HAL_I2C_Init+0xe8>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006656:	fb02 f303 	mul.w	r3, r2, r3
 800665a:	4a69      	ldr	r2, [pc, #420]	; (8006800 <HAL_I2C_Init+0x284>)
 800665c:	fba2 2303 	umull	r2, r3, r2, r3
 8006660:	099b      	lsrs	r3, r3, #6
 8006662:	3301      	adds	r3, #1
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6812      	ldr	r2, [r2, #0]
 8006668:	430b      	orrs	r3, r1
 800666a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006676:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	495c      	ldr	r1, [pc, #368]	; (80067f0 <HAL_I2C_Init+0x274>)
 8006680:	428b      	cmp	r3, r1
 8006682:	d819      	bhi.n	80066b8 <HAL_I2C_Init+0x13c>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	1e59      	subs	r1, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006692:	1c59      	adds	r1, r3, #1
 8006694:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006698:	400b      	ands	r3, r1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <HAL_I2C_Init+0x138>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	1e59      	subs	r1, r3, #1
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80066ac:	3301      	adds	r3, #1
 80066ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b2:	e051      	b.n	8006758 <HAL_I2C_Init+0x1dc>
 80066b4:	2304      	movs	r3, #4
 80066b6:	e04f      	b.n	8006758 <HAL_I2C_Init+0x1dc>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d111      	bne.n	80066e4 <HAL_I2C_Init+0x168>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	1e58      	subs	r0, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6859      	ldr	r1, [r3, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	440b      	add	r3, r1
 80066ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80066d2:	3301      	adds	r3, #1
 80066d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bf0c      	ite	eq
 80066dc:	2301      	moveq	r3, #1
 80066de:	2300      	movne	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	e012      	b.n	800670a <HAL_I2C_Init+0x18e>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	1e58      	subs	r0, r3, #1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6859      	ldr	r1, [r3, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	440b      	add	r3, r1
 80066f2:	0099      	lsls	r1, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80066fa:	3301      	adds	r3, #1
 80066fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006700:	2b00      	cmp	r3, #0
 8006702:	bf0c      	ite	eq
 8006704:	2301      	moveq	r3, #1
 8006706:	2300      	movne	r3, #0
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <HAL_I2C_Init+0x196>
 800670e:	2301      	movs	r3, #1
 8006710:	e022      	b.n	8006758 <HAL_I2C_Init+0x1dc>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10e      	bne.n	8006738 <HAL_I2C_Init+0x1bc>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	1e58      	subs	r0, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6859      	ldr	r1, [r3, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	440b      	add	r3, r1
 8006728:	fbb0 f3f3 	udiv	r3, r0, r3
 800672c:	3301      	adds	r3, #1
 800672e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006736:	e00f      	b.n	8006758 <HAL_I2C_Init+0x1dc>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	1e58      	subs	r0, r3, #1
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6859      	ldr	r1, [r3, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	440b      	add	r3, r1
 8006746:	0099      	lsls	r1, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	fbb0 f3f3 	udiv	r3, r0, r3
 800674e:	3301      	adds	r3, #1
 8006750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	6809      	ldr	r1, [r1, #0]
 800675c:	4313      	orrs	r3, r2
 800675e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69da      	ldr	r2, [r3, #28]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006786:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6911      	ldr	r1, [r2, #16]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	68d2      	ldr	r2, [r2, #12]
 8006792:	4311      	orrs	r1, r2
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6812      	ldr	r2, [r2, #0]
 8006798:	430b      	orrs	r3, r1
 800679a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695a      	ldr	r2, [r3, #20]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0201 	orr.w	r2, r2, #1
 80067c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	000186a0 	.word	0x000186a0
 80067f4:	001e847f 	.word	0x001e847f
 80067f8:	003d08ff 	.word	0x003d08ff
 80067fc:	431bde83 	.word	0x431bde83
 8006800:	10624dd3 	.word	0x10624dd3

08006804 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08c      	sub	sp, #48	; 0x30
 8006808:	af02      	add	r7, sp, #8
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	4608      	mov	r0, r1
 800680e:	4611      	mov	r1, r2
 8006810:	461a      	mov	r2, r3
 8006812:	4603      	mov	r3, r0
 8006814:	817b      	strh	r3, [r7, #10]
 8006816:	460b      	mov	r3, r1
 8006818:	813b      	strh	r3, [r7, #8]
 800681a:	4613      	mov	r3, r2
 800681c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800681e:	f7fd fcad 	bl	800417c <HAL_GetTick>
 8006822:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b20      	cmp	r3, #32
 800682e:	f040 8208 	bne.w	8006c42 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	2319      	movs	r3, #25
 8006838:	2201      	movs	r2, #1
 800683a:	497b      	ldr	r1, [pc, #492]	; (8006a28 <HAL_I2C_Mem_Read+0x224>)
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 faef 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006848:	2302      	movs	r3, #2
 800684a:	e1fb      	b.n	8006c44 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_I2C_Mem_Read+0x56>
 8006856:	2302      	movs	r3, #2
 8006858:	e1f4      	b.n	8006c44 <HAL_I2C_Mem_Read+0x440>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b01      	cmp	r3, #1
 800686e:	d007      	beq.n	8006880 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0201 	orr.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800688e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2222      	movs	r2, #34	; 0x22
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2240      	movs	r2, #64	; 0x40
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80068b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4a5b      	ldr	r2, [pc, #364]	; (8006a2c <HAL_I2C_Mem_Read+0x228>)
 80068c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068c2:	88f8      	ldrh	r0, [r7, #6]
 80068c4:	893a      	ldrh	r2, [r7, #8]
 80068c6:	8979      	ldrh	r1, [r7, #10]
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	9301      	str	r3, [sp, #4]
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	4603      	mov	r3, r0
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f9bc 	bl	8006c50 <I2C_RequestMemoryRead>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e1b0      	b.n	8006c44 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d113      	bne.n	8006912 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ea:	2300      	movs	r3, #0
 80068ec:	623b      	str	r3, [r7, #32]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	623b      	str	r3, [r7, #32]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	623b      	str	r3, [r7, #32]
 80068fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	e184      	b.n	8006c1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006916:	2b01      	cmp	r3, #1
 8006918:	d11b      	bne.n	8006952 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006928:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800692a:	2300      	movs	r3, #0
 800692c:	61fb      	str	r3, [r7, #28]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	61fb      	str	r3, [r7, #28]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	61fb      	str	r3, [r7, #28]
 800693e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	e164      	b.n	8006c1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006956:	2b02      	cmp	r3, #2
 8006958:	d11b      	bne.n	8006992 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006968:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006978:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800697a:	2300      	movs	r3, #0
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	e144      	b.n	8006c1c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006992:	2300      	movs	r3, #0
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80069a8:	e138      	b.n	8006c1c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	f200 80f1 	bhi.w	8006b96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d123      	bne.n	8006a04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 fb44 	bl	800704e <I2C_WaitOnRXNEFlagUntilTimeout>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e139      	b.n	8006c44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691a      	ldr	r2, [r3, #16]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	b2d2      	uxtb	r2, r2
 80069dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ec:	3b01      	subs	r3, #1
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	3b01      	subs	r3, #1
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a02:	e10b      	b.n	8006c1c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d14e      	bne.n	8006aaa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	2200      	movs	r2, #0
 8006a14:	4906      	ldr	r1, [pc, #24]	; (8006a30 <HAL_I2C_Mem_Read+0x22c>)
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 fa02 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d008      	beq.n	8006a34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e10e      	b.n	8006c44 <HAL_I2C_Mem_Read+0x440>
 8006a26:	bf00      	nop
 8006a28:	00100002 	.word	0x00100002
 8006a2c:	ffff0000 	.word	0xffff0000
 8006a30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	691a      	ldr	r2, [r3, #16]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006aa8:	e0b8      	b.n	8006c1c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	4966      	ldr	r1, [pc, #408]	; (8006c4c <HAL_I2C_Mem_Read+0x448>)
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f9b3 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0bf      	b.n	8006c44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691a      	ldr	r2, [r3, #16]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	494f      	ldr	r1, [pc, #316]	; (8006c4c <HAL_I2C_Mem_Read+0x448>)
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f985 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e091      	b.n	8006c44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b94:	e042      	b.n	8006c1c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 fa57 	bl	800704e <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e04c      	b.n	8006c44 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	f003 0304 	and.w	r3, r3, #4
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d118      	bne.n	8006c1c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f47f aec2 	bne.w	80069aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e000      	b.n	8006c44 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006c42:	2302      	movs	r3, #2
  }
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3728      	adds	r7, #40	; 0x28
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	00010004 	.word	0x00010004

08006c50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	4608      	mov	r0, r1
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	4603      	mov	r3, r0
 8006c60:	817b      	strh	r3, [r7, #10]
 8006c62:	460b      	mov	r3, r1
 8006c64:	813b      	strh	r3, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 f8c2 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00d      	beq.n	8006cbe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb0:	d103      	bne.n	8006cba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e0aa      	b.n	8006e14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cbe:	897b      	ldrh	r3, [r7, #10]
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ccc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	6a3a      	ldr	r2, [r7, #32]
 8006cd2:	4952      	ldr	r1, [pc, #328]	; (8006e1c <I2C_RequestMemoryRead+0x1cc>)
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 f8fa 	bl	8006ece <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e097      	b.n	8006e14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfc:	6a39      	ldr	r1, [r7, #32]
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 f964 	bl	8006fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00d      	beq.n	8006d26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d107      	bne.n	8006d22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e076      	b.n	8006e14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d105      	bne.n	8006d38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d2c:	893b      	ldrh	r3, [r7, #8]
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	611a      	str	r2, [r3, #16]
 8006d36:	e021      	b.n	8006d7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d38:	893b      	ldrh	r3, [r7, #8]
 8006d3a:	0a1b      	lsrs	r3, r3, #8
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d48:	6a39      	ldr	r1, [r7, #32]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 f93e 	bl	8006fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00d      	beq.n	8006d72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d107      	bne.n	8006d6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e050      	b.n	8006e14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d72:	893b      	ldrh	r3, [r7, #8]
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7e:	6a39      	ldr	r1, [r7, #32]
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 f923 	bl	8006fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00d      	beq.n	8006da8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d107      	bne.n	8006da4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e035      	b.n	8006e14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006db6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 f82b 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00d      	beq.n	8006dec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dde:	d103      	bne.n	8006de8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006de6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e013      	b.n	8006e14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006dec:	897b      	ldrh	r3, [r7, #10]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	f043 0301 	orr.w	r3, r3, #1
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	6a3a      	ldr	r2, [r7, #32]
 8006e00:	4906      	ldr	r1, [pc, #24]	; (8006e1c <I2C_RequestMemoryRead+0x1cc>)
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 f863 	bl	8006ece <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	00010002 	.word	0x00010002

08006e20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	603b      	str	r3, [r7, #0]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e30:	e025      	b.n	8006e7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e38:	d021      	beq.n	8006e7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e3a:	f7fd f99f 	bl	800417c <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d302      	bcc.n	8006e50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d116      	bne.n	8006e7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	f043 0220 	orr.w	r2, r3, #32
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e023      	b.n	8006ec6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	0c1b      	lsrs	r3, r3, #16
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d10d      	bne.n	8006ea4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	43da      	mvns	r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	4013      	ands	r3, r2
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bf0c      	ite	eq
 8006e9a:	2301      	moveq	r3, #1
 8006e9c:	2300      	movne	r3, #0
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	e00c      	b.n	8006ebe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	43da      	mvns	r2, r3
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bf0c      	ite	eq
 8006eb6:	2301      	moveq	r3, #1
 8006eb8:	2300      	movne	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d0b6      	beq.n	8006e32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	607a      	str	r2, [r7, #4]
 8006eda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006edc:	e051      	b.n	8006f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eec:	d123      	bne.n	8006f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006efc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	f043 0204 	orr.w	r2, r3, #4
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e046      	b.n	8006fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3c:	d021      	beq.n	8006f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f3e:	f7fd f91d 	bl	800417c <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d302      	bcc.n	8006f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d116      	bne.n	8006f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	f043 0220 	orr.w	r2, r3, #32
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e020      	b.n	8006fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	0c1b      	lsrs	r3, r3, #16
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d10c      	bne.n	8006fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	43da      	mvns	r2, r3
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4013      	ands	r3, r2
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	bf14      	ite	ne
 8006f9e:	2301      	movne	r3, #1
 8006fa0:	2300      	moveq	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	e00b      	b.n	8006fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	43da      	mvns	r2, r3
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bf14      	ite	ne
 8006fb8:	2301      	movne	r3, #1
 8006fba:	2300      	moveq	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d18d      	bne.n	8006ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fd8:	e02d      	b.n	8007036 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f88d 	bl	80070fa <I2C_IsAcknowledgeFailed>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e02d      	b.n	8007046 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff0:	d021      	beq.n	8007036 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff2:	f7fd f8c3 	bl	800417c <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d302      	bcc.n	8007008 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d116      	bne.n	8007036 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2220      	movs	r2, #32
 8007012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	f043 0220 	orr.w	r2, r3, #32
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e007      	b.n	8007046 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007040:	2b80      	cmp	r3, #128	; 0x80
 8007042:	d1ca      	bne.n	8006fda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800705a:	e042      	b.n	80070e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	f003 0310 	and.w	r3, r3, #16
 8007066:	2b10      	cmp	r3, #16
 8007068:	d119      	bne.n	800709e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f06f 0210 	mvn.w	r2, #16
 8007072:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2220      	movs	r2, #32
 800707e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e029      	b.n	80070f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800709e:	f7fd f86d 	bl	800417c <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d302      	bcc.n	80070b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d116      	bne.n	80070e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	f043 0220 	orr.w	r2, r3, #32
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e007      	b.n	80070f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ec:	2b40      	cmp	r3, #64	; 0x40
 80070ee:	d1b5      	bne.n	800705c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800710c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007110:	d11b      	bne.n	800714a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800711a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	f043 0204 	orr.w	r2, r3, #4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e000      	b.n	800714c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800715a:	b08f      	sub	sp, #60	; 0x3c
 800715c:	af0a      	add	r7, sp, #40	; 0x28
 800715e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e116      	b.n	8007398 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d106      	bne.n	800718a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f008 f91f 	bl	800f3c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2203      	movs	r2, #3
 800718e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719a:	2b00      	cmp	r3, #0
 800719c:	d102      	bne.n	80071a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f004 fc2e 	bl	800ba0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	687e      	ldr	r6, [r7, #4]
 80071b6:	466d      	mov	r5, sp
 80071b8:	f106 0410 	add.w	r4, r6, #16
 80071bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80071cc:	1d33      	adds	r3, r6, #4
 80071ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071d0:	6838      	ldr	r0, [r7, #0]
 80071d2:	f004 fb05 	bl	800b7e0 <USB_CoreInit>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e0d7      	b.n	8007398 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2100      	movs	r1, #0
 80071ee:	4618      	mov	r0, r3
 80071f0:	f004 fc1c 	bl	800ba2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071f4:	2300      	movs	r3, #0
 80071f6:	73fb      	strb	r3, [r7, #15]
 80071f8:	e04a      	b.n	8007290 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80071fa:	7bfa      	ldrb	r2, [r7, #15]
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	4613      	mov	r3, r2
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	440b      	add	r3, r1
 8007208:	333d      	adds	r3, #61	; 0x3d
 800720a:	2201      	movs	r2, #1
 800720c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800720e:	7bfa      	ldrb	r2, [r7, #15]
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	440b      	add	r3, r1
 800721c:	333c      	adds	r3, #60	; 0x3c
 800721e:	7bfa      	ldrb	r2, [r7, #15]
 8007220:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007222:	7bfa      	ldrb	r2, [r7, #15]
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	b298      	uxth	r0, r3
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	4613      	mov	r3, r2
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	440b      	add	r3, r1
 8007234:	3344      	adds	r3, #68	; 0x44
 8007236:	4602      	mov	r2, r0
 8007238:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800723a:	7bfa      	ldrb	r2, [r7, #15]
 800723c:	6879      	ldr	r1, [r7, #4]
 800723e:	4613      	mov	r3, r2
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	440b      	add	r3, r1
 8007248:	3340      	adds	r3, #64	; 0x40
 800724a:	2200      	movs	r2, #0
 800724c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800724e:	7bfa      	ldrb	r2, [r7, #15]
 8007250:	6879      	ldr	r1, [r7, #4]
 8007252:	4613      	mov	r3, r2
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	440b      	add	r3, r1
 800725c:	3348      	adds	r3, #72	; 0x48
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007262:	7bfa      	ldrb	r2, [r7, #15]
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	334c      	adds	r3, #76	; 0x4c
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007276:	7bfa      	ldrb	r2, [r7, #15]
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	4613      	mov	r3, r2
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	440b      	add	r3, r1
 8007284:	3354      	adds	r3, #84	; 0x54
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	3301      	adds	r3, #1
 800728e:	73fb      	strb	r3, [r7, #15]
 8007290:	7bfa      	ldrb	r2, [r7, #15]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	429a      	cmp	r2, r3
 8007298:	d3af      	bcc.n	80071fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
 800729e:	e044      	b.n	800732a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80072a0:	7bfa      	ldrb	r2, [r7, #15]
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	4613      	mov	r3, r2
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	4413      	add	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	440b      	add	r3, r1
 80072ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80072b2:	2200      	movs	r2, #0
 80072b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80072b6:	7bfa      	ldrb	r2, [r7, #15]
 80072b8:	6879      	ldr	r1, [r7, #4]
 80072ba:	4613      	mov	r3, r2
 80072bc:	00db      	lsls	r3, r3, #3
 80072be:	4413      	add	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	440b      	add	r3, r1
 80072c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80072c8:	7bfa      	ldrb	r2, [r7, #15]
 80072ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80072cc:	7bfa      	ldrb	r2, [r7, #15]
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	4613      	mov	r3, r2
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	4413      	add	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	440b      	add	r3, r1
 80072da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80072de:	2200      	movs	r2, #0
 80072e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80072e2:	7bfa      	ldrb	r2, [r7, #15]
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	440b      	add	r3, r1
 80072f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80072f4:	2200      	movs	r2, #0
 80072f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80072f8:	7bfa      	ldrb	r2, [r7, #15]
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	4613      	mov	r3, r2
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800730e:	7bfa      	ldrb	r2, [r7, #15]
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	4613      	mov	r3, r2
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007320:	2200      	movs	r2, #0
 8007322:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	3301      	adds	r3, #1
 8007328:	73fb      	strb	r3, [r7, #15]
 800732a:	7bfa      	ldrb	r2, [r7, #15]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	429a      	cmp	r2, r3
 8007332:	d3b5      	bcc.n	80072a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	603b      	str	r3, [r7, #0]
 800733a:	687e      	ldr	r6, [r7, #4]
 800733c:	466d      	mov	r5, sp
 800733e:	f106 0410 	add.w	r4, r6, #16
 8007342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800734a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800734e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007352:	1d33      	adds	r3, r6, #4
 8007354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007356:	6838      	ldr	r0, [r7, #0]
 8007358:	f004 fbb4 	bl	800bac4 <USB_DevInit>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2202      	movs	r2, #2
 8007366:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e014      	b.n	8007398 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	2b01      	cmp	r3, #1
 8007384:	d102      	bne.n	800738c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 f98c 	bl	80086a4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4618      	mov	r0, r3
 8007392:	f005 fcf6 	bl	800cd82 <USB_DevDisconnect>

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d101      	bne.n	80073bc <HAL_PCD_Start+0x1c>
 80073b8:	2302      	movs	r3, #2
 80073ba:	e020      	b.n	80073fe <HAL_PCD_Start+0x5e>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d109      	bne.n	80073e0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d005      	beq.n	80073e0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f004 faff 	bl	800b9e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f005 fca6 	bl	800cd40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007406:	b590      	push	{r4, r7, lr}
 8007408:	b08d      	sub	sp, #52	; 0x34
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f005 fd64 	bl	800ceea <USB_GetMode>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	f040 84b7 	bne.w	8007d98 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4618      	mov	r0, r3
 8007430:	f005 fcc8 	bl	800cdc4 <USB_ReadInterrupts>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 84ad 	beq.w	8007d96 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	0a1b      	lsrs	r3, r3, #8
 8007446:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4618      	mov	r0, r3
 8007456:	f005 fcb5 	bl	800cdc4 <USB_ReadInterrupts>
 800745a:	4603      	mov	r3, r0
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b02      	cmp	r3, #2
 8007462:	d107      	bne.n	8007474 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695a      	ldr	r2, [r3, #20]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f002 0202 	and.w	r2, r2, #2
 8007472:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4618      	mov	r0, r3
 800747a:	f005 fca3 	bl	800cdc4 <USB_ReadInterrupts>
 800747e:	4603      	mov	r3, r0
 8007480:	f003 0310 	and.w	r3, r3, #16
 8007484:	2b10      	cmp	r3, #16
 8007486:	d161      	bne.n	800754c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0210 	bic.w	r2, r2, #16
 8007496:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	f003 020f 	and.w	r2, r3, #15
 80074a4:	4613      	mov	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	4413      	add	r3, r2
 80074b4:	3304      	adds	r3, #4
 80074b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	0c5b      	lsrs	r3, r3, #17
 80074bc:	f003 030f 	and.w	r3, r3, #15
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d124      	bne.n	800750e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d035      	beq.n	800753c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	091b      	lsrs	r3, r3, #4
 80074d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80074da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074de:	b29b      	uxth	r3, r3
 80074e0:	461a      	mov	r2, r3
 80074e2:	6a38      	ldr	r0, [r7, #32]
 80074e4:	f005 fada 	bl	800ca9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	691a      	ldr	r2, [r3, #16]
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	091b      	lsrs	r3, r3, #4
 80074f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074f4:	441a      	add	r2, r3
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	6a1a      	ldr	r2, [r3, #32]
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	091b      	lsrs	r3, r3, #4
 8007502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007506:	441a      	add	r2, r3
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	621a      	str	r2, [r3, #32]
 800750c:	e016      	b.n	800753c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	0c5b      	lsrs	r3, r3, #17
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	2b06      	cmp	r3, #6
 8007518:	d110      	bne.n	800753c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007520:	2208      	movs	r2, #8
 8007522:	4619      	mov	r1, r3
 8007524:	6a38      	ldr	r0, [r7, #32]
 8007526:	f005 fab9 	bl	800ca9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	6a1a      	ldr	r2, [r3, #32]
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	091b      	lsrs	r3, r3, #4
 8007532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007536:	441a      	add	r2, r3
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f042 0210 	orr.w	r2, r2, #16
 800754a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4618      	mov	r0, r3
 8007552:	f005 fc37 	bl	800cdc4 <USB_ReadInterrupts>
 8007556:	4603      	mov	r3, r0
 8007558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800755c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007560:	f040 80a7 	bne.w	80076b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4618      	mov	r0, r3
 800756e:	f005 fc3c 	bl	800cdea <USB_ReadDevAllOutEpInterrupt>
 8007572:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007574:	e099      	b.n	80076aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 808e 	beq.w	800769e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	4611      	mov	r1, r2
 800758c:	4618      	mov	r0, r3
 800758e:	f005 fc60 	bl	800ce52 <USB_ReadDevOutEPInterrupt>
 8007592:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00c      	beq.n	80075b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075aa:	461a      	mov	r2, r3
 80075ac:	2301      	movs	r3, #1
 80075ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80075b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fef0 	bl	8008398 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	f003 0308 	and.w	r3, r3, #8
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00c      	beq.n	80075dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80075c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ce:	461a      	mov	r2, r3
 80075d0:	2308      	movs	r3, #8
 80075d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80075d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 ffc6 	bl	8008568 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d008      	beq.n	80075f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f2:	461a      	mov	r2, r3
 80075f4:	2310      	movs	r3, #16
 80075f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d030      	beq.n	8007664 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760a:	2b80      	cmp	r3, #128	; 0x80
 800760c:	d109      	bne.n	8007622 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800761c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007620:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007624:	4613      	mov	r3, r2
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	4413      	add	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	4413      	add	r3, r2
 8007634:	3304      	adds	r3, #4
 8007636:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	78db      	ldrb	r3, [r3, #3]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d108      	bne.n	8007652 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2200      	movs	r2, #0
 8007644:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	b2db      	uxtb	r3, r3
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f007 ffef 	bl	800f630 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765e:	461a      	mov	r2, r3
 8007660:	2302      	movs	r3, #2
 8007662:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d008      	beq.n	8007680 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767a:	461a      	mov	r2, r3
 800767c:	2320      	movs	r3, #32
 800767e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007696:	461a      	mov	r2, r3
 8007698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800769c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	3301      	adds	r3, #1
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	085b      	lsrs	r3, r3, #1
 80076a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80076aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f47f af62 	bne.w	8007576 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f005 fb84 	bl	800cdc4 <USB_ReadInterrupts>
 80076bc:	4603      	mov	r3, r0
 80076be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076c6:	f040 80db 	bne.w	8007880 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f005 fba5 	bl	800ce1e <USB_ReadDevAllInEpInterrupt>
 80076d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80076da:	e0cd      	b.n	8007878 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80076dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 80c2 	beq.w	800786c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	4611      	mov	r1, r2
 80076f2:	4618      	mov	r0, r3
 80076f4:	f005 fbcb 	bl	800ce8e <USB_ReadDevInEPInterrupt>
 80076f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d057      	beq.n	80077b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	2201      	movs	r2, #1
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	43db      	mvns	r3, r3
 800771e:	69f9      	ldr	r1, [r7, #28]
 8007720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007724:	4013      	ands	r3, r2
 8007726:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	461a      	mov	r2, r3
 8007736:	2301      	movs	r3, #1
 8007738:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d132      	bne.n	80077a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007742:	6879      	ldr	r1, [r7, #4]
 8007744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007746:	4613      	mov	r3, r2
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	440b      	add	r3, r1
 8007750:	334c      	adds	r3, #76	; 0x4c
 8007752:	6819      	ldr	r1, [r3, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007758:	4613      	mov	r3, r2
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	4413      	add	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4403      	add	r3, r0
 8007762:	3348      	adds	r3, #72	; 0x48
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4419      	add	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776c:	4613      	mov	r3, r2
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	4413      	add	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4403      	add	r3, r0
 8007776:	334c      	adds	r3, #76	; 0x4c
 8007778:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	d113      	bne.n	80077a8 <HAL_PCD_IRQHandler+0x3a2>
 8007780:	6879      	ldr	r1, [r7, #4]
 8007782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007784:	4613      	mov	r3, r2
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	3354      	adds	r3, #84	; 0x54
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d108      	bne.n	80077a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80077a0:	461a      	mov	r2, r3
 80077a2:	2101      	movs	r1, #1
 80077a4:	f005 fbd2 	bl	800cf4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f007 feb9 	bl	800f526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f003 0308 	and.w	r3, r3, #8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d008      	beq.n	80077d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	461a      	mov	r2, r3
 80077cc:	2308      	movs	r3, #8
 80077ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d008      	beq.n	80077ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e6:	461a      	mov	r2, r3
 80077e8:	2310      	movs	r3, #16
 80077ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d008      	beq.n	8007808 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007802:	461a      	mov	r2, r3
 8007804:	2340      	movs	r3, #64	; 0x40
 8007806:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d023      	beq.n	800785a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007812:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007814:	6a38      	ldr	r0, [r7, #32]
 8007816:	f004 fab3 	bl	800bd80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800781a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781c:	4613      	mov	r3, r2
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	3338      	adds	r3, #56	; 0x38
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4413      	add	r3, r2
 800782a:	3304      	adds	r3, #4
 800782c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	78db      	ldrb	r3, [r3, #3]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d108      	bne.n	8007848 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2200      	movs	r2, #0
 800783a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	b2db      	uxtb	r3, r3
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f007 ff06 	bl	800f654 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007854:	461a      	mov	r2, r3
 8007856:	2302      	movs	r3, #2
 8007858:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fd08 	bl	800827c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	3301      	adds	r3, #1
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	2b00      	cmp	r3, #0
 800787c:	f47f af2e 	bne.w	80076dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4618      	mov	r0, r3
 8007886:	f005 fa9d 	bl	800cdc4 <USB_ReadInterrupts>
 800788a:	4603      	mov	r3, r0
 800788c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007894:	d122      	bne.n	80078dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078a4:	f023 0301 	bic.w	r3, r3, #1
 80078a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d108      	bne.n	80078c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80078bc:	2100      	movs	r1, #0
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 ff14 	bl	80086ec <HAL_PCDEx_LPM_Callback>
 80078c4:	e002      	b.n	80078cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f007 fea4 	bl	800f614 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	695a      	ldr	r2, [r3, #20]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80078da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f005 fa6f 	bl	800cdc4 <USB_ReadInterrupts>
 80078e6:	4603      	mov	r3, r0
 80078e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078f0:	d112      	bne.n	8007918 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d102      	bne.n	8007908 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f007 fe60 	bl	800f5c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695a      	ldr	r2, [r3, #20]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007916:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4618      	mov	r0, r3
 800791e:	f005 fa51 	bl	800cdc4 <USB_ReadInterrupts>
 8007922:	4603      	mov	r3, r0
 8007924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800792c:	d121      	bne.n	8007972 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695a      	ldr	r2, [r3, #20]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800793c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007944:	2b00      	cmp	r3, #0
 8007946:	d111      	bne.n	800796c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007956:	089b      	lsrs	r3, r3, #2
 8007958:	f003 020f 	and.w	r2, r3, #15
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007962:	2101      	movs	r1, #1
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fec1 	bl	80086ec <HAL_PCDEx_LPM_Callback>
 800796a:	e002      	b.n	8007972 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f007 fe2b 	bl	800f5c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f005 fa24 	bl	800cdc4 <USB_ReadInterrupts>
 800797c:	4603      	mov	r3, r0
 800797e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007986:	f040 80b7 	bne.w	8007af8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007998:	f023 0301 	bic.w	r3, r3, #1
 800799c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2110      	movs	r1, #16
 80079a4:	4618      	mov	r0, r3
 80079a6:	f004 f9eb 	bl	800bd80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079aa:	2300      	movs	r3, #0
 80079ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ae:	e046      	b.n	8007a3e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079bc:	461a      	mov	r2, r3
 80079be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80079c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079d4:	0151      	lsls	r1, r2, #5
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	440a      	add	r2, r1
 80079da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80079e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f0:	461a      	mov	r2, r3
 80079f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a28:	0151      	lsls	r1, r2, #5
 8007a2a:	69fa      	ldr	r2, [r7, #28]
 8007a2c:	440a      	add	r2, r1
 8007a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a36:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d3b3      	bcc.n	80079b0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a56:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007a5a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d016      	beq.n	8007a92 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a74:	f043 030b 	orr.w	r3, r3, #11
 8007a78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a84:	69fa      	ldr	r2, [r7, #28]
 8007a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a8a:	f043 030b 	orr.w	r3, r3, #11
 8007a8e:	6453      	str	r3, [r2, #68]	; 0x44
 8007a90:	e015      	b.n	8007abe <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	69fa      	ldr	r2, [r7, #28]
 8007a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007aa4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007aa8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	69fa      	ldr	r2, [r7, #28]
 8007ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ab8:	f043 030b 	orr.w	r3, r3, #11
 8007abc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007acc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007ad0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6818      	ldr	r0, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f005 fa32 	bl	800cf4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	695a      	ldr	r2, [r3, #20]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f005 f961 	bl	800cdc4 <USB_ReadInterrupts>
 8007b02:	4603      	mov	r3, r0
 8007b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b0c:	d124      	bne.n	8007b58 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f005 f9f7 	bl	800cf06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f004 f9ac 	bl	800be7a <USB_GetDevSpeed>
 8007b22:	4603      	mov	r3, r0
 8007b24:	461a      	mov	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681c      	ldr	r4, [r3, #0]
 8007b2e:	f000 ff1f 	bl	8008970 <HAL_RCC_GetHCLKFreq>
 8007b32:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f003 feb1 	bl	800b8a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f007 fd17 	bl	800f576 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	695a      	ldr	r2, [r3, #20]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007b56:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f005 f931 	bl	800cdc4 <USB_ReadInterrupts>
 8007b62:	4603      	mov	r3, r0
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d10a      	bne.n	8007b82 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f007 fcf4 	bl	800f55a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	695a      	ldr	r2, [r3, #20]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f002 0208 	and.w	r2, r2, #8
 8007b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f005 f91c 	bl	800cdc4 <USB_ReadInterrupts>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b92:	2b80      	cmp	r3, #128	; 0x80
 8007b94:	d122      	bne.n	8007bdc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba6:	e014      	b.n	8007bd2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bac:	4613      	mov	r3, r2
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d105      	bne.n	8007bcc <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fb27 	bl	800821a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	3301      	adds	r3, #1
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d3e5      	bcc.n	8007ba8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f005 f8ef 	bl	800cdc4 <USB_ReadInterrupts>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bf0:	d13b      	bne.n	8007c6a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf6:	e02b      	b.n	8007c50 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	440b      	add	r3, r1
 8007c16:	3340      	adds	r3, #64	; 0x40
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d115      	bne.n	8007c4a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007c1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	da12      	bge.n	8007c4a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c28:	4613      	mov	r3, r2
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	440b      	add	r3, r1
 8007c32:	333f      	adds	r3, #63	; 0x3f
 8007c34:	2201      	movs	r2, #1
 8007c36:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fae8 	bl	800821a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d3ce      	bcc.n	8007bf8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	695a      	ldr	r2, [r3, #20]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f005 f8a8 	bl	800cdc4 <USB_ReadInterrupts>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c7e:	d155      	bne.n	8007d2c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c80:	2301      	movs	r3, #1
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
 8007c84:	e045      	b.n	8007d12 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d12e      	bne.n	8007d0c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007cae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	da2b      	bge.n	8007d0c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007cc0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d121      	bne.n	8007d0c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ccc:	4613      	mov	r3, r2
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007cda:	2201      	movs	r2, #1
 8007cdc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10a      	bne.n	8007d0c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d08:	6053      	str	r3, [r2, #4]
            break;
 8007d0a:	e007      	b.n	8007d1c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	3301      	adds	r3, #1
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d3b4      	bcc.n	8007c86 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695a      	ldr	r2, [r3, #20]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007d2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f005 f847 	bl	800cdc4 <USB_ReadInterrupts>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d40:	d10a      	bne.n	8007d58 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f007 fc98 	bl	800f678 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	695a      	ldr	r2, [r3, #20]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f005 f831 	bl	800cdc4 <USB_ReadInterrupts>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	d115      	bne.n	8007d98 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	f003 0304 	and.w	r3, r3, #4
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f007 fc88 	bl	800f694 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6859      	ldr	r1, [r3, #4]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	605a      	str	r2, [r3, #4]
 8007d94:	e000      	b.n	8007d98 <HAL_PCD_IRQHandler+0x992>
      return;
 8007d96:	bf00      	nop
    }
  }
}
 8007d98:	3734      	adds	r7, #52	; 0x34
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd90      	pop	{r4, r7, pc}

08007d9e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <HAL_PCD_SetAddress+0x1a>
 8007db4:	2302      	movs	r3, #2
 8007db6:	e013      	b.n	8007de0 <HAL_PCD_SetAddress+0x42>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	78fa      	ldrb	r2, [r7, #3]
 8007dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	78fa      	ldrb	r2, [r7, #3]
 8007dce:	4611      	mov	r1, r2
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f004 ff8f 	bl	800ccf4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	4608      	mov	r0, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	461a      	mov	r2, r3
 8007df6:	4603      	mov	r3, r0
 8007df8:	70fb      	strb	r3, [r7, #3]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	803b      	strh	r3, [r7, #0]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	da0f      	bge.n	8007e2e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e0e:	78fb      	ldrb	r3, [r7, #3]
 8007e10:	f003 020f 	and.w	r2, r3, #15
 8007e14:	4613      	mov	r3, r2
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	3338      	adds	r3, #56	; 0x38
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	4413      	add	r3, r2
 8007e22:	3304      	adds	r3, #4
 8007e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	705a      	strb	r2, [r3, #1]
 8007e2c:	e00f      	b.n	8007e4e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	f003 020f 	and.w	r2, r3, #15
 8007e34:	4613      	mov	r3, r2
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	4413      	add	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	4413      	add	r3, r2
 8007e44:	3304      	adds	r3, #4
 8007e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007e5a:	883a      	ldrh	r2, [r7, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	78ba      	ldrb	r2, [r7, #2]
 8007e64:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d004      	beq.n	8007e78 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007e78:	78bb      	ldrb	r3, [r7, #2]
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d102      	bne.n	8007e84 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d101      	bne.n	8007e92 <HAL_PCD_EP_Open+0xaa>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	e00e      	b.n	8007eb0 <HAL_PCD_EP_Open+0xc8>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68f9      	ldr	r1, [r7, #12]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f004 f80f 	bl	800bec4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007eae:	7afb      	ldrb	r3, [r7, #11]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	da0f      	bge.n	8007eec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	f003 020f 	and.w	r2, r3, #15
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	4413      	add	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	3338      	adds	r3, #56	; 0x38
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	4413      	add	r3, r2
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	705a      	strb	r2, [r3, #1]
 8007eea:	e00f      	b.n	8007f0c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	f003 020f 	and.w	r2, r3, #15
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	00db      	lsls	r3, r3, #3
 8007ef6:	4413      	add	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	4413      	add	r3, r2
 8007f02:	3304      	adds	r3, #4
 8007f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	f003 030f 	and.w	r3, r3, #15
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d101      	bne.n	8007f26 <HAL_PCD_EP_Close+0x6e>
 8007f22:	2302      	movs	r3, #2
 8007f24:	e00e      	b.n	8007f44 <HAL_PCD_EP_Close+0x8c>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68f9      	ldr	r1, [r7, #12]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f004 f84d 	bl	800bfd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	607a      	str	r2, [r7, #4]
 8007f56:	603b      	str	r3, [r7, #0]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f5c:	7afb      	ldrb	r3, [r7, #11]
 8007f5e:	f003 020f 	and.w	r2, r3, #15
 8007f62:	4613      	mov	r3, r2
 8007f64:	00db      	lsls	r3, r3, #3
 8007f66:	4413      	add	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	3304      	adds	r3, #4
 8007f74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2200      	movs	r2, #0
 8007f86:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f8e:	7afb      	ldrb	r3, [r7, #11]
 8007f90:	f003 030f 	and.w	r3, r3, #15
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d102      	bne.n	8007fa8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007fa8:	7afb      	ldrb	r3, [r7, #11]
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d109      	bne.n	8007fc6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6818      	ldr	r0, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6979      	ldr	r1, [r7, #20]
 8007fc0:	f004 fb2c 	bl	800c61c <USB_EP0StartXfer>
 8007fc4:	e008      	b.n	8007fd8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	6979      	ldr	r1, [r7, #20]
 8007fd4:	f004 f8da 	bl	800c18c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b083      	sub	sp, #12
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	460b      	mov	r3, r1
 8007fec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	f003 020f 	and.w	r2, r3, #15
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	440b      	add	r3, r1
 8008000:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008004:	681b      	ldr	r3, [r3, #0]
}
 8008006:	4618      	mov	r0, r3
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b086      	sub	sp, #24
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
 800801e:	460b      	mov	r3, r1
 8008020:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008022:	7afb      	ldrb	r3, [r7, #11]
 8008024:	f003 020f 	and.w	r2, r3, #15
 8008028:	4613      	mov	r3, r2
 800802a:	00db      	lsls	r3, r3, #3
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	3338      	adds	r3, #56	; 0x38
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	4413      	add	r3, r2
 8008036:	3304      	adds	r3, #4
 8008038:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2200      	movs	r2, #0
 800804a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2201      	movs	r2, #1
 8008050:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008052:	7afb      	ldrb	r3, [r7, #11]
 8008054:	f003 030f 	and.w	r3, r3, #15
 8008058:	b2da      	uxtb	r2, r3
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d102      	bne.n	800806c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800806c:	7afb      	ldrb	r3, [r7, #11]
 800806e:	f003 030f 	and.w	r3, r3, #15
 8008072:	2b00      	cmp	r3, #0
 8008074:	d109      	bne.n	800808a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	b2db      	uxtb	r3, r3
 8008080:	461a      	mov	r2, r3
 8008082:	6979      	ldr	r1, [r7, #20]
 8008084:	f004 faca 	bl	800c61c <USB_EP0StartXfer>
 8008088:	e008      	b.n	800809c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	461a      	mov	r2, r3
 8008096:	6979      	ldr	r1, [r7, #20]
 8008098:	f004 f878 	bl	800c18c <USB_EPStartXfer>
  }

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	460b      	mov	r3, r1
 80080b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80080b2:	78fb      	ldrb	r3, [r7, #3]
 80080b4:	f003 020f 	and.w	r2, r3, #15
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d901      	bls.n	80080c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e050      	b.n	8008166 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80080c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	da0f      	bge.n	80080ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	f003 020f 	and.w	r2, r3, #15
 80080d2:	4613      	mov	r3, r2
 80080d4:	00db      	lsls	r3, r3, #3
 80080d6:	4413      	add	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	3338      	adds	r3, #56	; 0x38
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	4413      	add	r3, r2
 80080e0:	3304      	adds	r3, #4
 80080e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2201      	movs	r2, #1
 80080e8:	705a      	strb	r2, [r3, #1]
 80080ea:	e00d      	b.n	8008108 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80080ec:	78fa      	ldrb	r2, [r7, #3]
 80080ee:	4613      	mov	r3, r2
 80080f0:	00db      	lsls	r3, r3, #3
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	4413      	add	r3, r2
 80080fe:	3304      	adds	r3, #4
 8008100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2201      	movs	r2, #1
 800810c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800810e:	78fb      	ldrb	r3, [r7, #3]
 8008110:	f003 030f 	and.w	r3, r3, #15
 8008114:	b2da      	uxtb	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_PCD_EP_SetStall+0x82>
 8008124:	2302      	movs	r3, #2
 8008126:	e01e      	b.n	8008166 <HAL_PCD_EP_SetStall+0xc0>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68f9      	ldr	r1, [r7, #12]
 8008136:	4618      	mov	r0, r3
 8008138:	f004 fd08 	bl	800cb4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10a      	bne.n	800815c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6818      	ldr	r0, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	b2d9      	uxtb	r1, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008156:	461a      	mov	r2, r3
 8008158:	f004 fef8 	bl	800cf4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800817a:	78fb      	ldrb	r3, [r7, #3]
 800817c:	f003 020f 	and.w	r2, r3, #15
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	429a      	cmp	r2, r3
 8008186:	d901      	bls.n	800818c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e042      	b.n	8008212 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800818c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008190:	2b00      	cmp	r3, #0
 8008192:	da0f      	bge.n	80081b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	f003 020f 	and.w	r2, r3, #15
 800819a:	4613      	mov	r3, r2
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	3338      	adds	r3, #56	; 0x38
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	4413      	add	r3, r2
 80081a8:	3304      	adds	r3, #4
 80081aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2201      	movs	r2, #1
 80081b0:	705a      	strb	r2, [r3, #1]
 80081b2:	e00f      	b.n	80081d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	f003 020f 	and.w	r2, r3, #15
 80081ba:	4613      	mov	r3, r2
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	4413      	add	r3, r2
 80081ca:	3304      	adds	r3, #4
 80081cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	f003 030f 	and.w	r3, r3, #15
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <HAL_PCD_EP_ClrStall+0x86>
 80081f0:	2302      	movs	r3, #2
 80081f2:	e00e      	b.n	8008212 <HAL_PCD_EP_ClrStall+0xa4>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68f9      	ldr	r1, [r7, #12]
 8008202:	4618      	mov	r0, r3
 8008204:	f004 fd10 	bl	800cc28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	460b      	mov	r3, r1
 8008224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800822a:	2b00      	cmp	r3, #0
 800822c:	da0c      	bge.n	8008248 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	f003 020f 	and.w	r2, r3, #15
 8008234:	4613      	mov	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	4413      	add	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	3338      	adds	r3, #56	; 0x38
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	4413      	add	r3, r2
 8008242:	3304      	adds	r3, #4
 8008244:	60fb      	str	r3, [r7, #12]
 8008246:	e00c      	b.n	8008262 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008248:	78fb      	ldrb	r3, [r7, #3]
 800824a:	f003 020f 	and.w	r2, r3, #15
 800824e:	4613      	mov	r3, r2
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	4413      	add	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	4413      	add	r3, r2
 800825e:	3304      	adds	r3, #4
 8008260:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68f9      	ldr	r1, [r7, #12]
 8008268:	4618      	mov	r0, r3
 800826a:	f004 fb2f 	bl	800c8cc <USB_EPStopXfer>
 800826e:	4603      	mov	r3, r0
 8008270:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008272:	7afb      	ldrb	r3, [r7, #11]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08a      	sub	sp, #40	; 0x28
 8008280:	af02      	add	r7, sp, #8
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	4613      	mov	r3, r2
 8008294:	00db      	lsls	r3, r3, #3
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	3338      	adds	r3, #56	; 0x38
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	4413      	add	r3, r2
 80082a0:	3304      	adds	r3, #4
 80082a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6a1a      	ldr	r2, [r3, #32]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d901      	bls.n	80082b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e06c      	b.n	800838e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	699a      	ldr	r2, [r3, #24]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d902      	bls.n	80082d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	3303      	adds	r3, #3
 80082d4:	089b      	lsrs	r3, r3, #2
 80082d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80082d8:	e02b      	b.n	8008332 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	699a      	ldr	r2, [r3, #24]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	69fa      	ldr	r2, [r7, #28]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d902      	bls.n	80082f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	3303      	adds	r3, #3
 80082fa:	089b      	lsrs	r3, r3, #2
 80082fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6919      	ldr	r1, [r3, #16]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	b2da      	uxtb	r2, r3
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800830e:	b2db      	uxtb	r3, r3
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	4603      	mov	r3, r0
 8008314:	6978      	ldr	r0, [r7, #20]
 8008316:	f004 fb83 	bl	800ca20 <USB_WritePacket>

    ep->xfer_buff  += len;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	691a      	ldr	r2, [r3, #16]
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	441a      	add	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6a1a      	ldr	r2, [r3, #32]
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	441a      	add	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	b29b      	uxth	r3, r3
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	429a      	cmp	r2, r3
 8008346:	d809      	bhi.n	800835c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6a1a      	ldr	r2, [r3, #32]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008350:	429a      	cmp	r2, r3
 8008352:	d203      	bcs.n	800835c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1be      	bne.n	80082da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	699a      	ldr	r2, [r3, #24]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6a1b      	ldr	r3, [r3, #32]
 8008364:	429a      	cmp	r2, r3
 8008366:	d811      	bhi.n	800838c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	f003 030f 	and.w	r3, r3, #15
 800836e:	2201      	movs	r2, #1
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	43db      	mvns	r3, r3
 8008382:	6939      	ldr	r1, [r7, #16]
 8008384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008388:	4013      	ands	r3, r2
 800838a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3720      	adds	r7, #32
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	333c      	adds	r3, #60	; 0x3c
 80083b0:	3304      	adds	r3, #4
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d17b      	bne.n	80084c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	f003 0308 	and.w	r3, r3, #8
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d015      	beq.n	8008404 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	4a61      	ldr	r2, [pc, #388]	; (8008560 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	f240 80b9 	bls.w	8008554 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 80b3 	beq.w	8008554 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fa:	461a      	mov	r2, r3
 80083fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008400:	6093      	str	r3, [r2, #8]
 8008402:	e0a7      	b.n	8008554 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f003 0320 	and.w	r3, r3, #32
 800840a:	2b00      	cmp	r3, #0
 800840c:	d009      	beq.n	8008422 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	4413      	add	r3, r2
 8008416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841a:	461a      	mov	r2, r3
 800841c:	2320      	movs	r3, #32
 800841e:	6093      	str	r3, [r2, #8]
 8008420:	e098      	b.n	8008554 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008428:	2b00      	cmp	r3, #0
 800842a:	f040 8093 	bne.w	8008554 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	4a4b      	ldr	r2, [pc, #300]	; (8008560 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d90f      	bls.n	8008456 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00a      	beq.n	8008456 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844c:	461a      	mov	r2, r3
 800844e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008452:	6093      	str	r3, [r2, #8]
 8008454:	e07e      	b.n	8008554 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	4613      	mov	r3, r2
 800845a:	00db      	lsls	r3, r3, #3
 800845c:	4413      	add	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	4413      	add	r3, r2
 8008468:	3304      	adds	r3, #4
 800846a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	69da      	ldr	r2, [r3, #28]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	0159      	lsls	r1, r3, #5
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	440b      	add	r3, r1
 8008478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008482:	1ad2      	subs	r2, r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d114      	bne.n	80084b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d109      	bne.n	80084aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6818      	ldr	r0, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80084a0:	461a      	mov	r2, r3
 80084a2:	2101      	movs	r1, #1
 80084a4:	f004 fd52 	bl	800cf4c <USB_EP0_OutStart>
 80084a8:	e006      	b.n	80084b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	691a      	ldr	r2, [r3, #16]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	441a      	add	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f007 f816 	bl	800f4f0 <HAL_PCD_DataOutStageCallback>
 80084c4:	e046      	b.n	8008554 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	4a26      	ldr	r2, [pc, #152]	; (8008564 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d124      	bne.n	8008518 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e4:	461a      	mov	r2, r3
 80084e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ea:	6093      	str	r3, [r2, #8]
 80084ec:	e032      	b.n	8008554 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f003 0320 	and.w	r3, r3, #32
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d008      	beq.n	800850a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008504:	461a      	mov	r2, r3
 8008506:	2320      	movs	r3, #32
 8008508:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f006 ffed 	bl	800f4f0 <HAL_PCD_DataOutStageCallback>
 8008516:	e01d      	b.n	8008554 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d114      	bne.n	8008548 <PCD_EP_OutXfrComplete_int+0x1b0>
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	4613      	mov	r3, r2
 8008524:	00db      	lsls	r3, r3, #3
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	440b      	add	r3, r1
 800852c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d108      	bne.n	8008548 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008540:	461a      	mov	r2, r3
 8008542:	2100      	movs	r1, #0
 8008544:	f004 fd02 	bl	800cf4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	b2db      	uxtb	r3, r3
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f006 ffce 	bl	800f4f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3720      	adds	r7, #32
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	4f54300a 	.word	0x4f54300a
 8008564:	4f54310a 	.word	0x4f54310a

08008568 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	333c      	adds	r3, #60	; 0x3c
 8008580:	3304      	adds	r3, #4
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	4413      	add	r3, r2
 800858e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	4a15      	ldr	r2, [pc, #84]	; (80085f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d90e      	bls.n	80085bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d009      	beq.n	80085bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b4:	461a      	mov	r2, r3
 80085b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f006 ff85 	bl	800f4cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	4a0a      	ldr	r2, [pc, #40]	; (80085f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d90c      	bls.n	80085e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d108      	bne.n	80085e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80085dc:	461a      	mov	r2, r3
 80085de:	2101      	movs	r1, #1
 80085e0:	f004 fcb4 	bl	800cf4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	4f54300a 	.word	0x4f54300a

080085f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
 8008600:	4613      	mov	r3, r2
 8008602:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d107      	bne.n	8008622 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008612:	883b      	ldrh	r3, [r7, #0]
 8008614:	0419      	lsls	r1, r3, #16
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	430a      	orrs	r2, r1
 800861e:	629a      	str	r2, [r3, #40]	; 0x28
 8008620:	e028      	b.n	8008674 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008628:	0c1b      	lsrs	r3, r3, #16
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	4413      	add	r3, r2
 800862e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
 8008634:	e00d      	b.n	8008652 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	7bfb      	ldrb	r3, [r7, #15]
 800863c:	3340      	adds	r3, #64	; 0x40
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	0c1b      	lsrs	r3, r3, #16
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	4413      	add	r3, r2
 800864a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	3301      	adds	r3, #1
 8008650:	73fb      	strb	r3, [r7, #15]
 8008652:	7bfa      	ldrb	r2, [r7, #15]
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	3b01      	subs	r3, #1
 8008658:	429a      	cmp	r2, r3
 800865a:	d3ec      	bcc.n	8008636 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800865c:	883b      	ldrh	r3, [r7, #0]
 800865e:	0418      	lsls	r0, r3, #16
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6819      	ldr	r1, [r3, #0]
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	3b01      	subs	r3, #1
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	4302      	orrs	r2, r0
 800866c:	3340      	adds	r3, #64	; 0x40
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	440b      	add	r3, r1
 8008672:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	460b      	mov	r3, r1
 800868c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	887a      	ldrh	r2, [r7, #2]
 8008694:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086d6:	f043 0303 	orr.w	r3, r3, #3
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800870e:	2300      	movs	r3, #0
 8008710:	603b      	str	r3, [r7, #0]
 8008712:	4b20      	ldr	r3, [pc, #128]	; (8008794 <HAL_PWREx_EnableOverDrive+0x90>)
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	4a1f      	ldr	r2, [pc, #124]	; (8008794 <HAL_PWREx_EnableOverDrive+0x90>)
 8008718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800871c:	6413      	str	r3, [r2, #64]	; 0x40
 800871e:	4b1d      	ldr	r3, [pc, #116]	; (8008794 <HAL_PWREx_EnableOverDrive+0x90>)
 8008720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800872a:	4b1b      	ldr	r3, [pc, #108]	; (8008798 <HAL_PWREx_EnableOverDrive+0x94>)
 800872c:	2201      	movs	r2, #1
 800872e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008730:	f7fb fd24 	bl	800417c <HAL_GetTick>
 8008734:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008736:	e009      	b.n	800874c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008738:	f7fb fd20 	bl	800417c <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008746:	d901      	bls.n	800874c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e01f      	b.n	800878c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800874c:	4b13      	ldr	r3, [pc, #76]	; (800879c <HAL_PWREx_EnableOverDrive+0x98>)
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008758:	d1ee      	bne.n	8008738 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800875a:	4b11      	ldr	r3, [pc, #68]	; (80087a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800875c:	2201      	movs	r2, #1
 800875e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008760:	f7fb fd0c 	bl	800417c <HAL_GetTick>
 8008764:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008766:	e009      	b.n	800877c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008768:	f7fb fd08 	bl	800417c <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008776:	d901      	bls.n	800877c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e007      	b.n	800878c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800877c:	4b07      	ldr	r3, [pc, #28]	; (800879c <HAL_PWREx_EnableOverDrive+0x98>)
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008788:	d1ee      	bne.n	8008768 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	40023800 	.word	0x40023800
 8008798:	420e0040 	.word	0x420e0040
 800879c:	40007000 	.word	0x40007000
 80087a0:	420e0044 	.word	0x420e0044

080087a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e0cc      	b.n	8008952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087b8:	4b68      	ldr	r3, [pc, #416]	; (800895c <HAL_RCC_ClockConfig+0x1b8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 030f 	and.w	r3, r3, #15
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d90c      	bls.n	80087e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087c6:	4b65      	ldr	r3, [pc, #404]	; (800895c <HAL_RCC_ClockConfig+0x1b8>)
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ce:	4b63      	ldr	r3, [pc, #396]	; (800895c <HAL_RCC_ClockConfig+0x1b8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 030f 	and.w	r3, r3, #15
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d001      	beq.n	80087e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e0b8      	b.n	8008952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d020      	beq.n	800882e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0304 	and.w	r3, r3, #4
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087f8:	4b59      	ldr	r3, [pc, #356]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	4a58      	ldr	r2, [pc, #352]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 80087fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0308 	and.w	r3, r3, #8
 800880c:	2b00      	cmp	r3, #0
 800880e:	d005      	beq.n	800881c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008810:	4b53      	ldr	r3, [pc, #332]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	4a52      	ldr	r2, [pc, #328]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 8008816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800881a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800881c:	4b50      	ldr	r3, [pc, #320]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	494d      	ldr	r1, [pc, #308]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 800882a:	4313      	orrs	r3, r2
 800882c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	2b00      	cmp	r3, #0
 8008838:	d044      	beq.n	80088c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d107      	bne.n	8008852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008842:	4b47      	ldr	r3, [pc, #284]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d119      	bne.n	8008882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e07f      	b.n	8008952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d003      	beq.n	8008862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800885e:	2b03      	cmp	r3, #3
 8008860:	d107      	bne.n	8008872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008862:	4b3f      	ldr	r3, [pc, #252]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e06f      	b.n	8008952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008872:	4b3b      	ldr	r3, [pc, #236]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0302 	and.w	r3, r3, #2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e067      	b.n	8008952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008882:	4b37      	ldr	r3, [pc, #220]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f023 0203 	bic.w	r2, r3, #3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	4934      	ldr	r1, [pc, #208]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 8008890:	4313      	orrs	r3, r2
 8008892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008894:	f7fb fc72 	bl	800417c <HAL_GetTick>
 8008898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800889a:	e00a      	b.n	80088b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800889c:	f7fb fc6e 	bl	800417c <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d901      	bls.n	80088b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e04f      	b.n	8008952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088b2:	4b2b      	ldr	r3, [pc, #172]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f003 020c 	and.w	r2, r3, #12
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d1eb      	bne.n	800889c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088c4:	4b25      	ldr	r3, [pc, #148]	; (800895c <HAL_RCC_ClockConfig+0x1b8>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d20c      	bcs.n	80088ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088d2:	4b22      	ldr	r3, [pc, #136]	; (800895c <HAL_RCC_ClockConfig+0x1b8>)
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	b2d2      	uxtb	r2, r2
 80088d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088da:	4b20      	ldr	r3, [pc, #128]	; (800895c <HAL_RCC_ClockConfig+0x1b8>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 030f 	and.w	r3, r3, #15
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d001      	beq.n	80088ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e032      	b.n	8008952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d008      	beq.n	800890a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088f8:	4b19      	ldr	r3, [pc, #100]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	4916      	ldr	r1, [pc, #88]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 8008906:	4313      	orrs	r3, r2
 8008908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0308 	and.w	r3, r3, #8
 8008912:	2b00      	cmp	r3, #0
 8008914:	d009      	beq.n	800892a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008916:	4b12      	ldr	r3, [pc, #72]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	490e      	ldr	r1, [pc, #56]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 8008926:	4313      	orrs	r3, r2
 8008928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800892a:	f000 fb6b 	bl	8009004 <HAL_RCC_GetSysClockFreq>
 800892e:	4602      	mov	r2, r0
 8008930:	4b0b      	ldr	r3, [pc, #44]	; (8008960 <HAL_RCC_ClockConfig+0x1bc>)
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	091b      	lsrs	r3, r3, #4
 8008936:	f003 030f 	and.w	r3, r3, #15
 800893a:	490a      	ldr	r1, [pc, #40]	; (8008964 <HAL_RCC_ClockConfig+0x1c0>)
 800893c:	5ccb      	ldrb	r3, [r1, r3]
 800893e:	fa22 f303 	lsr.w	r3, r2, r3
 8008942:	4a09      	ldr	r2, [pc, #36]	; (8008968 <HAL_RCC_ClockConfig+0x1c4>)
 8008944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008946:	4b09      	ldr	r3, [pc, #36]	; (800896c <HAL_RCC_ClockConfig+0x1c8>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4618      	mov	r0, r3
 800894c:	f7fb fbd2 	bl	80040f4 <HAL_InitTick>

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	40023c00 	.word	0x40023c00
 8008960:	40023800 	.word	0x40023800
 8008964:	0800fd2c 	.word	0x0800fd2c
 8008968:	20000000 	.word	0x20000000
 800896c:	20000004 	.word	0x20000004

08008970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008970:	b480      	push	{r7}
 8008972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008974:	4b03      	ldr	r3, [pc, #12]	; (8008984 <HAL_RCC_GetHCLKFreq+0x14>)
 8008976:	681b      	ldr	r3, [r3, #0]
}
 8008978:	4618      	mov	r0, r3
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	20000000 	.word	0x20000000

08008988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800898c:	f7ff fff0 	bl	8008970 <HAL_RCC_GetHCLKFreq>
 8008990:	4602      	mov	r2, r0
 8008992:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	0a9b      	lsrs	r3, r3, #10
 8008998:	f003 0307 	and.w	r3, r3, #7
 800899c:	4903      	ldr	r1, [pc, #12]	; (80089ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800899e:	5ccb      	ldrb	r3, [r1, r3]
 80089a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	40023800 	.word	0x40023800
 80089ac:	0800fd3c 	.word	0x0800fd3c

080089b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b08c      	sub	sp, #48	; 0x30
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80089c8:	2300      	movs	r3, #0
 80089ca:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d010      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80089e8:	4b6f      	ldr	r3, [pc, #444]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80089ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ee:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f6:	496c      	ldr	r1, [pc, #432]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8008a06:	2301      	movs	r3, #1
 8008a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d010      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008a16:	4b64      	ldr	r3, [pc, #400]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a1c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a24:	4960      	ldr	r1, [pc, #384]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8008a34:	2301      	movs	r3, #1
 8008a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0304 	and.w	r3, r3, #4
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d017      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a44:	4b58      	ldr	r3, [pc, #352]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a52:	4955      	ldr	r1, [pc, #340]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a62:	d101      	bne.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8008a64:	2301      	movs	r3, #1
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008a70:	2301      	movs	r3, #1
 8008a72:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0308 	and.w	r3, r3, #8
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d017      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008a80:	4b49      	ldr	r3, [pc, #292]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8e:	4946      	ldr	r1, [pc, #280]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a9e:	d101      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8008aac:	2301      	movs	r3, #1
 8008aae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0320 	and.w	r3, r3, #32
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 808a 	beq.w	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60bb      	str	r3, [r7, #8]
 8008ac2:	4b39      	ldr	r3, [pc, #228]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	4a38      	ldr	r2, [pc, #224]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008acc:	6413      	str	r3, [r2, #64]	; 0x40
 8008ace:	4b36      	ldr	r3, [pc, #216]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ad6:	60bb      	str	r3, [r7, #8]
 8008ad8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008ada:	4b34      	ldr	r3, [pc, #208]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a33      	ldr	r2, [pc, #204]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ae4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ae6:	f7fb fb49 	bl	800417c <HAL_GetTick>
 8008aea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008aec:	e008      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008aee:	f7fb fb45 	bl	800417c <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d901      	bls.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e278      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b00:	4b2a      	ldr	r3, [pc, #168]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d0f0      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b0c:	4b26      	ldr	r3, [pc, #152]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b14:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d02f      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b24:	6a3a      	ldr	r2, [r7, #32]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d028      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b2a:	4b1f      	ldr	r3, [pc, #124]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b32:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b34:	4b1e      	ldr	r3, [pc, #120]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008b36:	2201      	movs	r2, #1
 8008b38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b3a:	4b1d      	ldr	r3, [pc, #116]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008b40:	4a19      	ldr	r2, [pc, #100]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b46:	4b18      	ldr	r3, [pc, #96]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d114      	bne.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008b52:	f7fb fb13 	bl	800417c <HAL_GetTick>
 8008b56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b58:	e00a      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b5a:	f7fb fb0f 	bl	800417c <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d901      	bls.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e240      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b70:	4b0d      	ldr	r3, [pc, #52]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b74:	f003 0302 	and.w	r3, r3, #2
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0ee      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b88:	d114      	bne.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8008b8a:	4b07      	ldr	r3, [pc, #28]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b9e:	4902      	ldr	r1, [pc, #8]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	608b      	str	r3, [r1, #8]
 8008ba4:	e00c      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8008ba6:	bf00      	nop
 8008ba8:	40023800 	.word	0x40023800
 8008bac:	40007000 	.word	0x40007000
 8008bb0:	42470e40 	.word	0x42470e40
 8008bb4:	4b4a      	ldr	r3, [pc, #296]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	4a49      	ldr	r2, [pc, #292]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008bba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008bbe:	6093      	str	r3, [r2, #8]
 8008bc0:	4b47      	ldr	r3, [pc, #284]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008bc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bcc:	4944      	ldr	r1, [pc, #272]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 0310 	and.w	r3, r3, #16
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d004      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8008be4:	4b3f      	ldr	r3, [pc, #252]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8008be6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00a      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008bf4:	4b3a      	ldr	r3, [pc, #232]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c02:	4937      	ldr	r1, [pc, #220]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00a      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c16:	4b32      	ldr	r3, [pc, #200]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c1c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c24:	492e      	ldr	r1, [pc, #184]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d011      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008c38:	4b29      	ldr	r3, [pc, #164]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c3e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c46:	4926      	ldr	r1, [pc, #152]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c56:	d101      	bne.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00a      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008c68:	4b1d      	ldr	r3, [pc, #116]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c76:	491a      	ldr	r1, [pc, #104]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d011      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8008c8a:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c90:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c98:	4911      	ldr	r1, [pc, #68]	; (8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ca8:	d101      	bne.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8008caa:	2301      	movs	r3, #1
 8008cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d005      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cbc:	f040 80ff 	bne.w	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008cc0:	4b09      	ldr	r3, [pc, #36]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008cc6:	f7fb fa59 	bl	800417c <HAL_GetTick>
 8008cca:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ccc:	e00e      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008cce:	f7fb fa55 	bl	800417c <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d907      	bls.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e188      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008ce0:	40023800 	.word	0x40023800
 8008ce4:	424711e0 	.word	0x424711e0
 8008ce8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008cec:	4b7e      	ldr	r3, [pc, #504]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1ea      	bne.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d003      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d009      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d028      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d124      	bne.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008d20:	4b71      	ldr	r3, [pc, #452]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d26:	0c1b      	lsrs	r3, r3, #16
 8008d28:	f003 0303 	and.w	r3, r3, #3
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008d32:	4b6d      	ldr	r3, [pc, #436]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d38:	0e1b      	lsrs	r3, r3, #24
 8008d3a:	f003 030f 	and.w	r3, r3, #15
 8008d3e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	019b      	lsls	r3, r3, #6
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	085b      	lsrs	r3, r3, #1
 8008d50:	3b01      	subs	r3, #1
 8008d52:	041b      	lsls	r3, r3, #16
 8008d54:	431a      	orrs	r2, r3
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	061b      	lsls	r3, r3, #24
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	071b      	lsls	r3, r3, #28
 8008d62:	4961      	ldr	r1, [pc, #388]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d64:	4313      	orrs	r3, r2
 8008d66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0304 	and.w	r3, r3, #4
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d004      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d7e:	d00a      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d035      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d94:	d130      	bne.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008d96:	4b54      	ldr	r3, [pc, #336]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d9c:	0c1b      	lsrs	r3, r3, #16
 8008d9e:	f003 0303 	and.w	r3, r3, #3
 8008da2:	3301      	adds	r3, #1
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008da8:	4b4f      	ldr	r3, [pc, #316]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dae:	0f1b      	lsrs	r3, r3, #28
 8008db0:	f003 0307 	and.w	r3, r3, #7
 8008db4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	019b      	lsls	r3, r3, #6
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	085b      	lsrs	r3, r3, #1
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	041b      	lsls	r3, r3, #16
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	061b      	lsls	r3, r3, #24
 8008dd2:	431a      	orrs	r2, r3
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	071b      	lsls	r3, r3, #28
 8008dd8:	4943      	ldr	r1, [pc, #268]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008de0:	4b41      	ldr	r3, [pc, #260]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008de6:	f023 021f 	bic.w	r2, r3, #31
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dee:	3b01      	subs	r3, #1
 8008df0:	493d      	ldr	r1, [pc, #244]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d029      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e0c:	d124      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008e0e:	4b36      	ldr	r3, [pc, #216]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e14:	0c1b      	lsrs	r3, r3, #16
 8008e16:	f003 0303 	and.w	r3, r3, #3
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	005b      	lsls	r3, r3, #1
 8008e1e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008e20:	4b31      	ldr	r3, [pc, #196]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e26:	0f1b      	lsrs	r3, r3, #28
 8008e28:	f003 0307 	and.w	r3, r3, #7
 8008e2c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	019b      	lsls	r3, r3, #6
 8008e38:	431a      	orrs	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	085b      	lsrs	r3, r3, #1
 8008e40:	3b01      	subs	r3, #1
 8008e42:	041b      	lsls	r3, r3, #16
 8008e44:	431a      	orrs	r2, r3
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	061b      	lsls	r3, r3, #24
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	071b      	lsls	r3, r3, #28
 8008e50:	4925      	ldr	r1, [pc, #148]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d016      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	019b      	lsls	r3, r3, #6
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	085b      	lsrs	r3, r3, #1
 8008e76:	3b01      	subs	r3, #1
 8008e78:	041b      	lsls	r3, r3, #16
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	061b      	lsls	r3, r3, #24
 8008e82:	431a      	orrs	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	071b      	lsls	r3, r3, #28
 8008e8a:	4917      	ldr	r1, [pc, #92]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008e92:	4b16      	ldr	r3, [pc, #88]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8008e94:	2201      	movs	r2, #1
 8008e96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e98:	f7fb f970 	bl	800417c <HAL_GetTick>
 8008e9c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e9e:	e008      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008ea0:	f7fb f96c 	bl	800417c <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e09f      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008eb2:	4b0d      	ldr	r3, [pc, #52]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0f0      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8008ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	f040 8095 	bne.w	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008ec6:	4b0a      	ldr	r3, [pc, #40]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ecc:	f7fb f956 	bl	800417c <HAL_GetTick>
 8008ed0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008ed2:	e00f      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008ed4:	f7fb f952 	bl	800417c <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d908      	bls.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e085      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008ee6:	bf00      	nop
 8008ee8:	40023800 	.word	0x40023800
 8008eec:	42470068 	.word	0x42470068
 8008ef0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008ef4:	4b41      	ldr	r3, [pc, #260]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f00:	d0e8      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0304 	and.w	r3, r3, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d009      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d02b      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d127      	bne.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008f2a:	4b34      	ldr	r3, [pc, #208]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f30:	0c1b      	lsrs	r3, r3, #16
 8008f32:	f003 0303 	and.w	r3, r3, #3
 8008f36:	3301      	adds	r3, #1
 8008f38:	005b      	lsls	r3, r3, #1
 8008f3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	699a      	ldr	r2, [r3, #24]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	019b      	lsls	r3, r3, #6
 8008f46:	431a      	orrs	r2, r3
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	085b      	lsrs	r3, r3, #1
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	041b      	lsls	r3, r3, #16
 8008f50:	431a      	orrs	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	061b      	lsls	r3, r3, #24
 8008f58:	4928      	ldr	r1, [pc, #160]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008f60:	4b26      	ldr	r3, [pc, #152]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f66:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	021b      	lsls	r3, r3, #8
 8008f72:	4922      	ldr	r1, [pc, #136]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008f74:	4313      	orrs	r3, r2
 8008f76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d01d      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f8e:	d118      	bne.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008f90:	4b1a      	ldr	r3, [pc, #104]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f96:	0e1b      	lsrs	r3, r3, #24
 8008f98:	f003 030f 	and.w	r3, r3, #15
 8008f9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	699a      	ldr	r2, [r3, #24]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	019b      	lsls	r3, r3, #6
 8008fa8:	431a      	orrs	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	085b      	lsrs	r3, r3, #1
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	041b      	lsls	r3, r3, #16
 8008fb4:	431a      	orrs	r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	061b      	lsls	r3, r3, #24
 8008fba:	4910      	ldr	r1, [pc, #64]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008fc2:	4b0f      	ldr	r3, [pc, #60]	; (8009000 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008fc8:	f7fb f8d8 	bl	800417c <HAL_GetTick>
 8008fcc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008fce:	e008      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008fd0:	f7fb f8d4 	bl	800417c <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d901      	bls.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e007      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008fe2:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fee:	d1ef      	bne.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3730      	adds	r7, #48	; 0x30
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	40023800 	.word	0x40023800
 8009000:	42470070 	.word	0x42470070

08009004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009008:	b0ae      	sub	sp, #184	; 0xb8
 800900a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800900c:	2300      	movs	r3, #0
 800900e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8009012:	2300      	movs	r3, #0
 8009014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8009018:	2300      	movs	r3, #0
 800901a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8009024:	2300      	movs	r3, #0
 8009026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800902a:	4bcb      	ldr	r3, [pc, #812]	; (8009358 <HAL_RCC_GetSysClockFreq+0x354>)
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f003 030c 	and.w	r3, r3, #12
 8009032:	2b0c      	cmp	r3, #12
 8009034:	f200 8206 	bhi.w	8009444 <HAL_RCC_GetSysClockFreq+0x440>
 8009038:	a201      	add	r2, pc, #4	; (adr r2, 8009040 <HAL_RCC_GetSysClockFreq+0x3c>)
 800903a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903e:	bf00      	nop
 8009040:	08009075 	.word	0x08009075
 8009044:	08009445 	.word	0x08009445
 8009048:	08009445 	.word	0x08009445
 800904c:	08009445 	.word	0x08009445
 8009050:	0800907d 	.word	0x0800907d
 8009054:	08009445 	.word	0x08009445
 8009058:	08009445 	.word	0x08009445
 800905c:	08009445 	.word	0x08009445
 8009060:	08009085 	.word	0x08009085
 8009064:	08009445 	.word	0x08009445
 8009068:	08009445 	.word	0x08009445
 800906c:	08009445 	.word	0x08009445
 8009070:	08009275 	.word	0x08009275
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009074:	4bb9      	ldr	r3, [pc, #740]	; (800935c <HAL_RCC_GetSysClockFreq+0x358>)
 8009076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800907a:	e1e7      	b.n	800944c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800907c:	4bb8      	ldr	r3, [pc, #736]	; (8009360 <HAL_RCC_GetSysClockFreq+0x35c>)
 800907e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009082:	e1e3      	b.n	800944c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009084:	4bb4      	ldr	r3, [pc, #720]	; (8009358 <HAL_RCC_GetSysClockFreq+0x354>)
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800908c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009090:	4bb1      	ldr	r3, [pc, #708]	; (8009358 <HAL_RCC_GetSysClockFreq+0x354>)
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d071      	beq.n	8009180 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800909c:	4bae      	ldr	r3, [pc, #696]	; (8009358 <HAL_RCC_GetSysClockFreq+0x354>)
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	099b      	lsrs	r3, r3, #6
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090a8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80090ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090b8:	2300      	movs	r3, #0
 80090ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80090be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80090c2:	4622      	mov	r2, r4
 80090c4:	462b      	mov	r3, r5
 80090c6:	f04f 0000 	mov.w	r0, #0
 80090ca:	f04f 0100 	mov.w	r1, #0
 80090ce:	0159      	lsls	r1, r3, #5
 80090d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090d4:	0150      	lsls	r0, r2, #5
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4621      	mov	r1, r4
 80090dc:	1a51      	subs	r1, r2, r1
 80090de:	6439      	str	r1, [r7, #64]	; 0x40
 80090e0:	4629      	mov	r1, r5
 80090e2:	eb63 0301 	sbc.w	r3, r3, r1
 80090e6:	647b      	str	r3, [r7, #68]	; 0x44
 80090e8:	f04f 0200 	mov.w	r2, #0
 80090ec:	f04f 0300 	mov.w	r3, #0
 80090f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80090f4:	4649      	mov	r1, r9
 80090f6:	018b      	lsls	r3, r1, #6
 80090f8:	4641      	mov	r1, r8
 80090fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80090fe:	4641      	mov	r1, r8
 8009100:	018a      	lsls	r2, r1, #6
 8009102:	4641      	mov	r1, r8
 8009104:	1a51      	subs	r1, r2, r1
 8009106:	63b9      	str	r1, [r7, #56]	; 0x38
 8009108:	4649      	mov	r1, r9
 800910a:	eb63 0301 	sbc.w	r3, r3, r1
 800910e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009110:	f04f 0200 	mov.w	r2, #0
 8009114:	f04f 0300 	mov.w	r3, #0
 8009118:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800911c:	4649      	mov	r1, r9
 800911e:	00cb      	lsls	r3, r1, #3
 8009120:	4641      	mov	r1, r8
 8009122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009126:	4641      	mov	r1, r8
 8009128:	00ca      	lsls	r2, r1, #3
 800912a:	4610      	mov	r0, r2
 800912c:	4619      	mov	r1, r3
 800912e:	4603      	mov	r3, r0
 8009130:	4622      	mov	r2, r4
 8009132:	189b      	adds	r3, r3, r2
 8009134:	633b      	str	r3, [r7, #48]	; 0x30
 8009136:	462b      	mov	r3, r5
 8009138:	460a      	mov	r2, r1
 800913a:	eb42 0303 	adc.w	r3, r2, r3
 800913e:	637b      	str	r3, [r7, #52]	; 0x34
 8009140:	f04f 0200 	mov.w	r2, #0
 8009144:	f04f 0300 	mov.w	r3, #0
 8009148:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800914c:	4629      	mov	r1, r5
 800914e:	024b      	lsls	r3, r1, #9
 8009150:	4621      	mov	r1, r4
 8009152:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009156:	4621      	mov	r1, r4
 8009158:	024a      	lsls	r2, r1, #9
 800915a:	4610      	mov	r0, r2
 800915c:	4619      	mov	r1, r3
 800915e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009162:	2200      	movs	r2, #0
 8009164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009168:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800916c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009170:	f7f7 f848 	bl	8000204 <__aeabi_uldivmod>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4613      	mov	r3, r2
 800917a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800917e:	e067      	b.n	8009250 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009180:	4b75      	ldr	r3, [pc, #468]	; (8009358 <HAL_RCC_GetSysClockFreq+0x354>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	099b      	lsrs	r3, r3, #6
 8009186:	2200      	movs	r2, #0
 8009188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800918c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009190:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009198:	67bb      	str	r3, [r7, #120]	; 0x78
 800919a:	2300      	movs	r3, #0
 800919c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800919e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80091a2:	4622      	mov	r2, r4
 80091a4:	462b      	mov	r3, r5
 80091a6:	f04f 0000 	mov.w	r0, #0
 80091aa:	f04f 0100 	mov.w	r1, #0
 80091ae:	0159      	lsls	r1, r3, #5
 80091b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091b4:	0150      	lsls	r0, r2, #5
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4621      	mov	r1, r4
 80091bc:	1a51      	subs	r1, r2, r1
 80091be:	62b9      	str	r1, [r7, #40]	; 0x28
 80091c0:	4629      	mov	r1, r5
 80091c2:	eb63 0301 	sbc.w	r3, r3, r1
 80091c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091c8:	f04f 0200 	mov.w	r2, #0
 80091cc:	f04f 0300 	mov.w	r3, #0
 80091d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80091d4:	4649      	mov	r1, r9
 80091d6:	018b      	lsls	r3, r1, #6
 80091d8:	4641      	mov	r1, r8
 80091da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091de:	4641      	mov	r1, r8
 80091e0:	018a      	lsls	r2, r1, #6
 80091e2:	4641      	mov	r1, r8
 80091e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80091e8:	4649      	mov	r1, r9
 80091ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80091ee:	f04f 0200 	mov.w	r2, #0
 80091f2:	f04f 0300 	mov.w	r3, #0
 80091f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009202:	4692      	mov	sl, r2
 8009204:	469b      	mov	fp, r3
 8009206:	4623      	mov	r3, r4
 8009208:	eb1a 0303 	adds.w	r3, sl, r3
 800920c:	623b      	str	r3, [r7, #32]
 800920e:	462b      	mov	r3, r5
 8009210:	eb4b 0303 	adc.w	r3, fp, r3
 8009214:	627b      	str	r3, [r7, #36]	; 0x24
 8009216:	f04f 0200 	mov.w	r2, #0
 800921a:	f04f 0300 	mov.w	r3, #0
 800921e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009222:	4629      	mov	r1, r5
 8009224:	028b      	lsls	r3, r1, #10
 8009226:	4621      	mov	r1, r4
 8009228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800922c:	4621      	mov	r1, r4
 800922e:	028a      	lsls	r2, r1, #10
 8009230:	4610      	mov	r0, r2
 8009232:	4619      	mov	r1, r3
 8009234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009238:	2200      	movs	r2, #0
 800923a:	673b      	str	r3, [r7, #112]	; 0x70
 800923c:	677a      	str	r2, [r7, #116]	; 0x74
 800923e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009242:	f7f6 ffdf 	bl	8000204 <__aeabi_uldivmod>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4613      	mov	r3, r2
 800924c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009250:	4b41      	ldr	r3, [pc, #260]	; (8009358 <HAL_RCC_GetSysClockFreq+0x354>)
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	0c1b      	lsrs	r3, r3, #16
 8009256:	f003 0303 	and.w	r3, r3, #3
 800925a:	3301      	adds	r3, #1
 800925c:	005b      	lsls	r3, r3, #1
 800925e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8009262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800926a:	fbb2 f3f3 	udiv	r3, r2, r3
 800926e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009272:	e0eb      	b.n	800944c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009274:	4b38      	ldr	r3, [pc, #224]	; (8009358 <HAL_RCC_GetSysClockFreq+0x354>)
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800927c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009280:	4b35      	ldr	r3, [pc, #212]	; (8009358 <HAL_RCC_GetSysClockFreq+0x354>)
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d06b      	beq.n	8009364 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800928c:	4b32      	ldr	r3, [pc, #200]	; (8009358 <HAL_RCC_GetSysClockFreq+0x354>)
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	099b      	lsrs	r3, r3, #6
 8009292:	2200      	movs	r2, #0
 8009294:	66bb      	str	r3, [r7, #104]	; 0x68
 8009296:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009298:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800929a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800929e:	663b      	str	r3, [r7, #96]	; 0x60
 80092a0:	2300      	movs	r3, #0
 80092a2:	667b      	str	r3, [r7, #100]	; 0x64
 80092a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80092a8:	4622      	mov	r2, r4
 80092aa:	462b      	mov	r3, r5
 80092ac:	f04f 0000 	mov.w	r0, #0
 80092b0:	f04f 0100 	mov.w	r1, #0
 80092b4:	0159      	lsls	r1, r3, #5
 80092b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092ba:	0150      	lsls	r0, r2, #5
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4621      	mov	r1, r4
 80092c2:	1a51      	subs	r1, r2, r1
 80092c4:	61b9      	str	r1, [r7, #24]
 80092c6:	4629      	mov	r1, r5
 80092c8:	eb63 0301 	sbc.w	r3, r3, r1
 80092cc:	61fb      	str	r3, [r7, #28]
 80092ce:	f04f 0200 	mov.w	r2, #0
 80092d2:	f04f 0300 	mov.w	r3, #0
 80092d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80092da:	4659      	mov	r1, fp
 80092dc:	018b      	lsls	r3, r1, #6
 80092de:	4651      	mov	r1, sl
 80092e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80092e4:	4651      	mov	r1, sl
 80092e6:	018a      	lsls	r2, r1, #6
 80092e8:	4651      	mov	r1, sl
 80092ea:	ebb2 0801 	subs.w	r8, r2, r1
 80092ee:	4659      	mov	r1, fp
 80092f0:	eb63 0901 	sbc.w	r9, r3, r1
 80092f4:	f04f 0200 	mov.w	r2, #0
 80092f8:	f04f 0300 	mov.w	r3, #0
 80092fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009300:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009304:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009308:	4690      	mov	r8, r2
 800930a:	4699      	mov	r9, r3
 800930c:	4623      	mov	r3, r4
 800930e:	eb18 0303 	adds.w	r3, r8, r3
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	462b      	mov	r3, r5
 8009316:	eb49 0303 	adc.w	r3, r9, r3
 800931a:	617b      	str	r3, [r7, #20]
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	f04f 0300 	mov.w	r3, #0
 8009324:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009328:	4629      	mov	r1, r5
 800932a:	024b      	lsls	r3, r1, #9
 800932c:	4621      	mov	r1, r4
 800932e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009332:	4621      	mov	r1, r4
 8009334:	024a      	lsls	r2, r1, #9
 8009336:	4610      	mov	r0, r2
 8009338:	4619      	mov	r1, r3
 800933a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800933e:	2200      	movs	r2, #0
 8009340:	65bb      	str	r3, [r7, #88]	; 0x58
 8009342:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009344:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009348:	f7f6 ff5c 	bl	8000204 <__aeabi_uldivmod>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4613      	mov	r3, r2
 8009352:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009356:	e065      	b.n	8009424 <HAL_RCC_GetSysClockFreq+0x420>
 8009358:	40023800 	.word	0x40023800
 800935c:	00f42400 	.word	0x00f42400
 8009360:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009364:	4b3d      	ldr	r3, [pc, #244]	; (800945c <HAL_RCC_GetSysClockFreq+0x458>)
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	099b      	lsrs	r3, r3, #6
 800936a:	2200      	movs	r2, #0
 800936c:	4618      	mov	r0, r3
 800936e:	4611      	mov	r1, r2
 8009370:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009374:	653b      	str	r3, [r7, #80]	; 0x50
 8009376:	2300      	movs	r3, #0
 8009378:	657b      	str	r3, [r7, #84]	; 0x54
 800937a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800937e:	4642      	mov	r2, r8
 8009380:	464b      	mov	r3, r9
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f04f 0100 	mov.w	r1, #0
 800938a:	0159      	lsls	r1, r3, #5
 800938c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009390:	0150      	lsls	r0, r2, #5
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4641      	mov	r1, r8
 8009398:	1a51      	subs	r1, r2, r1
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	4649      	mov	r1, r9
 800939e:	eb63 0301 	sbc.w	r3, r3, r1
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	f04f 0200 	mov.w	r2, #0
 80093a8:	f04f 0300 	mov.w	r3, #0
 80093ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80093b0:	4659      	mov	r1, fp
 80093b2:	018b      	lsls	r3, r1, #6
 80093b4:	4651      	mov	r1, sl
 80093b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80093ba:	4651      	mov	r1, sl
 80093bc:	018a      	lsls	r2, r1, #6
 80093be:	4651      	mov	r1, sl
 80093c0:	1a54      	subs	r4, r2, r1
 80093c2:	4659      	mov	r1, fp
 80093c4:	eb63 0501 	sbc.w	r5, r3, r1
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	f04f 0300 	mov.w	r3, #0
 80093d0:	00eb      	lsls	r3, r5, #3
 80093d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093d6:	00e2      	lsls	r2, r4, #3
 80093d8:	4614      	mov	r4, r2
 80093da:	461d      	mov	r5, r3
 80093dc:	4643      	mov	r3, r8
 80093de:	18e3      	adds	r3, r4, r3
 80093e0:	603b      	str	r3, [r7, #0]
 80093e2:	464b      	mov	r3, r9
 80093e4:	eb45 0303 	adc.w	r3, r5, r3
 80093e8:	607b      	str	r3, [r7, #4]
 80093ea:	f04f 0200 	mov.w	r2, #0
 80093ee:	f04f 0300 	mov.w	r3, #0
 80093f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093f6:	4629      	mov	r1, r5
 80093f8:	028b      	lsls	r3, r1, #10
 80093fa:	4621      	mov	r1, r4
 80093fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009400:	4621      	mov	r1, r4
 8009402:	028a      	lsls	r2, r1, #10
 8009404:	4610      	mov	r0, r2
 8009406:	4619      	mov	r1, r3
 8009408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800940c:	2200      	movs	r2, #0
 800940e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009410:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009412:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009416:	f7f6 fef5 	bl	8000204 <__aeabi_uldivmod>
 800941a:	4602      	mov	r2, r0
 800941c:	460b      	mov	r3, r1
 800941e:	4613      	mov	r3, r2
 8009420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009424:	4b0d      	ldr	r3, [pc, #52]	; (800945c <HAL_RCC_GetSysClockFreq+0x458>)
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	0f1b      	lsrs	r3, r3, #28
 800942a:	f003 0307 	and.w	r3, r3, #7
 800942e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8009432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800943a:	fbb2 f3f3 	udiv	r3, r2, r3
 800943e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009442:	e003      	b.n	800944c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009444:	4b06      	ldr	r3, [pc, #24]	; (8009460 <HAL_RCC_GetSysClockFreq+0x45c>)
 8009446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800944a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800944c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8009450:	4618      	mov	r0, r3
 8009452:	37b8      	adds	r7, #184	; 0xb8
 8009454:	46bd      	mov	sp, r7
 8009456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800945a:	bf00      	nop
 800945c:	40023800 	.word	0x40023800
 8009460:	00f42400 	.word	0x00f42400

08009464 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e28d      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 8083 	beq.w	800958a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009484:	4b94      	ldr	r3, [pc, #592]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f003 030c 	and.w	r3, r3, #12
 800948c:	2b04      	cmp	r3, #4
 800948e:	d019      	beq.n	80094c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009490:	4b91      	ldr	r3, [pc, #580]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009498:	2b08      	cmp	r3, #8
 800949a:	d106      	bne.n	80094aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800949c:	4b8e      	ldr	r3, [pc, #568]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094a8:	d00c      	beq.n	80094c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094aa:	4b8b      	ldr	r3, [pc, #556]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80094b2:	2b0c      	cmp	r3, #12
 80094b4:	d112      	bne.n	80094dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094b6:	4b88      	ldr	r3, [pc, #544]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094c2:	d10b      	bne.n	80094dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094c4:	4b84      	ldr	r3, [pc, #528]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d05b      	beq.n	8009588 <HAL_RCC_OscConfig+0x124>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d157      	bne.n	8009588 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e25a      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094e4:	d106      	bne.n	80094f4 <HAL_RCC_OscConfig+0x90>
 80094e6:	4b7c      	ldr	r3, [pc, #496]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a7b      	ldr	r2, [pc, #492]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 80094ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094f0:	6013      	str	r3, [r2, #0]
 80094f2:	e01d      	b.n	8009530 <HAL_RCC_OscConfig+0xcc>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094fc:	d10c      	bne.n	8009518 <HAL_RCC_OscConfig+0xb4>
 80094fe:	4b76      	ldr	r3, [pc, #472]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a75      	ldr	r2, [pc, #468]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 8009504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009508:	6013      	str	r3, [r2, #0]
 800950a:	4b73      	ldr	r3, [pc, #460]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a72      	ldr	r2, [pc, #456]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 8009510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009514:	6013      	str	r3, [r2, #0]
 8009516:	e00b      	b.n	8009530 <HAL_RCC_OscConfig+0xcc>
 8009518:	4b6f      	ldr	r3, [pc, #444]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a6e      	ldr	r2, [pc, #440]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 800951e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	4b6c      	ldr	r3, [pc, #432]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a6b      	ldr	r2, [pc, #428]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 800952a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800952e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d013      	beq.n	8009560 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009538:	f7fa fe20 	bl	800417c <HAL_GetTick>
 800953c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800953e:	e008      	b.n	8009552 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009540:	f7fa fe1c 	bl	800417c <HAL_GetTick>
 8009544:	4602      	mov	r2, r0
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	2b64      	cmp	r3, #100	; 0x64
 800954c:	d901      	bls.n	8009552 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e21f      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009552:	4b61      	ldr	r3, [pc, #388]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0f0      	beq.n	8009540 <HAL_RCC_OscConfig+0xdc>
 800955e:	e014      	b.n	800958a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009560:	f7fa fe0c 	bl	800417c <HAL_GetTick>
 8009564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009566:	e008      	b.n	800957a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009568:	f7fa fe08 	bl	800417c <HAL_GetTick>
 800956c:	4602      	mov	r2, r0
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	2b64      	cmp	r3, #100	; 0x64
 8009574:	d901      	bls.n	800957a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e20b      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800957a:	4b57      	ldr	r3, [pc, #348]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1f0      	bne.n	8009568 <HAL_RCC_OscConfig+0x104>
 8009586:	e000      	b.n	800958a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0302 	and.w	r3, r3, #2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d06f      	beq.n	8009676 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009596:	4b50      	ldr	r3, [pc, #320]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f003 030c 	and.w	r3, r3, #12
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d017      	beq.n	80095d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80095a2:	4b4d      	ldr	r3, [pc, #308]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80095aa:	2b08      	cmp	r3, #8
 80095ac:	d105      	bne.n	80095ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80095ae:	4b4a      	ldr	r3, [pc, #296]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00b      	beq.n	80095d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095ba:	4b47      	ldr	r3, [pc, #284]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80095c2:	2b0c      	cmp	r3, #12
 80095c4:	d11c      	bne.n	8009600 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095c6:	4b44      	ldr	r3, [pc, #272]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d116      	bne.n	8009600 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095d2:	4b41      	ldr	r3, [pc, #260]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d005      	beq.n	80095ea <HAL_RCC_OscConfig+0x186>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d001      	beq.n	80095ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e1d3      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095ea:	4b3b      	ldr	r3, [pc, #236]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	00db      	lsls	r3, r3, #3
 80095f8:	4937      	ldr	r1, [pc, #220]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095fe:	e03a      	b.n	8009676 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d020      	beq.n	800964a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009608:	4b34      	ldr	r3, [pc, #208]	; (80096dc <HAL_RCC_OscConfig+0x278>)
 800960a:	2201      	movs	r2, #1
 800960c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800960e:	f7fa fdb5 	bl	800417c <HAL_GetTick>
 8009612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009614:	e008      	b.n	8009628 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009616:	f7fa fdb1 	bl	800417c <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	2b02      	cmp	r3, #2
 8009622:	d901      	bls.n	8009628 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e1b4      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009628:	4b2b      	ldr	r3, [pc, #172]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0302 	and.w	r3, r3, #2
 8009630:	2b00      	cmp	r3, #0
 8009632:	d0f0      	beq.n	8009616 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009634:	4b28      	ldr	r3, [pc, #160]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	00db      	lsls	r3, r3, #3
 8009642:	4925      	ldr	r1, [pc, #148]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 8009644:	4313      	orrs	r3, r2
 8009646:	600b      	str	r3, [r1, #0]
 8009648:	e015      	b.n	8009676 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800964a:	4b24      	ldr	r3, [pc, #144]	; (80096dc <HAL_RCC_OscConfig+0x278>)
 800964c:	2200      	movs	r2, #0
 800964e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009650:	f7fa fd94 	bl	800417c <HAL_GetTick>
 8009654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009656:	e008      	b.n	800966a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009658:	f7fa fd90 	bl	800417c <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b02      	cmp	r3, #2
 8009664:	d901      	bls.n	800966a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e193      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800966a:	4b1b      	ldr	r3, [pc, #108]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0302 	and.w	r3, r3, #2
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1f0      	bne.n	8009658 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 0308 	and.w	r3, r3, #8
 800967e:	2b00      	cmp	r3, #0
 8009680:	d036      	beq.n	80096f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d016      	beq.n	80096b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800968a:	4b15      	ldr	r3, [pc, #84]	; (80096e0 <HAL_RCC_OscConfig+0x27c>)
 800968c:	2201      	movs	r2, #1
 800968e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009690:	f7fa fd74 	bl	800417c <HAL_GetTick>
 8009694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009696:	e008      	b.n	80096aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009698:	f7fa fd70 	bl	800417c <HAL_GetTick>
 800969c:	4602      	mov	r2, r0
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d901      	bls.n	80096aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e173      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096aa:	4b0b      	ldr	r3, [pc, #44]	; (80096d8 <HAL_RCC_OscConfig+0x274>)
 80096ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0f0      	beq.n	8009698 <HAL_RCC_OscConfig+0x234>
 80096b6:	e01b      	b.n	80096f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096b8:	4b09      	ldr	r3, [pc, #36]	; (80096e0 <HAL_RCC_OscConfig+0x27c>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096be:	f7fa fd5d 	bl	800417c <HAL_GetTick>
 80096c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096c4:	e00e      	b.n	80096e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096c6:	f7fa fd59 	bl	800417c <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d907      	bls.n	80096e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e15c      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
 80096d8:	40023800 	.word	0x40023800
 80096dc:	42470000 	.word	0x42470000
 80096e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096e4:	4b8a      	ldr	r3, [pc, #552]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 80096e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096e8:	f003 0302 	and.w	r3, r3, #2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1ea      	bne.n	80096c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0304 	and.w	r3, r3, #4
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 8097 	beq.w	800982c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096fe:	2300      	movs	r3, #0
 8009700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009702:	4b83      	ldr	r3, [pc, #524]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 8009704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10f      	bne.n	800972e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800970e:	2300      	movs	r3, #0
 8009710:	60bb      	str	r3, [r7, #8]
 8009712:	4b7f      	ldr	r3, [pc, #508]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 8009714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009716:	4a7e      	ldr	r2, [pc, #504]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 8009718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800971c:	6413      	str	r3, [r2, #64]	; 0x40
 800971e:	4b7c      	ldr	r3, [pc, #496]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 8009720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009726:	60bb      	str	r3, [r7, #8]
 8009728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800972a:	2301      	movs	r3, #1
 800972c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800972e:	4b79      	ldr	r3, [pc, #484]	; (8009914 <HAL_RCC_OscConfig+0x4b0>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009736:	2b00      	cmp	r3, #0
 8009738:	d118      	bne.n	800976c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800973a:	4b76      	ldr	r3, [pc, #472]	; (8009914 <HAL_RCC_OscConfig+0x4b0>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a75      	ldr	r2, [pc, #468]	; (8009914 <HAL_RCC_OscConfig+0x4b0>)
 8009740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009746:	f7fa fd19 	bl	800417c <HAL_GetTick>
 800974a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800974c:	e008      	b.n	8009760 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800974e:	f7fa fd15 	bl	800417c <HAL_GetTick>
 8009752:	4602      	mov	r2, r0
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	2b02      	cmp	r3, #2
 800975a:	d901      	bls.n	8009760 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e118      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009760:	4b6c      	ldr	r3, [pc, #432]	; (8009914 <HAL_RCC_OscConfig+0x4b0>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009768:	2b00      	cmp	r3, #0
 800976a:	d0f0      	beq.n	800974e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d106      	bne.n	8009782 <HAL_RCC_OscConfig+0x31e>
 8009774:	4b66      	ldr	r3, [pc, #408]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 8009776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009778:	4a65      	ldr	r2, [pc, #404]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 800977a:	f043 0301 	orr.w	r3, r3, #1
 800977e:	6713      	str	r3, [r2, #112]	; 0x70
 8009780:	e01c      	b.n	80097bc <HAL_RCC_OscConfig+0x358>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	2b05      	cmp	r3, #5
 8009788:	d10c      	bne.n	80097a4 <HAL_RCC_OscConfig+0x340>
 800978a:	4b61      	ldr	r3, [pc, #388]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 800978c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978e:	4a60      	ldr	r2, [pc, #384]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 8009790:	f043 0304 	orr.w	r3, r3, #4
 8009794:	6713      	str	r3, [r2, #112]	; 0x70
 8009796:	4b5e      	ldr	r3, [pc, #376]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 8009798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979a:	4a5d      	ldr	r2, [pc, #372]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 800979c:	f043 0301 	orr.w	r3, r3, #1
 80097a0:	6713      	str	r3, [r2, #112]	; 0x70
 80097a2:	e00b      	b.n	80097bc <HAL_RCC_OscConfig+0x358>
 80097a4:	4b5a      	ldr	r3, [pc, #360]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 80097a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a8:	4a59      	ldr	r2, [pc, #356]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 80097aa:	f023 0301 	bic.w	r3, r3, #1
 80097ae:	6713      	str	r3, [r2, #112]	; 0x70
 80097b0:	4b57      	ldr	r3, [pc, #348]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 80097b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b4:	4a56      	ldr	r2, [pc, #344]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 80097b6:	f023 0304 	bic.w	r3, r3, #4
 80097ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d015      	beq.n	80097f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097c4:	f7fa fcda 	bl	800417c <HAL_GetTick>
 80097c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097ca:	e00a      	b.n	80097e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097cc:	f7fa fcd6 	bl	800417c <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80097da:	4293      	cmp	r3, r2
 80097dc:	d901      	bls.n	80097e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e0d7      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097e2:	4b4b      	ldr	r3, [pc, #300]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 80097e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d0ee      	beq.n	80097cc <HAL_RCC_OscConfig+0x368>
 80097ee:	e014      	b.n	800981a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097f0:	f7fa fcc4 	bl	800417c <HAL_GetTick>
 80097f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097f6:	e00a      	b.n	800980e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097f8:	f7fa fcc0 	bl	800417c <HAL_GetTick>
 80097fc:	4602      	mov	r2, r0
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	f241 3288 	movw	r2, #5000	; 0x1388
 8009806:	4293      	cmp	r3, r2
 8009808:	d901      	bls.n	800980e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e0c1      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800980e:	4b40      	ldr	r3, [pc, #256]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 8009810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1ee      	bne.n	80097f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800981a:	7dfb      	ldrb	r3, [r7, #23]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d105      	bne.n	800982c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009820:	4b3b      	ldr	r3, [pc, #236]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 8009822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009824:	4a3a      	ldr	r2, [pc, #232]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 8009826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800982a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	2b00      	cmp	r3, #0
 8009832:	f000 80ad 	beq.w	8009990 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009836:	4b36      	ldr	r3, [pc, #216]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f003 030c 	and.w	r3, r3, #12
 800983e:	2b08      	cmp	r3, #8
 8009840:	d060      	beq.n	8009904 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d145      	bne.n	80098d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800984a:	4b33      	ldr	r3, [pc, #204]	; (8009918 <HAL_RCC_OscConfig+0x4b4>)
 800984c:	2200      	movs	r2, #0
 800984e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009850:	f7fa fc94 	bl	800417c <HAL_GetTick>
 8009854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009856:	e008      	b.n	800986a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009858:	f7fa fc90 	bl	800417c <HAL_GetTick>
 800985c:	4602      	mov	r2, r0
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	2b02      	cmp	r3, #2
 8009864:	d901      	bls.n	800986a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	e093      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800986a:	4b29      	ldr	r3, [pc, #164]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1f0      	bne.n	8009858 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	69da      	ldr	r2, [r3, #28]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	431a      	orrs	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	019b      	lsls	r3, r3, #6
 8009886:	431a      	orrs	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988c:	085b      	lsrs	r3, r3, #1
 800988e:	3b01      	subs	r3, #1
 8009890:	041b      	lsls	r3, r3, #16
 8009892:	431a      	orrs	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	061b      	lsls	r3, r3, #24
 800989a:	431a      	orrs	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a0:	071b      	lsls	r3, r3, #28
 80098a2:	491b      	ldr	r1, [pc, #108]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098a8:	4b1b      	ldr	r3, [pc, #108]	; (8009918 <HAL_RCC_OscConfig+0x4b4>)
 80098aa:	2201      	movs	r2, #1
 80098ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ae:	f7fa fc65 	bl	800417c <HAL_GetTick>
 80098b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098b4:	e008      	b.n	80098c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098b6:	f7fa fc61 	bl	800417c <HAL_GetTick>
 80098ba:	4602      	mov	r2, r0
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d901      	bls.n	80098c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80098c4:	2303      	movs	r3, #3
 80098c6:	e064      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098c8:	4b11      	ldr	r3, [pc, #68]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d0f0      	beq.n	80098b6 <HAL_RCC_OscConfig+0x452>
 80098d4:	e05c      	b.n	8009990 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098d6:	4b10      	ldr	r3, [pc, #64]	; (8009918 <HAL_RCC_OscConfig+0x4b4>)
 80098d8:	2200      	movs	r2, #0
 80098da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098dc:	f7fa fc4e 	bl	800417c <HAL_GetTick>
 80098e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098e2:	e008      	b.n	80098f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098e4:	f7fa fc4a 	bl	800417c <HAL_GetTick>
 80098e8:	4602      	mov	r2, r0
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d901      	bls.n	80098f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e04d      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098f6:	4b06      	ldr	r3, [pc, #24]	; (8009910 <HAL_RCC_OscConfig+0x4ac>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1f0      	bne.n	80098e4 <HAL_RCC_OscConfig+0x480>
 8009902:	e045      	b.n	8009990 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d107      	bne.n	800991c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	e040      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
 8009910:	40023800 	.word	0x40023800
 8009914:	40007000 	.word	0x40007000
 8009918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800991c:	4b1f      	ldr	r3, [pc, #124]	; (800999c <HAL_RCC_OscConfig+0x538>)
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d030      	beq.n	800998c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009934:	429a      	cmp	r2, r3
 8009936:	d129      	bne.n	800998c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009942:	429a      	cmp	r2, r3
 8009944:	d122      	bne.n	800998c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800994c:	4013      	ands	r3, r2
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009954:	4293      	cmp	r3, r2
 8009956:	d119      	bne.n	800998c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009962:	085b      	lsrs	r3, r3, #1
 8009964:	3b01      	subs	r3, #1
 8009966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009968:	429a      	cmp	r2, r3
 800996a:	d10f      	bne.n	800998c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009978:	429a      	cmp	r2, r3
 800997a:	d107      	bne.n	800998c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009986:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009988:	429a      	cmp	r2, r3
 800998a:	d001      	beq.n	8009990 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	e000      	b.n	8009992 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	40023800 	.word	0x40023800

080099a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d101      	bne.n	80099b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e041      	b.n	8009a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d106      	bne.n	80099cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7f9 ffd2 	bl	8003970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2202      	movs	r2, #2
 80099d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	3304      	adds	r3, #4
 80099dc:	4619      	mov	r1, r3
 80099de:	4610      	mov	r0, r2
 80099e0:	f000 ffc4 	bl	800a96c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d001      	beq.n	8009a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e04e      	b.n	8009af6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0201 	orr.w	r2, r2, #1
 8009a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a23      	ldr	r2, [pc, #140]	; (8009b04 <HAL_TIM_Base_Start_IT+0xc4>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d022      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a82:	d01d      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a1f      	ldr	r2, [pc, #124]	; (8009b08 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d018      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a1e      	ldr	r2, [pc, #120]	; (8009b0c <HAL_TIM_Base_Start_IT+0xcc>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d013      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a1c      	ldr	r2, [pc, #112]	; (8009b10 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00e      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a1b      	ldr	r2, [pc, #108]	; (8009b14 <HAL_TIM_Base_Start_IT+0xd4>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d009      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a19      	ldr	r2, [pc, #100]	; (8009b18 <HAL_TIM_Base_Start_IT+0xd8>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d004      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a18      	ldr	r2, [pc, #96]	; (8009b1c <HAL_TIM_Base_Start_IT+0xdc>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d111      	bne.n	8009ae4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f003 0307 	and.w	r3, r3, #7
 8009aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2b06      	cmp	r3, #6
 8009ad0:	d010      	beq.n	8009af4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f042 0201 	orr.w	r2, r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ae2:	e007      	b.n	8009af4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f042 0201 	orr.w	r2, r2, #1
 8009af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	40010000 	.word	0x40010000
 8009b08:	40000400 	.word	0x40000400
 8009b0c:	40000800 	.word	0x40000800
 8009b10:	40000c00 	.word	0x40000c00
 8009b14:	40010400 	.word	0x40010400
 8009b18:	40014000 	.word	0x40014000
 8009b1c:	40001800 	.word	0x40001800

08009b20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68da      	ldr	r2, [r3, #12]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f022 0201 	bic.w	r2, r2, #1
 8009b36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6a1a      	ldr	r2, [r3, #32]
 8009b3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b42:	4013      	ands	r3, r2
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10f      	bne.n	8009b68 <HAL_TIM_Base_Stop_IT+0x48>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6a1a      	ldr	r2, [r3, #32]
 8009b4e:	f240 4344 	movw	r3, #1092	; 0x444
 8009b52:	4013      	ands	r3, r2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d107      	bne.n	8009b68 <HAL_TIM_Base_Stop_IT+0x48>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f022 0201 	bic.w	r2, r2, #1
 8009b66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e041      	b.n	8009c14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d106      	bne.n	8009baa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f839 	bl	8009c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2202      	movs	r2, #2
 8009bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	3304      	adds	r3, #4
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	f000 fed5 	bl	800a96c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d109      	bne.n	8009c54 <HAL_TIM_PWM_Start+0x24>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	bf14      	ite	ne
 8009c4c:	2301      	movne	r3, #1
 8009c4e:	2300      	moveq	r3, #0
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	e022      	b.n	8009c9a <HAL_TIM_PWM_Start+0x6a>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	2b04      	cmp	r3, #4
 8009c58:	d109      	bne.n	8009c6e <HAL_TIM_PWM_Start+0x3e>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	bf14      	ite	ne
 8009c66:	2301      	movne	r3, #1
 8009c68:	2300      	moveq	r3, #0
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	e015      	b.n	8009c9a <HAL_TIM_PWM_Start+0x6a>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d109      	bne.n	8009c88 <HAL_TIM_PWM_Start+0x58>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	bf14      	ite	ne
 8009c80:	2301      	movne	r3, #1
 8009c82:	2300      	moveq	r3, #0
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	e008      	b.n	8009c9a <HAL_TIM_PWM_Start+0x6a>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	bf14      	ite	ne
 8009c94:	2301      	movne	r3, #1
 8009c96:	2300      	moveq	r3, #0
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e07c      	b.n	8009d9c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d104      	bne.n	8009cb2 <HAL_TIM_PWM_Start+0x82>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2202      	movs	r2, #2
 8009cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cb0:	e013      	b.n	8009cda <HAL_TIM_PWM_Start+0xaa>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	d104      	bne.n	8009cc2 <HAL_TIM_PWM_Start+0x92>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2202      	movs	r2, #2
 8009cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cc0:	e00b      	b.n	8009cda <HAL_TIM_PWM_Start+0xaa>
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b08      	cmp	r3, #8
 8009cc6:	d104      	bne.n	8009cd2 <HAL_TIM_PWM_Start+0xa2>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2202      	movs	r2, #2
 8009ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cd0:	e003      	b.n	8009cda <HAL_TIM_PWM_Start+0xaa>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2202      	movs	r2, #2
 8009cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f001 f92c 	bl	800af40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a2d      	ldr	r2, [pc, #180]	; (8009da4 <HAL_TIM_PWM_Start+0x174>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d004      	beq.n	8009cfc <HAL_TIM_PWM_Start+0xcc>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a2c      	ldr	r2, [pc, #176]	; (8009da8 <HAL_TIM_PWM_Start+0x178>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d101      	bne.n	8009d00 <HAL_TIM_PWM_Start+0xd0>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e000      	b.n	8009d02 <HAL_TIM_PWM_Start+0xd2>
 8009d00:	2300      	movs	r3, #0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d007      	beq.n	8009d16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a22      	ldr	r2, [pc, #136]	; (8009da4 <HAL_TIM_PWM_Start+0x174>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d022      	beq.n	8009d66 <HAL_TIM_PWM_Start+0x136>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d28:	d01d      	beq.n	8009d66 <HAL_TIM_PWM_Start+0x136>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a1f      	ldr	r2, [pc, #124]	; (8009dac <HAL_TIM_PWM_Start+0x17c>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d018      	beq.n	8009d66 <HAL_TIM_PWM_Start+0x136>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a1d      	ldr	r2, [pc, #116]	; (8009db0 <HAL_TIM_PWM_Start+0x180>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d013      	beq.n	8009d66 <HAL_TIM_PWM_Start+0x136>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a1c      	ldr	r2, [pc, #112]	; (8009db4 <HAL_TIM_PWM_Start+0x184>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d00e      	beq.n	8009d66 <HAL_TIM_PWM_Start+0x136>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a16      	ldr	r2, [pc, #88]	; (8009da8 <HAL_TIM_PWM_Start+0x178>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d009      	beq.n	8009d66 <HAL_TIM_PWM_Start+0x136>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a18      	ldr	r2, [pc, #96]	; (8009db8 <HAL_TIM_PWM_Start+0x188>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d004      	beq.n	8009d66 <HAL_TIM_PWM_Start+0x136>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a16      	ldr	r2, [pc, #88]	; (8009dbc <HAL_TIM_PWM_Start+0x18c>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d111      	bne.n	8009d8a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f003 0307 	and.w	r3, r3, #7
 8009d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b06      	cmp	r3, #6
 8009d76:	d010      	beq.n	8009d9a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 0201 	orr.w	r2, r2, #1
 8009d86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d88:	e007      	b.n	8009d9a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f042 0201 	orr.w	r2, r2, #1
 8009d98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	40010000 	.word	0x40010000
 8009da8:	40010400 	.word	0x40010400
 8009dac:	40000400 	.word	0x40000400
 8009db0:	40000800 	.word	0x40000800
 8009db4:	40000c00 	.word	0x40000c00
 8009db8:	40014000 	.word	0x40014000
 8009dbc:	40001800 	.word	0x40001800

08009dc0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	6839      	ldr	r1, [r7, #0]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f001 f8b4 	bl	800af40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a2e      	ldr	r2, [pc, #184]	; (8009e98 <HAL_TIM_PWM_Stop+0xd8>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d004      	beq.n	8009dec <HAL_TIM_PWM_Stop+0x2c>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a2d      	ldr	r2, [pc, #180]	; (8009e9c <HAL_TIM_PWM_Stop+0xdc>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d101      	bne.n	8009df0 <HAL_TIM_PWM_Stop+0x30>
 8009dec:	2301      	movs	r3, #1
 8009dee:	e000      	b.n	8009df2 <HAL_TIM_PWM_Stop+0x32>
 8009df0:	2300      	movs	r3, #0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d017      	beq.n	8009e26 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	6a1a      	ldr	r2, [r3, #32]
 8009dfc:	f241 1311 	movw	r3, #4369	; 0x1111
 8009e00:	4013      	ands	r3, r2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10f      	bne.n	8009e26 <HAL_TIM_PWM_Stop+0x66>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6a1a      	ldr	r2, [r3, #32]
 8009e0c:	f240 4344 	movw	r3, #1092	; 0x444
 8009e10:	4013      	ands	r3, r2
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d107      	bne.n	8009e26 <HAL_TIM_PWM_Stop+0x66>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6a1a      	ldr	r2, [r3, #32]
 8009e2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009e30:	4013      	ands	r3, r2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10f      	bne.n	8009e56 <HAL_TIM_PWM_Stop+0x96>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6a1a      	ldr	r2, [r3, #32]
 8009e3c:	f240 4344 	movw	r3, #1092	; 0x444
 8009e40:	4013      	ands	r3, r2
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d107      	bne.n	8009e56 <HAL_TIM_PWM_Stop+0x96>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 0201 	bic.w	r2, r2, #1
 8009e54:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d104      	bne.n	8009e66 <HAL_TIM_PWM_Stop+0xa6>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e64:	e013      	b.n	8009e8e <HAL_TIM_PWM_Stop+0xce>
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b04      	cmp	r3, #4
 8009e6a:	d104      	bne.n	8009e76 <HAL_TIM_PWM_Stop+0xb6>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e74:	e00b      	b.n	8009e8e <HAL_TIM_PWM_Stop+0xce>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b08      	cmp	r3, #8
 8009e7a:	d104      	bne.n	8009e86 <HAL_TIM_PWM_Stop+0xc6>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e84:	e003      	b.n	8009e8e <HAL_TIM_PWM_Stop+0xce>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	40010000 	.word	0x40010000
 8009e9c:	40010400 	.word	0x40010400

08009ea0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d109      	bne.n	8009ecc <HAL_TIM_PWM_Start_DMA+0x2c>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	bf0c      	ite	eq
 8009ec4:	2301      	moveq	r3, #1
 8009ec6:	2300      	movne	r3, #0
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	e022      	b.n	8009f12 <HAL_TIM_PWM_Start_DMA+0x72>
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2b04      	cmp	r3, #4
 8009ed0:	d109      	bne.n	8009ee6 <HAL_TIM_PWM_Start_DMA+0x46>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	bf0c      	ite	eq
 8009ede:	2301      	moveq	r3, #1
 8009ee0:	2300      	movne	r3, #0
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	e015      	b.n	8009f12 <HAL_TIM_PWM_Start_DMA+0x72>
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2b08      	cmp	r3, #8
 8009eea:	d109      	bne.n	8009f00 <HAL_TIM_PWM_Start_DMA+0x60>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	bf0c      	ite	eq
 8009ef8:	2301      	moveq	r3, #1
 8009efa:	2300      	movne	r3, #0
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	e008      	b.n	8009f12 <HAL_TIM_PWM_Start_DMA+0x72>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	bf0c      	ite	eq
 8009f0c:	2301      	moveq	r3, #1
 8009f0e:	2300      	movne	r3, #0
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8009f16:	2302      	movs	r3, #2
 8009f18:	e171      	b.n	800a1fe <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d109      	bne.n	8009f34 <HAL_TIM_PWM_Start_DMA+0x94>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	bf0c      	ite	eq
 8009f2c:	2301      	moveq	r3, #1
 8009f2e:	2300      	movne	r3, #0
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	e022      	b.n	8009f7a <HAL_TIM_PWM_Start_DMA+0xda>
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2b04      	cmp	r3, #4
 8009f38:	d109      	bne.n	8009f4e <HAL_TIM_PWM_Start_DMA+0xae>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	bf0c      	ite	eq
 8009f46:	2301      	moveq	r3, #1
 8009f48:	2300      	movne	r3, #0
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	e015      	b.n	8009f7a <HAL_TIM_PWM_Start_DMA+0xda>
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	2b08      	cmp	r3, #8
 8009f52:	d109      	bne.n	8009f68 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	bf0c      	ite	eq
 8009f60:	2301      	moveq	r3, #1
 8009f62:	2300      	movne	r3, #0
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	e008      	b.n	8009f7a <HAL_TIM_PWM_Start_DMA+0xda>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	bf0c      	ite	eq
 8009f74:	2301      	moveq	r3, #1
 8009f76:	2300      	movne	r3, #0
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d024      	beq.n	8009fc8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d104      	bne.n	8009f8e <HAL_TIM_PWM_Start_DMA+0xee>
 8009f84:	887b      	ldrh	r3, [r7, #2]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e137      	b.n	800a1fe <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d104      	bne.n	8009f9e <HAL_TIM_PWM_Start_DMA+0xfe>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2202      	movs	r2, #2
 8009f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f9c:	e016      	b.n	8009fcc <HAL_TIM_PWM_Start_DMA+0x12c>
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2b04      	cmp	r3, #4
 8009fa2:	d104      	bne.n	8009fae <HAL_TIM_PWM_Start_DMA+0x10e>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fac:	e00e      	b.n	8009fcc <HAL_TIM_PWM_Start_DMA+0x12c>
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	2b08      	cmp	r3, #8
 8009fb2:	d104      	bne.n	8009fbe <HAL_TIM_PWM_Start_DMA+0x11e>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fbc:	e006      	b.n	8009fcc <HAL_TIM_PWM_Start_DMA+0x12c>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fc6:	e001      	b.n	8009fcc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e118      	b.n	800a1fe <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2b0c      	cmp	r3, #12
 8009fd0:	f200 80ae 	bhi.w	800a130 <HAL_TIM_PWM_Start_DMA+0x290>
 8009fd4:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <HAL_TIM_PWM_Start_DMA+0x13c>)
 8009fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fda:	bf00      	nop
 8009fdc:	0800a011 	.word	0x0800a011
 8009fe0:	0800a131 	.word	0x0800a131
 8009fe4:	0800a131 	.word	0x0800a131
 8009fe8:	0800a131 	.word	0x0800a131
 8009fec:	0800a059 	.word	0x0800a059
 8009ff0:	0800a131 	.word	0x0800a131
 8009ff4:	0800a131 	.word	0x0800a131
 8009ff8:	0800a131 	.word	0x0800a131
 8009ffc:	0800a0a1 	.word	0x0800a0a1
 800a000:	0800a131 	.word	0x0800a131
 800a004:	0800a131 	.word	0x0800a131
 800a008:	0800a131 	.word	0x0800a131
 800a00c:	0800a0e9 	.word	0x0800a0e9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a014:	4a7c      	ldr	r2, [pc, #496]	; (800a208 <HAL_TIM_PWM_Start_DMA+0x368>)
 800a016:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01c:	4a7b      	ldr	r2, [pc, #492]	; (800a20c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800a01e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	4a7a      	ldr	r2, [pc, #488]	; (800a210 <HAL_TIM_PWM_Start_DMA+0x370>)
 800a026:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a02c:	6879      	ldr	r1, [r7, #4]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3334      	adds	r3, #52	; 0x34
 800a034:	461a      	mov	r2, r3
 800a036:	887b      	ldrh	r3, [r7, #2]
 800a038:	f7fb fcf2 	bl	8005a20 <HAL_DMA_Start_IT>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e0db      	b.n	800a1fe <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68da      	ldr	r2, [r3, #12]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a054:	60da      	str	r2, [r3, #12]
      break;
 800a056:	e06e      	b.n	800a136 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05c:	4a6a      	ldr	r2, [pc, #424]	; (800a208 <HAL_TIM_PWM_Start_DMA+0x368>)
 800a05e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a064:	4a69      	ldr	r2, [pc, #420]	; (800a20c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800a066:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06c:	4a68      	ldr	r2, [pc, #416]	; (800a210 <HAL_TIM_PWM_Start_DMA+0x370>)
 800a06e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a074:	6879      	ldr	r1, [r7, #4]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3338      	adds	r3, #56	; 0x38
 800a07c:	461a      	mov	r2, r3
 800a07e:	887b      	ldrh	r3, [r7, #2]
 800a080:	f7fb fcce 	bl	8005a20 <HAL_DMA_Start_IT>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e0b7      	b.n	800a1fe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68da      	ldr	r2, [r3, #12]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a09c:	60da      	str	r2, [r3, #12]
      break;
 800a09e:	e04a      	b.n	800a136 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a4:	4a58      	ldr	r2, [pc, #352]	; (800a208 <HAL_TIM_PWM_Start_DMA+0x368>)
 800a0a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ac:	4a57      	ldr	r2, [pc, #348]	; (800a20c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800a0ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	4a56      	ldr	r2, [pc, #344]	; (800a210 <HAL_TIM_PWM_Start_DMA+0x370>)
 800a0b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a0bc:	6879      	ldr	r1, [r7, #4]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	333c      	adds	r3, #60	; 0x3c
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	887b      	ldrh	r3, [r7, #2]
 800a0c8:	f7fb fcaa 	bl	8005a20 <HAL_DMA_Start_IT>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e093      	b.n	800a1fe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68da      	ldr	r2, [r3, #12]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0e4:	60da      	str	r2, [r3, #12]
      break;
 800a0e6:	e026      	b.n	800a136 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ec:	4a46      	ldr	r2, [pc, #280]	; (800a208 <HAL_TIM_PWM_Start_DMA+0x368>)
 800a0ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f4:	4a45      	ldr	r2, [pc, #276]	; (800a20c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800a0f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fc:	4a44      	ldr	r2, [pc, #272]	; (800a210 <HAL_TIM_PWM_Start_DMA+0x370>)
 800a0fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a104:	6879      	ldr	r1, [r7, #4]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3340      	adds	r3, #64	; 0x40
 800a10c:	461a      	mov	r2, r3
 800a10e:	887b      	ldrh	r3, [r7, #2]
 800a110:	f7fb fc86 	bl	8005a20 <HAL_DMA_Start_IT>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e06f      	b.n	800a1fe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68da      	ldr	r2, [r3, #12]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a12c:	60da      	str	r2, [r3, #12]
      break;
 800a12e:	e002      	b.n	800a136 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	75fb      	strb	r3, [r7, #23]
      break;
 800a134:	bf00      	nop
  }

  if (status == HAL_OK)
 800a136:	7dfb      	ldrb	r3, [r7, #23]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d15f      	bne.n	800a1fc <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2201      	movs	r2, #1
 800a142:	68b9      	ldr	r1, [r7, #8]
 800a144:	4618      	mov	r0, r3
 800a146:	f000 fefb 	bl	800af40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a31      	ldr	r2, [pc, #196]	; (800a214 <HAL_TIM_PWM_Start_DMA+0x374>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d004      	beq.n	800a15e <HAL_TIM_PWM_Start_DMA+0x2be>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a2f      	ldr	r2, [pc, #188]	; (800a218 <HAL_TIM_PWM_Start_DMA+0x378>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d101      	bne.n	800a162 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800a15e:	2301      	movs	r3, #1
 800a160:	e000      	b.n	800a164 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800a162:	2300      	movs	r3, #0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d007      	beq.n	800a178 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a176:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a25      	ldr	r2, [pc, #148]	; (800a214 <HAL_TIM_PWM_Start_DMA+0x374>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d022      	beq.n	800a1c8 <HAL_TIM_PWM_Start_DMA+0x328>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a18a:	d01d      	beq.n	800a1c8 <HAL_TIM_PWM_Start_DMA+0x328>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a22      	ldr	r2, [pc, #136]	; (800a21c <HAL_TIM_PWM_Start_DMA+0x37c>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d018      	beq.n	800a1c8 <HAL_TIM_PWM_Start_DMA+0x328>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a21      	ldr	r2, [pc, #132]	; (800a220 <HAL_TIM_PWM_Start_DMA+0x380>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d013      	beq.n	800a1c8 <HAL_TIM_PWM_Start_DMA+0x328>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a1f      	ldr	r2, [pc, #124]	; (800a224 <HAL_TIM_PWM_Start_DMA+0x384>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d00e      	beq.n	800a1c8 <HAL_TIM_PWM_Start_DMA+0x328>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a1a      	ldr	r2, [pc, #104]	; (800a218 <HAL_TIM_PWM_Start_DMA+0x378>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d009      	beq.n	800a1c8 <HAL_TIM_PWM_Start_DMA+0x328>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a1b      	ldr	r2, [pc, #108]	; (800a228 <HAL_TIM_PWM_Start_DMA+0x388>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d004      	beq.n	800a1c8 <HAL_TIM_PWM_Start_DMA+0x328>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a1a      	ldr	r2, [pc, #104]	; (800a22c <HAL_TIM_PWM_Start_DMA+0x38c>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d111      	bne.n	800a1ec <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f003 0307 	and.w	r3, r3, #7
 800a1d2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	2b06      	cmp	r3, #6
 800a1d8:	d010      	beq.n	800a1fc <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f042 0201 	orr.w	r2, r2, #1
 800a1e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ea:	e007      	b.n	800a1fc <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f042 0201 	orr.w	r2, r2, #1
 800a1fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a1fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	0800a85d 	.word	0x0800a85d
 800a20c:	0800a905 	.word	0x0800a905
 800a210:	0800a7cb 	.word	0x0800a7cb
 800a214:	40010000 	.word	0x40010000
 800a218:	40010400 	.word	0x40010400
 800a21c:	40000400 	.word	0x40000400
 800a220:	40000800 	.word	0x40000800
 800a224:	40000c00 	.word	0x40000c00
 800a228:	40014000 	.word	0x40014000
 800a22c:	40001800 	.word	0x40001800

0800a230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	f003 0302 	and.w	r3, r3, #2
 800a242:	2b02      	cmp	r3, #2
 800a244:	d122      	bne.n	800a28c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f003 0302 	and.w	r3, r3, #2
 800a250:	2b02      	cmp	r3, #2
 800a252:	d11b      	bne.n	800a28c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f06f 0202 	mvn.w	r2, #2
 800a25c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	f003 0303 	and.w	r3, r3, #3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fa77 	bl	800a766 <HAL_TIM_IC_CaptureCallback>
 800a278:	e005      	b.n	800a286 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 fa69 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fa7a 	bl	800a77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	f003 0304 	and.w	r3, r3, #4
 800a296:	2b04      	cmp	r3, #4
 800a298:	d122      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	d11b      	bne.n	800a2e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f06f 0204 	mvn.w	r2, #4
 800a2b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d003      	beq.n	800a2ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fa4d 	bl	800a766 <HAL_TIM_IC_CaptureCallback>
 800a2cc:	e005      	b.n	800a2da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fa3f 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fa50 	bl	800a77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	f003 0308 	and.w	r3, r3, #8
 800a2ea:	2b08      	cmp	r3, #8
 800a2ec:	d122      	bne.n	800a334 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f003 0308 	and.w	r3, r3, #8
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d11b      	bne.n	800a334 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f06f 0208 	mvn.w	r2, #8
 800a304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2204      	movs	r2, #4
 800a30a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f003 0303 	and.w	r3, r3, #3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fa23 	bl	800a766 <HAL_TIM_IC_CaptureCallback>
 800a320:	e005      	b.n	800a32e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fa15 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fa26 	bl	800a77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	f003 0310 	and.w	r3, r3, #16
 800a33e:	2b10      	cmp	r3, #16
 800a340:	d122      	bne.n	800a388 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f003 0310 	and.w	r3, r3, #16
 800a34c:	2b10      	cmp	r3, #16
 800a34e:	d11b      	bne.n	800a388 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f06f 0210 	mvn.w	r2, #16
 800a358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2208      	movs	r2, #8
 800a35e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	69db      	ldr	r3, [r3, #28]
 800a366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f9f9 	bl	800a766 <HAL_TIM_IC_CaptureCallback>
 800a374:	e005      	b.n	800a382 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f9eb 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f9fc 	bl	800a77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	2b01      	cmp	r3, #1
 800a394:	d10e      	bne.n	800a3b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	f003 0301 	and.w	r3, r3, #1
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d107      	bne.n	800a3b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f06f 0201 	mvn.w	r2, #1
 800a3ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7f8 fe04 	bl	8002fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3be:	2b80      	cmp	r3, #128	; 0x80
 800a3c0:	d10e      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3cc:	2b80      	cmp	r3, #128	; 0x80
 800a3ce:	d107      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f001 f946 	bl	800b66c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ea:	2b40      	cmp	r3, #64	; 0x40
 800a3ec:	d10e      	bne.n	800a40c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f8:	2b40      	cmp	r3, #64	; 0x40
 800a3fa:	d107      	bne.n	800a40c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f9cb 	bl	800a7a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	2b20      	cmp	r3, #32
 800a418:	d10e      	bne.n	800a438 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	f003 0320 	and.w	r3, r3, #32
 800a424:	2b20      	cmp	r3, #32
 800a426:	d107      	bne.n	800a438 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f06f 0220 	mvn.w	r2, #32
 800a430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f001 f910 	bl	800b658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a456:	2b01      	cmp	r3, #1
 800a458:	d101      	bne.n	800a45e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a45a:	2302      	movs	r3, #2
 800a45c:	e0ae      	b.n	800a5bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b0c      	cmp	r3, #12
 800a46a:	f200 809f 	bhi.w	800a5ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a46e:	a201      	add	r2, pc, #4	; (adr r2, 800a474 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a474:	0800a4a9 	.word	0x0800a4a9
 800a478:	0800a5ad 	.word	0x0800a5ad
 800a47c:	0800a5ad 	.word	0x0800a5ad
 800a480:	0800a5ad 	.word	0x0800a5ad
 800a484:	0800a4e9 	.word	0x0800a4e9
 800a488:	0800a5ad 	.word	0x0800a5ad
 800a48c:	0800a5ad 	.word	0x0800a5ad
 800a490:	0800a5ad 	.word	0x0800a5ad
 800a494:	0800a52b 	.word	0x0800a52b
 800a498:	0800a5ad 	.word	0x0800a5ad
 800a49c:	0800a5ad 	.word	0x0800a5ad
 800a4a0:	0800a5ad 	.word	0x0800a5ad
 800a4a4:	0800a56b 	.word	0x0800a56b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68b9      	ldr	r1, [r7, #8]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 fafc 	bl	800aaac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	699a      	ldr	r2, [r3, #24]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f042 0208 	orr.w	r2, r2, #8
 800a4c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	699a      	ldr	r2, [r3, #24]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f022 0204 	bic.w	r2, r2, #4
 800a4d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6999      	ldr	r1, [r3, #24]
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	691a      	ldr	r2, [r3, #16]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	619a      	str	r2, [r3, #24]
      break;
 800a4e6:	e064      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68b9      	ldr	r1, [r7, #8]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fb4c 	bl	800ab8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	699a      	ldr	r2, [r3, #24]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	699a      	ldr	r2, [r3, #24]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6999      	ldr	r1, [r3, #24]
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	021a      	lsls	r2, r3, #8
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	430a      	orrs	r2, r1
 800a526:	619a      	str	r2, [r3, #24]
      break;
 800a528:	e043      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68b9      	ldr	r1, [r7, #8]
 800a530:	4618      	mov	r0, r3
 800a532:	f000 fba1 	bl	800ac78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	69da      	ldr	r2, [r3, #28]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f042 0208 	orr.w	r2, r2, #8
 800a544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	69da      	ldr	r2, [r3, #28]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0204 	bic.w	r2, r2, #4
 800a554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	69d9      	ldr	r1, [r3, #28]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	691a      	ldr	r2, [r3, #16]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	61da      	str	r2, [r3, #28]
      break;
 800a568:	e023      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68b9      	ldr	r1, [r7, #8]
 800a570:	4618      	mov	r0, r3
 800a572:	f000 fbf5 	bl	800ad60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	69da      	ldr	r2, [r3, #28]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	69da      	ldr	r2, [r3, #28]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	69d9      	ldr	r1, [r3, #28]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	021a      	lsls	r2, r3, #8
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	61da      	str	r2, [r3, #28]
      break;
 800a5aa:	e002      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a5b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d101      	bne.n	800a5e0 <HAL_TIM_ConfigClockSource+0x1c>
 800a5dc:	2302      	movs	r3, #2
 800a5de:	e0b4      	b.n	800a74a <HAL_TIM_ConfigClockSource+0x186>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a618:	d03e      	beq.n	800a698 <HAL_TIM_ConfigClockSource+0xd4>
 800a61a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a61e:	f200 8087 	bhi.w	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a626:	f000 8086 	beq.w	800a736 <HAL_TIM_ConfigClockSource+0x172>
 800a62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a62e:	d87f      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a630:	2b70      	cmp	r3, #112	; 0x70
 800a632:	d01a      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0xa6>
 800a634:	2b70      	cmp	r3, #112	; 0x70
 800a636:	d87b      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a638:	2b60      	cmp	r3, #96	; 0x60
 800a63a:	d050      	beq.n	800a6de <HAL_TIM_ConfigClockSource+0x11a>
 800a63c:	2b60      	cmp	r3, #96	; 0x60
 800a63e:	d877      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a640:	2b50      	cmp	r3, #80	; 0x50
 800a642:	d03c      	beq.n	800a6be <HAL_TIM_ConfigClockSource+0xfa>
 800a644:	2b50      	cmp	r3, #80	; 0x50
 800a646:	d873      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a648:	2b40      	cmp	r3, #64	; 0x40
 800a64a:	d058      	beq.n	800a6fe <HAL_TIM_ConfigClockSource+0x13a>
 800a64c:	2b40      	cmp	r3, #64	; 0x40
 800a64e:	d86f      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a650:	2b30      	cmp	r3, #48	; 0x30
 800a652:	d064      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x15a>
 800a654:	2b30      	cmp	r3, #48	; 0x30
 800a656:	d86b      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a658:	2b20      	cmp	r3, #32
 800a65a:	d060      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x15a>
 800a65c:	2b20      	cmp	r3, #32
 800a65e:	d867      	bhi.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
 800a660:	2b00      	cmp	r3, #0
 800a662:	d05c      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x15a>
 800a664:	2b10      	cmp	r3, #16
 800a666:	d05a      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x15a>
 800a668:	e062      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6818      	ldr	r0, [r3, #0]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	6899      	ldr	r1, [r3, #8]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	f000 fc41 	bl	800af00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a68c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	609a      	str	r2, [r3, #8]
      break;
 800a696:	e04f      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6818      	ldr	r0, [r3, #0]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	6899      	ldr	r1, [r3, #8]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f000 fc2a 	bl	800af00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689a      	ldr	r2, [r3, #8]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6ba:	609a      	str	r2, [r3, #8]
      break;
 800a6bc:	e03c      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6818      	ldr	r0, [r3, #0]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	6859      	ldr	r1, [r3, #4]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f000 fb9e 	bl	800ae0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2150      	movs	r1, #80	; 0x50
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 fbf7 	bl	800aeca <TIM_ITRx_SetConfig>
      break;
 800a6dc:	e02c      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6818      	ldr	r0, [r3, #0]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	6859      	ldr	r1, [r3, #4]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	f000 fbbd 	bl	800ae6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2160      	movs	r1, #96	; 0x60
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fbe7 	bl	800aeca <TIM_ITRx_SetConfig>
      break;
 800a6fc:	e01c      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6818      	ldr	r0, [r3, #0]
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	6859      	ldr	r1, [r3, #4]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	461a      	mov	r2, r3
 800a70c:	f000 fb7e 	bl	800ae0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2140      	movs	r1, #64	; 0x40
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fbd7 	bl	800aeca <TIM_ITRx_SetConfig>
      break;
 800a71c:	e00c      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4619      	mov	r1, r3
 800a728:	4610      	mov	r0, r2
 800a72a:	f000 fbce 	bl	800aeca <TIM_ITRx_SetConfig>
      break;
 800a72e:	e003      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	73fb      	strb	r3, [r7, #15]
      break;
 800a734:	e000      	b.n	800a738 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a748:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a752:	b480      	push	{r7}
 800a754:	b083      	sub	sp, #12
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a75a:	bf00      	nop
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a766:	b480      	push	{r7}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a76e:	bf00      	nop
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a782:	bf00      	nop
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr

0800a78e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a78e:	b480      	push	{r7}
 800a790:	b083      	sub	sp, #12
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a796:	bf00      	nop
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b083      	sub	sp, #12
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7aa:	bf00      	nop
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b083      	sub	sp, #12
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a7be:	bf00      	nop
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d107      	bne.n	800a7f2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7f0:	e02a      	b.n	800a848 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d107      	bne.n	800a80c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2202      	movs	r2, #2
 800a800:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a80a:	e01d      	b.n	800a848 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	429a      	cmp	r2, r3
 800a814:	d107      	bne.n	800a826 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2204      	movs	r2, #4
 800a81a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a824:	e010      	b.n	800a848 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d107      	bne.n	800a840 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2208      	movs	r2, #8
 800a834:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a83e:	e003      	b.n	800a848 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f7ff ffb4 	bl	800a7b6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	771a      	strb	r2, [r3, #28]
}
 800a854:	bf00      	nop
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a868:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	429a      	cmp	r2, r3
 800a872:	d10b      	bne.n	800a88c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2201      	movs	r2, #1
 800a878:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d136      	bne.n	800a8f0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2201      	movs	r2, #1
 800a886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a88a:	e031      	b.n	800a8f0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	429a      	cmp	r2, r3
 800a894:	d10b      	bne.n	800a8ae <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2202      	movs	r2, #2
 800a89a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	69db      	ldr	r3, [r3, #28]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d125      	bne.n	800a8f0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8ac:	e020      	b.n	800a8f0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d10b      	bne.n	800a8d0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2204      	movs	r2, #4
 800a8bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	69db      	ldr	r3, [r3, #28]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d114      	bne.n	800a8f0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8ce:	e00f      	b.n	800a8f0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d10a      	bne.n	800a8f0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2208      	movs	r2, #8
 800a8de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d103      	bne.n	800a8f0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f7ff ff42 	bl	800a77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	771a      	strb	r2, [r3, #28]
}
 800a8fc:	bf00      	nop
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a910:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d103      	bne.n	800a924 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2201      	movs	r2, #1
 800a920:	771a      	strb	r2, [r3, #28]
 800a922:	e019      	b.n	800a958 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d103      	bne.n	800a936 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2202      	movs	r2, #2
 800a932:	771a      	strb	r2, [r3, #28]
 800a934:	e010      	b.n	800a958 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d103      	bne.n	800a948 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2204      	movs	r2, #4
 800a944:	771a      	strb	r2, [r3, #28]
 800a946:	e007      	b.n	800a958 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d102      	bne.n	800a958 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2208      	movs	r2, #8
 800a956:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f7ff ff18 	bl	800a78e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	771a      	strb	r2, [r3, #28]
}
 800a964:	bf00      	nop
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a40      	ldr	r2, [pc, #256]	; (800aa80 <TIM_Base_SetConfig+0x114>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d013      	beq.n	800a9ac <TIM_Base_SetConfig+0x40>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a98a:	d00f      	beq.n	800a9ac <TIM_Base_SetConfig+0x40>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a3d      	ldr	r2, [pc, #244]	; (800aa84 <TIM_Base_SetConfig+0x118>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d00b      	beq.n	800a9ac <TIM_Base_SetConfig+0x40>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a3c      	ldr	r2, [pc, #240]	; (800aa88 <TIM_Base_SetConfig+0x11c>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d007      	beq.n	800a9ac <TIM_Base_SetConfig+0x40>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a3b      	ldr	r2, [pc, #236]	; (800aa8c <TIM_Base_SetConfig+0x120>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d003      	beq.n	800a9ac <TIM_Base_SetConfig+0x40>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a3a      	ldr	r2, [pc, #232]	; (800aa90 <TIM_Base_SetConfig+0x124>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d108      	bne.n	800a9be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a2f      	ldr	r2, [pc, #188]	; (800aa80 <TIM_Base_SetConfig+0x114>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d02b      	beq.n	800aa1e <TIM_Base_SetConfig+0xb2>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9cc:	d027      	beq.n	800aa1e <TIM_Base_SetConfig+0xb2>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a2c      	ldr	r2, [pc, #176]	; (800aa84 <TIM_Base_SetConfig+0x118>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d023      	beq.n	800aa1e <TIM_Base_SetConfig+0xb2>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a2b      	ldr	r2, [pc, #172]	; (800aa88 <TIM_Base_SetConfig+0x11c>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d01f      	beq.n	800aa1e <TIM_Base_SetConfig+0xb2>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a2a      	ldr	r2, [pc, #168]	; (800aa8c <TIM_Base_SetConfig+0x120>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d01b      	beq.n	800aa1e <TIM_Base_SetConfig+0xb2>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a29      	ldr	r2, [pc, #164]	; (800aa90 <TIM_Base_SetConfig+0x124>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d017      	beq.n	800aa1e <TIM_Base_SetConfig+0xb2>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a28      	ldr	r2, [pc, #160]	; (800aa94 <TIM_Base_SetConfig+0x128>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d013      	beq.n	800aa1e <TIM_Base_SetConfig+0xb2>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a27      	ldr	r2, [pc, #156]	; (800aa98 <TIM_Base_SetConfig+0x12c>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d00f      	beq.n	800aa1e <TIM_Base_SetConfig+0xb2>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a26      	ldr	r2, [pc, #152]	; (800aa9c <TIM_Base_SetConfig+0x130>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d00b      	beq.n	800aa1e <TIM_Base_SetConfig+0xb2>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a25      	ldr	r2, [pc, #148]	; (800aaa0 <TIM_Base_SetConfig+0x134>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d007      	beq.n	800aa1e <TIM_Base_SetConfig+0xb2>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a24      	ldr	r2, [pc, #144]	; (800aaa4 <TIM_Base_SetConfig+0x138>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d003      	beq.n	800aa1e <TIM_Base_SetConfig+0xb2>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a23      	ldr	r2, [pc, #140]	; (800aaa8 <TIM_Base_SetConfig+0x13c>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d108      	bne.n	800aa30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	689a      	ldr	r2, [r3, #8]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a0a      	ldr	r2, [pc, #40]	; (800aa80 <TIM_Base_SetConfig+0x114>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d003      	beq.n	800aa64 <TIM_Base_SetConfig+0xf8>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a0c      	ldr	r2, [pc, #48]	; (800aa90 <TIM_Base_SetConfig+0x124>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d103      	bne.n	800aa6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	691a      	ldr	r2, [r3, #16]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	615a      	str	r2, [r3, #20]
}
 800aa72:	bf00      	nop
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	40010000 	.word	0x40010000
 800aa84:	40000400 	.word	0x40000400
 800aa88:	40000800 	.word	0x40000800
 800aa8c:	40000c00 	.word	0x40000c00
 800aa90:	40010400 	.word	0x40010400
 800aa94:	40014000 	.word	0x40014000
 800aa98:	40014400 	.word	0x40014400
 800aa9c:	40014800 	.word	0x40014800
 800aaa0:	40001800 	.word	0x40001800
 800aaa4:	40001c00 	.word	0x40001c00
 800aaa8:	40002000 	.word	0x40002000

0800aaac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b087      	sub	sp, #28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	f023 0201 	bic.w	r2, r3, #1
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a1b      	ldr	r3, [r3, #32]
 800aac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f023 0303 	bic.w	r3, r3, #3
 800aae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f023 0302 	bic.w	r3, r3, #2
 800aaf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a20      	ldr	r2, [pc, #128]	; (800ab84 <TIM_OC1_SetConfig+0xd8>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d003      	beq.n	800ab10 <TIM_OC1_SetConfig+0x64>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a1f      	ldr	r2, [pc, #124]	; (800ab88 <TIM_OC1_SetConfig+0xdc>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d10c      	bne.n	800ab2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	f023 0308 	bic.w	r3, r3, #8
 800ab16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	697a      	ldr	r2, [r7, #20]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	f023 0304 	bic.w	r3, r3, #4
 800ab28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a15      	ldr	r2, [pc, #84]	; (800ab84 <TIM_OC1_SetConfig+0xd8>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d003      	beq.n	800ab3a <TIM_OC1_SetConfig+0x8e>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a14      	ldr	r2, [pc, #80]	; (800ab88 <TIM_OC1_SetConfig+0xdc>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d111      	bne.n	800ab5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	695b      	ldr	r3, [r3, #20]
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	693a      	ldr	r2, [r7, #16]
 800ab62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	621a      	str	r2, [r3, #32]
}
 800ab78:	bf00      	nop
 800ab7a:	371c      	adds	r7, #28
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	40010000 	.word	0x40010000
 800ab88:	40010400 	.word	0x40010400

0800ab8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	f023 0210 	bic.w	r2, r3, #16
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	021b      	lsls	r3, r3, #8
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	4313      	orrs	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	f023 0320 	bic.w	r3, r3, #32
 800abd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	011b      	lsls	r3, r3, #4
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a22      	ldr	r2, [pc, #136]	; (800ac70 <TIM_OC2_SetConfig+0xe4>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d003      	beq.n	800abf4 <TIM_OC2_SetConfig+0x68>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a21      	ldr	r2, [pc, #132]	; (800ac74 <TIM_OC2_SetConfig+0xe8>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d10d      	bne.n	800ac10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	011b      	lsls	r3, r3, #4
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a17      	ldr	r2, [pc, #92]	; (800ac70 <TIM_OC2_SetConfig+0xe4>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d003      	beq.n	800ac20 <TIM_OC2_SetConfig+0x94>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4a16      	ldr	r2, [pc, #88]	; (800ac74 <TIM_OC2_SetConfig+0xe8>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d113      	bne.n	800ac48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	693a      	ldr	r2, [r7, #16]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	693a      	ldr	r2, [r7, #16]
 800ac4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	621a      	str	r2, [r3, #32]
}
 800ac62:	bf00      	nop
 800ac64:	371c      	adds	r7, #28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	40010000 	.word	0x40010000
 800ac74:	40010400 	.word	0x40010400

0800ac78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a1b      	ldr	r3, [r3, #32]
 800ac86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a1b      	ldr	r3, [r3, #32]
 800ac92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	69db      	ldr	r3, [r3, #28]
 800ac9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f023 0303 	bic.w	r3, r3, #3
 800acae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	021b      	lsls	r3, r3, #8
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	4313      	orrs	r3, r2
 800accc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a21      	ldr	r2, [pc, #132]	; (800ad58 <TIM_OC3_SetConfig+0xe0>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d003      	beq.n	800acde <TIM_OC3_SetConfig+0x66>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a20      	ldr	r2, [pc, #128]	; (800ad5c <TIM_OC3_SetConfig+0xe4>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d10d      	bne.n	800acfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ace4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	021b      	lsls	r3, r3, #8
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	4313      	orrs	r3, r2
 800acf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a16      	ldr	r2, [pc, #88]	; (800ad58 <TIM_OC3_SetConfig+0xe0>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d003      	beq.n	800ad0a <TIM_OC3_SetConfig+0x92>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a15      	ldr	r2, [pc, #84]	; (800ad5c <TIM_OC3_SetConfig+0xe4>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d113      	bne.n	800ad32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	011b      	lsls	r3, r3, #4
 800ad20:	693a      	ldr	r2, [r7, #16]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	011b      	lsls	r3, r3, #4
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	693a      	ldr	r2, [r7, #16]
 800ad36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	685a      	ldr	r2, [r3, #4]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	621a      	str	r2, [r3, #32]
}
 800ad4c:	bf00      	nop
 800ad4e:	371c      	adds	r7, #28
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr
 800ad58:	40010000 	.word	0x40010000
 800ad5c:	40010400 	.word	0x40010400

0800ad60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b087      	sub	sp, #28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	69db      	ldr	r3, [r3, #28]
 800ad86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	021b      	lsls	r3, r3, #8
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800adaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	031b      	lsls	r3, r3, #12
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4a12      	ldr	r2, [pc, #72]	; (800ae04 <TIM_OC4_SetConfig+0xa4>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d003      	beq.n	800adc8 <TIM_OC4_SetConfig+0x68>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a11      	ldr	r2, [pc, #68]	; (800ae08 <TIM_OC4_SetConfig+0xa8>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d109      	bne.n	800addc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	695b      	ldr	r3, [r3, #20]
 800add4:	019b      	lsls	r3, r3, #6
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	4313      	orrs	r3, r2
 800adda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	621a      	str	r2, [r3, #32]
}
 800adf6:	bf00      	nop
 800adf8:	371c      	adds	r7, #28
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	40010000 	.word	0x40010000
 800ae08:	40010400 	.word	0x40010400

0800ae0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	f023 0201 	bic.w	r2, r3, #1
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	011b      	lsls	r3, r3, #4
 800ae3c:	693a      	ldr	r2, [r7, #16]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	f023 030a 	bic.w	r3, r3, #10
 800ae48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae4a:	697a      	ldr	r2, [r7, #20]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	621a      	str	r2, [r3, #32]
}
 800ae5e:	bf00      	nop
 800ae60:	371c      	adds	r7, #28
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b087      	sub	sp, #28
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	60f8      	str	r0, [r7, #12]
 800ae72:	60b9      	str	r1, [r7, #8]
 800ae74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	f023 0210 	bic.w	r2, r3, #16
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	699b      	ldr	r3, [r3, #24]
 800ae86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6a1b      	ldr	r3, [r3, #32]
 800ae8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	031b      	lsls	r3, r3, #12
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aea6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	011b      	lsls	r3, r3, #4
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	621a      	str	r2, [r3, #32]
}
 800aebe:	bf00      	nop
 800aec0:	371c      	adds	r7, #28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aeca:	b480      	push	{r7}
 800aecc:	b085      	sub	sp, #20
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	f043 0307 	orr.w	r3, r3, #7
 800aeec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	609a      	str	r2, [r3, #8]
}
 800aef4:	bf00      	nop
 800aef6:	3714      	adds	r7, #20
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af00:	b480      	push	{r7}
 800af02:	b087      	sub	sp, #28
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
 800af0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	021a      	lsls	r2, r3, #8
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	431a      	orrs	r2, r3
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	4313      	orrs	r3, r2
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	697a      	ldr	r2, [r7, #20]
 800af32:	609a      	str	r2, [r3, #8]
}
 800af34:	bf00      	nop
 800af36:	371c      	adds	r7, #28
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af40:	b480      	push	{r7}
 800af42:	b087      	sub	sp, #28
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	f003 031f 	and.w	r3, r3, #31
 800af52:	2201      	movs	r2, #1
 800af54:	fa02 f303 	lsl.w	r3, r2, r3
 800af58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6a1a      	ldr	r2, [r3, #32]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	43db      	mvns	r3, r3
 800af62:	401a      	ands	r2, r3
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6a1a      	ldr	r2, [r3, #32]
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f003 031f 	and.w	r3, r3, #31
 800af72:	6879      	ldr	r1, [r7, #4]
 800af74:	fa01 f303 	lsl.w	r3, r1, r3
 800af78:	431a      	orrs	r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	621a      	str	r2, [r3, #32]
}
 800af7e:	bf00      	nop
 800af80:	371c      	adds	r7, #28
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
	...

0800af8c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d109      	bne.n	800afb0 <HAL_TIMEx_PWMN_Start+0x24>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	bf14      	ite	ne
 800afa8:	2301      	movne	r3, #1
 800afaa:	2300      	moveq	r3, #0
 800afac:	b2db      	uxtb	r3, r3
 800afae:	e022      	b.n	800aff6 <HAL_TIMEx_PWMN_Start+0x6a>
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	2b04      	cmp	r3, #4
 800afb4:	d109      	bne.n	800afca <HAL_TIMEx_PWMN_Start+0x3e>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	bf14      	ite	ne
 800afc2:	2301      	movne	r3, #1
 800afc4:	2300      	moveq	r3, #0
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	e015      	b.n	800aff6 <HAL_TIMEx_PWMN_Start+0x6a>
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	2b08      	cmp	r3, #8
 800afce:	d109      	bne.n	800afe4 <HAL_TIMEx_PWMN_Start+0x58>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	2b01      	cmp	r3, #1
 800afda:	bf14      	ite	ne
 800afdc:	2301      	movne	r3, #1
 800afde:	2300      	moveq	r3, #0
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	e008      	b.n	800aff6 <HAL_TIMEx_PWMN_Start+0x6a>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b01      	cmp	r3, #1
 800afee:	bf14      	ite	ne
 800aff0:	2301      	movne	r3, #1
 800aff2:	2300      	moveq	r3, #0
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	e06d      	b.n	800b0da <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d104      	bne.n	800b00e <HAL_TIMEx_PWMN_Start+0x82>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b00c:	e013      	b.n	800b036 <HAL_TIMEx_PWMN_Start+0xaa>
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2b04      	cmp	r3, #4
 800b012:	d104      	bne.n	800b01e <HAL_TIMEx_PWMN_Start+0x92>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2202      	movs	r2, #2
 800b018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b01c:	e00b      	b.n	800b036 <HAL_TIMEx_PWMN_Start+0xaa>
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b08      	cmp	r3, #8
 800b022:	d104      	bne.n	800b02e <HAL_TIMEx_PWMN_Start+0xa2>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2202      	movs	r2, #2
 800b028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b02c:	e003      	b.n	800b036 <HAL_TIMEx_PWMN_Start+0xaa>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2202      	movs	r2, #2
 800b032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2204      	movs	r2, #4
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 fba9 	bl	800b796 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b052:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a22      	ldr	r2, [pc, #136]	; (800b0e4 <HAL_TIMEx_PWMN_Start+0x158>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d022      	beq.n	800b0a4 <HAL_TIMEx_PWMN_Start+0x118>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b066:	d01d      	beq.n	800b0a4 <HAL_TIMEx_PWMN_Start+0x118>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a1e      	ldr	r2, [pc, #120]	; (800b0e8 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d018      	beq.n	800b0a4 <HAL_TIMEx_PWMN_Start+0x118>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a1d      	ldr	r2, [pc, #116]	; (800b0ec <HAL_TIMEx_PWMN_Start+0x160>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d013      	beq.n	800b0a4 <HAL_TIMEx_PWMN_Start+0x118>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a1b      	ldr	r2, [pc, #108]	; (800b0f0 <HAL_TIMEx_PWMN_Start+0x164>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d00e      	beq.n	800b0a4 <HAL_TIMEx_PWMN_Start+0x118>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a1a      	ldr	r2, [pc, #104]	; (800b0f4 <HAL_TIMEx_PWMN_Start+0x168>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d009      	beq.n	800b0a4 <HAL_TIMEx_PWMN_Start+0x118>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a18      	ldr	r2, [pc, #96]	; (800b0f8 <HAL_TIMEx_PWMN_Start+0x16c>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d004      	beq.n	800b0a4 <HAL_TIMEx_PWMN_Start+0x118>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a17      	ldr	r2, [pc, #92]	; (800b0fc <HAL_TIMEx_PWMN_Start+0x170>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d111      	bne.n	800b0c8 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	f003 0307 	and.w	r3, r3, #7
 800b0ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2b06      	cmp	r3, #6
 800b0b4:	d010      	beq.n	800b0d8 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f042 0201 	orr.w	r2, r2, #1
 800b0c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0c6:	e007      	b.n	800b0d8 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f042 0201 	orr.w	r2, r2, #1
 800b0d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	40010000 	.word	0x40010000
 800b0e8:	40000400 	.word	0x40000400
 800b0ec:	40000800 	.word	0x40000800
 800b0f0:	40000c00 	.word	0x40000c00
 800b0f4:	40010400 	.word	0x40010400
 800b0f8:	40014000 	.word	0x40014000
 800b0fc:	40001800 	.word	0x40001800

0800b100 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2200      	movs	r2, #0
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	4618      	mov	r0, r3
 800b114:	f000 fb3f 	bl	800b796 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6a1a      	ldr	r2, [r3, #32]
 800b11e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b122:	4013      	ands	r3, r2
 800b124:	2b00      	cmp	r3, #0
 800b126:	d10f      	bne.n	800b148 <HAL_TIMEx_PWMN_Stop+0x48>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	6a1a      	ldr	r2, [r3, #32]
 800b12e:	f240 4344 	movw	r3, #1092	; 0x444
 800b132:	4013      	ands	r3, r2
 800b134:	2b00      	cmp	r3, #0
 800b136:	d107      	bne.n	800b148 <HAL_TIMEx_PWMN_Stop+0x48>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b146:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6a1a      	ldr	r2, [r3, #32]
 800b14e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b152:	4013      	ands	r3, r2
 800b154:	2b00      	cmp	r3, #0
 800b156:	d10f      	bne.n	800b178 <HAL_TIMEx_PWMN_Stop+0x78>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6a1a      	ldr	r2, [r3, #32]
 800b15e:	f240 4344 	movw	r3, #1092	; 0x444
 800b162:	4013      	ands	r3, r2
 800b164:	2b00      	cmp	r3, #0
 800b166:	d107      	bne.n	800b178 <HAL_TIMEx_PWMN_Stop+0x78>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f022 0201 	bic.w	r2, r2, #1
 800b176:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d104      	bne.n	800b188 <HAL_TIMEx_PWMN_Stop+0x88>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b186:	e013      	b.n	800b1b0 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	2b04      	cmp	r3, #4
 800b18c:	d104      	bne.n	800b198 <HAL_TIMEx_PWMN_Stop+0x98>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b196:	e00b      	b.n	800b1b0 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	2b08      	cmp	r3, #8
 800b19c:	d104      	bne.n	800b1a8 <HAL_TIMEx_PWMN_Stop+0xa8>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1a6:	e003      	b.n	800b1b0 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
	...

0800b1bc <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
 800b1c8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d109      	bne.n	800b1e8 <HAL_TIMEx_PWMN_Start_DMA+0x2c>
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	bf0c      	ite	eq
 800b1e0:	2301      	moveq	r3, #1
 800b1e2:	2300      	movne	r3, #0
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	e022      	b.n	800b22e <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	2b04      	cmp	r3, #4
 800b1ec:	d109      	bne.n	800b202 <HAL_TIMEx_PWMN_Start_DMA+0x46>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	bf0c      	ite	eq
 800b1fa:	2301      	moveq	r3, #1
 800b1fc:	2300      	movne	r3, #0
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	e015      	b.n	800b22e <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	2b08      	cmp	r3, #8
 800b206:	d109      	bne.n	800b21c <HAL_TIMEx_PWMN_Start_DMA+0x60>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	2b02      	cmp	r3, #2
 800b212:	bf0c      	ite	eq
 800b214:	2301      	moveq	r3, #1
 800b216:	2300      	movne	r3, #0
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	e008      	b.n	800b22e <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b222:	b2db      	uxtb	r3, r3
 800b224:	2b02      	cmp	r3, #2
 800b226:	bf0c      	ite	eq
 800b228:	2301      	moveq	r3, #1
 800b22a:	2300      	movne	r3, #0
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <HAL_TIMEx_PWMN_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800b232:	2302      	movs	r3, #2
 800b234:	e129      	b.n	800b48a <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d109      	bne.n	800b250 <HAL_TIMEx_PWMN_Start_DMA+0x94>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b242:	b2db      	uxtb	r3, r3
 800b244:	2b01      	cmp	r3, #1
 800b246:	bf0c      	ite	eq
 800b248:	2301      	moveq	r3, #1
 800b24a:	2300      	movne	r3, #0
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	e022      	b.n	800b296 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b04      	cmp	r3, #4
 800b254:	d109      	bne.n	800b26a <HAL_TIMEx_PWMN_Start_DMA+0xae>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b01      	cmp	r3, #1
 800b260:	bf0c      	ite	eq
 800b262:	2301      	moveq	r3, #1
 800b264:	2300      	movne	r3, #0
 800b266:	b2db      	uxtb	r3, r3
 800b268:	e015      	b.n	800b296 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2b08      	cmp	r3, #8
 800b26e:	d109      	bne.n	800b284 <HAL_TIMEx_PWMN_Start_DMA+0xc8>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b01      	cmp	r3, #1
 800b27a:	bf0c      	ite	eq
 800b27c:	2301      	moveq	r3, #1
 800b27e:	2300      	movne	r3, #0
 800b280:	b2db      	uxtb	r3, r3
 800b282:	e008      	b.n	800b296 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	bf0c      	ite	eq
 800b290:	2301      	moveq	r3, #1
 800b292:	2300      	movne	r3, #0
 800b294:	b2db      	uxtb	r3, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	d024      	beq.n	800b2e4 <HAL_TIMEx_PWMN_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d104      	bne.n	800b2aa <HAL_TIMEx_PWMN_Start_DMA+0xee>
 800b2a0:	887b      	ldrh	r3, [r7, #2]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <HAL_TIMEx_PWMN_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e0ef      	b.n	800b48a <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d104      	bne.n	800b2ba <HAL_TIMEx_PWMN_Start_DMA+0xfe>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2b8:	e016      	b.n	800b2e8 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2b04      	cmp	r3, #4
 800b2be:	d104      	bne.n	800b2ca <HAL_TIMEx_PWMN_Start_DMA+0x10e>
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2202      	movs	r2, #2
 800b2c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2c8:	e00e      	b.n	800b2e8 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	2b08      	cmp	r3, #8
 800b2ce:	d104      	bne.n	800b2da <HAL_TIMEx_PWMN_Start_DMA+0x11e>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2d8:	e006      	b.n	800b2e8 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2202      	movs	r2, #2
 800b2de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2e2:	e001      	b.n	800b2e8 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e0d0      	b.n	800b48a <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
  }

  switch (Channel)
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	2b08      	cmp	r3, #8
 800b2ec:	d051      	beq.n	800b392 <HAL_TIMEx_PWMN_Start_DMA+0x1d6>
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2b08      	cmp	r3, #8
 800b2f2:	d872      	bhi.n	800b3da <HAL_TIMEx_PWMN_Start_DMA+0x21e>
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d003      	beq.n	800b302 <HAL_TIMEx_PWMN_Start_DMA+0x146>
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2b04      	cmp	r3, #4
 800b2fe:	d024      	beq.n	800b34a <HAL_TIMEx_PWMN_Start_DMA+0x18e>
 800b300:	e06b      	b.n	800b3da <HAL_TIMEx_PWMN_Start_DMA+0x21e>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b306:	4a63      	ldr	r2, [pc, #396]	; (800b494 <HAL_TIMEx_PWMN_Start_DMA+0x2d8>)
 800b308:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	4a62      	ldr	r2, [pc, #392]	; (800b498 <HAL_TIMEx_PWMN_Start_DMA+0x2dc>)
 800b310:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	4a61      	ldr	r2, [pc, #388]	; (800b49c <HAL_TIMEx_PWMN_Start_DMA+0x2e0>)
 800b318:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b31e:	6879      	ldr	r1, [r7, #4]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	3334      	adds	r3, #52	; 0x34
 800b326:	461a      	mov	r2, r3
 800b328:	887b      	ldrh	r3, [r7, #2]
 800b32a:	f7fa fb79 	bl	8005a20 <HAL_DMA_Start_IT>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <HAL_TIMEx_PWMN_Start_DMA+0x17c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e0a8      	b.n	800b48a <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68da      	ldr	r2, [r3, #12]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b346:	60da      	str	r2, [r3, #12]
      break;
 800b348:	e04a      	b.n	800b3e0 <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34e:	4a51      	ldr	r2, [pc, #324]	; (800b494 <HAL_TIMEx_PWMN_Start_DMA+0x2d8>)
 800b350:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b356:	4a50      	ldr	r2, [pc, #320]	; (800b498 <HAL_TIMEx_PWMN_Start_DMA+0x2dc>)
 800b358:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b35e:	4a4f      	ldr	r2, [pc, #316]	; (800b49c <HAL_TIMEx_PWMN_Start_DMA+0x2e0>)
 800b360:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b366:	6879      	ldr	r1, [r7, #4]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3338      	adds	r3, #56	; 0x38
 800b36e:	461a      	mov	r2, r3
 800b370:	887b      	ldrh	r3, [r7, #2]
 800b372:	f7fa fb55 	bl	8005a20 <HAL_DMA_Start_IT>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <HAL_TIMEx_PWMN_Start_DMA+0x1c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e084      	b.n	800b48a <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68da      	ldr	r2, [r3, #12]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b38e:	60da      	str	r2, [r3, #12]
      break;
 800b390:	e026      	b.n	800b3e0 <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b396:	4a3f      	ldr	r2, [pc, #252]	; (800b494 <HAL_TIMEx_PWMN_Start_DMA+0x2d8>)
 800b398:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39e:	4a3e      	ldr	r2, [pc, #248]	; (800b498 <HAL_TIMEx_PWMN_Start_DMA+0x2dc>)
 800b3a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a6:	4a3d      	ldr	r2, [pc, #244]	; (800b49c <HAL_TIMEx_PWMN_Start_DMA+0x2e0>)
 800b3a8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b3ae:	6879      	ldr	r1, [r7, #4]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	333c      	adds	r3, #60	; 0x3c
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	887b      	ldrh	r3, [r7, #2]
 800b3ba:	f7fa fb31 	bl	8005a20 <HAL_DMA_Start_IT>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d001      	beq.n	800b3c8 <HAL_TIMEx_PWMN_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e060      	b.n	800b48a <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	68da      	ldr	r2, [r3, #12]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3d6:	60da      	str	r2, [r3, #12]
      break;
 800b3d8:	e002      	b.n	800b3e0 <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    default:
      status = HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	75fb      	strb	r3, [r7, #23]
      break;
 800b3de:	bf00      	nop
  }

  if (status == HAL_OK)
 800b3e0:	7dfb      	ldrb	r3, [r7, #23]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d150      	bne.n	800b488 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
  {
    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2204      	movs	r2, #4
 800b3ec:	68b9      	ldr	r1, [r7, #8]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 f9d1 	bl	800b796 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b402:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a25      	ldr	r2, [pc, #148]	; (800b4a0 <HAL_TIMEx_PWMN_Start_DMA+0x2e4>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d022      	beq.n	800b454 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b416:	d01d      	beq.n	800b454 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a21      	ldr	r2, [pc, #132]	; (800b4a4 <HAL_TIMEx_PWMN_Start_DMA+0x2e8>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d018      	beq.n	800b454 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a20      	ldr	r2, [pc, #128]	; (800b4a8 <HAL_TIMEx_PWMN_Start_DMA+0x2ec>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d013      	beq.n	800b454 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a1e      	ldr	r2, [pc, #120]	; (800b4ac <HAL_TIMEx_PWMN_Start_DMA+0x2f0>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d00e      	beq.n	800b454 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a1d      	ldr	r2, [pc, #116]	; (800b4b0 <HAL_TIMEx_PWMN_Start_DMA+0x2f4>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d009      	beq.n	800b454 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a1b      	ldr	r2, [pc, #108]	; (800b4b4 <HAL_TIMEx_PWMN_Start_DMA+0x2f8>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d004      	beq.n	800b454 <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a1a      	ldr	r2, [pc, #104]	; (800b4b8 <HAL_TIMEx_PWMN_Start_DMA+0x2fc>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d111      	bne.n	800b478 <HAL_TIMEx_PWMN_Start_DMA+0x2bc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	f003 0307 	and.w	r3, r3, #7
 800b45e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	2b06      	cmp	r3, #6
 800b464:	d010      	beq.n	800b488 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
      {
        __HAL_TIM_ENABLE(htim);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f042 0201 	orr.w	r2, r2, #1
 800b474:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b476:	e007      	b.n	800b488 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f042 0201 	orr.w	r2, r2, #1
 800b486:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b488:	7dfb      	ldrb	r3, [r7, #23]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3718      	adds	r7, #24
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	0800b681 	.word	0x0800b681
 800b498:	0800a905 	.word	0x0800a905
 800b49c:	0800b729 	.word	0x0800b729
 800b4a0:	40010000 	.word	0x40010000
 800b4a4:	40000400 	.word	0x40000400
 800b4a8:	40000800 	.word	0x40000800
 800b4ac:	40000c00 	.word	0x40000c00
 800b4b0:	40010400 	.word	0x40010400
 800b4b4:	40014000 	.word	0x40014000
 800b4b8:	40001800 	.word	0x40001800

0800b4bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d101      	bne.n	800b4d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	e05a      	b.n	800b58a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2202      	movs	r2, #2
 800b4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	4313      	orrs	r3, r2
 800b504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a21      	ldr	r2, [pc, #132]	; (800b598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d022      	beq.n	800b55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b520:	d01d      	beq.n	800b55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a1d      	ldr	r2, [pc, #116]	; (800b59c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d018      	beq.n	800b55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a1b      	ldr	r2, [pc, #108]	; (800b5a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d013      	beq.n	800b55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a1a      	ldr	r2, [pc, #104]	; (800b5a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d00e      	beq.n	800b55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a18      	ldr	r2, [pc, #96]	; (800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d009      	beq.n	800b55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a17      	ldr	r2, [pc, #92]	; (800b5ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d004      	beq.n	800b55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a15      	ldr	r2, [pc, #84]	; (800b5b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d10c      	bne.n	800b578 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	40010000 	.word	0x40010000
 800b59c:	40000400 	.word	0x40000400
 800b5a0:	40000800 	.word	0x40000800
 800b5a4:	40000c00 	.word	0x40000c00
 800b5a8:	40010400 	.word	0x40010400
 800b5ac:	40014000 	.word	0x40014000
 800b5b0:	40001800 	.word	0x40001800

0800b5b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d101      	bne.n	800b5d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	e03d      	b.n	800b64c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	695b      	ldr	r3, [r3, #20]
 800b628:	4313      	orrs	r3, r2
 800b62a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	4313      	orrs	r3, r2
 800b638:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <TIM_DMADelayPulseNCplt>:
  * @brief  TIM DMA Delay Pulse complete callback (complementary channel).
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseNCplt(DMA_HandleTypeDef *hdma)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	429a      	cmp	r2, r3
 800b696:	d10b      	bne.n	800b6b0 <TIM_DMADelayPulseNCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2201      	movs	r2, #1
 800b69c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	69db      	ldr	r3, [r3, #28]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d136      	bne.n	800b714 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6ae:	e031      	b.n	800b714 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d10b      	bne.n	800b6d2 <TIM_DMADelayPulseNCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2202      	movs	r2, #2
 800b6be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	69db      	ldr	r3, [r3, #28]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d125      	bne.n	800b714 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6d0:	e020      	b.n	800b714 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d10b      	bne.n	800b6f4 <TIM_DMADelayPulseNCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2204      	movs	r2, #4
 800b6e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	69db      	ldr	r3, [r3, #28]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d114      	bne.n	800b714 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6f2:	e00f      	b.n	800b714 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d10a      	bne.n	800b714 <TIM_DMADelayPulseNCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2208      	movs	r2, #8
 800b702:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	69db      	ldr	r3, [r3, #28]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d103      	bne.n	800b714 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f7ff f830 	bl	800a77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	771a      	strb	r2, [r3, #28]
}
 800b720:	bf00      	nop
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <TIM_DMAErrorCCxN>:
  * @brief  TIM DMA error callback (complementary channel)
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAErrorCCxN(DMA_HandleTypeDef *hdma)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b734:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d107      	bne.n	800b750 <TIM_DMAErrorCCxN+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2201      	movs	r2, #1
 800b744:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b74e:	e018      	b.n	800b782 <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	429a      	cmp	r2, r3
 800b758:	d107      	bne.n	800b76a <TIM_DMAErrorCCxN+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2202      	movs	r2, #2
 800b75e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b768:	e00b      	b.n	800b782 <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	429a      	cmp	r2, r3
 800b772:	d106      	bne.n	800b782 <TIM_DMAErrorCCxN+0x5a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2204      	movs	r2, #4
 800b778:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2201      	movs	r2, #1
 800b77e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f7ff f817 	bl	800a7b6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	771a      	strb	r2, [r3, #28]
}
 800b78e:	bf00      	nop
 800b790:	3710      	adds	r7, #16
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b796:	b480      	push	{r7}
 800b798:	b087      	sub	sp, #28
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	60f8      	str	r0, [r7, #12]
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	f003 031f 	and.w	r3, r3, #31
 800b7a8:	2204      	movs	r2, #4
 800b7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6a1a      	ldr	r2, [r3, #32]
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	43db      	mvns	r3, r3
 800b7b8:	401a      	ands	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6a1a      	ldr	r2, [r3, #32]
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	f003 031f 	and.w	r3, r3, #31
 800b7c8:	6879      	ldr	r1, [r7, #4]
 800b7ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b7ce:	431a      	orrs	r2, r3
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	621a      	str	r2, [r3, #32]
}
 800b7d4:	bf00      	nop
 800b7d6:	371c      	adds	r7, #28
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b7e0:	b084      	sub	sp, #16
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b084      	sub	sp, #16
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
 800b7ea:	f107 001c 	add.w	r0, r7, #28
 800b7ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d122      	bne.n	800b83e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b80c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b822:	2b01      	cmp	r3, #1
 800b824:	d105      	bne.n	800b832 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f001 fbe8 	bl	800d008 <USB_CoreReset>
 800b838:	4603      	mov	r3, r0
 800b83a:	73fb      	strb	r3, [r7, #15]
 800b83c:	e01a      	b.n	800b874 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f001 fbdc 	bl	800d008 <USB_CoreReset>
 800b850:	4603      	mov	r3, r0
 800b852:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b856:	2b00      	cmp	r3, #0
 800b858:	d106      	bne.n	800b868 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b85e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	639a      	str	r2, [r3, #56]	; 0x38
 800b866:	e005      	b.n	800b874 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b86c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	2b01      	cmp	r3, #1
 800b878:	d10b      	bne.n	800b892 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	f043 0206 	orr.w	r2, r3, #6
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	f043 0220 	orr.w	r2, r3, #32
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b892:	7bfb      	ldrb	r3, [r7, #15]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b89e:	b004      	add	sp, #16
 800b8a0:	4770      	bx	lr
	...

0800b8a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b087      	sub	sp, #28
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b8b2:	79fb      	ldrb	r3, [r7, #7]
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d165      	bne.n	800b984 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	4a41      	ldr	r2, [pc, #260]	; (800b9c0 <USB_SetTurnaroundTime+0x11c>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d906      	bls.n	800b8ce <USB_SetTurnaroundTime+0x2a>
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	4a40      	ldr	r2, [pc, #256]	; (800b9c4 <USB_SetTurnaroundTime+0x120>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d202      	bcs.n	800b8ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b8c8:	230f      	movs	r3, #15
 800b8ca:	617b      	str	r3, [r7, #20]
 800b8cc:	e062      	b.n	800b994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	4a3c      	ldr	r2, [pc, #240]	; (800b9c4 <USB_SetTurnaroundTime+0x120>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d306      	bcc.n	800b8e4 <USB_SetTurnaroundTime+0x40>
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	4a3b      	ldr	r2, [pc, #236]	; (800b9c8 <USB_SetTurnaroundTime+0x124>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d202      	bcs.n	800b8e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b8de:	230e      	movs	r3, #14
 800b8e0:	617b      	str	r3, [r7, #20]
 800b8e2:	e057      	b.n	800b994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	4a38      	ldr	r2, [pc, #224]	; (800b9c8 <USB_SetTurnaroundTime+0x124>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d306      	bcc.n	800b8fa <USB_SetTurnaroundTime+0x56>
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	4a37      	ldr	r2, [pc, #220]	; (800b9cc <USB_SetTurnaroundTime+0x128>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d202      	bcs.n	800b8fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b8f4:	230d      	movs	r3, #13
 800b8f6:	617b      	str	r3, [r7, #20]
 800b8f8:	e04c      	b.n	800b994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	4a33      	ldr	r2, [pc, #204]	; (800b9cc <USB_SetTurnaroundTime+0x128>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d306      	bcc.n	800b910 <USB_SetTurnaroundTime+0x6c>
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	4a32      	ldr	r2, [pc, #200]	; (800b9d0 <USB_SetTurnaroundTime+0x12c>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d802      	bhi.n	800b910 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b90a:	230c      	movs	r3, #12
 800b90c:	617b      	str	r3, [r7, #20]
 800b90e:	e041      	b.n	800b994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	4a2f      	ldr	r2, [pc, #188]	; (800b9d0 <USB_SetTurnaroundTime+0x12c>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d906      	bls.n	800b926 <USB_SetTurnaroundTime+0x82>
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	4a2e      	ldr	r2, [pc, #184]	; (800b9d4 <USB_SetTurnaroundTime+0x130>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d802      	bhi.n	800b926 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b920:	230b      	movs	r3, #11
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	e036      	b.n	800b994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	4a2a      	ldr	r2, [pc, #168]	; (800b9d4 <USB_SetTurnaroundTime+0x130>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d906      	bls.n	800b93c <USB_SetTurnaroundTime+0x98>
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	4a29      	ldr	r2, [pc, #164]	; (800b9d8 <USB_SetTurnaroundTime+0x134>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d802      	bhi.n	800b93c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b936:	230a      	movs	r3, #10
 800b938:	617b      	str	r3, [r7, #20]
 800b93a:	e02b      	b.n	800b994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	4a26      	ldr	r2, [pc, #152]	; (800b9d8 <USB_SetTurnaroundTime+0x134>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d906      	bls.n	800b952 <USB_SetTurnaroundTime+0xae>
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	4a25      	ldr	r2, [pc, #148]	; (800b9dc <USB_SetTurnaroundTime+0x138>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d202      	bcs.n	800b952 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b94c:	2309      	movs	r3, #9
 800b94e:	617b      	str	r3, [r7, #20]
 800b950:	e020      	b.n	800b994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	4a21      	ldr	r2, [pc, #132]	; (800b9dc <USB_SetTurnaroundTime+0x138>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d306      	bcc.n	800b968 <USB_SetTurnaroundTime+0xc4>
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	4a20      	ldr	r2, [pc, #128]	; (800b9e0 <USB_SetTurnaroundTime+0x13c>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d802      	bhi.n	800b968 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b962:	2308      	movs	r3, #8
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	e015      	b.n	800b994 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	4a1d      	ldr	r2, [pc, #116]	; (800b9e0 <USB_SetTurnaroundTime+0x13c>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d906      	bls.n	800b97e <USB_SetTurnaroundTime+0xda>
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	4a1c      	ldr	r2, [pc, #112]	; (800b9e4 <USB_SetTurnaroundTime+0x140>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d202      	bcs.n	800b97e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b978:	2307      	movs	r3, #7
 800b97a:	617b      	str	r3, [r7, #20]
 800b97c:	e00a      	b.n	800b994 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b97e:	2306      	movs	r3, #6
 800b980:	617b      	str	r3, [r7, #20]
 800b982:	e007      	b.n	800b994 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b984:	79fb      	ldrb	r3, [r7, #7]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d102      	bne.n	800b990 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b98a:	2309      	movs	r3, #9
 800b98c:	617b      	str	r3, [r7, #20]
 800b98e:	e001      	b.n	800b994 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b990:	2309      	movs	r3, #9
 800b992:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	68da      	ldr	r2, [r3, #12]
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	029b      	lsls	r3, r3, #10
 800b9a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b9ac:	431a      	orrs	r2, r3
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	371c      	adds	r7, #28
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr
 800b9c0:	00d8acbf 	.word	0x00d8acbf
 800b9c4:	00e4e1c0 	.word	0x00e4e1c0
 800b9c8:	00f42400 	.word	0x00f42400
 800b9cc:	01067380 	.word	0x01067380
 800b9d0:	011a499f 	.word	0x011a499f
 800b9d4:	01312cff 	.word	0x01312cff
 800b9d8:	014ca43f 	.word	0x014ca43f
 800b9dc:	016e3600 	.word	0x016e3600
 800b9e0:	01a6ab1f 	.word	0x01a6ab1f
 800b9e4:	01e84800 	.word	0x01e84800

0800b9e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	f043 0201 	orr.w	r2, r3, #1
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	370c      	adds	r7, #12
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr

0800ba0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba0a:	b480      	push	{r7}
 800ba0c:	b083      	sub	sp, #12
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	f023 0201 	bic.w	r2, r3, #1
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	460b      	mov	r3, r1
 800ba36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba48:	78fb      	ldrb	r3, [r7, #3]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d115      	bne.n	800ba7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba5a:	2001      	movs	r0, #1
 800ba5c:	f7f8 fb9a 	bl	8004194 <HAL_Delay>
      ms++;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	3301      	adds	r3, #1
 800ba64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f001 fa3f 	bl	800ceea <USB_GetMode>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d01e      	beq.n	800bab0 <USB_SetCurrentMode+0x84>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2b31      	cmp	r3, #49	; 0x31
 800ba76:	d9f0      	bls.n	800ba5a <USB_SetCurrentMode+0x2e>
 800ba78:	e01a      	b.n	800bab0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba7a:	78fb      	ldrb	r3, [r7, #3]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d115      	bne.n	800baac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba8c:	2001      	movs	r0, #1
 800ba8e:	f7f8 fb81 	bl	8004194 <HAL_Delay>
      ms++;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	3301      	adds	r3, #1
 800ba96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f001 fa26 	bl	800ceea <USB_GetMode>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d005      	beq.n	800bab0 <USB_SetCurrentMode+0x84>
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2b31      	cmp	r3, #49	; 0x31
 800baa8:	d9f0      	bls.n	800ba8c <USB_SetCurrentMode+0x60>
 800baaa:	e001      	b.n	800bab0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	e005      	b.n	800babc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2b32      	cmp	r3, #50	; 0x32
 800bab4:	d101      	bne.n	800baba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e000      	b.n	800babc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bac4:	b084      	sub	sp, #16
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b086      	sub	sp, #24
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
 800bace:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bad6:	2300      	movs	r3, #0
 800bad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bade:	2300      	movs	r3, #0
 800bae0:	613b      	str	r3, [r7, #16]
 800bae2:	e009      	b.n	800baf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	3340      	adds	r3, #64	; 0x40
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4413      	add	r3, r2
 800baee:	2200      	movs	r2, #0
 800baf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	3301      	adds	r3, #1
 800baf6:	613b      	str	r3, [r7, #16]
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	2b0e      	cmp	r3, #14
 800bafc:	d9f2      	bls.n	800bae4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d11c      	bne.n	800bb3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb12:	f043 0302 	orr.w	r3, r3, #2
 800bb16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	e005      	b.n	800bb4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb50:	461a      	mov	r2, r3
 800bb52:	2300      	movs	r3, #0
 800bb54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb64:	461a      	mov	r2, r3
 800bb66:	680b      	ldr	r3, [r1, #0]
 800bb68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d10c      	bne.n	800bb8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d104      	bne.n	800bb80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bb76:	2100      	movs	r1, #0
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f965 	bl	800be48 <USB_SetDevSpeed>
 800bb7e:	e008      	b.n	800bb92 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bb80:	2101      	movs	r1, #1
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 f960 	bl	800be48 <USB_SetDevSpeed>
 800bb88:	e003      	b.n	800bb92 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bb8a:	2103      	movs	r1, #3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 f95b 	bl	800be48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb92:	2110      	movs	r1, #16
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 f8f3 	bl	800bd80 <USB_FlushTxFifo>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f91f 	bl	800bde8 <USB_FlushRxFifo>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d001      	beq.n	800bbb4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbba:	461a      	mov	r2, r3
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	2300      	movs	r3, #0
 800bbca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbd8:	2300      	movs	r3, #0
 800bbda:	613b      	str	r3, [r7, #16]
 800bbdc:	e043      	b.n	800bc66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	015a      	lsls	r2, r3, #5
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbf4:	d118      	bne.n	800bc28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10a      	bne.n	800bc12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	015a      	lsls	r2, r3, #5
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	4413      	add	r3, r2
 800bc04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc08:	461a      	mov	r2, r3
 800bc0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc0e:	6013      	str	r3, [r2, #0]
 800bc10:	e013      	b.n	800bc3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	015a      	lsls	r2, r3, #5
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc1e:	461a      	mov	r2, r3
 800bc20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc24:	6013      	str	r3, [r2, #0]
 800bc26:	e008      	b.n	800bc3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	015a      	lsls	r2, r3, #5
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	4413      	add	r3, r2
 800bc30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc34:	461a      	mov	r2, r3
 800bc36:	2300      	movs	r3, #0
 800bc38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	015a      	lsls	r2, r3, #5
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	4413      	add	r3, r2
 800bc42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc46:	461a      	mov	r2, r3
 800bc48:	2300      	movs	r3, #0
 800bc4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	015a      	lsls	r2, r3, #5
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	4413      	add	r3, r2
 800bc54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc58:	461a      	mov	r2, r3
 800bc5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	3301      	adds	r3, #1
 800bc64:	613b      	str	r3, [r7, #16]
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	693a      	ldr	r2, [r7, #16]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d3b7      	bcc.n	800bbde <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc6e:	2300      	movs	r3, #0
 800bc70:	613b      	str	r3, [r7, #16]
 800bc72:	e043      	b.n	800bcfc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	015a      	lsls	r2, r3, #5
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc8a:	d118      	bne.n	800bcbe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10a      	bne.n	800bca8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	015a      	lsls	r2, r3, #5
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	4413      	add	r3, r2
 800bc9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc9e:	461a      	mov	r2, r3
 800bca0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bca4:	6013      	str	r3, [r2, #0]
 800bca6:	e013      	b.n	800bcd0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	015a      	lsls	r2, r3, #5
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bcba:	6013      	str	r3, [r2, #0]
 800bcbc:	e008      	b.n	800bcd0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	015a      	lsls	r2, r3, #5
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcca:	461a      	mov	r2, r3
 800bccc:	2300      	movs	r3, #0
 800bcce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	015a      	lsls	r2, r3, #5
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcdc:	461a      	mov	r2, r3
 800bcde:	2300      	movs	r3, #0
 800bce0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	015a      	lsls	r2, r3, #5
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	4413      	add	r3, r2
 800bcea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcee:	461a      	mov	r2, r3
 800bcf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bcf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	613b      	str	r3, [r7, #16]
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d3b7      	bcc.n	800bc74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bd24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d105      	bne.n	800bd38 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	f043 0210 	orr.w	r2, r3, #16
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	699a      	ldr	r2, [r3, #24]
 800bd3c:	4b0f      	ldr	r3, [pc, #60]	; (800bd7c <USB_DevInit+0x2b8>)
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bd44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d005      	beq.n	800bd56 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	f043 0208 	orr.w	r2, r3, #8
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bd56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d107      	bne.n	800bd6c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	699b      	ldr	r3, [r3, #24]
 800bd60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd64:	f043 0304 	orr.w	r3, r3, #4
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bd6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3718      	adds	r7, #24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd78:	b004      	add	sp, #16
 800bd7a:	4770      	bx	lr
 800bd7c:	803c3800 	.word	0x803c3800

0800bd80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	3301      	adds	r3, #1
 800bd92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	4a13      	ldr	r2, [pc, #76]	; (800bde4 <USB_FlushTxFifo+0x64>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d901      	bls.n	800bda0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	e01b      	b.n	800bdd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	daf2      	bge.n	800bd8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	019b      	lsls	r3, r3, #6
 800bdb0:	f043 0220 	orr.w	r2, r3, #32
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	4a08      	ldr	r2, [pc, #32]	; (800bde4 <USB_FlushTxFifo+0x64>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d901      	bls.n	800bdca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	e006      	b.n	800bdd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	f003 0320 	and.w	r3, r3, #32
 800bdd2:	2b20      	cmp	r3, #32
 800bdd4:	d0f0      	beq.n	800bdb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr
 800bde4:	00030d40 	.word	0x00030d40

0800bde8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	4a11      	ldr	r2, [pc, #68]	; (800be44 <USB_FlushRxFifo+0x5c>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d901      	bls.n	800be06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800be02:	2303      	movs	r3, #3
 800be04:	e018      	b.n	800be38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	daf2      	bge.n	800bdf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800be0e:	2300      	movs	r3, #0
 800be10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2210      	movs	r2, #16
 800be16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	3301      	adds	r3, #1
 800be1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	4a08      	ldr	r2, [pc, #32]	; (800be44 <USB_FlushRxFifo+0x5c>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d901      	bls.n	800be2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800be26:	2303      	movs	r3, #3
 800be28:	e006      	b.n	800be38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	f003 0310 	and.w	r3, r3, #16
 800be32:	2b10      	cmp	r3, #16
 800be34:	d0f0      	beq.n	800be18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr
 800be44:	00030d40 	.word	0x00030d40

0800be48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	460b      	mov	r3, r1
 800be52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	78fb      	ldrb	r3, [r7, #3]
 800be62:	68f9      	ldr	r1, [r7, #12]
 800be64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be68:	4313      	orrs	r3, r2
 800be6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3714      	adds	r7, #20
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr

0800be7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800be7a:	b480      	push	{r7}
 800be7c:	b087      	sub	sp, #28
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	f003 0306 	and.w	r3, r3, #6
 800be92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d102      	bne.n	800bea0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800be9a:	2300      	movs	r3, #0
 800be9c:	75fb      	strb	r3, [r7, #23]
 800be9e:	e00a      	b.n	800beb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2b02      	cmp	r3, #2
 800bea4:	d002      	beq.n	800beac <USB_GetDevSpeed+0x32>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2b06      	cmp	r3, #6
 800beaa:	d102      	bne.n	800beb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800beac:	2302      	movs	r3, #2
 800beae:	75fb      	strb	r3, [r7, #23]
 800beb0:	e001      	b.n	800beb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800beb2:	230f      	movs	r3, #15
 800beb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800beb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	371c      	adds	r7, #28
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	785b      	ldrb	r3, [r3, #1]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d13a      	bne.n	800bf56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bee6:	69da      	ldr	r2, [r3, #28]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	f003 030f 	and.w	r3, r3, #15
 800bef0:	2101      	movs	r1, #1
 800bef2:	fa01 f303 	lsl.w	r3, r1, r3
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	68f9      	ldr	r1, [r7, #12]
 800befa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800befe:	4313      	orrs	r3, r2
 800bf00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	015a      	lsls	r2, r3, #5
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	4413      	add	r3, r2
 800bf0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d155      	bne.n	800bfc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	015a      	lsls	r2, r3, #5
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	4413      	add	r3, r2
 800bf20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	791b      	ldrb	r3, [r3, #4]
 800bf32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	059b      	lsls	r3, r3, #22
 800bf3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	68ba      	ldr	r2, [r7, #8]
 800bf40:	0151      	lsls	r1, r2, #5
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	440a      	add	r2, r1
 800bf46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf52:	6013      	str	r3, [r2, #0]
 800bf54:	e036      	b.n	800bfc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf5c:	69da      	ldr	r2, [r3, #28]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	f003 030f 	and.w	r3, r3, #15
 800bf66:	2101      	movs	r1, #1
 800bf68:	fa01 f303 	lsl.w	r3, r1, r3
 800bf6c:	041b      	lsls	r3, r3, #16
 800bf6e:	68f9      	ldr	r1, [r7, #12]
 800bf70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf74:	4313      	orrs	r3, r2
 800bf76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	015a      	lsls	r2, r3, #5
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	4413      	add	r3, r2
 800bf80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d11a      	bne.n	800bfc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	015a      	lsls	r2, r3, #5
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	4413      	add	r3, r2
 800bf96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	791b      	ldrb	r3, [r3, #4]
 800bfa8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bfaa:	430b      	orrs	r3, r1
 800bfac:	4313      	orrs	r3, r2
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	0151      	lsls	r1, r2, #5
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	440a      	add	r2, r1
 800bfb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3714      	adds	r7, #20
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr
	...

0800bfd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	785b      	ldrb	r3, [r3, #1]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d161      	bne.n	800c0b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	015a      	lsls	r2, r3, #5
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	4413      	add	r3, r2
 800bff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c006:	d11f      	bne.n	800c048 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	015a      	lsls	r2, r3, #5
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4413      	add	r3, r2
 800c010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	0151      	lsls	r1, r2, #5
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	440a      	add	r2, r1
 800c01e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c022:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c026:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	015a      	lsls	r2, r3, #5
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	4413      	add	r3, r2
 800c030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	0151      	lsls	r1, r2, #5
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	440a      	add	r2, r1
 800c03e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c046:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c04e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	f003 030f 	and.w	r3, r3, #15
 800c058:	2101      	movs	r1, #1
 800c05a:	fa01 f303 	lsl.w	r3, r1, r3
 800c05e:	b29b      	uxth	r3, r3
 800c060:	43db      	mvns	r3, r3
 800c062:	68f9      	ldr	r1, [r7, #12]
 800c064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c068:	4013      	ands	r3, r2
 800c06a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c072:	69da      	ldr	r2, [r3, #28]
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	f003 030f 	and.w	r3, r3, #15
 800c07c:	2101      	movs	r1, #1
 800c07e:	fa01 f303 	lsl.w	r3, r1, r3
 800c082:	b29b      	uxth	r3, r3
 800c084:	43db      	mvns	r3, r3
 800c086:	68f9      	ldr	r1, [r7, #12]
 800c088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c08c:	4013      	ands	r3, r2
 800c08e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	015a      	lsls	r2, r3, #5
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	4413      	add	r3, r2
 800c098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	0159      	lsls	r1, r3, #5
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	440b      	add	r3, r1
 800c0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	4b35      	ldr	r3, [pc, #212]	; (800c184 <USB_DeactivateEndpoint+0x1b0>)
 800c0ae:	4013      	ands	r3, r2
 800c0b0:	600b      	str	r3, [r1, #0]
 800c0b2:	e060      	b.n	800c176 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	015a      	lsls	r2, r3, #5
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0ca:	d11f      	bne.n	800c10c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	015a      	lsls	r2, r3, #5
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	0151      	lsls	r1, r2, #5
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	440a      	add	r2, r1
 800c0e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	015a      	lsls	r2, r3, #5
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68ba      	ldr	r2, [r7, #8]
 800c0fc:	0151      	lsls	r1, r2, #5
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	440a      	add	r2, r1
 800c102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c10a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	f003 030f 	and.w	r3, r3, #15
 800c11c:	2101      	movs	r1, #1
 800c11e:	fa01 f303 	lsl.w	r3, r1, r3
 800c122:	041b      	lsls	r3, r3, #16
 800c124:	43db      	mvns	r3, r3
 800c126:	68f9      	ldr	r1, [r7, #12]
 800c128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c12c:	4013      	ands	r3, r2
 800c12e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c136:	69da      	ldr	r2, [r3, #28]
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	f003 030f 	and.w	r3, r3, #15
 800c140:	2101      	movs	r1, #1
 800c142:	fa01 f303 	lsl.w	r3, r1, r3
 800c146:	041b      	lsls	r3, r3, #16
 800c148:	43db      	mvns	r3, r3
 800c14a:	68f9      	ldr	r1, [r7, #12]
 800c14c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c150:	4013      	ands	r3, r2
 800c152:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	015a      	lsls	r2, r3, #5
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	4413      	add	r3, r2
 800c15c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	0159      	lsls	r1, r3, #5
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	440b      	add	r3, r1
 800c16a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c16e:	4619      	mov	r1, r3
 800c170:	4b05      	ldr	r3, [pc, #20]	; (800c188 <USB_DeactivateEndpoint+0x1b4>)
 800c172:	4013      	ands	r3, r2
 800c174:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3714      	adds	r7, #20
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr
 800c184:	ec337800 	.word	0xec337800
 800c188:	eff37800 	.word	0xeff37800

0800c18c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b08a      	sub	sp, #40	; 0x28
 800c190:	af02      	add	r7, sp, #8
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	4613      	mov	r3, r2
 800c198:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	785b      	ldrb	r3, [r3, #1]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	f040 815c 	bne.w	800c466 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	699b      	ldr	r3, [r3, #24]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d132      	bne.n	800c21c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	015a      	lsls	r2, r3, #5
 800c1ba:	69fb      	ldr	r3, [r7, #28]
 800c1bc:	4413      	add	r3, r2
 800c1be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	69ba      	ldr	r2, [r7, #24]
 800c1c6:	0151      	lsls	r1, r2, #5
 800c1c8:	69fa      	ldr	r2, [r7, #28]
 800c1ca:	440a      	add	r2, r1
 800c1cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c1d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c1d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	015a      	lsls	r2, r3, #5
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e6:	691b      	ldr	r3, [r3, #16]
 800c1e8:	69ba      	ldr	r2, [r7, #24]
 800c1ea:	0151      	lsls	r1, r2, #5
 800c1ec:	69fa      	ldr	r2, [r7, #28]
 800c1ee:	440a      	add	r2, r1
 800c1f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	015a      	lsls	r2, r3, #5
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	4413      	add	r3, r2
 800c202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	69ba      	ldr	r2, [r7, #24]
 800c20a:	0151      	lsls	r1, r2, #5
 800c20c:	69fa      	ldr	r2, [r7, #28]
 800c20e:	440a      	add	r2, r1
 800c210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c214:	0cdb      	lsrs	r3, r3, #19
 800c216:	04db      	lsls	r3, r3, #19
 800c218:	6113      	str	r3, [r2, #16]
 800c21a:	e074      	b.n	800c306 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	4413      	add	r3, r2
 800c224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	69ba      	ldr	r2, [r7, #24]
 800c22c:	0151      	lsls	r1, r2, #5
 800c22e:	69fa      	ldr	r2, [r7, #28]
 800c230:	440a      	add	r2, r1
 800c232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c236:	0cdb      	lsrs	r3, r3, #19
 800c238:	04db      	lsls	r3, r3, #19
 800c23a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	015a      	lsls	r2, r3, #5
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	4413      	add	r3, r2
 800c244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	69ba      	ldr	r2, [r7, #24]
 800c24c:	0151      	lsls	r1, r2, #5
 800c24e:	69fa      	ldr	r2, [r7, #28]
 800c250:	440a      	add	r2, r1
 800c252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c256:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c25a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c25e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	015a      	lsls	r2, r3, #5
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	4413      	add	r3, r2
 800c268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c26c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	6999      	ldr	r1, [r3, #24]
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	440b      	add	r3, r1
 800c278:	1e59      	subs	r1, r3, #1
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c282:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c284:	4b9d      	ldr	r3, [pc, #628]	; (800c4fc <USB_EPStartXfer+0x370>)
 800c286:	400b      	ands	r3, r1
 800c288:	69b9      	ldr	r1, [r7, #24]
 800c28a:	0148      	lsls	r0, r1, #5
 800c28c:	69f9      	ldr	r1, [r7, #28]
 800c28e:	4401      	add	r1, r0
 800c290:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c294:	4313      	orrs	r3, r2
 800c296:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	015a      	lsls	r2, r3, #5
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	4413      	add	r3, r2
 800c2a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2a4:	691a      	ldr	r2, [r3, #16]
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	699b      	ldr	r3, [r3, #24]
 800c2aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2ae:	69b9      	ldr	r1, [r7, #24]
 800c2b0:	0148      	lsls	r0, r1, #5
 800c2b2:	69f9      	ldr	r1, [r7, #28]
 800c2b4:	4401      	add	r1, r0
 800c2b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	791b      	ldrb	r3, [r3, #4]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d11f      	bne.n	800c306 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	015a      	lsls	r2, r3, #5
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	69ba      	ldr	r2, [r7, #24]
 800c2d6:	0151      	lsls	r1, r2, #5
 800c2d8:	69fa      	ldr	r2, [r7, #28]
 800c2da:	440a      	add	r2, r1
 800c2dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c2e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	015a      	lsls	r2, r3, #5
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	69ba      	ldr	r2, [r7, #24]
 800c2f6:	0151      	lsls	r1, r2, #5
 800c2f8:	69fa      	ldr	r2, [r7, #28]
 800c2fa:	440a      	add	r2, r1
 800c2fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c300:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c304:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c306:	79fb      	ldrb	r3, [r7, #7]
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d14b      	bne.n	800c3a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	695b      	ldr	r3, [r3, #20]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d009      	beq.n	800c328 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	015a      	lsls	r2, r3, #5
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	4413      	add	r3, r2
 800c31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c320:	461a      	mov	r2, r3
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	695b      	ldr	r3, [r3, #20]
 800c326:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	791b      	ldrb	r3, [r3, #4]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d128      	bne.n	800c382 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d110      	bne.n	800c362 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	015a      	lsls	r2, r3, #5
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	4413      	add	r3, r2
 800c348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	69ba      	ldr	r2, [r7, #24]
 800c350:	0151      	lsls	r1, r2, #5
 800c352:	69fa      	ldr	r2, [r7, #28]
 800c354:	440a      	add	r2, r1
 800c356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c35a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c35e:	6013      	str	r3, [r2, #0]
 800c360:	e00f      	b.n	800c382 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	015a      	lsls	r2, r3, #5
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	4413      	add	r3, r2
 800c36a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	69ba      	ldr	r2, [r7, #24]
 800c372:	0151      	lsls	r1, r2, #5
 800c374:	69fa      	ldr	r2, [r7, #28]
 800c376:	440a      	add	r2, r1
 800c378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c37c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c380:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	015a      	lsls	r2, r3, #5
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	4413      	add	r3, r2
 800c38a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	69ba      	ldr	r2, [r7, #24]
 800c392:	0151      	lsls	r1, r2, #5
 800c394:	69fa      	ldr	r2, [r7, #28]
 800c396:	440a      	add	r2, r1
 800c398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c39c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3a0:	6013      	str	r3, [r2, #0]
 800c3a2:	e133      	b.n	800c60c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	015a      	lsls	r2, r3, #5
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	69ba      	ldr	r2, [r7, #24]
 800c3b4:	0151      	lsls	r1, r2, #5
 800c3b6:	69fa      	ldr	r2, [r7, #28]
 800c3b8:	440a      	add	r2, r1
 800c3ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	791b      	ldrb	r3, [r3, #4]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d015      	beq.n	800c3f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f000 811b 	beq.w	800c60c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c3d6:	69fb      	ldr	r3, [r7, #28]
 800c3d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	f003 030f 	and.w	r3, r3, #15
 800c3e6:	2101      	movs	r1, #1
 800c3e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c3ec:	69f9      	ldr	r1, [r7, #28]
 800c3ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	634b      	str	r3, [r1, #52]	; 0x34
 800c3f6:	e109      	b.n	800c60c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c404:	2b00      	cmp	r3, #0
 800c406:	d110      	bne.n	800c42a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	015a      	lsls	r2, r3, #5
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	4413      	add	r3, r2
 800c410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	69ba      	ldr	r2, [r7, #24]
 800c418:	0151      	lsls	r1, r2, #5
 800c41a:	69fa      	ldr	r2, [r7, #28]
 800c41c:	440a      	add	r2, r1
 800c41e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c422:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c426:	6013      	str	r3, [r2, #0]
 800c428:	e00f      	b.n	800c44a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	015a      	lsls	r2, r3, #5
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	4413      	add	r3, r2
 800c432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	69ba      	ldr	r2, [r7, #24]
 800c43a:	0151      	lsls	r1, r2, #5
 800c43c:	69fa      	ldr	r2, [r7, #28]
 800c43e:	440a      	add	r2, r1
 800c440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c448:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	6919      	ldr	r1, [r3, #16]
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	781a      	ldrb	r2, [r3, #0]
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	b298      	uxth	r0, r3
 800c458:	79fb      	ldrb	r3, [r7, #7]
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	4603      	mov	r3, r0
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f000 fade 	bl	800ca20 <USB_WritePacket>
 800c464:	e0d2      	b.n	800c60c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c466:	69bb      	ldr	r3, [r7, #24]
 800c468:	015a      	lsls	r2, r3, #5
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	4413      	add	r3, r2
 800c46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c472:	691b      	ldr	r3, [r3, #16]
 800c474:	69ba      	ldr	r2, [r7, #24]
 800c476:	0151      	lsls	r1, r2, #5
 800c478:	69fa      	ldr	r2, [r7, #28]
 800c47a:	440a      	add	r2, r1
 800c47c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c480:	0cdb      	lsrs	r3, r3, #19
 800c482:	04db      	lsls	r3, r3, #19
 800c484:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	015a      	lsls	r2, r3, #5
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	4413      	add	r3, r2
 800c48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	69ba      	ldr	r2, [r7, #24]
 800c496:	0151      	lsls	r1, r2, #5
 800c498:	69fa      	ldr	r2, [r7, #28]
 800c49a:	440a      	add	r2, r1
 800c49c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c4a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c4a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d126      	bne.n	800c500 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	015a      	lsls	r2, r3, #5
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4be:	691a      	ldr	r2, [r3, #16]
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4c8:	69b9      	ldr	r1, [r7, #24]
 800c4ca:	0148      	lsls	r0, r1, #5
 800c4cc:	69f9      	ldr	r1, [r7, #28]
 800c4ce:	4401      	add	r1, r0
 800c4d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	015a      	lsls	r2, r3, #5
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	4413      	add	r3, r2
 800c4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	69ba      	ldr	r2, [r7, #24]
 800c4e8:	0151      	lsls	r1, r2, #5
 800c4ea:	69fa      	ldr	r2, [r7, #28]
 800c4ec:	440a      	add	r2, r1
 800c4ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c4f6:	6113      	str	r3, [r2, #16]
 800c4f8:	e03a      	b.n	800c570 <USB_EPStartXfer+0x3e4>
 800c4fa:	bf00      	nop
 800c4fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	699a      	ldr	r2, [r3, #24]
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	4413      	add	r3, r2
 800c50a:	1e5a      	subs	r2, r3, #1
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	fbb2 f3f3 	udiv	r3, r2, r3
 800c514:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	8afa      	ldrh	r2, [r7, #22]
 800c51c:	fb03 f202 	mul.w	r2, r3, r2
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	015a      	lsls	r2, r3, #5
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	4413      	add	r3, r2
 800c52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c530:	691a      	ldr	r2, [r3, #16]
 800c532:	8afb      	ldrh	r3, [r7, #22]
 800c534:	04d9      	lsls	r1, r3, #19
 800c536:	4b38      	ldr	r3, [pc, #224]	; (800c618 <USB_EPStartXfer+0x48c>)
 800c538:	400b      	ands	r3, r1
 800c53a:	69b9      	ldr	r1, [r7, #24]
 800c53c:	0148      	lsls	r0, r1, #5
 800c53e:	69f9      	ldr	r1, [r7, #28]
 800c540:	4401      	add	r1, r0
 800c542:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c546:	4313      	orrs	r3, r2
 800c548:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	015a      	lsls	r2, r3, #5
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	4413      	add	r3, r2
 800c552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c556:	691a      	ldr	r2, [r3, #16]
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	69db      	ldr	r3, [r3, #28]
 800c55c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c560:	69b9      	ldr	r1, [r7, #24]
 800c562:	0148      	lsls	r0, r1, #5
 800c564:	69f9      	ldr	r1, [r7, #28]
 800c566:	4401      	add	r1, r0
 800c568:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c56c:	4313      	orrs	r3, r2
 800c56e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c570:	79fb      	ldrb	r3, [r7, #7]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d10d      	bne.n	800c592 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d009      	beq.n	800c592 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	6919      	ldr	r1, [r3, #16]
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	015a      	lsls	r2, r3, #5
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	4413      	add	r3, r2
 800c58a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c58e:	460a      	mov	r2, r1
 800c590:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	791b      	ldrb	r3, [r3, #4]
 800c596:	2b01      	cmp	r3, #1
 800c598:	d128      	bne.n	800c5ec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d110      	bne.n	800c5cc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	015a      	lsls	r2, r3, #5
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	69ba      	ldr	r2, [r7, #24]
 800c5ba:	0151      	lsls	r1, r2, #5
 800c5bc:	69fa      	ldr	r2, [r7, #28]
 800c5be:	440a      	add	r2, r1
 800c5c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5c8:	6013      	str	r3, [r2, #0]
 800c5ca:	e00f      	b.n	800c5ec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	015a      	lsls	r2, r3, #5
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	69ba      	ldr	r2, [r7, #24]
 800c5dc:	0151      	lsls	r1, r2, #5
 800c5de:	69fa      	ldr	r2, [r7, #28]
 800c5e0:	440a      	add	r2, r1
 800c5e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	015a      	lsls	r2, r3, #5
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	69ba      	ldr	r2, [r7, #24]
 800c5fc:	0151      	lsls	r1, r2, #5
 800c5fe:	69fa      	ldr	r2, [r7, #28]
 800c600:	440a      	add	r2, r1
 800c602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c606:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c60a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3720      	adds	r7, #32
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	1ff80000 	.word	0x1ff80000

0800c61c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b087      	sub	sp, #28
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	4613      	mov	r3, r2
 800c628:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	785b      	ldrb	r3, [r3, #1]
 800c638:	2b01      	cmp	r3, #1
 800c63a:	f040 80ce 	bne.w	800c7da <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d132      	bne.n	800c6ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	015a      	lsls	r2, r3, #5
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	4413      	add	r3, r2
 800c64e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	693a      	ldr	r2, [r7, #16]
 800c656:	0151      	lsls	r1, r2, #5
 800c658:	697a      	ldr	r2, [r7, #20]
 800c65a:	440a      	add	r2, r1
 800c65c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c660:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c664:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c668:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	015a      	lsls	r2, r3, #5
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	4413      	add	r3, r2
 800c672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	693a      	ldr	r2, [r7, #16]
 800c67a:	0151      	lsls	r1, r2, #5
 800c67c:	697a      	ldr	r2, [r7, #20]
 800c67e:	440a      	add	r2, r1
 800c680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	015a      	lsls	r2, r3, #5
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	4413      	add	r3, r2
 800c692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	693a      	ldr	r2, [r7, #16]
 800c69a:	0151      	lsls	r1, r2, #5
 800c69c:	697a      	ldr	r2, [r7, #20]
 800c69e:	440a      	add	r2, r1
 800c6a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6a4:	0cdb      	lsrs	r3, r3, #19
 800c6a6:	04db      	lsls	r3, r3, #19
 800c6a8:	6113      	str	r3, [r2, #16]
 800c6aa:	e04e      	b.n	800c74a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	015a      	lsls	r2, r3, #5
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	693a      	ldr	r2, [r7, #16]
 800c6bc:	0151      	lsls	r1, r2, #5
 800c6be:	697a      	ldr	r2, [r7, #20]
 800c6c0:	440a      	add	r2, r1
 800c6c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6c6:	0cdb      	lsrs	r3, r3, #19
 800c6c8:	04db      	lsls	r3, r3, #19
 800c6ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	015a      	lsls	r2, r3, #5
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	0151      	lsls	r1, r2, #5
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	440a      	add	r2, r1
 800c6e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	699a      	ldr	r2, [r3, #24]
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d903      	bls.n	800c704 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	68da      	ldr	r2, [r3, #12]
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	015a      	lsls	r2, r3, #5
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	4413      	add	r3, r2
 800c70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	693a      	ldr	r2, [r7, #16]
 800c714:	0151      	lsls	r1, r2, #5
 800c716:	697a      	ldr	r2, [r7, #20]
 800c718:	440a      	add	r2, r1
 800c71a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c71e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c722:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	015a      	lsls	r2, r3, #5
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	4413      	add	r3, r2
 800c72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c730:	691a      	ldr	r2, [r3, #16]
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c73a:	6939      	ldr	r1, [r7, #16]
 800c73c:	0148      	lsls	r0, r1, #5
 800c73e:	6979      	ldr	r1, [r7, #20]
 800c740:	4401      	add	r1, r0
 800c742:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c746:	4313      	orrs	r3, r2
 800c748:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c74a:	79fb      	ldrb	r3, [r7, #7]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d11e      	bne.n	800c78e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d009      	beq.n	800c76c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	015a      	lsls	r2, r3, #5
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	4413      	add	r3, r2
 800c760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c764:	461a      	mov	r2, r3
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	695b      	ldr	r3, [r3, #20]
 800c76a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	015a      	lsls	r2, r3, #5
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	4413      	add	r3, r2
 800c774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	693a      	ldr	r2, [r7, #16]
 800c77c:	0151      	lsls	r1, r2, #5
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	440a      	add	r2, r1
 800c782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c786:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c78a:	6013      	str	r3, [r2, #0]
 800c78c:	e097      	b.n	800c8be <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	015a      	lsls	r2, r3, #5
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	4413      	add	r3, r2
 800c796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	0151      	lsls	r1, r2, #5
 800c7a0:	697a      	ldr	r2, [r7, #20]
 800c7a2:	440a      	add	r2, r1
 800c7a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c7ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	699b      	ldr	r3, [r3, #24]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f000 8083 	beq.w	800c8be <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	f003 030f 	and.w	r3, r3, #15
 800c7c8:	2101      	movs	r1, #1
 800c7ca:	fa01 f303 	lsl.w	r3, r1, r3
 800c7ce:	6979      	ldr	r1, [r7, #20]
 800c7d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	634b      	str	r3, [r1, #52]	; 0x34
 800c7d8:	e071      	b.n	800c8be <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	015a      	lsls	r2, r3, #5
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7e6:	691b      	ldr	r3, [r3, #16]
 800c7e8:	693a      	ldr	r2, [r7, #16]
 800c7ea:	0151      	lsls	r1, r2, #5
 800c7ec:	697a      	ldr	r2, [r7, #20]
 800c7ee:	440a      	add	r2, r1
 800c7f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7f4:	0cdb      	lsrs	r3, r3, #19
 800c7f6:	04db      	lsls	r3, r3, #19
 800c7f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	015a      	lsls	r2, r3, #5
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	4413      	add	r3, r2
 800c802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	0151      	lsls	r1, r2, #5
 800c80c:	697a      	ldr	r2, [r7, #20]
 800c80e:	440a      	add	r2, r1
 800c810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c814:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c818:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c81c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	699b      	ldr	r3, [r3, #24]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d003      	beq.n	800c82e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	68da      	ldr	r2, [r3, #12]
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	68da      	ldr	r2, [r3, #12]
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	015a      	lsls	r2, r3, #5
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	4413      	add	r3, r2
 800c83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c842:	691b      	ldr	r3, [r3, #16]
 800c844:	693a      	ldr	r2, [r7, #16]
 800c846:	0151      	lsls	r1, r2, #5
 800c848:	697a      	ldr	r2, [r7, #20]
 800c84a:	440a      	add	r2, r1
 800c84c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c854:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	015a      	lsls	r2, r3, #5
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	4413      	add	r3, r2
 800c85e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c862:	691a      	ldr	r2, [r3, #16]
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	69db      	ldr	r3, [r3, #28]
 800c868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c86c:	6939      	ldr	r1, [r7, #16]
 800c86e:	0148      	lsls	r0, r1, #5
 800c870:	6979      	ldr	r1, [r7, #20]
 800c872:	4401      	add	r1, r0
 800c874:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c878:	4313      	orrs	r3, r2
 800c87a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c87c:	79fb      	ldrb	r3, [r7, #7]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d10d      	bne.n	800c89e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d009      	beq.n	800c89e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	6919      	ldr	r1, [r3, #16]
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	015a      	lsls	r2, r3, #5
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	4413      	add	r3, r2
 800c896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c89a:	460a      	mov	r2, r1
 800c89c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	015a      	lsls	r2, r3, #5
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	693a      	ldr	r2, [r7, #16]
 800c8ae:	0151      	lsls	r1, r2, #5
 800c8b0:	697a      	ldr	r2, [r7, #20]
 800c8b2:	440a      	add	r2, r1
 800c8b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c8bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c8be:	2300      	movs	r3, #0
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	371c      	adds	r7, #28
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	785b      	ldrb	r3, [r3, #1]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d14a      	bne.n	800c980 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	015a      	lsls	r2, r3, #5
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c902:	f040 8086 	bne.w	800ca12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	015a      	lsls	r2, r3, #5
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	4413      	add	r3, r2
 800c910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	683a      	ldr	r2, [r7, #0]
 800c918:	7812      	ldrb	r2, [r2, #0]
 800c91a:	0151      	lsls	r1, r2, #5
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	440a      	add	r2, r1
 800c920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c924:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c928:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	015a      	lsls	r2, r3, #5
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	4413      	add	r3, r2
 800c934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	683a      	ldr	r2, [r7, #0]
 800c93c:	7812      	ldrb	r2, [r2, #0]
 800c93e:	0151      	lsls	r1, r2, #5
 800c940:	693a      	ldr	r2, [r7, #16]
 800c942:	440a      	add	r2, r1
 800c944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c948:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c94c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3301      	adds	r3, #1
 800c952:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f242 7210 	movw	r2, #10000	; 0x2710
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d902      	bls.n	800c964 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	75fb      	strb	r3, [r7, #23]
          break;
 800c962:	e056      	b.n	800ca12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	015a      	lsls	r2, r3, #5
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	4413      	add	r3, r2
 800c96e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c978:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c97c:	d0e7      	beq.n	800c94e <USB_EPStopXfer+0x82>
 800c97e:	e048      	b.n	800ca12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	015a      	lsls	r2, r3, #5
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	4413      	add	r3, r2
 800c98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c998:	d13b      	bne.n	800ca12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	015a      	lsls	r2, r3, #5
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	683a      	ldr	r2, [r7, #0]
 800c9ac:	7812      	ldrb	r2, [r2, #0]
 800c9ae:	0151      	lsls	r1, r2, #5
 800c9b0:	693a      	ldr	r2, [r7, #16]
 800c9b2:	440a      	add	r2, r1
 800c9b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c9bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	015a      	lsls	r2, r3, #5
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	683a      	ldr	r2, [r7, #0]
 800c9d0:	7812      	ldrb	r2, [r2, #0]
 800c9d2:	0151      	lsls	r1, r2, #5
 800c9d4:	693a      	ldr	r2, [r7, #16]
 800c9d6:	440a      	add	r2, r1
 800c9d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f242 7210 	movw	r2, #10000	; 0x2710
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d902      	bls.n	800c9f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	75fb      	strb	r3, [r7, #23]
          break;
 800c9f6:	e00c      	b.n	800ca12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	015a      	lsls	r2, r3, #5
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	4413      	add	r3, r2
 800ca02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca10:	d0e7      	beq.n	800c9e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	371c      	adds	r7, #28
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b089      	sub	sp, #36	; 0x24
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	4611      	mov	r1, r2
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	460b      	mov	r3, r1
 800ca30:	71fb      	strb	r3, [r7, #7]
 800ca32:	4613      	mov	r3, r2
 800ca34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ca3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d123      	bne.n	800ca8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ca46:	88bb      	ldrh	r3, [r7, #4]
 800ca48:	3303      	adds	r3, #3
 800ca4a:	089b      	lsrs	r3, r3, #2
 800ca4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ca4e:	2300      	movs	r3, #0
 800ca50:	61bb      	str	r3, [r7, #24]
 800ca52:	e018      	b.n	800ca86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ca54:	79fb      	ldrb	r3, [r7, #7]
 800ca56:	031a      	lsls	r2, r3, #12
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	4413      	add	r3, r2
 800ca5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca60:	461a      	mov	r2, r3
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	3301      	adds	r3, #1
 800ca72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	3301      	adds	r3, #1
 800ca78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	3301      	adds	r3, #1
 800ca84:	61bb      	str	r3, [r7, #24]
 800ca86:	69ba      	ldr	r2, [r7, #24]
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d3e2      	bcc.n	800ca54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3724      	adds	r7, #36	; 0x24
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b08b      	sub	sp, #44	; 0x2c
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	4613      	mov	r3, r2
 800caa8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cab2:	88fb      	ldrh	r3, [r7, #6]
 800cab4:	089b      	lsrs	r3, r3, #2
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800caba:	88fb      	ldrh	r3, [r7, #6]
 800cabc:	f003 0303 	and.w	r3, r3, #3
 800cac0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cac2:	2300      	movs	r3, #0
 800cac4:	623b      	str	r3, [r7, #32]
 800cac6:	e014      	b.n	800caf2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	601a      	str	r2, [r3, #0]
    pDest++;
 800cad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad6:	3301      	adds	r3, #1
 800cad8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cadc:	3301      	adds	r3, #1
 800cade:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae2:	3301      	adds	r3, #1
 800cae4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae8:	3301      	adds	r3, #1
 800caea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800caec:	6a3b      	ldr	r3, [r7, #32]
 800caee:	3301      	adds	r3, #1
 800caf0:	623b      	str	r3, [r7, #32]
 800caf2:	6a3a      	ldr	r2, [r7, #32]
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d3e6      	bcc.n	800cac8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cafa:	8bfb      	ldrh	r3, [r7, #30]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d01e      	beq.n	800cb3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cb00:	2300      	movs	r3, #0
 800cb02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	f107 0310 	add.w	r3, r7, #16
 800cb10:	6812      	ldr	r2, [r2, #0]
 800cb12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cb14:	693a      	ldr	r2, [r7, #16]
 800cb16:	6a3b      	ldr	r3, [r7, #32]
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	00db      	lsls	r3, r3, #3
 800cb1c:	fa22 f303 	lsr.w	r3, r2, r3
 800cb20:	b2da      	uxtb	r2, r3
 800cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb24:	701a      	strb	r2, [r3, #0]
      i++;
 800cb26:	6a3b      	ldr	r3, [r7, #32]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	623b      	str	r3, [r7, #32]
      pDest++;
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	3301      	adds	r3, #1
 800cb30:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cb32:	8bfb      	ldrh	r3, [r7, #30]
 800cb34:	3b01      	subs	r3, #1
 800cb36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cb38:	8bfb      	ldrh	r3, [r7, #30]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1ea      	bne.n	800cb14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	372c      	adds	r7, #44	; 0x2c
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	785b      	ldrb	r3, [r3, #1]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d12c      	bne.n	800cbc2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	015a      	lsls	r2, r3, #5
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	4413      	add	r3, r2
 800cb70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	db12      	blt.n	800cba0 <USB_EPSetStall+0x54>
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d00f      	beq.n	800cba0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	68ba      	ldr	r2, [r7, #8]
 800cb90:	0151      	lsls	r1, r2, #5
 800cb92:	68fa      	ldr	r2, [r7, #12]
 800cb94:	440a      	add	r2, r1
 800cb96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cb9e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	015a      	lsls	r2, r3, #5
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	4413      	add	r3, r2
 800cba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	68ba      	ldr	r2, [r7, #8]
 800cbb0:	0151      	lsls	r1, r2, #5
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	440a      	add	r2, r1
 800cbb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	e02b      	b.n	800cc1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	015a      	lsls	r2, r3, #5
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	4413      	add	r3, r2
 800cbca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	db12      	blt.n	800cbfa <USB_EPSetStall+0xae>
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00f      	beq.n	800cbfa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	015a      	lsls	r2, r3, #5
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68ba      	ldr	r2, [r7, #8]
 800cbea:	0151      	lsls	r1, r2, #5
 800cbec:	68fa      	ldr	r2, [r7, #12]
 800cbee:	440a      	add	r2, r1
 800cbf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cbf8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	015a      	lsls	r2, r3, #5
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	4413      	add	r3, r2
 800cc02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	0151      	lsls	r1, r2, #5
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	440a      	add	r2, r1
 800cc10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3714      	adds	r7, #20
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	785b      	ldrb	r3, [r3, #1]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d128      	bne.n	800cc96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	015a      	lsls	r2, r3, #5
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68ba      	ldr	r2, [r7, #8]
 800cc54:	0151      	lsls	r1, r2, #5
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	440a      	add	r2, r1
 800cc5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	791b      	ldrb	r3, [r3, #4]
 800cc68:	2b03      	cmp	r3, #3
 800cc6a:	d003      	beq.n	800cc74 <USB_EPClearStall+0x4c>
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	791b      	ldrb	r3, [r3, #4]
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d138      	bne.n	800cce6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	015a      	lsls	r2, r3, #5
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	4413      	add	r3, r2
 800cc7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	0151      	lsls	r1, r2, #5
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	440a      	add	r2, r1
 800cc8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc92:	6013      	str	r3, [r2, #0]
 800cc94:	e027      	b.n	800cce6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	015a      	lsls	r2, r3, #5
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	68ba      	ldr	r2, [r7, #8]
 800cca6:	0151      	lsls	r1, r2, #5
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	440a      	add	r2, r1
 800ccac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ccb4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	791b      	ldrb	r3, [r3, #4]
 800ccba:	2b03      	cmp	r3, #3
 800ccbc:	d003      	beq.n	800ccc6 <USB_EPClearStall+0x9e>
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	791b      	ldrb	r3, [r3, #4]
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	d10f      	bne.n	800cce6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	015a      	lsls	r2, r3, #5
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	4413      	add	r3, r2
 800ccce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	68ba      	ldr	r2, [r7, #8]
 800ccd6:	0151      	lsls	r1, r2, #5
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	440a      	add	r2, r1
 800ccdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cce4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cce6:	2300      	movs	r3, #0
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cd16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd1e:	681a      	ldr	r2, [r3, #0]
 800cd20:	78fb      	ldrb	r3, [r7, #3]
 800cd22:	011b      	lsls	r3, r3, #4
 800cd24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cd28:	68f9      	ldr	r1, [r7, #12]
 800cd2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b085      	sub	sp, #20
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68fa      	ldr	r2, [r7, #12]
 800cd56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cd5a:	f023 0303 	bic.w	r3, r3, #3
 800cd5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd6e:	f023 0302 	bic.w	r3, r3, #2
 800cd72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3714      	adds	r7, #20
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr

0800cd82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cd82:	b480      	push	{r7}
 800cd84:	b085      	sub	sp, #20
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cd9c:	f023 0303 	bic.w	r3, r3, #3
 800cda0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdb0:	f043 0302 	orr.w	r3, r3, #2
 800cdb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3714      	adds	r7, #20
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	695b      	ldr	r3, [r3, #20]
 800cdd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	699b      	ldr	r3, [r3, #24]
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	4013      	ands	r3, r2
 800cdda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cddc:	68fb      	ldr	r3, [r7, #12]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3714      	adds	r7, #20
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cdea:	b480      	push	{r7}
 800cdec:	b085      	sub	sp, #20
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdfc:	699b      	ldr	r3, [r3, #24]
 800cdfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce06:	69db      	ldr	r3, [r3, #28]
 800ce08:	68ba      	ldr	r2, [r7, #8]
 800ce0a:	4013      	ands	r3, r2
 800ce0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	0c1b      	lsrs	r3, r3, #16
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3714      	adds	r7, #20
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr

0800ce1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce1e:	b480      	push	{r7}
 800ce20:	b085      	sub	sp, #20
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce30:	699b      	ldr	r3, [r3, #24]
 800ce32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce3a:	69db      	ldr	r3, [r3, #28]
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	4013      	ands	r3, r2
 800ce40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	b29b      	uxth	r3, r3
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3714      	adds	r7, #20
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr

0800ce52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ce52:	b480      	push	{r7}
 800ce54:	b085      	sub	sp, #20
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ce62:	78fb      	ldrb	r3, [r7, #3]
 800ce64:	015a      	lsls	r2, r3, #5
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	4413      	add	r3, r2
 800ce6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce78:	695b      	ldr	r3, [r3, #20]
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	4013      	ands	r3, r2
 800ce7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ce80:	68bb      	ldr	r3, [r7, #8]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3714      	adds	r7, #20
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr

0800ce8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ce8e:	b480      	push	{r7}
 800ce90:	b087      	sub	sp, #28
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	460b      	mov	r3, r1
 800ce98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cea4:	691b      	ldr	r3, [r3, #16]
 800cea6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ceb2:	78fb      	ldrb	r3, [r7, #3]
 800ceb4:	f003 030f 	and.w	r3, r3, #15
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	fa22 f303 	lsr.w	r3, r2, r3
 800cebe:	01db      	lsls	r3, r3, #7
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	4313      	orrs	r3, r2
 800cec6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cec8:	78fb      	ldrb	r3, [r7, #3]
 800ceca:	015a      	lsls	r2, r3, #5
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	4413      	add	r3, r2
 800ced0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	693a      	ldr	r2, [r7, #16]
 800ced8:	4013      	ands	r3, r2
 800ceda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cedc:	68bb      	ldr	r3, [r7, #8]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	371c      	adds	r7, #28
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ceea:	b480      	push	{r7}
 800ceec:	b083      	sub	sp, #12
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	695b      	ldr	r3, [r3, #20]
 800cef6:	f003 0301 	and.w	r3, r3, #1
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	370c      	adds	r7, #12
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr

0800cf06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cf06:	b480      	push	{r7}
 800cf08:	b085      	sub	sp, #20
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cf24:	f023 0307 	bic.w	r3, r3, #7
 800cf28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3714      	adds	r7, #20
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b087      	sub	sp, #28
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	460b      	mov	r3, r1
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	333c      	adds	r3, #60	; 0x3c
 800cf62:	3304      	adds	r3, #4
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	4a26      	ldr	r2, [pc, #152]	; (800d004 <USB_EP0_OutStart+0xb8>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d90a      	bls.n	800cf86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf80:	d101      	bne.n	800cf86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cf82:	2300      	movs	r3, #0
 800cf84:	e037      	b.n	800cff6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	2300      	movs	r3, #0
 800cf90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf98:	691b      	ldr	r3, [r3, #16]
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cfa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfac:	691b      	ldr	r3, [r3, #16]
 800cfae:	697a      	ldr	r2, [r7, #20]
 800cfb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfb4:	f043 0318 	orr.w	r3, r3, #24
 800cfb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	697a      	ldr	r2, [r7, #20]
 800cfc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cfcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cfce:	7afb      	ldrb	r3, [r7, #11]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d10f      	bne.n	800cff4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfda:	461a      	mov	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	697a      	ldr	r2, [r7, #20]
 800cfea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cff2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cff4:	2300      	movs	r3, #0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	371c      	adds	r7, #28
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr
 800d002:	bf00      	nop
 800d004:	4f54300a 	.word	0x4f54300a

0800d008 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d010:	2300      	movs	r3, #0
 800d012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	3301      	adds	r3, #1
 800d018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	4a13      	ldr	r2, [pc, #76]	; (800d06c <USB_CoreReset+0x64>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d901      	bls.n	800d026 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d022:	2303      	movs	r3, #3
 800d024:	e01b      	b.n	800d05e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	daf2      	bge.n	800d014 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d02e:	2300      	movs	r3, #0
 800d030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	691b      	ldr	r3, [r3, #16]
 800d036:	f043 0201 	orr.w	r2, r3, #1
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3301      	adds	r3, #1
 800d042:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	4a09      	ldr	r2, [pc, #36]	; (800d06c <USB_CoreReset+0x64>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d901      	bls.n	800d050 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d04c:	2303      	movs	r3, #3
 800d04e:	e006      	b.n	800d05e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	691b      	ldr	r3, [r3, #16]
 800d054:	f003 0301 	and.w	r3, r3, #1
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d0f0      	beq.n	800d03e <USB_CoreReset+0x36>

  return HAL_OK;
 800d05c:	2300      	movs	r3, #0
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3714      	adds	r7, #20
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop
 800d06c:	00030d40 	.word	0x00030d40

0800d070 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	460b      	mov	r3, r1
 800d07a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d07c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d080:	f002 fca0 	bl	800f9c4 <USBD_static_malloc>
 800d084:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d109      	bne.n	800d0a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	32b0      	adds	r2, #176	; 0xb0
 800d096:	2100      	movs	r1, #0
 800d098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d09c:	2302      	movs	r3, #2
 800d09e:	e0d4      	b.n	800d24a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d0a0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f002 fd0a 	bl	800fac0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	32b0      	adds	r2, #176	; 0xb0
 800d0b6:	68f9      	ldr	r1, [r7, #12]
 800d0b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	32b0      	adds	r2, #176	; 0xb0
 800d0c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	7c1b      	ldrb	r3, [r3, #16]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d138      	bne.n	800d14a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d0d8:	4b5e      	ldr	r3, [pc, #376]	; (800d254 <USBD_CDC_Init+0x1e4>)
 800d0da:	7819      	ldrb	r1, [r3, #0]
 800d0dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f002 fb4b 	bl	800f77e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d0e8:	4b5a      	ldr	r3, [pc, #360]	; (800d254 <USBD_CDC_Init+0x1e4>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	f003 020f 	and.w	r2, r3, #15
 800d0f0:	6879      	ldr	r1, [r7, #4]
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	4413      	add	r3, r2
 800d0f8:	009b      	lsls	r3, r3, #2
 800d0fa:	440b      	add	r3, r1
 800d0fc:	3324      	adds	r3, #36	; 0x24
 800d0fe:	2201      	movs	r2, #1
 800d100:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d102:	4b55      	ldr	r3, [pc, #340]	; (800d258 <USBD_CDC_Init+0x1e8>)
 800d104:	7819      	ldrb	r1, [r3, #0]
 800d106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d10a:	2202      	movs	r2, #2
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f002 fb36 	bl	800f77e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d112:	4b51      	ldr	r3, [pc, #324]	; (800d258 <USBD_CDC_Init+0x1e8>)
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	f003 020f 	and.w	r2, r3, #15
 800d11a:	6879      	ldr	r1, [r7, #4]
 800d11c:	4613      	mov	r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	4413      	add	r3, r2
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	440b      	add	r3, r1
 800d126:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d12a:	2201      	movs	r2, #1
 800d12c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d12e:	4b4b      	ldr	r3, [pc, #300]	; (800d25c <USBD_CDC_Init+0x1ec>)
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	f003 020f 	and.w	r2, r3, #15
 800d136:	6879      	ldr	r1, [r7, #4]
 800d138:	4613      	mov	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	4413      	add	r3, r2
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	440b      	add	r3, r1
 800d142:	3326      	adds	r3, #38	; 0x26
 800d144:	2210      	movs	r2, #16
 800d146:	801a      	strh	r2, [r3, #0]
 800d148:	e035      	b.n	800d1b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d14a:	4b42      	ldr	r3, [pc, #264]	; (800d254 <USBD_CDC_Init+0x1e4>)
 800d14c:	7819      	ldrb	r1, [r3, #0]
 800d14e:	2340      	movs	r3, #64	; 0x40
 800d150:	2202      	movs	r2, #2
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f002 fb13 	bl	800f77e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d158:	4b3e      	ldr	r3, [pc, #248]	; (800d254 <USBD_CDC_Init+0x1e4>)
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	f003 020f 	and.w	r2, r3, #15
 800d160:	6879      	ldr	r1, [r7, #4]
 800d162:	4613      	mov	r3, r2
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	4413      	add	r3, r2
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	440b      	add	r3, r1
 800d16c:	3324      	adds	r3, #36	; 0x24
 800d16e:	2201      	movs	r2, #1
 800d170:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d172:	4b39      	ldr	r3, [pc, #228]	; (800d258 <USBD_CDC_Init+0x1e8>)
 800d174:	7819      	ldrb	r1, [r3, #0]
 800d176:	2340      	movs	r3, #64	; 0x40
 800d178:	2202      	movs	r2, #2
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f002 faff 	bl	800f77e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d180:	4b35      	ldr	r3, [pc, #212]	; (800d258 <USBD_CDC_Init+0x1e8>)
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	f003 020f 	and.w	r2, r3, #15
 800d188:	6879      	ldr	r1, [r7, #4]
 800d18a:	4613      	mov	r3, r2
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	4413      	add	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	440b      	add	r3, r1
 800d194:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d198:	2201      	movs	r2, #1
 800d19a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d19c:	4b2f      	ldr	r3, [pc, #188]	; (800d25c <USBD_CDC_Init+0x1ec>)
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	f003 020f 	and.w	r2, r3, #15
 800d1a4:	6879      	ldr	r1, [r7, #4]
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	4413      	add	r3, r2
 800d1ac:	009b      	lsls	r3, r3, #2
 800d1ae:	440b      	add	r3, r1
 800d1b0:	3326      	adds	r3, #38	; 0x26
 800d1b2:	2210      	movs	r2, #16
 800d1b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d1b6:	4b29      	ldr	r3, [pc, #164]	; (800d25c <USBD_CDC_Init+0x1ec>)
 800d1b8:	7819      	ldrb	r1, [r3, #0]
 800d1ba:	2308      	movs	r3, #8
 800d1bc:	2203      	movs	r2, #3
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f002 fadd 	bl	800f77e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d1c4:	4b25      	ldr	r3, [pc, #148]	; (800d25c <USBD_CDC_Init+0x1ec>)
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	f003 020f 	and.w	r2, r3, #15
 800d1cc:	6879      	ldr	r1, [r7, #4]
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	4413      	add	r3, r2
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	440b      	add	r3, r1
 800d1d8:	3324      	adds	r3, #36	; 0x24
 800d1da:	2201      	movs	r2, #1
 800d1dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	33b0      	adds	r3, #176	; 0xb0
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	4413      	add	r3, r2
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d210:	2b00      	cmp	r3, #0
 800d212:	d101      	bne.n	800d218 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d214:	2302      	movs	r3, #2
 800d216:	e018      	b.n	800d24a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	7c1b      	ldrb	r3, [r3, #16]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d10a      	bne.n	800d236 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d220:	4b0d      	ldr	r3, [pc, #52]	; (800d258 <USBD_CDC_Init+0x1e8>)
 800d222:	7819      	ldrb	r1, [r3, #0]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d22a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f002 fb94 	bl	800f95c <USBD_LL_PrepareReceive>
 800d234:	e008      	b.n	800d248 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d236:	4b08      	ldr	r3, [pc, #32]	; (800d258 <USBD_CDC_Init+0x1e8>)
 800d238:	7819      	ldrb	r1, [r3, #0]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d240:	2340      	movs	r3, #64	; 0x40
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f002 fb8a 	bl	800f95c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
 800d252:	bf00      	nop
 800d254:	20000093 	.word	0x20000093
 800d258:	20000094 	.word	0x20000094
 800d25c:	20000095 	.word	0x20000095

0800d260 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	460b      	mov	r3, r1
 800d26a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d26c:	4b3a      	ldr	r3, [pc, #232]	; (800d358 <USBD_CDC_DeInit+0xf8>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f002 faa9 	bl	800f7ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d278:	4b37      	ldr	r3, [pc, #220]	; (800d358 <USBD_CDC_DeInit+0xf8>)
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	f003 020f 	and.w	r2, r3, #15
 800d280:	6879      	ldr	r1, [r7, #4]
 800d282:	4613      	mov	r3, r2
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	4413      	add	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	440b      	add	r3, r1
 800d28c:	3324      	adds	r3, #36	; 0x24
 800d28e:	2200      	movs	r2, #0
 800d290:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d292:	4b32      	ldr	r3, [pc, #200]	; (800d35c <USBD_CDC_DeInit+0xfc>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	4619      	mov	r1, r3
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f002 fa96 	bl	800f7ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d29e:	4b2f      	ldr	r3, [pc, #188]	; (800d35c <USBD_CDC_DeInit+0xfc>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	f003 020f 	and.w	r2, r3, #15
 800d2a6:	6879      	ldr	r1, [r7, #4]
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	4413      	add	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	440b      	add	r3, r1
 800d2b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d2ba:	4b29      	ldr	r3, [pc, #164]	; (800d360 <USBD_CDC_DeInit+0x100>)
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	4619      	mov	r1, r3
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f002 fa82 	bl	800f7ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d2c6:	4b26      	ldr	r3, [pc, #152]	; (800d360 <USBD_CDC_DeInit+0x100>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	f003 020f 	and.w	r2, r3, #15
 800d2ce:	6879      	ldr	r1, [r7, #4]
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4413      	add	r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	440b      	add	r3, r1
 800d2da:	3324      	adds	r3, #36	; 0x24
 800d2dc:	2200      	movs	r2, #0
 800d2de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d2e0:	4b1f      	ldr	r3, [pc, #124]	; (800d360 <USBD_CDC_DeInit+0x100>)
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	f003 020f 	and.w	r2, r3, #15
 800d2e8:	6879      	ldr	r1, [r7, #4]
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	4413      	add	r3, r2
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	440b      	add	r3, r1
 800d2f4:	3326      	adds	r3, #38	; 0x26
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	32b0      	adds	r2, #176	; 0xb0
 800d304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d01f      	beq.n	800d34c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	33b0      	adds	r3, #176	; 0xb0
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	4413      	add	r3, r2
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	32b0      	adds	r2, #176	; 0xb0
 800d32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d32e:	4618      	mov	r0, r3
 800d330:	f002 fb56 	bl	800f9e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	32b0      	adds	r2, #176	; 0xb0
 800d33e:	2100      	movs	r1, #0
 800d340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	20000093 	.word	0x20000093
 800d35c:	20000094 	.word	0x20000094
 800d360:	20000095 	.word	0x20000095

0800d364 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	32b0      	adds	r2, #176	; 0xb0
 800d378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d37c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d37e:	2300      	movs	r3, #0
 800d380:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d382:	2300      	movs	r3, #0
 800d384:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d386:	2300      	movs	r3, #0
 800d388:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d101      	bne.n	800d394 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d390:	2303      	movs	r3, #3
 800d392:	e0bf      	b.n	800d514 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d050      	beq.n	800d442 <USBD_CDC_Setup+0xde>
 800d3a0:	2b20      	cmp	r3, #32
 800d3a2:	f040 80af 	bne.w	800d504 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	88db      	ldrh	r3, [r3, #6]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d03a      	beq.n	800d424 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	b25b      	sxtb	r3, r3
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	da1b      	bge.n	800d3f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	33b0      	adds	r3, #176	; 0xb0
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	4413      	add	r3, r2
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	683a      	ldr	r2, [r7, #0]
 800d3cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d3ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d3d0:	683a      	ldr	r2, [r7, #0]
 800d3d2:	88d2      	ldrh	r2, [r2, #6]
 800d3d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	88db      	ldrh	r3, [r3, #6]
 800d3da:	2b07      	cmp	r3, #7
 800d3dc:	bf28      	it	cs
 800d3de:	2307      	movcs	r3, #7
 800d3e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	89fa      	ldrh	r2, [r7, #14]
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f001 fd43 	bl	800ee74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d3ee:	e090      	b.n	800d512 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	785a      	ldrb	r2, [r3, #1]
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	88db      	ldrh	r3, [r3, #6]
 800d3fe:	2b3f      	cmp	r3, #63	; 0x3f
 800d400:	d803      	bhi.n	800d40a <USBD_CDC_Setup+0xa6>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	88db      	ldrh	r3, [r3, #6]
 800d406:	b2da      	uxtb	r2, r3
 800d408:	e000      	b.n	800d40c <USBD_CDC_Setup+0xa8>
 800d40a:	2240      	movs	r2, #64	; 0x40
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d412:	6939      	ldr	r1, [r7, #16]
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d41a:	461a      	mov	r2, r3
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f001 fd55 	bl	800eecc <USBD_CtlPrepareRx>
      break;
 800d422:	e076      	b.n	800d512 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	33b0      	adds	r3, #176	; 0xb0
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	4413      	add	r3, r2
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	689b      	ldr	r3, [r3, #8]
 800d436:	683a      	ldr	r2, [r7, #0]
 800d438:	7850      	ldrb	r0, [r2, #1]
 800d43a:	2200      	movs	r2, #0
 800d43c:	6839      	ldr	r1, [r7, #0]
 800d43e:	4798      	blx	r3
      break;
 800d440:	e067      	b.n	800d512 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	785b      	ldrb	r3, [r3, #1]
 800d446:	2b0b      	cmp	r3, #11
 800d448:	d851      	bhi.n	800d4ee <USBD_CDC_Setup+0x18a>
 800d44a:	a201      	add	r2, pc, #4	; (adr r2, 800d450 <USBD_CDC_Setup+0xec>)
 800d44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d450:	0800d481 	.word	0x0800d481
 800d454:	0800d4fd 	.word	0x0800d4fd
 800d458:	0800d4ef 	.word	0x0800d4ef
 800d45c:	0800d4ef 	.word	0x0800d4ef
 800d460:	0800d4ef 	.word	0x0800d4ef
 800d464:	0800d4ef 	.word	0x0800d4ef
 800d468:	0800d4ef 	.word	0x0800d4ef
 800d46c:	0800d4ef 	.word	0x0800d4ef
 800d470:	0800d4ef 	.word	0x0800d4ef
 800d474:	0800d4ef 	.word	0x0800d4ef
 800d478:	0800d4ab 	.word	0x0800d4ab
 800d47c:	0800d4d5 	.word	0x0800d4d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d486:	b2db      	uxtb	r3, r3
 800d488:	2b03      	cmp	r3, #3
 800d48a:	d107      	bne.n	800d49c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d48c:	f107 030a 	add.w	r3, r7, #10
 800d490:	2202      	movs	r2, #2
 800d492:	4619      	mov	r1, r3
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f001 fced 	bl	800ee74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d49a:	e032      	b.n	800d502 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d49c:	6839      	ldr	r1, [r7, #0]
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f001 fc77 	bl	800ed92 <USBD_CtlError>
            ret = USBD_FAIL;
 800d4a4:	2303      	movs	r3, #3
 800d4a6:	75fb      	strb	r3, [r7, #23]
          break;
 800d4a8:	e02b      	b.n	800d502 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	2b03      	cmp	r3, #3
 800d4b4:	d107      	bne.n	800d4c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d4b6:	f107 030d 	add.w	r3, r7, #13
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	4619      	mov	r1, r3
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f001 fcd8 	bl	800ee74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d4c4:	e01d      	b.n	800d502 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f001 fc62 	bl	800ed92 <USBD_CtlError>
            ret = USBD_FAIL;
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	75fb      	strb	r3, [r7, #23]
          break;
 800d4d2:	e016      	b.n	800d502 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	2b03      	cmp	r3, #3
 800d4de:	d00f      	beq.n	800d500 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d4e0:	6839      	ldr	r1, [r7, #0]
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f001 fc55 	bl	800ed92 <USBD_CtlError>
            ret = USBD_FAIL;
 800d4e8:	2303      	movs	r3, #3
 800d4ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d4ec:	e008      	b.n	800d500 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d4ee:	6839      	ldr	r1, [r7, #0]
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f001 fc4e 	bl	800ed92 <USBD_CtlError>
          ret = USBD_FAIL;
 800d4f6:	2303      	movs	r3, #3
 800d4f8:	75fb      	strb	r3, [r7, #23]
          break;
 800d4fa:	e002      	b.n	800d502 <USBD_CDC_Setup+0x19e>
          break;
 800d4fc:	bf00      	nop
 800d4fe:	e008      	b.n	800d512 <USBD_CDC_Setup+0x1ae>
          break;
 800d500:	bf00      	nop
      }
      break;
 800d502:	e006      	b.n	800d512 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d504:	6839      	ldr	r1, [r7, #0]
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f001 fc43 	bl	800ed92 <USBD_CtlError>
      ret = USBD_FAIL;
 800d50c:	2303      	movs	r3, #3
 800d50e:	75fb      	strb	r3, [r7, #23]
      break;
 800d510:	bf00      	nop
  }

  return (uint8_t)ret;
 800d512:	7dfb      	ldrb	r3, [r7, #23]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3718      	adds	r7, #24
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	460b      	mov	r3, r1
 800d526:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d52e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	32b0      	adds	r2, #176	; 0xb0
 800d53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d101      	bne.n	800d546 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d542:	2303      	movs	r3, #3
 800d544:	e065      	b.n	800d612 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	32b0      	adds	r2, #176	; 0xb0
 800d550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d554:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d556:	78fb      	ldrb	r3, [r7, #3]
 800d558:	f003 020f 	and.w	r2, r3, #15
 800d55c:	6879      	ldr	r1, [r7, #4]
 800d55e:	4613      	mov	r3, r2
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	4413      	add	r3, r2
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	440b      	add	r3, r1
 800d568:	3318      	adds	r3, #24
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d02f      	beq.n	800d5d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d570:	78fb      	ldrb	r3, [r7, #3]
 800d572:	f003 020f 	and.w	r2, r3, #15
 800d576:	6879      	ldr	r1, [r7, #4]
 800d578:	4613      	mov	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4413      	add	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	440b      	add	r3, r1
 800d582:	3318      	adds	r3, #24
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	78fb      	ldrb	r3, [r7, #3]
 800d588:	f003 010f 	and.w	r1, r3, #15
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	460b      	mov	r3, r1
 800d590:	00db      	lsls	r3, r3, #3
 800d592:	440b      	add	r3, r1
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	4403      	add	r3, r0
 800d598:	3348      	adds	r3, #72	; 0x48
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d5a0:	fb01 f303 	mul.w	r3, r1, r3
 800d5a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d112      	bne.n	800d5d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d5aa:	78fb      	ldrb	r3, [r7, #3]
 800d5ac:	f003 020f 	and.w	r2, r3, #15
 800d5b0:	6879      	ldr	r1, [r7, #4]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	4413      	add	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	440b      	add	r3, r1
 800d5bc:	3318      	adds	r3, #24
 800d5be:	2200      	movs	r2, #0
 800d5c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d5c2:	78f9      	ldrb	r1, [r7, #3]
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f002 f9a6 	bl	800f91a <USBD_LL_Transmit>
 800d5ce:	e01f      	b.n	800d610 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	33b0      	adds	r3, #176	; 0xb0
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4413      	add	r3, r2
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	691b      	ldr	r3, [r3, #16]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d010      	beq.n	800d610 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	33b0      	adds	r3, #176	; 0xb0
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	4413      	add	r3, r2
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	691b      	ldr	r3, [r3, #16]
 800d600:	68ba      	ldr	r2, [r7, #8]
 800d602:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d606:	68ba      	ldr	r2, [r7, #8]
 800d608:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d60c:	78fa      	ldrb	r2, [r7, #3]
 800d60e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b084      	sub	sp, #16
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	460b      	mov	r3, r1
 800d624:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	32b0      	adds	r2, #176	; 0xb0
 800d630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d634:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	32b0      	adds	r2, #176	; 0xb0
 800d640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d101      	bne.n	800d64c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d648:	2303      	movs	r3, #3
 800d64a:	e01a      	b.n	800d682 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d64c:	78fb      	ldrb	r3, [r7, #3]
 800d64e:	4619      	mov	r1, r3
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f002 f9a4 	bl	800f99e <USBD_LL_GetRxDataSize>
 800d656:	4602      	mov	r2, r0
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	33b0      	adds	r3, #176	; 0xb0
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	4413      	add	r3, r2
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d67c:	4611      	mov	r1, r2
 800d67e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d680:	2300      	movs	r3, #0
}
 800d682:	4618      	mov	r0, r3
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b084      	sub	sp, #16
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	32b0      	adds	r2, #176	; 0xb0
 800d69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d101      	bne.n	800d6ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d6a8:	2303      	movs	r3, #3
 800d6aa:	e025      	b.n	800d6f8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	33b0      	adds	r3, #176	; 0xb0
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	4413      	add	r3, r2
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d01a      	beq.n	800d6f6 <USBD_CDC_EP0_RxReady+0x6c>
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d6c6:	2bff      	cmp	r3, #255	; 0xff
 800d6c8:	d015      	beq.n	800d6f6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	33b0      	adds	r3, #176	; 0xb0
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	4413      	add	r3, r2
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	68fa      	ldr	r2, [r7, #12]
 800d6de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d6e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d6e4:	68fa      	ldr	r2, [r7, #12]
 800d6e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d6ea:	b292      	uxth	r2, r2
 800d6ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	22ff      	movs	r2, #255	; 0xff
 800d6f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3710      	adds	r7, #16
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b086      	sub	sp, #24
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d708:	2182      	movs	r1, #130	; 0x82
 800d70a:	4818      	ldr	r0, [pc, #96]	; (800d76c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d70c:	f000 fd09 	bl	800e122 <USBD_GetEpDesc>
 800d710:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d712:	2101      	movs	r1, #1
 800d714:	4815      	ldr	r0, [pc, #84]	; (800d76c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d716:	f000 fd04 	bl	800e122 <USBD_GetEpDesc>
 800d71a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d71c:	2181      	movs	r1, #129	; 0x81
 800d71e:	4813      	ldr	r0, [pc, #76]	; (800d76c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d720:	f000 fcff 	bl	800e122 <USBD_GetEpDesc>
 800d724:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d002      	beq.n	800d732 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	2210      	movs	r2, #16
 800d730:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d006      	beq.n	800d746 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	2200      	movs	r2, #0
 800d73c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d740:	711a      	strb	r2, [r3, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d006      	beq.n	800d75a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2200      	movs	r2, #0
 800d750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d754:	711a      	strb	r2, [r3, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2243      	movs	r2, #67	; 0x43
 800d75e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d760:	4b02      	ldr	r3, [pc, #8]	; (800d76c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d762:	4618      	mov	r0, r3
 800d764:	3718      	adds	r7, #24
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	20000050 	.word	0x20000050

0800d770 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d778:	2182      	movs	r1, #130	; 0x82
 800d77a:	4818      	ldr	r0, [pc, #96]	; (800d7dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d77c:	f000 fcd1 	bl	800e122 <USBD_GetEpDesc>
 800d780:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d782:	2101      	movs	r1, #1
 800d784:	4815      	ldr	r0, [pc, #84]	; (800d7dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d786:	f000 fccc 	bl	800e122 <USBD_GetEpDesc>
 800d78a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d78c:	2181      	movs	r1, #129	; 0x81
 800d78e:	4813      	ldr	r0, [pc, #76]	; (800d7dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d790:	f000 fcc7 	bl	800e122 <USBD_GetEpDesc>
 800d794:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d002      	beq.n	800d7a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	2210      	movs	r2, #16
 800d7a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d006      	beq.n	800d7b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	711a      	strb	r2, [r3, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f042 0202 	orr.w	r2, r2, #2
 800d7b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d006      	beq.n	800d7ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	711a      	strb	r2, [r3, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f042 0202 	orr.w	r2, r2, #2
 800d7c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2243      	movs	r2, #67	; 0x43
 800d7ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d7d0:	4b02      	ldr	r3, [pc, #8]	; (800d7dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3718      	adds	r7, #24
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	20000050 	.word	0x20000050

0800d7e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b086      	sub	sp, #24
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d7e8:	2182      	movs	r1, #130	; 0x82
 800d7ea:	4818      	ldr	r0, [pc, #96]	; (800d84c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d7ec:	f000 fc99 	bl	800e122 <USBD_GetEpDesc>
 800d7f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d7f2:	2101      	movs	r1, #1
 800d7f4:	4815      	ldr	r0, [pc, #84]	; (800d84c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d7f6:	f000 fc94 	bl	800e122 <USBD_GetEpDesc>
 800d7fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d7fc:	2181      	movs	r1, #129	; 0x81
 800d7fe:	4813      	ldr	r0, [pc, #76]	; (800d84c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d800:	f000 fc8f 	bl	800e122 <USBD_GetEpDesc>
 800d804:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	2210      	movs	r2, #16
 800d810:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d006      	beq.n	800d826 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	2200      	movs	r2, #0
 800d81c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d820:	711a      	strb	r2, [r3, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d006      	beq.n	800d83a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2200      	movs	r2, #0
 800d830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d834:	711a      	strb	r2, [r3, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2243      	movs	r2, #67	; 0x43
 800d83e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d840:	4b02      	ldr	r3, [pc, #8]	; (800d84c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d842:	4618      	mov	r0, r3
 800d844:	3718      	adds	r7, #24
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	20000050 	.word	0x20000050

0800d850 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	220a      	movs	r2, #10
 800d85c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d85e:	4b03      	ldr	r3, [pc, #12]	; (800d86c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d860:	4618      	mov	r0, r3
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	2000000c 	.word	0x2000000c

0800d870 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d101      	bne.n	800d884 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d880:	2303      	movs	r3, #3
 800d882:	e009      	b.n	800d898 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d88a:	687a      	ldr	r2, [r7, #4]
 800d88c:	33b0      	adds	r3, #176	; 0xb0
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	4413      	add	r3, r2
 800d892:	683a      	ldr	r2, [r7, #0]
 800d894:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d896:	2300      	movs	r3, #0
}
 800d898:	4618      	mov	r0, r3
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b087      	sub	sp, #28
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	32b0      	adds	r2, #176	; 0xb0
 800d8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8be:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d101      	bne.n	800d8ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	e008      	b.n	800d8dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	371c      	adds	r7, #28
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b085      	sub	sp, #20
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	32b0      	adds	r2, #176	; 0xb0
 800d8fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d900:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d101      	bne.n	800d90c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d908:	2303      	movs	r3, #3
 800d90a:	e004      	b.n	800d916 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	683a      	ldr	r2, [r7, #0]
 800d910:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d914:	2300      	movs	r3, #0
}
 800d916:	4618      	mov	r0, r3
 800d918:	3714      	adds	r7, #20
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr
	...

0800d924 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	32b0      	adds	r2, #176	; 0xb0
 800d936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d93a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	32b0      	adds	r2, #176	; 0xb0
 800d946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d101      	bne.n	800d952 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d94e:	2303      	movs	r3, #3
 800d950:	e018      	b.n	800d984 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	7c1b      	ldrb	r3, [r3, #16]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d10a      	bne.n	800d970 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d95a:	4b0c      	ldr	r3, [pc, #48]	; (800d98c <USBD_CDC_ReceivePacket+0x68>)
 800d95c:	7819      	ldrb	r1, [r3, #0]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d964:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f001 fff7 	bl	800f95c <USBD_LL_PrepareReceive>
 800d96e:	e008      	b.n	800d982 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d970:	4b06      	ldr	r3, [pc, #24]	; (800d98c <USBD_CDC_ReceivePacket+0x68>)
 800d972:	7819      	ldrb	r1, [r3, #0]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d97a:	2340      	movs	r3, #64	; 0x40
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f001 ffed 	bl	800f95c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d982:	2300      	movs	r3, #0
}
 800d984:	4618      	mov	r0, r3
 800d986:	3710      	adds	r7, #16
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	20000094 	.word	0x20000094

0800d990 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b086      	sub	sp, #24
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	4613      	mov	r3, r2
 800d99c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d101      	bne.n	800d9a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d9a4:	2303      	movs	r3, #3
 800d9a6:	e01f      	b.n	800d9e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d003      	beq.n	800d9ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	68ba      	ldr	r2, [r7, #8]
 800d9ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	79fa      	ldrb	r2, [r7, #7]
 800d9da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d9dc:	68f8      	ldr	r0, [r7, #12]
 800d9de:	f001 fe67 	bl	800f6b0 <USBD_LL_Init>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d9e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3718      	adds	r7, #24
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d101      	bne.n	800da08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800da04:	2303      	movs	r3, #3
 800da06:	e025      	b.n	800da54 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	683a      	ldr	r2, [r7, #0]
 800da0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	32ae      	adds	r2, #174	; 0xae
 800da1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da20:	2b00      	cmp	r3, #0
 800da22:	d00f      	beq.n	800da44 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	32ae      	adds	r2, #174	; 0xae
 800da2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da34:	f107 020e 	add.w	r2, r7, #14
 800da38:	4610      	mov	r0, r2
 800da3a:	4798      	blx	r3
 800da3c:	4602      	mov	r2, r0
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800da4a:	1c5a      	adds	r2, r3, #1
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f001 fe6f 	bl	800f748 <USBD_LL_Start>
 800da6a:	4603      	mov	r3, r0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da7c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800da7e:	4618      	mov	r0, r3
 800da80:	370c      	adds	r7, #12
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr

0800da8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b084      	sub	sp, #16
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	460b      	mov	r3, r1
 800da94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800da96:	2300      	movs	r3, #0
 800da98:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d009      	beq.n	800dab8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	78fa      	ldrb	r2, [r7, #3]
 800daae:	4611      	mov	r1, r2
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	4798      	blx	r3
 800dab4:	4603      	mov	r3, r0
 800dab6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
 800daca:	460b      	mov	r3, r1
 800dacc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dace:	2300      	movs	r3, #0
 800dad0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	78fa      	ldrb	r2, [r7, #3]
 800dadc:	4611      	mov	r1, r2
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	4798      	blx	r3
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d001      	beq.n	800daec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dae8:	2303      	movs	r3, #3
 800daea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800daec:	7bfb      	ldrb	r3, [r7, #15]
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b084      	sub	sp, #16
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
 800dafe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db06:	6839      	ldr	r1, [r7, #0]
 800db08:	4618      	mov	r0, r3
 800db0a:	f001 f908 	bl	800ed1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2201      	movs	r2, #1
 800db12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800db1c:	461a      	mov	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db2a:	f003 031f 	and.w	r3, r3, #31
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d01a      	beq.n	800db68 <USBD_LL_SetupStage+0x72>
 800db32:	2b02      	cmp	r3, #2
 800db34:	d822      	bhi.n	800db7c <USBD_LL_SetupStage+0x86>
 800db36:	2b00      	cmp	r3, #0
 800db38:	d002      	beq.n	800db40 <USBD_LL_SetupStage+0x4a>
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d00a      	beq.n	800db54 <USBD_LL_SetupStage+0x5e>
 800db3e:	e01d      	b.n	800db7c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db46:	4619      	mov	r1, r3
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 fb5f 	bl	800e20c <USBD_StdDevReq>
 800db4e:	4603      	mov	r3, r0
 800db50:	73fb      	strb	r3, [r7, #15]
      break;
 800db52:	e020      	b.n	800db96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db5a:	4619      	mov	r1, r3
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fbc7 	bl	800e2f0 <USBD_StdItfReq>
 800db62:	4603      	mov	r3, r0
 800db64:	73fb      	strb	r3, [r7, #15]
      break;
 800db66:	e016      	b.n	800db96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db6e:	4619      	mov	r1, r3
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f000 fc29 	bl	800e3c8 <USBD_StdEPReq>
 800db76:	4603      	mov	r3, r0
 800db78:	73fb      	strb	r3, [r7, #15]
      break;
 800db7a:	e00c      	b.n	800db96 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800db86:	b2db      	uxtb	r3, r3
 800db88:	4619      	mov	r1, r3
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f001 fe3c 	bl	800f808 <USBD_LL_StallEP>
 800db90:	4603      	mov	r3, r0
 800db92:	73fb      	strb	r3, [r7, #15]
      break;
 800db94:	bf00      	nop
  }

  return ret;
 800db96:	7bfb      	ldrb	r3, [r7, #15]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	60f8      	str	r0, [r7, #12]
 800dba8:	460b      	mov	r3, r1
 800dbaa:	607a      	str	r2, [r7, #4]
 800dbac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dbb2:	7afb      	ldrb	r3, [r7, #11]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d16e      	bne.n	800dc96 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dbbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dbc6:	2b03      	cmp	r3, #3
 800dbc8:	f040 8098 	bne.w	800dcfc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	689a      	ldr	r2, [r3, #8]
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d913      	bls.n	800dc00 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	689a      	ldr	r2, [r3, #8]
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	1ad2      	subs	r2, r2, r3
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	68da      	ldr	r2, [r3, #12]
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	bf28      	it	cs
 800dbf2:	4613      	movcs	r3, r2
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	6879      	ldr	r1, [r7, #4]
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f001 f984 	bl	800ef06 <USBD_CtlContinueRx>
 800dbfe:	e07d      	b.n	800dcfc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dc06:	f003 031f 	and.w	r3, r3, #31
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d014      	beq.n	800dc38 <USBD_LL_DataOutStage+0x98>
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d81d      	bhi.n	800dc4e <USBD_LL_DataOutStage+0xae>
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d002      	beq.n	800dc1c <USBD_LL_DataOutStage+0x7c>
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d003      	beq.n	800dc22 <USBD_LL_DataOutStage+0x82>
 800dc1a:	e018      	b.n	800dc4e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	75bb      	strb	r3, [r7, #22]
            break;
 800dc20:	e018      	b.n	800dc54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f000 fa5e 	bl	800e0ee <USBD_CoreFindIF>
 800dc32:	4603      	mov	r3, r0
 800dc34:	75bb      	strb	r3, [r7, #22]
            break;
 800dc36:	e00d      	b.n	800dc54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	4619      	mov	r1, r3
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	f000 fa60 	bl	800e108 <USBD_CoreFindEP>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	75bb      	strb	r3, [r7, #22]
            break;
 800dc4c:	e002      	b.n	800dc54 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	75bb      	strb	r3, [r7, #22]
            break;
 800dc52:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dc54:	7dbb      	ldrb	r3, [r7, #22]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d119      	bne.n	800dc8e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	2b03      	cmp	r3, #3
 800dc64:	d113      	bne.n	800dc8e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dc66:	7dba      	ldrb	r2, [r7, #22]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	32ae      	adds	r2, #174	; 0xae
 800dc6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc70:	691b      	ldr	r3, [r3, #16]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d00b      	beq.n	800dc8e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dc76:	7dba      	ldrb	r2, [r7, #22]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dc7e:	7dba      	ldrb	r2, [r7, #22]
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	32ae      	adds	r2, #174	; 0xae
 800dc84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc88:	691b      	ldr	r3, [r3, #16]
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dc8e:	68f8      	ldr	r0, [r7, #12]
 800dc90:	f001 f94a 	bl	800ef28 <USBD_CtlSendStatus>
 800dc94:	e032      	b.n	800dcfc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dc96:	7afb      	ldrb	r3, [r7, #11]
 800dc98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	4619      	mov	r1, r3
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f000 fa31 	bl	800e108 <USBD_CoreFindEP>
 800dca6:	4603      	mov	r3, r0
 800dca8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dcaa:	7dbb      	ldrb	r3, [r7, #22]
 800dcac:	2bff      	cmp	r3, #255	; 0xff
 800dcae:	d025      	beq.n	800dcfc <USBD_LL_DataOutStage+0x15c>
 800dcb0:	7dbb      	ldrb	r3, [r7, #22]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d122      	bne.n	800dcfc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	2b03      	cmp	r3, #3
 800dcc0:	d117      	bne.n	800dcf2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dcc2:	7dba      	ldrb	r2, [r7, #22]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	32ae      	adds	r2, #174	; 0xae
 800dcc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dccc:	699b      	ldr	r3, [r3, #24]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00f      	beq.n	800dcf2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dcd2:	7dba      	ldrb	r2, [r7, #22]
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dcda:	7dba      	ldrb	r2, [r7, #22]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	32ae      	adds	r2, #174	; 0xae
 800dce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce4:	699b      	ldr	r3, [r3, #24]
 800dce6:	7afa      	ldrb	r2, [r7, #11]
 800dce8:	4611      	mov	r1, r2
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	4798      	blx	r3
 800dcee:	4603      	mov	r3, r0
 800dcf0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dcf2:	7dfb      	ldrb	r3, [r7, #23]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d001      	beq.n	800dcfc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dcf8:	7dfb      	ldrb	r3, [r7, #23]
 800dcfa:	e000      	b.n	800dcfe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dcfc:	2300      	movs	r3, #0
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3718      	adds	r7, #24
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}

0800dd06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b086      	sub	sp, #24
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	60f8      	str	r0, [r7, #12]
 800dd0e:	460b      	mov	r3, r1
 800dd10:	607a      	str	r2, [r7, #4]
 800dd12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dd14:	7afb      	ldrb	r3, [r7, #11]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d16f      	bne.n	800ddfa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	3314      	adds	r3, #20
 800dd1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dd26:	2b02      	cmp	r3, #2
 800dd28:	d15a      	bne.n	800dde0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	689a      	ldr	r2, [r3, #8]
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d914      	bls.n	800dd60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	689a      	ldr	r2, [r3, #8]
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	1ad2      	subs	r2, r2, r3
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	461a      	mov	r2, r3
 800dd4a:	6879      	ldr	r1, [r7, #4]
 800dd4c:	68f8      	ldr	r0, [r7, #12]
 800dd4e:	f001 f8ac 	bl	800eeaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd52:	2300      	movs	r3, #0
 800dd54:	2200      	movs	r2, #0
 800dd56:	2100      	movs	r1, #0
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f001 fdff 	bl	800f95c <USBD_LL_PrepareReceive>
 800dd5e:	e03f      	b.n	800dde0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	68da      	ldr	r2, [r3, #12]
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	689b      	ldr	r3, [r3, #8]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d11c      	bne.n	800dda6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	685a      	ldr	r2, [r3, #4]
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d316      	bcc.n	800dda6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	685a      	ldr	r2, [r3, #4]
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d20f      	bcs.n	800dda6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dd86:	2200      	movs	r2, #0
 800dd88:	2100      	movs	r1, #0
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f001 f88d 	bl	800eeaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd98:	2300      	movs	r3, #0
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f001 fddc 	bl	800f95c <USBD_LL_PrepareReceive>
 800dda4:	e01c      	b.n	800dde0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	2b03      	cmp	r3, #3
 800ddb0:	d10f      	bne.n	800ddd2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d009      	beq.n	800ddd2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	68f8      	ldr	r0, [r7, #12]
 800ddd0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddd2:	2180      	movs	r1, #128	; 0x80
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f001 fd17 	bl	800f808 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	f001 f8b7 	bl	800ef4e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d03a      	beq.n	800de60 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f7ff fe42 	bl	800da74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ddf8:	e032      	b.n	800de60 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ddfa:	7afb      	ldrb	r3, [r7, #11]
 800ddfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de00:	b2db      	uxtb	r3, r3
 800de02:	4619      	mov	r1, r3
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f000 f97f 	bl	800e108 <USBD_CoreFindEP>
 800de0a:	4603      	mov	r3, r0
 800de0c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de0e:	7dfb      	ldrb	r3, [r7, #23]
 800de10:	2bff      	cmp	r3, #255	; 0xff
 800de12:	d025      	beq.n	800de60 <USBD_LL_DataInStage+0x15a>
 800de14:	7dfb      	ldrb	r3, [r7, #23]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d122      	bne.n	800de60 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b03      	cmp	r3, #3
 800de24:	d11c      	bne.n	800de60 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800de26:	7dfa      	ldrb	r2, [r7, #23]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	32ae      	adds	r2, #174	; 0xae
 800de2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de30:	695b      	ldr	r3, [r3, #20]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d014      	beq.n	800de60 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800de36:	7dfa      	ldrb	r2, [r7, #23]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800de3e:	7dfa      	ldrb	r2, [r7, #23]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	32ae      	adds	r2, #174	; 0xae
 800de44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	7afa      	ldrb	r2, [r7, #11]
 800de4c:	4611      	mov	r1, r2
 800de4e:	68f8      	ldr	r0, [r7, #12]
 800de50:	4798      	blx	r3
 800de52:	4603      	mov	r3, r0
 800de54:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800de56:	7dbb      	ldrb	r3, [r7, #22]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d001      	beq.n	800de60 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800de5c:	7dbb      	ldrb	r3, [r7, #22]
 800de5e:	e000      	b.n	800de62 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800de60:	2300      	movs	r3, #0
}
 800de62:	4618      	mov	r0, r3
 800de64:	3718      	adds	r7, #24
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}

0800de6a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800de6a:	b580      	push	{r7, lr}
 800de6c:	b084      	sub	sp, #16
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800de72:	2300      	movs	r3, #0
 800de74:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2201      	movs	r2, #1
 800de7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2200      	movs	r2, #0
 800de8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2200      	movs	r2, #0
 800de90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d014      	beq.n	800ded0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d00e      	beq.n	800ded0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	6852      	ldr	r2, [r2, #4]
 800debe:	b2d2      	uxtb	r2, r2
 800dec0:	4611      	mov	r1, r2
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	4798      	blx	r3
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d001      	beq.n	800ded0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800decc:	2303      	movs	r3, #3
 800dece:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ded0:	2340      	movs	r3, #64	; 0x40
 800ded2:	2200      	movs	r2, #0
 800ded4:	2100      	movs	r1, #0
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f001 fc51 	bl	800f77e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2201      	movs	r2, #1
 800dee0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2240      	movs	r2, #64	; 0x40
 800dee8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800deec:	2340      	movs	r3, #64	; 0x40
 800deee:	2200      	movs	r2, #0
 800def0:	2180      	movs	r1, #128	; 0x80
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f001 fc43 	bl	800f77e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2201      	movs	r2, #1
 800defc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2240      	movs	r2, #64	; 0x40
 800df02:	621a      	str	r2, [r3, #32]

  return ret;
 800df04:	7bfb      	ldrb	r3, [r7, #15]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800df0e:	b480      	push	{r7}
 800df10:	b083      	sub	sp, #12
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
 800df16:	460b      	mov	r3, r1
 800df18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	78fa      	ldrb	r2, [r7, #3]
 800df1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800df20:	2300      	movs	r3, #0
}
 800df22:	4618      	mov	r0, r3
 800df24:	370c      	adds	r7, #12
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr

0800df2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800df2e:	b480      	push	{r7}
 800df30:	b083      	sub	sp, #12
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df3c:	b2da      	uxtb	r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2204      	movs	r2, #4
 800df48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800df4c:	2300      	movs	r3, #0
}
 800df4e:	4618      	mov	r0, r3
 800df50:	370c      	adds	r7, #12
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr

0800df5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800df5a:	b480      	push	{r7}
 800df5c:	b083      	sub	sp, #12
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	2b04      	cmp	r3, #4
 800df6c:	d106      	bne.n	800df7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800df74:	b2da      	uxtb	r2, r3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800df7c:	2300      	movs	r3, #0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	370c      	adds	r7, #12
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr

0800df8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800df8a:	b580      	push	{r7, lr}
 800df8c:	b082      	sub	sp, #8
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	2b03      	cmp	r3, #3
 800df9c:	d110      	bne.n	800dfc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d00b      	beq.n	800dfc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfae:	69db      	ldr	r3, [r3, #28]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d005      	beq.n	800dfc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfba:	69db      	ldr	r3, [r3, #28]
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dfc0:	2300      	movs	r3, #0
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3708      	adds	r7, #8
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}

0800dfca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b082      	sub	sp, #8
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	32ae      	adds	r2, #174	; 0xae
 800dfe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d101      	bne.n	800dfec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dfe8:	2303      	movs	r3, #3
 800dfea:	e01c      	b.n	800e026 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	2b03      	cmp	r3, #3
 800dff6:	d115      	bne.n	800e024 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	32ae      	adds	r2, #174	; 0xae
 800e002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e006:	6a1b      	ldr	r3, [r3, #32]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d00b      	beq.n	800e024 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	32ae      	adds	r2, #174	; 0xae
 800e016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e01a:	6a1b      	ldr	r3, [r3, #32]
 800e01c:	78fa      	ldrb	r2, [r7, #3]
 800e01e:	4611      	mov	r1, r2
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b082      	sub	sp, #8
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
 800e036:	460b      	mov	r3, r1
 800e038:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	32ae      	adds	r2, #174	; 0xae
 800e044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d101      	bne.n	800e050 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e04c:	2303      	movs	r3, #3
 800e04e:	e01c      	b.n	800e08a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e056:	b2db      	uxtb	r3, r3
 800e058:	2b03      	cmp	r3, #3
 800e05a:	d115      	bne.n	800e088 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	32ae      	adds	r2, #174	; 0xae
 800e066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00b      	beq.n	800e088 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	32ae      	adds	r2, #174	; 0xae
 800e07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e080:	78fa      	ldrb	r2, [r7, #3]
 800e082:	4611      	mov	r1, r2
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e088:	2300      	movs	r3, #0
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}

0800e092 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e092:	b480      	push	{r7}
 800e094:	b083      	sub	sp, #12
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	370c      	adds	r7, #12
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr

0800e0a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00e      	beq.n	800e0e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	6852      	ldr	r2, [r2, #4]
 800e0d2:	b2d2      	uxtb	r2, r2
 800e0d4:	4611      	mov	r1, r2
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	4798      	blx	r3
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d001      	beq.n	800e0e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e0e0:	2303      	movs	r3, #3
 800e0e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e0ee:	b480      	push	{r7}
 800e0f0:	b083      	sub	sp, #12
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e0fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	370c      	adds	r7, #12
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	460b      	mov	r3, r1
 800e112:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e114:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e116:	4618      	mov	r0, r3
 800e118:	370c      	adds	r7, #12
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr

0800e122 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b086      	sub	sp, #24
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
 800e12a:	460b      	mov	r3, r1
 800e12c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e136:	2300      	movs	r3, #0
 800e138:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	885b      	ldrh	r3, [r3, #2]
 800e13e:	b29a      	uxth	r2, r3
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	b29b      	uxth	r3, r3
 800e146:	429a      	cmp	r2, r3
 800e148:	d920      	bls.n	800e18c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	b29b      	uxth	r3, r3
 800e150:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e152:	e013      	b.n	800e17c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e154:	f107 030a 	add.w	r3, r7, #10
 800e158:	4619      	mov	r1, r3
 800e15a:	6978      	ldr	r0, [r7, #20]
 800e15c:	f000 f81b 	bl	800e196 <USBD_GetNextDesc>
 800e160:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	785b      	ldrb	r3, [r3, #1]
 800e166:	2b05      	cmp	r3, #5
 800e168:	d108      	bne.n	800e17c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	789b      	ldrb	r3, [r3, #2]
 800e172:	78fa      	ldrb	r2, [r7, #3]
 800e174:	429a      	cmp	r2, r3
 800e176:	d008      	beq.n	800e18a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e178:	2300      	movs	r3, #0
 800e17a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	885b      	ldrh	r3, [r3, #2]
 800e180:	b29a      	uxth	r2, r3
 800e182:	897b      	ldrh	r3, [r7, #10]
 800e184:	429a      	cmp	r2, r3
 800e186:	d8e5      	bhi.n	800e154 <USBD_GetEpDesc+0x32>
 800e188:	e000      	b.n	800e18c <USBD_GetEpDesc+0x6a>
          break;
 800e18a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e18c:	693b      	ldr	r3, [r7, #16]
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3718      	adds	r7, #24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e196:	b480      	push	{r7}
 800e198:	b085      	sub	sp, #20
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
 800e19e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	881a      	ldrh	r2, [r3, #0]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	4413      	add	r3, r2
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	4413      	add	r3, r2
 800e1c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3714      	adds	r7, #20
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b087      	sub	sp, #28
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e1ee:	8a3b      	ldrh	r3, [r7, #16]
 800e1f0:	021b      	lsls	r3, r3, #8
 800e1f2:	b21a      	sxth	r2, r3
 800e1f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	b21b      	sxth	r3, r3
 800e1fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e1fe:	89fb      	ldrh	r3, [r7, #14]
}
 800e200:	4618      	mov	r0, r3
 800e202:	371c      	adds	r7, #28
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr

0800e20c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b084      	sub	sp, #16
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e216:	2300      	movs	r3, #0
 800e218:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e222:	2b40      	cmp	r3, #64	; 0x40
 800e224:	d005      	beq.n	800e232 <USBD_StdDevReq+0x26>
 800e226:	2b40      	cmp	r3, #64	; 0x40
 800e228:	d857      	bhi.n	800e2da <USBD_StdDevReq+0xce>
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00f      	beq.n	800e24e <USBD_StdDevReq+0x42>
 800e22e:	2b20      	cmp	r3, #32
 800e230:	d153      	bne.n	800e2da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	32ae      	adds	r2, #174	; 0xae
 800e23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e240:	689b      	ldr	r3, [r3, #8]
 800e242:	6839      	ldr	r1, [r7, #0]
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	4798      	blx	r3
 800e248:	4603      	mov	r3, r0
 800e24a:	73fb      	strb	r3, [r7, #15]
      break;
 800e24c:	e04a      	b.n	800e2e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	785b      	ldrb	r3, [r3, #1]
 800e252:	2b09      	cmp	r3, #9
 800e254:	d83b      	bhi.n	800e2ce <USBD_StdDevReq+0xc2>
 800e256:	a201      	add	r2, pc, #4	; (adr r2, 800e25c <USBD_StdDevReq+0x50>)
 800e258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25c:	0800e2b1 	.word	0x0800e2b1
 800e260:	0800e2c5 	.word	0x0800e2c5
 800e264:	0800e2cf 	.word	0x0800e2cf
 800e268:	0800e2bb 	.word	0x0800e2bb
 800e26c:	0800e2cf 	.word	0x0800e2cf
 800e270:	0800e28f 	.word	0x0800e28f
 800e274:	0800e285 	.word	0x0800e285
 800e278:	0800e2cf 	.word	0x0800e2cf
 800e27c:	0800e2a7 	.word	0x0800e2a7
 800e280:	0800e299 	.word	0x0800e299
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e284:	6839      	ldr	r1, [r7, #0]
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 fa3c 	bl	800e704 <USBD_GetDescriptor>
          break;
 800e28c:	e024      	b.n	800e2d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e28e:	6839      	ldr	r1, [r7, #0]
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 fba1 	bl	800e9d8 <USBD_SetAddress>
          break;
 800e296:	e01f      	b.n	800e2d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e298:	6839      	ldr	r1, [r7, #0]
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 fbe0 	bl	800ea60 <USBD_SetConfig>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	73fb      	strb	r3, [r7, #15]
          break;
 800e2a4:	e018      	b.n	800e2d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e2a6:	6839      	ldr	r1, [r7, #0]
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 fc83 	bl	800ebb4 <USBD_GetConfig>
          break;
 800e2ae:	e013      	b.n	800e2d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e2b0:	6839      	ldr	r1, [r7, #0]
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 fcb4 	bl	800ec20 <USBD_GetStatus>
          break;
 800e2b8:	e00e      	b.n	800e2d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 fce3 	bl	800ec88 <USBD_SetFeature>
          break;
 800e2c2:	e009      	b.n	800e2d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e2c4:	6839      	ldr	r1, [r7, #0]
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 fd07 	bl	800ecda <USBD_ClrFeature>
          break;
 800e2cc:	e004      	b.n	800e2d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e2ce:	6839      	ldr	r1, [r7, #0]
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 fd5e 	bl	800ed92 <USBD_CtlError>
          break;
 800e2d6:	bf00      	nop
      }
      break;
 800e2d8:	e004      	b.n	800e2e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e2da:	6839      	ldr	r1, [r7, #0]
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 fd58 	bl	800ed92 <USBD_CtlError>
      break;
 800e2e2:	bf00      	nop
  }

  return ret;
 800e2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3710      	adds	r7, #16
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop

0800e2f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b084      	sub	sp, #16
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e306:	2b40      	cmp	r3, #64	; 0x40
 800e308:	d005      	beq.n	800e316 <USBD_StdItfReq+0x26>
 800e30a:	2b40      	cmp	r3, #64	; 0x40
 800e30c:	d852      	bhi.n	800e3b4 <USBD_StdItfReq+0xc4>
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <USBD_StdItfReq+0x26>
 800e312:	2b20      	cmp	r3, #32
 800e314:	d14e      	bne.n	800e3b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	3b01      	subs	r3, #1
 800e320:	2b02      	cmp	r3, #2
 800e322:	d840      	bhi.n	800e3a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	889b      	ldrh	r3, [r3, #4]
 800e328:	b2db      	uxtb	r3, r3
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d836      	bhi.n	800e39c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	889b      	ldrh	r3, [r3, #4]
 800e332:	b2db      	uxtb	r3, r3
 800e334:	4619      	mov	r1, r3
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7ff fed9 	bl	800e0ee <USBD_CoreFindIF>
 800e33c:	4603      	mov	r3, r0
 800e33e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e340:	7bbb      	ldrb	r3, [r7, #14]
 800e342:	2bff      	cmp	r3, #255	; 0xff
 800e344:	d01d      	beq.n	800e382 <USBD_StdItfReq+0x92>
 800e346:	7bbb      	ldrb	r3, [r7, #14]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d11a      	bne.n	800e382 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e34c:	7bba      	ldrb	r2, [r7, #14]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	32ae      	adds	r2, #174	; 0xae
 800e352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00f      	beq.n	800e37c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e35c:	7bba      	ldrb	r2, [r7, #14]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e364:	7bba      	ldrb	r2, [r7, #14]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	32ae      	adds	r2, #174	; 0xae
 800e36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	6839      	ldr	r1, [r7, #0]
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	4798      	blx	r3
 800e376:	4603      	mov	r3, r0
 800e378:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e37a:	e004      	b.n	800e386 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e37c:	2303      	movs	r3, #3
 800e37e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e380:	e001      	b.n	800e386 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e382:	2303      	movs	r3, #3
 800e384:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	88db      	ldrh	r3, [r3, #6]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d110      	bne.n	800e3b0 <USBD_StdItfReq+0xc0>
 800e38e:	7bfb      	ldrb	r3, [r7, #15]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d10d      	bne.n	800e3b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 fdc7 	bl	800ef28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e39a:	e009      	b.n	800e3b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e39c:	6839      	ldr	r1, [r7, #0]
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 fcf7 	bl	800ed92 <USBD_CtlError>
          break;
 800e3a4:	e004      	b.n	800e3b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e3a6:	6839      	ldr	r1, [r7, #0]
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 fcf2 	bl	800ed92 <USBD_CtlError>
          break;
 800e3ae:	e000      	b.n	800e3b2 <USBD_StdItfReq+0xc2>
          break;
 800e3b0:	bf00      	nop
      }
      break;
 800e3b2:	e004      	b.n	800e3be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e3b4:	6839      	ldr	r1, [r7, #0]
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 fceb 	bl	800ed92 <USBD_CtlError>
      break;
 800e3bc:	bf00      	nop
  }

  return ret;
 800e3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3710      	adds	r7, #16
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	889b      	ldrh	r3, [r3, #4]
 800e3da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3e4:	2b40      	cmp	r3, #64	; 0x40
 800e3e6:	d007      	beq.n	800e3f8 <USBD_StdEPReq+0x30>
 800e3e8:	2b40      	cmp	r3, #64	; 0x40
 800e3ea:	f200 817f 	bhi.w	800e6ec <USBD_StdEPReq+0x324>
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d02a      	beq.n	800e448 <USBD_StdEPReq+0x80>
 800e3f2:	2b20      	cmp	r3, #32
 800e3f4:	f040 817a 	bne.w	800e6ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e3f8:	7bbb      	ldrb	r3, [r7, #14]
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f7ff fe83 	bl	800e108 <USBD_CoreFindEP>
 800e402:	4603      	mov	r3, r0
 800e404:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e406:	7b7b      	ldrb	r3, [r7, #13]
 800e408:	2bff      	cmp	r3, #255	; 0xff
 800e40a:	f000 8174 	beq.w	800e6f6 <USBD_StdEPReq+0x32e>
 800e40e:	7b7b      	ldrb	r3, [r7, #13]
 800e410:	2b00      	cmp	r3, #0
 800e412:	f040 8170 	bne.w	800e6f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e416:	7b7a      	ldrb	r2, [r7, #13]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e41e:	7b7a      	ldrb	r2, [r7, #13]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	32ae      	adds	r2, #174	; 0xae
 800e424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e428:	689b      	ldr	r3, [r3, #8]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f000 8163 	beq.w	800e6f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e430:	7b7a      	ldrb	r2, [r7, #13]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	32ae      	adds	r2, #174	; 0xae
 800e436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	6839      	ldr	r1, [r7, #0]
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	4798      	blx	r3
 800e442:	4603      	mov	r3, r0
 800e444:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e446:	e156      	b.n	800e6f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	785b      	ldrb	r3, [r3, #1]
 800e44c:	2b03      	cmp	r3, #3
 800e44e:	d008      	beq.n	800e462 <USBD_StdEPReq+0x9a>
 800e450:	2b03      	cmp	r3, #3
 800e452:	f300 8145 	bgt.w	800e6e0 <USBD_StdEPReq+0x318>
 800e456:	2b00      	cmp	r3, #0
 800e458:	f000 809b 	beq.w	800e592 <USBD_StdEPReq+0x1ca>
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d03c      	beq.n	800e4da <USBD_StdEPReq+0x112>
 800e460:	e13e      	b.n	800e6e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	d002      	beq.n	800e474 <USBD_StdEPReq+0xac>
 800e46e:	2b03      	cmp	r3, #3
 800e470:	d016      	beq.n	800e4a0 <USBD_StdEPReq+0xd8>
 800e472:	e02c      	b.n	800e4ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e474:	7bbb      	ldrb	r3, [r7, #14]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00d      	beq.n	800e496 <USBD_StdEPReq+0xce>
 800e47a:	7bbb      	ldrb	r3, [r7, #14]
 800e47c:	2b80      	cmp	r3, #128	; 0x80
 800e47e:	d00a      	beq.n	800e496 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e480:	7bbb      	ldrb	r3, [r7, #14]
 800e482:	4619      	mov	r1, r3
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f001 f9bf 	bl	800f808 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e48a:	2180      	movs	r1, #128	; 0x80
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f001 f9bb 	bl	800f808 <USBD_LL_StallEP>
 800e492:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e494:	e020      	b.n	800e4d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e496:	6839      	ldr	r1, [r7, #0]
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 fc7a 	bl	800ed92 <USBD_CtlError>
              break;
 800e49e:	e01b      	b.n	800e4d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	885b      	ldrh	r3, [r3, #2]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d10e      	bne.n	800e4c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e4a8:	7bbb      	ldrb	r3, [r7, #14]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00b      	beq.n	800e4c6 <USBD_StdEPReq+0xfe>
 800e4ae:	7bbb      	ldrb	r3, [r7, #14]
 800e4b0:	2b80      	cmp	r3, #128	; 0x80
 800e4b2:	d008      	beq.n	800e4c6 <USBD_StdEPReq+0xfe>
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	88db      	ldrh	r3, [r3, #6]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d104      	bne.n	800e4c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4bc:	7bbb      	ldrb	r3, [r7, #14]
 800e4be:	4619      	mov	r1, r3
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f001 f9a1 	bl	800f808 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 fd2e 	bl	800ef28 <USBD_CtlSendStatus>

              break;
 800e4cc:	e004      	b.n	800e4d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e4ce:	6839      	ldr	r1, [r7, #0]
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 fc5e 	bl	800ed92 <USBD_CtlError>
              break;
 800e4d6:	bf00      	nop
          }
          break;
 800e4d8:	e107      	b.n	800e6ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	2b02      	cmp	r3, #2
 800e4e4:	d002      	beq.n	800e4ec <USBD_StdEPReq+0x124>
 800e4e6:	2b03      	cmp	r3, #3
 800e4e8:	d016      	beq.n	800e518 <USBD_StdEPReq+0x150>
 800e4ea:	e04b      	b.n	800e584 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e4ec:	7bbb      	ldrb	r3, [r7, #14]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00d      	beq.n	800e50e <USBD_StdEPReq+0x146>
 800e4f2:	7bbb      	ldrb	r3, [r7, #14]
 800e4f4:	2b80      	cmp	r3, #128	; 0x80
 800e4f6:	d00a      	beq.n	800e50e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4f8:	7bbb      	ldrb	r3, [r7, #14]
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f001 f983 	bl	800f808 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e502:	2180      	movs	r1, #128	; 0x80
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f001 f97f 	bl	800f808 <USBD_LL_StallEP>
 800e50a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e50c:	e040      	b.n	800e590 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e50e:	6839      	ldr	r1, [r7, #0]
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 fc3e 	bl	800ed92 <USBD_CtlError>
              break;
 800e516:	e03b      	b.n	800e590 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	885b      	ldrh	r3, [r3, #2]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d136      	bne.n	800e58e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e520:	7bbb      	ldrb	r3, [r7, #14]
 800e522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e526:	2b00      	cmp	r3, #0
 800e528:	d004      	beq.n	800e534 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e52a:	7bbb      	ldrb	r3, [r7, #14]
 800e52c:	4619      	mov	r1, r3
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f001 f989 	bl	800f846 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f000 fcf7 	bl	800ef28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e53a:	7bbb      	ldrb	r3, [r7, #14]
 800e53c:	4619      	mov	r1, r3
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f7ff fde2 	bl	800e108 <USBD_CoreFindEP>
 800e544:	4603      	mov	r3, r0
 800e546:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e548:	7b7b      	ldrb	r3, [r7, #13]
 800e54a:	2bff      	cmp	r3, #255	; 0xff
 800e54c:	d01f      	beq.n	800e58e <USBD_StdEPReq+0x1c6>
 800e54e:	7b7b      	ldrb	r3, [r7, #13]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d11c      	bne.n	800e58e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e554:	7b7a      	ldrb	r2, [r7, #13]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e55c:	7b7a      	ldrb	r2, [r7, #13]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	32ae      	adds	r2, #174	; 0xae
 800e562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e566:	689b      	ldr	r3, [r3, #8]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d010      	beq.n	800e58e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e56c:	7b7a      	ldrb	r2, [r7, #13]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	32ae      	adds	r2, #174	; 0xae
 800e572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	6839      	ldr	r1, [r7, #0]
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	4798      	blx	r3
 800e57e:	4603      	mov	r3, r0
 800e580:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e582:	e004      	b.n	800e58e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e584:	6839      	ldr	r1, [r7, #0]
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 fc03 	bl	800ed92 <USBD_CtlError>
              break;
 800e58c:	e000      	b.n	800e590 <USBD_StdEPReq+0x1c8>
              break;
 800e58e:	bf00      	nop
          }
          break;
 800e590:	e0ab      	b.n	800e6ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d002      	beq.n	800e5a4 <USBD_StdEPReq+0x1dc>
 800e59e:	2b03      	cmp	r3, #3
 800e5a0:	d032      	beq.n	800e608 <USBD_StdEPReq+0x240>
 800e5a2:	e097      	b.n	800e6d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5a4:	7bbb      	ldrb	r3, [r7, #14]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d007      	beq.n	800e5ba <USBD_StdEPReq+0x1f2>
 800e5aa:	7bbb      	ldrb	r3, [r7, #14]
 800e5ac:	2b80      	cmp	r3, #128	; 0x80
 800e5ae:	d004      	beq.n	800e5ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e5b0:	6839      	ldr	r1, [r7, #0]
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 fbed 	bl	800ed92 <USBD_CtlError>
                break;
 800e5b8:	e091      	b.n	800e6de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e5ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	da0b      	bge.n	800e5da <USBD_StdEPReq+0x212>
 800e5c2:	7bbb      	ldrb	r3, [r7, #14]
 800e5c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	4413      	add	r3, r2
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	3310      	adds	r3, #16
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	3304      	adds	r3, #4
 800e5d8:	e00b      	b.n	800e5f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e5da:	7bbb      	ldrb	r3, [r7, #14]
 800e5dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e5e0:	4613      	mov	r3, r2
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	4413      	add	r3, r2
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	4413      	add	r3, r2
 800e5f0:	3304      	adds	r3, #4
 800e5f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	2202      	movs	r2, #2
 800e5fe:	4619      	mov	r1, r3
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 fc37 	bl	800ee74 <USBD_CtlSendData>
              break;
 800e606:	e06a      	b.n	800e6de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	da11      	bge.n	800e634 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e610:	7bbb      	ldrb	r3, [r7, #14]
 800e612:	f003 020f 	and.w	r2, r3, #15
 800e616:	6879      	ldr	r1, [r7, #4]
 800e618:	4613      	mov	r3, r2
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	4413      	add	r3, r2
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	440b      	add	r3, r1
 800e622:	3324      	adds	r3, #36	; 0x24
 800e624:	881b      	ldrh	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d117      	bne.n	800e65a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e62a:	6839      	ldr	r1, [r7, #0]
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f000 fbb0 	bl	800ed92 <USBD_CtlError>
                  break;
 800e632:	e054      	b.n	800e6de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e634:	7bbb      	ldrb	r3, [r7, #14]
 800e636:	f003 020f 	and.w	r2, r3, #15
 800e63a:	6879      	ldr	r1, [r7, #4]
 800e63c:	4613      	mov	r3, r2
 800e63e:	009b      	lsls	r3, r3, #2
 800e640:	4413      	add	r3, r2
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	440b      	add	r3, r1
 800e646:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e64a:	881b      	ldrh	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d104      	bne.n	800e65a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e650:	6839      	ldr	r1, [r7, #0]
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 fb9d 	bl	800ed92 <USBD_CtlError>
                  break;
 800e658:	e041      	b.n	800e6de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e65a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	da0b      	bge.n	800e67a <USBD_StdEPReq+0x2b2>
 800e662:	7bbb      	ldrb	r3, [r7, #14]
 800e664:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e668:	4613      	mov	r3, r2
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	4413      	add	r3, r2
 800e66e:	009b      	lsls	r3, r3, #2
 800e670:	3310      	adds	r3, #16
 800e672:	687a      	ldr	r2, [r7, #4]
 800e674:	4413      	add	r3, r2
 800e676:	3304      	adds	r3, #4
 800e678:	e00b      	b.n	800e692 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e67a:	7bbb      	ldrb	r3, [r7, #14]
 800e67c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e680:	4613      	mov	r3, r2
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	4413      	add	r3, r2
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	4413      	add	r3, r2
 800e690:	3304      	adds	r3, #4
 800e692:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e694:	7bbb      	ldrb	r3, [r7, #14]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d002      	beq.n	800e6a0 <USBD_StdEPReq+0x2d8>
 800e69a:	7bbb      	ldrb	r3, [r7, #14]
 800e69c:	2b80      	cmp	r3, #128	; 0x80
 800e69e:	d103      	bne.n	800e6a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	e00e      	b.n	800e6c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e6a8:	7bbb      	ldrb	r3, [r7, #14]
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f001 f8e9 	bl	800f884 <USBD_LL_IsStallEP>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d003      	beq.n	800e6c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	601a      	str	r2, [r3, #0]
 800e6be:	e002      	b.n	800e6c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	2202      	movs	r2, #2
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 fbd1 	bl	800ee74 <USBD_CtlSendData>
              break;
 800e6d2:	e004      	b.n	800e6de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e6d4:	6839      	ldr	r1, [r7, #0]
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 fb5b 	bl	800ed92 <USBD_CtlError>
              break;
 800e6dc:	bf00      	nop
          }
          break;
 800e6de:	e004      	b.n	800e6ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e6e0:	6839      	ldr	r1, [r7, #0]
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 fb55 	bl	800ed92 <USBD_CtlError>
          break;
 800e6e8:	bf00      	nop
      }
      break;
 800e6ea:	e005      	b.n	800e6f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e6ec:	6839      	ldr	r1, [r7, #0]
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f000 fb4f 	bl	800ed92 <USBD_CtlError>
      break;
 800e6f4:	e000      	b.n	800e6f8 <USBD_StdEPReq+0x330>
      break;
 800e6f6:	bf00      	nop
  }

  return ret;
 800e6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3710      	adds	r7, #16
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
	...

0800e704 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e70e:	2300      	movs	r3, #0
 800e710:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e712:	2300      	movs	r3, #0
 800e714:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e716:	2300      	movs	r3, #0
 800e718:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	885b      	ldrh	r3, [r3, #2]
 800e71e:	0a1b      	lsrs	r3, r3, #8
 800e720:	b29b      	uxth	r3, r3
 800e722:	3b01      	subs	r3, #1
 800e724:	2b06      	cmp	r3, #6
 800e726:	f200 8128 	bhi.w	800e97a <USBD_GetDescriptor+0x276>
 800e72a:	a201      	add	r2, pc, #4	; (adr r2, 800e730 <USBD_GetDescriptor+0x2c>)
 800e72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e730:	0800e74d 	.word	0x0800e74d
 800e734:	0800e765 	.word	0x0800e765
 800e738:	0800e7a5 	.word	0x0800e7a5
 800e73c:	0800e97b 	.word	0x0800e97b
 800e740:	0800e97b 	.word	0x0800e97b
 800e744:	0800e91b 	.word	0x0800e91b
 800e748:	0800e947 	.word	0x0800e947
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	7c12      	ldrb	r2, [r2, #16]
 800e758:	f107 0108 	add.w	r1, r7, #8
 800e75c:	4610      	mov	r0, r2
 800e75e:	4798      	blx	r3
 800e760:	60f8      	str	r0, [r7, #12]
      break;
 800e762:	e112      	b.n	800e98a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	7c1b      	ldrb	r3, [r3, #16]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d10d      	bne.n	800e788 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e774:	f107 0208 	add.w	r2, r7, #8
 800e778:	4610      	mov	r0, r2
 800e77a:	4798      	blx	r3
 800e77c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	3301      	adds	r3, #1
 800e782:	2202      	movs	r2, #2
 800e784:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e786:	e100      	b.n	800e98a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e790:	f107 0208 	add.w	r2, r7, #8
 800e794:	4610      	mov	r0, r2
 800e796:	4798      	blx	r3
 800e798:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	3301      	adds	r3, #1
 800e79e:	2202      	movs	r2, #2
 800e7a0:	701a      	strb	r2, [r3, #0]
      break;
 800e7a2:	e0f2      	b.n	800e98a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	885b      	ldrh	r3, [r3, #2]
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	2b05      	cmp	r3, #5
 800e7ac:	f200 80ac 	bhi.w	800e908 <USBD_GetDescriptor+0x204>
 800e7b0:	a201      	add	r2, pc, #4	; (adr r2, 800e7b8 <USBD_GetDescriptor+0xb4>)
 800e7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b6:	bf00      	nop
 800e7b8:	0800e7d1 	.word	0x0800e7d1
 800e7bc:	0800e805 	.word	0x0800e805
 800e7c0:	0800e839 	.word	0x0800e839
 800e7c4:	0800e86d 	.word	0x0800e86d
 800e7c8:	0800e8a1 	.word	0x0800e8a1
 800e7cc:	0800e8d5 	.word	0x0800e8d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d00b      	beq.n	800e7f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	7c12      	ldrb	r2, [r2, #16]
 800e7e8:	f107 0108 	add.w	r1, r7, #8
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	4798      	blx	r3
 800e7f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7f2:	e091      	b.n	800e918 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e7f4:	6839      	ldr	r1, [r7, #0]
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f000 facb 	bl	800ed92 <USBD_CtlError>
            err++;
 800e7fc:	7afb      	ldrb	r3, [r7, #11]
 800e7fe:	3301      	adds	r3, #1
 800e800:	72fb      	strb	r3, [r7, #11]
          break;
 800e802:	e089      	b.n	800e918 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e80a:	689b      	ldr	r3, [r3, #8]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d00b      	beq.n	800e828 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e816:	689b      	ldr	r3, [r3, #8]
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	7c12      	ldrb	r2, [r2, #16]
 800e81c:	f107 0108 	add.w	r1, r7, #8
 800e820:	4610      	mov	r0, r2
 800e822:	4798      	blx	r3
 800e824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e826:	e077      	b.n	800e918 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e828:	6839      	ldr	r1, [r7, #0]
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 fab1 	bl	800ed92 <USBD_CtlError>
            err++;
 800e830:	7afb      	ldrb	r3, [r7, #11]
 800e832:	3301      	adds	r3, #1
 800e834:	72fb      	strb	r3, [r7, #11]
          break;
 800e836:	e06f      	b.n	800e918 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d00b      	beq.n	800e85c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	7c12      	ldrb	r2, [r2, #16]
 800e850:	f107 0108 	add.w	r1, r7, #8
 800e854:	4610      	mov	r0, r2
 800e856:	4798      	blx	r3
 800e858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e85a:	e05d      	b.n	800e918 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e85c:	6839      	ldr	r1, [r7, #0]
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 fa97 	bl	800ed92 <USBD_CtlError>
            err++;
 800e864:	7afb      	ldrb	r3, [r7, #11]
 800e866:	3301      	adds	r3, #1
 800e868:	72fb      	strb	r3, [r7, #11]
          break;
 800e86a:	e055      	b.n	800e918 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d00b      	beq.n	800e890 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	7c12      	ldrb	r2, [r2, #16]
 800e884:	f107 0108 	add.w	r1, r7, #8
 800e888:	4610      	mov	r0, r2
 800e88a:	4798      	blx	r3
 800e88c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e88e:	e043      	b.n	800e918 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e890:	6839      	ldr	r1, [r7, #0]
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 fa7d 	bl	800ed92 <USBD_CtlError>
            err++;
 800e898:	7afb      	ldrb	r3, [r7, #11]
 800e89a:	3301      	adds	r3, #1
 800e89c:	72fb      	strb	r3, [r7, #11]
          break;
 800e89e:	e03b      	b.n	800e918 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8a6:	695b      	ldr	r3, [r3, #20]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00b      	beq.n	800e8c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8b2:	695b      	ldr	r3, [r3, #20]
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	7c12      	ldrb	r2, [r2, #16]
 800e8b8:	f107 0108 	add.w	r1, r7, #8
 800e8bc:	4610      	mov	r0, r2
 800e8be:	4798      	blx	r3
 800e8c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8c2:	e029      	b.n	800e918 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 fa63 	bl	800ed92 <USBD_CtlError>
            err++;
 800e8cc:	7afb      	ldrb	r3, [r7, #11]
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	72fb      	strb	r3, [r7, #11]
          break;
 800e8d2:	e021      	b.n	800e918 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8da:	699b      	ldr	r3, [r3, #24]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d00b      	beq.n	800e8f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8e6:	699b      	ldr	r3, [r3, #24]
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	7c12      	ldrb	r2, [r2, #16]
 800e8ec:	f107 0108 	add.w	r1, r7, #8
 800e8f0:	4610      	mov	r0, r2
 800e8f2:	4798      	blx	r3
 800e8f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8f6:	e00f      	b.n	800e918 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8f8:	6839      	ldr	r1, [r7, #0]
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f000 fa49 	bl	800ed92 <USBD_CtlError>
            err++;
 800e900:	7afb      	ldrb	r3, [r7, #11]
 800e902:	3301      	adds	r3, #1
 800e904:	72fb      	strb	r3, [r7, #11]
          break;
 800e906:	e007      	b.n	800e918 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e908:	6839      	ldr	r1, [r7, #0]
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 fa41 	bl	800ed92 <USBD_CtlError>
          err++;
 800e910:	7afb      	ldrb	r3, [r7, #11]
 800e912:	3301      	adds	r3, #1
 800e914:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e916:	bf00      	nop
      }
      break;
 800e918:	e037      	b.n	800e98a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	7c1b      	ldrb	r3, [r3, #16]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d109      	bne.n	800e936 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e92a:	f107 0208 	add.w	r2, r7, #8
 800e92e:	4610      	mov	r0, r2
 800e930:	4798      	blx	r3
 800e932:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e934:	e029      	b.n	800e98a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e936:	6839      	ldr	r1, [r7, #0]
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 fa2a 	bl	800ed92 <USBD_CtlError>
        err++;
 800e93e:	7afb      	ldrb	r3, [r7, #11]
 800e940:	3301      	adds	r3, #1
 800e942:	72fb      	strb	r3, [r7, #11]
      break;
 800e944:	e021      	b.n	800e98a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	7c1b      	ldrb	r3, [r3, #16]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d10d      	bne.n	800e96a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e956:	f107 0208 	add.w	r2, r7, #8
 800e95a:	4610      	mov	r0, r2
 800e95c:	4798      	blx	r3
 800e95e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	3301      	adds	r3, #1
 800e964:	2207      	movs	r2, #7
 800e966:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e968:	e00f      	b.n	800e98a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e96a:	6839      	ldr	r1, [r7, #0]
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 fa10 	bl	800ed92 <USBD_CtlError>
        err++;
 800e972:	7afb      	ldrb	r3, [r7, #11]
 800e974:	3301      	adds	r3, #1
 800e976:	72fb      	strb	r3, [r7, #11]
      break;
 800e978:	e007      	b.n	800e98a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e97a:	6839      	ldr	r1, [r7, #0]
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 fa08 	bl	800ed92 <USBD_CtlError>
      err++;
 800e982:	7afb      	ldrb	r3, [r7, #11]
 800e984:	3301      	adds	r3, #1
 800e986:	72fb      	strb	r3, [r7, #11]
      break;
 800e988:	bf00      	nop
  }

  if (err != 0U)
 800e98a:	7afb      	ldrb	r3, [r7, #11]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d11e      	bne.n	800e9ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	88db      	ldrh	r3, [r3, #6]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d016      	beq.n	800e9c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e998:	893b      	ldrh	r3, [r7, #8]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00e      	beq.n	800e9bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	88da      	ldrh	r2, [r3, #6]
 800e9a2:	893b      	ldrh	r3, [r7, #8]
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	bf28      	it	cs
 800e9a8:	4613      	movcs	r3, r2
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e9ae:	893b      	ldrh	r3, [r7, #8]
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	68f9      	ldr	r1, [r7, #12]
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f000 fa5d 	bl	800ee74 <USBD_CtlSendData>
 800e9ba:	e009      	b.n	800e9d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e9bc:	6839      	ldr	r1, [r7, #0]
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 f9e7 	bl	800ed92 <USBD_CtlError>
 800e9c4:	e004      	b.n	800e9d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f000 faae 	bl	800ef28 <USBD_CtlSendStatus>
 800e9cc:	e000      	b.n	800e9d0 <USBD_GetDescriptor+0x2cc>
    return;
 800e9ce:	bf00      	nop
  }
}
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop

0800e9d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	889b      	ldrh	r3, [r3, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d131      	bne.n	800ea4e <USBD_SetAddress+0x76>
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	88db      	ldrh	r3, [r3, #6]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d12d      	bne.n	800ea4e <USBD_SetAddress+0x76>
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	885b      	ldrh	r3, [r3, #2]
 800e9f6:	2b7f      	cmp	r3, #127	; 0x7f
 800e9f8:	d829      	bhi.n	800ea4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	885b      	ldrh	r3, [r3, #2]
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	2b03      	cmp	r3, #3
 800ea10:	d104      	bne.n	800ea1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ea12:	6839      	ldr	r1, [r7, #0]
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 f9bc 	bl	800ed92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea1a:	e01d      	b.n	800ea58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	7bfa      	ldrb	r2, [r7, #15]
 800ea20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ea24:	7bfb      	ldrb	r3, [r7, #15]
 800ea26:	4619      	mov	r1, r3
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f000 ff57 	bl	800f8dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 fa7a 	bl	800ef28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ea34:	7bfb      	ldrb	r3, [r7, #15]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d004      	beq.n	800ea44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2202      	movs	r2, #2
 800ea3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea42:	e009      	b.n	800ea58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2201      	movs	r2, #1
 800ea48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea4c:	e004      	b.n	800ea58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 f99e 	bl	800ed92 <USBD_CtlError>
  }
}
 800ea56:	bf00      	nop
 800ea58:	bf00      	nop
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	885b      	ldrh	r3, [r3, #2]
 800ea72:	b2da      	uxtb	r2, r3
 800ea74:	4b4e      	ldr	r3, [pc, #312]	; (800ebb0 <USBD_SetConfig+0x150>)
 800ea76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ea78:	4b4d      	ldr	r3, [pc, #308]	; (800ebb0 <USBD_SetConfig+0x150>)
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d905      	bls.n	800ea8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ea80:	6839      	ldr	r1, [r7, #0]
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f985 	bl	800ed92 <USBD_CtlError>
    return USBD_FAIL;
 800ea88:	2303      	movs	r3, #3
 800ea8a:	e08c      	b.n	800eba6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	2b02      	cmp	r3, #2
 800ea96:	d002      	beq.n	800ea9e <USBD_SetConfig+0x3e>
 800ea98:	2b03      	cmp	r3, #3
 800ea9a:	d029      	beq.n	800eaf0 <USBD_SetConfig+0x90>
 800ea9c:	e075      	b.n	800eb8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ea9e:	4b44      	ldr	r3, [pc, #272]	; (800ebb0 <USBD_SetConfig+0x150>)
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d020      	beq.n	800eae8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800eaa6:	4b42      	ldr	r3, [pc, #264]	; (800ebb0 <USBD_SetConfig+0x150>)
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	461a      	mov	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eab0:	4b3f      	ldr	r3, [pc, #252]	; (800ebb0 <USBD_SetConfig+0x150>)
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	4619      	mov	r1, r3
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f7fe ffe7 	bl	800da8a <USBD_SetClassConfig>
 800eabc:	4603      	mov	r3, r0
 800eabe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800eac0:	7bfb      	ldrb	r3, [r7, #15]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d008      	beq.n	800ead8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800eac6:	6839      	ldr	r1, [r7, #0]
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f000 f962 	bl	800ed92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2202      	movs	r2, #2
 800ead2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ead6:	e065      	b.n	800eba4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f000 fa25 	bl	800ef28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2203      	movs	r2, #3
 800eae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eae6:	e05d      	b.n	800eba4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f000 fa1d 	bl	800ef28 <USBD_CtlSendStatus>
      break;
 800eaee:	e059      	b.n	800eba4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800eaf0:	4b2f      	ldr	r3, [pc, #188]	; (800ebb0 <USBD_SetConfig+0x150>)
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d112      	bne.n	800eb1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2202      	movs	r2, #2
 800eafc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800eb00:	4b2b      	ldr	r3, [pc, #172]	; (800ebb0 <USBD_SetConfig+0x150>)
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	461a      	mov	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eb0a:	4b29      	ldr	r3, [pc, #164]	; (800ebb0 <USBD_SetConfig+0x150>)
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	4619      	mov	r1, r3
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7fe ffd6 	bl	800dac2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f000 fa06 	bl	800ef28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb1c:	e042      	b.n	800eba4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800eb1e:	4b24      	ldr	r3, [pc, #144]	; (800ebb0 <USBD_SetConfig+0x150>)
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	461a      	mov	r2, r3
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d02a      	beq.n	800eb82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	4619      	mov	r1, r3
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7fe ffc4 	bl	800dac2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800eb3a:	4b1d      	ldr	r3, [pc, #116]	; (800ebb0 <USBD_SetConfig+0x150>)
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb44:	4b1a      	ldr	r3, [pc, #104]	; (800ebb0 <USBD_SetConfig+0x150>)
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	4619      	mov	r1, r3
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f7fe ff9d 	bl	800da8a <USBD_SetClassConfig>
 800eb50:	4603      	mov	r3, r0
 800eb52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eb54:	7bfb      	ldrb	r3, [r7, #15]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d00f      	beq.n	800eb7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800eb5a:	6839      	ldr	r1, [r7, #0]
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 f918 	bl	800ed92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	b2db      	uxtb	r3, r3
 800eb68:	4619      	mov	r1, r3
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f7fe ffa9 	bl	800dac2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2202      	movs	r2, #2
 800eb74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eb78:	e014      	b.n	800eba4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 f9d4 	bl	800ef28 <USBD_CtlSendStatus>
      break;
 800eb80:	e010      	b.n	800eba4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 f9d0 	bl	800ef28 <USBD_CtlSendStatus>
      break;
 800eb88:	e00c      	b.n	800eba4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800eb8a:	6839      	ldr	r1, [r7, #0]
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 f900 	bl	800ed92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eb92:	4b07      	ldr	r3, [pc, #28]	; (800ebb0 <USBD_SetConfig+0x150>)
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	4619      	mov	r1, r3
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f7fe ff92 	bl	800dac2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800eb9e:	2303      	movs	r3, #3
 800eba0:	73fb      	strb	r3, [r7, #15]
      break;
 800eba2:	bf00      	nop
  }

  return ret;
 800eba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3710      	adds	r7, #16
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	20000994 	.word	0x20000994

0800ebb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	88db      	ldrh	r3, [r3, #6]
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d004      	beq.n	800ebd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ebc6:	6839      	ldr	r1, [r7, #0]
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f000 f8e2 	bl	800ed92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ebce:	e023      	b.n	800ec18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	dc02      	bgt.n	800ebe2 <USBD_GetConfig+0x2e>
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	dc03      	bgt.n	800ebe8 <USBD_GetConfig+0x34>
 800ebe0:	e015      	b.n	800ec0e <USBD_GetConfig+0x5a>
 800ebe2:	2b03      	cmp	r3, #3
 800ebe4:	d00b      	beq.n	800ebfe <USBD_GetConfig+0x4a>
 800ebe6:	e012      	b.n	800ec0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	3308      	adds	r3, #8
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f000 f93c 	bl	800ee74 <USBD_CtlSendData>
        break;
 800ebfc:	e00c      	b.n	800ec18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	3304      	adds	r3, #4
 800ec02:	2201      	movs	r2, #1
 800ec04:	4619      	mov	r1, r3
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 f934 	bl	800ee74 <USBD_CtlSendData>
        break;
 800ec0c:	e004      	b.n	800ec18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ec0e:	6839      	ldr	r1, [r7, #0]
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f000 f8be 	bl	800ed92 <USBD_CtlError>
        break;
 800ec16:	bf00      	nop
}
 800ec18:	bf00      	nop
 800ec1a:	3708      	adds	r7, #8
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	3b01      	subs	r3, #1
 800ec34:	2b02      	cmp	r3, #2
 800ec36:	d81e      	bhi.n	800ec76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	88db      	ldrh	r3, [r3, #6]
 800ec3c:	2b02      	cmp	r3, #2
 800ec3e:	d004      	beq.n	800ec4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ec40:	6839      	ldr	r1, [r7, #0]
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 f8a5 	bl	800ed92 <USBD_CtlError>
        break;
 800ec48:	e01a      	b.n	800ec80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d005      	beq.n	800ec66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	f043 0202 	orr.w	r2, r3, #2
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	330c      	adds	r3, #12
 800ec6a:	2202      	movs	r2, #2
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f000 f900 	bl	800ee74 <USBD_CtlSendData>
      break;
 800ec74:	e004      	b.n	800ec80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ec76:	6839      	ldr	r1, [r7, #0]
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 f88a 	bl	800ed92 <USBD_CtlError>
      break;
 800ec7e:	bf00      	nop
  }
}
 800ec80:	bf00      	nop
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	885b      	ldrh	r3, [r3, #2]
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d107      	bne.n	800ecaa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 f940 	bl	800ef28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800eca8:	e013      	b.n	800ecd2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	885b      	ldrh	r3, [r3, #2]
 800ecae:	2b02      	cmp	r3, #2
 800ecb0:	d10b      	bne.n	800ecca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	889b      	ldrh	r3, [r3, #4]
 800ecb6:	0a1b      	lsrs	r3, r3, #8
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	b2da      	uxtb	r2, r3
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f000 f930 	bl	800ef28 <USBD_CtlSendStatus>
}
 800ecc8:	e003      	b.n	800ecd2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ecca:	6839      	ldr	r1, [r7, #0]
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 f860 	bl	800ed92 <USBD_CtlError>
}
 800ecd2:	bf00      	nop
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecda:	b580      	push	{r7, lr}
 800ecdc:	b082      	sub	sp, #8
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
 800ece2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	3b01      	subs	r3, #1
 800ecee:	2b02      	cmp	r3, #2
 800ecf0:	d80b      	bhi.n	800ed0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	885b      	ldrh	r3, [r3, #2]
 800ecf6:	2b01      	cmp	r3, #1
 800ecf8:	d10c      	bne.n	800ed14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 f910 	bl	800ef28 <USBD_CtlSendStatus>
      }
      break;
 800ed08:	e004      	b.n	800ed14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ed0a:	6839      	ldr	r1, [r7, #0]
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 f840 	bl	800ed92 <USBD_CtlError>
      break;
 800ed12:	e000      	b.n	800ed16 <USBD_ClrFeature+0x3c>
      break;
 800ed14:	bf00      	nop
  }
}
 800ed16:	bf00      	nop
 800ed18:	3708      	adds	r7, #8
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}

0800ed1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ed1e:	b580      	push	{r7, lr}
 800ed20:	b084      	sub	sp, #16
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	6078      	str	r0, [r7, #4]
 800ed26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	781a      	ldrb	r2, [r3, #0]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	3301      	adds	r3, #1
 800ed38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	781a      	ldrb	r2, [r3, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	3301      	adds	r3, #1
 800ed46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ed48:	68f8      	ldr	r0, [r7, #12]
 800ed4a:	f7ff fa41 	bl	800e1d0 <SWAPBYTE>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	461a      	mov	r2, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	3301      	adds	r3, #1
 800ed60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ed62:	68f8      	ldr	r0, [r7, #12]
 800ed64:	f7ff fa34 	bl	800e1d0 <SWAPBYTE>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	3301      	adds	r3, #1
 800ed74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ed7c:	68f8      	ldr	r0, [r7, #12]
 800ed7e:	f7ff fa27 	bl	800e1d0 <SWAPBYTE>
 800ed82:	4603      	mov	r3, r0
 800ed84:	461a      	mov	r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	80da      	strh	r2, [r3, #6]
}
 800ed8a:	bf00      	nop
 800ed8c:	3710      	adds	r7, #16
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b082      	sub	sp, #8
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
 800ed9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed9c:	2180      	movs	r1, #128	; 0x80
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 fd32 	bl	800f808 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eda4:	2100      	movs	r1, #0
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 fd2e 	bl	800f808 <USBD_LL_StallEP>
}
 800edac:	bf00      	nop
 800edae:	3708      	adds	r7, #8
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b086      	sub	sp, #24
 800edb8:	af00      	add	r7, sp, #0
 800edba:	60f8      	str	r0, [r7, #12]
 800edbc:	60b9      	str	r1, [r7, #8]
 800edbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800edc0:	2300      	movs	r3, #0
 800edc2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d036      	beq.n	800ee38 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800edce:	6938      	ldr	r0, [r7, #16]
 800edd0:	f000 f836 	bl	800ee40 <USBD_GetLen>
 800edd4:	4603      	mov	r3, r0
 800edd6:	3301      	adds	r3, #1
 800edd8:	b29b      	uxth	r3, r3
 800edda:	005b      	lsls	r3, r3, #1
 800eddc:	b29a      	uxth	r2, r3
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ede2:	7dfb      	ldrb	r3, [r7, #23]
 800ede4:	68ba      	ldr	r2, [r7, #8]
 800ede6:	4413      	add	r3, r2
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	7812      	ldrb	r2, [r2, #0]
 800edec:	701a      	strb	r2, [r3, #0]
  idx++;
 800edee:	7dfb      	ldrb	r3, [r7, #23]
 800edf0:	3301      	adds	r3, #1
 800edf2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800edf4:	7dfb      	ldrb	r3, [r7, #23]
 800edf6:	68ba      	ldr	r2, [r7, #8]
 800edf8:	4413      	add	r3, r2
 800edfa:	2203      	movs	r2, #3
 800edfc:	701a      	strb	r2, [r3, #0]
  idx++;
 800edfe:	7dfb      	ldrb	r3, [r7, #23]
 800ee00:	3301      	adds	r3, #1
 800ee02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ee04:	e013      	b.n	800ee2e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ee06:	7dfb      	ldrb	r3, [r7, #23]
 800ee08:	68ba      	ldr	r2, [r7, #8]
 800ee0a:	4413      	add	r3, r2
 800ee0c:	693a      	ldr	r2, [r7, #16]
 800ee0e:	7812      	ldrb	r2, [r2, #0]
 800ee10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	3301      	adds	r3, #1
 800ee16:	613b      	str	r3, [r7, #16]
    idx++;
 800ee18:	7dfb      	ldrb	r3, [r7, #23]
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ee1e:	7dfb      	ldrb	r3, [r7, #23]
 800ee20:	68ba      	ldr	r2, [r7, #8]
 800ee22:	4413      	add	r3, r2
 800ee24:	2200      	movs	r2, #0
 800ee26:	701a      	strb	r2, [r3, #0]
    idx++;
 800ee28:	7dfb      	ldrb	r3, [r7, #23]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d1e7      	bne.n	800ee06 <USBD_GetString+0x52>
 800ee36:	e000      	b.n	800ee3a <USBD_GetString+0x86>
    return;
 800ee38:	bf00      	nop
  }
}
 800ee3a:	3718      	adds	r7, #24
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b085      	sub	sp, #20
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ee50:	e005      	b.n	800ee5e <USBD_GetLen+0x1e>
  {
    len++;
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
 800ee54:	3301      	adds	r3, #1
 800ee56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d1f5      	bne.n	800ee52 <USBD_GetLen+0x12>
  }

  return len;
 800ee66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3714      	adds	r7, #20
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee72:	4770      	bx	lr

0800ee74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	60f8      	str	r0, [r7, #12]
 800ee7c:	60b9      	str	r1, [r7, #8]
 800ee7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2202      	movs	r2, #2
 800ee84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	687a      	ldr	r2, [r7, #4]
 800ee8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68ba      	ldr	r2, [r7, #8]
 800ee98:	2100      	movs	r1, #0
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f000 fd3d 	bl	800f91a <USBD_LL_Transmit>

  return USBD_OK;
 800eea0:	2300      	movs	r3, #0
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3710      	adds	r7, #16
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b084      	sub	sp, #16
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	60f8      	str	r0, [r7, #12]
 800eeb2:	60b9      	str	r1, [r7, #8]
 800eeb4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	68ba      	ldr	r2, [r7, #8]
 800eeba:	2100      	movs	r1, #0
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f000 fd2c 	bl	800f91a <USBD_LL_Transmit>

  return USBD_OK;
 800eec2:	2300      	movs	r3, #0
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b084      	sub	sp, #16
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2203      	movs	r2, #3
 800eedc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	2100      	movs	r1, #0
 800eef6:	68f8      	ldr	r0, [r7, #12]
 800eef8:	f000 fd30 	bl	800f95c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eefc:	2300      	movs	r3, #0
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b084      	sub	sp, #16
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	60f8      	str	r0, [r7, #12]
 800ef0e:	60b9      	str	r1, [r7, #8]
 800ef10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	68ba      	ldr	r2, [r7, #8]
 800ef16:	2100      	movs	r1, #0
 800ef18:	68f8      	ldr	r0, [r7, #12]
 800ef1a:	f000 fd1f 	bl	800f95c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef1e:	2300      	movs	r3, #0
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3710      	adds	r7, #16
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2204      	movs	r2, #4
 800ef34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ef38:	2300      	movs	r3, #0
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 fceb 	bl	800f91a <USBD_LL_Transmit>

  return USBD_OK;
 800ef44:	2300      	movs	r3, #0
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3708      	adds	r7, #8
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}

0800ef4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ef4e:	b580      	push	{r7, lr}
 800ef50:	b082      	sub	sp, #8
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2205      	movs	r2, #5
 800ef5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef5e:	2300      	movs	r3, #0
 800ef60:	2200      	movs	r2, #0
 800ef62:	2100      	movs	r1, #0
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 fcf9 	bl	800f95c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef6a:	2300      	movs	r3, #0
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	4912      	ldr	r1, [pc, #72]	; (800efc4 <MX_USB_DEVICE_Init+0x50>)
 800ef7c:	4812      	ldr	r0, [pc, #72]	; (800efc8 <MX_USB_DEVICE_Init+0x54>)
 800ef7e:	f7fe fd07 	bl	800d990 <USBD_Init>
 800ef82:	4603      	mov	r3, r0
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d001      	beq.n	800ef8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ef88:	f7f2 f944 	bl	8001214 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ef8c:	490f      	ldr	r1, [pc, #60]	; (800efcc <MX_USB_DEVICE_Init+0x58>)
 800ef8e:	480e      	ldr	r0, [pc, #56]	; (800efc8 <MX_USB_DEVICE_Init+0x54>)
 800ef90:	f7fe fd2e 	bl	800d9f0 <USBD_RegisterClass>
 800ef94:	4603      	mov	r3, r0
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d001      	beq.n	800ef9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ef9a:	f7f2 f93b 	bl	8001214 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ef9e:	490c      	ldr	r1, [pc, #48]	; (800efd0 <MX_USB_DEVICE_Init+0x5c>)
 800efa0:	4809      	ldr	r0, [pc, #36]	; (800efc8 <MX_USB_DEVICE_Init+0x54>)
 800efa2:	f7fe fc65 	bl	800d870 <USBD_CDC_RegisterInterface>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d001      	beq.n	800efb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800efac:	f7f2 f932 	bl	8001214 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800efb0:	4805      	ldr	r0, [pc, #20]	; (800efc8 <MX_USB_DEVICE_Init+0x54>)
 800efb2:	f7fe fd53 	bl	800da5c <USBD_Start>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d001      	beq.n	800efc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800efbc:	f7f2 f92a 	bl	8001214 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800efc0:	bf00      	nop
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	200000ac 	.word	0x200000ac
 800efc8:	20000998 	.word	0x20000998
 800efcc:	20000018 	.word	0x20000018
 800efd0:	20000098 	.word	0x20000098

0800efd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800efd8:	2200      	movs	r2, #0
 800efda:	4905      	ldr	r1, [pc, #20]	; (800eff0 <CDC_Init_FS+0x1c>)
 800efdc:	4805      	ldr	r0, [pc, #20]	; (800eff4 <CDC_Init_FS+0x20>)
 800efde:	f7fe fc61 	bl	800d8a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800efe2:	4905      	ldr	r1, [pc, #20]	; (800eff8 <CDC_Init_FS+0x24>)
 800efe4:	4803      	ldr	r0, [pc, #12]	; (800eff4 <CDC_Init_FS+0x20>)
 800efe6:	f7fe fc7f 	bl	800d8e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800efea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800efec:	4618      	mov	r0, r3
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	20001474 	.word	0x20001474
 800eff4:	20000998 	.word	0x20000998
 800eff8:	20000c74 	.word	0x20000c74

0800effc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800effc:	b480      	push	{r7}
 800effe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f000:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f002:	4618      	mov	r0, r3
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
 800f012:	4603      	mov	r3, r0
 800f014:	6039      	str	r1, [r7, #0]
 800f016:	71fb      	strb	r3, [r7, #7]
 800f018:	4613      	mov	r3, r2
 800f01a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f01c:	79fb      	ldrb	r3, [r7, #7]
 800f01e:	2b23      	cmp	r3, #35	; 0x23
 800f020:	f200 808c 	bhi.w	800f13c <CDC_Control_FS+0x130>
 800f024:	a201      	add	r2, pc, #4	; (adr r2, 800f02c <CDC_Control_FS+0x20>)
 800f026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f02a:	bf00      	nop
 800f02c:	0800f13d 	.word	0x0800f13d
 800f030:	0800f13d 	.word	0x0800f13d
 800f034:	0800f13d 	.word	0x0800f13d
 800f038:	0800f13d 	.word	0x0800f13d
 800f03c:	0800f13d 	.word	0x0800f13d
 800f040:	0800f13d 	.word	0x0800f13d
 800f044:	0800f13d 	.word	0x0800f13d
 800f048:	0800f13d 	.word	0x0800f13d
 800f04c:	0800f13d 	.word	0x0800f13d
 800f050:	0800f13d 	.word	0x0800f13d
 800f054:	0800f13d 	.word	0x0800f13d
 800f058:	0800f13d 	.word	0x0800f13d
 800f05c:	0800f13d 	.word	0x0800f13d
 800f060:	0800f13d 	.word	0x0800f13d
 800f064:	0800f13d 	.word	0x0800f13d
 800f068:	0800f13d 	.word	0x0800f13d
 800f06c:	0800f13d 	.word	0x0800f13d
 800f070:	0800f13d 	.word	0x0800f13d
 800f074:	0800f13d 	.word	0x0800f13d
 800f078:	0800f13d 	.word	0x0800f13d
 800f07c:	0800f13d 	.word	0x0800f13d
 800f080:	0800f13d 	.word	0x0800f13d
 800f084:	0800f13d 	.word	0x0800f13d
 800f088:	0800f13d 	.word	0x0800f13d
 800f08c:	0800f13d 	.word	0x0800f13d
 800f090:	0800f13d 	.word	0x0800f13d
 800f094:	0800f13d 	.word	0x0800f13d
 800f098:	0800f13d 	.word	0x0800f13d
 800f09c:	0800f13d 	.word	0x0800f13d
 800f0a0:	0800f13d 	.word	0x0800f13d
 800f0a4:	0800f13d 	.word	0x0800f13d
 800f0a8:	0800f13d 	.word	0x0800f13d
 800f0ac:	0800f0bd 	.word	0x0800f0bd
 800f0b0:	0800f0f7 	.word	0x0800f0f7
 800f0b4:	0800f13d 	.word	0x0800f13d
 800f0b8:	0800f13d 	.word	0x0800f13d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	usbVcpParameters[0] = pbuf[0];
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	781a      	ldrb	r2, [r3, #0]
 800f0c0:	4b22      	ldr	r3, [pc, #136]	; (800f14c <CDC_Control_FS+0x140>)
 800f0c2:	701a      	strb	r2, [r3, #0]
    	usbVcpParameters[1] = pbuf[1];
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	785a      	ldrb	r2, [r3, #1]
 800f0c8:	4b20      	ldr	r3, [pc, #128]	; (800f14c <CDC_Control_FS+0x140>)
 800f0ca:	705a      	strb	r2, [r3, #1]
    	usbVcpParameters[2] = pbuf[2];
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	789a      	ldrb	r2, [r3, #2]
 800f0d0:	4b1e      	ldr	r3, [pc, #120]	; (800f14c <CDC_Control_FS+0x140>)
 800f0d2:	709a      	strb	r2, [r3, #2]
    	usbVcpParameters[3] = pbuf[3];
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	78da      	ldrb	r2, [r3, #3]
 800f0d8:	4b1c      	ldr	r3, [pc, #112]	; (800f14c <CDC_Control_FS+0x140>)
 800f0da:	70da      	strb	r2, [r3, #3]
    	usbVcpParameters[4] = pbuf[4];
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	791a      	ldrb	r2, [r3, #4]
 800f0e0:	4b1a      	ldr	r3, [pc, #104]	; (800f14c <CDC_Control_FS+0x140>)
 800f0e2:	711a      	strb	r2, [r3, #4]
    	usbVcpParameters[5] = pbuf[5];
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	795a      	ldrb	r2, [r3, #5]
 800f0e8:	4b18      	ldr	r3, [pc, #96]	; (800f14c <CDC_Control_FS+0x140>)
 800f0ea:	715a      	strb	r2, [r3, #5]
    	usbVcpParameters[6] = pbuf[6];
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	799a      	ldrb	r2, [r3, #6]
 800f0f0:	4b16      	ldr	r3, [pc, #88]	; (800f14c <CDC_Control_FS+0x140>)
 800f0f2:	719a      	strb	r2, [r3, #6]

    break;
 800f0f4:	e023      	b.n	800f13e <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = usbVcpParameters[0];
 800f0f6:	4b15      	ldr	r3, [pc, #84]	; (800f14c <CDC_Control_FS+0x140>)
 800f0f8:	781a      	ldrb	r2, [r3, #0]
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = usbVcpParameters[1];
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	3301      	adds	r3, #1
 800f102:	4a12      	ldr	r2, [pc, #72]	; (800f14c <CDC_Control_FS+0x140>)
 800f104:	7852      	ldrb	r2, [r2, #1]
 800f106:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = usbVcpParameters[2];
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	3302      	adds	r3, #2
 800f10c:	4a0f      	ldr	r2, [pc, #60]	; (800f14c <CDC_Control_FS+0x140>)
 800f10e:	7892      	ldrb	r2, [r2, #2]
 800f110:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = usbVcpParameters[3];
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	3303      	adds	r3, #3
 800f116:	4a0d      	ldr	r2, [pc, #52]	; (800f14c <CDC_Control_FS+0x140>)
 800f118:	78d2      	ldrb	r2, [r2, #3]
 800f11a:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = usbVcpParameters[4];
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	3304      	adds	r3, #4
 800f120:	4a0a      	ldr	r2, [pc, #40]	; (800f14c <CDC_Control_FS+0x140>)
 800f122:	7912      	ldrb	r2, [r2, #4]
 800f124:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = usbVcpParameters[5];
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	3305      	adds	r3, #5
 800f12a:	4a08      	ldr	r2, [pc, #32]	; (800f14c <CDC_Control_FS+0x140>)
 800f12c:	7952      	ldrb	r2, [r2, #5]
 800f12e:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = usbVcpParameters[6];
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	3306      	adds	r3, #6
 800f134:	4a05      	ldr	r2, [pc, #20]	; (800f14c <CDC_Control_FS+0x140>)
 800f136:	7992      	ldrb	r2, [r2, #6]
 800f138:	701a      	strb	r2, [r3, #0]

    break;
 800f13a:	e000      	b.n	800f13e <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f13c:	bf00      	nop
  }

  return (USBD_OK);
 800f13e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f140:	4618      	mov	r0, r3
 800f142:	370c      	adds	r7, #12
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr
 800f14c:	20000714 	.word	0x20000714

0800f150 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f15a:	6879      	ldr	r1, [r7, #4]
 800f15c:	4808      	ldr	r0, [pc, #32]	; (800f180 <CDC_Receive_FS+0x30>)
 800f15e:	f7fe fbc3 	bl	800d8e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f162:	4807      	ldr	r0, [pc, #28]	; (800f180 <CDC_Receive_FS+0x30>)
 800f164:	f7fe fbde 	bl	800d924 <USBD_CDC_ReceivePacket>

  PDM_USB_Process(Buf, *Len);
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	4619      	mov	r1, r3
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f7f2 f947 	bl	8001404 <PDM_USB_Process>

  return (USBD_OK);
 800f176:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3708      	adds	r7, #8
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}
 800f180:	20000998 	.word	0x20000998

0800f184 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f184:	b480      	push	{r7}
 800f186:	b087      	sub	sp, #28
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	4613      	mov	r3, r2
 800f190:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f192:	2300      	movs	r3, #0
 800f194:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	371c      	adds	r7, #28
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr
	...

0800f1a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	6039      	str	r1, [r7, #0]
 800f1b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	2212      	movs	r2, #18
 800f1b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f1ba:	4b03      	ldr	r3, [pc, #12]	; (800f1c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	370c      	adds	r7, #12
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr
 800f1c8:	200000c8 	.word	0x200000c8

0800f1cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	6039      	str	r1, [r7, #0]
 800f1d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	2204      	movs	r2, #4
 800f1dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f1de:	4b03      	ldr	r3, [pc, #12]	; (800f1ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	370c      	adds	r7, #12
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr
 800f1ec:	200000dc 	.word	0x200000dc

0800f1f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	6039      	str	r1, [r7, #0]
 800f1fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f1fc:	79fb      	ldrb	r3, [r7, #7]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d105      	bne.n	800f20e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f202:	683a      	ldr	r2, [r7, #0]
 800f204:	4907      	ldr	r1, [pc, #28]	; (800f224 <USBD_FS_ProductStrDescriptor+0x34>)
 800f206:	4808      	ldr	r0, [pc, #32]	; (800f228 <USBD_FS_ProductStrDescriptor+0x38>)
 800f208:	f7ff fdd4 	bl	800edb4 <USBD_GetString>
 800f20c:	e004      	b.n	800f218 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f20e:	683a      	ldr	r2, [r7, #0]
 800f210:	4904      	ldr	r1, [pc, #16]	; (800f224 <USBD_FS_ProductStrDescriptor+0x34>)
 800f212:	4805      	ldr	r0, [pc, #20]	; (800f228 <USBD_FS_ProductStrDescriptor+0x38>)
 800f214:	f7ff fdce 	bl	800edb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f218:	4b02      	ldr	r3, [pc, #8]	; (800f224 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	20001c74 	.word	0x20001c74
 800f228:	0800fce4 	.word	0x0800fce4

0800f22c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
 800f232:	4603      	mov	r3, r0
 800f234:	6039      	str	r1, [r7, #0]
 800f236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f238:	683a      	ldr	r2, [r7, #0]
 800f23a:	4904      	ldr	r1, [pc, #16]	; (800f24c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f23c:	4804      	ldr	r0, [pc, #16]	; (800f250 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f23e:	f7ff fdb9 	bl	800edb4 <USBD_GetString>
  return USBD_StrDesc;
 800f242:	4b02      	ldr	r3, [pc, #8]	; (800f24c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f244:	4618      	mov	r0, r3
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	20001c74 	.word	0x20001c74
 800f250:	0800fcfc 	.word	0x0800fcfc

0800f254 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	4603      	mov	r3, r0
 800f25c:	6039      	str	r1, [r7, #0]
 800f25e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	221a      	movs	r2, #26
 800f264:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f266:	f000 f843 	bl	800f2f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f26a:	4b02      	ldr	r3, [pc, #8]	; (800f274 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3708      	adds	r7, #8
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}
 800f274:	200000e0 	.word	0x200000e0

0800f278 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	4603      	mov	r3, r0
 800f280:	6039      	str	r1, [r7, #0]
 800f282:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f284:	79fb      	ldrb	r3, [r7, #7]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d105      	bne.n	800f296 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f28a:	683a      	ldr	r2, [r7, #0]
 800f28c:	4907      	ldr	r1, [pc, #28]	; (800f2ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800f28e:	4808      	ldr	r0, [pc, #32]	; (800f2b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f290:	f7ff fd90 	bl	800edb4 <USBD_GetString>
 800f294:	e004      	b.n	800f2a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f296:	683a      	ldr	r2, [r7, #0]
 800f298:	4904      	ldr	r1, [pc, #16]	; (800f2ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800f29a:	4805      	ldr	r0, [pc, #20]	; (800f2b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f29c:	f7ff fd8a 	bl	800edb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f2a0:	4b02      	ldr	r3, [pc, #8]	; (800f2ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3708      	adds	r7, #8
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	20001c74 	.word	0x20001c74
 800f2b0:	0800fd10 	.word	0x0800fd10

0800f2b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	6039      	str	r1, [r7, #0]
 800f2be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f2c0:	79fb      	ldrb	r3, [r7, #7]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d105      	bne.n	800f2d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f2c6:	683a      	ldr	r2, [r7, #0]
 800f2c8:	4907      	ldr	r1, [pc, #28]	; (800f2e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f2ca:	4808      	ldr	r0, [pc, #32]	; (800f2ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f2cc:	f7ff fd72 	bl	800edb4 <USBD_GetString>
 800f2d0:	e004      	b.n	800f2dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f2d2:	683a      	ldr	r2, [r7, #0]
 800f2d4:	4904      	ldr	r1, [pc, #16]	; (800f2e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f2d6:	4805      	ldr	r0, [pc, #20]	; (800f2ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f2d8:	f7ff fd6c 	bl	800edb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f2dc:	4b02      	ldr	r3, [pc, #8]	; (800f2e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3708      	adds	r7, #8
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	20001c74 	.word	0x20001c74
 800f2ec:	0800fd1c 	.word	0x0800fd1c

0800f2f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b084      	sub	sp, #16
 800f2f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f2f6:	4b0f      	ldr	r3, [pc, #60]	; (800f334 <Get_SerialNum+0x44>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f2fc:	4b0e      	ldr	r3, [pc, #56]	; (800f338 <Get_SerialNum+0x48>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f302:	4b0e      	ldr	r3, [pc, #56]	; (800f33c <Get_SerialNum+0x4c>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f308:	68fa      	ldr	r2, [r7, #12]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4413      	add	r3, r2
 800f30e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d009      	beq.n	800f32a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f316:	2208      	movs	r2, #8
 800f318:	4909      	ldr	r1, [pc, #36]	; (800f340 <Get_SerialNum+0x50>)
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f000 f814 	bl	800f348 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f320:	2204      	movs	r2, #4
 800f322:	4908      	ldr	r1, [pc, #32]	; (800f344 <Get_SerialNum+0x54>)
 800f324:	68b8      	ldr	r0, [r7, #8]
 800f326:	f000 f80f 	bl	800f348 <IntToUnicode>
  }
}
 800f32a:	bf00      	nop
 800f32c:	3710      	adds	r7, #16
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	1fff7a10 	.word	0x1fff7a10
 800f338:	1fff7a14 	.word	0x1fff7a14
 800f33c:	1fff7a18 	.word	0x1fff7a18
 800f340:	200000e2 	.word	0x200000e2
 800f344:	200000f2 	.word	0x200000f2

0800f348 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f348:	b480      	push	{r7}
 800f34a:	b087      	sub	sp, #28
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	4613      	mov	r3, r2
 800f354:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f356:	2300      	movs	r3, #0
 800f358:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f35a:	2300      	movs	r3, #0
 800f35c:	75fb      	strb	r3, [r7, #23]
 800f35e:	e027      	b.n	800f3b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	0f1b      	lsrs	r3, r3, #28
 800f364:	2b09      	cmp	r3, #9
 800f366:	d80b      	bhi.n	800f380 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	0f1b      	lsrs	r3, r3, #28
 800f36c:	b2da      	uxtb	r2, r3
 800f36e:	7dfb      	ldrb	r3, [r7, #23]
 800f370:	005b      	lsls	r3, r3, #1
 800f372:	4619      	mov	r1, r3
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	440b      	add	r3, r1
 800f378:	3230      	adds	r2, #48	; 0x30
 800f37a:	b2d2      	uxtb	r2, r2
 800f37c:	701a      	strb	r2, [r3, #0]
 800f37e:	e00a      	b.n	800f396 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	0f1b      	lsrs	r3, r3, #28
 800f384:	b2da      	uxtb	r2, r3
 800f386:	7dfb      	ldrb	r3, [r7, #23]
 800f388:	005b      	lsls	r3, r3, #1
 800f38a:	4619      	mov	r1, r3
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	440b      	add	r3, r1
 800f390:	3237      	adds	r2, #55	; 0x37
 800f392:	b2d2      	uxtb	r2, r2
 800f394:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	011b      	lsls	r3, r3, #4
 800f39a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f39c:	7dfb      	ldrb	r3, [r7, #23]
 800f39e:	005b      	lsls	r3, r3, #1
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	68ba      	ldr	r2, [r7, #8]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f3aa:	7dfb      	ldrb	r3, [r7, #23]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	75fb      	strb	r3, [r7, #23]
 800f3b0:	7dfa      	ldrb	r2, [r7, #23]
 800f3b2:	79fb      	ldrb	r3, [r7, #7]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d3d3      	bcc.n	800f360 <IntToUnicode+0x18>
  }
}
 800f3b8:	bf00      	nop
 800f3ba:	bf00      	nop
 800f3bc:	371c      	adds	r7, #28
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr
	...

0800f3c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b0a0      	sub	sp, #128	; 0x80
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f3d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	601a      	str	r2, [r3, #0]
 800f3d8:	605a      	str	r2, [r3, #4]
 800f3da:	609a      	str	r2, [r3, #8]
 800f3dc:	60da      	str	r2, [r3, #12]
 800f3de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f3e0:	f107 0310 	add.w	r3, r7, #16
 800f3e4:	225c      	movs	r2, #92	; 0x5c
 800f3e6:	2100      	movs	r1, #0
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f000 fb69 	bl	800fac0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f3f6:	d161      	bne.n	800f4bc <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f3f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f3fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 800f3fe:	2308      	movs	r3, #8
 800f400:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800f402:	23c0      	movs	r3, #192	; 0xc0
 800f404:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800f406:	2302      	movs	r3, #2
 800f408:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800f40a:	2304      	movs	r3, #4
 800f40c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800f40e:	2301      	movs	r3, #1
 800f410:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800f412:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f416:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f418:	f107 0310 	add.w	r3, r7, #16
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7f9 fac7 	bl	80089b0 <HAL_RCCEx_PeriphCLKConfig>
 800f422:	4603      	mov	r3, r0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d001      	beq.n	800f42c <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 800f428:	f7f1 fef4 	bl	8001214 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f42c:	2300      	movs	r3, #0
 800f42e:	60fb      	str	r3, [r7, #12]
 800f430:	4b24      	ldr	r3, [pc, #144]	; (800f4c4 <HAL_PCD_MspInit+0xfc>)
 800f432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f434:	4a23      	ldr	r2, [pc, #140]	; (800f4c4 <HAL_PCD_MspInit+0xfc>)
 800f436:	f043 0301 	orr.w	r3, r3, #1
 800f43a:	6313      	str	r3, [r2, #48]	; 0x30
 800f43c:	4b21      	ldr	r3, [pc, #132]	; (800f4c4 <HAL_PCD_MspInit+0xfc>)
 800f43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f440:	f003 0301 	and.w	r3, r3, #1
 800f444:	60fb      	str	r3, [r7, #12]
 800f446:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f44c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f44e:	2300      	movs	r3, #0
 800f450:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f452:	2300      	movs	r3, #0
 800f454:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f456:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f45a:	4619      	mov	r1, r3
 800f45c:	481a      	ldr	r0, [pc, #104]	; (800f4c8 <HAL_PCD_MspInit+0x100>)
 800f45e:	f7f6 fda1 	bl	8005fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f462:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f466:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f468:	2302      	movs	r3, #2
 800f46a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f46c:	2300      	movs	r3, #0
 800f46e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f470:	2303      	movs	r3, #3
 800f472:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f474:	230a      	movs	r3, #10
 800f476:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f478:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f47c:	4619      	mov	r1, r3
 800f47e:	4812      	ldr	r0, [pc, #72]	; (800f4c8 <HAL_PCD_MspInit+0x100>)
 800f480:	f7f6 fd90 	bl	8005fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f484:	4b0f      	ldr	r3, [pc, #60]	; (800f4c4 <HAL_PCD_MspInit+0xfc>)
 800f486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f488:	4a0e      	ldr	r2, [pc, #56]	; (800f4c4 <HAL_PCD_MspInit+0xfc>)
 800f48a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f48e:	6353      	str	r3, [r2, #52]	; 0x34
 800f490:	2300      	movs	r3, #0
 800f492:	60bb      	str	r3, [r7, #8]
 800f494:	4b0b      	ldr	r3, [pc, #44]	; (800f4c4 <HAL_PCD_MspInit+0xfc>)
 800f496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f498:	4a0a      	ldr	r2, [pc, #40]	; (800f4c4 <HAL_PCD_MspInit+0xfc>)
 800f49a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f49e:	6453      	str	r3, [r2, #68]	; 0x44
 800f4a0:	4b08      	ldr	r3, [pc, #32]	; (800f4c4 <HAL_PCD_MspInit+0xfc>)
 800f4a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f4a8:	60bb      	str	r3, [r7, #8]
 800f4aa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	2043      	movs	r0, #67	; 0x43
 800f4b2:	f7f6 f9a6 	bl	8005802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f4b6:	2043      	movs	r0, #67	; 0x43
 800f4b8:	f7f6 f9bf 	bl	800583a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f4bc:	bf00      	nop
 800f4be:	3780      	adds	r7, #128	; 0x80
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	40023800 	.word	0x40023800
 800f4c8:	40020000 	.word	0x40020000

0800f4cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	4610      	mov	r0, r2
 800f4e4:	f7fe fb07 	bl	800daf6 <USBD_LL_SetupStage>
}
 800f4e8:	bf00      	nop
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f502:	78fa      	ldrb	r2, [r7, #3]
 800f504:	6879      	ldr	r1, [r7, #4]
 800f506:	4613      	mov	r3, r2
 800f508:	00db      	lsls	r3, r3, #3
 800f50a:	4413      	add	r3, r2
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	440b      	add	r3, r1
 800f510:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f514:	681a      	ldr	r2, [r3, #0]
 800f516:	78fb      	ldrb	r3, [r7, #3]
 800f518:	4619      	mov	r1, r3
 800f51a:	f7fe fb41 	bl	800dba0 <USBD_LL_DataOutStage>
}
 800f51e:	bf00      	nop
 800f520:	3708      	adds	r7, #8
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}

0800f526 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f526:	b580      	push	{r7, lr}
 800f528:	b082      	sub	sp, #8
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
 800f52e:	460b      	mov	r3, r1
 800f530:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f538:	78fa      	ldrb	r2, [r7, #3]
 800f53a:	6879      	ldr	r1, [r7, #4]
 800f53c:	4613      	mov	r3, r2
 800f53e:	00db      	lsls	r3, r3, #3
 800f540:	4413      	add	r3, r2
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	440b      	add	r3, r1
 800f546:	334c      	adds	r3, #76	; 0x4c
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	78fb      	ldrb	r3, [r7, #3]
 800f54c:	4619      	mov	r1, r3
 800f54e:	f7fe fbda 	bl	800dd06 <USBD_LL_DataInStage>
}
 800f552:	bf00      	nop
 800f554:	3708      	adds	r7, #8
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}

0800f55a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b082      	sub	sp, #8
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fe fd0e 	bl	800df8a <USBD_LL_SOF>
}
 800f56e:	bf00      	nop
 800f570:	3708      	adds	r7, #8
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}

0800f576 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f576:	b580      	push	{r7, lr}
 800f578:	b084      	sub	sp, #16
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f57e:	2301      	movs	r3, #1
 800f580:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	68db      	ldr	r3, [r3, #12]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d102      	bne.n	800f590 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f58a:	2300      	movs	r3, #0
 800f58c:	73fb      	strb	r3, [r7, #15]
 800f58e:	e008      	b.n	800f5a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	2b02      	cmp	r3, #2
 800f596:	d102      	bne.n	800f59e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f598:	2301      	movs	r3, #1
 800f59a:	73fb      	strb	r3, [r7, #15]
 800f59c:	e001      	b.n	800f5a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f59e:	f7f1 fe39 	bl	8001214 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5a8:	7bfa      	ldrb	r2, [r7, #15]
 800f5aa:	4611      	mov	r1, r2
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7fe fcae 	bl	800df0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fe fc56 	bl	800de6a <USBD_LL_Reset>
}
 800f5be:	bf00      	nop
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
	...

0800f5c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7fe fca9 	bl	800df2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	6812      	ldr	r2, [r2, #0]
 800f5ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f5ee:	f043 0301 	orr.w	r3, r3, #1
 800f5f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6a1b      	ldr	r3, [r3, #32]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d005      	beq.n	800f608 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f5fc:	4b04      	ldr	r3, [pc, #16]	; (800f610 <HAL_PCD_SuspendCallback+0x48>)
 800f5fe:	691b      	ldr	r3, [r3, #16]
 800f600:	4a03      	ldr	r2, [pc, #12]	; (800f610 <HAL_PCD_SuspendCallback+0x48>)
 800f602:	f043 0306 	orr.w	r3, r3, #6
 800f606:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f608:	bf00      	nop
 800f60a:	3708      	adds	r7, #8
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	e000ed00 	.word	0xe000ed00

0800f614 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f622:	4618      	mov	r0, r3
 800f624:	f7fe fc99 	bl	800df5a <USBD_LL_Resume>
}
 800f628:	bf00      	nop
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	460b      	mov	r3, r1
 800f63a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f642:	78fa      	ldrb	r2, [r7, #3]
 800f644:	4611      	mov	r1, r2
 800f646:	4618      	mov	r0, r3
 800f648:	f7fe fcf1 	bl	800e02e <USBD_LL_IsoOUTIncomplete>
}
 800f64c:	bf00      	nop
 800f64e:	3708      	adds	r7, #8
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	460b      	mov	r3, r1
 800f65e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f666:	78fa      	ldrb	r2, [r7, #3]
 800f668:	4611      	mov	r1, r2
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fe fcad 	bl	800dfca <USBD_LL_IsoINIncomplete>
}
 800f670:	bf00      	nop
 800f672:	3708      	adds	r7, #8
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f686:	4618      	mov	r0, r3
 800f688:	f7fe fd03 	bl	800e092 <USBD_LL_DevConnected>
}
 800f68c:	bf00      	nop
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fe fd00 	bl	800e0a8 <USBD_LL_DevDisconnected>
}
 800f6a8:	bf00      	nop
 800f6aa:	3708      	adds	r7, #8
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d13c      	bne.n	800f73a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f6c0:	4a20      	ldr	r2, [pc, #128]	; (800f744 <USBD_LL_Init+0x94>)
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	4a1e      	ldr	r2, [pc, #120]	; (800f744 <USBD_LL_Init+0x94>)
 800f6cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f6d0:	4b1c      	ldr	r3, [pc, #112]	; (800f744 <USBD_LL_Init+0x94>)
 800f6d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f6d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f6d8:	4b1a      	ldr	r3, [pc, #104]	; (800f744 <USBD_LL_Init+0x94>)
 800f6da:	2206      	movs	r2, #6
 800f6dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f6de:	4b19      	ldr	r3, [pc, #100]	; (800f744 <USBD_LL_Init+0x94>)
 800f6e0:	2202      	movs	r2, #2
 800f6e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f6e4:	4b17      	ldr	r3, [pc, #92]	; (800f744 <USBD_LL_Init+0x94>)
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f6ea:	4b16      	ldr	r3, [pc, #88]	; (800f744 <USBD_LL_Init+0x94>)
 800f6ec:	2202      	movs	r2, #2
 800f6ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f6f0:	4b14      	ldr	r3, [pc, #80]	; (800f744 <USBD_LL_Init+0x94>)
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f6f6:	4b13      	ldr	r3, [pc, #76]	; (800f744 <USBD_LL_Init+0x94>)
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f6fc:	4b11      	ldr	r3, [pc, #68]	; (800f744 <USBD_LL_Init+0x94>)
 800f6fe:	2200      	movs	r2, #0
 800f700:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800f702:	4b10      	ldr	r3, [pc, #64]	; (800f744 <USBD_LL_Init+0x94>)
 800f704:	2201      	movs	r2, #1
 800f706:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f708:	4b0e      	ldr	r3, [pc, #56]	; (800f744 <USBD_LL_Init+0x94>)
 800f70a:	2200      	movs	r2, #0
 800f70c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f70e:	480d      	ldr	r0, [pc, #52]	; (800f744 <USBD_LL_Init+0x94>)
 800f710:	f7f7 fd22 	bl	8007158 <HAL_PCD_Init>
 800f714:	4603      	mov	r3, r0
 800f716:	2b00      	cmp	r3, #0
 800f718:	d001      	beq.n	800f71e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f71a:	f7f1 fd7b 	bl	8001214 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f71e:	2180      	movs	r1, #128	; 0x80
 800f720:	4808      	ldr	r0, [pc, #32]	; (800f744 <USBD_LL_Init+0x94>)
 800f722:	f7f8 ffae 	bl	8008682 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f726:	2240      	movs	r2, #64	; 0x40
 800f728:	2100      	movs	r1, #0
 800f72a:	4806      	ldr	r0, [pc, #24]	; (800f744 <USBD_LL_Init+0x94>)
 800f72c:	f7f8 ff62 	bl	80085f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f730:	2280      	movs	r2, #128	; 0x80
 800f732:	2101      	movs	r1, #1
 800f734:	4803      	ldr	r0, [pc, #12]	; (800f744 <USBD_LL_Init+0x94>)
 800f736:	f7f8 ff5d 	bl	80085f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3708      	adds	r7, #8
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}
 800f744:	20001e74 	.word	0x20001e74

0800f748 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f750:	2300      	movs	r3, #0
 800f752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f754:	2300      	movs	r3, #0
 800f756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f75e:	4618      	mov	r0, r3
 800f760:	f7f7 fe1e 	bl	80073a0 <HAL_PCD_Start>
 800f764:	4603      	mov	r3, r0
 800f766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f768:	7bfb      	ldrb	r3, [r7, #15]
 800f76a:	4618      	mov	r0, r3
 800f76c:	f000 f942 	bl	800f9f4 <USBD_Get_USB_Status>
 800f770:	4603      	mov	r3, r0
 800f772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f774:	7bbb      	ldrb	r3, [r7, #14]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3710      	adds	r7, #16
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f77e:	b580      	push	{r7, lr}
 800f780:	b084      	sub	sp, #16
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
 800f786:	4608      	mov	r0, r1
 800f788:	4611      	mov	r1, r2
 800f78a:	461a      	mov	r2, r3
 800f78c:	4603      	mov	r3, r0
 800f78e:	70fb      	strb	r3, [r7, #3]
 800f790:	460b      	mov	r3, r1
 800f792:	70bb      	strb	r3, [r7, #2]
 800f794:	4613      	mov	r3, r2
 800f796:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f798:	2300      	movs	r3, #0
 800f79a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f79c:	2300      	movs	r3, #0
 800f79e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f7a6:	78bb      	ldrb	r3, [r7, #2]
 800f7a8:	883a      	ldrh	r2, [r7, #0]
 800f7aa:	78f9      	ldrb	r1, [r7, #3]
 800f7ac:	f7f8 fb1c 	bl	8007de8 <HAL_PCD_EP_Open>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7b4:	7bfb      	ldrb	r3, [r7, #15]
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f000 f91c 	bl	800f9f4 <USBD_Get_USB_Status>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3710      	adds	r7, #16
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}

0800f7ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7ca:	b580      	push	{r7, lr}
 800f7cc:	b084      	sub	sp, #16
 800f7ce:	af00      	add	r7, sp, #0
 800f7d0:	6078      	str	r0, [r7, #4]
 800f7d2:	460b      	mov	r3, r1
 800f7d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f7e4:	78fa      	ldrb	r2, [r7, #3]
 800f7e6:	4611      	mov	r1, r2
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7f8 fb65 	bl	8007eb8 <HAL_PCD_EP_Close>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7f2:	7bfb      	ldrb	r3, [r7, #15]
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f000 f8fd 	bl	800f9f4 <USBD_Get_USB_Status>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800f800:	4618      	mov	r0, r3
 800f802:	3710      	adds	r7, #16
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b084      	sub	sp, #16
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	460b      	mov	r3, r1
 800f812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f814:	2300      	movs	r3, #0
 800f816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f818:	2300      	movs	r3, #0
 800f81a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f822:	78fa      	ldrb	r2, [r7, #3]
 800f824:	4611      	mov	r1, r2
 800f826:	4618      	mov	r0, r3
 800f828:	f7f8 fc3d 	bl	80080a6 <HAL_PCD_EP_SetStall>
 800f82c:	4603      	mov	r3, r0
 800f82e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f830:	7bfb      	ldrb	r3, [r7, #15]
 800f832:	4618      	mov	r0, r3
 800f834:	f000 f8de 	bl	800f9f4 <USBD_Get_USB_Status>
 800f838:	4603      	mov	r3, r0
 800f83a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f83c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3710      	adds	r7, #16
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}

0800f846 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f846:	b580      	push	{r7, lr}
 800f848:	b084      	sub	sp, #16
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	6078      	str	r0, [r7, #4]
 800f84e:	460b      	mov	r3, r1
 800f850:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f852:	2300      	movs	r3, #0
 800f854:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f856:	2300      	movs	r3, #0
 800f858:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f860:	78fa      	ldrb	r2, [r7, #3]
 800f862:	4611      	mov	r1, r2
 800f864:	4618      	mov	r0, r3
 800f866:	f7f8 fc82 	bl	800816e <HAL_PCD_EP_ClrStall>
 800f86a:	4603      	mov	r3, r0
 800f86c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f86e:	7bfb      	ldrb	r3, [r7, #15]
 800f870:	4618      	mov	r0, r3
 800f872:	f000 f8bf 	bl	800f9f4 <USBD_Get_USB_Status>
 800f876:	4603      	mov	r3, r0
 800f878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f87a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3710      	adds	r7, #16
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f884:	b480      	push	{r7}
 800f886:	b085      	sub	sp, #20
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	460b      	mov	r3, r1
 800f88e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f896:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	da0b      	bge.n	800f8b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f8a0:	78fb      	ldrb	r3, [r7, #3]
 800f8a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f8a6:	68f9      	ldr	r1, [r7, #12]
 800f8a8:	4613      	mov	r3, r2
 800f8aa:	00db      	lsls	r3, r3, #3
 800f8ac:	4413      	add	r3, r2
 800f8ae:	009b      	lsls	r3, r3, #2
 800f8b0:	440b      	add	r3, r1
 800f8b2:	333e      	adds	r3, #62	; 0x3e
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	e00b      	b.n	800f8d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f8b8:	78fb      	ldrb	r3, [r7, #3]
 800f8ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f8be:	68f9      	ldr	r1, [r7, #12]
 800f8c0:	4613      	mov	r3, r2
 800f8c2:	00db      	lsls	r3, r3, #3
 800f8c4:	4413      	add	r3, r2
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	440b      	add	r3, r1
 800f8ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f8ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3714      	adds	r7, #20
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr

0800f8dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f8f6:	78fa      	ldrb	r2, [r7, #3]
 800f8f8:	4611      	mov	r1, r2
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7f8 fa4f 	bl	8007d9e <HAL_PCD_SetAddress>
 800f900:	4603      	mov	r3, r0
 800f902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f904:	7bfb      	ldrb	r3, [r7, #15]
 800f906:	4618      	mov	r0, r3
 800f908:	f000 f874 	bl	800f9f4 <USBD_Get_USB_Status>
 800f90c:	4603      	mov	r3, r0
 800f90e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f910:	7bbb      	ldrb	r3, [r7, #14]
}
 800f912:	4618      	mov	r0, r3
 800f914:	3710      	adds	r7, #16
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}

0800f91a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f91a:	b580      	push	{r7, lr}
 800f91c:	b086      	sub	sp, #24
 800f91e:	af00      	add	r7, sp, #0
 800f920:	60f8      	str	r0, [r7, #12]
 800f922:	607a      	str	r2, [r7, #4]
 800f924:	603b      	str	r3, [r7, #0]
 800f926:	460b      	mov	r3, r1
 800f928:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f92a:	2300      	movs	r3, #0
 800f92c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f92e:	2300      	movs	r3, #0
 800f930:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f938:	7af9      	ldrb	r1, [r7, #11]
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	f7f8 fb68 	bl	8008012 <HAL_PCD_EP_Transmit>
 800f942:	4603      	mov	r3, r0
 800f944:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f946:	7dfb      	ldrb	r3, [r7, #23]
 800f948:	4618      	mov	r0, r3
 800f94a:	f000 f853 	bl	800f9f4 <USBD_Get_USB_Status>
 800f94e:	4603      	mov	r3, r0
 800f950:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f952:	7dbb      	ldrb	r3, [r7, #22]
}
 800f954:	4618      	mov	r0, r3
 800f956:	3718      	adds	r7, #24
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b086      	sub	sp, #24
 800f960:	af00      	add	r7, sp, #0
 800f962:	60f8      	str	r0, [r7, #12]
 800f964:	607a      	str	r2, [r7, #4]
 800f966:	603b      	str	r3, [r7, #0]
 800f968:	460b      	mov	r3, r1
 800f96a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f96c:	2300      	movs	r3, #0
 800f96e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f970:	2300      	movs	r3, #0
 800f972:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f97a:	7af9      	ldrb	r1, [r7, #11]
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	f7f8 fae4 	bl	8007f4c <HAL_PCD_EP_Receive>
 800f984:	4603      	mov	r3, r0
 800f986:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f988:	7dfb      	ldrb	r3, [r7, #23]
 800f98a:	4618      	mov	r0, r3
 800f98c:	f000 f832 	bl	800f9f4 <USBD_Get_USB_Status>
 800f990:	4603      	mov	r3, r0
 800f992:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f994:	7dbb      	ldrb	r3, [r7, #22]
}
 800f996:	4618      	mov	r0, r3
 800f998:	3718      	adds	r7, #24
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f99e:	b580      	push	{r7, lr}
 800f9a0:	b082      	sub	sp, #8
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
 800f9a6:	460b      	mov	r3, r1
 800f9a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9b0:	78fa      	ldrb	r2, [r7, #3]
 800f9b2:	4611      	mov	r1, r2
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7f8 fb14 	bl	8007fe2 <HAL_PCD_EP_GetRxCount>
 800f9ba:	4603      	mov	r3, r0
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3708      	adds	r7, #8
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f9cc:	4b03      	ldr	r3, [pc, #12]	; (800f9dc <USBD_static_malloc+0x18>)
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	370c      	adds	r7, #12
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d8:	4770      	bx	lr
 800f9da:	bf00      	nop
 800f9dc:	20002380 	.word	0x20002380

0800f9e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b083      	sub	sp, #12
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]

}
 800f9e8:	bf00      	nop
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b085      	sub	sp, #20
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fa02:	79fb      	ldrb	r3, [r7, #7]
 800fa04:	2b03      	cmp	r3, #3
 800fa06:	d817      	bhi.n	800fa38 <USBD_Get_USB_Status+0x44>
 800fa08:	a201      	add	r2, pc, #4	; (adr r2, 800fa10 <USBD_Get_USB_Status+0x1c>)
 800fa0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa0e:	bf00      	nop
 800fa10:	0800fa21 	.word	0x0800fa21
 800fa14:	0800fa27 	.word	0x0800fa27
 800fa18:	0800fa2d 	.word	0x0800fa2d
 800fa1c:	0800fa33 	.word	0x0800fa33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fa20:	2300      	movs	r3, #0
 800fa22:	73fb      	strb	r3, [r7, #15]
    break;
 800fa24:	e00b      	b.n	800fa3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa26:	2303      	movs	r3, #3
 800fa28:	73fb      	strb	r3, [r7, #15]
    break;
 800fa2a:	e008      	b.n	800fa3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	73fb      	strb	r3, [r7, #15]
    break;
 800fa30:	e005      	b.n	800fa3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa32:	2303      	movs	r3, #3
 800fa34:	73fb      	strb	r3, [r7, #15]
    break;
 800fa36:	e002      	b.n	800fa3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fa38:	2303      	movs	r3, #3
 800fa3a:	73fb      	strb	r3, [r7, #15]
    break;
 800fa3c:	bf00      	nop
  }
  return usb_status;
 800fa3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3714      	adds	r7, #20
 800fa44:	46bd      	mov	sp, r7
 800fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4a:	4770      	bx	lr

0800fa4c <__errno>:
 800fa4c:	4b01      	ldr	r3, [pc, #4]	; (800fa54 <__errno+0x8>)
 800fa4e:	6818      	ldr	r0, [r3, #0]
 800fa50:	4770      	bx	lr
 800fa52:	bf00      	nop
 800fa54:	200000fc 	.word	0x200000fc

0800fa58 <__libc_init_array>:
 800fa58:	b570      	push	{r4, r5, r6, lr}
 800fa5a:	4d0d      	ldr	r5, [pc, #52]	; (800fa90 <__libc_init_array+0x38>)
 800fa5c:	4c0d      	ldr	r4, [pc, #52]	; (800fa94 <__libc_init_array+0x3c>)
 800fa5e:	1b64      	subs	r4, r4, r5
 800fa60:	10a4      	asrs	r4, r4, #2
 800fa62:	2600      	movs	r6, #0
 800fa64:	42a6      	cmp	r6, r4
 800fa66:	d109      	bne.n	800fa7c <__libc_init_array+0x24>
 800fa68:	4d0b      	ldr	r5, [pc, #44]	; (800fa98 <__libc_init_array+0x40>)
 800fa6a:	4c0c      	ldr	r4, [pc, #48]	; (800fa9c <__libc_init_array+0x44>)
 800fa6c:	f000 f92e 	bl	800fccc <_init>
 800fa70:	1b64      	subs	r4, r4, r5
 800fa72:	10a4      	asrs	r4, r4, #2
 800fa74:	2600      	movs	r6, #0
 800fa76:	42a6      	cmp	r6, r4
 800fa78:	d105      	bne.n	800fa86 <__libc_init_array+0x2e>
 800fa7a:	bd70      	pop	{r4, r5, r6, pc}
 800fa7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa80:	4798      	blx	r3
 800fa82:	3601      	adds	r6, #1
 800fa84:	e7ee      	b.n	800fa64 <__libc_init_array+0xc>
 800fa86:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa8a:	4798      	blx	r3
 800fa8c:	3601      	adds	r6, #1
 800fa8e:	e7f2      	b.n	800fa76 <__libc_init_array+0x1e>
 800fa90:	0800fd54 	.word	0x0800fd54
 800fa94:	0800fd54 	.word	0x0800fd54
 800fa98:	0800fd54 	.word	0x0800fd54
 800fa9c:	0800fd58 	.word	0x0800fd58

0800faa0 <malloc>:
 800faa0:	4b02      	ldr	r3, [pc, #8]	; (800faac <malloc+0xc>)
 800faa2:	4601      	mov	r1, r0
 800faa4:	6818      	ldr	r0, [r3, #0]
 800faa6:	f000 b87f 	b.w	800fba8 <_malloc_r>
 800faaa:	bf00      	nop
 800faac:	200000fc 	.word	0x200000fc

0800fab0 <free>:
 800fab0:	4b02      	ldr	r3, [pc, #8]	; (800fabc <free+0xc>)
 800fab2:	4601      	mov	r1, r0
 800fab4:	6818      	ldr	r0, [r3, #0]
 800fab6:	f000 b80b 	b.w	800fad0 <_free_r>
 800faba:	bf00      	nop
 800fabc:	200000fc 	.word	0x200000fc

0800fac0 <memset>:
 800fac0:	4402      	add	r2, r0
 800fac2:	4603      	mov	r3, r0
 800fac4:	4293      	cmp	r3, r2
 800fac6:	d100      	bne.n	800faca <memset+0xa>
 800fac8:	4770      	bx	lr
 800faca:	f803 1b01 	strb.w	r1, [r3], #1
 800face:	e7f9      	b.n	800fac4 <memset+0x4>

0800fad0 <_free_r>:
 800fad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fad2:	2900      	cmp	r1, #0
 800fad4:	d044      	beq.n	800fb60 <_free_r+0x90>
 800fad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fada:	9001      	str	r0, [sp, #4]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	f1a1 0404 	sub.w	r4, r1, #4
 800fae2:	bfb8      	it	lt
 800fae4:	18e4      	addlt	r4, r4, r3
 800fae6:	f000 f8e3 	bl	800fcb0 <__malloc_lock>
 800faea:	4a1e      	ldr	r2, [pc, #120]	; (800fb64 <_free_r+0x94>)
 800faec:	9801      	ldr	r0, [sp, #4]
 800faee:	6813      	ldr	r3, [r2, #0]
 800faf0:	b933      	cbnz	r3, 800fb00 <_free_r+0x30>
 800faf2:	6063      	str	r3, [r4, #4]
 800faf4:	6014      	str	r4, [r2, #0]
 800faf6:	b003      	add	sp, #12
 800faf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fafc:	f000 b8de 	b.w	800fcbc <__malloc_unlock>
 800fb00:	42a3      	cmp	r3, r4
 800fb02:	d908      	bls.n	800fb16 <_free_r+0x46>
 800fb04:	6825      	ldr	r5, [r4, #0]
 800fb06:	1961      	adds	r1, r4, r5
 800fb08:	428b      	cmp	r3, r1
 800fb0a:	bf01      	itttt	eq
 800fb0c:	6819      	ldreq	r1, [r3, #0]
 800fb0e:	685b      	ldreq	r3, [r3, #4]
 800fb10:	1949      	addeq	r1, r1, r5
 800fb12:	6021      	streq	r1, [r4, #0]
 800fb14:	e7ed      	b.n	800faf2 <_free_r+0x22>
 800fb16:	461a      	mov	r2, r3
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	b10b      	cbz	r3, 800fb20 <_free_r+0x50>
 800fb1c:	42a3      	cmp	r3, r4
 800fb1e:	d9fa      	bls.n	800fb16 <_free_r+0x46>
 800fb20:	6811      	ldr	r1, [r2, #0]
 800fb22:	1855      	adds	r5, r2, r1
 800fb24:	42a5      	cmp	r5, r4
 800fb26:	d10b      	bne.n	800fb40 <_free_r+0x70>
 800fb28:	6824      	ldr	r4, [r4, #0]
 800fb2a:	4421      	add	r1, r4
 800fb2c:	1854      	adds	r4, r2, r1
 800fb2e:	42a3      	cmp	r3, r4
 800fb30:	6011      	str	r1, [r2, #0]
 800fb32:	d1e0      	bne.n	800faf6 <_free_r+0x26>
 800fb34:	681c      	ldr	r4, [r3, #0]
 800fb36:	685b      	ldr	r3, [r3, #4]
 800fb38:	6053      	str	r3, [r2, #4]
 800fb3a:	4421      	add	r1, r4
 800fb3c:	6011      	str	r1, [r2, #0]
 800fb3e:	e7da      	b.n	800faf6 <_free_r+0x26>
 800fb40:	d902      	bls.n	800fb48 <_free_r+0x78>
 800fb42:	230c      	movs	r3, #12
 800fb44:	6003      	str	r3, [r0, #0]
 800fb46:	e7d6      	b.n	800faf6 <_free_r+0x26>
 800fb48:	6825      	ldr	r5, [r4, #0]
 800fb4a:	1961      	adds	r1, r4, r5
 800fb4c:	428b      	cmp	r3, r1
 800fb4e:	bf04      	itt	eq
 800fb50:	6819      	ldreq	r1, [r3, #0]
 800fb52:	685b      	ldreq	r3, [r3, #4]
 800fb54:	6063      	str	r3, [r4, #4]
 800fb56:	bf04      	itt	eq
 800fb58:	1949      	addeq	r1, r1, r5
 800fb5a:	6021      	streq	r1, [r4, #0]
 800fb5c:	6054      	str	r4, [r2, #4]
 800fb5e:	e7ca      	b.n	800faf6 <_free_r+0x26>
 800fb60:	b003      	add	sp, #12
 800fb62:	bd30      	pop	{r4, r5, pc}
 800fb64:	200025a0 	.word	0x200025a0

0800fb68 <sbrk_aligned>:
 800fb68:	b570      	push	{r4, r5, r6, lr}
 800fb6a:	4e0e      	ldr	r6, [pc, #56]	; (800fba4 <sbrk_aligned+0x3c>)
 800fb6c:	460c      	mov	r4, r1
 800fb6e:	6831      	ldr	r1, [r6, #0]
 800fb70:	4605      	mov	r5, r0
 800fb72:	b911      	cbnz	r1, 800fb7a <sbrk_aligned+0x12>
 800fb74:	f000 f88c 	bl	800fc90 <_sbrk_r>
 800fb78:	6030      	str	r0, [r6, #0]
 800fb7a:	4621      	mov	r1, r4
 800fb7c:	4628      	mov	r0, r5
 800fb7e:	f000 f887 	bl	800fc90 <_sbrk_r>
 800fb82:	1c43      	adds	r3, r0, #1
 800fb84:	d00a      	beq.n	800fb9c <sbrk_aligned+0x34>
 800fb86:	1cc4      	adds	r4, r0, #3
 800fb88:	f024 0403 	bic.w	r4, r4, #3
 800fb8c:	42a0      	cmp	r0, r4
 800fb8e:	d007      	beq.n	800fba0 <sbrk_aligned+0x38>
 800fb90:	1a21      	subs	r1, r4, r0
 800fb92:	4628      	mov	r0, r5
 800fb94:	f000 f87c 	bl	800fc90 <_sbrk_r>
 800fb98:	3001      	adds	r0, #1
 800fb9a:	d101      	bne.n	800fba0 <sbrk_aligned+0x38>
 800fb9c:	f04f 34ff 	mov.w	r4, #4294967295
 800fba0:	4620      	mov	r0, r4
 800fba2:	bd70      	pop	{r4, r5, r6, pc}
 800fba4:	200025a4 	.word	0x200025a4

0800fba8 <_malloc_r>:
 800fba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbac:	1ccd      	adds	r5, r1, #3
 800fbae:	f025 0503 	bic.w	r5, r5, #3
 800fbb2:	3508      	adds	r5, #8
 800fbb4:	2d0c      	cmp	r5, #12
 800fbb6:	bf38      	it	cc
 800fbb8:	250c      	movcc	r5, #12
 800fbba:	2d00      	cmp	r5, #0
 800fbbc:	4607      	mov	r7, r0
 800fbbe:	db01      	blt.n	800fbc4 <_malloc_r+0x1c>
 800fbc0:	42a9      	cmp	r1, r5
 800fbc2:	d905      	bls.n	800fbd0 <_malloc_r+0x28>
 800fbc4:	230c      	movs	r3, #12
 800fbc6:	603b      	str	r3, [r7, #0]
 800fbc8:	2600      	movs	r6, #0
 800fbca:	4630      	mov	r0, r6
 800fbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd0:	4e2e      	ldr	r6, [pc, #184]	; (800fc8c <_malloc_r+0xe4>)
 800fbd2:	f000 f86d 	bl	800fcb0 <__malloc_lock>
 800fbd6:	6833      	ldr	r3, [r6, #0]
 800fbd8:	461c      	mov	r4, r3
 800fbda:	bb34      	cbnz	r4, 800fc2a <_malloc_r+0x82>
 800fbdc:	4629      	mov	r1, r5
 800fbde:	4638      	mov	r0, r7
 800fbe0:	f7ff ffc2 	bl	800fb68 <sbrk_aligned>
 800fbe4:	1c43      	adds	r3, r0, #1
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	d14d      	bne.n	800fc86 <_malloc_r+0xde>
 800fbea:	6834      	ldr	r4, [r6, #0]
 800fbec:	4626      	mov	r6, r4
 800fbee:	2e00      	cmp	r6, #0
 800fbf0:	d140      	bne.n	800fc74 <_malloc_r+0xcc>
 800fbf2:	6823      	ldr	r3, [r4, #0]
 800fbf4:	4631      	mov	r1, r6
 800fbf6:	4638      	mov	r0, r7
 800fbf8:	eb04 0803 	add.w	r8, r4, r3
 800fbfc:	f000 f848 	bl	800fc90 <_sbrk_r>
 800fc00:	4580      	cmp	r8, r0
 800fc02:	d13a      	bne.n	800fc7a <_malloc_r+0xd2>
 800fc04:	6821      	ldr	r1, [r4, #0]
 800fc06:	3503      	adds	r5, #3
 800fc08:	1a6d      	subs	r5, r5, r1
 800fc0a:	f025 0503 	bic.w	r5, r5, #3
 800fc0e:	3508      	adds	r5, #8
 800fc10:	2d0c      	cmp	r5, #12
 800fc12:	bf38      	it	cc
 800fc14:	250c      	movcc	r5, #12
 800fc16:	4629      	mov	r1, r5
 800fc18:	4638      	mov	r0, r7
 800fc1a:	f7ff ffa5 	bl	800fb68 <sbrk_aligned>
 800fc1e:	3001      	adds	r0, #1
 800fc20:	d02b      	beq.n	800fc7a <_malloc_r+0xd2>
 800fc22:	6823      	ldr	r3, [r4, #0]
 800fc24:	442b      	add	r3, r5
 800fc26:	6023      	str	r3, [r4, #0]
 800fc28:	e00e      	b.n	800fc48 <_malloc_r+0xa0>
 800fc2a:	6822      	ldr	r2, [r4, #0]
 800fc2c:	1b52      	subs	r2, r2, r5
 800fc2e:	d41e      	bmi.n	800fc6e <_malloc_r+0xc6>
 800fc30:	2a0b      	cmp	r2, #11
 800fc32:	d916      	bls.n	800fc62 <_malloc_r+0xba>
 800fc34:	1961      	adds	r1, r4, r5
 800fc36:	42a3      	cmp	r3, r4
 800fc38:	6025      	str	r5, [r4, #0]
 800fc3a:	bf18      	it	ne
 800fc3c:	6059      	strne	r1, [r3, #4]
 800fc3e:	6863      	ldr	r3, [r4, #4]
 800fc40:	bf08      	it	eq
 800fc42:	6031      	streq	r1, [r6, #0]
 800fc44:	5162      	str	r2, [r4, r5]
 800fc46:	604b      	str	r3, [r1, #4]
 800fc48:	4638      	mov	r0, r7
 800fc4a:	f104 060b 	add.w	r6, r4, #11
 800fc4e:	f000 f835 	bl	800fcbc <__malloc_unlock>
 800fc52:	f026 0607 	bic.w	r6, r6, #7
 800fc56:	1d23      	adds	r3, r4, #4
 800fc58:	1af2      	subs	r2, r6, r3
 800fc5a:	d0b6      	beq.n	800fbca <_malloc_r+0x22>
 800fc5c:	1b9b      	subs	r3, r3, r6
 800fc5e:	50a3      	str	r3, [r4, r2]
 800fc60:	e7b3      	b.n	800fbca <_malloc_r+0x22>
 800fc62:	6862      	ldr	r2, [r4, #4]
 800fc64:	42a3      	cmp	r3, r4
 800fc66:	bf0c      	ite	eq
 800fc68:	6032      	streq	r2, [r6, #0]
 800fc6a:	605a      	strne	r2, [r3, #4]
 800fc6c:	e7ec      	b.n	800fc48 <_malloc_r+0xa0>
 800fc6e:	4623      	mov	r3, r4
 800fc70:	6864      	ldr	r4, [r4, #4]
 800fc72:	e7b2      	b.n	800fbda <_malloc_r+0x32>
 800fc74:	4634      	mov	r4, r6
 800fc76:	6876      	ldr	r6, [r6, #4]
 800fc78:	e7b9      	b.n	800fbee <_malloc_r+0x46>
 800fc7a:	230c      	movs	r3, #12
 800fc7c:	603b      	str	r3, [r7, #0]
 800fc7e:	4638      	mov	r0, r7
 800fc80:	f000 f81c 	bl	800fcbc <__malloc_unlock>
 800fc84:	e7a1      	b.n	800fbca <_malloc_r+0x22>
 800fc86:	6025      	str	r5, [r4, #0]
 800fc88:	e7de      	b.n	800fc48 <_malloc_r+0xa0>
 800fc8a:	bf00      	nop
 800fc8c:	200025a0 	.word	0x200025a0

0800fc90 <_sbrk_r>:
 800fc90:	b538      	push	{r3, r4, r5, lr}
 800fc92:	4d06      	ldr	r5, [pc, #24]	; (800fcac <_sbrk_r+0x1c>)
 800fc94:	2300      	movs	r3, #0
 800fc96:	4604      	mov	r4, r0
 800fc98:	4608      	mov	r0, r1
 800fc9a:	602b      	str	r3, [r5, #0]
 800fc9c:	f7f4 f996 	bl	8003fcc <_sbrk>
 800fca0:	1c43      	adds	r3, r0, #1
 800fca2:	d102      	bne.n	800fcaa <_sbrk_r+0x1a>
 800fca4:	682b      	ldr	r3, [r5, #0]
 800fca6:	b103      	cbz	r3, 800fcaa <_sbrk_r+0x1a>
 800fca8:	6023      	str	r3, [r4, #0]
 800fcaa:	bd38      	pop	{r3, r4, r5, pc}
 800fcac:	200025a8 	.word	0x200025a8

0800fcb0 <__malloc_lock>:
 800fcb0:	4801      	ldr	r0, [pc, #4]	; (800fcb8 <__malloc_lock+0x8>)
 800fcb2:	f000 b809 	b.w	800fcc8 <__retarget_lock_acquire_recursive>
 800fcb6:	bf00      	nop
 800fcb8:	200025ac 	.word	0x200025ac

0800fcbc <__malloc_unlock>:
 800fcbc:	4801      	ldr	r0, [pc, #4]	; (800fcc4 <__malloc_unlock+0x8>)
 800fcbe:	f000 b804 	b.w	800fcca <__retarget_lock_release_recursive>
 800fcc2:	bf00      	nop
 800fcc4:	200025ac 	.word	0x200025ac

0800fcc8 <__retarget_lock_acquire_recursive>:
 800fcc8:	4770      	bx	lr

0800fcca <__retarget_lock_release_recursive>:
 800fcca:	4770      	bx	lr

0800fccc <_init>:
 800fccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcce:	bf00      	nop
 800fcd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcd2:	bc08      	pop	{r3}
 800fcd4:	469e      	mov	lr, r3
 800fcd6:	4770      	bx	lr

0800fcd8 <_fini>:
 800fcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcda:	bf00      	nop
 800fcdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcde:	bc08      	pop	{r3}
 800fce0:	469e      	mov	lr, r3
 800fce2:	4770      	bx	lr
